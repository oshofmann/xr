var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  scsi_lib.c Copyright (C) 1999 Eric Youngdale</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  SCSI queueing library.</span>", 
"<span class=\"comment\"> *      Initial versions: Eric Youngdale (eric@andante.org).</span>", 
"<span class=\"comment\"> *                        Based upon conversations with large numbers</span>", 
"<span class=\"comment\"> *                        of people at Linux Expo.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempool\">mempool</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi\">scsi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_dbg\">scsi_dbg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_device\">scsi_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_driver\">scsi_driver</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_eh\">scsi_eh</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_host\">scsi_host</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"scsi_priv.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"scsi_logging.h\"", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_MEMPOOL_NR\">SG_MEMPOOL_NR</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#scsi_sg_pools\">scsi_sg_pools</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_MEMPOOL_SIZE\">SG_MEMPOOL_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"", 
"struct <a class=\"id\" href=\"#scsi_host_sg_pool\">scsi_host_sg_pool</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a><span class=\"ts\"/>*<a class=\"id\" href=\"#slab\">slab</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_t\">mempool_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#pool\">pool</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SP\">SP</a>(<a class=\"id\" href=\"#x\">x</a>) { <a class=\"id\" href=\"#x\">x</a>, \"sgpool-\" <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#x\">x</a>) }", 
"#if (<a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a> &lt; 32)", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a> <a class=\"id\" href=\"#is\">is</a> <a class=\"id\" href=\"#too\">too</a> <a class=\"id\" href=\"#small\">small</a> (<a class=\"id\" href=\"#must\">must</a> <a class=\"id\" href=\"#be\">be</a> 32 <a class=\"id\" href=\"#or\">or</a> <a class=\"id\" href=\"#greater\">greater</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"static struct <a class=\"id\" href=\"#scsi_host_sg_pool\">scsi_host_sg_pool</a> <a class=\"id\" href=\"#scsi_sg_pools\">scsi_sg_pools</a>[] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SP\">SP</a>(8),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SP\">SP</a>(16),", 
"#if (<a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a> &gt; 32)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SP\">SP</a>(32),", 
"#if (<a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a> &gt; 64)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SP\">SP</a>(64),", 
"#if (<a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a> &gt; 128)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SP\">SP</a>(128),", 
"#if (<a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a> &gt; 256)", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a> <a class=\"id\" href=\"#is\">is</a> <a class=\"id\" href=\"#too\">too</a> <a class=\"id\" href=\"#large\">large</a> (256 <a class=\"id\" href=\"#MAX\">MAX</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SP\">SP</a>(<a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a>)", 
"};", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SP\">SP</a>", 
"", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#scsi_sdb_cache\">scsi_sdb_cache</a>;", 
"", 
"static void <a class=\"id\" href=\"#scsi_run_queue\">scsi_run_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:<span class=\"ts\"/>scsi_unprep_request()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:<span class=\"ts\"/>Remove all preparation done for a request, including its</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>associated scsi_cmnd, so that it can be requeued.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:<span class=\"ts\"/>req<span class=\"ts\"/>- request to unprepare</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status:<span class=\"ts\"/>Assumed that no locks are held upon entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>Nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_unprep_request\">scsi_unprep_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_unprep_request\">blk_unprep_request</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_put_command\">scsi_put_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __scsi_queue_insert - private queue insertion</span>", 
"<span class=\"comment\"> * @cmd: The SCSI command being requeued</span>", 
"<span class=\"comment\"> * @reason:  The reason for the requeue</span>", 
"<span class=\"comment\"> * @unbusy: Whether the queue should be unbusied</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a private queue insertion.  The public interface</span>", 
"<span class=\"comment\"> * scsi_queue_insert() always assumes the queue should be unbusied</span>", 
"<span class=\"comment\"> * because it's always called before the completion.  This function is</span>", 
"<span class=\"comment\"> * for a requeue after completion, which should only occur in this</span>", 
"<span class=\"comment\"> * file.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__scsi_queue_insert\">__scsi_queue_insert</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, int <a class=\"id\" href=\"#reason\">reason</a>, int <a class=\"id\" href=\"#unbusy\">unbusy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_MLQUEUE\">SCSI_LOG_MLQUEUE</a>(1,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#printk\">printk</a>(\"Inserting command %p into mlqueue\\n\", <a class=\"id\" href=\"#cmd\">cmd</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the appropriate busy bit for the device/host.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the host/device isn't busy, assume that something actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completed, and that we should be able to queue a command now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that the prior mid-layer assumption that any host could</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * always queue at least one command is now broken.  The mid-layer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will implement a user specifiable stall (see</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scsi_host.max_host_blocked and scsi_device.max_device_blocked)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if a command is requeued with no other commands outstanding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * either for the device or for the host.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#reason\">reason</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCSI_MLQUEUE_HOST_BUSY\">SCSI_MLQUEUE_HOST_BUSY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_blocked\">host_blocked</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#max_host_blocked\">max_host_blocked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCSI_MLQUEUE_DEVICE_BUSY\">SCSI_MLQUEUE_DEVICE_BUSY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_blocked\">device_blocked</a> = <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#max_device_blocked\">max_device_blocked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCSI_MLQUEUE_TARGET_BUSY\">SCSI_MLQUEUE_TARGET_BUSY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#target_blocked\">target_blocked</a> = <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#max_target_blocked\">max_target_blocked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Decrement the counters, since these commands are no longer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * active on the host/device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unbusy\">unbusy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_unbusy\">scsi_device_unbusy</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Requeue this command.  It will go before all other commands</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that are already in the queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: there is magic here about the way the queue is plugged if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we have no outstanding commands.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Although we *don't* plug the queue, we call the request</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function.  The SCSI request function detects the blocked condition</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and plugs the queue appropriately.</span>", 
"<span class=\"comment\">         */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_requeue_request\">blk_requeue_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_queue\">scsi_run_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_queue_insert()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Insert a command in the midlevel queue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   cmd    - command that we are adding to queue.</span>", 
"<span class=\"comment\"> *              reason - why we are inserting command to queue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: Assumed that lock is not held upon entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       We do this for one of two cases.  Either the host is busy</span>", 
"<span class=\"comment\"> *              and it cannot accept any more commands for the time being,</span>", 
"<span class=\"comment\"> *              or the device returned QUEUE_FULL and can accept no more</span>", 
"<span class=\"comment\"> *              commands.</span>", 
"<span class=\"comment\"> * Notes:       This could be called either from an interrupt context or a</span>", 
"<span class=\"comment\"> *              normal process context.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_queue_insert\">scsi_queue_insert</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, int <a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__scsi_queue_insert\">__scsi_queue_insert</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#reason\">reason</a>, 1);", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_execute - insert request and wait for the result</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>scsi device</span>", 
"<span class=\"comment\"> * @cmd:<span class=\"ts\"/>scsi command</span>", 
"<span class=\"comment\"> * @data_direction: data direction</span>", 
"<span class=\"comment\"> * @buffer:<span class=\"ts\"/>data buffer</span>", 
"<span class=\"comment\"> * @bufflen:<span class=\"ts\"/>len of buffer</span>", 
"<span class=\"comment\"> * @sense:<span class=\"ts\"/>optional sense buffer</span>", 
"<span class=\"comment\"> * @timeout:<span class=\"ts\"/>request timeout in seconds</span>", 
"<span class=\"comment\"> * @retries:<span class=\"ts\"/>number of times to retry request</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>or into request flags;</span>", 
"<span class=\"comment\"> * @resid:<span class=\"ts\"/>optional residual length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns the req-&gt;errors value which is the scsi_cmnd result</span>", 
"<span class=\"comment\"> * field.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_execute\">scsi_execute</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, const unsigned char *<a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#data_direction\">data_direction</a>, void *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned <a class=\"id\" href=\"#bufflen\">bufflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned char *<a class=\"id\" href=\"#sense\">sense</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>, int <a class=\"id\" href=\"#retries\">retries</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> int *<a class=\"id\" href=\"#resid\">resid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#write\">write</a> = (<a class=\"id\" href=\"#data_direction\">data_direction</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#DRIVER_ERROR\">DRIVER_ERROR</a> << 24;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#blk_get_request\">blk_get_request</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bufflen\">bufflen</a> &&<span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_map_kern\">blk_rq_map_kern</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#bufflen\">bufflen</a>, <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#COMMAND_SIZE\">COMMAND_SIZE</a>(<a class=\"id\" href=\"#cmd\">cmd</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#sense\">sense</a> = <a class=\"id\" href=\"#sense\">sense</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#sense_len\">sense_len</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#retries\">retries</a> = <a class=\"id\" href=\"#retries\">retries</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> = <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#REQ_QUIET\">REQ_QUIET</a> | <a class=\"id\" href=\"#REQ_PREEMPT\">REQ_PREEMPT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * head injection *required* here otherwise quiesce won't work</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_execute_rq\">blk_execute_rq</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#req\">req</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some devices (USB mass-storage in particular) may transfer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * garbage data together with a residue indicating that the data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is invalid.  Prevent the garbage from being misinterpreted</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and prevent security leaks by zeroing out the excess data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a> &gt; 0 && <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a> <= <a class=\"id\" href=\"#bufflen\">bufflen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + (<a class=\"id\" href=\"#bufflen\">bufflen</a> - <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a>), 0, <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#resid\">resid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#resid\">resid</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#errors\">errors</a>;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_put_request\">blk_put_request</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_execute\">scsi_execute</a>);", 
"", 
"", 
"int <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, const unsigned char *<a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#data_direction\">data_direction</a>, void *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned <a class=\"id\" href=\"#bufflen\">bufflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>, int <a class=\"id\" href=\"#retries\">retries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int *<a class=\"id\" href=\"#resid\">resid</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sense\">sense</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sense\">sense</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sense\">sense</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DRIVER_ERROR\">DRIVER_ERROR</a> << 24;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scsi_execute\">scsi_execute</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#data_direction\">data_direction</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#bufflen\">bufflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sense\">sense</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#retries\">retries</a>, 0, <a class=\"id\" href=\"#resid\">resid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_normalize_sense\">scsi_normalize_sense</a>(<a class=\"id\" href=\"#sense\">sense</a>, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>, <a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sense\">sense</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_init_cmd_errh()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Initialize cmd fields related to error handling.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   cmd<span class=\"ts\"/>- command that is ready to be queued.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       This function has the job of initializing a number of</span>", 
"<span class=\"comment\"> *              fields related to error handling.   Typically this will</span>", 
"<span class=\"comment\"> *              be called once for each command, as required.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_init_cmd_errh\">scsi_init_cmd_errh</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#serial_number\">serial_number</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_set_resid\">scsi_set_resid</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, 0, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#scsi_command_size\">scsi_command_size</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#scsi_device_unbusy\">scsi_device_unbusy</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_busy\">host_busy</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#target_busy\">target_busy</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsi_host_in_recovery\">scsi_host_in_recovery</a>(<a class=\"id\" href=\"#shost\">shost</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_failed\">host_failed</a> || <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_eh_scheduled\">host_eh_scheduled</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_wakeup\">scsi_eh_wakeup</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called for single_lun devices on IO completion. Clear starget_sdev_user,</span>", 
"<span class=\"comment\"> * and call blk_run_queue for all the scsi_devices on the target -</span>", 
"<span class=\"comment\"> * including current_sdev first.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with *no* scsi locks held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_single_lun_run\">scsi_single_lun_run</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#current_sdev\">current_sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#current_sdev\">current_sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#current_sdev\">current_sdev</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_sdev_user\">starget_sdev_user</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Call blk_run_queue for all LUNs on the target, starting with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current_sdev. We race with others (to set starget_sdev_user),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but in most cases, we will be first. Ideally, each LU on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * target would get some limited time or requests on the target.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_run_queue\">blk_run_queue</a>(<a class=\"id\" href=\"#current_sdev\">current_sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_sdev_user\">starget_sdev_user</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#devices\">devices</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#same_target_siblings\">same_target_siblings</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a> == <a class=\"id\" href=\"#current_sdev\">current_sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_run_queue\">blk_run_queue</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#scsi_device_is_busy\">scsi_device_is_busy</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a> >= <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a> || <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_blocked\">device_blocked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#scsi_target_is_busy\">scsi_target_is_busy</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#can_queue\">can_queue</a> &gt; 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#target_busy\">target_busy</a> >= <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#can_queue\">can_queue</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#target_blocked\">target_blocked</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#scsi_host_is_busy\">scsi_host_is_busy</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#can_queue\">can_queue</a> &gt; 0 && <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_busy\">host_busy</a> >= <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#can_queue\">can_queue</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_blocked\">host_blocked</a> || <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_self_blocked\">host_self_blocked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:<span class=\"ts\"/>scsi_run_queue()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:<span class=\"ts\"/>Select a proper request queue to serve next</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:<span class=\"ts\"/>q<span class=\"ts\"/>- last request's queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:<span class=\"ts\"/>The previous command was completely finished, start</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>a new one if possible.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_run_queue\">scsi_run_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#starved_list\">starved_list</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#sdev\">sdev</a>)-><a class=\"id\" href=\"#single_lun\">single_lun</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_single_lun_run\">scsi_single_lun_run</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#starved_list\">starved_list</a>, &amp;<a class=\"id\" href=\"#starved_list\">starved_list</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#starved_list\">starved_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#flagset\">flagset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * As long as shost is accepting commands and we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * starved queues, call blk_run_queue. scsi_request_fn</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * drops the queue_lock and can add us back to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * starved_list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * host_lock protects the starved_list and starved_entry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * scsi_request_fn must get the host_lock before checking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or modifying starved_list or starved_entry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_is_busy\">scsi_host_is_busy</a>(<a class=\"id\" href=\"#shost\">shost</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#starved_list\">starved_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a>, <a class=\"id\" href=\"#starved_entry\">starved_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_target_is_busy\">scsi_target_is_busy</a>(<a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#starved_list\">starved_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flagset\">flagset</a> = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_REENTER\">QUEUE_FLAG_REENTER</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_REENTER\">QUEUE_FLAG_REENTER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flagset\">flagset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set\">queue_flag_set</a>(<a class=\"id\" href=\"#QUEUE_FLAG_REENTER\">QUEUE_FLAG_REENTER</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blk_run_queue\">__blk_run_queue</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flagset\">flagset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear\">queue_flag_clear</a>(<a class=\"id\" href=\"#QUEUE_FLAG_REENTER\">QUEUE_FLAG_REENTER</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* put any unprocessed entries back */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#starved_list\">starved_list</a>, &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#starved_list\">starved_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_run_queue\">blk_run_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:<span class=\"ts\"/>scsi_requeue_command()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:<span class=\"ts\"/>Handle post-processing of completed commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:<span class=\"ts\"/>q<span class=\"ts\"/>- queue to operate on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>cmd<span class=\"ts\"/>- command that may need to be requeued.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:<span class=\"ts\"/>After command completion, there may be blocks left</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>over which weren't finished by the previous command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>this can be for a number of reasons - the main one is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>I/O errors in the middle of the request, in which case</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>we need to request the blocks that come after the bad</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>sector.</span>", 
"<span class=\"comment\"> * Notes:<span class=\"ts\"/>Upon return, cmd is a stale pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_requeue_command\">scsi_requeue_command</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_unprep_request\">scsi_unprep_request</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_requeue_request\">blk_requeue_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_queue\">scsi_run_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#scsi_next_command\">scsi_next_command</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need to hold a reference on the device before we let go of the cmd */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_put_command\">scsi_put_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_queue\">scsi_run_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ok to remove device now */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#scsi_run_host_queues\">scsi_run_host_queues</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost_for_each_device\">shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_queue\">scsi_run_queue</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__scsi_release_buffers\">__scsi_release_buffers</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *, int);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_end_request()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Post-processing of completed commands (usually invoked at end</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>of upper level post-processing and scsi_io_completion).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   cmd<span class=\"ts\"/> - command that is complete.</span>", 
"<span class=\"comment\"> *              error    - 0 if I/O indicates success, &lt; 0 for I/O error.</span>", 
"<span class=\"comment\"> *              bytes    - number of bytes of completed I/O</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>requeue  - indicates whether we should requeue leftovers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: Assumed that lock is not held upon entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     cmd if requeue required, NULL otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       This is called for block device requests in order to</span>", 
"<span class=\"comment\"> *              mark some number of sectors as complete.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>We are guaranteeing that the request queue will be goosed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>at some point during this call.</span>", 
"<span class=\"comment\"> * Notes:<span class=\"ts\"/>If cmd was requeued, upon return it will be a stale pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scsi_end_request\">scsi_end_request</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, int <a class=\"id\" href=\"#error\">error</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#bytes\">bytes</a>, int <a class=\"id\" href=\"#requeue\">requeue</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there are blocks left over at the end, set up the command</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to queue the remainder of them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_end_request\">blk_end_request</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#bytes\">bytes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kill remainder if no retrys */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> && <a class=\"id\" href=\"#scsi_noretry_cmd\">scsi_noretry_cmd</a>(<a class=\"id\" href=\"#cmd\">cmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_end_request_all\">blk_end_request_all</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#requeue\">requeue</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Bleah.  Leftovers again.  Stick the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * leftovers in the front of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * queue, and goose the queue again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_release_buffers\">scsi_release_buffers</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_requeue_command\">scsi_requeue_command</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This will goose the queue request function at the end, so we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to worry about launching another command.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__scsi_release_buffers\">__scsi_release_buffers</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_next_command\">scsi_next_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#scsi_sgtable_index\">scsi_sgtable_index</a>(unsigned short <a class=\"id\" href=\"#nents\">nents</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#nents\">nents</a> &gt; <a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nents\">nents</a> <= 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#get_count_order\">get_count_order</a>(<a class=\"id\" href=\"#nents\">nents</a>) - 3;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_sg_free\">scsi_sg_free</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, unsigned int <a class=\"id\" href=\"#nents\">nents</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_sg_pool\">scsi_host_sg_pool</a> *<a class=\"id\" href=\"#sgp\">sgp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sgp\">sgp</a> = <a class=\"id\" href=\"#scsi_sg_pools\">scsi_sg_pools</a> + <a class=\"id\" href=\"#scsi_sgtable_index\">scsi_sgtable_index</a>(<a class=\"id\" href=\"#nents\">nents</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#pool\">pool</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#scsi_sg_alloc\">scsi_sg_alloc</a>(unsigned int <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_sg_pool\">scsi_host_sg_pool</a> *<a class=\"id\" href=\"#sgp\">sgp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sgp\">sgp</a> = <a class=\"id\" href=\"#scsi_sg_pools\">scsi_sg_pools</a> + <a class=\"id\" href=\"#scsi_sgtable_index\">scsi_sgtable_index</a>(<a class=\"id\" href=\"#nents\">nents</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#scsi_alloc_sgtable\">scsi_alloc_sgtable</a>(struct <a class=\"id\" href=\"#scsi_data_buffer\">scsi_data_buffer</a> *<a class=\"id\" href=\"#sdb\">sdb</a>, int <a class=\"id\" href=\"#nents\">nents</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#nents\">nents</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__sg_alloc_table\">__sg_alloc_table</a>(&amp;<a class=\"id\" href=\"#sdb\">sdb</a>-><a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#scsi_sg_alloc\">scsi_sg_alloc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sg_free_table\">__sg_free_table</a>(&amp;<a class=\"id\" href=\"#sdb\">sdb</a>-><a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_sg_free\">scsi_sg_free</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_free_sgtable\">scsi_free_sgtable</a>(struct <a class=\"id\" href=\"#scsi_data_buffer\">scsi_data_buffer</a> *<a class=\"id\" href=\"#sdb\">sdb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sg_free_table\">__sg_free_table</a>(&amp;<a class=\"id\" href=\"#sdb\">sdb</a>-><a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#SCSI_MAX_SG_SEGMENTS\">SCSI_MAX_SG_SEGMENTS</a>, <a class=\"id\" href=\"#scsi_sg_free\">scsi_sg_free</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__scsi_release_buffers\">__scsi_release_buffers</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, int <a class=\"id\" href=\"#do_bidi_check\">do_bidi_check</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>.<a class=\"id\" href=\"#table\">table</a>.<a class=\"id\" href=\"#nents\">nents</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_free_sgtable\">scsi_free_sgtable</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>, 0, sizeof(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_bidi_check\">do_bidi_check</a> && <a class=\"id\" href=\"#scsi_bidi_cmnd\">scsi_bidi_cmnd</a>(<a class=\"id\" href=\"#cmd\">cmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_data_buffer\">scsi_data_buffer</a> *<a class=\"id\" href=\"#bidi_sdb\">bidi_sdb</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>-><a class=\"id\" href=\"#special\">special</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_free_sgtable\">scsi_free_sgtable</a>(<a class=\"id\" href=\"#bidi_sdb\">bidi_sdb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#scsi_sdb_cache\">scsi_sdb_cache</a>, <a class=\"id\" href=\"#bidi_sdb\">bidi_sdb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>-><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_prot_sg_count\">scsi_prot_sg_count</a>(<a class=\"id\" href=\"#cmd\">cmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_free_sgtable\">scsi_free_sgtable</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_release_buffers()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Completion processing for block device I/O requests.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   cmd<span class=\"ts\"/>- command that we are bailing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: Assumed that no lock is held upon entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       In the event that an upper level driver rejects a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>command, we must release resources allocated during</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>the __init_io() function.  Primarily this would involve</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>the scatter-gather table, and potentially any bounce</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>buffers.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_release_buffers\">scsi_release_buffers</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__scsi_release_buffers\">__scsi_release_buffers</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_release_buffers\">scsi_release_buffers</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_io_completion()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Completion processing for block device I/O requests.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   cmd   - command that is finished.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: Assumed that no lock is held upon entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       This function is matched in terms of capabilities to</span>", 
"<span class=\"comment\"> *              the function that created the scatter-gather list.</span>", 
"<span class=\"comment\"> *              In other words, if there are no bounce buffers</span>", 
"<span class=\"comment\"> *              (the normal case for most drivers), we don't need</span>", 
"<span class=\"comment\"> *              the logic to deal with cleaning up afterwards.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>We must call scsi_end_request().  This will finish off</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>the specified number of sectors.  If we are done, the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>command block will be released and the queue function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>will be goosed.  If we are not done then we have to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>figure out what to do next:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>a) We can call scsi_requeue_command().  The request</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   will be unprepared and put back on the queue.  Then</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   a new command will be created for it.  This should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   be used if we made forward progress, or if we want</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   to switch from READ(10) to READ(6) for example.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>b) We can call scsi_queue_insert().  The request will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   be put back on the queue and retried using the same</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   command as before, possibly after a delay.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>c) We can call blk_end_request() with -EIO to fail</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   the remainder of the request.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_io_completion\">scsi_io_completion</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, unsigned int <a class=\"id\" href=\"#good_bytes\">good_bytes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sense_valid\">sense_valid</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sense_deferred\">sense_deferred</a> = 0;", 
"<span class=\"ts\"/>enum {<a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>, <a class=\"id\" href=\"#ACTION_REPREP\">ACTION_REPREP</a>, <a class=\"id\" href=\"#ACTION_RETRY\">ACTION_RETRY</a>,", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#ACTION_DELAYED_RETRY\">ACTION_DELAYED_RETRY</a>} <a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#description\">description</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sense_valid\">sense_valid</a> = <a class=\"id\" href=\"#scsi_command_normalize_sense\">scsi_command_normalize_sense</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sense_deferred\">sense_deferred</a> = <a class=\"id\" href=\"#scsi_sense_is_deferred\">scsi_sense_is_deferred</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>) { <span class=\"comment\">/* SG_IO ioctl from block level */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#errors\">errors</a> = <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a> && <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#sense\">sense</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * SG_IO wants current and deferred errors</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 8 + <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[7];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#sense\">sense</a>, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>,  <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#sense_len\">sense_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sense_deferred\">sense_deferred</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a> = <a class=\"id\" href=\"#scsi_get_resid\">scsi_get_resid</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_bidi_cmnd\">scsi_bidi_cmnd</a>(<a class=\"id\" href=\"#cmd\">cmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Bidi commands Must be complete as a whole,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * both sides at once.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a> = <a class=\"id\" href=\"#scsi_in\">scsi_in</a>(<a class=\"id\" href=\"#cmd\">cmd</a>)-><a class=\"id\" href=\"#resid\">resid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_release_buffers\">scsi_release_buffers</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_end_request_all\">blk_end_request_all</a>(<a class=\"id\" href=\"#req\">req</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_next_command\">scsi_next_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no bidi support for !REQ_TYPE_BLOCK_PC yet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#blk_bidi_rq\">blk_bidi_rq</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Next deal with any sectors which we were able to correctly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_HLCOMPLETE\">SCSI_LOG_HLCOMPLETE</a>(1, <a class=\"id\" href=\"#printk\">printk</a>(\"%u sectors total, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%d bytes done.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#req\">req</a>), <a class=\"id\" href=\"#good_bytes\">good_bytes</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Recovered errors need reporting, but they're always treated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as success, so fiddle the result code here.  For BLOCK_PC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we already took a copy of the original into rq-&gt;errors which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is what gets returned to the user</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a> && (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#RECOVERED_ERROR\">RECOVERED_ERROR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if ATA PASS-THROUGH INFORMATION AVAILABLE skip</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * print since caller wants ATA registers. Only occurs on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SCSI ATA PASS_THROUGH commands when CK_COND=1</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x0) && (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x1d))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (!(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_QUIET\">REQ_QUIET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_sense\">scsi_print_sense</a>(\"\", <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BLOCK_PC may have set error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A number of bytes were successfully read.  If there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are leftovers and there is some kind of error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (result != 0), retry the rest.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_end_request\">scsi_end_request</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#good_bytes\">good_bytes</a>, <a class=\"id\" href=\"#result\">result</a> == 0) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host_byte\">host_byte</a>(<a class=\"id\" href=\"#result\">result</a>) == <a class=\"id\" href=\"#DID_RESET\">DID_RESET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Third party bus reset or reset for error recovery</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reasons.  Just retry the command and see what</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * happens.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_RETRY\">ACTION_RETRY</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a> && !<a class=\"id\" href=\"#sense_deferred\">sense_deferred</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#removable\">removable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Detected disc change.  Set a bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and quietly refuse further access.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#description\">description</a> = \"Media Changed\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Must have been a power glitch, or a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bus reset.  Could not have been a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * media change, so we just retry the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * command and see what happens.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_RETRY\">ACTION_RETRY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we had an ILLEGAL REQUEST returned, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we may have performed an unsupported</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * command.  The only thing this should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * would be a ten byte read where only a six</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * byte read was supported.  Also, on a system</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * where READ CAPACITY failed, we may have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * read past the end of the disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#use_10_for_rw\">use_10_for_rw</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x20 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x00) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[0] == <a class=\"id\" href=\"#READ_10\">READ_10</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[0] == <a class=\"id\" href=\"#WRITE_10\">WRITE_10</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This will issue a new 6-byte command. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#use_10_for_rw\">use_10_for_rw</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_REPREP\">ACTION_REPREP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x10) <span class=\"comment\">/* DIX */</span> {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#description\">description</a> = \"Host Data Integrity Failure\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EILSEQ\">EILSEQ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x10) { <span class=\"comment\">/* DIF */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#description\">description</a> = \"Target Data Integrity Failure\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EILSEQ\">EILSEQ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#NOT_READY\">NOT_READY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the device is in the process of becoming</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ready, or has a temporary blockage, retry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x04) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0x01: <span class=\"comment\">/* becoming ready */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0x04: <span class=\"comment\">/* format in progress */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0x05: <span class=\"comment\">/* rebuild in progress */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0x06: <span class=\"comment\">/* recalculation in progress */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0x07: <span class=\"comment\">/* operation in progress */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0x08: <span class=\"comment\">/* Long write in progress */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0x09: <span class=\"comment\">/* self test in progress */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0x14: <span class=\"comment\">/* space allocation in progress */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_DELAYED_RETRY\">ACTION_DELAYED_RETRY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#description\">description</a> = \"Device not ready\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#description\">description</a> = \"Device not ready\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#VOLUME_OVERFLOW\">VOLUME_OVERFLOW</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See SSC3rXX or current. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#description\">description</a> = \"Unhandled sense code\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#description\">description</a> = \"Unhandled error code\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACTION_FAIL\">ACTION_FAIL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Give up and fail the remainder of the request */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_release_buffers\">scsi_release_buffers</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_QUIET\">REQ_QUIET</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#description\">description</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd_printk\">scmd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, \"%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#description\">description</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_result\">scsi_print_result</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#result\">result</a>) &amp; <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_sense\">scsi_print_sense</a>(\"\", <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_command\">scsi_print_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_end_request_err\">blk_end_request_err</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#error\">error</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_requeue_command\">scsi_requeue_command</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_next_command\">scsi_next_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACTION_REPREP\">ACTION_REPREP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unprep the request and put it back at the head of the queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A new command will be prepared and issued.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_release_buffers\">scsi_release_buffers</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_requeue_command\">scsi_requeue_command</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACTION_RETRY\">ACTION_RETRY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Retry the same command immediately */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_queue_insert\">__scsi_queue_insert</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#SCSI_MLQUEUE_EH_RETRY\">SCSI_MLQUEUE_EH_RETRY</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACTION_DELAYED_RETRY\">ACTION_DELAYED_RETRY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Retry the same command after a delay */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_queue_insert\">__scsi_queue_insert</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#SCSI_MLQUEUE_DEVICE_BUSY\">SCSI_MLQUEUE_DEVICE_BUSY</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#scsi_init_sgtable\">scsi_init_sgtable</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, struct <a class=\"id\" href=\"#scsi_data_buffer\">scsi_data_buffer</a> *<a class=\"id\" href=\"#sdb\">sdb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If sg table allocation fails, requeue request later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsi_alloc_sgtable\">scsi_alloc_sgtable</a>(<a class=\"id\" href=\"#sdb\">sdb</a>, <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_DEFER\">BLKPREP_DEFER</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Next, walk the list, and fill in the addresses and sizes of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * each segment.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#blk_rq_map_sg\">blk_rq_map_sg</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#sdb\">sdb</a>-><a class=\"id\" href=\"#table\">table</a>.<a class=\"id\" href=\"#sgl\">sgl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#sdb\">sdb</a>-><a class=\"id\" href=\"#table\">table</a>.<a class=\"id\" href=\"#nents\">nents</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdb\">sdb</a>-><a class=\"id\" href=\"#table\">table</a>.<a class=\"id\" href=\"#nents\">nents</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdb\">sdb</a>-><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_init_io()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     SCSI I/O initialize function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   cmd   - Command descriptor we wish to initialize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     0 on success</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>BLKPREP_DEFER if the failure is retryable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>BLKPREP_KILL if the failure is fatal</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_init_io\">scsi_init_io</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#scsi_init_sgtable\">scsi_init_sgtable</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>, &amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_exit\">err_exit</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_bidi_rq\">blk_bidi_rq</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_data_buffer\">scsi_data_buffer</a> *<a class=\"id\" href=\"#bidi_sdb\">bidi_sdb</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_sdb_cache\">scsi_sdb_cache</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bidi_sdb\">bidi_sdb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#BLKPREP_DEFER\">BLKPREP_DEFER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_exit\">err_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>-><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#bidi_sdb\">bidi_sdb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#scsi_init_sgtable\">scsi_init_sgtable</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>, <a class=\"id\" href=\"#bidi_sdb\">bidi_sdb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_exit\">err_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_integrity_rq\">blk_integrity_rq</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_data_buffer\">scsi_data_buffer</a> *<a class=\"id\" href=\"#prot_sdb\">prot_sdb</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ivecs\">ivecs</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#prot_sdb\">prot_sdb</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ivecs\">ivecs</a> = <a class=\"id\" href=\"#blk_rq_count_integrity_sg\">blk_rq_count_integrity_sg</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_alloc_sgtable\">scsi_alloc_sgtable</a>(<a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>, <a class=\"id\" href=\"#ivecs\">ivecs</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#BLKPREP_DEFER\">BLKPREP_DEFER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_exit\">err_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#blk_rq_map_integrity_sg\">blk_rq_map_integrity_sg</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>-><a class=\"id\" href=\"#table\">table</a>.<a class=\"id\" href=\"#sgl\">sgl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#ivecs\">ivecs</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a> = <a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>-><a class=\"id\" href=\"#table\">table</a>.<a class=\"id\" href=\"#nents\">nents</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a> ;", 
"", 
"<a class=\"id\" href=\"#err_exit\">err_exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_release_buffers\">scsi_release_buffers</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_put_command\">scsi_put_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_init_io\">scsi_init_io</a>);", 
"", 
"static struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scsi_get_cmd_from_req\">scsi_get_cmd_from_req</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#scsi_get_command\">scsi_get_command</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cmd\">cmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pull a tag out of the request if we have one */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#tag\">tag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a> = <a class=\"id\" href=\"#req\">req</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#scsi_setup_blk_pc_cmnd\">scsi_setup_blk_pc_cmnd</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#scsi_prep_state_check\">scsi_prep_state_check</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#scsi_get_cmd_from_req\">scsi_get_cmd_from_req</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cmd\">cmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_DEFER\">BLKPREP_DEFER</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * BLOCK_PC requests may transfer data, in which case they must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a bio attached to them.  Or they might contain a SCSI command</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that does not transfer data, in which case they may optionally</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * submit a request without an attached bio.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#scsi_init_io\">scsi_init_io</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>, 0, sizeof(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#req\">req</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> = <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#req\">req</a>) == <a class=\"id\" href=\"#WRITE\">WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> = <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> = <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#transfersize\">transfersize</a> = <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#allowed\">allowed</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#retries\">retries</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_setup_blk_pc_cmnd\">scsi_setup_blk_pc_cmnd</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup a REQ_TYPE_FS command.  These are simple read/write request</span>", 
"<span class=\"comment\"> * from filesystems that still need to be translated to SCSI CDBs from</span>", 
"<span class=\"comment\"> * the ULD.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_setup_fs_cmnd\">scsi_setup_fs_cmnd</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#scsi_prep_state_check\">scsi_prep_state_check</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_dh_data\">scsi_dh_data</a> && <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_dh_data\">scsi_dh_data</a>-><a class=\"id\" href=\"#scsi_dh\">scsi_dh</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> && <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_dh_data\">scsi_dh_data</a>-><a class=\"id\" href=\"#scsi_dh\">scsi_dh</a>-><a class=\"id\" href=\"#prep_fn\">prep_fn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_dh_data\">scsi_dh_data</a>-><a class=\"id\" href=\"#scsi_dh\">scsi_dh</a>-><a class=\"id\" href=\"#prep_fn\">prep_fn</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Filesystem requests must transfer data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#scsi_get_cmd_from_req\">scsi_get_cmd_from_req</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cmd\">cmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_DEFER\">BLKPREP_DEFER</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>, 0, <a class=\"id\" href=\"#BLK_MAX_CDB\">BLK_MAX_CDB</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scsi_init_io\">scsi_init_io</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_setup_fs_cmnd\">scsi_setup_fs_cmnd</a>);", 
"", 
"int <a class=\"id\" href=\"#scsi_prep_state_check\">scsi_prep_state_check</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the device is not in running state we will reject some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or all commands.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> != <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_OFFLINE\">SDEV_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the device is offline we refuse to process any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * commands.  The device must be brought online</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * before trying any recovery commands.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"rejecting I/O to offline device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#BLKPREP_KILL\">BLKPREP_KILL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_DEL\">SDEV_DEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the device is fully deleted, we refuse to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * process any commands as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"rejecting I/O to dead device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#BLKPREP_KILL\">BLKPREP_KILL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_QUIESCE\">SDEV_QUIESCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_BLOCK\">SDEV_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED_BLOCK\">SDEV_CREATED_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the devices is blocked we defer normal commands.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_PREEMPT\">REQ_PREEMPT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#BLKPREP_DEFER\">BLKPREP_DEFER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * For any other not fully online state we only allow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * special commands.  In particular any user initiated</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * command is not allowed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_PREEMPT\">REQ_PREEMPT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#BLKPREP_KILL\">BLKPREP_KILL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_prep_state_check\">scsi_prep_state_check</a>);", 
"", 
"int <a class=\"id\" href=\"#scsi_prep_return\">scsi_prep_return</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, int <a class=\"id\" href=\"#ret\">ret</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BLKPREP_KILL\">BLKPREP_KILL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#errors\">errors</a> = <a class=\"id\" href=\"#DID_NO_CONNECT\">DID_NO_CONNECT</a> << 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* release the command and kill it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_release_buffers\">scsi_release_buffers</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_put_command\">scsi_put_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BLKPREP_DEFER\">BLKPREP_DEFER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we defer, the blk_peek_request() returns NULL, but the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * queue must be restarted, so we plug here if no returning</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * command will automatically do that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_plug_device\">blk_plug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_DONTPREP\">REQ_DONTPREP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_prep_return\">scsi_prep_return</a>);", 
"", 
"int <a class=\"id\" href=\"#scsi_prep_fn\">scsi_prep_fn</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#BLKPREP_KILL\">BLKPREP_KILL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#scsi_setup_blk_pc_cmnd\">scsi_setup_blk_pc_cmnd</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scsi_prep_return\">scsi_prep_return</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_prep_fn\">scsi_prep_fn</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * scsi_dev_queue_ready: if we can send requests to sdev, return 1 else</span>", 
"<span class=\"comment\"> * return 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with the queue_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#scsi_dev_queue_ready\">scsi_dev_queue_ready</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a> == 0 && <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_blocked\">device_blocked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unblock after device_blocked iterates to zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_blocked\">device_blocked</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_MLQUEUE\">SCSI_LOG_MLQUEUE</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"unblocking device at zero depth\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_plug_device\">blk_plug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_device_is_busy\">scsi_device_is_busy</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * scsi_target_queue_ready: checks if there we can send commands to target</span>", 
"<span class=\"comment\"> * @sdev: scsi device on starget to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with the host lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#scsi_target_queue_ready\">scsi_target_queue_ready</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
];
xr_frag_insert('l/ba/bc7497e282872f71eccd1ee05c55310454ca17.xr', __xr_tmp);
