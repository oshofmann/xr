var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_TIMER_H\">_ASM_X86_TIMER_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_TIMER_H\">_ASM_X86_TIMER_H</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TICK_SIZE\">TICK_SIZE</a> (<a class=\"id\" href=\"#tick_nsec\">tick_nsec</a> / 1000)", 
"", 
"unsigned long long <a class=\"id\" href=\"#native_sched_clock\">native_sched_clock</a>(void);", 
"extern int <a class=\"id\" href=\"#recalibrate_cpu_khz\">recalibrate_cpu_khz</a>(void);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>)", 
"extern int <a class=\"id\" href=\"#timer_ack\">timer_ack</a>;", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#timer_ack\">timer_ack</a> (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#no_timer_check\">no_timer_check</a>;", 
"", 
"<span class=\"comment\">/* Accelerators for sched_clock()</span>", 
"<span class=\"comment\"> * convert from cycles(64bits) =&gt; nanoseconds (64bits)</span>", 
"<span class=\"comment\"> *  basic equation:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ns = cycles / (freq / ns_per_sec)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ns = cycles * (ns_per_sec / freq)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ns = cycles * (10^9 / (cpu_khz * 10^3))</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ns = cycles * (10^6 / cpu_khz)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Then we use scaling math (suggested by george@mvista.com) to get:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ns = cycles * (10^6 * SC / cpu_khz) / SC</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ns = cycles * cyc2ns_scale / SC</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>And since SC is a constant power of two, we can convert the div</span>", 
"<span class=\"comment\"> *  into a shift.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  We can use khz divisor instead of mhz to keep a better precision, since</span>", 
"<span class=\"comment\"> *  cyc2ns_scale is limited to 10^6 * 2^10, which fits in 32 bits.</span>", 
"<span class=\"comment\"> *  (mathieu.desnoyers@polymtl.ca)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-johnstul@us.ibm.com \"math is hard, lets go shopping!\"</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#cyc2ns\">cyc2ns</a>);", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(unsigned long long, <a class=\"id\" href=\"#cyc2ns_offset\">cyc2ns_offset</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CYC2NS_SCALE_FACTOR\">CYC2NS_SCALE_FACTOR</a> 10 <span class=\"comment\">/* 2^10, carefully chosen */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long long <a class=\"id\" href=\"#__cycles_2_ns\">__cycles_2_ns</a>(unsigned long long <a class=\"id\" href=\"#cyc\">cyc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cyc2ns_offset\">cyc2ns_offset</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> += <a class=\"id\" href=\"#cyc\">cyc</a> * <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cyc2ns\">cyc2ns</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) >> <a class=\"id\" href=\"#CYC2NS_SCALE_FACTOR\">CYC2NS_SCALE_FACTOR</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long long <a class=\"id\" href=\"#cycles_2_ns\">cycles_2_ns</a>(unsigned long long <a class=\"id\" href=\"#cyc\">cyc</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#__cycles_2_ns\">__cycles_2_ns</a>(<a class=\"id\" href=\"#cyc\">cyc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_TIMER_H */</span>", 
];
xr_frag_insert('l/bb/2a95ec44a5f62c73bce92f92e603cabc989eae.xr', __xr_tmp);
