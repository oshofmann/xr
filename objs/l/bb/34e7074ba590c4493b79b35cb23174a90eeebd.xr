var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle the memory map.</span>", 
"<span class=\"comment\"> * The functions here do the job until bootmem takes over.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Getting sanitize_e820_map() in sync with i386 version by applying change:</span>", 
"<span class=\"comment\"> *  -  Provisions for empty E820 memory regions (reported by certain BIOSes).</span>", 
"<span class=\"comment\"> *     Alex Achenbach &lt;xela@slit.de&gt;, December 2002.</span>", 
"<span class=\"comment\"> *  Venkatesh Pallipadi &lt;venkatesh.pallipadi@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pfn\">pfn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#firmware\">firmware</a>-<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The e820 map is the map that gets modified e.g. with command line parameters</span>", 
"<span class=\"comment\"> * and that is also registered with modifications in the kernel resource tree</span>", 
"<span class=\"comment\"> * with the iomem_resource as parent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The e820_saved is directly saved after the BIOS-provided memory map is</span>", 
"<span class=\"comment\"> * copied. It doesn't get modified afterwards. It's registered for the</span>", 
"<span class=\"comment\"> * /sys/firmware/memmap interface.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * That memory map is not modified and is used as base for kexec. The kexec'd</span>", 
"<span class=\"comment\"> * kernel should get the same memory map as the firmware provides. Then the</span>", 
"<span class=\"comment\"> * user can e.g. boot the original kernel with mem=1G while still booting the</span>", 
"<span class=\"comment\"> * next kernel with full memory.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#e820map\">e820map</a> <a class=\"id\" href=\"#e820\">e820</a>;", 
"struct <a class=\"id\" href=\"#e820map\">e820map</a> <a class=\"id\" href=\"#e820_saved\">e820_saved</a>;", 
"", 
"<span class=\"comment\">/* For PCI or other memory-mapped resources */</span>", 
"unsigned long <a class=\"id\" href=\"#pci_mem_start\">pci_mem_start</a> = 0xaeedbabe;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_mem_start\">pci_mem_start</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function checks if any part of the range &lt;start,end&gt; is mapped</span>", 
"<span class=\"comment\"> * with type.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#e820_any_mapped\">e820_any_mapped</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, unsigned <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#nr_map\">nr_map</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#e820entry\">e820entry</a> *<a class=\"id\" href=\"#ei\">ei</a> = &amp;<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> && <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#end\">end</a> || <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#e820_any_mapped\">e820_any_mapped</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function checks if the entire range &lt;start,end&gt; is mapped with type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: this function only works correct if the e820 table is sorted and</span>", 
"<span class=\"comment\"> * not-overlapping, which is the case</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#e820_all_mapped\">e820_all_mapped</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, unsigned <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#nr_map\">nr_map</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#e820entry\">e820entry</a> *<a class=\"id\" href=\"#ei\">ei</a> = &amp;<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> && <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* is the region (part) in overlap with the current region ?*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#end\">end</a> || <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if the region is at the beginning of &lt;start,end&gt; we move</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * start to the end of the region since it's ok until there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#addr\">addr</a> <= <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if start is now at or beyond end, we're done, full</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * coverage</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a memory region to the kernel e820 map.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__e820_add_region\">__e820_add_region</a>(struct <a class=\"id\" href=\"#e820map\">e820map</a> *<a class=\"id\" href=\"#e820x\">e820x</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#e820x\">e820x</a>-><a class=\"id\" href=\"#nr_map\">nr_map</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a> >= <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#e820x\">e820x</a>-><a class=\"id\" href=\"#map\">map</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Ooops! Too many entries in the memory map!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e820x\">e820x</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#x\">x</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e820x\">e820x</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#x\">x</a>].<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e820x\">e820x</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#x\">x</a>].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e820x\">e820x</a>-><a class=\"id\" href=\"#nr_map\">nr_map</a>++;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#e820_add_region\">e820_add_region</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__e820_add_region\">__e820_add_region</a>(&amp;<a class=\"id\" href=\"#e820\">e820</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#e820_print_type\">e820_print_type</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#E820_RAM\">E820_RAM</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#E820_RESERVED_KERN\">E820_RESERVED_KERN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"(usable)\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#E820_RESERVED\">E820_RESERVED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"(reserved)\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#E820_ACPI\">E820_ACPI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"(ACPI data)\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#E820_NVS\">E820_NVS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"(ACPI NVS)\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#E820_UNUSABLE\">E820_UNUSABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"(unusable)\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"type %u\", <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#e820_print_map\">e820_print_map</a>(char *<a class=\"id\" href=\"#who\">who</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#nr_map\">nr_map</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \" %s: %016Lx - %016Lx \", <a class=\"id\" href=\"#who\">who</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long) <a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e820_print_type\">e820_print_type</a>(<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sanitize the BIOS e820 map.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some e820 responses include overlapping entries. The following</span>", 
"<span class=\"comment\"> * replaces the original e820 map with a new one, removing overlaps,</span>", 
"<span class=\"comment\"> * and resolving conflicting memory types in favor of highest</span>", 
"<span class=\"comment\"> * numbered type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The input parameter biosmap points to an array of 'struct</span>", 
"<span class=\"comment\"> * e820entry' which on entry has elements in the range [0, *pnr_map)</span>", 
"<span class=\"comment\"> * valid, and which has space for up to max_nr_map entries.</span>", 
"<span class=\"comment\"> * On return, the resulting sanitized e820 map entries will be in</span>", 
"<span class=\"comment\"> * overwritten in the same location, starting at biosmap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The integer pointed to by pnr_map must be valid on entry (the</span>", 
"<span class=\"comment\"> * current number of valid entries located at biosmap) and will</span>", 
"<span class=\"comment\"> * be updated on return, with the new number of valid entries</span>", 
"<span class=\"comment\"> * (something no more than max_nr_map.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value from sanitize_e820_map() is zero if it</span>", 
"<span class=\"comment\"> * successfully 'sanitized' the map entries passed in, and is -1</span>", 
"<span class=\"comment\"> * if it did nothing, which can happen if either of (1) it was</span>", 
"<span class=\"comment\"> * only passed one map entry, or (2) any of the input map entries</span>", 
"<span class=\"comment\"> * were invalid (start + size &lt; start, meaning that the size was</span>", 
"<span class=\"comment\"> * so big the described memory range wrapped around through zero.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Visually we're performing the following</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(1,2,3,4 = memory types)...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sample memory map (w/overlaps):</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ____22__________________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ______________________4_</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ____1111________________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   _44_____________________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   11111111________________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ____________________33__</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ___________44___________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   __________33333_________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ______________22________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ___________________2222_</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   _________111111111______</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   _____________________11_</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   _________________4______</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sanitized equivalent (no overlap):</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   1_______________________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   _44_____________________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ___1____________________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ____22__________________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ______11________________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   _________1______________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   __________3_____________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ___________44___________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   _____________33_________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   _______________2________</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ________________1_______</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   _________________4______</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ___________________2____</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ____________________33__</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   ______________________4_</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sanitize_e820_map\">sanitize_e820_map</a>(struct <a class=\"id\" href=\"#e820entry\">e820entry</a> *<a class=\"id\" href=\"#biosmap\">biosmap</a>, int <a class=\"id\" href=\"#max_nr_map\">max_nr_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#pnr_map\">pnr_map</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#change_member\">change_member</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#e820entry\">e820entry</a> *<a class=\"id\" href=\"#pbios\">pbios</a>; <span class=\"comment\">/* pointer to original bios entry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#addr\">addr</a>; <span class=\"comment\">/* address for this change point */</span>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#change_member\">change_member</a> <a class=\"id\" href=\"#change_point_list\">change_point_list</a>[2*<a class=\"id\" href=\"#E820_X_MAX\">E820_X_MAX</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#change_member\">change_member</a> *<a class=\"id\" href=\"#change_point\">change_point</a>[2*<a class=\"id\" href=\"#E820_X_MAX\">E820_X_MAX</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#e820entry\">e820entry</a> *<a class=\"id\" href=\"#overlap_list\">overlap_list</a>[<a class=\"id\" href=\"#E820_X_MAX\">E820_X_MAX</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#e820entry\">e820entry</a> <a class=\"id\" href=\"#new_bios\">new_bios</a>[<a class=\"id\" href=\"#E820_X_MAX\">E820_X_MAX</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#change_member\">change_member</a> *<a class=\"id\" href=\"#change_tmp\">change_tmp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#current_type\">current_type</a>, <a class=\"id\" href=\"#last_type\">last_type</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#last_addr\">last_addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#chgidx\">chgidx</a>, <a class=\"id\" href=\"#still_changing\">still_changing</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#overlap_entries\">overlap_entries</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#new_bios_entry\">new_bios_entry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_nr\">old_nr</a>, <a class=\"id\" href=\"#new_nr\">new_nr</a>, <a class=\"id\" href=\"#chg_nr\">chg_nr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if there's only one memory region, don't bother */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pnr_map\">pnr_map</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_nr\">old_nr</a> = *<a class=\"id\" href=\"#pnr_map\">pnr_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#old_nr\">old_nr</a> &gt; <a class=\"id\" href=\"#max_nr_map\">max_nr_map</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* bail out if we find any unreasonable addresses in bios map */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#old_nr\">old_nr</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#biosmap\">biosmap</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#biosmap\">biosmap</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#biosmap\">biosmap</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* create pointers for initial change-point information (for sorting) */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 2 * <a class=\"id\" href=\"#old_nr\">old_nr</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#i\">i</a>] = &amp;<a class=\"id\" href=\"#change_point_list\">change_point_list</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* record all known change-points (starting and ending addresses),</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   omitting those that are for empty memory regions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chgidx\">chgidx</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#old_nr\">old_nr</a>; <a class=\"id\" href=\"#i\">i</a>++)<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#biosmap\">biosmap</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>]-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#biosmap\">biosmap</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>++]-><a class=\"id\" href=\"#pbios\">pbios</a> = &amp;<a class=\"id\" href=\"#biosmap\">biosmap</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>]-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#biosmap\">biosmap</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#biosmap\">biosmap</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>++]-><a class=\"id\" href=\"#pbios\">pbios</a> = &amp;<a class=\"id\" href=\"#biosmap\">biosmap</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chg_nr\">chg_nr</a> = <a class=\"id\" href=\"#chgidx\">chgidx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sort change-point list by memory addresses (low -&gt; high) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#still_changing\">still_changing</a> = 1;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#still_changing\">still_changing</a>)<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#still_changing\">still_changing</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#chg_nr\">chg_nr</a>; <a class=\"id\" href=\"#i\">i</a>++)  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#curaddr\">curaddr</a>, <a class=\"id\" href=\"#lastaddr\">lastaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#curpbaddr\">curpbaddr</a>, <a class=\"id\" href=\"#lastpbaddr\">lastpbaddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curaddr\">curaddr</a> = <a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lastaddr\">lastaddr</a> = <a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#i\">i</a> - 1]-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curpbaddr\">curpbaddr</a> = <a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#pbios\">pbios</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lastpbaddr\">lastpbaddr</a> = <a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#i\">i</a> - 1]-><a class=\"id\" href=\"#pbios\">pbios</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * swap entries, when:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * curaddr &gt; lastaddr or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * curaddr == lastaddr and curaddr == curpbaddr and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * lastaddr != lastpbaddr</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curaddr\">curaddr</a> &lt; <a class=\"id\" href=\"#lastaddr\">lastaddr</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#curaddr\">curaddr</a> == <a class=\"id\" href=\"#lastaddr\">lastaddr</a> && <a class=\"id\" href=\"#curaddr\">curaddr</a> == <a class=\"id\" href=\"#curpbaddr\">curpbaddr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#lastaddr\">lastaddr</a> != <a class=\"id\" href=\"#lastpbaddr\">lastpbaddr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_tmp\">change_tmp</a> = <a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#i\">i</a>-1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#i\">i</a>-1] = <a class=\"id\" href=\"#change_tmp\">change_tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#still_changing\">still_changing</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* create a new bios memory map, removing overlaps */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#overlap_entries\">overlap_entries</a> = 0;<span class=\"ts\"/> <span class=\"comment\">/* number of entries in the overlap table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_bios_entry\">new_bios_entry</a> = 0;<span class=\"ts\"/> <span class=\"comment\">/* index for creating new bios map entries */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_type\">last_type</a> = 0;<span class=\"ts\"/><span class=\"ts\"/> <span class=\"comment\">/* start with undefined memory type */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_addr\">last_addr</a> = 0;<span class=\"ts\"/><span class=\"ts\"/> <span class=\"comment\">/* start with 0 as last starting address */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* loop through change-points, determining affect on the new bios map */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#chgidx\">chgidx</a> = 0; <a class=\"id\" href=\"#chgidx\">chgidx</a> &lt; <a class=\"id\" href=\"#chg_nr\">chg_nr</a>; <a class=\"id\" href=\"#chgidx\">chgidx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* keep track of all overlapping bios entries */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>]-><a class=\"id\" href=\"#addr\">addr</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>]-><a class=\"id\" href=\"#pbios\">pbios</a>-><a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * add map entry to overlap list (&gt; 1 entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * implies an overlap)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overlap_list\">overlap_list</a>[<a class=\"id\" href=\"#overlap_entries\">overlap_entries</a>++] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>]-><a class=\"id\" href=\"#pbios\">pbios</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * remove entry from list (order independent,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so swap with last)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#overlap_entries\">overlap_entries</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#overlap_list\">overlap_list</a>[<a class=\"id\" href=\"#i\">i</a>] ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>]-><a class=\"id\" href=\"#pbios\">pbios</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overlap_list\">overlap_list</a>[<a class=\"id\" href=\"#i\">i</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overlap_list\">overlap_list</a>[<a class=\"id\" href=\"#overlap_entries\">overlap_entries</a>-1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overlap_entries\">overlap_entries</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if there are overlapping entries, decide which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"type\" to use (larger value takes precedence --</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1=usable, 2,3,4,4+=unusable)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_type\">current_type</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#overlap_entries\">overlap_entries</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#overlap_list\">overlap_list</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#current_type\">current_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_type\">current_type</a> = <a class=\"id\" href=\"#overlap_list\">overlap_list</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * continue building up new bios map based on this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * information</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current_type\">current_type</a> != <a class=\"id\" href=\"#last_type\">last_type</a>)<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last_type\">last_type</a> != 0)<span class=\"ts\"/> {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_bios\">new_bios</a>[<a class=\"id\" href=\"#new_bios_entry\">new_bios_entry</a>].<a class=\"id\" href=\"#size\">size</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>]-><a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#last_addr\">last_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * move forward only if the new size</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * was non-zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_bios\">new_bios</a>[<a class=\"id\" href=\"#new_bios_entry\">new_bios_entry</a>].<a class=\"id\" href=\"#size\">size</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * no more space left for new</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bios entries ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#new_bios_entry\">new_bios_entry</a> >= <a class=\"id\" href=\"#max_nr_map\">max_nr_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current_type\">current_type</a> != 0)<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_bios\">new_bios</a>[<a class=\"id\" href=\"#new_bios_entry\">new_bios_entry</a>].<a class=\"id\" href=\"#addr\">addr</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>]-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_bios\">new_bios</a>[<a class=\"id\" href=\"#new_bios_entry\">new_bios_entry</a>].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#current_type\">current_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_addr\">last_addr</a> = <a class=\"id\" href=\"#change_point\">change_point</a>[<a class=\"id\" href=\"#chgidx\">chgidx</a>]-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_type\">last_type</a> = <a class=\"id\" href=\"#current_type\">current_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* retain count for new bios entries */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_nr\">new_nr</a> = <a class=\"id\" href=\"#new_bios_entry\">new_bios_entry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* copy new bios mapping into original location */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#biosmap\">biosmap</a>, <a class=\"id\" href=\"#new_bios\">new_bios</a>, <a class=\"id\" href=\"#new_nr\">new_nr</a> * sizeof(struct <a class=\"id\" href=\"#e820entry\">e820entry</a>));", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pnr_map\">pnr_map</a> = <a class=\"id\" href=\"#new_nr\">new_nr</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__append_e820_map\">__append_e820_map</a>(struct <a class=\"id\" href=\"#e820entry\">e820entry</a> *<a class=\"id\" href=\"#biosmap\">biosmap</a>, int <a class=\"id\" href=\"#nr_map\">nr_map</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_map\">nr_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#biosmap\">biosmap</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#biosmap\">biosmap</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#biosmap\">biosmap</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Overflow in 64 bits? Ignore the memory map. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e820_add_region\">e820_add_region</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#biosmap\">biosmap</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_map\">nr_map</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy the BIOS e820 map into a safe place.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sanity-check it while we're at it..</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we're lucky and live on a modern system, the setup code</span>", 
"<span class=\"comment\"> * will have given us a memory map that we can use to properly</span>", 
"<span class=\"comment\"> * set up memory.  If we aren't, we'll fake a memory map.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#append_e820_map\">append_e820_map</a>(struct <a class=\"id\" href=\"#e820entry\">e820entry</a> *<a class=\"id\" href=\"#biosmap\">biosmap</a>, int <a class=\"id\" href=\"#nr_map\">nr_map</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Only one memory region (or negative)? Ignore it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_map\">nr_map</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__append_e820_map\">__append_e820_map</a>(<a class=\"id\" href=\"#biosmap\">biosmap</a>, <a class=\"id\" href=\"#nr_map\">nr_map</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__e820_update_range\">__e820_update_range</a>(struct <a class=\"id\" href=\"#e820map\">e820map</a> *<a class=\"id\" href=\"#e820x\">e820x</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>, unsigned <a class=\"id\" href=\"#old_type\">old_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#new_type\">new_type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#real_updated_size\">real_updated_size</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#old_type\">old_type</a> == <a class=\"id\" href=\"#new_type\">new_type</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; (<a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a> - <a class=\"id\" href=\"#start\">start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"e820 update range: %016Lx - %016Lx \",", 
];
xr_frag_insert('l/bb/34e7074ba590c4493b79b35cb23174a90eeebd.xr', __xr_tmp);
