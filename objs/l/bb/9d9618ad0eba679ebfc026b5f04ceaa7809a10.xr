var __xr_tmp = [
"<span class=\"comment\">/* Basic authentication token and access key management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004-2008 Red Hat, Inc. All Rights Reserved.</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poison\">poison</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#user_namespace\">user_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a><span class=\"ts\"/>*<a class=\"id\" href=\"#key_jar\">key_jar</a>;", 
"struct <a class=\"id\" href=\"#rb_root\">rb_root</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_serial_tree\">key_serial_tree</a>; <span class=\"comment\">/* tree of keys indexed by serial */</span>", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"", 
"struct <a class=\"id\" href=\"#rb_root\">rb_root</a><span class=\"ts\"/><a class=\"id\" href=\"#key_user_tree\">key_user_tree</a>; <span class=\"comment\">/* tree of quota records indexed by UID */</span>", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#key_user_lock\">key_user_lock</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#key_quota_root_maxkeys\">key_quota_root_maxkeys</a> = 200;<span class=\"ts\"/><span class=\"comment\">/* root's key count quota */</span>", 
"unsigned int <a class=\"id\" href=\"#key_quota_root_maxbytes\">key_quota_root_maxbytes</a> = 20000;<span class=\"ts\"/><span class=\"comment\">/* root's key space quota */</span>", 
"unsigned int <a class=\"id\" href=\"#key_quota_maxkeys\">key_quota_maxkeys</a> = 200;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* general key count quota */</span>", 
"unsigned int <a class=\"id\" href=\"#key_quota_maxbytes\">key_quota_maxbytes</a> = 20000;<span class=\"ts\"/><span class=\"comment\">/* general key space quota */</span>", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#key_types_list\">key_types_list</a>);", 
"static <a class=\"id\" href=\"#DECLARE_RWSEM\">DECLARE_RWSEM</a>(<a class=\"id\" href=\"#key_types_sem\">key_types_sem</a>);", 
"", 
"static void <a class=\"id\" href=\"#key_cleanup\">key_cleanup</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"static <a class=\"id\" href=\"#DECLARE_WORK\">DECLARE_WORK</a>(<a class=\"id\" href=\"#key_cleanup_task\">key_cleanup_task</a>, <a class=\"id\" href=\"#key_cleanup\">key_cleanup</a>);", 
"", 
"<span class=\"comment\">/* we serialise key instantiation and link */</span>", 
"<a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#key_construction_mutex\">key_construction_mutex</a>);", 
"", 
"<span class=\"comment\">/* any key who's type gets unegistered will be re-typed to this */</span>", 
"static struct <a class=\"id\" href=\"#key_type\">key_type</a> <a class=\"id\" href=\"#key_type_dead\">key_type_dead</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"dead\",", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#KEY_DEBUGGING\">KEY_DEBUGGING</a>", 
"void <a class=\"id\" href=\"#__key_check\">__key_check</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"__key_check: key %p {%08x} should be {%08x}\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#magic\">magic</a>, <a class=\"id\" href=\"#KEY_DEBUG_MAGIC\">KEY_DEBUG_MAGIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get the key quota record for a user, allocating a new record if one doesn't</span>", 
"<span class=\"comment\"> * already exist</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#key_user\">key_user</a> *<a class=\"id\" href=\"#key_user_lookup\">key_user_lookup</a>(<a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>, struct <a class=\"id\" href=\"#user_namespace\">user_namespace</a> *<a class=\"id\" href=\"#user_ns\">user_ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key_user\">key_user</a> *<a class=\"id\" href=\"#candidate\">candidate</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#p\">p</a>;", 
"", 
" <a class=\"id\" href=\"#try_again\">try_again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#key_user_tree\">key_user_tree</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#key_user_lock\">key_user_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* search the tree for a user record with a matching UID */</span>", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#key_user\">key_user</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uid\">uid</a> &lt; <a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#uid\">uid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#uid\">uid</a> &gt; <a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#uid\">uid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#user_ns\">user_ns</a> &lt; <a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#user_ns\">user_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#user_ns\">user_ns</a> &gt; <a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#user_ns\">user_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if we get here, we failed to find a match in the tree */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#candidate\">candidate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocate a candidate user record if we don't already have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_user_lock\">key_user_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#candidate\">candidate</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#key_user\">key_user</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#candidate\">candidate</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the allocation may have scheduled, so we need to repeat the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * search lest someone else added the record whilst we were</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * asleep */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#try_again\">try_again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if we get here, then the user record still hadn't appeared on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * second pass - so we use the candidate record */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#usage\">usage</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#nikeys\">nikeys</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#user_ns\">user_ns</a> = <a class=\"id\" href=\"#get_user_ns\">get_user_ns</a>(<a class=\"id\" href=\"#user_ns\">user_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#qnkeys\">qnkeys</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#cons_lock\">cons_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#candidate\">candidate</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#key_user_tree\">key_user_tree</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_user_lock\">key_user_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#candidate\">candidate</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* okay - we found a user record for this UID */</span>", 
" <a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#usage\">usage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_user_lock\">key_user_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#candidate\">candidate</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#user\">user</a>;", 
"", 
"} <span class=\"comment\">/* end key_user_lookup() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dispose of a user structure</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#key_user_put\">key_user_put</a>(struct <a class=\"id\" href=\"#key_user\">key_user</a> *<a class=\"id\" href=\"#user\">user</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_lock\">atomic_dec_and_lock</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#usage\">usage</a>, &amp;<a class=\"id\" href=\"#key_user_lock\">key_user_lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#key_user_tree\">key_user_tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_user_lock\">key_user_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_user_ns\">put_user_ns</a>(<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#user_ns\">user_ns</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/>}", 
"", 
"} <span class=\"comment\">/* end key_user_put() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * assign a key the next unique serial number</span>", 
"<span class=\"comment\"> * - these are assigned randomly to avoid security issues through covert</span>", 
"<span class=\"comment\"> *   channel problems</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#key_alloc_serial\">key_alloc_serial</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a>, **<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#xkey\">xkey</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* propose a random serial number and look for a hole for it in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * serial number tree */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>, sizeof(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a> >>= 1; <span class=\"comment\">/* negative numbers are not permitted */</span>", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a> &lt; 3);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"", 
"<a class=\"id\" href=\"#attempt_insertion\">attempt_insertion</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#key_serial_tree\">key_serial_tree</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xkey\">xkey</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#serial_node\">serial_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a> &lt; <a class=\"id\" href=\"#xkey\">xkey</a>-><a class=\"id\" href=\"#serial\">serial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a> &gt; <a class=\"id\" href=\"#xkey\">xkey</a>-><a class=\"id\" href=\"#serial\">serial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#serial_exists\">serial_exists</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we've found a suitable hole - arrange for this key to occupy it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial_node\">serial_node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial_node\">serial_node</a>, &amp;<a class=\"id\" href=\"#key_serial_tree\">key_serial_tree</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"<span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we found a key with the proposed serial number - walk the tree from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that point looking for the next unused serial number */</span>", 
"<a class=\"id\" href=\"#serial_exists\">serial_exists</a>:", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a> &lt; 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#attempt_insertion\">attempt_insertion</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#attempt_insertion\">attempt_insertion</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xkey\">xkey</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#serial_node\">serial_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a> &lt; <a class=\"id\" href=\"#xkey\">xkey</a>-><a class=\"id\" href=\"#serial\">serial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#attempt_insertion\">attempt_insertion</a>;", 
"<span class=\"ts\"/>}", 
"", 
"} <span class=\"comment\">/* end key_alloc_serial() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * allocate a key of the specified type</span>", 
"<span class=\"comment\"> * - update the user's quota to reflect the existence of the key</span>", 
"<span class=\"comment\"> * - called from a key-type operation with key_types_sem read-locked by</span>", 
"<span class=\"comment\"> *   key_create_or_update()</span>", 
"<span class=\"comment\"> *   - this prevents unregistration of the key type</span>", 
"<span class=\"comment\"> * - upon return the key is as yet uninstantiated; the caller needs to either</span>", 
"<span class=\"comment\"> *   instantiate the key or discard it before returning</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key_alloc\">key_alloc</a>(struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#type\">type</a>, const char *<a class=\"id\" href=\"#desc\">desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#gid_t\">gid_t</a> <a class=\"id\" href=\"#gid\">gid</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#key_perm_t\">key_perm_t</a> <a class=\"id\" href=\"#perm\">perm</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key_user\">key_user</a> *<a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#desclen\">desclen</a>, <a class=\"id\" href=\"#quotalen\">quotalen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a> || !*<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desclen\">desclen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#desc\">desc</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quotalen\">quotalen</a> = <a class=\"id\" href=\"#desclen\">desclen</a> + <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#def_datalen\">def_datalen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* get hold of the key tracking for this user */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#key_user_lookup\">key_user_lookup</a>(<a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#user_ns\">user_ns</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#user\">user</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_memory_1\">no_memory_1</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check that the user's quota permits allocation of another key and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its description */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEY_ALLOC_NOT_IN_QUOTA\">KEY_ALLOC_NOT_IN_QUOTA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#maxkeys\">maxkeys</a> = (<a class=\"id\" href=\"#uid\">uid</a> == 0) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_quota_root_maxkeys\">key_quota_root_maxkeys</a> : <a class=\"id\" href=\"#key_quota_maxkeys\">key_quota_maxkeys</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#maxbytes\">maxbytes</a> = (<a class=\"id\" href=\"#uid\">uid</a> == 0) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_quota_root_maxbytes\">key_quota_root_maxbytes</a> : <a class=\"id\" href=\"#key_quota_maxbytes\">key_quota_maxbytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEY_ALLOC_QUOTA_OVERRUN\">KEY_ALLOC_QUOTA_OVERRUN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnkeys\">qnkeys</a> + 1 >= <a class=\"id\" href=\"#maxkeys\">maxkeys</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> + <a class=\"id\" href=\"#quotalen\">quotalen</a> >= <a class=\"id\" href=\"#maxbytes\">maxbytes</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> + <a class=\"id\" href=\"#quotalen\">quotalen</a> &lt; <a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_quota\">no_quota</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnkeys\">qnkeys</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> += <a class=\"id\" href=\"#quotalen\">quotalen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate and initialise the key and its description */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#key_jar\">key_jar</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_memory_2\">no_memory_2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a> = <a class=\"id\" href=\"#kmemdup\">kmemdup</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#desclen\">desclen</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_memory_3\">no_memory_3</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#usage\">usage</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#quotalen\">quotalen</a> = <a class=\"id\" href=\"#quotalen\">quotalen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#datalen\">datalen</a> = <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#def_datalen\">def_datalen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#gid\">gid</a> = <a class=\"id\" href=\"#gid\">gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEY_ALLOC_NOT_IN_QUOTA\">KEY_ALLOC_NOT_IN_QUOTA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a> |= 1 << <a class=\"id\" href=\"#KEY_FLAG_IN_QUOTA\">KEY_FLAG_IN_QUOTA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type_data\">type_data</a>, 0, sizeof(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type_data\">type_data</a>));", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#KEY_DEBUGGING\">KEY_DEBUGGING</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#magic\">magic</a> = <a class=\"id\" href=\"#KEY_DEBUG_MAGIC\">KEY_DEBUG_MAGIC</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* let the security module know about the key */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_key_alloc\">security_key_alloc</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#security_error\">security_error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* publish the key by giving it a serial number */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_alloc_serial\">key_alloc_serial</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<a class=\"id\" href=\"#security_error\">security_error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#key_jar\">key_jar</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEY_ALLOC_NOT_IN_QUOTA\">KEY_ALLOC_NOT_IN_QUOTA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnkeys\">qnkeys</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> -= <a class=\"id\" href=\"#quotalen\">quotalen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_user_put\">key_user_put</a>(<a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<a class=\"id\" href=\"#no_memory_3\">no_memory_3</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#key_jar\">key_jar</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<a class=\"id\" href=\"#no_memory_2\">no_memory_2</a>:", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEY_ALLOC_NOT_IN_QUOTA\">KEY_ALLOC_NOT_IN_QUOTA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnkeys\">qnkeys</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> -= <a class=\"id\" href=\"#quotalen\">quotalen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_user_put\">key_user_put</a>(<a class=\"id\" href=\"#user\">user</a>);", 
"<a class=\"id\" href=\"#no_memory_1\">no_memory_1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<a class=\"id\" href=\"#no_quota\">no_quota</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_user_put\">key_user_put</a>(<a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EDQUOT\">EDQUOT</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"} <span class=\"comment\">/* end key_alloc() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_alloc\">key_alloc</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * reserve an amount of quota for the key's payload</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#delta\">delta</a> = (int)<a class=\"id\" href=\"#datalen\">datalen</a> - <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#datalen\">datalen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* contemplate the quota adjustment */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> != 0 && <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_IN_QUOTA\">KEY_FLAG_IN_QUOTA</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#maxbytes\">maxbytes</a> = (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#uid\">uid</a> == 0) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_quota_root_maxbytes\">key_quota_root_maxbytes</a> : <a class=\"id\" href=\"#key_quota_maxbytes\">key_quota_maxbytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> + <a class=\"id\" href=\"#delta\">delta</a> >= <a class=\"id\" href=\"#maxbytes\">maxbytes</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> + <a class=\"id\" href=\"#delta\">delta</a> &lt; <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EDQUOT\">EDQUOT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#quotalen\">quotalen</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* change the recorded data length if that didn't generate an error */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#datalen\">datalen</a> = <a class=\"id\" href=\"#datalen\">datalen</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end key_payload_reserve() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * instantiate a key and link it into the target keyring atomically</span>", 
"<span class=\"comment\"> * - called with the target keyring's semaphore writelocked</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__key_instantiate_and_link\">__key_instantiate_and_link</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#authkey\">authkey</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> **<a class=\"id\" href=\"#_prealloc\">_prealloc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#awaken\">awaken</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#awaken\">awaken</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#key_construction_mutex\">key_construction_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* can't instantiate twice */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_INSTANTIATED\">KEY_FLAG_INSTANTIATED</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* instantiate the key */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#instantiate\">instantiate</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#datalen\">datalen</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mark the key as being instantiated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#nikeys\">nikeys</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_INSTANTIATED\">KEY_FLAG_INSTANTIATED</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_USER_CONSTRUCT\">KEY_FLAG_USER_CONSTRUCT</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#awaken\">awaken</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* and link it into the destination keyring */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__key_link\">__key_link</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#_prealloc\">_prealloc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* disable the authorisation key */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#authkey\">authkey</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_revoke\">key_revoke</a>(<a class=\"id\" href=\"#authkey\">authkey</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#key_construction_mutex\">key_construction_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wake up anyone waiting for a key to be constructed */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#awaken\">awaken</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#KEY_FLAG_USER_CONSTRUCT\">KEY_FLAG_USER_CONSTRUCT</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end __key_instantiate_and_link() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * instantiate a key and link it into the target keyring atomically</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#key_instantiate_and_link\">key_instantiate_and_link</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#authkey\">authkey</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#prealloc\">prealloc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__key_link_begin\">__key_link_begin</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__key_instantiate_and_link\">__key_instantiate_and_link</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#datalen\">datalen</a>, <a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#authkey\">authkey</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__key_link_end\">__key_link_end</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end key_instantiate_and_link() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_instantiate_and_link\">key_instantiate_and_link</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * negatively instantiate a key and link it into the target keyring atomically</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#key_negate_and_link\">key_negate_and_link</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#authkey\">authkey</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#prealloc\">prealloc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#awaken\">awaken</a>, <a class=\"id\" href=\"#link_ret\">link_ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#awaken\">awaken</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link_ret\">link_ret</a> = <a class=\"id\" href=\"#__key_link_begin\">__key_link_begin</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a>, &amp;<a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#key_construction_mutex\">key_construction_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* can't instantiate twice */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_INSTANTIATED\">KEY_FLAG_INSTANTIATED</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mark the key as being negatively instantiated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#nikeys\">nikeys</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_NEGATIVE\">KEY_FLAG_NEGATIVE</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_INSTANTIATED\">KEY_FLAG_INSTANTIATED</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a> = <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> + <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_schedule_gc\">key_schedule_gc</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a> + <a class=\"id\" href=\"#key_gc_delay\">key_gc_delay</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_USER_CONSTRUCT\">KEY_FLAG_USER_CONSTRUCT</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#awaken\">awaken</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* and link it into the destination keyring */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a> && <a class=\"id\" href=\"#link_ret\">link_ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__key_link\">__key_link</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>, &amp;<a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* disable the authorisation key */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#authkey\">authkey</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_revoke\">key_revoke</a>(<a class=\"id\" href=\"#authkey\">authkey</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#key_construction_mutex\">key_construction_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__key_link_end\">__key_link_end</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wake up anyone waiting for a key to be constructed */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#awaken\">awaken</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#KEY_FLAG_USER_CONSTRUCT\">KEY_FLAG_USER_CONSTRUCT</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> == 0 ? <a class=\"id\" href=\"#link_ret\">link_ret</a> : <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end key_negate_and_link() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_negate_and_link\">key_negate_and_link</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * do cleaning up in process context so that we don't have to disable</span>", 
"<span class=\"comment\"> * interrupts all over the place</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#key_cleanup\">key_cleanup</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#_n\">_n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>;", 
"", 
" <a class=\"id\" href=\"#go_again\">go_again</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* look for a dead key in the tree */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#_n\">_n</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(&amp;<a class=\"id\" href=\"#key_serial_tree\">key_serial_tree</a>); <a class=\"id\" href=\"#_n\">_n</a>; <a class=\"id\" href=\"#_n\">_n</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#_n\">_n</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#_n\">_n</a>, struct <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#serial_node\">serial_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#usage\">usage</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_dead_key\">found_dead_key</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"<span class=\"ts\"/>return;", 
"", 
" <a class=\"id\" href=\"#found_dead_key\">found_dead_key</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* we found a dead key - once we've removed it from the tree, we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drop the lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial_node\">serial_node</a>, &amp;<a class=\"id\" href=\"#key_serial_tree\">key_serial_tree</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_key_free\">security_key_free</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* deal with the user's key tracking and quota */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_IN_QUOTA\">KEY_FLAG_IN_QUOTA</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnkeys\">qnkeys</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#qnbytes\">qnbytes</a> -= <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#quotalen\">quotalen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_INSTANTIATED\">KEY_FLAG_INSTANTIATED</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#nikeys\">nikeys</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_user_put\">key_user_put</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#user\">user</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* now throw away the key memory */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#destroy\">destroy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#KEY_DEBUGGING\">KEY_DEBUGGING</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#magic\">magic</a> = <a class=\"id\" href=\"#KEY_DEBUG_MAGIC_X\">KEY_DEBUG_MAGIC_X</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#key_jar\">key_jar</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* there may, of course, be more than one key to destroy */</span>", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#go_again\">go_again</a>;", 
"", 
"} <span class=\"comment\">/* end key_cleanup() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dispose of a reference to a key</span>", 
"<span class=\"comment\"> * - when all the references are gone, we schedule the cleanup task to come and</span>", 
"<span class=\"comment\"> *   pull it out of the tree in definite process context</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#key_put\">key_put</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#usage\">usage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#key_cleanup_task\">key_cleanup_task</a>);", 
"<span class=\"ts\"/>}", 
"", 
"} <span class=\"comment\">/* end key_put() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_put\">key_put</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find a key by its serial number</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key_lookup\">key_lookup</a>(<a class=\"id\" href=\"#key_serial_t\">key_serial_t</a> <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* search the tree for the specified key */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#key_serial_tree\">key_serial_tree</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#serial_node\">serial_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#id\">id</a> &gt; <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#not_found\">not_found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOKEY\">ENOKEY</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
" <a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* pretend it doesn't exist if it is awaiting deletion */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#usage\">usage</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_found\">not_found</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this races with key_put(), but that doesn't matter since key_put()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't actually change the key</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#usage\">usage</a>);", 
"", 
" <a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#key\">key</a>;", 
"", 
"} <span class=\"comment\">/* end key_lookup() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find and lock the specified key type against removal</span>", 
"<span class=\"comment\"> * - we return with the sem readlocked</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#key_type_lookup\">key_type_lookup</a>(const char *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#key_types_sem\">key_types_sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* look up the key type to see if it's one of the registered kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * types */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ktype\">ktype</a>, &amp;<a class=\"id\" href=\"#key_types_list\">key_types_list</a>, <a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_kernel_type\">found_kernel_type</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#key_types_sem\">key_types_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktype\">ktype</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOKEY\">ENOKEY</a>);", 
"", 
" <a class=\"id\" href=\"#found_kernel_type\">found_kernel_type</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ktype\">ktype</a>;", 
"", 
"} <span class=\"comment\">/* end key_type_lookup() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * unlock a key type</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#key_type_put\">key_type_put</a>(struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#key_types_sem\">key_types_sem</a>);", 
"", 
"} <span class=\"comment\">/* end key_type_put() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * attempt to update an existing key</span>", 
"<span class=\"comment\"> * - the key has an incremented refcount</span>", 
"<span class=\"comment\"> * - we need to put the key if we get an error</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#__key_update\">__key_update</a>(<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#key_ref\">key_ref</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void *<a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#plen\">plen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#key_ref_to_ptr\">key_ref_to_ptr</a>(<a class=\"id\" href=\"#key_ref\">key_ref</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need write permission on the key to update it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key_permission\">key_permission</a>(<a class=\"id\" href=\"#key_ref\">key_ref</a>, <a class=\"id\" href=\"#KEY_WRITE\">KEY_WRITE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#update\">update</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#update\">update</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#plen\">plen</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* updating a negative key instantiates it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_NEGATIVE\">KEY_FLAG_NEGATIVE</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#key_ref\">key_ref</a>;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"} <span class=\"comment\">/* end __key_update() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * search the specified keyring for a key of the same description; if one is</span>", 
"<span class=\"comment\"> * found, update it, otherwise add a new one</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#key_create_or_update\">key_create_or_update</a>(<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#description\">description</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const void *<a class=\"id\" href=\"#payload\">payload</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#plen\">plen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#key_perm_t\">key_perm_t</a> <a class=\"id\" href=\"#perm\">perm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#prealloc\">prealloc</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, *<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#key_ref\">key_ref</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* look up the key type to see if it's one of the registered kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * types */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktype\">ktype</a> = <a class=\"id\" href=\"#key_type_lookup\">key_type_lookup</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ktype\">ktype</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENODEV\">ENODEV</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#match\">match</a> || !<a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#instantiate\">instantiate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_2\">error_2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyring\">keyring</a> = <a class=\"id\" href=\"#key_ref_to_ptr\">key_ref_to_ptr</a>(<a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type\">type</a> != &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_2\">error_2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__key_link_begin\">__key_link_begin</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#ktype\">ktype</a>, <a class=\"id\" href=\"#description\">description</a>, &amp;<a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_2\">error_2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if we're going to allocate a new key, we're going to have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to modify the keyring */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key_permission\">key_permission</a>(<a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>, <a class=\"id\" href=\"#KEY_WRITE\">KEY_WRITE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_3\">error_3</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if it's possible to update this type of key, search for an existing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * key of the same type and description in the destination keyring and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update that instead if possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#update\">update</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#__keyring_search_one\">__keyring_search_one</a>(<a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>, <a class=\"id\" href=\"#ktype\">ktype</a>, <a class=\"id\" href=\"#description\">description</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#key_ref\">key_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_matching_key\">found_matching_key</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if the client doesn't provide, decide on the permissions we want */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perm\">perm</a> == <a class=\"id\" href=\"#KEY_PERM_UNDEF\">KEY_PERM_UNDEF</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#KEY_POS_VIEW\">KEY_POS_VIEW</a> | <a class=\"id\" href=\"#KEY_POS_SEARCH\">KEY_POS_SEARCH</a> | <a class=\"id\" href=\"#KEY_POS_LINK\">KEY_POS_LINK</a> | <a class=\"id\" href=\"#KEY_POS_SETATTR\">KEY_POS_SETATTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> |= <a class=\"id\" href=\"#KEY_USR_VIEW\">KEY_USR_VIEW</a> | <a class=\"id\" href=\"#KEY_USR_SEARCH\">KEY_USR_SEARCH</a> | <a class=\"id\" href=\"#KEY_USR_LINK\">KEY_USR_LINK</a> | <a class=\"id\" href=\"#KEY_USR_SETATTR\">KEY_USR_SETATTR</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#read\">read</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> |= <a class=\"id\" href=\"#KEY_POS_READ\">KEY_POS_READ</a> | <a class=\"id\" href=\"#KEY_USR_READ\">KEY_USR_READ</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ktype\">ktype</a> == &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a> || <a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#update\">update</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> |= <a class=\"id\" href=\"#KEY_USR_WRITE\">KEY_USR_WRITE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate a new key */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#key_alloc\">key_alloc</a>(<a class=\"id\" href=\"#ktype\">ktype</a>, <a class=\"id\" href=\"#description\">description</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a>, <a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#key\">key</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_CAST\">ERR_CAST</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_3\">error_3</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* instantiate it and link it into the target keyring */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__key_instantiate_and_link\">__key_instantiate_and_link</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#plen\">plen</a>, <a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_3\">error_3</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#make_key_ref\">make_key_ref</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#is_key_possessed\">is_key_possessed</a>(<a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>));", 
"", 
" <a class=\"id\" href=\"#error_3\">error_3</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__key_link_end\">__key_link_end</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#ktype\">ktype</a>, <a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
" <a class=\"id\" href=\"#error_2\">error_2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_type_put\">key_type_put</a>(<a class=\"id\" href=\"#ktype\">ktype</a>);", 
" <a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#key_ref\">key_ref</a>;", 
"", 
" <a class=\"id\" href=\"#found_matching_key\">found_matching_key</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* we found a matching key, so we're going to try to update it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - we can drop the locks first as we have the key pinned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__key_link_end\">__key_link_end</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#ktype\">ktype</a>, <a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_type_put\">key_type_put</a>(<a class=\"id\" href=\"#ktype\">ktype</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#__key_update\">__key_update</a>(<a class=\"id\" href=\"#key_ref\">key_ref</a>, <a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#plen\">plen</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"} <span class=\"comment\">/* end key_create_or_update() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_create_or_update\">key_create_or_update</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * update a key</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#key_update\">key_update</a>(<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#key_ref\">key_ref</a>, const void *<a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#plen\">plen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#key_ref_to_ptr\">key_ref_to_ptr</a>(<a class=\"id\" href=\"#key_ref\">key_ref</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the key must be writable */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key_permission\">key_permission</a>(<a class=\"id\" href=\"#key_ref\">key_ref</a>, <a class=\"id\" href=\"#KEY_WRITE\">KEY_WRITE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* attempt to update it if supported */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#update\">update</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#update\">update</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#plen\">plen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* updating a negative key instantiates it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_NEGATIVE\">KEY_FLAG_NEGATIVE</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end key_update() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_update\">key_update</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * revoke a key</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#key_revoke\">key_revoke</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#time\">time</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure no one's trying to change or use the key when we mark it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - we tell lockdep that we might nest because we might be revoking an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   authorisation key whilst holding the sem on a key we've just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   instantiated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write_nested\">down_write_nested</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sem\">sem</a>, 1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_REVOKED\">KEY_FLAG_REVOKED</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#revoke\">revoke</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#revoke\">revoke</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set the death time to no more than the expiry time */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#revoked_at\">revoked_at</a> == 0 || <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#revoked_at\">revoked_at</a> &gt; <a class=\"id\" href=\"#time\">time</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#revoked_at\">revoked_at</a> = <a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_schedule_gc\">key_schedule_gc</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#revoked_at\">revoked_at</a> + <a class=\"id\" href=\"#key_gc_delay\">key_gc_delay</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"} <span class=\"comment\">/* end key_revoke() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_revoke\">key_revoke</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * register a type of key</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_key_type\">register_key_type</a>(struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#key_types_sem\">key_types_sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* disallow key types with the same name */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#key_types_list\">key_types_list</a>, <a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* store the type */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#key_types_list\">key_types_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#key_types_sem\">key_types_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end register_key_type() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_key_type\">register_key_type</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * unregister a type of key</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_key_type\">unregister_key_type</a>(struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#_n\">_n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#key_types_sem\">key_types_sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* withdraw the key type */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mark all the keys of this type dead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#_n\">_n</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(&amp;<a class=\"id\" href=\"#key_serial_tree\">key_serial_tree</a>); <a class=\"id\" href=\"#_n\">_n</a>; <a class=\"id\" href=\"#_n\">_n</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#_n\">_n</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#_n\">_n</a>, struct <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#serial_node\">serial_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ktype\">ktype</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a> = &amp;<a class=\"id\" href=\"#key_type_dead\">key_type_dead</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_DEAD\">KEY_FLAG_DEAD</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure everyone revalidates their keys */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we should now be able to destroy the payloads of all the keys of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this type with impunity */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#_n\">_n</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(&amp;<a class=\"id\" href=\"#key_serial_tree\">key_serial_tree</a>); <a class=\"id\" href=\"#_n\">_n</a>; <a class=\"id\" href=\"#_n\">_n</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#_n\">_n</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#_n\">_n</a>, struct <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#serial_node\">serial_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ktype\">ktype</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#destroy\">destroy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#KEY_DESTROY\">KEY_DESTROY</a>, sizeof(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#payload\">payload</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#key_serial_lock\">key_serial_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#key_types_sem\">key_types_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_schedule_gc\">key_schedule_gc</a>(0);", 
"", 
"} <span class=\"comment\">/* end unregister_key_type() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_key_type\">unregister_key_type</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * initialise the key management stuff</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#key_init\">key_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate a slab in which we can store keys */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_jar\">key_jar</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"key_jar\", sizeof(struct <a class=\"id\" href=\"#key\">key</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* add the special key types */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>.<a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#key_types_list\">key_types_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#key_type_dead\">key_type_dead</a>.<a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#key_types_list\">key_types_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#key_type_user\">key_type_user</a>.<a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#key_types_list\">key_types_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* record the root user tracking */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#root_key_user\">root_key_user</a>.<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#key_user_tree\">key_user_tree</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#root_key_user\">root_key_user</a>.<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#key_user_tree\">key_user_tree</a>);", 
"", 
"} <span class=\"comment\">/* end key_init() */</span>", 
];
xr_frag_insert('l/bb/9d9618ad0eba679ebfc026b5f04ceaa7809a10.xr', __xr_tmp);
