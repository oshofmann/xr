var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The VGA aribiter manages VGA space routing and VGA resource decode to</span>", 
"<span class=\"comment\"> * allow multiple VGA devices to be used in a system in a safe way.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright 2005 Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;</span>", 
"<span class=\"comment\"> * (C) Copyright 2007 Paulo R. Zanoni &lt;przanoni@gmail.com&gt;</span>", 
"<span class=\"comment\"> * (C) Copyright 2007, 2009 Tiago Vignatti &lt;vignatti@freedesktop.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Permission is hereby granted, free of charge, to any person obtaining a</span>", 
"<span class=\"comment\"> * copy of this software and associated documentation files (the \"Software\"),</span>", 
"<span class=\"comment\"> * to deal in the Software without restriction, including without limitation</span>", 
"<span class=\"comment\"> * the rights to use, copy, modify, merge, publish, distribute, sublicense,</span>", 
"<span class=\"comment\"> * and/or sell copies of the Software, and to permit persons to whom the</span>", 
"<span class=\"comment\"> * Software is furnished to do so, subject to the following conditions:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The above copyright notice and this permission notice (including the next</span>", 
"<span class=\"comment\"> * paragraph) shall be included in all copies or substantial portions of the</span>", 
"<span class=\"comment\"> * Software.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>", 
"<span class=\"comment\"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>", 
"<span class=\"comment\"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL</span>", 
"<span class=\"comment\"> * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>", 
"<span class=\"comment\"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING</span>", 
"<span class=\"comment\"> * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER</span>", 
"<span class=\"comment\"> * DEALINGS</span>", 
"<span class=\"comment\"> * IN THE SOFTWARE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#LINUX_VGA_H\">LINUX_VGA_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LINUX_VGA_H\">LINUX_VGA_H</a>", 
"", 
"", 
"<span class=\"comment\">/* Legacy VGA regions */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGA_RSRC_NONE\">VGA_RSRC_NONE</a><span class=\"ts\"/>       0x00", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>     0x01", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>    0x02", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>   (<a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a> | <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>)", 
"<span class=\"comment\">/* Non-legacy access */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGA_RSRC_NORMAL_IO\">VGA_RSRC_NORMAL_IO</a>     0x04", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGA_RSRC_NORMAL_MEM\">VGA_RSRC_NORMAL_MEM</a>    0x08", 
"", 
"<span class=\"comment\">/* Passing that instead of a pci_dev to use the system \"default\"</span>", 
"<span class=\"comment\"> * device, that is the one used by vgacon. Archs will probably</span>", 
"<span class=\"comment\"> * have to provide their own vga_default_device();</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGA_DEFAULT_DEVICE\">VGA_DEFAULT_DEVICE</a>     (<a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"<span class=\"comment\">/* For use by clients */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *     vga_set_legacy_decoding</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     @pdev: pci device of the VGA card</span>", 
"<span class=\"comment\"> *     @decodes: bit mask of what legacy regions the card decodes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Indicates to the arbiter if the card decodes legacy VGA IOs,</span>", 
"<span class=\"comment\"> *     legacy VGA Memory, both, or none. All cards default to both,</span>", 
"<span class=\"comment\"> *     the card driver (fbdev for example) should tell the arbiter</span>", 
"<span class=\"comment\"> *     if it has disabled legacy decoding, so the card can be left</span>", 
"<span class=\"comment\"> *     out of the arbitration process (and can be safe to take</span>", 
"<span class=\"comment\"> *     interrupts at any time.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#vga_set_legacy_decoding\">vga_set_legacy_decoding</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#decodes\">decodes</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *     vga_get         - acquire &amp; locks VGA resources</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     @pdev: pci device of the VGA card or NULL for the system default</span>", 
"<span class=\"comment\"> *     @rsrc: bit mask of resources to acquire and lock</span>", 
"<span class=\"comment\"> *     @interruptible: blocking should be interruptible by signals ?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     This function acquires VGA resources for the given</span>", 
"<span class=\"comment\"> *     card and mark those resources locked. If the resource requested</span>", 
"<span class=\"comment\"> *     are \"normal\" (and not legacy) resources, the arbiter will first check</span>", 
"<span class=\"comment\"> *     wether the card is doing legacy decoding for that type of resource. If</span>", 
"<span class=\"comment\"> *     yes, the lock is \"converted\" into a legacy resource lock.</span>", 
"<span class=\"comment\"> *     The arbiter will first look for all VGA cards that might conflict</span>", 
"<span class=\"comment\"> *     and disable their IOs and/or Memory access, inlcuding VGA forwarding</span>", 
"<span class=\"comment\"> *     on P2P bridges if necessary, so that the requested resources can</span>", 
"<span class=\"comment\"> *     be used. Then, the card is marked as locking these resources and</span>", 
"<span class=\"comment\"> *     the IO and/or Memory accesse are enabled on the card (including</span>", 
"<span class=\"comment\"> *     VGA forwarding on parent P2P bridges if any).</span>", 
"<span class=\"comment\"> *     This function will block if some conflicting card is already locking</span>", 
"<span class=\"comment\"> *     one of the required resources (or any resource on a different bus</span>", 
"<span class=\"comment\"> *     segment, since P2P bridges don't differenciate VGA memory and IO</span>", 
"<span class=\"comment\"> *     afaik). You can indicate wether this blocking should be interruptible</span>", 
"<span class=\"comment\"> *     by a signal (for userland interface) or not.</span>", 
"<span class=\"comment\"> *     Must not be called at interrupt time or in atomic context.</span>", 
"<span class=\"comment\"> *     If the card already owns the resources, the function succeeds.</span>", 
"<span class=\"comment\"> *     Nested calls are supported (a per-resource counter is maintained)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_VGA_ARB\">CONFIG_VGA_ARB</a>)", 
"extern int <a class=\"id\" href=\"#vga_get\">vga_get</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>, int <a class=\"id\" href=\"#interruptible\">interruptible</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vga_get\">vga_get</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>, int <a class=\"id\" href=\"#interruptible\">interruptible</a>) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *     vga_get_interruptible</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Shortcut to vga_get</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vga_get_interruptible\">vga_get_interruptible</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>)", 
"{", 
"       return <a class=\"id\" href=\"#vga_get\">vga_get</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#rsrc\">rsrc</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *     vga_get_uninterruptible</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Shortcut to vga_get</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vga_get_uninterruptible\">vga_get_uninterruptible</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>)", 
"{", 
"       return <a class=\"id\" href=\"#vga_get\">vga_get</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#rsrc\">rsrc</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *     vga_tryget      - try to acquire &amp; lock legacy VGA resources</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     @pdev: pci devivce of VGA card or NULL for system default</span>", 
"<span class=\"comment\"> *     @rsrc: bit mask of resources to acquire and lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     This function performs the same operation as vga_get(), but</span>", 
"<span class=\"comment\"> *     will return an error (-EBUSY) instead of blocking if the resources</span>", 
"<span class=\"comment\"> *     are already locked by another card. It can be called in any context</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_VGA_ARB\">CONFIG_VGA_ARB</a>)", 
"extern int <a class=\"id\" href=\"#vga_tryget\">vga_tryget</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vga_tryget\">vga_tryget</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *     vga_put         - release lock on legacy VGA resources</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     @pdev: pci device of VGA card or NULL for system default</span>", 
"<span class=\"comment\"> *     @rsrc: but mask of resource to release</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     This function releases resources previously locked by vga_get()</span>", 
"<span class=\"comment\"> *     or vga_tryget(). The resources aren't disabled right away, so</span>", 
"<span class=\"comment\"> *     that a subsequence vga_get() on the same card will succeed</span>", 
"<span class=\"comment\"> *     immediately. Resources have a counter, so locks are only</span>", 
"<span class=\"comment\"> *     released if the counter reaches 0.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_VGA_ARB\">CONFIG_VGA_ARB</a>)", 
"extern void <a class=\"id\" href=\"#vga_put\">vga_put</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vga_put\">vga_put</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#rsrc\">rsrc</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *     vga_default_device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     This can be defined by the platform. The default implementation</span>", 
"<span class=\"comment\"> *     is rather dumb and will probably only work properly on single</span>", 
"<span class=\"comment\"> *     vga card setups and/or x86 platforms.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     If your VGA default device is not PCI, you'll have to return</span>", 
"<span class=\"comment\"> *     NULL here. In this case, I assume it will not conflict with</span>", 
"<span class=\"comment\"> *     any PCI card. If this is not true, I'll have to define two archs</span>", 
"<span class=\"comment\"> *     hooks for enabling/disabling the VGA default device if that is</span>", 
"<span class=\"comment\"> *     possible. This may be a problem with real _ISA_ VGA cards, in</span>", 
"<span class=\"comment\"> *     addition to a PCI one. I don't know at this point how to deal</span>", 
"<span class=\"comment\"> *     with that card. Can theirs IOs be disabled at all ? If not, then</span>", 
"<span class=\"comment\"> *     I suppose it's a matter of having the proper arch hook telling</span>", 
"<span class=\"comment\"> *     us about it, so we basically never allow anybody to succeed a</span>", 
"<span class=\"comment\"> *     vga_get()...</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_HAS_VGA_DEFAULT_DEVICE\">__ARCH_HAS_VGA_DEFAULT_DEVICE</a>", 
"extern struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#vga_default_device\">vga_default_device</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *     vga_conflicts</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Architectures should define this if they have several</span>", 
"<span class=\"comment\"> *     independant PCI domains that can afford concurrent VGA</span>", 
"<span class=\"comment\"> *     decoding</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_HAS_VGA_CONFLICT\">__ARCH_HAS_VGA_CONFLICT</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vga_conflicts\">vga_conflicts</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#p1\">p1</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"       return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vga_client_register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: pci device of the VGA client</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cookie: client cookie to be used in callbacks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq_set_state: irq state change callback</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@set_vga_decode: vga decode change callback</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>return value: 0 on success, -1 on failure</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Register a client with the VGA arbitration logic</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clients have two callback mechanisms they can use.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>irq enable/disable callback -</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>If a client can't disable its GPUs VGA resources, then we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>need to be able to ask it to turn off its irqs when we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>turn off its mem and io decoding.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set_vga_decode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>If a client can disable its GPU VGA resource, it will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>get a callback from this to set the encode/decode state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Rationale: we cannot disable VGA decode resources unconditionally</span>", 
"<span class=\"comment\"> * some single GPU laptops seem to require ACPI or BIOS access to the</span>", 
"<span class=\"comment\"> * VGA registers to control things like backlights etc.</span>", 
"<span class=\"comment\"> * Hopefully newer multi-GPU laptops do something saner, and desktops</span>", 
"<span class=\"comment\"> * won't have any special ACPI for this.</span>", 
"<span class=\"comment\"> * They driver will get a callback when VGA arbitration is first used</span>", 
"<span class=\"comment\"> * by userspace since we some older X servers have issues.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_VGA_ARB\">CONFIG_VGA_ARB</a>)", 
"int <a class=\"id\" href=\"#vga_client_register\">vga_client_register</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, void *<a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#irq_set_state\">irq_set_state</a>)(void *<a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#state\">state</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int (*<a class=\"id\" href=\"#set_vga_decode\">set_vga_decode</a>)(void *<a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#state\">state</a>));", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vga_client_register\">vga_client_register</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, void *<a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#irq_set_state\">irq_set_state</a>)(void *<a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#state\">state</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int (*<a class=\"id\" href=\"#set_vga_decode\">set_vga_decode</a>)(void *<a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#state\">state</a>))", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* LINUX_VGA_H */</span>", 
];
xr_frag_insert('l/bb/e2c04a6236142651089aaca1ece399541c60b8.xr', __xr_tmp);
