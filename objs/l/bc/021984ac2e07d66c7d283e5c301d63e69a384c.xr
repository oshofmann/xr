var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * latencytop.c: Latency display infrastructure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright 2008 Intel Corporation</span>", 
"<span class=\"comment\"> * Author: Arjan van de Ven &lt;arjan@linux.intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; version 2</span>", 
"<span class=\"comment\"> * of the License.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CONFIG_LATENCYTOP enables a kernel latency tracking infrastructure that is</span>", 
"<span class=\"comment\"> * used by the \"latencytop\" userspace tool. The latency that is tracked is not</span>", 
"<span class=\"comment\"> * the 'traditional' interrupt latency (which is primarily caused by something</span>", 
"<span class=\"comment\"> * else consuming CPU), but instead, it is the latency an application encounters</span>", 
"<span class=\"comment\"> * because the kernel sleeps on its behalf for various reasons.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code tracks 2 levels of statistics:</span>", 
"<span class=\"comment\"> * 1) System level latency</span>", 
"<span class=\"comment\"> * 2) Per process latency</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The latency is stored in fixed sized data structures in an accumulated form;</span>", 
"<span class=\"comment\"> * if the \"same\" latency cause is hit twice, this will be tracked as one entry</span>", 
"<span class=\"comment\"> * in the data structure. Both the count, total accumulated latency and maximum</span>", 
"<span class=\"comment\"> * latency are tracked in this data structure. When the fixed size structure is</span>", 
"<span class=\"comment\"> * full, no new causes are tracked until the buffer is flushed by writing to</span>", 
"<span class=\"comment\"> * the /proc file; the userspace tool does this on a regular basis.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A latency cause is identified by a stringified backtrace at the point that</span>", 
"<span class=\"comment\"> * the scheduler gets invoked. The userland tool will use this string to</span>", 
"<span class=\"comment\"> * identify the cause of the latency in human readable form.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The information is exported via /proc/latency_stats and /proc/&lt;pid&gt;/latency.</span>", 
"<span class=\"comment\"> * These files look like this:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Latency Top version : v0.1</span>", 
"<span class=\"comment\"> * 70 59433 4897 i915_irq_wait drm_ioctl vfs_ioctl do_vfs_ioctl sys_ioctl</span>", 
"<span class=\"comment\"> * |    |    |    |</span>", 
"<span class=\"comment\"> * |    |    |    +----&gt; the stringified backtrace</span>", 
"<span class=\"comment\"> * |    |    +---------&gt; The maximum latency for this entry in microseconds</span>", 
"<span class=\"comment\"> * |    +--------------&gt; The accumulated latency for this entry (microseconds)</span>", 
"<span class=\"comment\"> * +-------------------&gt; The number of times this entry is hit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (note: the average latency is the accumulated latency divided by the number</span>", 
"<span class=\"comment\"> * of times)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#latencytop\">latencytop</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stacktrace\">stacktrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#latency_lock\">latency_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAXLR\">MAXLR</a> 128", 
"static struct <a class=\"id\" href=\"#latency_record\">latency_record</a> <a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#MAXLR\">MAXLR</a>];", 
"", 
"int <a class=\"id\" href=\"#latencytop_enabled\">latencytop_enabled</a>;", 
"", 
"void <a class=\"id\" href=\"#clear_all_latency_tracing\">clear_all_latency_tracing</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#latencytop_enabled\">latencytop_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#latency_lock\">latency_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#latency_record\">latency_record</a>, 0, sizeof(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#latency_record\">latency_record</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#latency_record_count\">latency_record_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#latency_lock\">latency_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_global_latency_tracing\">clear_global_latency_tracing</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#latency_lock\">latency_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#latency_record\">latency_record</a>, 0, sizeof(<a class=\"id\" href=\"#latency_record\">latency_record</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#latency_lock\">latency_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#account_global_scheduler_latency\">account_global_scheduler_latency</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#latency_record\">latency_record</a> *<a class=\"id\" href=\"#lat\">lat</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#firstnonnull\">firstnonnull</a> = <a class=\"id\" href=\"#MAXLR\">MAXLR</a> + 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#latencytop_enabled\">latencytop_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* skip kernel threads for now */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAXLR\">MAXLR</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#same\">same</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nothing stored: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#backtrace\">backtrace</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#firstnonnull\">firstnonnull</a> &gt; <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#firstnonnull\">firstnonnull</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#q\">q</a> = 0; <a class=\"id\" href=\"#q\">q</a> &lt; <a class=\"id\" href=\"#LT_BACKTRACEDEPTH\">LT_BACKTRACEDEPTH</a>; <a class=\"id\" href=\"#q\">q</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#record\">record</a> = <a class=\"id\" href=\"#lat\">lat</a>-><a class=\"id\" href=\"#backtrace\">backtrace</a>[<a class=\"id\" href=\"#q\">q</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#backtrace\">backtrace</a>[<a class=\"id\" href=\"#q\">q</a>] != <a class=\"id\" href=\"#record\">record</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#same\">same</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0 and ULONG_MAX entries mean end of backtrace: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#record\">record</a> == 0 || <a class=\"id\" href=\"#record\">record</a> == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#same\">same</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#time\">time</a> += <a class=\"id\" href=\"#lat\">lat</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lat\">lat</a>-><a class=\"id\" href=\"#time\">time</a> &gt; <a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#lat\">lat</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#firstnonnull\">firstnonnull</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#MAXLR\">MAXLR</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocted a new one: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#lat\">lat</a>, sizeof(struct <a class=\"id\" href=\"#latency_record\">latency_record</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Iterator to store a backtrace into a latency record entry</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#store_stacktrace\">store_stacktrace</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#latency_record\">latency_record</a> *<a class=\"id\" href=\"#lat\">lat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_trace\">stack_trace</a> <a class=\"id\" href=\"#trace\">trace</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>, 0, sizeof(<a class=\"id\" href=\"#trace\">trace</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#max_entries\">max_entries</a> = <a class=\"id\" href=\"#LT_BACKTRACEDEPTH\">LT_BACKTRACEDEPTH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#entries\">entries</a> = &amp;<a class=\"id\" href=\"#lat\">lat</a>-><a class=\"id\" href=\"#backtrace\">backtrace</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_stack_trace_tsk\">save_stack_trace_tsk</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#trace\">trace</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __account_scheduler_latency - record an occured latency</span>", 
"<span class=\"comment\"> * @tsk - the task struct of the task hitting the latency</span>", 
"<span class=\"comment\"> * @usecs - the duration of the latency in microseconds</span>", 
"<span class=\"comment\"> * @inter - 1 if the sleep was interruptible, 0 if uninterruptible</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is the main entry point for recording latency entries</span>", 
"<span class=\"comment\"> * as called by the scheduler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function has a few special cases to deal with normal 'non-latency'</span>", 
"<span class=\"comment\"> * sleeps: specifically, interruptible sleep longer than 5 msec is skipped</span>", 
"<span class=\"comment\"> * since this usually is caused by waiting for events via select() and co.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Negative latencies (caused by time going backwards) are also explicitly</span>", 
"<span class=\"comment\"> * skipped.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#__account_scheduler_latency\">__account_scheduler_latency</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#usecs\">usecs</a>, int <a class=\"id\" href=\"#inter\">inter</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#latency_record\">latency_record</a> <a class=\"id\" href=\"#lat\">lat</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Long interruptible waits are generally user requested... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inter\">inter</a> && <a class=\"id\" href=\"#usecs\">usecs</a> &gt; 5000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Negative sleeps are time going backwards */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Zero-time sleeps are non-interesting */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usecs\">usecs</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#lat\">lat</a>, 0, sizeof(<a class=\"id\" href=\"#lat\">lat</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lat\">lat</a>.<a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lat\">lat</a>.<a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#usecs\">usecs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lat\">lat</a>.<a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#usecs\">usecs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#store_stacktrace\">store_stacktrace</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#lat\">lat</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#latency_lock\">latency_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_global_scheduler_latency\">account_global_scheduler_latency</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#lat\">lat</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * short term hack; if we're &gt; 32 we stop; future we recycle:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#latency_record_count\">latency_record_count</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#latency_record_count\">latency_record_count</a> >= <a class=\"id\" href=\"#LT_SAVECOUNT\">LT_SAVECOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#LT_SAVECOUNT\">LT_SAVECOUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#latency_record\">latency_record</a> *<a class=\"id\" href=\"#mylat\">mylat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#same\">same</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mylat\">mylat</a> = &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#q\">q</a> = 0; <a class=\"id\" href=\"#q\">q</a> &lt; <a class=\"id\" href=\"#LT_BACKTRACEDEPTH\">LT_BACKTRACEDEPTH</a>; <a class=\"id\" href=\"#q\">q</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#record\">record</a> = <a class=\"id\" href=\"#lat\">lat</a>.<a class=\"id\" href=\"#backtrace\">backtrace</a>[<a class=\"id\" href=\"#q\">q</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mylat\">mylat</a>-><a class=\"id\" href=\"#backtrace\">backtrace</a>[<a class=\"id\" href=\"#q\">q</a>] != <a class=\"id\" href=\"#record\">record</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#same\">same</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0 and ULONG_MAX entries mean end of backtrace: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#record\">record</a> == 0 || <a class=\"id\" href=\"#record\">record</a> == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#same\">same</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mylat\">mylat</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mylat\">mylat</a>-><a class=\"id\" href=\"#time\">time</a> += <a class=\"id\" href=\"#lat\">lat</a>.<a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lat\">lat</a>.<a class=\"id\" href=\"#time\">time</a> &gt; <a class=\"id\" href=\"#mylat\">mylat</a>-><a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mylat\">mylat</a>-><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#lat\">lat</a>.<a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocated a new one: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#latency_record_count\">latency_record_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>], &amp;<a class=\"id\" href=\"#lat\">lat</a>, sizeof(struct <a class=\"id\" href=\"#latency_record\">latency_record</a>));", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#latency_lock\">latency_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#lstats_show\">lstats_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"Latency Top version : v0.1\\n\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAXLR\">MAXLR</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#backtrace\">backtrace</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%i %lu %lu \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#time\">time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#q\">q</a> = 0; <a class=\"id\" href=\"#q\">q</a> &lt; <a class=\"id\" href=\"#LT_BACKTRACEDEPTH\">LT_BACKTRACEDEPTH</a>; <a class=\"id\" href=\"#q\">q</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#KSYM_SYMBOL_LEN\">KSYM_SYMBOL_LEN</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#backtrace\">backtrace</a>[<a class=\"id\" href=\"#q\">q</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#backtrace\">backtrace</a>[<a class=\"id\" href=\"#q\">q</a>] == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprint_symbol\">sprint_symbol</a>(<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#backtrace\">backtrace</a>[<a class=\"id\" href=\"#q\">q</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#sym\">sym</a>, '+');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#c\">c</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%s \", <a class=\"id\" href=\"#sym\">sym</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#lstats_write\">lstats_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#offs\">offs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_global_latency_tracing\">clear_global_latency_tracing</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#lstats_open\">lstats_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#lstats_show\">lstats_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#lstats_fops\">lstats_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#lstats_open\">lstats_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#lstats_write\">lstats_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#single_release\">single_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_lstats_procfs\">init_lstats_procfs</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"latency_stats\", 0644, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#lstats_fops\">lstats_fops</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#device_initcall\">device_initcall</a>(<a class=\"id\" href=\"#init_lstats_procfs\">init_lstats_procfs</a>);", 
];
xr_frag_insert('l/bc/021984ac2e07d66c7d283e5c301d63e69a384c.xr', __xr_tmp);
