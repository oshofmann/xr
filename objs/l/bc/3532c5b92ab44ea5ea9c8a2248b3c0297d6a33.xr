var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 Red Hat, Inc., Eric Paris &lt;eparis@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2, or (at your option)</span>", 
"<span class=\"comment\"> *  any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fsnotify inode mark locking/lifetime/and refcnting</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * REFCNT:</span>", 
"<span class=\"comment\"> * The mark-&gt;refcnt tells how many \"things\" in the kernel currently are</span>", 
"<span class=\"comment\"> * referencing this object.  The object typically will live inside the kernel</span>", 
"<span class=\"comment\"> * with a refcnt of 2, one for each list it is on (i_list, g_list).  Any task</span>", 
"<span class=\"comment\"> * which can find this object holding the appropriete locks, can take a reference</span>", 
"<span class=\"comment\"> * and the object itself is guarenteed to survive until the reference is dropped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * There are 3 spinlocks involved with fsnotify inode marks and they MUST</span>", 
"<span class=\"comment\"> * be taken in order as follows:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mark-&gt;lock</span>", 
"<span class=\"comment\"> * group-&gt;mark_lock</span>", 
"<span class=\"comment\"> * inode-&gt;i_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mark-&gt;lock protects 2 things, mark-&gt;group and mark-&gt;inode.  You must hold</span>", 
"<span class=\"comment\"> * that lock to dereference either of these things (they could be NULL even with</span>", 
"<span class=\"comment\"> * the lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * group-&gt;mark_lock protects the marks_list anchored inside a given group</span>", 
"<span class=\"comment\"> * and each mark is hooked via the g_list.  It also sorta protects the</span>", 
"<span class=\"comment\"> * free_g_list, which when used is anchored by a private list on the stack of the</span>", 
"<span class=\"comment\"> * task which held the group-&gt;mark_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * inode-&gt;i_lock protects the i_fsnotify_marks list anchored inside a</span>", 
"<span class=\"comment\"> * given inode and each mark is hooked via the i_list. (and sorta the</span>", 
"<span class=\"comment\"> * free_i_list)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LIFETIME:</span>", 
"<span class=\"comment\"> * Inode marks survive between when they are added to an inode and when their</span>", 
"<span class=\"comment\"> * refcnt==0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The inode mark can be cleared for a number of different reasons including:</span>", 
"<span class=\"comment\"> * - The inode is unlinked for the last time.  (fsnotify_inode_remove)</span>", 
"<span class=\"comment\"> * - The inode is being evicted from cache. (fsnotify_inode_delete)</span>", 
"<span class=\"comment\"> * - The fs the inode is on is unmounted.  (fsnotify_inode_delete/fsnotify_unmount_inodes)</span>", 
"<span class=\"comment\"> * - Something explicitly requests that it be removed.  (fsnotify_destroy_mark)</span>", 
"<span class=\"comment\"> * - The fsnotify_group associated with the mark is going away and all such marks</span>", 
"<span class=\"comment\"> *   need to be cleaned up. (fsnotify_clear_marks_by_group)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Worst case we are given an inode and need to clean up all the marks on that</span>", 
"<span class=\"comment\"> * inode.  We take i_lock and walk the i_fsnotify_marks safely.  For each</span>", 
"<span class=\"comment\"> * mark on the list we take a reference (so the mark can't disappear under us).</span>", 
"<span class=\"comment\"> * We remove that mark form the inode's list of marks and we add this mark to a</span>", 
"<span class=\"comment\"> * private list anchored on the stack using i_free_list;  At this point we no</span>", 
"<span class=\"comment\"> * longer fear anything finding the mark using the inode's list of marks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We can safely and locklessly run the private list on the stack of everything</span>", 
"<span class=\"comment\"> * we just unattached from the original inode.  For each mark on the private list</span>", 
"<span class=\"comment\"> * we grab the mark-&gt; and can thus dereference mark-&gt;group and mark-&gt;inode.  If</span>", 
"<span class=\"comment\"> * we see the group and inode are not NULL we take those locks.  Now holding all</span>", 
"<span class=\"comment\"> * 3 locks we can completely remove the mark from other tasks finding it in the</span>", 
"<span class=\"comment\"> * future.  Remember, 10 things might already be referencing this mark, but they</span>", 
"<span class=\"comment\"> * better be holding a ref.  We drop our reference we took before we unhooked it</span>", 
"<span class=\"comment\"> * from the inode.  When the ref hits 0 we can free the mark.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Very similarly for freeing by group, except we use free_g_list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This has the very interesting property of being able to run concurrently with</span>", 
"<span class=\"comment\"> * any (or all) other directions.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#srcu\">srcu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for inode_lock */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify_backend\">fsnotify_backend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"fsnotify.h\"", 
"", 
"struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> <a class=\"id\" href=\"#fsnotify_mark_srcu\">fsnotify_mark_srcu</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#destroy_lock\">destroy_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#destroy_list\">destroy_list</a>);", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#destroy_waitq\">destroy_waitq</a>);", 
"", 
"void <a class=\"id\" href=\"#fsnotify_get_mark\">fsnotify_get_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#free_mark\">free_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Any time a mark is getting freed we end up here.</span>", 
"<span class=\"comment\"> * The caller had better be holding a reference to this mark so we don't actually</span>", 
"<span class=\"comment\"> * do the final put under the mark-&gt;lock</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#group\">group</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* something else already called this function on this mark */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_ALIVE\">FSNOTIFY_MARK_FLAG_ALIVE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_ALIVE\">FSNOTIFY_MARK_FLAG_ALIVE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 1 from caller and 1 for being on i_list/g_list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>) &lt; 2);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_INODE\">FSNOTIFY_MARK_FLAG_INODE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_inode_mark\">fsnotify_destroy_inode_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_VFSMOUNT\">FSNOTIFY_MARK_FLAG_VFSMOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_vfsmount_mark\">fsnotify_destroy_vfsmount_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#g_list\">g_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#destroy_lock\">destroy_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#destroy_list\">destroy_list</a>, &amp;<a class=\"id\" href=\"#destroy_list\">destroy_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#destroy_lock\">destroy_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#destroy_waitq\">destroy_waitq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some groups like to know that marks are being freed.  This is a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * callback to the group function to let it know that this mark</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is being freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#freeing_mark\">freeing_mark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#freeing_mark\">freeing_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __fsnotify_update_child_dentry_flags(inode);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I really want to call that, but we can't, we have no idea if the inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * still exists the second we drop the mark-&gt;lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The next time an event arrive to this inode from one of it's children</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __fsnotify_parent will see that the inode doesn't care about it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * children and will update all of these flags then.  So really this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is just a lazy update (and could be a perf win...)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a> && (<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_OBJECT_PINNED\">FSNOTIFY_MARK_FLAG_OBJECT_PINNED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's possible that this group tried to destroy itself, but this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this mark was simultaneously being freed by inode.  If that's the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case, we finish freeing the group here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#num_marks\">num_marks</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_final_destroy_group\">fsnotify_final_destroy_group</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_set_mark_mask_locked\">fsnotify_set_mark_mask_locked</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_INODE\">FSNOTIFY_MARK_FLAG_INODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_set_inode_mark_mask_locked\">fsnotify_set_inode_mark_mask_locked</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_set_mark_ignored_mask_locked\">fsnotify_set_mark_ignored_mask_locked</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#ignored_mask\">ignored_mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach an initialized mark to a given group and fs object.</span>", 
"<span class=\"comment\"> * These marks may be used for the fsnotify backend to determine which</span>", 
"<span class=\"comment\"> * event types should be delivered to which group.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fsnotify_add_mark\">fsnotify_add_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#allow_dups\">allow_dups</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inode\">inode</a> && <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#inode\">inode</a> && !<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * LOCKING ORDER!!!!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mark-&gt;lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group-&gt;mark_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inode-&gt;i_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_ALIVE\">FSNOTIFY_MARK_FLAG_ALIVE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#g_list\">g_list</a>, &amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#marks_list\">marks_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#num_marks\">num_marks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_mark\">fsnotify_get_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>); <span class=\"comment\">/* for i_list and g_list */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fsnotify_add_inode_mark\">fsnotify_add_inode_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#allow_dups\">allow_dups</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fsnotify_add_vfsmount_mark\">fsnotify_add_vfsmount_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#allow_dups\">allow_dups</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this will pin the object if appropriate */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_set_mark_mask_locked\">fsnotify_set_mark_mask_locked</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__fsnotify_update_child_dentry_flags\">__fsnotify_update_child_dentry_flags</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_ALIVE\">FSNOTIFY_MARK_FLAG_ALIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#g_list\">g_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#num_marks\">num_marks</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#destroy_lock\">destroy_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#destroy_list\">destroy_list</a>, &amp;<a class=\"id\" href=\"#destroy_list\">destroy_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#destroy_lock\">destroy_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#destroy_waitq\">destroy_waitq</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * clear any marks in a group in which mark-&gt;flags &amp; flags is true</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_clear_marks_by_group_flags\">fsnotify_clear_marks_by_group_flags</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#lmark\">lmark</a>, *<a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#lmark\">lmark</a>, &amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#marks_list\">marks_list</a>, <a class=\"id\" href=\"#g_list\">g_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#flags\">flags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#free_g_list\">free_g_list</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#g_list\">g_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_mark\">fsnotify_get_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#lmark\">lmark</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>, <a class=\"id\" href=\"#free_g_list\">free_g_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given a group, destroy all of the marks associated with that group.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_clear_marks_by_group\">fsnotify_clear_marks_by_group</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_clear_marks_by_group_flags\">fsnotify_clear_marks_by_group_flags</a>(<a class=\"id\" href=\"#group\">group</a>, (unsigned int)-1);", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_duplicate_mark\">fsnotify_duplicate_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#free_mark\">free_mark</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#free_mark\">free_mark</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Nothing fancy, just initialize lists and locks and counters.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_init_mark\">fsnotify_init_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#free_mark\">free_mark</a>)(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#mark\">mark</a>, 0, sizeof(*<a class=\"id\" href=\"#mark\">mark</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#free_mark\">free_mark</a> = <a class=\"id\" href=\"#free_mark\">free_mark</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fsnotify_mark_destroy\">fsnotify_mark_destroy</a>(void *<a class=\"id\" href=\"#ignored\">ignored</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#private_destroy_list\">private_destroy_list</a>);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#destroy_lock\">destroy_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* exchange the list head */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#destroy_list\">destroy_list</a>, &amp;<a class=\"id\" href=\"#private_destroy_list\">private_destroy_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#destroy_lock\">destroy_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_srcu\">synchronize_srcu</a>(&amp;<a class=\"id\" href=\"#fsnotify_mark_srcu\">fsnotify_mark_srcu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#private_destroy_list\">private_destroy_list</a>, <a class=\"id\" href=\"#destroy_list\">destroy_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#destroy_list\">destroy_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#destroy_waitq\">destroy_waitq</a>, !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#destroy_list\">destroy_list</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#fsnotify_mark_init\">fsnotify_mark_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#fsnotify_mark_destroy\">fsnotify_mark_destroy</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"fsnotify_mark\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#thread\">thread</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"unable to start fsnotify mark destruction thread.\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#device_initcall\">device_initcall</a>(<a class=\"id\" href=\"#fsnotify_mark_init\">fsnotify_mark_init</a>);", 
];
xr_frag_insert('l/bc/3532c5b92ab44ea5ea9c8a2248b3c0297d6a33.xr', __xr_tmp);
