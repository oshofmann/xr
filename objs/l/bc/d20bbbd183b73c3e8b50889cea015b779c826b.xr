var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  fs/partitions/msdos.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Code extracted from drivers/block/genhd.c</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991-1998  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Thanks to Branko Lankester, lankeste@fwi.uva.nl, who found a bug</span>", 
"<span class=\"comment\"> *  in the early extended-partition checks and added DM partitions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Support for DiskManager v6.0x added by Mark Lord,</span>", 
"<span class=\"comment\"> *  with information provided by OnTrack.  This now works for linux fdisk</span>", 
"<span class=\"comment\"> *  and LILO, as well as loadlin and bootln.  Note that disks other than</span>", 
"<span class=\"comment\"> *  /dev/hda *must* have a \"DOS\" type 0x51 partition in the first slot (hda1).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  More flexible handling of extended partitions - aeb, 950831</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Check partition table on IDE disks for common CHS translations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Re-organised Feb 1998 Russell King</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#msdos_fs\">msdos_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"check.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"msdos.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"efi.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Many architectures don't like unaligned accesses, while</span>", 
"<span class=\"comment\"> * the nr_sects and start_sect partition table entries are</span>", 
"<span class=\"comment\"> * at a 2 (mod 4) address.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><a class=\"id\" href=\"#get_unaligned\">get_unaligned</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sys_ind\">sys_ind</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#nr_sects\">nr_sects</a>(struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#get_unaligned_le32\">get_unaligned_le32</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nr_sects\">nr_sects</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start_sect\">start_sect</a>(struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#get_unaligned_le32\">get_unaligned_le32</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start_sect\">start_sect</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_extended_partition\">is_extended_partition</a>(struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#DOS_EXTENDED_PARTITION\">DOS_EXTENDED_PARTITION</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#WIN98_EXTENDED_PARTITION\">WIN98_EXTENDED_PARTITION</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#LINUX_EXTENDED_PARTITION\">LINUX_EXTENDED_PARTITION</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSDOS_LABEL_MAGIC1\">MSDOS_LABEL_MAGIC1</a><span class=\"ts\"/>0x55", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSDOS_LABEL_MAGIC2\">MSDOS_LABEL_MAGIC2</a><span class=\"ts\"/>0xAA", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#msdos_magic_present\">msdos_magic_present</a>(unsigned char *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#p\">p</a>[0] == <a class=\"id\" href=\"#MSDOS_LABEL_MAGIC1\">MSDOS_LABEL_MAGIC1</a> && <a class=\"id\" href=\"#p\">p</a>[1] == <a class=\"id\" href=\"#MSDOS_LABEL_MAGIC2\">MSDOS_LABEL_MAGIC2</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Value is EBCDIC 'IBMA' */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AIX_LABEL_MAGIC1\">AIX_LABEL_MAGIC1</a><span class=\"ts\"/>0xC9", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AIX_LABEL_MAGIC2\">AIX_LABEL_MAGIC2</a><span class=\"ts\"/>0xC2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AIX_LABEL_MAGIC3\">AIX_LABEL_MAGIC3</a><span class=\"ts\"/>0xD4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AIX_LABEL_MAGIC4\">AIX_LABEL_MAGIC4</a><span class=\"ts\"/>0xC1", 
"static int <a class=\"id\" href=\"#aix_magic_present\">aix_magic_present</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>, unsigned char *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#pt\">pt</a> = (struct <a class=\"id\" href=\"#partition\">partition</a> *) (<a class=\"id\" href=\"#p\">p</a> + 0x1be);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p\">p</a>[0] == <a class=\"id\" href=\"#AIX_LABEL_MAGIC1\">AIX_LABEL_MAGIC1</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[1] == <a class=\"id\" href=\"#AIX_LABEL_MAGIC2\">AIX_LABEL_MAGIC2</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[2] == <a class=\"id\" href=\"#AIX_LABEL_MAGIC3\">AIX_LABEL_MAGIC3</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[3] == <a class=\"id\" href=\"#AIX_LABEL_MAGIC4\">AIX_LABEL_MAGIC4</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* Assume the partition table is valid if Linux partitions exists */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#slot\">slot</a> = 1; <a class=\"id\" href=\"#slot\">slot</a> <= 4; <a class=\"id\" href=\"#slot\">slot</a>++, <a class=\"id\" href=\"#pt\">pt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#sys_ind\">sys_ind</a> == <a class=\"id\" href=\"#LINUX_SWAP_PARTITION\">LINUX_SWAP_PARTITION</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#sys_ind\">sys_ind</a> == <a class=\"id\" href=\"#LINUX_RAID_PARTITION\">LINUX_RAID_PARTITION</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#sys_ind\">sys_ind</a> == <a class=\"id\" href=\"#LINUX_DATA_PARTITION\">LINUX_DATA_PARTITION</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#sys_ind\">sys_ind</a> == <a class=\"id\" href=\"#LINUX_LVM_PARTITION\">LINUX_LVM_PARTITION</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_extended_partition\">is_extended_partition</a>(<a class=\"id\" href=\"#pt\">pt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, 7, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>[0] == '_' && <a class=\"id\" href=\"#d\">d</a>[1] == 'L' && <a class=\"id\" href=\"#d\">d</a>[2] == 'V' && <a class=\"id\" href=\"#d\">d</a>[3] == 'M')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create devices for each logical partition in an extended partition.</span>", 
"<span class=\"comment\"> * The logical partitions form a linked list, with each entry being</span>", 
"<span class=\"comment\"> * a partition table with two entries.  The first entry</span>", 
"<span class=\"comment\"> * is the real data partition (with a start relative to the partition</span>", 
"<span class=\"comment\"> * table start).  The second is a pointer to the next logical partition</span>", 
"<span class=\"comment\"> * (with a start relative to the entire extended partition).</span>", 
"<span class=\"comment\"> * We do not create a Linux partition for the partition tables, but</span>", 
"<span class=\"comment\"> * only for the actual data partitions.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#parse_extended\">parse_extended</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#first_sector\">first_sector</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#first_size\">first_size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#this_sector\">this_sector</a>, <a class=\"id\" href=\"#this_size\">this_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bdev\">bdev</a>) / 512;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loopct\">loopct</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of links followed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   without finding a data partition */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_sector\">this_sector</a> = <a class=\"id\" href=\"#first_sector\">first_sector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_size\">this_size</a> = <a class=\"id\" href=\"#first_size\">first_size</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#loopct\">loopct</a> &gt; 100)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#limit\">limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#this_sector\">this_sector</a>, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#msdos_magic_present\">msdos_magic_present</a>(<a class=\"id\" href=\"#data\">data</a> + 510))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>; ", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#partition\">partition</a> *) (<a class=\"id\" href=\"#data\">data</a> + 0x1be);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Usually, the first entry is the real data partition,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the 2nd entry is the next extended partition, or empty,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and the 3rd and 4th entries are unused.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However, DRDOS sometimes has the extended partition as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the first entry (when the data partition is empty),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and OS/2 seems to use all four entries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * First process the data partition(s)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;4; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offs\">offs</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_sects\">nr_sects</a>(<a class=\"id\" href=\"#p\">p</a>) || <a class=\"id\" href=\"#is_extended_partition\">is_extended_partition</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check the 3rd and 4th entries -</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   these sometimes contain random garbage */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offs\">offs</a> = <a class=\"id\" href=\"#start_sect\">start_sect</a>(<a class=\"id\" href=\"#p\">p</a>)*<a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#nr_sects\">nr_sects</a>(<a class=\"id\" href=\"#p\">p</a>)*<a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#this_sector\">this_sector</a> + <a class=\"id\" href=\"#offs\">offs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offs\">offs</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#this_size\">this_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> &lt; <a class=\"id\" href=\"#first_sector\">first_sector</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#first_sector\">first_sector</a> + <a class=\"id\" href=\"#first_size\">first_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_partition\">put_partition</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#LINUX_RAID_PARTITION\">LINUX_RAID_PARTITION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ADDPART_FLAG_RAID\">ADDPART_FLAG_RAID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loopct\">loopct</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#limit\">limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Next, process the (first) extended partition, if present.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (So far, there seems to be no reason to make</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  parse_extended()  recursive and allow a tree</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  of extended partitions.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It should be a link to the next logical partition.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> -= 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;4; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_sects\">nr_sects</a>(<a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#is_extended_partition\">is_extended_partition</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;<span class=\"ts\"/> <span class=\"comment\">/* nothing left to do */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_sector\">this_sector</a> = <a class=\"id\" href=\"#first_sector\">first_sector</a> + <a class=\"id\" href=\"#start_sect\">start_sect</a>(<a class=\"id\" href=\"#p\">p</a>) * <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_size\">this_size</a> = <a class=\"id\" href=\"#nr_sects\">nr_sects</a>(<a class=\"id\" href=\"#p\">p</a>) * <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"}", 
"", 
"<span class=\"comment\">/* james@bpgc.com: Solaris has a nasty indicator: 0x82 which also</span>", 
"<span class=\"comment\">   indicates linux swap.  Be careful before believing this is Solaris. */</span>", 
"", 
"static void <a class=\"id\" href=\"#parse_solaris_x86\">parse_solaris_x86</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#origin\">origin</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SOLARIS_X86_PARTITION\">CONFIG_SOLARIS_X86_PARTITION</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#solaris_x86_vtoc\">solaris_x86_vtoc</a> *<a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>short <a class=\"id\" href=\"#max_nparts\">max_nparts</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#offset\">offset</a> + 1, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#v\">v</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#v_sanity\">v_sanity</a>) != <a class=\"id\" href=\"#SOLARIS_X86_VTOC_SANE\">SOLARIS_X86_VTOC_SANE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[1 + <a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a> + 10 + 11 + 1];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>), \" %s%d: <solaris:\", <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#origin\">origin</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#v_version\">v_version</a>) != 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[64];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>), \"  cannot handle version %d vtoc>\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#v_version\">v_version</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure we can handle previous case of VTOC with 8 entries gracefully */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_nparts\">max_nparts</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a> (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#v_nparts\">v_nparts</a>) &gt; 8 ? <a class=\"id\" href=\"#SOLARIS_X86_NUMSLICE\">SOLARIS_X86_NUMSLICE</a> : 8;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;<a class=\"id\" href=\"#max_nparts\">max_nparts</a> && <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>&lt;<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#limit\">limit</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#solaris_x86_slice\">solaris_x86_slice</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#v_slice\">v_slice</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[3 + 10 + 1 + 1];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_size\">s_size</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>), \" [s%d]\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* solaris partitions are relative to current MS-DOS</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one; must add the offset of the current partition */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_partition\">put_partition</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>++,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_start\">s_start</a>)+<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_size\">s_size</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \" >\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BSD_DISKLABEL\">CONFIG_BSD_DISKLABEL</a>)", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * Create devices for BSD partitions listed in a disklabel, under a</span>", 
"<span class=\"comment\"> * dos-like partition. See parse_extended() for more information.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#parse_bsd\">parse_bsd</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#origin\">origin</a>, char *<a class=\"id\" href=\"#flavour\">flavour</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#max_partitions\">max_partitions</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bsd_disklabel\">bsd_disklabel</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bsd_partition\">bsd_partition</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[64];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#offset\">offset</a> + 1, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#l\">l</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#d_magic\">d_magic</a>) != <a class=\"id\" href=\"#BSD_DISKMAGIC\">BSD_DISKMAGIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>), \" %s%d: <%s:\", <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#origin\">origin</a>, <a class=\"id\" href=\"#flavour\">flavour</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#d_npartitions\">d_npartitions</a>) &lt; <a class=\"id\" href=\"#max_partitions\">max_partitions</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_partitions\">max_partitions</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#d_npartitions\">d_npartitions</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#d_partitions\">d_partitions</a>; <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#d_partitions\">d_partitions</a> &lt; <a class=\"id\" href=\"#max_partitions\">max_partitions</a>; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#bsd_start\">bsd_start</a>, <a class=\"id\" href=\"#bsd_size\">bsd_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#limit\">limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p_fstype\">p_fstype</a> == <a class=\"id\" href=\"#BSD_FS_UNUSED\">BSD_FS_UNUSED</a>) ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bsd_start\">bsd_start</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bsd_size\">bsd_size</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p_size\">p_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == <a class=\"id\" href=\"#bsd_start\">bsd_start</a> && <a class=\"id\" href=\"#size\">size</a> == <a class=\"id\" href=\"#bsd_size\">bsd_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* full parent partition, we have it already */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#bsd_start\">bsd_start</a> || <a class=\"id\" href=\"#offset\">offset</a>+<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#bsd_start\">bsd_start</a>+<a class=\"id\" href=\"#bsd_size\">bsd_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \"bad subpartition - ignored\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_partition\">put_partition</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>++, <a class=\"id\" href=\"#bsd_start\">bsd_start</a>, <a class=\"id\" href=\"#bsd_size\">bsd_size</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#d_npartitions\">d_npartitions</a>) &gt; <a class=\"id\" href=\"#max_partitions\">max_partitions</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>), \" (ignored %d more)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#d_npartitions\">d_npartitions</a>) - <a class=\"id\" href=\"#max_partitions\">max_partitions</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \" >\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#parse_freebsd\">parse_freebsd</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#origin\">origin</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BSD_DISKLABEL\">CONFIG_BSD_DISKLABEL</a>", 
];
xr_frag_insert('l/bc/d20bbbd183b73c3e8b50889cea015b779c826b.xr', __xr_tmp);
