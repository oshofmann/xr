var __xr_tmp = [
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10e7, <a class=\"id\" href=\"#quirk_i82576_sriov\">quirk_i82576_sriov</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10e8, <a class=\"id\" href=\"#quirk_i82576_sriov\">quirk_i82576_sriov</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x150a, <a class=\"id\" href=\"#quirk_i82576_sriov\">quirk_i82576_sriov</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x150d, <a class=\"id\" href=\"#quirk_i82576_sriov\">quirk_i82576_sriov</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x1518, <a class=\"id\" href=\"#quirk_i82576_sriov\">quirk_i82576_sriov</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_PCI_IOV */</span>", 
"", 
"<span class=\"comment\">/* Allow manual resource allocation for PCI hotplug bridges</span>", 
"<span class=\"comment\"> * via pci=hpmemsize=nnM and pci=hpiosize=nnM parameters. For</span>", 
"<span class=\"comment\"> * some PCI-PCI hotplug bridges, like PLX 6254 (former HINT HB6),</span>", 
"<span class=\"comment\"> * kernel fails to allocate resources when hotplug device is </span>", 
"<span class=\"comment\"> * inserted and PCI bus is rescanned.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_hotplug_bridge\">quirk_hotplug_bridge</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#is_hotplug_bridge\">is_hotplug_bridge</a> = 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_HINT\">PCI_VENDOR_ID_HINT</a>, 0x0020, <a class=\"id\" href=\"#quirk_hotplug_bridge\">quirk_hotplug_bridge</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a quirk for the Ricoh MMC controller found as a part of</span>", 
"<span class=\"comment\"> * some mulifunction chips.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * This is very similiar and based on the ricoh_mmc driver written by</span>", 
"<span class=\"comment\"> * Philip Langdale. Thank you for these magic sequences.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These chips implement the four main memory card controllers (SD, MMC, MS, xD)</span>", 
"<span class=\"comment\"> * and one or both of cardbus or firewire.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It happens that they implement SD and MMC</span>", 
"<span class=\"comment\"> * support as separate controllers (and PCI functions). The linux SDHCI</span>", 
"<span class=\"comment\"> * driver supports MMC cards but the chip detects MMC cards in hardware</span>", 
"<span class=\"comment\"> * and directs them to the MMC controller - so the SDHCI driver never sees</span>", 
"<span class=\"comment\"> * them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To get around this, we must disable the useless MMC controller.</span>", 
"<span class=\"comment\"> * At that point, the SDHCI controller will start seeing them</span>", 
"<span class=\"comment\"> * It seems to be the case that the relevant PCI registers to deactivate the</span>", 
"<span class=\"comment\"> * MMC controller live on PCI function 0, which might be the cardbus controller</span>", 
"<span class=\"comment\"> * or the firewire controller, depending on the particular chip in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This has to be done early, because as soon as we disable the MMC controller</span>", 
"<span class=\"comment\"> * other pci functions shift up one level, e.g. function #2 becomes function</span>", 
"<span class=\"comment\"> * #1, and this will confuse the pci core.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMC_RICOH_MMC\">CONFIG_MMC_RICOH_MMC</a>", 
"static void <a class=\"id\" href=\"#ricoh_mmc_fixup_rl5c476\">ricoh_mmc_fixup_rl5c476</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* disable via cardbus interface */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#write_enable\">write_enable</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#write_target\">write_target</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#disable\">disable</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* disable must be done via function #0 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PCI_FUNC\">PCI_FUNC</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xB7, &amp;<a class=\"id\" href=\"#disable\">disable</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disable\">disable</a> &amp; 0x02)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x8E, &amp;<a class=\"id\" href=\"#write_enable\">write_enable</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x8E, 0xAA);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x8D, &amp;<a class=\"id\" href=\"#write_target\">write_target</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x8D, 0xB7);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xB7, <a class=\"id\" href=\"#disable\">disable</a> | 0x02);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x8E, <a class=\"id\" href=\"#write_enable\">write_enable</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x8D, <a class=\"id\" href=\"#write_target\">write_target</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_notice\">dev_notice</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"proprietary Ricoh MMC controller disabled (via cardbus function)\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_notice\">dev_notice</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"MMC cards are now supported by standard SDHCI controller\\n\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_RICOH\">PCI_VENDOR_ID_RICOH</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_RICOH_RL5C476\">PCI_DEVICE_ID_RICOH_RL5C476</a>, <a class=\"id\" href=\"#ricoh_mmc_fixup_rl5c476\">ricoh_mmc_fixup_rl5c476</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_RICOH\">PCI_VENDOR_ID_RICOH</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_RICOH_RL5C476\">PCI_DEVICE_ID_RICOH_RL5C476</a>, <a class=\"id\" href=\"#ricoh_mmc_fixup_rl5c476\">ricoh_mmc_fixup_rl5c476</a>);", 
"", 
"static void <a class=\"id\" href=\"#ricoh_mmc_fixup_r5c832\">ricoh_mmc_fixup_r5c832</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* disable via firewire interface */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#write_enable\">write_enable</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#disable\">disable</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* disable must be done via function #0 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PCI_FUNC\">PCI_FUNC</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xCB, &amp;<a class=\"id\" href=\"#disable\">disable</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disable\">disable</a> &amp; 0x02)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xCA, &amp;<a class=\"id\" href=\"#write_enable\">write_enable</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xCA, 0x57);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xCB, <a class=\"id\" href=\"#disable\">disable</a> | 0x02);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xCA, <a class=\"id\" href=\"#write_enable\">write_enable</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_notice\">dev_notice</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"proprietary Ricoh MMC controller disabled (via firewire function)\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_notice\">dev_notice</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"MMC cards are now supported by standard SDHCI controller\\n\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_RICOH\">PCI_VENDOR_ID_RICOH</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_RICOH_R5C832\">PCI_DEVICE_ID_RICOH_R5C832</a>, <a class=\"id\" href=\"#ricoh_mmc_fixup_r5c832\">ricoh_mmc_fixup_r5c832</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_RICOH\">PCI_VENDOR_ID_RICOH</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_RICOH_R5C832\">PCI_DEVICE_ID_RICOH_R5C832</a>, <a class=\"id\" href=\"#ricoh_mmc_fixup_r5c832\">ricoh_mmc_fixup_r5c832</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/*CONFIG_MMC_RICOH_MMC*/</span>", 
"", 
"", 
"static void <a class=\"id\" href=\"#pci_do_fixups\">pci_do_fixups</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> *<a class=\"id\" href=\"#f\">f</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> *<a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#f\">f</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#vendor\">vendor</a> == <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a> || <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#vendor\">vendor</a> == (<a class=\"id\" href=\"#u16\">u16</a>) <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> || <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#device\">device</a> == (<a class=\"id\" href=\"#u16\">u16</a>) <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"calling %pF\\n\", <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hook\">hook</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hook\">hook</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__start_pci_fixups_early\">__start_pci_fixups_early</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__end_pci_fixups_early\">__end_pci_fixups_early</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__start_pci_fixups_header\">__start_pci_fixups_header</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__end_pci_fixups_header\">__end_pci_fixups_header</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__start_pci_fixups_final\">__start_pci_fixups_final</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__end_pci_fixups_final\">__end_pci_fixups_final</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__start_pci_fixups_enable\">__start_pci_fixups_enable</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__end_pci_fixups_enable\">__end_pci_fixups_enable</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__start_pci_fixups_resume\">__start_pci_fixups_resume</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__end_pci_fixups_resume\">__end_pci_fixups_resume</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__start_pci_fixups_resume_early\">__start_pci_fixups_resume_early</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__end_pci_fixups_resume_early\">__end_pci_fixups_resume_early</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__start_pci_fixups_suspend\">__start_pci_fixups_suspend</a>[];", 
"extern struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> <a class=\"id\" href=\"#__end_pci_fixups_suspend\">__end_pci_fixups_suspend</a>[];", 
"", 
"", 
"void <a class=\"id\" href=\"#pci_fixup_device\">pci_fixup_device</a>(enum <a class=\"id\" href=\"#pci_fixup_pass\">pci_fixup_pass</a> <a class=\"id\" href=\"#pass\">pass</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_fixup\">pci_fixup</a> *<a class=\"id\" href=\"#start\">start</a>, *<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#pass\">pass</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#pci_fixup_early\">pci_fixup_early</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#__start_pci_fixups_early\">__start_pci_fixups_early</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#__end_pci_fixups_early\">__end_pci_fixups_early</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#pci_fixup_header\">pci_fixup_header</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#__start_pci_fixups_header\">__start_pci_fixups_header</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#__end_pci_fixups_header\">__end_pci_fixups_header</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#pci_fixup_final\">pci_fixup_final</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#__start_pci_fixups_final\">__start_pci_fixups_final</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#__end_pci_fixups_final\">__end_pci_fixups_final</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#pci_fixup_enable\">pci_fixup_enable</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#__start_pci_fixups_enable\">__start_pci_fixups_enable</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#__end_pci_fixups_enable\">__end_pci_fixups_enable</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#pci_fixup_resume\">pci_fixup_resume</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#__start_pci_fixups_resume\">__start_pci_fixups_resume</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#__end_pci_fixups_resume\">__end_pci_fixups_resume</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#pci_fixup_resume_early\">pci_fixup_resume_early</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#__start_pci_fixups_resume_early\">__start_pci_fixups_resume_early</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#__end_pci_fixups_resume_early\">__end_pci_fixups_resume_early</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#pci_fixup_suspend\">pci_fixup_suspend</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#__start_pci_fixups_suspend\">__start_pci_fixups_suspend</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#__end_pci_fixups_suspend\">__end_pci_fixups_suspend</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* stupid compiler warning, you would think with an enum... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_do_fixups\">pci_do_fixups</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_fixup_device\">pci_fixup_device</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_apply_final_quirks\">pci_apply_final_quirks</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cls\">cls</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"PCI: CLS %u bytes\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a> << 2);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_pci_dev\">for_each_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_fixup_device\">pci_fixup_device</a>(<a class=\"id\" href=\"#pci_fixup_final\">pci_fixup_final</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If arch hasn't set it explicitly yet, use the CLS</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * value shared by all PCI devices.  If there's a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mismatch, fall back to the default value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CACHE_LINE_SIZE\">PCI_CACHE_LINE_SIZE</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cls\">cls</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cls\">cls</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a> || <a class=\"id\" href=\"#cls\">cls</a> == <a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"PCI: CLS mismatch (%u != %u), \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"using %u bytes\\n\", <a class=\"id\" href=\"#cls\">cls</a> << 2, <a class=\"id\" href=\"#tmp\">tmp</a> << 2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pci_dfl_cache_line_size\">pci_dfl_cache_line_size</a> << 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a> = <a class=\"id\" href=\"#pci_dfl_cache_line_size\">pci_dfl_cache_line_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"PCI: CLS %u bytes, default %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cls\">cls</a> << 2, <a class=\"id\" href=\"#pci_dfl_cache_line_size\">pci_dfl_cache_line_size</a> << 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a> = <a class=\"id\" href=\"#cls\">cls</a> ? <a class=\"id\" href=\"#cls\">cls</a> : <a class=\"id\" href=\"#pci_dfl_cache_line_size\">pci_dfl_cache_line_size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#fs_initcall_sync\">fs_initcall_sync</a>(<a class=\"id\" href=\"#pci_apply_final_quirks\">pci_apply_final_quirks</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Followings are device-specific reset methods which can be used to</span>", 
"<span class=\"comment\"> * reset a single function if other methods (e.g. FLR, PM D0-&gt;D3) are</span>", 
"<span class=\"comment\"> * not available.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#reset_intel_generic_dev\">reset_intel_generic_dev</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#probe\">probe</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* only implement PCI_CLASS_SERIAL_USB at present */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#PCI_CLASS_SERIAL_USB\">PCI_CLASS_SERIAL_USB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_VNDR\">PCI_CAP_ID_VNDR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + 0x4, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(100);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#reset_intel_82599_sfp_virtfn\">reset_intel_82599_sfp_virtfn</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#probe\">probe</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_EXP\">PCI_CAP_ID_EXP</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_BCR_FLR\">PCI_EXP_DEVCTL_BCR_FLR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(100);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82599_SFP_VF\">PCI_DEVICE_ID_INTEL_82599_SFP_VF</a>   0x10ed", 
"", 
"static const struct <a class=\"id\" href=\"#pci_dev_reset_methods\">pci_dev_reset_methods</a> <a class=\"id\" href=\"#pci_dev_reset_methods\">pci_dev_reset_methods</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82599_SFP_VF\">PCI_DEVICE_ID_INTEL_82599_SFP_VF</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#reset_intel_82599_sfp_virtfn\">reset_intel_82599_sfp_virtfn</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_intel_generic_dev\">reset_intel_generic_dev</a> },", 
"<span class=\"ts\"/>{ 0 }", 
"};", 
"", 
"int <a class=\"id\" href=\"#pci_dev_specific_reset\">pci_dev_specific_reset</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#probe\">probe</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pci_dev_reset_methods\">pci_dev_reset_methods</a> *<a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#pci_dev_reset_methods\">pci_dev_reset_methods</a>; <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#reset\">reset</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#vendor\">vendor</a> == <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#vendor\">vendor</a> == (<a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#device\">device</a> == (<a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#reset\">reset</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#probe\">probe</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"}", 
];
xr_frag_insert('l/bd/2b8c0b37bf9a22017592fb8f9c2f061e929618.xr', __xr_tmp);
