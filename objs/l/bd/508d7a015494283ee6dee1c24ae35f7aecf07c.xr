var __xr_tmp = [
"<span class=\"comment\">/* Kernel thread helper functions.</span>", 
"<span class=\"comment\"> *   Copyright (C) 2004 IBM Corporation, Rusty Russell.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Creation is done via kthreadd, so that we get a clean environment</span>", 
"<span class=\"comment\"> * even if we're invoked from userspace (think modprobe, hotplug cpu,</span>", 
"<span class=\"comment\"> * etc.).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#kthread_create_lock\">kthread_create_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#kthread_create_list\">kthread_create_list</a>);", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#kthreadd_task\">kthreadd_task</a>;", 
"", 
"struct <a class=\"id\" href=\"#kthread_create_info\">kthread_create_info</a>", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Information passed to kthread() from kthreadd. */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#threadfn\">threadfn</a>)(void *<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Result passed back to kthread_create() from kthreadd. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#kthread\">kthread</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#should_stop\">should_stop</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#exited\">exited</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_kthread\">to_kthread</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>((<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#vfork_done\">vfork_done</a>, struct <a class=\"id\" href=\"#kthread\">kthread</a>, <a class=\"id\" href=\"#exited\">exited</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kthread_should_stop - should this kthread return now?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When someone calls kthread_stop() on your kthread, it will be woken</span>", 
"<span class=\"comment\"> * and this will return true.  You should then return, and your return</span>", 
"<span class=\"comment\"> * value will be passed through to kthread_stop().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_kthread\">to_kthread</a>(<a class=\"id\" href=\"#current\">current</a>)-><a class=\"id\" href=\"#should_stop\">should_stop</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kthread_data - return data value specified on kthread creation</span>", 
"<span class=\"comment\"> * @task: kthread task in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the data value specified when kthread @task was created.</span>", 
"<span class=\"comment\"> * The caller is responsible for ensuring the validity of @task when</span>", 
"<span class=\"comment\"> * calling this function.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#kthread_data\">kthread_data</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_kthread\">to_kthread</a>(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kthread\">kthread</a>(void *<a class=\"id\" href=\"#_create\">_create</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy data: it's on kthread's stack */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_create_info\">kthread_create_info</a> *<a class=\"id\" href=\"#create\">create</a> = <a class=\"id\" href=\"#_create\">_create</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#threadfn\">threadfn</a>)(void *<a class=\"id\" href=\"#data\">data</a>) = <a class=\"id\" href=\"#create\">create</a>-><a class=\"id\" href=\"#threadfn\">threadfn</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#create\">create</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread\">kthread</a> <a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#self\">self</a>.<a class=\"id\" href=\"#should_stop\">should_stop</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#self\">self</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#self\">self</a>.<a class=\"id\" href=\"#exited\">exited</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#vfork_done\">vfork_done</a> = &amp;<a class=\"id\" href=\"#self\">self</a>.<a class=\"id\" href=\"#exited\">exited</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OK, tell user we're spawned, wait for stop or wakeup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#create\">create</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#create\">create</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#self\">self</a>.<a class=\"id\" href=\"#should_stop\">should_stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#threadfn\">threadfn</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we can't just return, we must preserve \"self\" on stack */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_exit\">do_exit</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#create_kthread\">create_kthread</a>(struct <a class=\"id\" href=\"#kthread_create_info\">kthread_create_info</a> *<a class=\"id\" href=\"#create\">create</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We want our own signal handler (we take no signals by default). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#kernel_thread\">kernel_thread</a>(<a class=\"id\" href=\"#kthread\">kthread</a>, <a class=\"id\" href=\"#create\">create</a>, <a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a> | <a class=\"id\" href=\"#CLONE_FILES\">CLONE_FILES</a> | <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create\">create</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#create\">create</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kthread_create - create a kthread.</span>", 
"<span class=\"comment\"> * @threadfn: the function to run until signal_pending(current).</span>", 
"<span class=\"comment\"> * @data: data ptr for @threadfn.</span>", 
"<span class=\"comment\"> * @namefmt: printf-style name for the thread.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: This helper function creates and names a kernel</span>", 
"<span class=\"comment\"> * thread.  The thread will be stopped: use wake_up_process() to start</span>", 
"<span class=\"comment\"> * it.  See also kthread_run().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When woken, the thread will run @threadfn() with @data as its</span>", 
"<span class=\"comment\"> * argument. @threadfn() can either call do_exit() directly if it is a</span>", 
"<span class=\"comment\"> * standalone thread for which noone will call kthread_stop(), or</span>", 
"<span class=\"comment\"> * return when 'kthread_should_stop()' is true (which means</span>", 
"<span class=\"comment\"> * kthread_stop() has been called).  The return value should be zero</span>", 
"<span class=\"comment\"> * or a negative error number; it will be passed to kthread_stop().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a task_struct or ERR_PTR(-ENOMEM).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#kthread_create\">kthread_create</a>(int (*<a class=\"id\" href=\"#threadfn\">threadfn</a>)(void *<a class=\"id\" href=\"#data\">data</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char <a class=\"id\" href=\"#namefmt\">namefmt</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   ...)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_create_info\">kthread_create_info</a> <a class=\"id\" href=\"#create\">create</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#threadfn\">threadfn</a> = <a class=\"id\" href=\"#threadfn\">threadfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#done\">done</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kthread_create_lock\">kthread_create_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#kthread_create_list\">kthread_create_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kthread_create_lock\">kthread_create_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#kthreadd_task\">kthreadd_task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#done\">done</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#result\">result</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_param\">sched_param</a> <a class=\"id\" href=\"#param\">param</a> = { .<a class=\"id\" href=\"#sched_priority\">sched_priority</a> = 0 };", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#namefmt\">namefmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#result\">result</a>-><a class=\"id\" href=\"#comm\">comm</a>, sizeof(<a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#result\">result</a>-><a class=\"id\" href=\"#comm\">comm</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#namefmt\">namefmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * root may have changed our (kthreadd's) priority or CPU mask.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The kernel thread should not inherit these properties.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_setscheduler_nocheck\">sched_setscheduler_nocheck</a>(<a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#SCHED_NORMAL\">SCHED_NORMAL</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#cpu_all_mask\">cpu_all_mask</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#create\">create</a>.<a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kthread_create\">kthread_create</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kthread_bind - bind a just-created kthread to a cpu.</span>", 
"<span class=\"comment\"> * @p: thread created by kthread_create().</span>", 
"<span class=\"comment\"> * @cpu: cpu (might not be online, must be possible) for @k to run on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: This function is equivalent to set_cpus_allowed(),</span>", 
"<span class=\"comment\"> * except that @cpu doesn't need to be online, and the thread must be</span>", 
"<span class=\"comment\"> * stopped (i.e., just returned from kthread_create()).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kthread_bind\">kthread_bind</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Must have done schedule() in kthread() before we set_task_cpu */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wait_task_inactive\">wait_task_inactive</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a> = <a class=\"id\" href=\"#cpumask_of_cpu\">cpumask_of_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_THREAD_BOUND\">PF_THREAD_BOUND</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kthread_bind\">kthread_bind</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kthread_stop - stop a thread created by kthread_create().</span>", 
"<span class=\"comment\"> * @k: thread created by kthread_create().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets kthread_should_stop() for @k to return true, wakes it, and</span>", 
"<span class=\"comment\"> * waits for it to exit. This can also be called after kthread_create()</span>", 
"<span class=\"comment\"> * instead of calling wake_up_process(): the thread will exit without</span>", 
"<span class=\"comment\"> * calling threadfn().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If threadfn() may call do_exit() itself, the caller must ensure</span>", 
"<span class=\"comment\"> * task_struct can't go away.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the result of threadfn(), or %-EINTR if wake_up_process()</span>", 
"<span class=\"comment\"> * was never called.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#k\">k</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread\">kthread</a> *<a class=\"id\" href=\"#kthread\">kthread</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_kthread_stop\">trace_sched_kthread_stop</a>(<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#k\">k</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kthread\">kthread</a> = <a class=\"id\" href=\"#to_kthread\">to_kthread</a>(<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>(); <span class=\"comment\">/* it might have exited */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#vfork_done\">vfork_done</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread\">kthread</a>-><a class=\"id\" href=\"#should_stop\">should_stop</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#kthread\">kthread</a>-><a class=\"id\" href=\"#exited\">exited</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_kthread_stop_ret\">trace_sched_kthread_stop_ret</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>);", 
"", 
"int <a class=\"id\" href=\"#kthreadd\">kthreadd</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup a clean context for our children to inherit. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_comm\">set_task_comm</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, \"kthreadd\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ignore_signals\">ignore_signals</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#cpu_all_mask\">cpu_all_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mems_allowed\">set_mems_allowed</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_NOFREEZE\">PF_NOFREEZE</a> | <a class=\"id\" href=\"#PF_FREEZER_NOSIG\">PF_FREEZER_NOSIG</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#kthread_create_list\">kthread_create_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kthread_create_lock\">kthread_create_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#kthread_create_list\">kthread_create_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_create_info\">kthread_create_info</a> *<a class=\"id\" href=\"#create\">create</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create\">create</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#kthread_create_list\">kthread_create_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#kthread_create_info\">kthread_create_info</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#create\">create</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kthread_create_lock\">kthread_create_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create_kthread\">create_kthread</a>(<a class=\"id\" href=\"#create\">create</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kthread_create_lock\">kthread_create_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kthread_create_lock\">kthread_create_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kthread_worker_fn - kthread function to process kthread_worker</span>", 
"<span class=\"comment\"> * @worker_ptr: pointer to initialized kthread_worker</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function can be used as @threadfn to kthread_create() or</span>", 
"<span class=\"comment\"> * kthread_run() with @worker_ptr argument pointing to an initialized</span>", 
"<span class=\"comment\"> * kthread_worker.  The started kthread will process work_list until</span>", 
"<span class=\"comment\"> * the it is stopped with kthread_stop().  A kthread can also call</span>", 
"<span class=\"comment\"> * this function directly after extra initialization.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Different kthreads can be used for the same kthread_worker as long</span>", 
"<span class=\"comment\"> * as there's only one kthread attached to it at any given time.  A</span>", 
"<span class=\"comment\"> * kthread_worker without an attached kthread simply collects queued</span>", 
"<span class=\"comment\"> * kthread_works.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kthread_worker_fn\">kthread_worker_fn</a>(void *<a class=\"id\" href=\"#worker_ptr\">worker_ptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_worker\">kthread_worker</a> *<a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#worker_ptr\">worker_ptr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);<span class=\"ts\"/><span class=\"comment\">/* mb paired w/ kthread_stop */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#work_list\">work_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#work_list\">work_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();<span class=\"ts\"/><span class=\"comment\">/* wmb worker-b0 paired with flush-b1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done_seq\">done_seq</a> = <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#queue_seq\">queue_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();<span class=\"ts\"/><span class=\"comment\">/* mb worker-b1 paired with flush-b0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#flushing\">flushing</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#freezing\">freezing</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>();", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kthread_worker_fn\">kthread_worker_fn</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * queue_kthread_work - queue a kthread_work</span>", 
"<span class=\"comment\"> * @worker: target kthread_worker</span>", 
"<span class=\"comment\"> * @work: kthread_work to queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Queue @work to work processor @task for async execution.  @task</span>", 
"<span class=\"comment\"> * must have been created with kthread_worker_create().  Returns %true</span>", 
"<span class=\"comment\"> * if @work was successfully queued, %false if it was already pending.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#queue_kthread_work\">queue_kthread_work</a>(struct <a class=\"id\" href=\"#kthread_worker\">kthread_worker</a> *<a class=\"id\" href=\"#worker\">worker</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#work_list\">work_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#queue_seq\">queue_seq</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#queue_kthread_work\">queue_kthread_work</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flush_kthread_work - flush a kthread_work</span>", 
"<span class=\"comment\"> * @work: work to flush</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @work is queued or executing, wait for it to finish execution.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#flush_kthread_work\">flush_kthread_work</a>(struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#queue_seq\">queue_seq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#flushing\">flushing</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mb flush-b0 paired with worker-b1, to make sure either</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * worker sees the above increment or we see done_seq update.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_atomic_inc\">smp_mb__after_atomic_inc</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* A - B &lt;= 0 tests whether B is in front of A regardless of overflow */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done\">done</a>, <a class=\"id\" href=\"#seq\">seq</a> - <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done_seq\">done_seq</a> <= 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#flushing\">flushing</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rmb flush-b1 paired with worker-b0, to make sure our caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sees every change made by work-&gt;func().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_atomic_dec\">smp_mb__after_atomic_dec</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#flush_kthread_work\">flush_kthread_work</a>);", 
"", 
"struct <a class=\"id\" href=\"#kthread_flush_work\">kthread_flush_work</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#kthread_flush_work_fn\">kthread_flush_work_fn</a>(struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_flush_work\">kthread_flush_work</a> *<a class=\"id\" href=\"#fwork\">fwork</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#kthread_flush_work\">kthread_flush_work</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#fwork\">fwork</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flush_kthread_worker - flush all current works on a kthread_worker</span>", 
"<span class=\"comment\"> * @worker: worker to flush</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wait until all currently executing or pending works on @worker are</span>", 
"<span class=\"comment\"> * finished.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#flush_kthread_worker\">flush_kthread_worker</a>(struct <a class=\"id\" href=\"#kthread_worker\">kthread_worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_flush_work\">kthread_flush_work</a> <a class=\"id\" href=\"#fwork\">fwork</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KTHREAD_WORK_INIT\">KTHREAD_WORK_INIT</a>(<a class=\"id\" href=\"#fwork\">fwork</a>.<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#kthread_flush_work_fn\">kthread_flush_work_fn</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#COMPLETION_INITIALIZER_ONSTACK\">COMPLETION_INITIALIZER_ONSTACK</a>(<a class=\"id\" href=\"#fwork\">fwork</a>.<a class=\"id\" href=\"#done\">done</a>),", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_kthread_work\">queue_kthread_work</a>(<a class=\"id\" href=\"#worker\">worker</a>, &amp;<a class=\"id\" href=\"#fwork\">fwork</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#fwork\">fwork</a>.<a class=\"id\" href=\"#done\">done</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#flush_kthread_worker\">flush_kthread_worker</a>);", 
];
xr_frag_insert('l/bd/508d7a015494283ee6dee1c24ae35f7aecf07c.xr', __xr_tmp);
