var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_CGROUP_H\">_LINUX_CGROUP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_CGROUP_H\">_LINUX_CGROUP_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  cgroup interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2003 BULL SA</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004-2006 Silicon Graphics, Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nodemask\">nodemask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroupstats\">cgroupstats</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prio_heap\">prio_heap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUPS\">CONFIG_CGROUPS</a>", 
"", 
"struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a>;", 
"struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a>;", 
"struct <a class=\"id\" href=\"#inode\">inode</a>;", 
"struct <a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"struct <a class=\"id\" href=\"#css_id\">css_id</a>;", 
"", 
"extern int <a class=\"id\" href=\"#cgroup_init_early\">cgroup_init_early</a>(void);", 
"extern int <a class=\"id\" href=\"#cgroup_init\">cgroup_init</a>(void);", 
"extern void <a class=\"id\" href=\"#cgroup_lock\">cgroup_lock</a>(void);", 
"extern int <a class=\"id\" href=\"#cgroup_lock_is_held\">cgroup_lock_is_held</a>(void);", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"extern void <a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>(void);", 
"extern void <a class=\"id\" href=\"#cgroup_fork\">cgroup_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern void <a class=\"id\" href=\"#cgroup_fork_callbacks\">cgroup_fork_callbacks</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern void <a class=\"id\" href=\"#cgroup_post_fork\">cgroup_post_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern void <a class=\"id\" href=\"#cgroup_exit\">cgroup_exit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#run_callbacks\">run_callbacks</a>);", 
"extern int <a class=\"id\" href=\"#cgroupstats_build\">cgroupstats_build</a>(struct <a class=\"id\" href=\"#cgroupstats\">cgroupstats</a> *<a class=\"id\" href=\"#stats\">stats</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"extern int <a class=\"id\" href=\"#cgroup_load_subsys\">cgroup_load_subsys</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>);", 
"extern void <a class=\"id\" href=\"#cgroup_unload_subsys\">cgroup_unload_subsys</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>);", 
"", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_cgroup_operations\">proc_cgroup_operations</a>;", 
"", 
"<span class=\"comment\">/* Define the enumeration of all builtin cgroup subsystems */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SUBSYS\">SUBSYS</a>(<a class=\"id\" href=\"#_x\">_x</a>) <a class=\"id\" href=\"#_x\">_x</a> ## <a class=\"id\" href=\"#_subsys_id\">_subsys_id</a>,", 
"enum <a class=\"id\" href=\"#cgroup_subsys_id\">cgroup_subsys_id</a> {", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>", 
"};", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SUBSYS\">SUBSYS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This define indicates the maximum number of subsystems that can be loaded</span>", 
"<span class=\"comment\"> * at once. We limit to this many since cgroupfs_root has subsys_bits to keep</span>", 
"<span class=\"comment\"> * track of all of them.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a> (<a class=\"id\" href=\"#BITS_PER_BYTE\">BITS_PER_BYTE</a>*sizeof(unsigned long))", 
"", 
"<span class=\"comment\">/* Per-subsystem/per-cgroup state maintained by the system. */</span>", 
"struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The cgroup that this subsystem is attached to. Useful</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for subsystems that want to know about the cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hierarchy structure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * State maintained by the cgroup system to allow subsystems</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be \"busy\". Should be accessed via css_get(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * css_tryget() and and css_put().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#refcnt\">refcnt</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* ID for this css, if possible */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_id\">css_id</a> *<a class=\"id\" href=\"#id\">id</a>;", 
"};", 
"", 
"<span class=\"comment\">/* bits in struct cgroup_subsys_state flags field */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CSS_ROOT\">CSS_ROOT</a>, <span class=\"comment\">/* This CSS is the root of the subsystem */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CSS_REMOVED\">CSS_REMOVED</a>, <span class=\"comment\">/* This CSS is dead */</span>", 
"};", 
"", 
"<span class=\"comment\">/* Caller must verify that the css is not for root cgroup */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__css_get\">__css_get</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call css_get() to hold a reference on the css; it can be used</span>", 
"<span class=\"comment\"> * for a reference obtained via:</span>", 
"<span class=\"comment\"> * - an existing ref-counted reference to the css</span>", 
"<span class=\"comment\"> * - task-&gt;cgroups for a locked task</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#css_get\">css_get</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't need to reference count the root state */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#CSS_ROOT\">CSS_ROOT</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__css_get\">__css_get</a>(<a class=\"id\" href=\"#css\">css</a>, 1);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#css_is_removed\">css_is_removed</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#CSS_REMOVED\">CSS_REMOVED</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call css_tryget() to take a reference on a css if your existing</span>", 
"<span class=\"comment\"> * (known-valid) reference isn't already ref-counted. Returns false if</span>", 
"<span class=\"comment\"> * the css has been destroyed.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#css_tryget\">css_tryget</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#CSS_ROOT\">CSS_ROOT</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#CSS_REMOVED\">CSS_REMOVED</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * css_put() should be called to release a reference taken by</span>", 
"<span class=\"comment\"> * css_get() or css_tryget()</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern void <a class=\"id\" href=\"#__css_put\">__css_put</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>, int <a class=\"id\" href=\"#count\">count</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#css_put\">css_put</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#CSS_ROOT\">CSS_ROOT</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__css_put\">__css_put</a>(<a class=\"id\" href=\"#css\">css</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/* bits in struct cgroup flags field */</span>", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* Control Group is dead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGRP_REMOVED\">CGRP_REMOVED</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Control Group has previously had a child cgroup or a task,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but no longer (only if CGRP_NOTIFY_ON_RELEASE is set)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGRP_RELEASABLE\">CGRP_RELEASABLE</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* Control Group requires release notifications to userspace */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGRP_NOTIFY_ON_RELEASE\">CGRP_NOTIFY_ON_RELEASE</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A thread in rmdir() is wating for this cgroup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGRP_WAIT_ON_RMDIR\">CGRP_WAIT_ON_RMDIR</a>,", 
"};", 
"", 
"<span class=\"comment\">/* which pidlist file are we talking about? */</span>", 
"enum <a class=\"id\" href=\"#cgroup_filetype\">cgroup_filetype</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGROUP_FILE_PROCS\">CGROUP_FILE_PROCS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGROUP_FILE_TASKS\">CGROUP_FILE_TASKS</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A pidlist is a list of pids that virtually represents the contents of one</span>", 
"<span class=\"comment\"> * of the cgroup files (\"procs\" or \"tasks\"). We keep a list of such pidlists,</span>", 
"<span class=\"comment\"> * a pair (one each for procs, tasks) for each pid namespace that's relevant</span>", 
"<span class=\"comment\"> * to the cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * used to find which pidlist is wanted. doesn't change as long as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this particular list stays in the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct { enum <a class=\"id\" href=\"#cgroup_filetype\">cgroup_filetype</a> <a class=\"id\" href=\"#type\">type</a>; struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>; } <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* array of xids */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* how many elements the above list has */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* how many files are using the current array */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#use_count\">use_count</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* each of these stored in a list by its cgroup */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#links\">links</a>;", 
];
xr_frag_insert('l/bd/5d89408af67a514a5c7f985c030b7b5b6251b0.xr', __xr_tmp);
