var __xr_tmp = [
"static void <a class=\"id\" href=\"#__setup_APIC_LVTT\">__setup_APIC_LVTT</a>(unsigned int <a class=\"id\" href=\"#clocks\">clocks</a>, int <a class=\"id\" href=\"#oneshot\">oneshot</a>, int <a class=\"id\" href=\"#irqen\">irqen</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lvtt_value\">lvtt_value</a>, <a class=\"id\" href=\"#tmp_value\">tmp_value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lvtt_value\">lvtt_value</a> = <a class=\"id\" href=\"#LOCAL_TIMER_VECTOR\">LOCAL_TIMER_VECTOR</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oneshot\">oneshot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lvtt_value\">lvtt_value</a> |= <a class=\"id\" href=\"#APIC_LVT_TIMER_PERIODIC\">APIC_LVT_TIMER_PERIODIC</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#lapic_is_integrated\">lapic_is_integrated</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lvtt_value\">lvtt_value</a> |= <a class=\"id\" href=\"#SET_APIC_TIMER_BASE\">SET_APIC_TIMER_BASE</a>(<a class=\"id\" href=\"#APIC_TIMER_BASE_DIV\">APIC_TIMER_BASE_DIV</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#irqen\">irqen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lvtt_value\">lvtt_value</a> |= <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>, <a class=\"id\" href=\"#lvtt_value\">lvtt_value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Divide PICLK by 16</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp_value\">tmp_value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_TDCR\">APIC_TDCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_TDCR\">APIC_TDCR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#tmp_value\">tmp_value</a> &amp; ~(<a class=\"id\" href=\"#APIC_TDR_DIV_1\">APIC_TDR_DIV_1</a> | <a class=\"id\" href=\"#APIC_TDR_DIV_TMBASE\">APIC_TDR_DIV_TMBASE</a>)) |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#APIC_TDR_DIV_16\">APIC_TDR_DIV_16</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oneshot\">oneshot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_TMICT\">APIC_TMICT</a>, <a class=\"id\" href=\"#clocks\">clocks</a> / <a class=\"id\" href=\"#APIC_DIVISOR\">APIC_DIVISOR</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup extended LVT, AMD specific (K8, family 10h)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Vector mappings are hard coded. On K8 only offset 0 (APIC500) and</span>", 
"<span class=\"comment\"> * MCE interrupts are supported. Thus MCE offset must be set to 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If mask=1, the LVT entry does not generate interrupts while mask=0</span>", 
"<span class=\"comment\"> * enables the vector. See also the BKDGs.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#APIC_EILVT_LVTOFF_MCE\">APIC_EILVT_LVTOFF_MCE</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#APIC_EILVT_LVTOFF_IBS\">APIC_EILVT_LVTOFF_IBS</a> 1", 
"", 
"static void <a class=\"id\" href=\"#setup_APIC_eilvt\">setup_APIC_eilvt</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#lvt_off\">lvt_off</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#msg_type\">msg_type</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reg\">reg</a> = (<a class=\"id\" href=\"#lvt_off\">lvt_off</a> << 4) + <a class=\"id\" href=\"#APIC_EILVTn\">APIC_EILVTn</a>(0);", 
"<span class=\"ts\"/>unsigned int  <a class=\"id\" href=\"#v\">v</a>   = (<a class=\"id\" href=\"#mask\">mask</a> << 16) | (<a class=\"id\" href=\"#msg_type\">msg_type</a> << 8) | <a class=\"id\" href=\"#vector\">vector</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#setup_APIC_eilvt_mce\">setup_APIC_eilvt_mce</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#msg_type\">msg_type</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_APIC_eilvt\">setup_APIC_eilvt</a>(<a class=\"id\" href=\"#APIC_EILVT_LVTOFF_MCE\">APIC_EILVT_LVTOFF_MCE</a>, <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#msg_type\">msg_type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#APIC_EILVT_LVTOFF_MCE\">APIC_EILVT_LVTOFF_MCE</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#setup_APIC_eilvt_ibs\">setup_APIC_eilvt_ibs</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#msg_type\">msg_type</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_APIC_eilvt\">setup_APIC_eilvt</a>(<a class=\"id\" href=\"#APIC_EILVT_LVTOFF_IBS\">APIC_EILVT_LVTOFF_IBS</a>, <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#msg_type\">msg_type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#APIC_EILVT_LVTOFF_IBS\">APIC_EILVT_LVTOFF_IBS</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#setup_APIC_eilvt_ibs\">setup_APIC_eilvt_ibs</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Program the next event, relative to now</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#lapic_next_event\">lapic_next_event</a>(unsigned long <a class=\"id\" href=\"#delta\">delta</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_TMICT\">APIC_TMICT</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup the lapic timer in periodic or oneshot mode</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#lapic_timer_setup\">lapic_timer_setup</a>(enum <a class=\"id\" href=\"#clock_event_mode\">clock_event_mode</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lapic used as dummy for broadcast ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_DUMMY\">CLOCK_EVT_FEAT_DUMMY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_PERIODIC\">CLOCK_EVT_MODE_PERIODIC</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__setup_APIC_LVTT\">__setup_APIC_LVTT</a>(<a class=\"id\" href=\"#calibration_result\">calibration_result</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#CLOCK_EVT_MODE_PERIODIC\">CLOCK_EVT_MODE_PERIODIC</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_UNUSED\">CLOCK_EVT_MODE_UNUSED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_SHUTDOWN\">CLOCK_EVT_MODE_SHUTDOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> |= (<a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a> | <a class=\"id\" href=\"#LOCAL_TIMER_VECTOR\">LOCAL_TIMER_VECTOR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_TMICT\">APIC_TMICT</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_RESUME\">CLOCK_EVT_MODE_RESUME</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nothing to do here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Local APIC timer broadcast function</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#lapic_timer_broadcast\">lapic_timer_broadcast</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#LOCAL_TIMER_VECTOR\">LOCAL_TIMER_VECTOR</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup the local APIC timer for this CPU. Copy the initialized values</span>", 
"<span class=\"comment\"> * of the boot CPU and register the clock event in the framework.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#setup_APIC_timer\">setup_APIC_timer</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#levt\">levt</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#lapic_events\">lapic_events</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(&amp;<a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a>, <a class=\"id\" href=\"#X86_FEATURE_ARAT\">X86_FEATURE_ARAT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>.<a class=\"id\" href=\"#features\">features</a> &= ~<a class=\"id\" href=\"#CLOCK_EVT_FEAT_C3STOP\">CLOCK_EVT_FEAT_C3STOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make LAPIC timer preferrable over percpu HPET */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>.<a class=\"id\" href=\"#rating\">rating</a> = 150;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#levt\">levt</a>, &amp;<a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>, sizeof(*<a class=\"id\" href=\"#levt\">levt</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#levt\">levt</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a> = <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_register_device\">clockevents_register_device</a>(<a class=\"id\" href=\"#levt\">levt</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In this functions we calibrate APIC bus clocks to the external timer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We want to do the calibration only once since we want to have local timer</span>", 
"<span class=\"comment\"> * irqs syncron. CPUs connected by the same APIC bus have the very same bus</span>", 
"<span class=\"comment\"> * frequency.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This was previously done by reading the PIT/HPET and waiting for a wrap</span>", 
"<span class=\"comment\"> * around to find out, that a tick has elapsed. I have a box, where the PIT</span>", 
"<span class=\"comment\"> * readout is broken, so it never gets out of the wait loop again. This was</span>", 
"<span class=\"comment\"> * also reported by others.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Monitoring the jiffies value is inaccurate and the clockevents</span>", 
"<span class=\"comment\"> * infrastructure allows us to do a simple substitution of the interrupt</span>", 
"<span class=\"comment\"> * handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The calibration routine also uses the pm_timer when possible, as the PIT</span>", 
"<span class=\"comment\"> * happens to run way too slow (factor 2.3 on my VAIO CoreDuo, which goes</span>", 
"<span class=\"comment\"> * back to normal later in the boot process).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#HZ\">HZ</a>/10)", 
"", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> int <a class=\"id\" href=\"#lapic_cal_loops\">lapic_cal_loops</a> = -1;", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> long <a class=\"id\" href=\"#lapic_cal_t1\">lapic_cal_t1</a>, <a class=\"id\" href=\"#lapic_cal_t2\">lapic_cal_t2</a>;", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> unsigned long long <a class=\"id\" href=\"#lapic_cal_tsc1\">lapic_cal_tsc1</a>, <a class=\"id\" href=\"#lapic_cal_tsc2\">lapic_cal_tsc2</a>;", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> unsigned long <a class=\"id\" href=\"#lapic_cal_pm1\">lapic_cal_pm1</a>, <a class=\"id\" href=\"#lapic_cal_pm2\">lapic_cal_pm2</a>;", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> unsigned long <a class=\"id\" href=\"#lapic_cal_j1\">lapic_cal_j1</a>, <a class=\"id\" href=\"#lapic_cal_j2\">lapic_cal_j2</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Temporary interrupt handler.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#lapic_cal_handler\">lapic_cal_handler</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#tsc\">tsc</a> = 0;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#tapic\">tapic</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_TMCCT\">APIC_TMCCT</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#acpi_pm_read_early\">acpi_pm_read_early</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtscll\">rdtscll</a>(<a class=\"id\" href=\"#tsc\">tsc</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#lapic_cal_loops\">lapic_cal_loops</a>++) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_cal_t1\">lapic_cal_t1</a> = <a class=\"id\" href=\"#tapic\">tapic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_cal_tsc1\">lapic_cal_tsc1</a> = <a class=\"id\" href=\"#tsc\">tsc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_cal_pm1\">lapic_cal_pm1</a> = <a class=\"id\" href=\"#pm\">pm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_cal_j1\">lapic_cal_j1</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_cal_t2\">lapic_cal_t2</a> = <a class=\"id\" href=\"#tapic\">tapic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_cal_tsc2\">lapic_cal_tsc2</a> = <a class=\"id\" href=\"#tsc\">tsc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a> &lt; <a class=\"id\" href=\"#lapic_cal_pm1\">lapic_cal_pm1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm\">pm</a> += <a class=\"id\" href=\"#ACPI_PM_OVRRUN\">ACPI_PM_OVRRUN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_cal_pm2\">lapic_cal_pm2</a> = <a class=\"id\" href=\"#pm\">pm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_cal_j2\">lapic_cal_j2</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#calibrate_by_pmtimer\">calibrate_by_pmtimer</a>(long <a class=\"id\" href=\"#deltapm\">deltapm</a>, long *<a class=\"id\" href=\"#delta\">delta</a>, long *<a class=\"id\" href=\"#deltatsc\">deltatsc</a>)", 
"{", 
"<span class=\"ts\"/>const long <a class=\"id\" href=\"#pm_100ms\">pm_100ms</a> = <a class=\"id\" href=\"#PMTMR_TICKS_PER_SEC\">PMTMR_TICKS_PER_SEC</a> / 10;", 
"<span class=\"ts\"/>const long <a class=\"id\" href=\"#pm_thresh\">pm_thresh</a> = <a class=\"id\" href=\"#pm_100ms\">pm_100ms</a> / 100;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mult\">mult</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_X86_PM_TIMER\">CONFIG_X86_PM_TIMER</a>", 
"<span class=\"ts\"/>return -1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"... PM-Timer delta = %ld\\n\", <a class=\"id\" href=\"#deltapm\">deltapm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check, if the PM timer is available */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#deltapm\">deltapm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mult\">mult</a> = <a class=\"id\" href=\"#clocksource_hz2mult\">clocksource_hz2mult</a>(<a class=\"id\" href=\"#PMTMR_TICKS_PER_SEC\">PMTMR_TICKS_PER_SEC</a>, 22);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#deltapm\">deltapm</a> &gt; (<a class=\"id\" href=\"#pm_100ms\">pm_100ms</a> - <a class=\"id\" href=\"#pm_thresh\">pm_thresh</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#deltapm\">deltapm</a> &lt; (<a class=\"id\" href=\"#pm_100ms\">pm_100ms</a> + <a class=\"id\" href=\"#pm_thresh\">pm_thresh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"... PM-Timer result ok\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = (((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#deltapm\">deltapm</a>) *  <a class=\"id\" href=\"#mult\">mult</a>) >> 22;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#res\">res</a>, 1000000);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"APIC calibration not consistent \"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"with PM-Timer: %ldms instead of 100ms\\n\",(long)<a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Correct the lapic counter value */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = (((<a class=\"id\" href=\"#u64\">u64</a>)(*<a class=\"id\" href=\"#delta\">delta</a>)) * <a class=\"id\" href=\"#pm_100ms\">pm_100ms</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#deltapm\">deltapm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"APIC delta adjusted to PM-Timer: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"%lu (%ld)\\n\", (unsigned long)<a class=\"id\" href=\"#res\">res</a>, *<a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#delta\">delta</a> = (long)<a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Correct the tsc counter value */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = (((<a class=\"id\" href=\"#u64\">u64</a>)(*<a class=\"id\" href=\"#deltatsc\">deltatsc</a>)) * <a class=\"id\" href=\"#pm_100ms\">pm_100ms</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#deltapm\">deltapm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"TSC delta adjusted to \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"PM-Timer: %lu (%ld)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#res\">res</a>, *<a class=\"id\" href=\"#deltatsc\">deltatsc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#deltatsc\">deltatsc</a> = (long)<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#calibrate_APIC_clock\">calibrate_APIC_clock</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#levt\">levt</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#lapic_events\">lapic_events</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#real_handler\">real_handler</a>)(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#deltaj\">deltaj</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#deltatsc\">deltatsc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pm_referenced\">pm_referenced</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Replace the global interrupt handler */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#real_handler\">real_handler</a> = <a class=\"id\" href=\"#global_clock_event\">global_clock_event</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_clock_event\">global_clock_event</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a> = <a class=\"id\" href=\"#lapic_cal_handler\">lapic_cal_handler</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Setup the APIC counter to maximum. There is no way the lapic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can underflow in the 100ms detection time frame</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__setup_APIC_LVTT\">__setup_APIC_LVTT</a>(0xffffffff, 0, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Let the interrupts run */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#lapic_cal_loops\">lapic_cal_loops</a> <= <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Restore the real event handler */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_clock_event\">global_clock_event</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a> = <a class=\"id\" href=\"#real_handler\">real_handler</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Build delta t1-t2 as apic timer counts down */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#lapic_cal_t1\">lapic_cal_t1</a> - <a class=\"id\" href=\"#lapic_cal_t2\">lapic_cal_t2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"... lapic delta = %ld\\n\", <a class=\"id\" href=\"#delta\">delta</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deltatsc\">deltatsc</a> = (long)(<a class=\"id\" href=\"#lapic_cal_tsc2\">lapic_cal_tsc2</a> - <a class=\"id\" href=\"#lapic_cal_tsc1\">lapic_cal_tsc1</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we trust the PM based calibration if possible */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_referenced\">pm_referenced</a> = !<a class=\"id\" href=\"#calibrate_by_pmtimer\">calibrate_by_pmtimer</a>(<a class=\"id\" href=\"#lapic_cal_pm2\">lapic_cal_pm2</a> - <a class=\"id\" href=\"#lapic_cal_pm1\">lapic_cal_pm1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#delta\">delta</a>, &amp;<a class=\"id\" href=\"#deltatsc\">deltatsc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate the scaled math multiplication factor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>.<a class=\"id\" href=\"#mult\">mult</a> = <a class=\"id\" href=\"#div_sc\">div_sc</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a> * <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>.<a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>.<a class=\"id\" href=\"#max_delta_ns\">max_delta_ns</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevent_delta2ns\">clockevent_delta2ns</a>(0x7FFFFF, &amp;<a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>.<a class=\"id\" href=\"#min_delta_ns\">min_delta_ns</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevent_delta2ns\">clockevent_delta2ns</a>(0xF, &amp;<a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calibration_result\">calibration_result</a> = (<a class=\"id\" href=\"#delta\">delta</a> * <a class=\"id\" href=\"#APIC_DIVISOR\">APIC_DIVISOR</a>) / <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"..... delta %ld\\n\", <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"..... mult: %u\\n\", <a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>.<a class=\"id\" href=\"#mult\">mult</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"..... calibration result: %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#calibration_result\">calibration_result</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"..... CPU clock speed is \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"%ld.%04ld MHz.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#deltatsc\">deltatsc</a> / <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a>) / (1000000 / <a class=\"id\" href=\"#HZ\">HZ</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#deltatsc\">deltatsc</a> / <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a>) % (1000000 / <a class=\"id\" href=\"#HZ\">HZ</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"..... host bus clock speed is \"", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"%u.%04u MHz.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#calibration_result\">calibration_result</a> / (1000000 / <a class=\"id\" href=\"#HZ\">HZ</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#calibration_result\">calibration_result</a> % (1000000 / <a class=\"id\" href=\"#HZ\">HZ</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do a sanity check on the APIC calibration result</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#calibration_result\">calibration_result</a> &lt; (1000000 / <a class=\"id\" href=\"#HZ\">HZ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"APIC frequency too slow, disabling apic timer\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#levt\">levt</a>-><a class=\"id\" href=\"#features\">features</a> &= ~<a class=\"id\" href=\"#CLOCK_EVT_FEAT_DUMMY\">CLOCK_EVT_FEAT_DUMMY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PM timer calibration failed or not turned on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so lets try APIC timer based calibration</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pm_referenced\">pm_referenced</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"... verify APIC timer\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Setup the apic timer manually</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#levt\">levt</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a> = <a class=\"id\" href=\"#lapic_cal_handler\">lapic_cal_handler</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_setup\">lapic_timer_setup</a>(<a class=\"id\" href=\"#CLOCK_EVT_MODE_PERIODIC\">CLOCK_EVT_MODE_PERIODIC</a>, <a class=\"id\" href=\"#levt\">levt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_cal_loops\">lapic_cal_loops</a> = -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Let the interrupts run */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#lapic_cal_loops\">lapic_cal_loops</a> <= <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Stop the lapic timer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_setup\">lapic_timer_setup</a>(<a class=\"id\" href=\"#CLOCK_EVT_MODE_SHUTDOWN\">CLOCK_EVT_MODE_SHUTDOWN</a>, <a class=\"id\" href=\"#levt\">levt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Jiffies delta */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deltaj\">deltaj</a> = <a class=\"id\" href=\"#lapic_cal_j2\">lapic_cal_j2</a> - <a class=\"id\" href=\"#lapic_cal_j1\">lapic_cal_j1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"... jiffies delta = %lu\\n\", <a class=\"id\" href=\"#deltaj\">deltaj</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check, if the jiffies result is consistent */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#deltaj\">deltaj</a> >= <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a>-2 && <a class=\"id\" href=\"#deltaj\">deltaj</a> <= <a class=\"id\" href=\"#LAPIC_CAL_LOOPS\">LAPIC_CAL_LOOPS</a>+2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"... jiffies result ok\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#levt\">levt</a>-><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#CLOCK_EVT_FEAT_DUMMY\">CLOCK_EVT_FEAT_DUMMY</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#levt\">levt</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_DUMMY\">CLOCK_EVT_FEAT_DUMMY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"APIC timer disabled due to verification failure\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup the boot APIC</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Calibrate and verify the result.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_boot_APIC_clock\">setup_boot_APIC_clock</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The local apic timer can be disabled via the kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * commandline or from the CPU detection code. Register the lapic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timer as a dummy clock event source on SMP systems, so the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * broadcast mechanism is used. On UP systems simply ignore it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disable_apic_timer\">disable_apic_timer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Disabling APIC timer\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No broadcast on UP ! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>.<a class=\"id\" href=\"#mult\">mult</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_APIC_timer\">setup_APIC_timer</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"Using local APIC timer interrupts.\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"calibrating APIC timer ...\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#calibrate_APIC_clock\">calibrate_APIC_clock</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No broadcast on UP ! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_APIC_timer\">setup_APIC_timer</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If nmi_watchdog is set to IO_APIC, we need the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PIT/HPET going.  Otherwise register lapic as a dummy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> != <a class=\"id\" href=\"#NMI_IO_APIC\">NMI_IO_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_clockevent\">lapic_clockevent</a>.<a class=\"id\" href=\"#features\">features</a> &= ~<a class=\"id\" href=\"#CLOCK_EVT_FEAT_DUMMY\">CLOCK_EVT_FEAT_DUMMY</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"APIC timer registered as dummy,\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" due to nmi_watchdog=%d!\\n\", <a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup the lapic or request the broadcast */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_APIC_timer\">setup_APIC_timer</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#setup_secondary_APIC_clock\">setup_secondary_APIC_clock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_APIC_timer\">setup_APIC_timer</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The guts of the apic timer interrupt</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#local_apic_timer_interrupt\">local_apic_timer_interrupt</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#lapic_events\">lapic_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Normally we should not be here till LAPIC has been initialized but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in some cases like kdump, its possible that there is a pending LAPIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timer interrupt from previous kernel's context and is delivered in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new kernel the moment interrupts are enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Interrupts are enabled early and LAPIC is setup much later, hence</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its possible that when we get here evt-&gt;event_handler is NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for event_handler being NULL and discard the interrupt as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * spurious.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Spurious LAPIC timer interrupt on cpu %d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Switch it off */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_setup\">lapic_timer_setup</a>(<a class=\"id\" href=\"#CLOCK_EVT_MODE_SHUTDOWN\">CLOCK_EVT_MODE_SHUTDOWN</a>, <a class=\"id\" href=\"#evt\">evt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the NMI deadlock-detector uses this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_irq_stat\">inc_irq_stat</a>(<a class=\"id\" href=\"#apic_timer_irqs\">apic_timer_irqs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a>(<a class=\"id\" href=\"#evt\">evt</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Local APIC timer interrupt. This is the most natural way for doing</span>", 
"<span class=\"comment\"> * local interrupts, but local timer interrupts can be emulated by</span>", 
"<span class=\"comment\"> * broadcast interrupts too. [in case the hw doesn't support APIC timers]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [ if a single-CPU system runs an SMP kernel then we call the local</span>", 
"<span class=\"comment\"> *   interrupt as well. Thus we cannot inline the local irq ... ]</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__irq_entry\">__irq_entry</a> <a class=\"id\" href=\"#smp_apic_timer_interrupt\">smp_apic_timer_interrupt</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#old_regs\">old_regs</a> = <a class=\"id\" href=\"#set_irq_regs\">set_irq_regs</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE! We'd better ACK the irq immediately,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because timer handling can be slow.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update_process_times() expects us to have done irq_enter().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Besides, if we don't timer interrupts ignore the global</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt lock, which is the WrongThing (tm) to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_idle\">exit_idle</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_enter\">irq_enter</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_apic_timer_interrupt\">local_apic_timer_interrupt</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_exit\">irq_exit</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_irq_regs\">set_irq_regs</a>(<a class=\"id\" href=\"#old_regs\">old_regs</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#setup_profiling_timer\">setup_profiling_timer</a>(unsigned int <a class=\"id\" href=\"#multiplier\">multiplier</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Local APIC start and shutdown</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clear_local_APIC - shutdown the local APIC</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called, when a CPU is disabled and before rebooting, so the state of</span>", 
"<span class=\"comment\"> * the local APIC has no dangling leftovers. Also used to cleanout any BIOS</span>", 
"<span class=\"comment\"> * leftovers during boot.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#clear_local_APIC\">clear_local_APIC</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxlvt\">maxlvt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* APIC hasn't been mapped yet */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x2apic_mode\">x2apic_mode</a> && !<a class=\"id\" href=\"#apic_phys\">apic_phys</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxlvt\">maxlvt</a> = <a class=\"id\" href=\"#lapic_get_maxlvt\">lapic_get_maxlvt</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Masking an LVT entry can trigger a local APIC error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the vector is zero. Mask LVTERR first to prevent this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#ERROR_APIC_VECTOR\">ERROR_APIC_VECTOR</a>; <span class=\"comment\">/* any non-zero vector will do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTERR\">APIC_LVTERR</a>, <a class=\"id\" href=\"#v\">v</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Careful: we have to set masks only first to deassert</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any level-triggered sources.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>, <a class=\"id\" href=\"#v\">v</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>, <a class=\"id\" href=\"#v\">v</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>, <a class=\"id\" href=\"#v\">v</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTPC\">APIC_LVTPC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTPC\">APIC_LVTPC</a>, <a class=\"id\" href=\"#v\">v</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* lets not touch this if we didn't frob it */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_THERMAL_VECTOR\">CONFIG_X86_THERMAL_VECTOR</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 5) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTTHMR\">APIC_LVTTHMR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTTHMR\">APIC_LVTTHMR</a>, <a class=\"id\" href=\"#v\">v</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_MCE_INTEL\">CONFIG_X86_MCE_INTEL</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTCMCI\">APIC_LVTCMCI</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#v\">v</a> &amp; <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTCMCI\">APIC_LVTCMCI</a>, <a class=\"id\" href=\"#v\">v</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clean APIC state for other OSs:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>, <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>, <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>, <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTERR\">APIC_LVTERR</a>, <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTPC\">APIC_LVTPC</a>, <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Integrated APIC (!82489DX) ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lapic_is_integrated\">lapic_is_integrated</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear ESR due to Pentium errata 3AP and 11AP */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disable_local_APIC - clear and disable the local APIC</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#disable_local_APIC\">disable_local_APIC</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* APIC hasn't been mapped yet */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x2apic_mode\">x2apic_mode</a> && !<a class=\"id\" href=\"#apic_phys\">apic_phys</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_local_APIC\">clear_local_APIC</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable APIC (implies clearing of registers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for 82489DX!).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~<a class=\"id\" href=\"#APIC_SPIV_APIC_ENABLED\">APIC_SPIV_APIC_ENABLED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When LAPIC was disabled by the BIOS and enabled by the kernel,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * restore the disabled state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enabled_via_apicbase\">enabled_via_apicbase</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_APICBASE\">MSR_IA32_APICBASE</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> &= ~<a class=\"id\" href=\"#MSR_IA32_APICBASE_ENABLE\">MSR_IA32_APICBASE_ENABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_IA32_APICBASE\">MSR_IA32_APICBASE</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If Linux enabled the LAPIC against the BIOS default disable it down before</span>", 
"<span class=\"comment\"> * re-entering the BIOS on shutdown.  Otherwise the BIOS may get confused and</span>", 
"<span class=\"comment\"> * not power-off.  Additionally clear all LVT entries before disable_local_APIC</span>", 
"<span class=\"comment\"> * for the case where Linux didn't enable the LAPIC.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#lapic_shutdown\">lapic_shutdown</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a> && !<a class=\"id\" href=\"#apic_from_smp_config\">apic_from_smp_config</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#enabled_via_apicbase\">enabled_via_apicbase</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_local_APIC\">clear_local_APIC</a>();", 
"<span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_local_APIC\">disable_local_APIC</a>();", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is to verify that we're looking at a real local APIC.</span>", 
"<span class=\"comment\"> * Check these against your board if the CPUs aren't getting</span>", 
"<span class=\"comment\"> * started for no apparent reason.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#verify_local_APIC\">verify_local_APIC</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#reg0\">reg0</a>, <a class=\"id\" href=\"#reg1\">reg1</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The version register is read-only in a real APIC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg0\">reg0</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVR\">APIC_LVR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_DEBUG\">APIC_DEBUG</a>, \"Getting VERSION: %x\\n\", <a class=\"id\" href=\"#reg0\">reg0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVR\">APIC_LVR</a>, <a class=\"id\" href=\"#reg0\">reg0</a> ^ <a class=\"id\" href=\"#APIC_LVR_MASK\">APIC_LVR_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg1\">reg1</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVR\">APIC_LVR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_DEBUG\">APIC_DEBUG</a>, \"Getting VERSION: %x\\n\", <a class=\"id\" href=\"#reg1\">reg1</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The two version reads above should print the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * numbers.  If the second one is different, then we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * poke at a non-APIC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg1\">reg1</a> != <a class=\"id\" href=\"#reg0\">reg0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if the version looks reasonably.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg1\">reg1</a> = <a class=\"id\" href=\"#GET_APIC_VERSION\">GET_APIC_VERSION</a>(<a class=\"id\" href=\"#reg0\">reg0</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg1\">reg1</a> == 0x00 || <a class=\"id\" href=\"#reg1\">reg1</a> == 0xff)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg1\">reg1</a> = <a class=\"id\" href=\"#lapic_get_maxlvt\">lapic_get_maxlvt</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg1\">reg1</a> &lt; 0x02 || <a class=\"id\" href=\"#reg1\">reg1</a> == 0xff)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ID register is read/write in a real APIC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg0\">reg0</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ID\">APIC_ID</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_DEBUG\">APIC_DEBUG</a>, \"Getting ID: %x\\n\", <a class=\"id\" href=\"#reg0\">reg0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ID\">APIC_ID</a>, <a class=\"id\" href=\"#reg0\">reg0</a> ^ <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#apic_id_mask\">apic_id_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg1\">reg1</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ID\">APIC_ID</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_DEBUG\">APIC_DEBUG</a>, \"Getting ID: %x\\n\", <a class=\"id\" href=\"#reg1\">reg1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ID\">APIC_ID</a>, <a class=\"id\" href=\"#reg0\">reg0</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg1\">reg1</a> != (<a class=\"id\" href=\"#reg0\">reg0</a> ^ <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#apic_id_mask\">apic_id_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The next two are just to see if we have sane values.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * They're only really relevant if we're in Virtual Wire</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * compatibility mode, but most boxes are anymore.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg0\">reg0</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_DEBUG\">APIC_DEBUG</a>, \"Getting LVT0: %x\\n\", <a class=\"id\" href=\"#reg0\">reg0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg1\">reg1</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_DEBUG\">APIC_DEBUG</a>, \"Getting LVT1: %x\\n\", <a class=\"id\" href=\"#reg1\">reg1</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sync_Arb_IDs - synchronize APIC bus arbitration IDs</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sync_Arb_IDs\">sync_Arb_IDs</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unsupported on P4 - see Intel Dev. Manual Vol. 3, Ch. 8.6.1 And not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * needed on AMD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#modern_apic\">modern_apic</a>() || <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for idle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_wait_icr_idle\">apic_wait_icr_idle</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_DEBUG\">APIC_DEBUG</a>, \"Synchronizing Arb IDs.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ICR\">APIC_ICR</a>, <a class=\"id\" href=\"#APIC_DEST_ALLINC\">APIC_DEST_ALLINC</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#APIC_INT_LEVELTRIG\">APIC_INT_LEVELTRIG</a> | <a class=\"id\" href=\"#APIC_DM_INIT\">APIC_DM_INIT</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An initial setup of the virtual wire mode.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_bsp_APIC\">init_bsp_APIC</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't do the setup now if we have a SMP BIOS as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * through-I/O-APIC virtual wire mode might be active.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_found_config\">smp_found_config</a> || !<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not trust the local APIC being empty at bootup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_local_APIC\">clear_local_APIC</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable APIC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~<a class=\"id\" href=\"#APIC_VECTOR_MASK\">APIC_VECTOR_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#APIC_SPIV_APIC_ENABLED\">APIC_SPIV_APIC_ENABLED</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* This bit is reserved on P4/Xeon and should be cleared */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 15))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~<a class=\"id\" href=\"#APIC_SPIV_FOCUS_DISABLED\">APIC_SPIV_FOCUS_DISABLED</a>;", 
"<span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#APIC_SPIV_FOCUS_DISABLED\">APIC_SPIV_FOCUS_DISABLED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#SPURIOUS_APIC_VECTOR\">SPURIOUS_APIC_VECTOR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up the virtual wire mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>, <a class=\"id\" href=\"#APIC_DM_EXTINT\">APIC_DM_EXTINT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#lapic_is_integrated\">lapic_is_integrated</a>())<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 82489DX */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#APIC_LVT_LEVEL_TRIGGER\">APIC_LVT_LEVEL_TRIGGER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#lapic_setup_esr\">lapic_setup_esr</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#oldvalue\">oldvalue</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#maxlvt\">maxlvt</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#lapic_is_integrated\">lapic_is_integrated</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"No ESR for 82489DX.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#disable_esr\">disable_esr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Something untraceable is creating bad interrupts on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * secondary quads ... for the moment, just leave the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ESR disabled - we can't do anything useful with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * errors anyway - mbligh</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Leaving ESR disabled.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxlvt\">maxlvt</a> = <a class=\"id\" href=\"#lapic_get_maxlvt\">lapic_get_maxlvt</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> &gt; 3)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Due to the Pentium erratum 3AP. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldvalue\">oldvalue</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* enables sending errors */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#ERROR_APIC_VECTOR\">ERROR_APIC_VECTOR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTERR\">APIC_LVTERR</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * spec says clear errors after enabling vector.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> != <a class=\"id\" href=\"#oldvalue\">oldvalue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"ESR value before enabling \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"vector: 0x%08x  after: 0x%08x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oldvalue\">oldvalue</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * setup_local_APIC - setup the local APIC</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#setup_local_APIC\">setup_local_APIC</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#queued\">queued</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#acked\">acked</a> = 0;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#tsc\">tsc</a> = 0, <a class=\"id\" href=\"#ntsc\">ntsc</a>;", 
"<span class=\"ts\"/>long long <a class=\"id\" href=\"#max_loops\">max_loops</a> = <a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtscll\">rdtscll</a>(<a class=\"id\" href=\"#tsc\">tsc</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disable_apic\">disable_apic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_disable_smp_support\">arch_disable_smp_support</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Pound the ESR really hard over the head with a big hammer - mbligh */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lapic_is_integrated\">lapic_is_integrated</a>() && <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#disable_esr\">disable_esr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_events_lapic_init\">perf_events_lapic_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Double-check whether this APIC is really registered.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is meaningless in clustered apic mode, so we skip it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#apic_id_registered\">apic_id_registered</a>());", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel recommends to set DFR, LDR and TPR before enabling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an APIC.  See e.g. \"AP-388 82489DX User's Manual\" (Intel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * document number 292116).  So here it goes...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#init_apic_ldr\">init_apic_ldr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set Task Priority to 'accept all'. We never change this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * later on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_TASKPRI\">APIC_TASKPRI</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~<a class=\"id\" href=\"#APIC_TPRI_MASK\">APIC_TPRI_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_TASKPRI\">APIC_TASKPRI</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * After a crash, we no longer service the interrupts and a pending</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt from previous kernel might still have ISR bit set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Most probably by now CPU has serviced that pending interrupt and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it might not have done the ack_APIC_irq() because it thought,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt came from i8259 as ExtInt. LAPIC did not get EOI so it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * does not clear the ISR bit and cpu thinks it has already serivced</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the interrupt. Hence a vector might get locked. It was noticed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for timer irq (vector 0x31). Issue an extra EOI to clear ISR.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queued\">queued</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#APIC_ISR_NR\">APIC_ISR_NR</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queued\">queued</a> |= <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_IRR\">APIC_IRR</a> + <a class=\"id\" href=\"#i\">i</a>*0x10);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#APIC_ISR_NR\">APIC_ISR_NR</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ISR\">APIC_ISR</a> + <a class=\"id\" href=\"#i\">i</a>*0x10);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 31; <a class=\"id\" href=\"#j\">j</a> >= 0; <a class=\"id\" href=\"#j\">j</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> &amp; (1<<<a class=\"id\" href=\"#j\">j</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acked\">acked</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acked\">acked</a> &gt; 256) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"LAPIC pending interrupts after %d EOI\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acked\">acked</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtscll\">rdtscll</a>(<a class=\"id\" href=\"#ntsc\">ntsc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_loops\">max_loops</a> = (<a class=\"id\" href=\"#cpu_khz\">cpu_khz</a> << 10) - (<a class=\"id\" href=\"#ntsc\">ntsc</a> - <a class=\"id\" href=\"#tsc\">tsc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_loops\">max_loops</a>--;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#queued\">queued</a> && <a class=\"id\" href=\"#max_loops\">max_loops</a> &gt; 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#max_loops\">max_loops</a> <= 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that we are all set up, enable the APIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~<a class=\"id\" href=\"#APIC_VECTOR_MASK\">APIC_VECTOR_MASK</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable APIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
];
xr_frag_insert('l/bd/60f8cff7d13d92f94477e38e9d19ff92297660.xr', __xr_tmp);
