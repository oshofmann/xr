var __xr_tmp = [
"<a class=\"id\" href=\"#real_mode_gdt_entries\">real_mode_gdt_entries</a> [3] =", 
"{", 
"<span class=\"ts\"/>0x0000000000000000ULL,<span class=\"ts\"/><span class=\"comment\">/* Null descriptor */</span>", 
"<span class=\"ts\"/>0x00009b000000ffffULL,<span class=\"ts\"/><span class=\"comment\">/* 16-bit real-mode 64k code at 0x00000000 */</span>", 
"<span class=\"ts\"/>0x000093000100ffffULL<span class=\"ts\"/><span class=\"comment\">/* 16-bit real-mode 64k data at 0x00000100 */</span>", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a>", 
"<a class=\"id\" href=\"#real_mode_gdt\">real_mode_gdt</a> = { sizeof (<a class=\"id\" href=\"#real_mode_gdt_entries\">real_mode_gdt_entries</a>) - 1, (long)<a class=\"id\" href=\"#real_mode_gdt_entries\">real_mode_gdt_entries</a> },", 
"<a class=\"id\" href=\"#real_mode_idt\">real_mode_idt</a> = { 0x3ff, 0 };", 
"", 
"<span class=\"comment\">/* This is 16-bit protected mode code to disable paging and the cache,</span>", 
"<span class=\"comment\">   switch to real mode and jump to the BIOS reset code.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   The instruction that switches to real mode by writing to CR0 must be</span>", 
"<span class=\"comment\">   followed immediately by a far jump instruction, which set CS to a</span>", 
"<span class=\"comment\">   valid value for real mode, and flushes the prefetch queue to avoid</span>", 
"<span class=\"comment\">   running instructions that have already been decoded in protected</span>", 
"<span class=\"comment\">   mode.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Clears all the flags except ET, especially PG (paging), PE</span>", 
"<span class=\"comment\">   (protected-mode enable) and TS (task switch for coprocessor state</span>", 
"<span class=\"comment\">   save).  Flushes the TLB after paging has been disabled.  Sets CD and</span>", 
"<span class=\"comment\">   NW, to disable the cache on a 486, and invalidates the cache.  This</span>", 
"<span class=\"comment\">   is more like the state of a 486 after reset.  I don't know if</span>", 
"<span class=\"comment\">   something else should be done for other chips.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   More could be done here to set up the registers as if a CPU reset had</span>", 
"<span class=\"comment\">   occurred; hopefully real BIOSs don't assume much. */</span>", 
"static const unsigned char <a class=\"id\" href=\"#real_mode_switch\">real_mode_switch</a> [] =", 
"{", 
"<span class=\"ts\"/>0x66, 0x0f, 0x20, 0xc0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*    movl  %cr0,%eax        */</span>", 
"<span class=\"ts\"/>0x66, 0x83, 0xe0, 0x11,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*    andl  $0x00000011,%eax */</span>", 
"<span class=\"ts\"/>0x66, 0x0d, 0x00, 0x00, 0x00, 0x60,<span class=\"ts\"/><span class=\"comment\">/*    orl   $0x60000000,%eax */</span>", 
"<span class=\"ts\"/>0x66, 0x0f, 0x22, 0xc0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*    movl  %eax,%cr0        */</span>", 
"<span class=\"ts\"/>0x66, 0x0f, 0x22, 0xd8,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*    movl  %eax,%cr3        */</span>", 
"<span class=\"ts\"/>0x66, 0x0f, 0x20, 0xc3,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*    movl  %cr0,%ebx        */</span>", 
"<span class=\"ts\"/>0x66, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x60,<span class=\"ts\"/><span class=\"comment\">/*    andl  $0x60000000,%ebx */</span>", 
"<span class=\"ts\"/>0x74, 0x02,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*    jz    f                */</span>", 
"<span class=\"ts\"/>0x0f, 0x09,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*    wbinvd                 */</span>", 
"<span class=\"ts\"/>0x24, 0x10,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* f: andb  $0x10,al         */</span>", 
"<span class=\"ts\"/>0x66, 0x0f, 0x22, 0xc0<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*    movl  %eax,%cr0        */</span>", 
"};", 
"static const unsigned char <a class=\"id\" href=\"#jump_to_bios\">jump_to_bios</a> [] =", 
"{", 
"<span class=\"ts\"/>0xea, 0x00, 0x00, 0xff, 0xff<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*    ljmp  $0xffff,$0x0000  */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Switch to real mode and then execute the code</span>", 
"<span class=\"comment\"> * specified by the code and length parameters.</span>", 
"<span class=\"comment\"> * We assume that length will aways be less that 100!</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#machine_real_restart\">machine_real_restart</a>(const unsigned char *<a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Write zero to CMOS register number 0x0f, which the BIOS POST</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   routine will recognize as telling it to do a proper reboot.  (Well</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   that's what this book in front of me says -- it may only apply to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   the Phoenix BIOS though, it's not clear).  At the same time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   disable NMIs by setting the top bit in the CMOS address register,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   as we're about to do peculiar things to the CPU.  I'm not sure if</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   `outb_p' is needed instead of just `outb'.  Use it to be on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   safe side.  (Yes, CMOS_WRITE does outb_p's. -  Paul G.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#rtc_lock\">rtc_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CMOS_WRITE\">CMOS_WRITE</a>(0x00, 0x8f);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#rtc_lock\">rtc_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remap the kernel at virtual address zero, as well as offset zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   from the kernel segment.  This assumes the kernel segment starts at</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   virtual address PAGE_OFFSET. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>, <a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a> + <a class=\"id\" href=\"#KERNEL_PGD_BOUNDARY\">KERNEL_PGD_BOUNDARY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a> [0]) * <a class=\"id\" href=\"#KERNEL_PGD_PTRS\">KERNEL_PGD_PTRS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use `swapper_pg_dir' as our page directory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_cr3\">load_cr3</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Write 0x1234 to absolute memory location 0x472.  The BIOS reads</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   this on booting to tell it to \"Bypass memory test (also warm</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   boot)\".  This seems like a fairly standard thing that gets set by</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   REBOOT.COM programs, and the previous reset routine did this</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   too. */</span>", 
"<span class=\"ts\"/>*((unsigned short *)0x472) = <a class=\"id\" href=\"#reboot_mode\">reboot_mode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For the switch to real mode, copy some code to low memory.  It has</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   to be in the first 64k because it is running in 16-bit mode, and it</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   has to have the same physical and virtual address, because it turns</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   off paging.  Copy it near the end of the first page, out of the way</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   of BIOS variables. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>((void *)(0x1000 - sizeof(<a class=\"id\" href=\"#real_mode_switch\">real_mode_switch</a>) - 100),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_mode_switch\">real_mode_switch</a>, sizeof (<a class=\"id\" href=\"#real_mode_switch\">real_mode_switch</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>((void *)(0x1000 - 100), <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up the IDT for real mode. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_idt\">load_idt</a>(&amp;<a class=\"id\" href=\"#real_mode_idt\">real_mode_idt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up a GDT from which we can load segment descriptors for real</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   mode.  The GDT is not used in real mode; it is just needed here to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   prepare the descriptors. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_gdt\">load_gdt</a>(&amp;<a class=\"id\" href=\"#real_mode_gdt\">real_mode_gdt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Load the data segment registers, and thus the descriptors ready for</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   real mode.  The base address of each segment is 0x100, 16 times the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   selector value being loaded here.  This is so that the segment</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   registers don't have to be reloaded after switching to real mode:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   the values are consistent for real mode operation already. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__asm__\">__asm__</a> <a class=\"id\" href=\"#__volatile__\">__volatile__</a> (\"movl $0x0010,%%eax\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"\\tmovl %%eax,%%ds\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"\\tmovl %%eax,%%es\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"\\tmovl %%eax,%%fs\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"\\tmovl %%eax,%%gs\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"\\tmovl %%eax,%%ss\" : : : \"eax\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Jump to the 16-bit code that we copied earlier.  It disables paging</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   and the cache, switches to real mode, and jumps to the BIOS reset</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   entry point. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__asm__\">__asm__</a> <a class=\"id\" href=\"#__volatile__\">__volatile__</a> (\"ljmp $0x0008,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>: \"i\" ((void *)(0x1000 - sizeof (<a class=\"id\" href=\"#real_mode_switch\">real_mode_switch</a>) - 100)));", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_APM_MODULE\">CONFIG_APM_MODULE</a>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#machine_real_restart\">machine_real_restart</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_32 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some Apple MacBook and MacBookPro's needs reboot=p to be able to reboot</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_pci_reboot\">set_pci_reboot</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reboot_type\">reboot_type</a> != <a class=\"id\" href=\"#BOOT_CF9\">BOOT_CF9</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reboot_type\">reboot_type</a> = <a class=\"id\" href=\"#BOOT_CF9\">BOOT_CF9</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s series board detected. \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Selecting PCI-method for reboots.\\n\", <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#ident\">ident</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#pci_reboot_dmi_table\">pci_reboot_dmi_table</a>[] = {", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"comment\">/* Handle problems with rebooting on Apple MacBook5 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#set_pci_reboot\">set_pci_reboot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Apple MacBook5\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"Apple Inc.\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"MacBook5\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"comment\">/* Handle problems with rebooting on Apple MacBookPro5 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#set_pci_reboot\">set_pci_reboot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Apple MacBookPro5\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"Apple Inc.\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"MacBookPro5\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"comment\">/* Handle problems with rebooting on Apple Macmini3,1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#set_pci_reboot\">set_pci_reboot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Apple Macmini3,1\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"Apple Inc.\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"Macmini3,1\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"comment\">/* Handle problems with rebooting on the iMac9,1. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#set_pci_reboot\">set_pci_reboot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Apple iMac9,1\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"Apple Inc.\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"iMac9,1\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_reboot_init\">pci_reboot_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(<a class=\"id\" href=\"#pci_reboot_dmi_table\">pci_reboot_dmi_table</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#pci_reboot_init\">pci_reboot_init</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#kb_wait\">kb_wait</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 0x10000; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#inb\">inb</a>(0x64) &amp; 0x02) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(2);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#vmxoff_nmi\">vmxoff_nmi</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#die_args\">die_args</a> *<a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_emergency_vmxoff\">cpu_emergency_vmxoff</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Use NMIs as IPIs to tell all CPUs to disable virtualization</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#emergency_vmx_disable_all\">emergency_vmx_disable_all</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Just make sure we won't change CPUs while doing this */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need to disable VMX on all CPUs before rebooting, otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we risk hanging up the machine, because the CPU ignore INIT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * signals when VMX is enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can't take any locks and we may be on an inconsistent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state, so we use NMIs as IPIs to tell the other CPUs to disable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * VMX and halt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For safety, we will avoid running the nmi_shootdown_cpus()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stuff unnecessarily, but we don't have a way to check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if other CPUs have VMX enabled. So we will call it only if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU we are running on has VMX enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will miss cases where VMX is not enabled on all CPUs. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * shouldn't do much harm because KVM always enable VMX on all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPUs anyway. But we can miss it on the small window where KVM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is still enabling VMX.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_vmx\">cpu_has_vmx</a>() && <a class=\"id\" href=\"#cpu_vmx_enabled\">cpu_vmx_enabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable VMX on this CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_vmxoff\">cpu_vmxoff</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Halt and disable VMX on the other CPUs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nmi_shootdown_cpus\">nmi_shootdown_cpus</a>(<a class=\"id\" href=\"#vmxoff_nmi\">vmxoff_nmi</a>);", 
"", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"void <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#mach_reboot_fixups\">mach_reboot_fixups</a>(void)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#native_machine_emergency_restart\">native_machine_emergency_restart</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reboot_emergency\">reboot_emergency</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#emergency_vmx_disable_all\">emergency_vmx_disable_all</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tboot_shutdown\">tboot_shutdown</a>(<a class=\"id\" href=\"#TB_SHUTDOWN_REBOOT\">TB_SHUTDOWN_REBOOT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tell the BIOS if we want cold or warm reboot */</span>", 
"<span class=\"ts\"/>*((unsigned short *)<a class=\"id\" href=\"#__va\">__va</a>(0x472)) = <a class=\"id\" href=\"#reboot_mode\">reboot_mode</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Could also try the reset bit in the Hammer NB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#reboot_type\">reboot_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#BOOT_KBD\">BOOT_KBD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mach_reboot_fixups\">mach_reboot_fixups</a>(); <span class=\"comment\">/* for board specific fixups */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 10; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kb_wait\">kb_wait</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(50);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0xfe, 0x64); <span class=\"comment\">/* pulse reset low */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(50);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#BOOT_TRIPLE\">BOOT_TRIPLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_idt\">load_idt</a>(&amp;<a class=\"id\" href=\"#no_idt\">no_idt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__asm__\">__asm__</a> <a class=\"id\" href=\"#__volatile__\">__volatile__</a>(\"int3\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reboot_type\">reboot_type</a> = <a class=\"id\" href=\"#BOOT_KBD\">BOOT_KBD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#BOOT_BIOS\">BOOT_BIOS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_real_restart\">machine_real_restart</a>(<a class=\"id\" href=\"#jump_to_bios\">jump_to_bios</a>, sizeof(<a class=\"id\" href=\"#jump_to_bios\">jump_to_bios</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reboot_type\">reboot_type</a> = <a class=\"id\" href=\"#BOOT_KBD\">BOOT_KBD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#BOOT_ACPI\">BOOT_ACPI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_reboot\">acpi_reboot</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reboot_type\">reboot_type</a> = <a class=\"id\" href=\"#BOOT_KBD\">BOOT_KBD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#BOOT_EFI\">BOOT_EFI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#efi_enabled\">efi_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#efi\">efi</a>.<a class=\"id\" href=\"#reset_system\">reset_system</a>(<a class=\"id\" href=\"#reboot_mode\">reboot_mode</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#EFI_RESET_WARM\">EFI_RESET_WARM</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#EFI_RESET_COLD\">EFI_RESET_COLD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#EFI_SUCCESS\">EFI_SUCCESS</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reboot_type\">reboot_type</a> = <a class=\"id\" href=\"#BOOT_KBD\">BOOT_KBD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#BOOT_CF9\">BOOT_CF9</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port_cf9_safe\">port_cf9_safe</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#BOOT_CF9_COND\">BOOT_CF9_COND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#port_cf9_safe\">port_cf9_safe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cf9\">cf9</a> = <a class=\"id\" href=\"#inb\">inb</a>(0xcf9) &amp; ~6;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#cf9\">cf9</a>|2, 0xcf9); <span class=\"comment\">/* Request hard reset */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(50);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#cf9\">cf9</a>|6, 0xcf9); <span class=\"comment\">/* Actually do the reset */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(50);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reboot_type\">reboot_type</a> = <a class=\"id\" href=\"#BOOT_KBD\">BOOT_KBD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#native_machine_shutdown\">native_machine_shutdown</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Stop the cpus and apics */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The boot cpu is always logical cpu 0 */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reboot_cpu_id\">reboot_cpu_id</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* See if there has been given a command line override */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#reboot_cpu\">reboot_cpu</a> != -1) && (<a class=\"id\" href=\"#reboot_cpu\">reboot_cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#reboot_cpu\">reboot_cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reboot_cpu_id\">reboot_cpu_id</a> = <a class=\"id\" href=\"#reboot_cpu\">reboot_cpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make certain the cpu I'm about to reboot on is online */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#reboot_cpu_id\">reboot_cpu_id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reboot_cpu_id\">reboot_cpu_id</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make certain I only run on the appropriate processor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#reboot_cpu_id\">reboot_cpu_id</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* O.K Now that I'm on the appropriate processor,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stop all of the others.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_send_stop\">smp_send_stop</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_shutdown\">lapic_shutdown</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_IO_APIC\">disable_IO_APIC</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HPET_TIMER\">CONFIG_HPET_TIMER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hpet_disable\">hpet_disable</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#iommu_shutdown\">iommu_shutdown</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__machine_emergency_restart\">__machine_emergency_restart</a>(int <a class=\"id\" href=\"#emergency\">emergency</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reboot_emergency\">reboot_emergency</a> = <a class=\"id\" href=\"#emergency\">emergency</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_ops\">machine_ops</a>.<a class=\"id\" href=\"#emergency_restart\">emergency_restart</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#native_machine_restart\">native_machine_restart</a>(char *<a class=\"id\" href=\"#__unused\">__unused</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"machine restart\\n\");", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#reboot_force\">reboot_force</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_shutdown\">machine_shutdown</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__machine_emergency_restart\">__machine_emergency_restart</a>(0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#native_machine_halt\">native_machine_halt</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* stop other cpus and apics */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_shutdown\">machine_shutdown</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tboot_shutdown\">tboot_shutdown</a>(<a class=\"id\" href=\"#TB_SHUTDOWN_HALT\">TB_SHUTDOWN_HALT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* stop this cpu */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stop_this_cpu\">stop_this_cpu</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#native_machine_power_off\">native_machine_power_off</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_power_off\">pm_power_off</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#reboot_force\">reboot_force</a>)", 
];
xr_frag_insert('l/bd/9bdfce587e9cfda0a848312810c545208a4a42.xr', __xr_tmp);
