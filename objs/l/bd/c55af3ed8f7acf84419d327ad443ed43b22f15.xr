var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lib/parser.c - simple parser for mount, etc. options.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This source code is licensed under the GNU General Public License,</span>", 
"<span class=\"comment\"> * Version 2.  See the file COPYING for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#parser\">parser</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * match_one: - Determines if a string matches a simple pattern</span>", 
"<span class=\"comment\"> * @s: the string to examine for presense of the pattern</span>", 
"<span class=\"comment\"> * @p: the string containing the pattern</span>", 
"<span class=\"comment\"> * @args: array of %MAX_OPT_ARGS &amp;substring_t elements. Used to return match</span>", 
"<span class=\"comment\"> * locations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Determines if the pattern @p is present in string @s. Can only</span>", 
"<span class=\"comment\"> * match extremely simple token=arg style patterns. If the pattern is found,</span>", 
"<span class=\"comment\"> * the location(s) of the arguments will be returned in the @args array.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#match_one\">match_one</a>(char *<a class=\"id\" href=\"#s\">s</a>, const char *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#substring_t\">substring_t</a> <a class=\"id\" href=\"#args\">args</a>[])", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#meta\">meta</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#argc\">argc</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>while(1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#meta\">meta</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#p\">p</a>, '%');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#meta\">meta</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#s\">s</a>) == 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#meta\">meta</a>-<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> += <a class=\"id\" href=\"#meta\">meta</a> - <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#meta\">meta</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#p\">p</a>, (char **) &amp;<a class=\"id\" href=\"#p\">p</a>, 10);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (*<a class=\"id\" href=\"#p\">p</a> == '%') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#s\">s</a>++ != '%')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#argc\">argc</a> >= <a class=\"id\" href=\"#MAX_OPT_ARGS\">MAX_OPT_ARGS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argc\">argc</a>].<a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (*<a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 's': {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#str_len\">str_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str_len\">str_len</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == -1 || <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#str_len\">str_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#str_len\">str_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argc\">argc</a>].<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#s\">s</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'd':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argc\">argc</a>].<a class=\"id\" href=\"#to\">to</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'u':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argc\">argc</a>].<a class=\"id\" href=\"#to\">to</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'o':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argc\">argc</a>].<a class=\"id\" href=\"#to\">to</a>, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'x':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argc\">argc</a>].<a class=\"id\" href=\"#to\">to</a>, 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argc\">argc</a>].<a class=\"id\" href=\"#to\">to</a> == <a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argc\">argc</a>].<a class=\"id\" href=\"#from\">from</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argc\">argc</a>].<a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argc\">argc</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * match_token: - Find a token (and optional args) in a string</span>", 
"<span class=\"comment\"> * @s: the string to examine for token/argument pairs</span>", 
"<span class=\"comment\"> * @table: match_table_t describing the set of allowed option tokens and the</span>", 
"<span class=\"comment\"> * arguments that may be associated with them. Must be terminated with a</span>", 
"<span class=\"comment\"> * &amp;struct match_token whose pattern is set to the NULL pointer.</span>", 
"<span class=\"comment\"> * @args: array of %MAX_OPT_ARGS &amp;substring_t elements. Used to return match</span>", 
"<span class=\"comment\"> * locations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Detects which if any of a set of token strings has been passed</span>", 
"<span class=\"comment\"> * to it. Tokens can include up to MAX_OPT_ARGS instances of basic c-style</span>", 
"<span class=\"comment\"> * format identifiers which will be taken into account when matching the</span>", 
"<span class=\"comment\"> * tokens, and whose locations will be returned in the @args array.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#match_token\">match_token</a>(char *<a class=\"id\" href=\"#s\">s</a>, const <a class=\"id\" href=\"#match_table_t\">match_table_t</a> <a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#substring_t\">substring_t</a> <a class=\"id\" href=\"#args\">args</a>[])", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#match_token\">match_token</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#table\">table</a>; !<a class=\"id\" href=\"#match_one\">match_one</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pattern\">pattern</a>, <a class=\"id\" href=\"#args\">args</a>) ; <a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#token\">token</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * match_number: scan a number in the given base from a substring_t</span>", 
"<span class=\"comment\"> * @s: substring to be scanned</span>", 
"<span class=\"comment\"> * @result: resulting integer on success</span>", 
"<span class=\"comment\"> * @base: base to use when converting string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Given a &amp;substring_t and a base, attempts to parse the substring</span>", 
"<span class=\"comment\"> * as a number in that base. On success, sets @result to the integer represented</span>", 
"<span class=\"comment\"> * by the string and returns 0. Returns either -ENOMEM or -EINVAL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#match_number\">match_number</a>(<a class=\"id\" href=\"#substring_t\">substring_t</a> *<a class=\"id\" href=\"#s\">s</a>, int *<a class=\"id\" href=\"#result\">result</a>, int <a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#endp\">endp</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#to\">to</a> - <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#from\">from</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#to\">to</a> - <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#to\">to</a> - <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#from\">from</a>] = '\\0';", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#endp\">endp</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#endp\">endp</a> == <a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * match_int: - scan a decimal representation of an integer from a substring_t</span>", 
"<span class=\"comment\"> * @s: substring_t to be scanned</span>", 
"<span class=\"comment\"> * @result: resulting integer on success</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Attempts to parse the &amp;substring_t @s as a decimal integer. On</span>", 
"<span class=\"comment\"> * success, sets @result to the integer represented by the string and returns 0.</span>", 
"<span class=\"comment\"> * Returns either -ENOMEM or -EINVAL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#match_int\">match_int</a>(<a class=\"id\" href=\"#substring_t\">substring_t</a> *<a class=\"id\" href=\"#s\">s</a>, int *<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match_number\">match_number</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#result\">result</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * match_octal: - scan an octal representation of an integer from a substring_t</span>", 
"<span class=\"comment\"> * @s: substring_t to be scanned</span>", 
"<span class=\"comment\"> * @result: resulting integer on success</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Attempts to parse the &amp;substring_t @s as an octal integer. On</span>", 
"<span class=\"comment\"> * success, sets @result to the integer represented by the string and returns</span>", 
"<span class=\"comment\"> * 0. Returns either -ENOMEM or -EINVAL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#match_octal\">match_octal</a>(<a class=\"id\" href=\"#substring_t\">substring_t</a> *<a class=\"id\" href=\"#s\">s</a>, int *<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match_number\">match_number</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#result\">result</a>, 8);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * match_hex: - scan a hex representation of an integer from a substring_t</span>", 
"<span class=\"comment\"> * @s: substring_t to be scanned</span>", 
"<span class=\"comment\"> * @result: resulting integer on success</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Attempts to parse the &amp;substring_t @s as a hexadecimal integer.</span>", 
"<span class=\"comment\"> * On success, sets @result to the integer represented by the string and</span>", 
"<span class=\"comment\"> * returns 0. Returns either -ENOMEM or -EINVAL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#match_hex\">match_hex</a>(<a class=\"id\" href=\"#substring_t\">substring_t</a> *<a class=\"id\" href=\"#s\">s</a>, int *<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match_number\">match_number</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#result\">result</a>, 16);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * match_strlcpy: - Copy the characters from a substring_t to a sized buffer</span>", 
"<span class=\"comment\"> * @dest: where to copy to</span>", 
"<span class=\"comment\"> * @src: &amp;substring_t to copy</span>", 
"<span class=\"comment\"> * @size: size of destination buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Copy the characters in &amp;substring_t @src to the</span>", 
"<span class=\"comment\"> * c-style string @dest.  Copy no more than @size - 1 characters, plus</span>", 
"<span class=\"comment\"> * the terminating NUL.  Return length of @src.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#match_strlcpy\">match_strlcpy</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, const <a class=\"id\" href=\"#substring_t\">substring_t</a> *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#to\">to</a> - <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#from\">from</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ret\">ret</a> >= <a class=\"id\" href=\"#size\">size</a> ? <a class=\"id\" href=\"#size\">size</a> - 1 : <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>[<a class=\"id\" href=\"#len\">len</a>] = '\\0';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * match_strdup: - allocate a new string with the contents of a substring_t</span>", 
"<span class=\"comment\"> * @s: &amp;substring_t to copy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Allocates and returns a string filled with the contents of</span>", 
"<span class=\"comment\"> * the &amp;substring_t @s. The caller is responsible for freeing the returned</span>", 
"<span class=\"comment\"> * string with kfree().</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#match_strdup\">match_strdup</a>(const <a class=\"id\" href=\"#substring_t\">substring_t</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#sz\">sz</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#to\">to</a> - <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#from\">from</a> + 1;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_strlcpy\">match_strlcpy</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#sz\">sz</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#match_token\">match_token</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#match_int\">match_int</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#match_octal\">match_octal</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#match_hex\">match_hex</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#match_strlcpy\">match_strlcpy</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#match_strdup\">match_strdup</a>);", 
];
xr_frag_insert('l/bd/c55af3ed8f7acf84419d327ad443ed43b22f15.xr', __xr_tmp);
