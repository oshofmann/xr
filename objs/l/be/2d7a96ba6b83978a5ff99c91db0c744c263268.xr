var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = -(unsigned long) <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#vmlist\">vmlist</a>; <a class=\"id\" href=\"#count\">count</a> && <a class=\"id\" href=\"#tmp\">tmp</a>; <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = (char *) <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#vaddr\">vaddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#finished\">finished</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_IOREMAP\">VM_IOREMAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aligned_vread\">aligned_vread</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else <span class=\"comment\">/* IOREMAP area is treated as memory hole */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buf\">buf</a>, 0, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#finished\">finished</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> == <a class=\"id\" href=\"#buf_start\">buf_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* zero-fill memory holes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> != <a class=\"id\" href=\"#buf_start\">buf_start</a> + <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buf\">buf</a>, 0, <a class=\"id\" href=\"#buflen\">buflen</a> - (<a class=\"id\" href=\"#buf\">buf</a> - <a class=\"id\" href=\"#buf_start\">buf_start</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vwrite() -  write vmalloc area in a safe way.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf:<span class=\"ts\"/><span class=\"ts\"/>buffer for source data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr:<span class=\"ts\"/><span class=\"ts\"/>vm address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@count:<span class=\"ts\"/><span class=\"ts\"/>number of bytes to be read.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns # of bytes which addr and buf should be incresed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(same number to @count).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If [addr...addr+count) doesn't includes any intersect with valid</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vmalloc area, returns 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function checks that addr is a valid vmalloc'ed area, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>copy data from a buffer to the given addr. If specified range of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>[addr...addr+count) includes some valid address, data is copied from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>proper area of @buf. If there are memory holes, no copy to hole.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IOREMAP area is treated as memory hole and no copy is done.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If [addr...addr+count) doesn't includes any intersects with alive</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vm_struct area, returns 0.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf should be kernel's buffer. Because<span class=\"ts\"/>this function uses KM_USER0,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the caller should guarantee KM_USER0 is not used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: In usual ops, vwrite() is never necessary because the caller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should know vmalloc() area is valid and can use memcpy().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is for routines which have to access vmalloc area without</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>any informaion, as /dev/kmem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller should guarantee KM_USER1 is not used.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"long <a class=\"id\" href=\"#vwrite\">vwrite</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
];
xr_frag_insert('l/be/2d7a96ba6b83978a5ff99c91db0c744c263268.xr', __xr_tmp);
