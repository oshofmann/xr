var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * hvc_console.h</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 IBM Corporation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author(s):</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Ryan S. Arnold &lt;rsa@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * hvc_console header information:</span>", 
"<span class=\"comment\"> *      moved here from arch/powerpc/include/asm/hvconsole.h</span>", 
"<span class=\"comment\"> *      and drivers/char/hvc_console.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#HVC_CONSOLE_H\">HVC_CONSOLE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HVC_CONSOLE_H\">HVC_CONSOLE_H</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kref\">kref</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the max number of console adapters that can/will be found as</span>", 
"<span class=\"comment\"> * console devices on first stage console init.  Any number beyond this range</span>", 
"<span class=\"comment\"> * can't be used as a console device but is still a valid tty device.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a><span class=\"ts\"/>16", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The Linux TTY code does not support dynamic addition of tty derived devices</span>", 
"<span class=\"comment\"> * so we need to know how many tty devices we might need when space is allocated</span>", 
"<span class=\"comment\"> * for the tty device.  Since this driver supports hotplug of vty adapters we</span>", 
"<span class=\"comment\"> * need to make sure we have enough allocated.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HVC_ALLOC_TTY_ADAPTERS\">HVC_ALLOC_TTY_ADAPTERS</a><span class=\"ts\"/>8", 
"", 
"struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#outbuf\">outbuf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#outbuf_size\">outbuf_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n_outbuf\">n_outbuf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#vtermno\">vtermno</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#hv_ops\">hv_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#irq_requested\">irq_requested</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#winsize\">winsize</a> <a class=\"id\" href=\"#ws\">ws</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#tty_resize\">tty_resize</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a> <a class=\"id\" href=\"#kref\">kref</a>; <span class=\"comment\">/* ref count &amp; hvc_struct lifetime */</span>", 
"};", 
"", 
"<span class=\"comment\">/* implemented by a low level driver */</span>", 
"struct <a class=\"id\" href=\"#hv_ops\">hv_ops</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_chars\">get_chars</a>)(<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#vtermno\">vtermno</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#put_chars\">put_chars</a>)(<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#vtermno\">vtermno</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Callbacks for notification. Called in open, close and hangup */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#notifier_add\">notifier_add</a>)(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>, int <a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#notifier_del\">notifier_del</a>)(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>, int <a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#notifier_hangup\">notifier_hangup</a>)(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>, int <a class=\"id\" href=\"#irq\">irq</a>);", 
"};", 
"", 
"<span class=\"comment\">/* Register a vterm and a slot index for use as a console (console_init) */</span>", 
"extern int <a class=\"id\" href=\"#hvc_instantiate\">hvc_instantiate</a>(<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#vtermno\">vtermno</a>, int <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#hv_ops\">hv_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>);", 
"", 
"<span class=\"comment\">/* register a vterm for hvc tty operation (module_init or hotplug add) */</span>", 
"extern struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> * <a class=\"id\" href=\"#hvc_alloc\">hvc_alloc</a>(<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#vtermno\">vtermno</a>, int <a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#hv_ops\">hv_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, int <a class=\"id\" href=\"#outbuf_size\">outbuf_size</a>);", 
"<span class=\"comment\">/* remove a vterm from hvc tty operation (module_exit or hotplug remove) */</span>", 
"extern int <a class=\"id\" href=\"#hvc_remove\">hvc_remove</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>);", 
"", 
"<span class=\"comment\">/* data available */</span>", 
"int <a class=\"id\" href=\"#hvc_poll\">hvc_poll</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>);", 
"void <a class=\"id\" href=\"#hvc_kick\">hvc_kick</a>(void);", 
"", 
"<span class=\"comment\">/* Resize hvc tty terminal window */</span>", 
"extern void <a class=\"id\" href=\"#__hvc_resize\">__hvc_resize</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>, struct <a class=\"id\" href=\"#winsize\">winsize</a> <a class=\"id\" href=\"#ws\">ws</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hvc_resize\">hvc_resize</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>, struct <a class=\"id\" href=\"#winsize\">winsize</a> <a class=\"id\" href=\"#ws\">ws</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hvc_resize\">__hvc_resize</a>(<a class=\"id\" href=\"#hp\">hp</a>, <a class=\"id\" href=\"#ws\">ws</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/* default notifier for irq based notification */</span>", 
"extern int <a class=\"id\" href=\"#notifier_add_irq\">notifier_add_irq</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>, int <a class=\"id\" href=\"#data\">data</a>);", 
"extern void <a class=\"id\" href=\"#notifier_del_irq\">notifier_del_irq</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>, int <a class=\"id\" href=\"#data\">data</a>);", 
"extern void <a class=\"id\" href=\"#notifier_hangup_irq\">notifier_hangup_irq</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>, int <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_XMON\">CONFIG_XMON</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>)", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xmon\">xmon</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpus_are_in_xmon\">cpus_are_in_xmon</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">// HVC_CONSOLE_H</span>", 
];
xr_frag_insert('l/be/692bf3da9021d37b18753ef5af029b7d9b77f1.xr', __xr_tmp);
