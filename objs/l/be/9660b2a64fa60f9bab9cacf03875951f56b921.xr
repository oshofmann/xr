var __xr_tmp = [
"<span class=\"ts\"/><span class=\"comment\">/* Enable ACPI mode */</span>", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NO_ACPI_ENABLE\">ACPI_NO_ACPI_ENABLE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[Init] Going into ACPI mode\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_original_mode\">acpi_gbl_original_mode</a> = <a class=\"id\" href=\"#acpi_hw_get_mode\">acpi_hw_get_mode</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_enable\">acpi_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"AcpiEnable failed\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Obtain a permanent mapping for the FACS. This is required for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Global Lock and the Firmware Waking Vector</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_tb_initialize_facs\">acpi_tb_initialize_facs</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Could not map the FACS table\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Install the default op_region handlers. These are installed unless</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * other handlers have already been installed via the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * install_address_space_handler interface.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NO_ADDRESS_SPACE_INIT\">ACPI_NO_ADDRESS_SPACE_INIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[Init] Installing default address space handlers\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_install_region_handlers\">acpi_ev_install_region_handlers</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize ACPI Event handling (Fixed and General Purpose)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note1: We must have the hardware and events initialized before we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * execute any control methods safely. Any control method can require</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ACPI hardware support, so the hardware must be fully initialized before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any method execution!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note2: Fixed events are initialized and enabled here. GPEs are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initialized, but cannot be enabled until after the hardware is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completely initialized (SCI and global_lock activated)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NO_EVENT_INIT\">ACPI_NO_EVENT_INIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[Init] Initializing ACPI events\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_initialize_events\">acpi_ev_initialize_events</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Install the SCI handler and Global Lock handler. This completes the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hardware initialization.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NO_HANDLER_INIT\">ACPI_NO_HANDLER_INIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[Init] Installing SCI/GL handlers\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_install_xrupt_handlers\">acpi_ev_install_xrupt_handlers</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_enable_subsystem\">acpi_enable_subsystem</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_initialize_objects</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Flags           - Init/enable Options</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Completes namespace initialization by initializing device</span>", 
"<span class=\"comment\"> *              objects and executing AML code for Regions, buffers, etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_initialize_objects\">acpi_initialize_objects</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_initialize_objects\">acpi_initialize_objects</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Run all _REG methods</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: Any objects accessed by the _REG methods will be automatically</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initialized, even if they contain executable AML (see the call to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * acpi_ns_initialize_objects below).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NO_ADDRESS_SPACE_INIT\">ACPI_NO_ADDRESS_SPACE_INIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[Init] Executing _REG OpRegion methods\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_initialize_op_regions\">acpi_ev_initialize_op_regions</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Execute any module-level code that was detected during the table load</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * phase. Although illegal since ACPI 2.0, there are many machines that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * contain this type of code. Each block of detected executable AML code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * outside of any control method is wrapped with a temporary control</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * method object and placed on a global list. The methods on this list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are executed below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_exec_module_code_list\">acpi_ns_exec_module_code_list</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize the objects that remain uninitialized. This runs the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * executable AML that may be part of the declaration of these objects:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * operation_regions, buffer_fields, Buffers, and Packages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NO_OBJECT_INIT\">ACPI_NO_OBJECT_INIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[Init] Completing Initialization of ACPI Objects\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_initialize_objects\">acpi_ns_initialize_objects</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize all device objects in the namespace. This runs the device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * _STA and _INI methods.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NO_DEVICE_INIT\">ACPI_NO_DEVICE_INIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[Init] Initializing ACPI Devices\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_initialize_devices\">acpi_ns_initialize_devices</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Complete the GPE initialization for the GPE blocks defined in the FADT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (GPE block 0 and 1).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: Currently, there seems to be no need to run the _REG methods</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before enabling the GPEs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NO_EVENT_INIT\">ACPI_NO_EVENT_INIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_install_fadt_gpes\">acpi_ev_install_fadt_gpes</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Empty the caches (delete the cached objects) on the assumption that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the table load filled them up more than they will be at runtime --</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thus wasting non-paged memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_purge_cached_objects\">acpi_purge_cached_objects</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_startup_flags\">acpi_gbl_startup_flags</a> |= <a class=\"id\" href=\"#ACPI_INITIALIZED_OK\">ACPI_INITIALIZED_OK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_initialize_objects\">acpi_initialize_objects</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_terminate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Shutdown the ACPICA subsystem and release all resources.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_terminate\">acpi_terminate</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_terminate\">acpi_terminate</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Just exit if subsystem is already shutdown */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_shutdown\">acpi_gbl_shutdown</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"ACPI Subsystem is already terminated\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Subsystem appears active, go ahead and shut it down */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_shutdown\">acpi_gbl_shutdown</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_startup_flags\">acpi_gbl_startup_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>, \"Shutting down ACPI Subsystem\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Terminate the AML Debugger if present */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUGGER_EXEC\">ACPI_DEBUGGER_EXEC</a>(<a class=\"id\" href=\"#acpi_gbl_db_terminate_threads\">acpi_gbl_db_terminate_threads</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Shutdown and free all resources */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_subsystem_shutdown\">acpi_ut_subsystem_shutdown</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the mutex objects */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_mutex_terminate\">acpi_ut_mutex_terminate</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_DEBUGGER\">ACPI_DEBUGGER</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Shut down the debugger */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_db_terminate\">acpi_db_terminate</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now we can shutdown the OS-dependent layer */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_terminate\">acpi_os_terminate</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_terminate\">acpi_terminate</a>)", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ACPI_ASL_COMPILER\">ACPI_ASL_COMPILER</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_FUTURE_USAGE\">ACPI_FUTURE_USAGE</a>", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_subsystem_status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status of the ACPI subsystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Other drivers that use the ACPI subsystem should call this</span>", 
"<span class=\"comment\"> *              before making any other calls, to ensure the subsystem</span>", 
"<span class=\"comment\"> *              initialized successfully.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_subsystem_status\">acpi_subsystem_status</a>(void)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_startup_flags\">acpi_gbl_startup_flags</a> &amp; <a class=\"id\" href=\"#ACPI_INITIALIZED_OK\">ACPI_INITIALIZED_OK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_ERROR\">AE_ERROR</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_subsystem_status\">acpi_subsystem_status</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_system_info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  out_buffer      - A buffer to receive the resources for the</span>", 
"<span class=\"comment\"> *                                device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status          - the status of the call</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: This function is called to get information about the current</span>", 
"<span class=\"comment\"> *              state of the ACPI subsystem.  It will return system information</span>", 
"<span class=\"comment\"> *              in the out_buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              If the function fails an appropriate status will be returned</span>", 
"<span class=\"comment\"> *              and the value of out_buffer is undefined.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_get_system_info\">acpi_get_system_info</a>(struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> * <a class=\"id\" href=\"#out_buffer\">out_buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_system_info\">acpi_system_info</a> *<a class=\"id\" href=\"#info_ptr\">info_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_get_system_info\">acpi_get_system_info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter validation */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_validate_buffer\">acpi_ut_validate_buffer</a>(<a class=\"id\" href=\"#out_buffer\">out_buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate/Allocate/Clear caller buffer */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_initialize_buffer\">acpi_ut_initialize_buffer</a>(<a class=\"id\" href=\"#out_buffer\">out_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      sizeof(struct <a class=\"id\" href=\"#acpi_system_info\">acpi_system_info</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Populate the return buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info_ptr\">info_ptr</a> = (struct <a class=\"id\" href=\"#acpi_system_info\">acpi_system_info</a> *)<a class=\"id\" href=\"#out_buffer\">out_buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info_ptr\">info_ptr</a>-><a class=\"id\" href=\"#acpi_ca_version\">acpi_ca_version</a> = <a class=\"id\" href=\"#ACPI_CA_VERSION\">ACPI_CA_VERSION</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* System flags (ACPI capabilities) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info_ptr\">info_ptr</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ACPI_SYS_MODE_ACPI\">ACPI_SYS_MODE_ACPI</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Timer resolution - 24 or 32 bits  */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_FADT_32BIT_TIMER\">ACPI_FADT_32BIT_TIMER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info_ptr\">info_ptr</a>-><a class=\"id\" href=\"#timer_resolution\">timer_resolution</a> = 24;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info_ptr\">info_ptr</a>-><a class=\"id\" href=\"#timer_resolution\">timer_resolution</a> = 32;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the reserved fields */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info_ptr\">info_ptr</a>-><a class=\"id\" href=\"#reserved1\">reserved1</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info_ptr\">info_ptr</a>-><a class=\"id\" href=\"#reserved2\">reserved2</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Current debug levels */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info_ptr\">info_ptr</a>-><a class=\"id\" href=\"#debug_layer\">debug_layer</a> = <a class=\"id\" href=\"#acpi_dbg_layer\">acpi_dbg_layer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info_ptr\">info_ptr</a>-><a class=\"id\" href=\"#debug_level\">debug_level</a> = <a class=\"id\" href=\"#acpi_dbg_level\">acpi_dbg_level</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_get_system_info\">acpi_get_system_info</a>)", 
"", 
"<span class=\"comment\">/*****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_install_initialization_handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Handler             - Callback procedure</span>", 
"<span class=\"comment\"> *              Function            - Not (currently) used, see below</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Install an initialization handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TBD: When a second function is added, must save the Function also.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ****************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_install_initialization_handler\">acpi_install_initialization_handler</a>(<a class=\"id\" href=\"#acpi_init_handler\">acpi_init_handler</a> <a class=\"id\" href=\"#handler\">handler</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#function\">function</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handler\">handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_init_handler\">acpi_gbl_init_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_ALREADY_EXISTS\">AE_ALREADY_EXISTS</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_init_handler\">acpi_gbl_init_handler</a> = <a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_install_initialization_handler\">acpi_install_initialization_handler</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  ACPI_FUTURE_USAGE  */</span>", 
"<span class=\"comment\">/*****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_purge_cached_objects</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Empty all caches (delete the cached objects)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ****************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_purge_cached_objects\">acpi_purge_cached_objects</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_purge_cached_objects\">acpi_purge_cached_objects</a>);", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_purge_cache\">acpi_os_purge_cache</a>(<a class=\"id\" href=\"#acpi_gbl_state_cache\">acpi_gbl_state_cache</a>);", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_purge_cache\">acpi_os_purge_cache</a>(<a class=\"id\" href=\"#acpi_gbl_operand_cache\">acpi_gbl_operand_cache</a>);", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_purge_cache\">acpi_os_purge_cache</a>(<a class=\"id\" href=\"#acpi_gbl_ps_node_cache\">acpi_gbl_ps_node_cache</a>);", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_purge_cache\">acpi_os_purge_cache</a>(<a class=\"id\" href=\"#acpi_gbl_ps_node_ext_cache\">acpi_gbl_ps_node_ext_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_purge_cached_objects\">acpi_purge_cached_objects</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/be/9660b2a64fa60f9bab9cacf03875951f56b921.xr', __xr_tmp);
