var __xr_tmp = [
"", 
"<span class=\"ts\"/><span class=\"comment\">/* tell the upper layer that this chunk has no matching area */</span>", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_free_area - free area to a pcpu_chunk</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> * @freeme: offset of area to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free area starting from @freeme to @chunk.  Note that this function</span>", 
"<span class=\"comment\"> * only modifies the allocation map.  It doesn't depopulate or unmap</span>", 
"<span class=\"comment\"> * the area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * pcpu_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_free_area\">pcpu_free_area</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, int <a class=\"id\" href=\"#freeme\">freeme</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oslot\">oslot</a> = <a class=\"id\" href=\"#pcpu_chunk_slot\">pcpu_chunk_slot</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#off\">off</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>; <a class=\"id\" href=\"#off\">off</a> += <a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>++]))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off\">off</a> == <a class=\"id\" href=\"#freeme\">freeme</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#off\">off</a> != <a class=\"id\" href=\"#freeme\">freeme</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] &gt; 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] = -<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a> += <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* merge with previous? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0 && <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> - 1] >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> - 1] += <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>], &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> + 1],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a> - <a class=\"id\" href=\"#i\">i</a>) * sizeof(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[0]));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* merge with next? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> + 1 &lt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a> && <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> + 1] >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] += <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> + 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> + 1], &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> + 2],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a> - (<a class=\"id\" href=\"#i\">i</a> + 1)) * sizeof(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[0]));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_relocate\">pcpu_chunk_relocate</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#oslot\">oslot</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#pcpu_alloc_chunk\">pcpu_alloc_chunk</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#pcpu_mem_alloc\">pcpu_mem_alloc</a>(<a class=\"id\" href=\"#pcpu_chunk_struct_size\">pcpu_chunk_struct_size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#pcpu_mem_alloc\">pcpu_mem_alloc</a>(<a class=\"id\" href=\"#PCPU_DFL_MAP_ALLOC\">PCPU_DFL_MAP_ALLOC</a> * sizeof(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[0]));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_alloc\">map_alloc</a> = <a class=\"id\" href=\"#PCPU_DFL_MAP_ALLOC\">PCPU_DFL_MAP_ALLOC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>++] = <a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a> = <a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a> = <a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pcpu_free_chunk\">pcpu_free_chunk</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_mem_free\">pcpu_mem_free</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_alloc\">map_alloc</a> * sizeof(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[0]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Chunk management implementation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To allow different implementations, chunk alloc/free and</span>", 
"<span class=\"comment\"> * [de]population are implemented in a separate file which is pulled</span>", 
"<span class=\"comment\"> * into this file and compiled together.  The following functions</span>", 
"<span class=\"comment\"> * should be implemented.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * pcpu_populate_chunk<span class=\"ts\"/><span class=\"ts\"/>- populate the specified range of a chunk</span>", 
"<span class=\"comment\"> * pcpu_depopulate_chunk<span class=\"ts\"/>- depopulate the specified range of a chunk</span>", 
"<span class=\"comment\"> * pcpu_create_chunk<span class=\"ts\"/><span class=\"ts\"/>- create a new chunk</span>", 
"<span class=\"comment\"> * pcpu_destroy_chunk<span class=\"ts\"/><span class=\"ts\"/>- destroy a chunk, always preceded by full depop</span>", 
"<span class=\"comment\"> * pcpu_addr_to_page<span class=\"ts\"/><span class=\"ts\"/>- translate address to physical address</span>", 
"<span class=\"comment\"> * pcpu_verify_alloc_info<span class=\"ts\"/>- check alloc_info is acceptable during init</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pcpu_populate_chunk\">pcpu_populate_chunk</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, int <a class=\"id\" href=\"#off\">off</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"static void <a class=\"id\" href=\"#pcpu_depopulate_chunk\">pcpu_depopulate_chunk</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, int <a class=\"id\" href=\"#off\">off</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"static struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#pcpu_create_chunk\">pcpu_create_chunk</a>(void);", 
"static void <a class=\"id\" href=\"#pcpu_destroy_chunk\">pcpu_destroy_chunk</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pcpu_addr_to_page\">pcpu_addr_to_page</a>(void *<a class=\"id\" href=\"#addr\">addr</a>);", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_verify_alloc_info\">pcpu_verify_alloc_info</a>(const struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> *<a class=\"id\" href=\"#ai\">ai</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NEED_PER_CPU_KM\">CONFIG_NEED_PER_CPU_KM</a>", 
"#<a class=\"id\" href=\"#include\">include</a> \"percpu-km.c\"", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> \"percpu-vm.c\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_chunk_addr_search - determine chunk containing specified address</span>", 
"<span class=\"comment\"> * @addr: address for which the chunk needs to be determined.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * The address of the found chunk.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#pcpu_chunk_addr_search\">pcpu_chunk_addr_search</a>(void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* is it in the first chunk? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcpu_addr_in_first_chunk\">pcpu_addr_in_first_chunk</a>(<a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* is it in the reserved area? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pcpu_addr_in_reserved_chunk\">pcpu_addr_in_reserved_chunk</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pcpu_reserved_chunk\">pcpu_reserved_chunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pcpu_first_chunk\">pcpu_first_chunk</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The address is relative to unit0 which might be unused and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thus unmapped.  Offset the address to the unit space of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current processor before looking it up in the vmalloc</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * space.  Note that any possible cpu id can be used here, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there's no need to worry about preemption or cpu hotplug.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#pcpu_unit_offsets\">pcpu_unit_offsets</a>[<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>()];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pcpu_get_page_chunk\">pcpu_get_page_chunk</a>(<a class=\"id\" href=\"#pcpu_addr_to_page\">pcpu_addr_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_alloc - the percpu allocator</span>", 
"<span class=\"comment\"> * @size: size of area to allocate in bytes</span>", 
"<span class=\"comment\"> * @align: alignment of area (max PAGE_SIZE)</span>", 
"<span class=\"comment\"> * @reserved: allocate from the reserved chunk if available</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate percpu area of @size bytes aligned at @align.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Does GFP_KERNEL allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Percpu pointer to the allocated area on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#pcpu_alloc\">pcpu_alloc</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#reserved\">reserved</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#warn_limit\">warn_limit</a> = 10;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#new_alloc\">new_alloc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#size\">size</a> || <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PCPU_MIN_UNIT_SIZE\">PCPU_MIN_UNIT_SIZE</a> || <a class=\"id\" href=\"#align\">align</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(<a class=\"id\" href=\"#true\">true</a>, \"illegal size (%zu) or align (%zu) for \"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"percpu allocation\\n\", <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pcpu_alloc_mutex\">pcpu_alloc_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* serve reserved allocations from the reserved chunk if available */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reserved\">reserved</a> && <a class=\"id\" href=\"#pcpu_reserved_chunk\">pcpu_reserved_chunk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#pcpu_reserved_chunk\">pcpu_reserved_chunk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = \"alloc from reserved chunk failed\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#new_alloc\">new_alloc</a> = <a class=\"id\" href=\"#pcpu_need_to_extend\">pcpu_need_to_extend</a>(<a class=\"id\" href=\"#chunk\">chunk</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pcpu_extend_area_map\">pcpu_extend_area_map</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#new_alloc\">new_alloc</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = \"failed to extend area map of reserved chunk\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock_mutex\">fail_unlock_mutex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#pcpu_alloc_area\">pcpu_alloc_area</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off\">off</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#area_found\">area_found</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = \"alloc from reserved chunk failed\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* search through normal chunks */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#pcpu_size_to_slot\">pcpu_size_to_slot</a>(<a class=\"id\" href=\"#size\">size</a>); <a class=\"id\" href=\"#slot\">slot</a> &lt; <a class=\"id\" href=\"#pcpu_nr_slots\">pcpu_nr_slots</a>; <a class=\"id\" href=\"#slot\">slot</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, &amp;<a class=\"id\" href=\"#pcpu_slot\">pcpu_slot</a>[<a class=\"id\" href=\"#slot\">slot</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_alloc\">new_alloc</a> = <a class=\"id\" href=\"#pcpu_need_to_extend\">pcpu_need_to_extend</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_alloc\">new_alloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pcpu_extend_area_map\">pcpu_extend_area_map</a>(<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#new_alloc\">new_alloc</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = \"failed to extend area map\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock_mutex\">fail_unlock_mutex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pcpu_lock has been dropped, need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * restart cpu_slot list walking.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#pcpu_alloc_area\">pcpu_alloc_area</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off\">off</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#area_found\">area_found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* hmmm... no space left, create a new chunk */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#pcpu_create_chunk\">pcpu_create_chunk</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chunk\">chunk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = \"failed to allocate new chunk\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock_mutex\">fail_unlock_mutex</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_relocate\">pcpu_chunk_relocate</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, -1);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"", 
"<a class=\"id\" href=\"#area_found\">area_found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* populate, map and clear the area */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcpu_populate_chunk\">pcpu_populate_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_area\">pcpu_free_area</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = \"failed to populate\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pcpu_alloc_mutex\">pcpu_alloc_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* return address relative to base address */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__addr_to_pcpu_ptr\">__addr_to_pcpu_ptr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a> + <a class=\"id\" href=\"#off\">off</a>);", 
"", 
"<a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#fail_unlock_mutex\">fail_unlock_mutex</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pcpu_alloc_mutex\">pcpu_alloc_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#warn_limit\">warn_limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"PERCPU: allocation failed, size=%zu align=%zu, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"%s\\n\", <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#warn_limit\">warn_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"PERCPU: limit reached, disable warning\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __alloc_percpu - allocate dynamic percpu area</span>", 
"<span class=\"comment\"> * @size: size of area to allocate in bytes</span>", 
"<span class=\"comment\"> * @align: alignment of area (max PAGE_SIZE)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate percpu area of @size bytes aligned at @align.  Might</span>", 
"<span class=\"comment\"> * sleep.  Might trigger writeouts.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Does GFP_KERNEL allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Percpu pointer to the allocated area on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#__alloc_percpu\">__alloc_percpu</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pcpu_alloc\">pcpu_alloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__alloc_percpu\">__alloc_percpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __alloc_reserved_percpu - allocate reserved percpu area</span>", 
"<span class=\"comment\"> * @size: size of area to allocate in bytes</span>", 
"<span class=\"comment\"> * @align: alignment of area (max PAGE_SIZE)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate percpu area of @size bytes aligned at @align from reserved</span>", 
"<span class=\"comment\"> * percpu area if arch has set it up; otherwise, allocation is served</span>", 
"<span class=\"comment\"> * from the same dynamic area.  Might sleep.  Might trigger writeouts.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Does GFP_KERNEL allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Percpu pointer to the allocated area on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#__alloc_reserved_percpu\">__alloc_reserved_percpu</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pcpu_alloc\">pcpu_alloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_reclaim - reclaim fully free chunks, workqueue function</span>", 
"<span class=\"comment\"> * @work: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reclaim all fully free chunks except for the first one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * workqueue context.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_reclaim\">pcpu_reclaim</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#todo\">todo</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#pcpu_slot\">pcpu_slot</a>[<a class=\"id\" href=\"#pcpu_nr_slots\">pcpu_nr_slots</a> - 1];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pcpu_alloc_mutex\">pcpu_alloc_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#immutable\">immutable</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* spare the first one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a> == <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a>, <a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#todo\">todo</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#todo\">todo</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_depopulate_chunk\">pcpu_depopulate_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, 0, <a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_destroy_chunk\">pcpu_destroy_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pcpu_alloc_mutex\">pcpu_alloc_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_percpu - free percpu area</span>", 
"<span class=\"comment\"> * @ptr: pointer to area to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free percpu area @ptr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Can be called from atomic context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_percpu\">free_percpu</a>(void <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__pcpu_ptr_to_addr\">__pcpu_ptr_to_addr</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#pcpu_chunk_addr_search\">pcpu_chunk_addr_search</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_area\">pcpu_free_area</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#off\">off</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are more than one fully free chunks, wake up grim reaper */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a> == <a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#pcpu_slot\">pcpu_slot</a>[<a class=\"id\" href=\"#pcpu_nr_slots\">pcpu_nr_slots</a> - 1], <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> != <a class=\"id\" href=\"#chunk\">chunk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#pcpu_reclaim_work\">pcpu_reclaim_work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#free_percpu\">free_percpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_kernel_percpu_address - test whether address is from static percpu area</span>", 
"<span class=\"comment\"> * @addr: address to test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test whether @addr belongs to in-kernel static percpu area.  Module</span>", 
"<span class=\"comment\"> * static percpu areas are not considered.  For those, use</span>", 
"<span class=\"comment\"> * is_module_percpu_address().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * %true if @addr is from in-kernel static percpu area, %false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_kernel_percpu_address\">is_kernel_percpu_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#static_size\">static_size</a> = <a class=\"id\" href=\"#__per_cpu_end\">__per_cpu_end</a> - <a class=\"id\" href=\"#__per_cpu_start\">__per_cpu_start</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#__addr_to_pcpu_ptr\">__addr_to_pcpu_ptr</a>(<a class=\"id\" href=\"#pcpu_base_addr\">pcpu_base_addr</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((void *)<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#start\">start</a> && (void *)<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#static_size\">static_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"        }", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * per_cpu_ptr_to_phys - convert translated percpu address to physical address</span>", 
"<span class=\"comment\"> * @addr: the address to be converted to physical address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given @addr which is dereferenceable address obtained via one of</span>", 
"<span class=\"comment\"> * percpu access macros, this function translates it into its physical</span>", 
"<span class=\"comment\"> * address.  The caller is responsible for ensuring @addr stays valid</span>", 
"<span class=\"comment\"> * until this function finishes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * The physical address for @addr.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#per_cpu_ptr_to_phys\">per_cpu_ptr_to_phys</a>(void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#__addr_to_pcpu_ptr\">__addr_to_pcpu_ptr</a>(<a class=\"id\" href=\"#pcpu_base_addr\">pcpu_base_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#in_first_chunk\">in_first_chunk</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_start\">first_start</a>, <a class=\"id\" href=\"#first_end\">first_end</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The following test on first_start/end isn't strictly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * necessary but will speed up lookups of addresses which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * aren't in the first chunk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_start\">first_start</a> = <a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#pcpu_first_chunk\">pcpu_first_chunk</a>, <a class=\"id\" href=\"#pcpu_first_unit_cpu\">pcpu_first_unit_cpu</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_end\">first_end</a> = <a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#pcpu_first_chunk\">pcpu_first_chunk</a>, <a class=\"id\" href=\"#pcpu_last_unit_cpu\">pcpu_last_unit_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a>);", 
"<span class=\"ts\"/>if ((unsigned long)<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#first_start\">first_start</a> &&", 
"<span class=\"ts\"/>    (unsigned long)<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#first_end\">first_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_first_chunk\">in_first_chunk</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_first_chunk\">in_first_chunk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long)<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (unsigned long)<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#pcpu_addr_to_page\">pcpu_addr_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_alloc_alloc_info - allocate percpu allocation info</span>", 
"<span class=\"comment\"> * @nr_groups: the number of groups</span>", 
"<span class=\"comment\"> * @nr_units: the number of units</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate ai which is large enough for @nr_groups groups containing</span>", 
"<span class=\"comment\"> * @nr_units units.  The returned ai's groups[0].cpu_map points to the</span>", 
"<span class=\"comment\"> * cpu_map array which is long enough for @nr_units and filled with</span>", 
"<span class=\"comment\"> * NR_CPUS.  It's the caller's responsibility to initialize cpu_map</span>", 
"<span class=\"comment\"> * pointer of other groups.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to the allocated pcpu_alloc_info on success, NULL on</span>", 
"<span class=\"comment\"> * failure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_alloc_alloc_info\">pcpu_alloc_alloc_info</a>(int <a class=\"id\" href=\"#nr_groups\">nr_groups</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#nr_units\">nr_units</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> *<a class=\"id\" href=\"#ai\">ai</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#base_size\">base_size</a>, <a class=\"id\" href=\"#ai_size\">ai_size</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base_size\">base_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(*<a class=\"id\" href=\"#ai\">ai</a>) + <a class=\"id\" href=\"#nr_groups\">nr_groups</a> * sizeof(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[0]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__alignof__\">__alignof__</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[0].<a class=\"id\" href=\"#cpu_map\">cpu_map</a>[0]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai_size\">ai_size</a> = <a class=\"id\" href=\"#base_size\">base_size</a> + <a class=\"id\" href=\"#nr_units\">nr_units</a> * sizeof(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[0].<a class=\"id\" href=\"#cpu_map\">cpu_map</a>[0]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#alloc_bootmem_nopanic\">alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#PFN_ALIGN\">PFN_ALIGN</a>(<a class=\"id\" href=\"#ai_size\">ai_size</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#base_size\">base_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[0].<a class=\"id\" href=\"#cpu_map\">cpu_map</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#unit\">unit</a> = 0; <a class=\"id\" href=\"#unit\">unit</a> &lt; <a class=\"id\" href=\"#nr_units\">nr_units</a>; <a class=\"id\" href=\"#unit\">unit</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[0].<a class=\"id\" href=\"#cpu_map\">cpu_map</a>[<a class=\"id\" href=\"#unit\">unit</a>] = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a> = <a class=\"id\" href=\"#nr_groups\">nr_groups</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#__ai_size\">__ai_size</a> = <a class=\"id\" href=\"#PFN_ALIGN\">PFN_ALIGN</a>(<a class=\"id\" href=\"#ai_size\">ai_size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ai\">ai</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_free_alloc_info - free percpu allocation info</span>", 
"<span class=\"comment\"> * @ai: pcpu_alloc_info to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free @ai which was allocated by pcpu_alloc_alloc_info().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_free_alloc_info\">pcpu_free_alloc_info</a>(struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> *<a class=\"id\" href=\"#ai\">ai</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ai\">ai</a>), <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#__ai_size\">__ai_size</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_build_alloc_info - build alloc_info considering distances between CPUs</span>", 
"<span class=\"comment\"> * @reserved_size: the size of reserved percpu area in bytes</span>", 
"<span class=\"comment\"> * @dyn_size: minimum free size for dynamic allocation in bytes</span>", 
"<span class=\"comment\"> * @atom_size: allocation atom size</span>", 
"<span class=\"comment\"> * @cpu_distance_fn: callback to determine distance between cpus, optional</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function determines grouping of units, their mappings to cpus</span>", 
"<span class=\"comment\"> * and other parameters considering needed percpu size, allocation</span>", 
"<span class=\"comment\"> * atom size and distances between CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Groups are always mutliples of atom size and CPUs which are of</span>", 
"<span class=\"comment\"> * LOCAL_DISTANCE both ways are grouped together and share space for</span>", 
"<span class=\"comment\"> * units in the same group.  The returned configuration is guaranteed</span>", 
"<span class=\"comment\"> * to have CPUs on different nodes on different groups and &gt;=75% usage</span>", 
"<span class=\"comment\"> * of allocated virtual address space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * On success, pointer to the new allocation_info is returned.  On</span>", 
"<span class=\"comment\"> * failure, ERR_PTR value is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_build_alloc_info\">pcpu_build_alloc_info</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#reserved_size\">reserved_size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#dyn_size\">dyn_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#atom_size\">atom_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_fc_cpu_distance_fn_t\">pcpu_fc_cpu_distance_fn_t</a> <a class=\"id\" href=\"#cpu_distance_fn\">cpu_distance_fn</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#group_map\">group_map</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#group_cnt\">group_cnt</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#static_size\">static_size</a> = <a class=\"id\" href=\"#__per_cpu_end\">__per_cpu_end</a> - <a class=\"id\" href=\"#__per_cpu_start\">__per_cpu_start</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_groups\">nr_groups</a> = 1, <a class=\"id\" href=\"#nr_units\">nr_units</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size_sum\">size_sum</a>, <a class=\"id\" href=\"#min_unit_size\">min_unit_size</a>, <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#upa\">upa</a>, <a class=\"id\" href=\"#max_upa\">max_upa</a>, <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#best_upa\">best_upa</a>);<span class=\"ts\"/><span class=\"comment\">/* units_per_alloc */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#last_allocs\">last_allocs</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#unit\">unit</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tcpu\">tcpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> *<a class=\"id\" href=\"#ai\">ai</a>;", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this function may be called multiple times */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#group_map\">group_map</a>, 0, sizeof(<a class=\"id\" href=\"#group_map\">group_map</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#group_cnt\">group_cnt</a>, 0, sizeof(<a class=\"id\" href=\"#group_cnt\">group_cnt</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* calculate size_sum and ensure dyn_size is enough for early alloc */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_sum\">size_sum</a> = <a class=\"id\" href=\"#PFN_ALIGN\">PFN_ALIGN</a>(<a class=\"id\" href=\"#static_size\">static_size</a> + <a class=\"id\" href=\"#reserved_size\">reserved_size</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#dyn_size\">dyn_size</a>, <a class=\"id\" href=\"#PERCPU_DYNAMIC_EARLY_SIZE\">PERCPU_DYNAMIC_EARLY_SIZE</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dyn_size\">dyn_size</a> = <a class=\"id\" href=\"#size_sum\">size_sum</a> - <a class=\"id\" href=\"#static_size\">static_size</a> - <a class=\"id\" href=\"#reserved_size\">reserved_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Determine min_unit_size, alloc_size and max_upa such that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * alloc_size is multiple of atom_size and is the smallest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which can accomodate 4k aligned segments which are equal to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or larger than min_unit_size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_unit_size\">min_unit_size</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#size_sum\">size_sum</a>, <a class=\"id\" href=\"#PCPU_MIN_UNIT_SIZE\">PCPU_MIN_UNIT_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#min_unit_size\">min_unit_size</a>, <a class=\"id\" href=\"#atom_size\">atom_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#upa\">upa</a> = <a class=\"id\" href=\"#alloc_size\">alloc_size</a> / <a class=\"id\" href=\"#min_unit_size\">min_unit_size</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#alloc_size\">alloc_size</a> % <a class=\"id\" href=\"#upa\">upa</a> || ((<a class=\"id\" href=\"#alloc_size\">alloc_size</a> / <a class=\"id\" href=\"#upa\">upa</a>) &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upa\">upa</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_upa\">max_upa</a> = <a class=\"id\" href=\"#upa\">upa</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* group cpus according to their proximity */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_group\">next_group</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#tcpu\">tcpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#tcpu\">tcpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_map\">group_map</a>[<a class=\"id\" href=\"#tcpu\">tcpu</a>] == <a class=\"id\" href=\"#group\">group</a> && <a class=\"id\" href=\"#cpu_distance_fn\">cpu_distance_fn</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#cpu_distance_fn\">cpu_distance_fn</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tcpu\">tcpu</a>) &gt; <a class=\"id\" href=\"#LOCAL_DISTANCE\">LOCAL_DISTANCE</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#cpu_distance_fn\">cpu_distance_fn</a>(<a class=\"id\" href=\"#tcpu\">tcpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) &gt; <a class=\"id\" href=\"#LOCAL_DISTANCE\">LOCAL_DISTANCE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_groups\">nr_groups</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#nr_groups\">nr_groups</a>, <a class=\"id\" href=\"#group\">group</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_group\">next_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_map\">group_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_cnt\">group_cnt</a>[<a class=\"id\" href=\"#group\">group</a>]++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Expand unit size until address space usage goes over 75%</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and then as much as possible without using more address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_allocs\">last_allocs</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#upa\">upa</a> = <a class=\"id\" href=\"#max_upa\">max_upa</a>; <a class=\"id\" href=\"#upa\">upa</a>; <a class=\"id\" href=\"#upa\">upa</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#allocs\">allocs</a> = 0, <a class=\"id\" href=\"#wasted\">wasted</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_size\">alloc_size</a> % <a class=\"id\" href=\"#upa\">upa</a> || ((<a class=\"id\" href=\"#alloc_size\">alloc_size</a> / <a class=\"id\" href=\"#upa\">upa</a>) &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#nr_groups\">nr_groups</a>; <a class=\"id\" href=\"#group\">group</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#this_allocs\">this_allocs</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#group_cnt\">group_cnt</a>[<a class=\"id\" href=\"#group\">group</a>], <a class=\"id\" href=\"#upa\">upa</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allocs\">allocs</a> += <a class=\"id\" href=\"#this_allocs\">this_allocs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wasted\">wasted</a> += <a class=\"id\" href=\"#this_allocs\">this_allocs</a> * <a class=\"id\" href=\"#upa\">upa</a> - <a class=\"id\" href=\"#group_cnt\">group_cnt</a>[<a class=\"id\" href=\"#group\">group</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't accept if wastage is over 1/3.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * greater-than comparison ensures upa==1 always</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * passes the following check.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wasted\">wasted</a> &gt; <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() / 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* and then don't consume more memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#allocs\">allocs</a> &gt; <a class=\"id\" href=\"#last_allocs\">last_allocs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_allocs\">last_allocs</a> = <a class=\"id\" href=\"#allocs\">allocs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_upa\">best_upa</a> = <a class=\"id\" href=\"#upa\">upa</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#upa\">upa</a> = <a class=\"id\" href=\"#best_upa\">best_upa</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate and fill alloc_info */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#nr_groups\">nr_groups</a>; <a class=\"id\" href=\"#group\">group</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_units\">nr_units</a> += <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#group_cnt\">group_cnt</a>[<a class=\"id\" href=\"#group\">group</a>], <a class=\"id\" href=\"#upa\">upa</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a> = <a class=\"id\" href=\"#pcpu_alloc_alloc_info\">pcpu_alloc_alloc_info</a>(<a class=\"id\" href=\"#nr_groups\">nr_groups</a>, <a class=\"id\" href=\"#nr_units\">nr_units</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ai\">ai</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_map\">cpu_map</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[0].<a class=\"id\" href=\"#cpu_map\">cpu_map</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#nr_groups\">nr_groups</a>; <a class=\"id\" href=\"#group\">group</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#group\">group</a>].<a class=\"id\" href=\"#cpu_map\">cpu_map</a> = <a class=\"id\" href=\"#cpu_map\">cpu_map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_map\">cpu_map</a> += <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#group_cnt\">group_cnt</a>[<a class=\"id\" href=\"#group\">group</a>], <a class=\"id\" href=\"#upa\">upa</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a> = <a class=\"id\" href=\"#static_size\">static_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#reserved_size\">reserved_size</a> = <a class=\"id\" href=\"#reserved_size\">reserved_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#dyn_size\">dyn_size</a> = <a class=\"id\" href=\"#dyn_size\">dyn_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a> = <a class=\"id\" href=\"#alloc_size\">alloc_size</a> / <a class=\"id\" href=\"#upa\">upa</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#atom_size\">atom_size</a> = <a class=\"id\" href=\"#atom_size\">atom_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0, <a class=\"id\" href=\"#unit\">unit</a> = 0; <a class=\"id\" href=\"#group_cnt\">group_cnt</a>[<a class=\"id\" href=\"#group\">group</a>]; <a class=\"id\" href=\"#group\">group</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_group_info\">pcpu_group_info</a> *<a class=\"id\" href=\"#gi\">gi</a> = &amp;<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#group\">group</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Initialize base_offset as if all groups are located</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * back-to-back.  The caller should update this to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reflect actual allocation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#base_offset\">base_offset</a> = <a class=\"id\" href=\"#unit\">unit</a> * <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_map\">group_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] == <a class=\"id\" href=\"#group\">group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#cpu_map\">cpu_map</a>[<a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a>++] = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a>, <a class=\"id\" href=\"#upa\">upa</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit\">unit</a> += <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#unit\">unit</a> != <a class=\"id\" href=\"#nr_units\">nr_units</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ai\">ai</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_dump_alloc_info - print out information about pcpu_alloc_info</span>", 
"<span class=\"comment\"> * @lvl: loglevel</span>", 
"<span class=\"comment\"> * @ai: allocation info to dump</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Print out information about @ai using loglevel @lvl.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_dump_alloc_info\">pcpu_dump_alloc_info</a>(const char *<a class=\"id\" href=\"#lvl\">lvl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> *<a class=\"id\" href=\"#ai\">ai</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group_width\">group_width</a> = 1, <a class=\"id\" href=\"#cpu_width\">cpu_width</a> = 1, <a class=\"id\" href=\"#width\">width</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#empty_str\">empty_str</a>[] = \"--------\";", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#alloc\">alloc</a> = 0, <a class=\"id\" href=\"#alloc_end\">alloc_end</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#upa\">upa</a>, <a class=\"id\" href=\"#apl\">apl</a>;<span class=\"ts\"/><span class=\"comment\">/* units per alloc, allocs per line */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#v\">v</a> /= 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_width\">group_width</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>();", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#v\">v</a> /= 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_width\">cpu_width</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#empty_str\">empty_str</a>[<a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#cpu_width\">cpu_width</a>, sizeof(<a class=\"id\" href=\"#empty_str\">empty_str</a>) - 1)] = '\\0';", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#upa\">upa</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#alloc_size\">alloc_size</a> / <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#upa\">upa</a> * (<a class=\"id\" href=\"#cpu_width\">cpu_width</a> + 1) + <a class=\"id\" href=\"#group_width\">group_width</a> + 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apl\">apl</a> = <a class=\"id\" href=\"#rounddown_pow_of_two\">rounddown_pow_of_two</a>(<a class=\"id\" href=\"#max\">max</a>(60 / <a class=\"id\" href=\"#width\">width</a>, 1));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%spcpu-alloc: s%zu r%zu d%zu u%zu alloc=%zu*%zu\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#lvl\">lvl</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#reserved_size\">reserved_size</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#dyn_size\">dyn_size</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#alloc_size\">alloc_size</a> / <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#atom_size\">atom_size</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#atom_size\">atom_size</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a>; <a class=\"id\" href=\"#group\">group</a>++) {", 
];
xr_frag_insert('l/be/c226b801801755c0d7177d157243dcce55a5fd.xr', __xr_tmp);
