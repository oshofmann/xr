var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/locks.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Provide support for fcntl()'s F_GETLK, F_SETLK, and F_SETLKW calls.</span>", 
"<span class=\"comment\"> *  Doug Evans (dje@spiff.uucp), August 07, 1992</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Deadlock detection added.</span>", 
"<span class=\"comment\"> *  FIXME: one thing isn't handled yet:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- mandatory locks (requires lots of changes elsewhere)</span>", 
"<span class=\"comment\"> *  Kelly Carmichael (kelly@[142.24.8.65]), September 17, 1994.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Miscellaneous edits, and a total rewrite of posix_lock_file() code.</span>", 
"<span class=\"comment\"> *  Kai Petzke (wpp@marie.physik.tu-berlin.de), 1994</span>", 
"<span class=\"comment\"> *  </span>", 
"<span class=\"comment\"> *  Converted file_lock_table to a linked list from an array, which eliminates</span>", 
"<span class=\"comment\"> *  the limits on how many active file locks are open.</span>", 
"<span class=\"comment\"> *  Chad Page (pageone@netcom.com), November 27, 1994</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> *  Removed dependency on file descriptors. dup()'ed file descriptors now</span>", 
"<span class=\"comment\"> *  get the same locks as the original file descriptors, and a close() on</span>", 
"<span class=\"comment\"> *  any file descriptor removes ALL the locks on the file for the current</span>", 
"<span class=\"comment\"> *  process. Since locks still depend on the process id, locks are inherited</span>", 
"<span class=\"comment\"> *  after an exec() but not after a fork(). This agrees with POSIX, and both</span>", 
"<span class=\"comment\"> *  BSD and SVR4 practice.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), February 14, 1995</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Scrapped free list which is redundant now that we allocate locks</span>", 
"<span class=\"comment\"> *  dynamically with kmalloc()/kfree().</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), February 21, 1995</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Implemented two lock personalities - FL_FLOCK and FL_POSIX.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  FL_POSIX locks are created with calls to fcntl() and lockf() through the</span>", 
"<span class=\"comment\"> *  fcntl() system call. They have the semantics described above.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  FL_FLOCK locks are created with calls to flock(), through the flock()</span>", 
"<span class=\"comment\"> *  system call, which is new. Old C libraries implement flock() via fcntl()</span>", 
"<span class=\"comment\"> *  and will continue to use the old, broken implementation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  FL_FLOCK locks follow the 4.4 BSD flock() semantics. They are associated</span>", 
"<span class=\"comment\"> *  with a file pointer (filp). As a result they can be shared by a parent</span>", 
"<span class=\"comment\"> *  process and its children after a fork(). They are removed when the last</span>", 
"<span class=\"comment\"> *  file descriptor referring to the file pointer is closed (unless explicitly</span>", 
"<span class=\"comment\"> *  unlocked). </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  FL_FLOCK locks never deadlock, an existing lock is always removed before</span>", 
"<span class=\"comment\"> *  upgrading from shared to exclusive (or vice versa). When this happens</span>", 
"<span class=\"comment\"> *  any processes blocked by the current lock are woken up and allowed to</span>", 
"<span class=\"comment\"> *  run before the new lock is applied.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), June 09, 1995</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Removed some race conditions in flock_lock_file(), marked other possible</span>", 
"<span class=\"comment\"> *  races. Just grep for FIXME to see them. </span>", 
"<span class=\"comment\"> *  Dmitry Gorodchanin (pgmdsg@ibi.com), February 09, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Addressed Dmitry's concerns. Deadlock checking no longer recursive.</span>", 
"<span class=\"comment\"> *  Lock allocation changed to GFP_ATOMIC as we can't afford to sleep</span>", 
"<span class=\"comment\"> *  once we've checked for blocking and deadlocking.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), April 03, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Initial implementation of mandatory locks. SunOS turned out to be</span>", 
"<span class=\"comment\"> *  a rotten model, so I implemented the \"obvious\" semantics.</span>", 
"<span class=\"comment\"> *  See 'Documentation/mandatory.txt' for details.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), April 06, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Don't allow mandatory locks on mmap()'ed files. Added simple functions to</span>", 
"<span class=\"comment\"> *  check if a file has mandatory locks, used by mmap(), open() and creat() to</span>", 
"<span class=\"comment\"> *  see if system call should be rejected. Ref. HP-UX/SunOS/Solaris Reference</span>", 
"<span class=\"comment\"> *  Manual, Section 2.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), April 09, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Tidied up block list handling. Added '/proc/locks' interface.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), April 24, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Fixed deadlock condition for pathological code that mixes calls to</span>", 
"<span class=\"comment\"> *  flock() and fcntl().</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), April 29, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Allow only one type of locking scheme (FL_POSIX or FL_FLOCK) to be in use</span>", 
"<span class=\"comment\"> *  for a given file at a time. Changed the CONFIG_LOCK_MANDATORY scheme to</span>", 
"<span class=\"comment\"> *  guarantee sensible behaviour in the case where file system modules might</span>", 
"<span class=\"comment\"> *  be compiled with different options than the kernel itself.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), May 15, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Added a couple of missing wake_up() calls. Thanks to Thomas Meckel</span>", 
"<span class=\"comment\"> *  (Thomas.Meckel@mni.fh-giessen.de) for spotting this.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), May 15, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Changed FL_POSIX locks to use the block list in the same way as FL_FLOCK</span>", 
"<span class=\"comment\"> *  locks. Changed process synchronisation to avoid dereferencing locks that</span>", 
"<span class=\"comment\"> *  have already been freed.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), Sep 21, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Made the block list a circular list to minimise searching in the list.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), Sep 25, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Made mandatory locking a mount option. Default is not to allow mandatory</span>", 
"<span class=\"comment\"> *  locking.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), Oct 04, 1996.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Some adaptations for NFS support.</span>", 
"<span class=\"comment\"> *  Olaf Kirch (okir@monad.swb.de), Dec 1996,</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Fixed /proc/locks interface so that we can't overrun the buffer we are handed.</span>", 
"<span class=\"comment\"> *  Andy Walker (andy@lysaker.kvaerner.no), May 12, 1997.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Use slab allocator instead of kmalloc/kfree.</span>", 
"<span class=\"comment\"> *  Use generic list implementation from &lt;linux/list.h&gt;.</span>", 
"<span class=\"comment\"> *  Sped up posix_locks_deadlock by only considering blocked locks.</span>", 
"<span class=\"comment\"> *  Matthew Wilcox &lt;willy@debian.org&gt;, March, 2000.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Leases and LOCK_MAND</span>", 
"<span class=\"comment\"> *  Matthew Wilcox &lt;willy@debian.org&gt;, June, 2000.</span>", 
"<span class=\"comment\"> *  Stephen Rothwell &lt;sfr@canb.auug.org.au&gt;, June, 2000.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp_lock\">smp_lock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_POSIX\">FL_POSIX</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_FLOCK\">IS_FLOCK</a>(<a class=\"id\" href=\"#fl\">fl</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_FLOCK\">FL_FLOCK</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_LEASE\">FL_LEASE</a>)", 
"", 
"int <a class=\"id\" href=\"#leases_enable\">leases_enable</a> = 1;", 
"int <a class=\"id\" href=\"#lease_break_time\">lease_break_time</a> = 45;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_lock\">for_each_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#lockp\">lockp</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#lockp\">lockp</a> = &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>; *<a class=\"id\" href=\"#lockp\">lockp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#lockp\">lockp</a> = &amp;(*<a class=\"id\" href=\"#lockp\">lockp</a>)-><a class=\"id\" href=\"#fl_next\">fl_next</a>)", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#file_lock_list\">file_lock_list</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#blocked_list\">blocked_list</a>);", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#filelock_cache\">filelock_cache</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/* Allocate an empty lock structure. */</span>", 
"static struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#locks_alloc_lock\">locks_alloc_lock</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#filelock_cache\">filelock_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#locks_release_private\">locks_release_private</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a>-><a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a>-><a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#locks_release_private\">locks_release_private</a>);", 
"", 
"<span class=\"comment\">/* Free a lock which is not in use. */</span>", 
"static void <a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_wait\">fl_wait</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_block\">fl_block</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_link\">fl_link</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_release_private\">locks_release_private</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#filelock_cache\">filelock_cache</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#locks_init_lock\">locks_init_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_link\">fl_link</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_block\">fl_block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_wait\">fl_wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_fasync\">fl_fasync</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_nspid\">fl_nspid</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#locks_init_lock\">locks_init_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialises the fields of the file lock which are invariant for</span>", 
"<span class=\"comment\"> * free file_locks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#init_once\">init_once</a>(void *<a class=\"id\" href=\"#foo\">foo</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#lock\">lock</a> = (struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *) <a class=\"id\" href=\"#foo\">foo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_init_lock\">locks_init_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#locks_copy_private\">locks_copy_private</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a>-><a class=\"id\" href=\"#fl_copy_lock\">fl_copy_lock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a>-><a class=\"id\" href=\"#fl_copy_lock\">fl_copy_lock</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_copy_lock\">fl_copy_lock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_copy_lock\">fl_copy_lock</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize a new lock from an existing file_lock structure.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__locks_copy_lock\">__locks_copy_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__locks_copy_lock\">__locks_copy_lock</a>);", 
"", 
"void <a class=\"id\" href=\"#locks_copy_lock\">locks_copy_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_release_private\">locks_release_private</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__locks_copy_lock\">__locks_copy_lock</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_copy_private\">locks_copy_private</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#locks_copy_lock\">locks_copy_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#flock_translate_cmd\">flock_translate_cmd</a>(int <a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#LOCK_MAND\">LOCK_MAND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cmd\">cmd</a> &amp; (<a class=\"id\" href=\"#LOCK_MAND\">LOCK_MAND</a> | <a class=\"id\" href=\"#LOCK_RW\">LOCK_RW</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#LOCK_SH\">LOCK_SH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#LOCK_EX\">LOCK_EX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#LOCK_UN\">LOCK_UN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Fill in a file_lock structure with an appropriate FLOCK lock. */</span>", 
"static int <a class=\"id\" href=\"#flock_make_lock\">flock_make_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#flock_translate_cmd\">flock_translate_cmd</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#locks_alloc_lock\">locks_alloc_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> = <a class=\"id\" href=\"#FL_FLOCK\">FL_FLOCK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#assign_type\">assign_type</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Verify a \"struct flock\" and copy it to a \"struct file_lock\" as a POSIX</span>", 
"<span class=\"comment\"> * style lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#flock_to_posix_lock\">flock_to_posix_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#flock\">flock</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off_t\">off_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_whence\">l_whence</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEEK_SET\">SEEK_SET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEEK_CUR\">SEEK_CUR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEEK_END\">SEEK_END</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* POSIX-1996 leaves the case l-&gt;l_len &lt; 0 undefined;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   POSIX-2001 defines it. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_start\">l_start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_len\">l_len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_len\">l_len</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_len\">l_len</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_len\">l_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> = <a class=\"id\" href=\"#start\">start</a>;<span class=\"ts\"/><span class=\"comment\">/* we record the absolute position */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> &lt; <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> = <a class=\"id\" href=\"#FL_POSIX\">FL_POSIX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#assign_type\">assign_type</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_type\">l_type</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"static int <a class=\"id\" href=\"#flock64_to_posix_lock\">flock64_to_posix_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#flock64\">flock64</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_whence\">l_whence</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEEK_SET\">SEEK_SET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEEK_CUR\">SEEK_CUR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEEK_END\">SEEK_END</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_start\">l_start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_len\">l_len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_len\">l_len</a> - 1;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_len\">l_len</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#start\">start</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_len\">l_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> = <a class=\"id\" href=\"#start\">start</a>;<span class=\"ts\"/><span class=\"comment\">/* we record the absolute position */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> &lt; <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/>", 
];
xr_frag_insert('l/bf/0ad36f00bd283e5113152ae6fca5b11a9aafad.xr', __xr_tmp);
