var __xr_tmp = [
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_block_when_processing_errors\">scsi_block_when_processing_errors</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCSI_LOGGING\">CONFIG_SCSI_LOGGING</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_prt_fail_stats - Log info on failures.</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>scsi host being recovered.</span>", 
"<span class=\"comment\"> * @work_q:<span class=\"ts\"/>Queue of scsi cmds to process.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#scsi_eh_prt_fail_stats\">scsi_eh_prt_fail_stats</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total_failures\">total_failures</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cmd_failed\">cmd_failed</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cmd_cancel\">cmd_cancel</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#devices_failed\">devices_failed</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost_for_each_device\">shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#sdev\">sdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#total_failures\">total_failures</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#eh_eflags\">eh_eflags</a> &amp; <a class=\"id\" href=\"#SCSI_EH_CANCEL_CMD\">SCSI_EH_CANCEL_CMD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#cmd_cancel\">cmd_cancel</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#cmd_failed\">cmd_failed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd_cancel\">cmd_cancel</a> || <a class=\"id\" href=\"#cmd_failed\">cmd_failed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"%s: cmds failed: %d, cancel: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#cmd_failed\">cmd_failed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cmd_cancel\">cmd_cancel</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd_cancel\">cmd_cancel</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd_failed\">cmd_failed</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#devices_failed\">devices_failed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(2, <a class=\"id\" href=\"#printk\">printk</a>(\"Total of %d commands on %d\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" devices require eh work\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#total_failures\">total_failures</a>, <a class=\"id\" href=\"#devices_failed\">devices_failed</a>));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_check_sense - Examine scsi cmd sense</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>Cmd to have sense checked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>SUCCESS or FAILED or NEEDS_RETRY</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When a deferred error is detected the current command has</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not been executed and needs retrying.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_check_sense\">scsi_check_sense</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"", 
"<span class=\"ts\"/>if (! <a class=\"id\" href=\"#scsi_command_normalize_sense\">scsi_command_normalize_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;<span class=\"ts\"/><span class=\"comment\">/* no valid sense data */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_sense_is_deferred\">scsi_sense_is_deferred</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_dh_data\">scsi_dh_data</a> && <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_dh_data\">scsi_dh_data</a>-><a class=\"id\" href=\"#scsi_dh\">scsi_dh</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_dh_data\">scsi_dh_data</a>-><a class=\"id\" href=\"#scsi_dh\">scsi_dh</a>-><a class=\"id\" href=\"#check_sense\">check_sense</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_dh_data\">scsi_dh_data</a>-><a class=\"id\" href=\"#scsi_dh\">scsi_dh</a>-><a class=\"id\" href=\"#check_sense\">check_sense</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != <a class=\"id\" href=\"#SCSI_RETURN_NOT_HANDLED\">SCSI_RETURN_NOT_HANDLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* handler does not care. Drop down to default handling */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Previous logic looked for FILEMARK, EOM or ILI which are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mainly associated with tapes and returned SUCCESS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#response_code\">response_code</a> == 0x70) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fixed format */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[2] &amp; 0xe0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * descriptor format: look for \"stream commands sense data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * descriptor\" (see SSC-3). Assume single sense data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * descriptor. Ignore ILI from SBC-2 READ LONG and WRITE LONG.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#additional_length\">additional_length</a> &gt; 3) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[8] == 0x4) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[11] &amp; 0xe0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NO_SENSE\">NO_SENSE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RECOVERED_ERROR\">RECOVERED_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <span class=\"comment\">/* soft_error */</span> <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x10) <span class=\"comment\">/* DIF */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NOT_READY\">NOT_READY</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if we are expecting a cc/ua because of a bus reset that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * performed, treat this just as a retry.  otherwise this is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * information that we should pass up to the upper-level driver</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so that we can deal with it there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#expecting_cc_ua\">expecting_cc_ua</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#expecting_cc_ua\">expecting_cc_ua</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if the device is in the process of becoming ready, we </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should retry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x04) && (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x01))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if the device is not started, we need to wake</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the error handler to start the motor</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#allow_restart\">allow_restart</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x04) && (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x02))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x3f && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x0e)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd_printk\">scmd_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#scmd\">scmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Warning! Received an indication that the \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"LUN assignments on this target have \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"changed. The Linux SCSI layer does not \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"automatically remap LUN assignments.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x3f)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd_printk\">scmd_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#scmd\">scmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Warning! Received an indication that the \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"operating parameters on this target have \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"changed. The Linux SCSI layer does not \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"automatically adjust these parameters.\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * barrier requests should always retry on UA</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * otherwise block will get a spurious error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for normal (non barrier) commands, pass the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * UA upwards for a determination in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * completion functions</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* these three are not supported */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#COPY_ABORTED\">COPY_ABORTED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VOLUME_OVERFLOW\">VOLUME_OVERFLOW</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MISCOMPARE\">MISCOMPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEDIUM_ERROR\">MEDIUM_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x11 || <span class=\"comment\">/* UNRECOVERED READ ERR */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x13 || <span class=\"comment\">/* AMNF DATA FIELD */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x14) { <span class=\"comment\">/* RECORD NOT FOUND */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HARDWARE_ERROR\">HARDWARE_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#retry_hwerror\">retry_hwerror</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ADD_TO_MLQUEUE\">ADD_TO_MLQUEUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BLANK_CHECK\">BLANK_CHECK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DATA_PROTECT\">DATA_PROTECT</a>:", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_handle_queue_ramp_up\">scsi_handle_queue_ramp_up</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_template\">scsi_host_template</a> *<a class=\"id\" href=\"#sht\">sht</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>;", 
];
xr_frag_insert('l/bf/3cecbd0ec62465645951379a4e11a240d0ecc3.xr', __xr_tmp);
