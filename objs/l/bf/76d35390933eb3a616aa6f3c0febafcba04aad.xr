var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_PPP_CHANNEL_H_\">_PPP_CHANNEL_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_PPP_CHANNEL_H_\">_PPP_CHANNEL_H_</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Definitions for the interface between the generic PPP code</span>", 
"<span class=\"comment\"> * and a PPP channel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A PPP channel provides a way for the generic PPP code to send</span>", 
"<span class=\"comment\"> * and receive packets over some sort of communications medium.</span>", 
"<span class=\"comment\"> * Packets are stored in sk_buffs and have the 2-byte PPP protocol</span>", 
"<span class=\"comment\"> * number at the start, but not the address and control bytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 1999 Paul Mackerras.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *  modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *  as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *  2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ==FILEVERSION 20000322==</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#net_namespace\">net_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a>;", 
"", 
"struct <a class=\"id\" href=\"#ppp_channel_ops\">ppp_channel_ops</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Send a packet (or multilink fragment) on this channel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Returns 1 if it was accepted, 0 if not. */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#start_xmit\">start_xmit</a>)(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *);", 
"<span class=\"ts\"/><span class=\"comment\">/* Handle an ioctl call that has come in via /dev/ppp. */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#ioctl\">ioctl</a>)(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *, unsigned int, unsigned long);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> {", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#private\">private</a>;<span class=\"ts\"/><span class=\"comment\">/* channel private data */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ppp_channel_ops\">ppp_channel_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>; <span class=\"comment\">/* operations for this channel */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtu\">mtu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* max transmit packet size */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hdrlen\">hdrlen</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* amount of headroom channel needs */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppp\">ppp</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* opaque to channel */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#speed\">speed</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* transfer rate (bytes/second) */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* the following is not used at present */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latency\">latency</a>;<span class=\"ts\"/><span class=\"comment\">/* overhead time in milliseconds */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"<span class=\"comment\">/* Called by the channel when it can send some more data. */</span>", 
"extern void <a class=\"id\" href=\"#ppp_output_wakeup\">ppp_output_wakeup</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *);", 
"", 
"<span class=\"comment\">/* Called by the channel to process a received PPP packet.</span>", 
"<span class=\"comment\">   The packet should have just the 2-byte PPP protocol header. */</span>", 
"extern void <a class=\"id\" href=\"#ppp_input\">ppp_input</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *);", 
"", 
"<span class=\"comment\">/* Called by the channel when an input error occurs, indicating</span>", 
"<span class=\"comment\">   that we may have missed a packet. */</span>", 
"extern void <a class=\"id\" href=\"#ppp_input_error\">ppp_input_error</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *, int <a class=\"id\" href=\"#code\">code</a>);", 
"", 
"<span class=\"comment\">/* Attach a channel to a given PPP unit in specified net. */</span>", 
"extern int <a class=\"id\" href=\"#ppp_register_net_channel\">ppp_register_net_channel</a>(struct <a class=\"id\" href=\"#net\">net</a> *, struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *);", 
"", 
"<span class=\"comment\">/* Attach a channel to a given PPP unit. */</span>", 
"extern int <a class=\"id\" href=\"#ppp_register_channel\">ppp_register_channel</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *);", 
"", 
"<span class=\"comment\">/* Detach a channel from its PPP unit (e.g. on hangup). */</span>", 
"extern void <a class=\"id\" href=\"#ppp_unregister_channel\">ppp_unregister_channel</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *);", 
"", 
"<span class=\"comment\">/* Get the channel number for a channel */</span>", 
"extern int <a class=\"id\" href=\"#ppp_channel_index\">ppp_channel_index</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *);", 
"", 
"<span class=\"comment\">/* Get the unit number associated with a channel, or -1 if none */</span>", 
"extern int <a class=\"id\" href=\"#ppp_unit_number\">ppp_unit_number</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *);", 
"", 
"<span class=\"comment\">/* Get the device name associated with a channel, or NULL if none */</span>", 
"extern char *<a class=\"id\" href=\"#ppp_dev_name\">ppp_dev_name</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SMP locking notes:</span>", 
"<span class=\"comment\"> * The channel code must ensure that when it calls ppp_unregister_channel,</span>", 
"<span class=\"comment\"> * nothing is executing in any of the procedures above, for that</span>", 
"<span class=\"comment\"> * channel.  The generic layer will ensure that nothing is executing</span>", 
"<span class=\"comment\"> * in the start_xmit and ioctl routines for the channel by the time</span>", 
"<span class=\"comment\"> * that ppp_unregister_channel returns.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/bf/76d35390933eb3a616aa6f3c0febafcba04aad.xr', __xr_tmp);
