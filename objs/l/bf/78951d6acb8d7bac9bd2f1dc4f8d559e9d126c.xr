var __xr_tmp = [
"#else <span class=\"comment\">/* SOCK_REFCNT_DEBUG */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sk_refcnt_debug_inc\">sk_refcnt_debug_inc</a>(<a class=\"id\" href=\"#sk\">sk</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sk_refcnt_debug_dec\">sk_refcnt_debug_dec</a>(<a class=\"id\" href=\"#sk\">sk</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sk_refcnt_debug_release\">sk_refcnt_debug_release</a>(<a class=\"id\" href=\"#sk\">sk</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* SOCK_REFCNT_DEBUG */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"comment\">/* Called with local bh disabled */</span>", 
"extern void <a class=\"id\" href=\"#sock_prot_inuse_add\">sock_prot_inuse_add</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#proto\">proto</a> *<a class=\"id\" href=\"#prot\">prot</a>, int <a class=\"id\" href=\"#inc\">inc</a>);", 
"extern int <a class=\"id\" href=\"#sock_prot_inuse_get\">sock_prot_inuse_get</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#proto\">proto</a> *<a class=\"id\" href=\"#proto\">proto</a>);", 
"#else", 
"static void <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#sock_prot_inuse_add\">sock_prot_inuse_add</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#proto\">proto</a> *<a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#inc\">inc</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"<span class=\"comment\">/* With per-bucket locks this operation is not-atomic, so that</span>", 
"<span class=\"comment\"> * this version is not worse.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__sk_prot_rehash\">__sk_prot_rehash</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#unhash\">unhash</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/* About 10 seconds */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SOCK_DESTROY_TIME\">SOCK_DESTROY_TIME</a> (10*<a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"<span class=\"comment\">/* Sockets 0-1023 can't be bound to unless you are superuser */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PROT_SOCK\">PROT_SOCK</a><span class=\"ts\"/>1024", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHUTDOWN_MASK\">SHUTDOWN_MASK</a><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCV_SHUTDOWN\">RCV_SHUTDOWN</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEND_SHUTDOWN\">SEND_SHUTDOWN</a><span class=\"ts\"/>2", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SOCK_SNDBUF_LOCK\">SOCK_SNDBUF_LOCK</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SOCK_RCVBUF_LOCK\">SOCK_RCVBUF_LOCK</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SOCK_BINDADDR_LOCK\">SOCK_BINDADDR_LOCK</a><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SOCK_BINDPORT_LOCK\">SOCK_BINDPORT_LOCK</a><span class=\"ts\"/>8", 
"", 
"<span class=\"comment\">/* sock_iocb: used to kick off async processing of socket ios */</span>", 
"struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sock\">sock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scm_cookie\">scm_cookie</a><span class=\"ts\"/>*<a class=\"id\" href=\"#scm\">scm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#msghdr\">msghdr</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#async_msg\">async_msg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#kiocb\">kiocb</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> *<a class=\"id\" href=\"#kiocb_to_siocb\">kiocb_to_siocb</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> *)<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#siocb_to_kiocb\">siocb_to_kiocb</a>(struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> *<a class=\"id\" href=\"#si\">si</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#kiocb\">kiocb</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#socket_alloc\">socket_alloc</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> <a class=\"id\" href=\"#socket\">socket</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> <a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#SOCKET_I\">SOCKET_I</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#socket_alloc\">socket_alloc</a>, <a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>)-><a class=\"id\" href=\"#socket\">socket</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#socket\">socket</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#socket\">socket</a>, struct <a class=\"id\" href=\"#socket_alloc\">socket_alloc</a>, <a class=\"id\" href=\"#socket\">socket</a>)-><a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions for memory accounting</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#__sk_mem_schedule\">__sk_mem_schedule</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#kind\">kind</a>);", 
"extern void <a class=\"id\" href=\"#__sk_mem_reclaim\">__sk_mem_reclaim</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a> ((int)<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SK_MEM_QUANTUM_SHIFT\">SK_MEM_QUANTUM_SHIFT</a> <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SK_MEM_SEND\">SK_MEM_SEND</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SK_MEM_RECV\">SK_MEM_RECV</a><span class=\"ts\"/>1", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sk_mem_pages\">sk_mem_pages</a>(int <a class=\"id\" href=\"#amt\">amt</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#amt\">amt</a> + <a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a> - 1) >> <a class=\"id\" href=\"#SK_MEM_QUANTUM_SHIFT\">SK_MEM_QUANTUM_SHIFT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sk_has_account\">sk_has_account</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* return true if protocol supports memory accounting */</span>", 
"<span class=\"ts\"/>return !!<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#memory_allocated\">memory_allocated</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sk_wmem_schedule\">sk_wmem_schedule</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk_has_account\">sk_has_account</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_forward_alloc\">sk_forward_alloc</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sk_mem_schedule\">__sk_mem_schedule</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#SK_MEM_SEND\">SK_MEM_SEND</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sk_rmem_schedule\">sk_rmem_schedule</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk_has_account\">sk_has_account</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_forward_alloc\">sk_forward_alloc</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sk_mem_schedule\">__sk_mem_schedule</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#SK_MEM_RECV\">SK_MEM_RECV</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_mem_reclaim\">sk_mem_reclaim</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk_has_account\">sk_has_account</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_forward_alloc\">sk_forward_alloc</a> >= <a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sk_mem_reclaim\">__sk_mem_reclaim</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_mem_reclaim_partial\">sk_mem_reclaim_partial</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk_has_account\">sk_has_account</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_forward_alloc\">sk_forward_alloc</a> &gt; <a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sk_mem_reclaim\">__sk_mem_reclaim</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_mem_charge\">sk_mem_charge</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk_has_account\">sk_has_account</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_forward_alloc\">sk_forward_alloc</a> -= <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_mem_uncharge\">sk_mem_uncharge</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk_has_account\">sk_has_account</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_forward_alloc\">sk_forward_alloc</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_wmem_free_skb\">sk_wmem_free_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_set_flag\">sock_set_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_QUEUE_SHRUNK\">SOCK_QUEUE_SHRUNK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_queued\">sk_wmem_queued</a> -= <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_uncharge\">sk_mem_uncharge</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfree_skb\">__kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Used by processes to \"lock\" a socket state, so that</span>", 
"<span class=\"comment\"> * interrupts and bottom half handlers won't change it</span>", 
"<span class=\"comment\"> * from under us. It essentially blocks any incoming</span>", 
"<span class=\"comment\"> * packets, so that we won't get any new data or any</span>", 
"<span class=\"comment\"> * packets that change the state of the socket.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * While locked, BH processing will add new packets to</span>", 
"<span class=\"comment\"> * the backlog queue.  This queue is processed by the</span>", 
"<span class=\"comment\"> * owner of the socket lock right before it is released.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since ~2.3.5 it is also exclusive sleep lock serializing</span>", 
"<span class=\"comment\"> * accesses from user process context.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sock_owned_by_user\">sock_owned_by_user</a>(<a class=\"id\" href=\"#sk\">sk</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#owned\">owned</a>)", 
"", 
];
xr_frag_insert('l/bf/78951d6acb8d7bac9bd2f1dc4f8d559e9d126c.xr', __xr_tmp);
