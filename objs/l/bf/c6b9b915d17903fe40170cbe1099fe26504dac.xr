var __xr_tmp = [
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have cancelled the power transition by running</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hibernation_ops-&gt;finish() before saving the image, so we should let</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the firmware know that we're going to enter the sleep state after all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#begin\">begin</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Close\">Close</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entering_platform_hibernation\">entering_platform_hibernation</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_console\">suspend_console</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_mask\">saved_mask</a> = <a class=\"id\" href=\"#clear_gfp_allowed_mask\">clear_gfp_allowed_mask</a>(<a class=\"id\" href=\"#GFP_IOFS\">GFP_IOFS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dpm_suspend_start\">dpm_suspend_start</a>(<a class=\"id\" href=\"#PMSG_HIBERNATE\">PMSG_HIBERNATE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#recover\">recover</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#recover\">recover</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Resume_devices\">Resume_devices</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dpm_suspend_noirq\">dpm_suspend_noirq</a>(<a class=\"id\" href=\"#PMSG_HIBERNATE\">PMSG_HIBERNATE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Resume_devices\">Resume_devices</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#prepare\">prepare</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Platform_finish\">Platform_finish</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#disable_nonboot_cpus\">disable_nonboot_cpus</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Platform_finish\">Platform_finish</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev_suspend\">sysdev_suspend</a>(<a class=\"id\" href=\"#PMSG_HIBERNATE\">PMSG_HIBERNATE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pm_check_wakeup_events\">pm_check_wakeup_events</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Power_up\">Power_up</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#enter\">enter</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* We should never get here */</span>", 
"<span class=\"ts\"/>while (1);", 
"", 
" <a class=\"id\" href=\"#Power_up\">Power_up</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev_resume\">sysdev_resume</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_nonboot_cpus\">enable_nonboot_cpus</a>();", 
"", 
" <a class=\"id\" href=\"#Platform_finish\">Platform_finish</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#finish\">finish</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dpm_resume_noirq\">dpm_resume_noirq</a>(<a class=\"id\" href=\"#PMSG_RESTORE\">PMSG_RESTORE</a>);", 
"", 
" <a class=\"id\" href=\"#Resume_devices\">Resume_devices</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entering_platform_hibernation\">entering_platform_hibernation</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dpm_resume_end\">dpm_resume_end</a>(<a class=\"id\" href=\"#PMSG_RESTORE\">PMSG_RESTORE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_gfp_allowed_mask\">set_gfp_allowed_mask</a>(<a class=\"id\" href=\"#saved_mask\">saved_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resume_console\">resume_console</a>();", 
"", 
" <a class=\"id\" href=\"#Close\">Close</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#end\">end</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>power_down - Shut the machine down for hibernation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Use the platform driver, if configured so; otherwise try</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to power off or reboot.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#power_down\">power_down</a>(void)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_TEST\">HIBERNATION_TEST</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_TESTPROC\">HIBERNATION_TESTPROC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_REBOOT\">HIBERNATION_REBOOT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_restart\">kernel_restart</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_PLATFORM\">HIBERNATION_PLATFORM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_platform_enter\">hibernation_platform_enter</a>();", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_SHUTDOWN\">HIBERNATION_SHUTDOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_power_off\">kernel_power_off</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_halt\">kernel_halt</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Valid image is on the disk, if we continue we risk serious data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * corruption after resume.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"PM: Please power down manually\\n\");", 
"<span class=\"ts\"/>while(1);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#prepare_processes\">prepare_processes</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#freeze_processes\">freeze_processes</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thaw_processes\">thaw_processes</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hibernate - The granpappy of the built-in hibernation management</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#hibernate\">hibernate</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* The snapshot device should not be opened while we're running */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>(&amp;<a class=\"id\" href=\"#snapshot_device_available\">snapshot_device_available</a>, -1, 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Unlock\">Unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_prepare_console\">pm_prepare_console</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pm_notifier_call_chain\">pm_notifier_call_chain</a>(<a class=\"id\" href=\"#PM_HIBERNATION_PREPARE\">PM_HIBERNATION_PREPARE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Exit\">Exit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#usermodehelper_disable\">usermodehelper_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Exit\">Exit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate memory management structures */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#create_basic_memory_bitmaps\">create_basic_memory_bitmaps</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Exit\">Exit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM: Syncing filesystems ... \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sys_sync\">sys_sync</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"done.\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepare_processes\">prepare_processes</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Finish\">Finish</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hibernation_test\">hibernation_test</a>(<a class=\"id\" href=\"#TEST_FREEZER\">TEST_FREEZER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Thaw\">Thaw</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hibernation_testmode\">hibernation_testmode</a>(<a class=\"id\" href=\"#HIBERNATION_TESTPROC\">HIBERNATION_TESTPROC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Thaw\">Thaw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#hibernation_snapshot\">hibernation_snapshot</a>(<a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> == <a class=\"id\" href=\"#HIBERNATION_PLATFORM\">HIBERNATION_PLATFORM</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Thaw\">Thaw</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_suspend\">in_suspend</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> == <a class=\"id\" href=\"#HIBERNATION_PLATFORM\">HIBERNATION_PLATFORM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SF_PLATFORM_MODE\">SF_PLATFORM_MODE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: writing image.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#swsusp_write\">swsusp_write</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power_down\">power_down</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Image restored successfully.\\n\");", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#Thaw\">Thaw</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thaw_processes\">thaw_processes</a>();", 
" <a class=\"id\" href=\"#Finish\">Finish</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_basic_memory_bitmaps\">free_basic_memory_bitmaps</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usermodehelper_enable\">usermodehelper_enable</a>();", 
" <a class=\"id\" href=\"#Exit\">Exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_notifier_call_chain\">pm_notifier_call_chain</a>(<a class=\"id\" href=\"#PM_POST_HIBERNATION\">PM_POST_HIBERNATION</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_restore_console\">pm_restore_console</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#snapshot_device_available\">snapshot_device_available</a>);", 
" <a class=\"id\" href=\"#Unlock\">Unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>software_resume - Resume from a saved image.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called as a late_initcall (so all devices are discovered and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>initialized), we call swsusp to see if we have a saved image or not.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If so, we quiesce devices, the restore the saved image. We will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return above (in hibernate() ) if everything goes well.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Otherwise, we fail gracefully and return to the normally</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scheduled program.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#software_resume\">software_resume</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the user said \"noresume\".. bail out early.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noresume\">noresume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * name_to_dev_t() below takes a sysfs buffer mutex when sysfs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is configured into the kernel. Since the regular hibernate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trigger path is via sysfs which takes a buffer mutex before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * calling hibernate functions (which take pm_mutex) this can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cause lockdep to complain about a possible ABBA deadlock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which cannot happen since we're in the boot code here and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sysfs can't be invoked yet. Therefore, we use a subclass</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here to avoid lockdep complaining.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock_nested\">mutex_lock_nested</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Check_image\">Check_image</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#resume_file\">resume_file</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Unlock\">Unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Checking image partition %s\\n\", <a class=\"id\" href=\"#resume_file\">resume_file</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if the device is there */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a> = <a class=\"id\" href=\"#name_to_dev_t\">name_to_dev_t</a>(<a class=\"id\" href=\"#resume_file\">resume_file</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Some device discovery might still be in progress; we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to wait for this to finish.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_device_probe\">wait_for_device_probe</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can't depend on SCSI devices being available after loading</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one of their modules until scsi_complete_async_scans() is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * called and the resume device usually is a SCSI one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_complete_async_scans\">scsi_complete_async_scans</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a> = <a class=\"id\" href=\"#name_to_dev_t\">name_to_dev_t</a>(<a class=\"id\" href=\"#resume_file\">resume_file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Unlock\">Unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#Check_image\">Check_image</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Resume from partition %d:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Checking hibernation image.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#swsusp_check\">swsusp_check</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Unlock\">Unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The snapshot device should not be opened while we're running */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>(&amp;<a class=\"id\" href=\"#snapshot_device_available\">snapshot_device_available</a>, -1, 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_close\">swsusp_close</a>(<a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Unlock\">Unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_prepare_console\">pm_prepare_console</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pm_notifier_call_chain\">pm_notifier_call_chain</a>(<a class=\"id\" href=\"#PM_RESTORE_PREPARE\">PM_RESTORE_PREPARE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_finish\">close_finish</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#usermodehelper_disable\">usermodehelper_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_finish\">close_finish</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#create_basic_memory_bitmaps\">create_basic_memory_bitmaps</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_finish\">close_finish</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Preparing processes for restore.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepare_processes\">prepare_processes</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_close\">swsusp_close</a>(<a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Done\">Done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Reading hibernation image.\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#swsusp_read\">swsusp_read</a>(&amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_close\">swsusp_close</a>(<a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_restore\">hibernation_restore</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SF_PLATFORM_MODE\">SF_PLATFORM_MODE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PM: Restore failed, recovering.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thaw_processes\">thaw_processes</a>();", 
" <a class=\"id\" href=\"#Done\">Done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_basic_memory_bitmaps\">free_basic_memory_bitmaps</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usermodehelper_enable\">usermodehelper_enable</a>();", 
" <a class=\"id\" href=\"#Finish\">Finish</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_notifier_call_chain\">pm_notifier_call_chain</a>(<a class=\"id\" href=\"#PM_POST_RESTORE\">PM_POST_RESTORE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_restore_console\">pm_restore_console</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#snapshot_device_available\">snapshot_device_available</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* For success case, the suspend path will release the lock */</span>", 
" <a class=\"id\" href=\"#Unlock\">Unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Resume from disk failed.\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<a class=\"id\" href=\"#close_finish\">close_finish</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_close\">swsusp_close</a>(<a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#Finish\">Finish</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#software_resume\">software_resume</a>);", 
"", 
"", 
"static const char * const <a class=\"id\" href=\"#hibernation_modes\">hibernation_modes</a>[] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#HIBERNATION_PLATFORM\">HIBERNATION_PLATFORM</a>]<span class=\"ts\"/>= \"platform\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#HIBERNATION_SHUTDOWN\">HIBERNATION_SHUTDOWN</a>]<span class=\"ts\"/>= \"shutdown\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#HIBERNATION_REBOOT\">HIBERNATION_REBOOT</a>]<span class=\"ts\"/>= \"reboot\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#HIBERNATION_TEST\">HIBERNATION_TEST</a>]<span class=\"ts\"/>= \"test\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#HIBERNATION_TESTPROC\">HIBERNATION_TESTPROC</a>]<span class=\"ts\"/>= \"testproc\",", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disk - Control hibernation mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Suspend-to-disk can be handled in several ways. We have a few options</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for putting the system to sleep - using the platform driver (e.g. ACPI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or other hibernation_ops), powering off the system or rebooting the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>system (for testing) as well as the two test modes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The system can support 'platform', and that is known a priori (and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>encoded by the presence of hibernation_ops). However, the user may</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>choose 'shutdown' or 'reboot' as alternatives, as well as one fo the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>test modes, 'test' or 'testproc'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>show() will display what the mode is currently set to.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>store() will accept one of</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>'platform'</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>'shutdown'</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>'reboot'</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>'test'</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>'testproc'</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It will only change to 'platform' if the system</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>supports it (as determined by having hibernation_ops).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#disk_show\">disk_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#HIBERNATION_FIRST\">HIBERNATION_FIRST</a>; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#HIBERNATION_MAX\">HIBERNATION_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hibernation_modes\">hibernation_modes</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_SHUTDOWN\">HIBERNATION_SHUTDOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_REBOOT\">HIBERNATION_REBOOT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_TEST\">HIBERNATION_TEST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_TESTPROC\">HIBERNATION_TESTPROC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_PLATFORM\">HIBERNATION_PLATFORM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* not a valid mode, continue with loop */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"[%s] \", <a class=\"id\" href=\"#hibernation_modes\">hibernation_modes</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%s \", <a class=\"id\" href=\"#hibernation_modes\">hibernation_modes</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>-<a class=\"id\" href=\"#start\">start</a>;", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#disk_store\">disk_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#HIBERNATION_INVALID\">HIBERNATION_INVALID</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#memchr\">memchr</a>(<a class=\"id\" href=\"#buf\">buf</a>, '\\n', <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#p\">p</a> ? <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#buf\">buf</a> : <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#HIBERNATION_FIRST\">HIBERNATION_FIRST</a>; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#HIBERNATION_MAX\">HIBERNATION_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#hibernation_modes\">hibernation_modes</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>    && !<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#hibernation_modes\">hibernation_modes</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#HIBERNATION_INVALID\">HIBERNATION_INVALID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_SHUTDOWN\">HIBERNATION_SHUTDOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_REBOOT\">HIBERNATION_REBOOT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_TEST\">HIBERNATION_TEST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_TESTPROC\">HIBERNATION_TESTPROC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#HIBERNATION_PLATFORM\">HIBERNATION_PLATFORM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Hibernation mode set to '%s'\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#hibernation_modes\">hibernation_modes</a>[<a class=\"id\" href=\"#mode\">mode</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a> ? <a class=\"id\" href=\"#error\">error</a> : <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#power_attr\">power_attr</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#resume_show\">resume_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>,\"%d:%d\\n\", <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#resume_store\">resume_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#maj\">maj</a>, <a class=\"id\" href=\"#min\">min</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%u:%u\", &amp;<a class=\"id\" href=\"#maj\">maj</a>, &amp;<a class=\"id\" href=\"#min\">min</a>) != 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#maj\">maj</a>,<a class=\"id\" href=\"#min\">min</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maj\">maj</a> != <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#res\">res</a>) || <a class=\"id\" href=\"#min\">min</a> != <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM: Starting manual resume from disk\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#noresume\">noresume</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#software_resume\">software_resume</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#n\">n</a>;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#power_attr\">power_attr</a>(<a class=\"id\" href=\"#resume\">resume</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#image_size_show\">image_size_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\\n\", <a class=\"id\" href=\"#image_size\">image_size</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#image_size_store\">image_size_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\", &amp;<a class=\"id\" href=\"#size\">size</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#image_size\">image_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#power_attr\">power_attr</a>(<a class=\"id\" href=\"#image_size\">image_size</a>);", 
"", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> * <a class=\"id\" href=\"#g\">g</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#disk_attr\">disk_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#resume_attr\">resume_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#image_size_attr\">image_size_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#attr_group\">attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#g\">g</a>,", 
"};", 
"", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pm_disk_init\">pm_disk_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysfs_create_group\">sysfs_create_group</a>(<a class=\"id\" href=\"#power_kobj\">power_kobj</a>, &amp;<a class=\"id\" href=\"#attr_group\">attr_group</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#pm_disk_init\">pm_disk_init</a>);", 
"", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#resume_setup\">resume_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noresume\">noresume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>( <a class=\"id\" href=\"#resume_file\">resume_file</a>, <a class=\"id\" href=\"#str\">str</a>, 255 );", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#resume_offset_setup\">resume_offset_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noresume\">noresume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#str\">str</a>, \"%llu\", &amp;<a class=\"id\" href=\"#offset\">offset</a>) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_resume_block\">swsusp_resume_block</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#noresume_setup\">noresume_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#noresume\">noresume</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"noresume\", <a class=\"id\" href=\"#noresume_setup\">noresume_setup</a>);", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"resume_offset=\", <a class=\"id\" href=\"#resume_offset_setup\">resume_offset_setup</a>);", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"resume=\", <a class=\"id\" href=\"#resume_setup\">resume_setup</a>);", 
];
xr_frag_insert('l/bf/c6b9b915d17903fe40170cbe1099fe26504dac.xr', __xr_tmp);
