var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/kernel/time.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This file contains the interface functions for the various</span>", 
"<span class=\"comment\"> *  time related system calls: time, stime, gettimeofday, settimeofday,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       adjtime</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Modification history kernel/time.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1993-09-02    Philip Gladstone</span>", 
"<span class=\"comment\"> *      Created file with time related functions from sched.c and adjtimex()</span>", 
"<span class=\"comment\"> * 1993-10-08    Torsten Duwe</span>", 
"<span class=\"comment\"> *      adjtime interface update and CMOS clock write code</span>", 
"<span class=\"comment\"> * 1995-08-13    Torsten Duwe</span>", 
"<span class=\"comment\"> *      kernel PLL updated to 1994-12-13 specs (rfc-1589)</span>", 
"<span class=\"comment\"> * 1999-01-16    Ulrich Windl</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Introduced error checking for many cases in adjtimex().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Updated NTP code according to technical memorandum Jan '96</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"A Kernel Model for Precision Timekeeping\" by Dave Mills</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allow time_constant larger than MAXTC(6) for NTP v4 (MAXTC == 10)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(Even though the technical memorandum forbids it)</span>", 
"<span class=\"comment\"> * 2004-07-14<span class=\"ts\"/> Christoph Lameter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Added getnstimeofday to allow the posix timer functions to return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with nanosecond accuracy</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clocksource\">clocksource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#math64\">math64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"timeconst.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The timezone where the local system is located.  Used as a default by some</span>", 
"<span class=\"comment\"> * programs who obtain this value by using gettimeofday.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#timezone\">timezone</a> <a class=\"id\" href=\"#sys_tz\">sys_tz</a>;", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sys_tz\">sys_tz</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_SYS_TIME\">__ARCH_WANT_SYS_TIME</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sys_time() can be implemented in user-level using</span>", 
"<span class=\"comment\"> * sys_gettimeofday().  Is this for backwards compatibility?  If so,</span>", 
"<span class=\"comment\"> * why not move it into the appropriate arch directory (for those</span>", 
"<span class=\"comment\"> * architectures that need it).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#time\">time</a>, <a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tloc\">tloc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tloc\">tloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#i\">i</a>,<a class=\"id\" href=\"#tloc\">tloc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_successful_syscall_return\">force_successful_syscall_return</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sys_stime() can be implemented in user-level using</span>", 
"<span class=\"comment\"> * sys_settimeofday().  Is this for backwards compatibility?  If so,</span>", 
"<span class=\"comment\"> * why not move it into the appropriate arch directory (for those</span>", 
"<span class=\"comment\"> * architectures that need it).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tptr\">tptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#tv\">tv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>, <a class=\"id\" href=\"#tptr\">tptr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_settime\">security_settime</a>(&amp;<a class=\"id\" href=\"#tv\">tv</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_settimeofday\">do_settimeofday</a>(&amp;<a class=\"id\" href=\"#tv\">tv</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ARCH_WANT_SYS_TIME */</span>", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#gettimeofday\">gettimeofday</a>, struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tv\">tv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timezone\">timezone</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tz\">tz</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#tv\">tv</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#ktv\">ktv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_gettimeofday\">do_gettimeofday</a>(&amp;<a class=\"id\" href=\"#ktv\">ktv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#tv\">tv</a>, &amp;<a class=\"id\" href=\"#ktv\">ktv</a>, sizeof(<a class=\"id\" href=\"#ktv\">ktv</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tz\">tz</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#tz\">tz</a>, &amp;<a class=\"id\" href=\"#sys_tz\">sys_tz</a>, sizeof(<a class=\"id\" href=\"#sys_tz\">sys_tz</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Adjust the time obtained from the CMOS to be UTC time instead of</span>", 
"<span class=\"comment\"> * local time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is ugly, but preferable to the alternatives.  Otherwise we</span>", 
"<span class=\"comment\"> * would either need to write a program to do it in /etc/rc (and risk</span>", 
"<span class=\"comment\"> * confusion if the program gets run more than once; it would also be</span>", 
"<span class=\"comment\"> * hard to make the program warp the clock precisely n hours)  or</span>", 
"<span class=\"comment\"> * compile in the timezone information into the kernel.  Bad, bad....</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- TYT, 1992-01-01</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The best thing to do is to keep the CMOS clock in universal time (UTC)</span>", 
"<span class=\"comment\"> * as real UNIX machines always do it. This avoids all headaches about</span>", 
"<span class=\"comment\"> * daylight saving times and warping kernel clocks.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#warp_clock\">warp_clock</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#adjust\">adjust</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adjust\">adjust</a> = <a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adjust\">adjust</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> += <a class=\"id\" href=\"#sys_tz\">sys_tz</a>.<a class=\"id\" href=\"#tz_minuteswest\">tz_minuteswest</a> * 60;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_settimeofday\">do_settimeofday</a>(&amp;<a class=\"id\" href=\"#adjust\">adjust</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In case for some reason the CMOS clock has not already been running</span>", 
"<span class=\"comment\"> * in UTC, but in some local time: The first time we set the timezone,</span>", 
"<span class=\"comment\"> * we will warp the clock so that it is ticking UTC time instead of</span>", 
"<span class=\"comment\"> * local time. Presumably, if someone is setting the timezone then we</span>", 
"<span class=\"comment\"> * are running in an environment where the programs understand about</span>", 
"<span class=\"comment\"> * timezones. This should be done at boot time in the /etc/rc script,</span>", 
"<span class=\"comment\"> * as soon as possible, so that the clock can be set right. Otherwise,</span>", 
"<span class=\"comment\"> * various programs will get confused when the clock gets warped.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#do_sys_settimeofday\">do_sys_settimeofday</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tv\">tv</a>, struct <a class=\"id\" href=\"#timezone\">timezone</a> *<a class=\"id\" href=\"#tz\">tz</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#firsttime\">firsttime</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tv\">tv</a> && !<a class=\"id\" href=\"#timespec_valid\">timespec_valid</a>(<a class=\"id\" href=\"#tv\">tv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_settime\">security_settime</a>(<a class=\"id\" href=\"#tv\">tv</a>, <a class=\"id\" href=\"#tz\">tz</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tz\">tz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SMP safe, global irq locking makes it work. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sys_tz\">sys_tz</a> = *<a class=\"id\" href=\"#tz\">tz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_vsyscall_tz\">update_vsyscall_tz</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#firsttime\">firsttime</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#firsttime\">firsttime</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tv\">tv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warp_clock\">warp_clock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tv\">tv</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SMP safe, again the code in arch/foo/time.c should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * globally block out interrupts when it runs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_settimeofday\">do_settimeofday</a>(<a class=\"id\" href=\"#tv\">tv</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#settimeofday\">settimeofday</a>, struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tv\">tv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timezone\">timezone</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tz\">tz</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#user_tv\">user_tv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a><span class=\"ts\"/><a class=\"id\" href=\"#new_ts\">new_ts</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timezone\">timezone</a> <a class=\"id\" href=\"#new_tz\">new_tz</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tv\">tv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#user_tv\">user_tv</a>, <a class=\"id\" href=\"#tv\">tv</a>, sizeof(*<a class=\"id\" href=\"#tv\">tv</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_ts\">new_ts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#user_tv\">user_tv</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_ts\">new_ts</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#user_tv\">user_tv</a>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tz\">tz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#new_tz\">new_tz</a>, <a class=\"id\" href=\"#tz\">tz</a>, sizeof(*<a class=\"id\" href=\"#tz\">tz</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_sys_settimeofday\">do_sys_settimeofday</a>(<a class=\"id\" href=\"#tv\">tv</a> ? &amp;<a class=\"id\" href=\"#new_ts\">new_ts</a> : <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#tz\">tz</a> ? &amp;<a class=\"id\" href=\"#new_tz\">new_tz</a> : <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#adjtimex\">adjtimex</a>, struct <a class=\"id\" href=\"#timex\">timex</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#txc_p\">txc_p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timex\">timex</a> <a class=\"id\" href=\"#txc\">txc</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Local copy of parameter */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy the user data space into the kernel copy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structure. But bear in mind that the structures</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may change</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#txc\">txc</a>, <a class=\"id\" href=\"#txc_p\">txc_p</a>, sizeof(struct <a class=\"id\" href=\"#timex\">timex</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_adjtimex\">do_adjtimex</a>(&amp;<a class=\"id\" href=\"#txc\">txc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#txc_p\">txc_p</a>, &amp;<a class=\"id\" href=\"#txc\">txc</a>, sizeof(struct <a class=\"id\" href=\"#timex\">timex</a>)) ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * current_fs_time - Return FS time</span>", 
"<span class=\"comment\"> * @sb: Superblock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the current time truncated to the time granularity supported by</span>", 
"<span class=\"comment\"> * the fs.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#current_fs_time\">current_fs_time</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#timespec_trunc\">timespec_trunc</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_time_gran\">s_time_gran</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#current_fs_time\">current_fs_time</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert jiffies to milliseconds and back.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Avoid unnecessary multiplications/divisions in the</span>", 
"<span class=\"comment\"> * two most common HZ cases:</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(const unsigned long <a class=\"id\" href=\"#j\">j</a>)", 
"{", 
"#if <a class=\"id\" href=\"#HZ\">HZ</a> <= <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> && !(<a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> % <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>) * <a class=\"id\" href=\"#j\">j</a>;", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> &gt; <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> && !(<a class=\"id\" href=\"#HZ\">HZ</a> % <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a>)", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#j\">j</a> + (<a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a>) - 1)/(<a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a>);", 
"#else", 
"# if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#HZ_TO_MSEC_MUL32\">HZ_TO_MSEC_MUL32</a> * <a class=\"id\" href=\"#j\">j</a>) >> <a class=\"id\" href=\"#HZ_TO_MSEC_SHR32\">HZ_TO_MSEC_SHR32</a>;", 
"# else", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#j\">j</a> * <a class=\"id\" href=\"#HZ_TO_MSEC_NUM\">HZ_TO_MSEC_NUM</a>) / <a class=\"id\" href=\"#HZ_TO_MSEC_DEN\">HZ_TO_MSEC_DEN</a>;", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#jiffies_to_usecs\">jiffies_to_usecs</a>(const unsigned long <a class=\"id\" href=\"#j\">j</a>)", 
"{", 
"#if <a class=\"id\" href=\"#HZ\">HZ</a> <= <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a> && !(<a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a> % <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>) * <a class=\"id\" href=\"#j\">j</a>;", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> &gt; <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a> && !(<a class=\"id\" href=\"#HZ\">HZ</a> % <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>)", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#j\">j</a> + (<a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>) - 1)/(<a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>);", 
"#else", 
"# if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#HZ_TO_USEC_MUL32\">HZ_TO_USEC_MUL32</a> * <a class=\"id\" href=\"#j\">j</a>) >> <a class=\"id\" href=\"#HZ_TO_USEC_SHR32\">HZ_TO_USEC_SHR32</a>;", 
"# else", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#j\">j</a> * <a class=\"id\" href=\"#HZ_TO_USEC_NUM\">HZ_TO_USEC_NUM</a>) / <a class=\"id\" href=\"#HZ_TO_USEC_DEN\">HZ_TO_USEC_DEN</a>;", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jiffies_to_usecs\">jiffies_to_usecs</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timespec_trunc - Truncate timespec to a granularity</span>", 
"<span class=\"comment\"> * @t: Timespec</span>", 
"<span class=\"comment\"> * @gran: Granularity in ns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Truncate a timespec to a granularity. gran must be smaller than a second.</span>", 
"<span class=\"comment\"> * Always rounds down.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be only used for timestamps returned by</span>", 
"<span class=\"comment\"> * current_kernel_time() or CURRENT_TIME, not with do_gettimeofday() because</span>", 
"<span class=\"comment\"> * it doesn't handle the better resolution of the latter.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#timespec_trunc\">timespec_trunc</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#t\">t</a>, unsigned <a class=\"id\" href=\"#gran\">gran</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Division is pretty slow so avoid it for common cases.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Currently current_kernel_time() never returns better than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * jiffies resolution. Exploit that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gran\">gran</a> <= <a class=\"id\" href=\"#jiffies_to_usecs\">jiffies_to_usecs</a>(1) * 1000) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span>", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#gran\">gran</a> == 1000000000) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> -= <a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> % <a class=\"id\" href=\"#gran\">gran</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#timespec_trunc\">timespec_trunc</a>);", 
"", 
"<span class=\"comment\">/* Converts Gregorian date to seconds since 1970-01-01 00:00:00.</span>", 
"<span class=\"comment\"> * Assumes input in normal date format, i.e. 1980-12-31 23:59:59</span>", 
"<span class=\"comment\"> * =&gt; year=1980, mon=12, day=31, hour=23, min=59, sec=59.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [For the Julian calendar (which was used in Russia before 1917,</span>", 
"<span class=\"comment\"> * Britain &amp; colonies before 1752, anywhere else before 1582,</span>", 
"<span class=\"comment\"> * and is still in use by some communities) leave out the</span>", 
"<span class=\"comment\"> * -year/100+year/400 terms, and add 10.]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This algorithm was first published by Gauss (I think).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * WARNING: this function will overflow on 2106-02-07 06:28:16 on</span>", 
"<span class=\"comment\"> * machines where long is 32-bit! (However, as time_t is signed, we</span>", 
"<span class=\"comment\"> * will already get problems at other places on 2038-01-19 03:14:08)</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long", 
"<a class=\"id\" href=\"#mktime\">mktime</a>(const unsigned int <a class=\"id\" href=\"#year0\">year0</a>, const unsigned int <a class=\"id\" href=\"#mon0\">mon0</a>,", 
"       const unsigned int <a class=\"id\" href=\"#day\">day</a>, const unsigned int <a class=\"id\" href=\"#hour\">hour</a>,", 
"       const unsigned int <a class=\"id\" href=\"#min\">min</a>, const unsigned int <a class=\"id\" href=\"#sec\">sec</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mon\">mon</a> = <a class=\"id\" href=\"#mon0\">mon0</a>, <a class=\"id\" href=\"#year\">year</a> = <a class=\"id\" href=\"#year0\">year0</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 1..12 -&gt; 11,12,1..10 */</span>", 
"<span class=\"ts\"/>if (0 >= (int) (<a class=\"id\" href=\"#mon\">mon</a> -= 2)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mon\">mon</a> += 12;<span class=\"ts\"/><span class=\"comment\">/* Puts Feb last since it has leap day */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#year\">year</a> -= 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return ((((unsigned long)", 
"<span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#year\">year</a>/4 - <a class=\"id\" href=\"#year\">year</a>/100 + <a class=\"id\" href=\"#year\">year</a>/400 + 367*<a class=\"id\" href=\"#mon\">mon</a>/12 + <a class=\"id\" href=\"#day\">day</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#year\">year</a>*365 - 719499", 
"<span class=\"ts\"/>    )*24 + <a class=\"id\" href=\"#hour\">hour</a> <span class=\"comment\">/* now have hours */</span>", 
"<span class=\"ts\"/>  )*60 + <a class=\"id\" href=\"#min\">min</a> <span class=\"comment\">/* now have minutes */</span>", 
"<span class=\"ts\"/>)*60 + <a class=\"id\" href=\"#sec\">sec</a>; <span class=\"comment\">/* finally seconds */</span>", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mktime\">mktime</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_normalized_timespec - set timespec sec and nsec parts and normalize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ts:<span class=\"ts\"/><span class=\"ts\"/>pointer to timespec variable to be set</span>", 
"<span class=\"comment\"> * @sec:<span class=\"ts\"/>seconds to set</span>", 
"<span class=\"comment\"> * @nsec:<span class=\"ts\"/>nanoseconds to set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set seconds and nanoseconds field of a timespec variable and</span>", 
"<span class=\"comment\"> * normalize to the timespec storage format</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: The tv_nsec part is always in the range of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 &lt;= tv_nsec &lt; NSEC_PER_SEC</span>", 
"<span class=\"comment\"> * For negative values only the tv_sec field is negative !</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#set_normalized_timespec\">set_normalized_timespec</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#sec\">sec</a>, <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#nsec\">nsec</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nsec\">nsec</a> >= <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The following asm() prevents the compiler from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * optimising this loop into a modulo operation. See</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * also __iter_div_u64_rem() in include/linux/time.h</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"\" : \"+rm\"(<a class=\"id\" href=\"#nsec\">nsec</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> -= <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#sec\">sec</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nsec\">nsec</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"\" : \"+rm\"(<a class=\"id\" href=\"#nsec\">nsec</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> += <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#sec\">sec</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#sec\">sec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_normalized_timespec\">set_normalized_timespec</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ns_to_timespec - Convert nanoseconds to timespec</span>", 
"<span class=\"comment\"> * @nsec:       the nanoseconds value to be converted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the timespec representation of the nsec parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ns_to_timespec\">ns_to_timespec</a>(const <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#nsec\">nsec</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#rem\">rem</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nsec\">nsec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (struct <a class=\"id\" href=\"#timespec\">timespec</a>) {0, 0};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#div_s64_rem\">div_s64_rem</a>(<a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>, &amp;<a class=\"id\" href=\"#rem\">rem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rem\">rem</a> &lt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rem\">rem</a> += <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#rem\">rem</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ts\">ts</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ns_to_timespec\">ns_to_timespec</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ns_to_timeval - Convert nanoseconds to timeval</span>", 
"<span class=\"comment\"> * @nsec:       the nanoseconds value to be converted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the timeval representation of the nsec parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#ns_to_timeval\">ns_to_timeval</a>(const <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#nsec\">nsec</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#ns_to_timespec\">ns_to_timespec</a>(<a class=\"id\" href=\"#nsec\">nsec</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#tv\">tv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> = (<a class=\"id\" href=\"#suseconds_t\">suseconds_t</a>) <a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> / 1000;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tv\">tv</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ns_to_timeval\">ns_to_timeval</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When we convert to jiffies then we interpret incoming values</span>", 
"<span class=\"comment\"> * the following way:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - negative values mean 'infinite timeout' (MAX_JIFFY_OFFSET)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - 'too large' values [that would result in larger than</span>", 
"<span class=\"comment\"> *   MAX_JIFFY_OFFSET values] mean 'infinite timeout' too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - all other values are converted to jiffies by either multiplying</span>", 
"<span class=\"comment\"> *   the input value by a factor or dividing it with a factor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We must also be careful about 32-bit overflows.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(const unsigned int <a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Negative value, means infinite timeout:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((int)<a class=\"id\" href=\"#m\">m</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a>;", 
"", 
"#if <a class=\"id\" href=\"#HZ\">HZ</a> <= <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> && !(<a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> % <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * HZ is equal to or smaller than 1000, and 1000 is a nice</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * round multiple of HZ, divide with the factor between them,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but round upwards:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#m\">m</a> + (<a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>) - 1) / (<a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> &gt; <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> && !(<a class=\"id\" href=\"#HZ\">HZ</a> % <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * HZ is larger than 1000, and HZ is a nice round multiple of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1000 - simply multiply with the factor between them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But first make sure the multiplication result cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * overflow:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> &gt; <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#m\">m</a> * (<a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Generic case - multiply, round and divide. But first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check that if we are doing a net multiplication, that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we wouldn't overflow:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HZ\">HZ</a> &gt; <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> && <a class=\"id\" href=\"#m\">m</a> &gt; <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#MSEC_TO_HZ_MUL32\">MSEC_TO_HZ_MUL32</a> * <a class=\"id\" href=\"#m\">m</a> + <a class=\"id\" href=\"#MSEC_TO_HZ_ADJ32\">MSEC_TO_HZ_ADJ32</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>>> <a class=\"id\" href=\"#MSEC_TO_HZ_SHR32\">MSEC_TO_HZ_SHR32</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#usecs_to_jiffies\">usecs_to_jiffies</a>(const unsigned int <a class=\"id\" href=\"#u\">u</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#u\">u</a> &gt; <a class=\"id\" href=\"#jiffies_to_usecs\">jiffies_to_usecs</a>(<a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a>;", 
"#if <a class=\"id\" href=\"#HZ\">HZ</a> <= <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a> && !(<a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a> % <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u\">u</a> + (<a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>) - 1) / (<a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> &gt; <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a> && !(<a class=\"id\" href=\"#HZ\">HZ</a> % <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>)", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#u\">u</a> * (<a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>);", 
"#else", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#USEC_TO_HZ_MUL32\">USEC_TO_HZ_MUL32</a> * <a class=\"id\" href=\"#u\">u</a> + <a class=\"id\" href=\"#USEC_TO_HZ_ADJ32\">USEC_TO_HZ_ADJ32</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>>> <a class=\"id\" href=\"#USEC_TO_HZ_SHR32\">USEC_TO_HZ_SHR32</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#usecs_to_jiffies\">usecs_to_jiffies</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The TICK_NSEC - 1 rounds up the value to the next resolution.  Note</span>", 
"<span class=\"comment\"> * that a remainder subtract here would not do the right thing as the</span>", 
"<span class=\"comment\"> * resolution values don't fall on second boundries.  I.e. the line:</span>", 
"<span class=\"comment\"> * nsec -= nsec % TICK_NSEC; is NOT a correct resolution rounding.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Rather, we just shift the bits off the right.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The &gt;&gt; (NSEC_JIFFIE_SC - SEC_JIFFIE_SC) converts the scaled nsec</span>", 
"<span class=\"comment\"> * value to a scaled second value.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long", 
"<a class=\"id\" href=\"#timespec_to_jiffies\">timespec_to_jiffies</a>(const struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sec\">sec</a> = <a class=\"id\" href=\"#value\">value</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nsec\">nsec</a> = <a class=\"id\" href=\"#value\">value</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> + <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a> - 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sec\">sec</a> >= <a class=\"id\" href=\"#MAX_SEC_IN_JIFFIES\">MAX_SEC_IN_JIFFIES</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sec\">sec</a> = <a class=\"id\" href=\"#MAX_SEC_IN_JIFFIES\">MAX_SEC_IN_JIFFIES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return (((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#sec\">sec</a> * <a class=\"id\" href=\"#SEC_CONVERSION\">SEC_CONVERSION</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>(((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#nsec\">nsec</a> * <a class=\"id\" href=\"#NSEC_CONVERSION\">NSEC_CONVERSION</a>) >>", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#NSEC_JIFFIE_SC\">NSEC_JIFFIE_SC</a> - <a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a>))) >> <a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a>;", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#timespec_to_jiffies\">timespec_to_jiffies</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#jiffies_to_timespec\">jiffies_to_timespec</a>(const unsigned long <a class=\"id\" href=\"#jiffies\">jiffies</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Convert jiffies to nanoseconds and separate with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one divide.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#rem\">rem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#div_u64_rem\">div_u64_rem</a>((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#jiffies\">jiffies</a> * <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>, &amp;<a class=\"id\" href=\"#rem\">rem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#rem\">rem</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jiffies_to_timespec\">jiffies_to_timespec</a>);", 
"", 
"<span class=\"comment\">/* Same for \"timeval\"</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Well, almost.  The problem here is that the real system resolution is</span>", 
"<span class=\"comment\"> * in nanoseconds and the value being converted is in micro seconds.</span>", 
"<span class=\"comment\"> * Also for some machines (those that use HZ = 1024, in-particular),</span>", 
"<span class=\"comment\"> * there is a LARGE error in the tick size in microseconds.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * The solution we use is to do the rounding AFTER we convert the</span>", 
"<span class=\"comment\"> * microsecond part.  Thus the USEC_ROUND, the bits to be shifted off.</span>", 
"<span class=\"comment\"> * Instruction wise, this should cost only an additional add with carry</span>", 
"<span class=\"comment\"> * instruction above the way it was done above.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long", 
"<a class=\"id\" href=\"#timeval_to_jiffies\">timeval_to_jiffies</a>(const struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sec\">sec</a> = <a class=\"id\" href=\"#value\">value</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#usec\">usec</a> = <a class=\"id\" href=\"#value\">value</a>-><a class=\"id\" href=\"#tv_usec\">tv_usec</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sec\">sec</a> >= <a class=\"id\" href=\"#MAX_SEC_IN_JIFFIES\">MAX_SEC_IN_JIFFIES</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sec\">sec</a> = <a class=\"id\" href=\"#MAX_SEC_IN_JIFFIES\">MAX_SEC_IN_JIFFIES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usec\">usec</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return (((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#sec\">sec</a> * <a class=\"id\" href=\"#SEC_CONVERSION\">SEC_CONVERSION</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>(((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#usec\">usec</a> * <a class=\"id\" href=\"#USEC_CONVERSION\">USEC_CONVERSION</a> + <a class=\"id\" href=\"#USEC_ROUND\">USEC_ROUND</a>) >>", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#USEC_JIFFIE_SC\">USEC_JIFFIE_SC</a> - <a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a>))) >> <a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#timeval_to_jiffies\">timeval_to_jiffies</a>);", 
"", 
"void <a class=\"id\" href=\"#jiffies_to_timeval\">jiffies_to_timeval</a>(const unsigned long <a class=\"id\" href=\"#jiffies\">jiffies</a>, struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Convert jiffies to nanoseconds and separate with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one divide.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#rem\">rem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#div_u64_rem\">div_u64_rem</a>((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#jiffies\">jiffies</a> * <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>, &amp;<a class=\"id\" href=\"#rem\">rem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a>-><a class=\"id\" href=\"#tv_usec\">tv_usec</a> = <a class=\"id\" href=\"#rem\">rem</a> / <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jiffies_to_timeval\">jiffies_to_timeval</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert jiffies/jiffies_64 to clock_t and back.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#clock_t\">clock_t</a> <a class=\"id\" href=\"#jiffies_to_clock_t\">jiffies_to_clock_t</a>(long <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"#if (<a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a> % (<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>)) == 0", 
"# if <a class=\"id\" href=\"#HZ\">HZ</a> &lt; <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#x\">x</a> * (<a class=\"id\" href=\"#USER_HZ\">USER_HZ</a> / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"# else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#x\">x</a> / (<a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>);", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#x\">x</a> * <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jiffies_to_clock_t\">jiffies_to_clock_t</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#clock_t_to_jiffies\">clock_t_to_jiffies</a>(unsigned long <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"#if (<a class=\"id\" href=\"#HZ\">HZ</a> % <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>)==0", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a> >= ~0UL / (<a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return ~0UL;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#x\">x</a> * (<a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't worry about loss of precision here .. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a> >= ~0UL / <a class=\"id\" href=\"#HZ\">HZ</a> * <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return ~0UL;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* .. but do try to contain it here */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#x\">x</a> * <a class=\"id\" href=\"#HZ\">HZ</a>, <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#clock_t_to_jiffies\">clock_t_to_jiffies</a>);", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#jiffies_64_to_clock_t\">jiffies_64_to_clock_t</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"#if (<a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a> % (<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>)) == 0", 
"# if <a class=\"id\" href=\"#HZ\">HZ</a> &lt; <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#x\">x</a> * <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>, <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"# <a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> &gt; <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#HZ\">HZ</a> / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>);", 
"# else", 
"<span class=\"ts\"/><span class=\"comment\">/* Nothing to do */</span>", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There are better ways that don't overflow early,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but even this doesn't overflow in hundreds of years</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in 64 bits, so..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#x\">x</a> * <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>, (<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#x\">x</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jiffies_64_to_clock_t\">jiffies_64_to_clock_t</a>);", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec_to_clock_t\">nsec_to_clock_t</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"#if (<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> % <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>) == 0", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> (<a class=\"id\" href=\"#USER_HZ\">USER_HZ</a> % 512) == 0", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#x\">x</a> * <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a> / 512, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / 512);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\">         * max relative error 5.7e-8 (1.8s per year) for USER_HZ &lt;= 1024,</span>", 
"<span class=\"comment\">         * overflow after 64.99 years.</span>", 
"<span class=\"comment\">         * exact for HZ=60, 72, 90, 120, 144, 180, 300, 600, 900, ...</span>", 
"<span class=\"comment\">         */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#x\">x</a> * 9, (9ull * <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> + (<a class=\"id\" href=\"#USER_HZ\">USER_HZ</a> / 2)) / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nsecs_to_jiffies - Convert nsecs in u64 to jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/>nsecs in u64</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unlike {m,u}secs_to_jiffies, type of input is not unsigned int but u64.</span>", 
"<span class=\"comment\"> * And this doesn't return MAX_JIFFY_OFFSET since this function is designed</span>", 
"<span class=\"comment\"> * for scheduler, not for use in device drivers to calculate timeout value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * note:</span>", 
"<span class=\"comment\"> *   NSEC_PER_SEC = 10^9 = (5^9 * 2^9) = (1953125 * 512)</span>", 
"<span class=\"comment\"> *   ULLONG_MAX ns = 18446744073.709551615 secs = about 584 years</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#nsecs_to_jiffies\">nsecs_to_jiffies</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"#if (<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> % <a class=\"id\" href=\"#HZ\">HZ</a>) == 0", 
"<span class=\"ts\"/><span class=\"comment\">/* Common case, HZ = 100, 128, 200, 250, 256, 500, 512, 1000 etc. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> (<a class=\"id\" href=\"#HZ\">HZ</a> % 512) == 0", 
"<span class=\"ts\"/><span class=\"comment\">/* overflow after 292 years if HZ = 1024 */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#n\">n</a> * <a class=\"id\" href=\"#HZ\">HZ</a> / 512, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / 512);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Generic case - optimized for cases where HZ is a multiple of 3.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * overflow after 64.99 years, exact for HZ = 60, 72, 90, 120 etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#n\">n</a> * 9, (9ull * <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> + <a class=\"id\" href=\"#HZ\">HZ</a> / 2) / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#if (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> &lt; 64)", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#get_jiffies_64\">get_jiffies_64</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#jiffies_64\">jiffies_64</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_jiffies_64\">get_jiffies_64</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add two timespec values and do a safety check for overflow.</span>", 
"<span class=\"comment\"> * It's assumed that both values are valid (&gt;= 0)</span>", 
"<span class=\"comment\"> */</span>", 
];
xr_frag_insert('l/c0/0e81cc78ba7fcb644000b186626986349420b9.xr', __xr_tmp);
