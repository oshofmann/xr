var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>cn_queue.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2004+ Copyright (c) Evgeniy Polyakov &lt;zbr@ioremap.net&gt;</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#connector\">connector</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This job is sent to the kevent workqueue.</span>", 
"<span class=\"comment\"> * While no event is once sent to any callback, the connector workqueue</span>", 
"<span class=\"comment\"> * is not created to avoid a useless waiting kernel task.</span>", 
"<span class=\"comment\"> * Once the first event is received, we create this dedicated workqueue which</span>", 
"<span class=\"comment\"> * is necessary because the flow of data can be high and we don't want</span>", 
"<span class=\"comment\"> * to encumber keventd with that.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cn_queue_create\">cn_queue_create</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_queue_dev\">cn_queue_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#cn_queue_dev\">cn_queue_dev</a>, <a class=\"id\" href=\"#wq_creation\">wq_creation</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cn_queue\">cn_queue</a> = <a class=\"id\" href=\"#create_singlethread_workqueue\">create_singlethread_workqueue</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* If we fail, we will use keventd for all following connector jobs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cn_queue\">cn_queue</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Queue a data sent to a callback.</span>", 
"<span class=\"comment\"> * If the connector workqueue is already created, we queue the job on it.</span>", 
"<span class=\"comment\"> * Otherwise, we queue the job to kevent and queue the connector workqueue</span>", 
"<span class=\"comment\"> * creation too.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#queue_cn_work\">queue_cn_work</a>(struct <a class=\"id\" href=\"#cn_callback_entry\">cn_callback_entry</a> *<a class=\"id\" href=\"#cbq\">cbq</a>, struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_queue_dev\">cn_queue_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#cbq\">cbq</a>-><a class=\"id\" href=\"#pdev\">pdev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#cn_queue\">cn_queue</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#cn_queue\">cn_queue</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't create the connector workqueue twice */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#wq_requested\">wq_requested</a>) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#wq_creation\">wq_creation</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#wq_requested\">wq_requested</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#schedule_work\">schedule_work</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#cn_queue_wrapper\">cn_queue_wrapper</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_callback_entry\">cn_callback_entry</a> *<a class=\"id\" href=\"#cbq\">cbq</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#cn_callback_entry\">cn_callback_entry</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_callback_data\">cn_callback_data</a> *<a class=\"id\" href=\"#d\">d</a> = &amp;<a class=\"id\" href=\"#cbq\">cbq</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *<a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#NLMSG_DATA\">NLMSG_DATA</a>(<a class=\"id\" href=\"#nlmsg_hdr\">nlmsg_hdr</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlink_skb_parms\">netlink_skb_parms</a> *<a class=\"id\" href=\"#nsp\">nsp</a> = &amp;<a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#callback\">callback</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#nsp\">nsp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#free\">free</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cn_callback_entry\">cn_callback_entry</a> *", 
"<a class=\"id\" href=\"#cn_queue_alloc_callback_entry\">cn_queue_alloc_callback_entry</a>(char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#cb_id\">cb_id</a> *<a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#callback\">callback</a>)(struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *, struct <a class=\"id\" href=\"#netlink_skb_parms\">netlink_skb_parms</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_callback_entry\">cn_callback_entry</a> *<a class=\"id\" href=\"#cbq\">cbq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cbq\">cbq</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#cbq\">cbq</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cbq\">cbq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Failed to create new callback queue.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#cbq\">cbq</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#cbq\">cbq</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#name\">name</a>), \"%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#cbq\">cbq</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#id\">id</a>, sizeof(struct <a class=\"id\" href=\"#cb_id\">cb_id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cbq\">cbq</a>-><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#callback\">callback</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#cbq\">cbq</a>-><a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#cn_queue_wrapper\">cn_queue_wrapper</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cbq\">cbq</a>;", 
"}", 
"", 
];
xr_frag_insert('l/c0/22b4cf88e8a495afd47530e480f4c1191c41c0.xr', __xr_tmp);
