var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PROBE_TEST_FUNC\">PROBE_TEST_FUNC</a><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PROBE_TEST_DATA\">PROBE_TEST_DATA</a><span class=\"ts\"/><span class=\"ts\"/>= 2", 
"};", 
"", 
"static void", 
"<a class=\"id\" href=\"#__unregister_ftrace_function_probe\">__unregister_ftrace_function_probe</a>(char *<a class=\"id\" href=\"#glob\">glob</a>, struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_func_probe\">ftrace_func_probe</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#str\">str</a>[<a class=\"id\" href=\"#KSYM_SYMBOL_LEN\">KSYM_SYMBOL_LEN</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MATCH_FULL\">MATCH_FULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#search\">search</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#glob\">glob</a> && (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#glob\">glob</a>, \"*\") == 0 || !<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#glob\">glob</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#glob\">glob</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#glob\">glob</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#not\">not</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#filter_parse_regex\">filter_parse_regex</a>(<a class=\"id\" href=\"#glob\">glob</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#glob\">glob</a>), &amp;<a class=\"id\" href=\"#search\">search</a>, &amp;<a class=\"id\" href=\"#not\">not</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#search\">search</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we do not support '!' for function probes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#not\">not</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FTRACE_FUNC_HASHSIZE\">FTRACE_FUNC_HASHSIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhd\">hhd</a> = &amp;<a class=\"id\" href=\"#ftrace_func_hash\">ftrace_func_hash</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#hhd\">hhd</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* break up if statements for readability */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PROBE_TEST_FUNC\">PROBE_TEST_FUNC</a>) && <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ops\">ops</a> != <a class=\"id\" href=\"#ops\">ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PROBE_TEST_DATA\">PROBE_TEST_DATA</a>) && <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#data\">data</a> != <a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do this last, since it is the most expensive */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#glob\">glob</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_match\">ftrace_match</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#glob\">glob</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#type\">type</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#ftrace_free_entry_rcu\">ftrace_free_entry_rcu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__disable_ftrace_function_probe\">__disable_ftrace_function_probe</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#unregister_ftrace_function_probe\">unregister_ftrace_function_probe</a>(char *<a class=\"id\" href=\"#glob\">glob</a>, struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unregister_ftrace_function_probe\">__unregister_ftrace_function_probe</a>(<a class=\"id\" href=\"#glob\">glob</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#PROBE_TEST_FUNC\">PROBE_TEST_FUNC</a> | <a class=\"id\" href=\"#PROBE_TEST_DATA\">PROBE_TEST_DATA</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#unregister_ftrace_function_probe_func\">unregister_ftrace_function_probe_func</a>(char *<a class=\"id\" href=\"#glob\">glob</a>, struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unregister_ftrace_function_probe\">__unregister_ftrace_function_probe</a>(<a class=\"id\" href=\"#glob\">glob</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#PROBE_TEST_FUNC\">PROBE_TEST_FUNC</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#unregister_ftrace_function_probe_all\">unregister_ftrace_function_probe_all</a>(char *<a class=\"id\" href=\"#glob\">glob</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unregister_ftrace_function_probe\">__unregister_ftrace_function_probe</a>(<a class=\"id\" href=\"#glob\">glob</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#ftrace_commands\">ftrace_commands</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#ftrace_cmd_mutex\">ftrace_cmd_mutex</a>);", 
"", 
"int <a class=\"id\" href=\"#register_ftrace_command\">register_ftrace_command</a>(struct <a class=\"id\" href=\"#ftrace_func_command\">ftrace_func_command</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_func_command\">ftrace_func_command</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_cmd_mutex\">ftrace_cmd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#ftrace_commands\">ftrace_commands</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#name\">name</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ftrace_commands\">ftrace_commands</a>);", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_cmd_mutex\">ftrace_cmd_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#unregister_ftrace_command\">unregister_ftrace_command</a>(struct <a class=\"id\" href=\"#ftrace_func_command\">ftrace_func_command</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_func_command\">ftrace_func_command</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_cmd_mutex\">ftrace_cmd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#ftrace_commands\">ftrace_commands</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#name\">name</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_cmd_mutex\">ftrace_cmd_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ftrace_process_regex\">ftrace_process_regex</a>(char *<a class=\"id\" href=\"#buff\">buff</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#func\">func</a>, *<a class=\"id\" href=\"#command\">command</a>, *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#buff\">buff</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_func_command\">ftrace_func_command</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, \":\");", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_match_records\">ftrace_match_records</a>(<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#enable\">enable</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* command found */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, \":\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_cmd_mutex\">ftrace_cmd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#ftrace_commands\">ftrace_commands</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#command\">command</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#enable\">enable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_cmd_mutex\">ftrace_cmd_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ftrace_regex_write\">ftrace_regex_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_parser\">trace_parser</a> *<a class=\"id\" href=\"#parser\">parser</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#read\">read</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_regex_lock\">ftrace_regex_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#parser\">parser</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#trace_get_user\">trace_get_user</a>(<a class=\"id\" href=\"#parser\">parser</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read\">read</a> >= 0 && <a class=\"id\" href=\"#trace_parser_loaded\">trace_parser_loaded</a>(<a class=\"id\" href=\"#parser\">parser</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#trace_parser_cont\">trace_parser_cont</a>(<a class=\"id\" href=\"#parser\">parser</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_process_regex\">ftrace_process_regex</a>(<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#enable\">enable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_parser_clear\">trace_parser_clear</a>(<a class=\"id\" href=\"#parser\">parser</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#read\">read</a>;", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_regex_lock\">ftrace_regex_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ftrace_filter_write\">ftrace_filter_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_regex_write\">ftrace_regex_write</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, 1);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ftrace_notrace_write\">ftrace_notrace_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_regex_write\">ftrace_regex_write</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, 0);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#ftrace_set_regex\">ftrace_set_regex</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#reset\">reset</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_regex_lock\">ftrace_regex_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reset\">reset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_filter_reset\">ftrace_filter_reset</a>(<a class=\"id\" href=\"#enable\">enable</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_match_records\">ftrace_match_records</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#enable\">enable</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_regex_lock\">ftrace_regex_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ftrace_set_filter - set a function to filter on in ftrace</span>", 
"<span class=\"comment\"> * @buf - the string that holds the function filter text.</span>", 
"<span class=\"comment\"> * @len - the length of the string.</span>", 
"<span class=\"comment\"> * @reset - non zero to reset all filters before applying this filter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Filters denote which functions should be enabled when tracing is enabled.</span>", 
"<span class=\"comment\"> * If @buf is NULL and reset is set, all functions will be enabled for tracing.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ftrace_set_filter\">ftrace_set_filter</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#reset\">reset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_set_regex\">ftrace_set_regex</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#reset\">reset</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ftrace_set_notrace - set a function to not trace in ftrace</span>", 
"<span class=\"comment\"> * @buf - the string that holds the function notrace text.</span>", 
"<span class=\"comment\"> * @len - the length of the string.</span>", 
"<span class=\"comment\"> * @reset - non zero to reset all filters before applying this filter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notrace Filters denote which functions should not be enabled when tracing</span>", 
"<span class=\"comment\"> * is enabled. If @buf is NULL and reset is set, all functions will be enabled</span>", 
"<span class=\"comment\"> * for tracing.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ftrace_set_notrace\">ftrace_set_notrace</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#reset\">reset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_set_regex\">ftrace_set_regex</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#reset\">reset</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * command line interface to allow users to set filters on boot up.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTRACE_FILTER_SIZE\">FTRACE_FILTER_SIZE</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#COMMAND_LINE_SIZE\">COMMAND_LINE_SIZE</a>", 
"static char <a class=\"id\" href=\"#ftrace_notrace_buf\">ftrace_notrace_buf</a>[<a class=\"id\" href=\"#FTRACE_FILTER_SIZE\">FTRACE_FILTER_SIZE</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static char <a class=\"id\" href=\"#ftrace_filter_buf\">ftrace_filter_buf</a>[<a class=\"id\" href=\"#FTRACE_FILTER_SIZE\">FTRACE_FILTER_SIZE</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_ftrace_notrace\">set_ftrace_notrace</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#ftrace_notrace_buf\">ftrace_notrace_buf</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#FTRACE_FILTER_SIZE\">FTRACE_FILTER_SIZE</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"ftrace_notrace=\", <a class=\"id\" href=\"#set_ftrace_notrace\">set_ftrace_notrace</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_ftrace_filter\">set_ftrace_filter</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#ftrace_filter_buf\">ftrace_filter_buf</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#FTRACE_FILTER_SIZE\">FTRACE_FILTER_SIZE</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"ftrace_filter=\", <a class=\"id\" href=\"#set_ftrace_filter\">set_ftrace_filter</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"static char <a class=\"id\" href=\"#ftrace_graph_buf\">ftrace_graph_buf</a>[<a class=\"id\" href=\"#FTRACE_FILTER_SIZE\">FTRACE_FILTER_SIZE</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static int <a class=\"id\" href=\"#ftrace_set_func\">ftrace_set_func</a>(unsigned long *<a class=\"id\" href=\"#array\">array</a>, int *<a class=\"id\" href=\"#idx\">idx</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_graph_function\">set_graph_function</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#ftrace_graph_buf\">ftrace_graph_buf</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#FTRACE_FILTER_SIZE\">FTRACE_FILTER_SIZE</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"ftrace_graph_filter=\", <a class=\"id\" href=\"#set_graph_function\">set_graph_function</a>);", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_ftrace_early_graph\">set_ftrace_early_graph</a>(char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#func\">func</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>, \",\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we allow only one expression at a time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_set_func\">ftrace_set_func</a>(<a class=\"id\" href=\"#ftrace_graph_funcs\">ftrace_graph_funcs</a>, &amp;<a class=\"id\" href=\"#ftrace_graph_count\">ftrace_graph_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"ftrace: function %s not \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"traceable\\n\", <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FUNCTION_GRAPH_TRACER */</span>", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_ftrace_early_filter\">set_ftrace_early_filter</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#func\">func</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>, \",\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_set_regex\">ftrace_set_regex</a>(<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#func\">func</a>), 0, <a class=\"id\" href=\"#enable\">enable</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_ftrace_early_filters\">set_ftrace_early_filters</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_filter_buf\">ftrace_filter_buf</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_early_filter\">set_ftrace_early_filter</a>(<a class=\"id\" href=\"#ftrace_filter_buf\">ftrace_filter_buf</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_notrace_buf\">ftrace_notrace_buf</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_early_filter\">set_ftrace_early_filter</a>(<a class=\"id\" href=\"#ftrace_notrace_buf\">ftrace_notrace_buf</a>, 0);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_graph_buf\">ftrace_graph_buf</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_early_graph\">set_ftrace_early_graph</a>(<a class=\"id\" href=\"#ftrace_graph_buf\">ftrace_graph_buf</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FUNCTION_GRAPH_TRACER */</span>", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_regex_release\">ftrace_regex_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = (struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_parser\">trace_parser</a> *<a class=\"id\" href=\"#parser\">parser</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_regex_lock\">ftrace_regex_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_release\">seq_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#parser\">parser</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_parser_loaded\">trace_parser_loaded</a>(<a class=\"id\" href=\"#parser\">parser</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#idx\">idx</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_match_records\">ftrace_match_records</a>(<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#enable\">enable</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_start_up\">ftrace_start_up</a> && <a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_run_update_code\">ftrace_run_update_code</a>(<a class=\"id\" href=\"#FTRACE_ENABLE_CALLS\">FTRACE_ENABLE_CALLS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_parser_put\">trace_parser_put</a>(<a class=\"id\" href=\"#parser\">parser</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_regex_lock\">ftrace_regex_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_filter_release\">ftrace_filter_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_regex_release\">ftrace_regex_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>, 1);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_notrace_release\">ftrace_notrace_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_regex_release\">ftrace_regex_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>, 0);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ftrace_avail_fops\">ftrace_avail_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#ftrace_avail_open\">ftrace_avail_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#seq_release_private\">seq_release_private</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ftrace_failures_fops\">ftrace_failures_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#ftrace_failures_open\">ftrace_failures_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#seq_release_private\">seq_release_private</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ftrace_filter_fops\">ftrace_filter_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#ftrace_filter_open\">ftrace_filter_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#ftrace_filter_write\">ftrace_filter_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> = <a class=\"id\" href=\"#no_llseek\">no_llseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#ftrace_filter_release\">ftrace_filter_release</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ftrace_notrace_fops\">ftrace_notrace_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#ftrace_notrace_open\">ftrace_notrace_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#ftrace_notrace_write\">ftrace_notrace_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> = <a class=\"id\" href=\"#ftrace_regex_lseek\">ftrace_regex_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#ftrace_notrace_release\">ftrace_notrace_release</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#graph_lock\">graph_lock</a>);", 
"", 
"int <a class=\"id\" href=\"#ftrace_graph_count\">ftrace_graph_count</a>;", 
"int <a class=\"id\" href=\"#ftrace_graph_filter_enabled\">ftrace_graph_filter_enabled</a>;", 
"unsigned long <a class=\"id\" href=\"#ftrace_graph_funcs\">ftrace_graph_funcs</a>[<a class=\"id\" href=\"#FTRACE_GRAPH_MAX_FUNCS\">FTRACE_GRAPH_MAX_FUNCS</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void *", 
"<a class=\"id\" href=\"#__g_next\">__g_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> >= <a class=\"id\" href=\"#ftrace_graph_count\">ftrace_graph_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#ftrace_graph_funcs\">ftrace_graph_funcs</a>[*<a class=\"id\" href=\"#pos\">pos</a>];", 
"}", 
"", 
"static void *", 
"<a class=\"id\" href=\"#g_next\">g_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#pos\">pos</a>)++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__g_next\">__g_next</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#g_start\">g_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
];
xr_frag_insert('l/c0/34377ec5343510c3d9971b4db5ac9eeb408139.xr', __xr_tmp);
