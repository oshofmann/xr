var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (c) 2003-2006, Cluster File Systems, Inc, info@clusterfs.com</span>", 
"<span class=\"comment\"> * Written by Alex Tomas &lt;alex@clusterfs.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License version 2 as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public Licens</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mballoc.c contains the multiblocks allocation routines</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"mballoc.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#ext4\">ext4</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * MUSTDO:</span>", 
"<span class=\"comment\"> *   - test ext4_ext_search_left() and ext4_ext_search_right()</span>", 
"<span class=\"comment\"> *   - search for metadata in few groups</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO v4:</span>", 
"<span class=\"comment\"> *   - normalization should take into account whether file is still open</span>", 
"<span class=\"comment\"> *   - discard preallocations if no free space left (policy?)</span>", 
"<span class=\"comment\"> *   - don't normalize tails</span>", 
"<span class=\"comment\"> *   - quota</span>", 
"<span class=\"comment\"> *   - reservation for superuser</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO v3:</span>", 
"<span class=\"comment\"> *   - bitmap read-ahead (proposed by Oleg Drokin aka green)</span>", 
"<span class=\"comment\"> *   - track min/max extents in each group for better group selection</span>", 
"<span class=\"comment\"> *   - mb_mark_used() may allocate chunk right after splitting buddy</span>", 
"<span class=\"comment\"> *   - tree of groups sorted by number of free blocks</span>", 
"<span class=\"comment\"> *   - error handling</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The allocation request involve request for multiple number of blocks</span>", 
"<span class=\"comment\"> * near to the goal(block) value specified.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * During initialization phase of the allocator we decide to use the</span>", 
"<span class=\"comment\"> * group preallocation or inode preallocation depending on the size of</span>", 
"<span class=\"comment\"> * the file. The size of the file could be the resulting file size we</span>", 
"<span class=\"comment\"> * would have after allocation, or the current file size, which ever</span>", 
"<span class=\"comment\"> * is larger. If the size is less than sbi-&gt;s_mb_stream_request we</span>", 
"<span class=\"comment\"> * select to use the group preallocation. The default value of</span>", 
"<span class=\"comment\"> * s_mb_stream_request is 16 blocks. This can also be tuned via</span>", 
"<span class=\"comment\"> * /sys/fs/ext4/&lt;partition&gt;/mb_stream_req. The value is represented in</span>", 
"<span class=\"comment\"> * terms of number of blocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The main motivation for having small file use group preallocation is to</span>", 
"<span class=\"comment\"> * ensure that we have small files closer together on the disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * First stage the allocator looks at the inode prealloc list,</span>", 
"<span class=\"comment\"> * ext4_inode_info-&gt;i_prealloc_list, which contains list of prealloc</span>", 
"<span class=\"comment\"> * spaces for this particular inode. The inode prealloc space is</span>", 
"<span class=\"comment\"> * represented as:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * pa_lstart -&gt; the logical start block for this prealloc space</span>", 
"<span class=\"comment\"> * pa_pstart -&gt; the physical start block for this prealloc space</span>", 
"<span class=\"comment\"> * pa_len    -&gt; length for this prealloc space</span>", 
"<span class=\"comment\"> * pa_free   -&gt;  free space available in this prealloc space</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The inode preallocation space is used looking at the _logical_ start</span>", 
"<span class=\"comment\"> * block. If only the logical file block falls within the range of prealloc</span>", 
"<span class=\"comment\"> * space we will consume the particular prealloc space. This make sure that</span>", 
"<span class=\"comment\"> * that the we have contiguous physical blocks representing the file blocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The important thing to be noted in case of inode prealloc space is that</span>", 
"<span class=\"comment\"> * we don't modify the values associated to inode prealloc space except</span>", 
"<span class=\"comment\"> * pa_free.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we are not able to find blocks in the inode prealloc space and if we</span>", 
"<span class=\"comment\"> * have the group allocation flag set then we look at the locality group</span>", 
"<span class=\"comment\"> * prealloc space. These are per CPU prealloc list repreasented as</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ext4_sb_info.s_locality_groups[smp_processor_id()]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The reason for having a per cpu locality group is to reduce the contention</span>", 
"<span class=\"comment\"> * between CPUs. It is possible to get scheduled at this point.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The locality group prealloc space is used looking at whether we have</span>", 
"<span class=\"comment\"> * enough free space (pa_free) withing the prealloc space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we can't allocate blocks via inode prealloc or/and locality group</span>", 
"<span class=\"comment\"> * prealloc then we look at the buddy cache. The buddy cache is represented</span>", 
"<span class=\"comment\"> * by ext4_sb_info.s_buddy_cache (struct inode) whose file offset gets</span>", 
"<span class=\"comment\"> * mapped to the buddy and bitmap information regarding different</span>", 
"<span class=\"comment\"> * groups. The buddy information is attached to buddy cache inode so that</span>", 
"<span class=\"comment\"> * we can access them through the page cache. The information regarding</span>", 
"<span class=\"comment\"> * each group is loaded via ext4_mb_load_buddy.  The information involve</span>", 
"<span class=\"comment\"> * block bitmap and buddy information. The information are stored in the</span>", 
"<span class=\"comment\"> * inode as:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  {                        page                        }</span>", 
"<span class=\"comment\"> *  [ group 0 bitmap][ group 0 buddy] [group 1][ group 1]...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * one block each for bitmap and buddy information.  So for each group we</span>", 
"<span class=\"comment\"> * take up 2 blocks. A page can contain blocks_per_page (PAGE_CACHE_SIZE /</span>", 
"<span class=\"comment\"> * blocksize) blocks.  So it can have information regarding groups_per_page</span>", 
"<span class=\"comment\"> * which is blocks_per_page/2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The buddy cache inode is not stored on disk. The inode is thrown</span>", 
"<span class=\"comment\"> * away when the filesystem is unmounted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We look for count number of blocks in the buddy cache. If we were able</span>", 
"<span class=\"comment\"> * to locate that many free blocks we return with additional information</span>", 
"<span class=\"comment\"> * regarding rest of the contiguous physical block available</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Before allocating blocks via buddy cache we normalize the request</span>", 
"<span class=\"comment\"> * blocks. This ensure we ask for more blocks that we needed. The extra</span>", 
"<span class=\"comment\"> * blocks that we get after allocation is added to the respective prealloc</span>", 
"<span class=\"comment\"> * list. In case of inode preallocation we follow a list of heuristics</span>", 
"<span class=\"comment\"> * based on file size. This can be found in ext4_mb_normalize_request. If</span>", 
"<span class=\"comment\"> * we are doing a group prealloc we try to normalize the request to</span>", 
"<span class=\"comment\"> * sbi-&gt;s_mb_group_prealloc. Default value of s_mb_group_prealloc is</span>", 
"<span class=\"comment\"> * 512 blocks. This can be tuned via</span>", 
"<span class=\"comment\"> * /sys/fs/ext4/&lt;partition/mb_group_prealloc. The value is represented in</span>", 
"<span class=\"comment\"> * terms of number of blocks. If we have mounted the file system with -O</span>", 
"<span class=\"comment\"> * stripe=&lt;value&gt; option the group prealloc request is normalized to the</span>", 
"<span class=\"comment\"> * stripe value (sbi-&gt;s_stripe)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The regular allocator(using the buddy cache) supports few tunables.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * /sys/fs/ext4/&lt;partition&gt;/mb_min_to_scan</span>", 
"<span class=\"comment\"> * /sys/fs/ext4/&lt;partition&gt;/mb_max_to_scan</span>", 
"<span class=\"comment\"> * /sys/fs/ext4/&lt;partition&gt;/mb_order2_req</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The regular allocator uses buddy scan only if the request len is power of</span>", 
"<span class=\"comment\"> * 2 blocks and the order of allocation is &gt;= sbi-&gt;s_mb_order2_reqs. The</span>", 
"<span class=\"comment\"> * value of s_mb_order2_reqs can be tuned via</span>", 
"<span class=\"comment\"> * /sys/fs/ext4/&lt;partition&gt;/mb_order2_req.  If the request len is equal to</span>", 
"<span class=\"comment\"> * stripe size (sbi-&gt;s_stripe), we try to search for contiguous block in</span>", 
"<span class=\"comment\"> * stripe size. This should result in better allocation on RAID setups. If</span>", 
"<span class=\"comment\"> * not, we search in the specific group using bitmap for best extents. The</span>", 
"<span class=\"comment\"> * tunable min_to_scan and max_to_scan control the behaviour here.</span>", 
"<span class=\"comment\"> * min_to_scan indicate how long the mballoc __must__ look for a best</span>", 
"<span class=\"comment\"> * extent and max_to_scan indicates how long the mballoc __can__ look for a</span>", 
"<span class=\"comment\"> * best extent in the found extents. Searching for the blocks starts with</span>", 
"<span class=\"comment\"> * the group specified as the goal value in allocation context via</span>", 
"<span class=\"comment\"> * ac_g_ex. Each group is first checked based on the criteria whether it</span>", 
"<span class=\"comment\"> * can used for allocation. ext4_mb_good_group explains how the groups are</span>", 
"<span class=\"comment\"> * checked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Both the prealloc space are getting populated as above. So for the first</span>", 
"<span class=\"comment\"> * request we will hit the buddy cache which will result in this prealloc</span>", 
"<span class=\"comment\"> * space getting filled. The prealloc space is then later used for the</span>", 
"<span class=\"comment\"> * subsequent request.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mballoc operates on the following data:</span>", 
"<span class=\"comment\"> *  - on-disk bitmap</span>", 
"<span class=\"comment\"> *  - in-core buddy (actually includes buddy and bitmap)</span>", 
"<span class=\"comment\"> *  - preallocation descriptors (PAs)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * there are two types of preallocations:</span>", 
"<span class=\"comment\"> *  - inode</span>", 
"<span class=\"comment\"> *    assiged to specific inode and can be used for this inode only.</span>", 
"<span class=\"comment\"> *    it describes part of inode's space preallocated to specific</span>", 
"<span class=\"comment\"> *    physical blocks. any block from that preallocated can be used</span>", 
"<span class=\"comment\"> *    independent. the descriptor just tracks number of blocks left</span>", 
"<span class=\"comment\"> *    unused. so, before taking some block from descriptor, one must</span>", 
"<span class=\"comment\"> *    make sure corresponded logical block isn't allocated yet. this</span>", 
"<span class=\"comment\"> *    also means that freeing any block within descriptor's range</span>", 
"<span class=\"comment\"> *    must discard all preallocated blocks.</span>", 
"<span class=\"comment\"> *  - locality group</span>", 
"<span class=\"comment\"> *    assigned to specific locality group which does not translate to</span>", 
"<span class=\"comment\"> *    permanent set of inodes: inode can join and leave group. space</span>", 
"<span class=\"comment\"> *    from this type of preallocation can be used for any inode. thus</span>", 
"<span class=\"comment\"> *    it's consumed from the beginning to the end.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * relation between them can be expressed as:</span>", 
"<span class=\"comment\"> *    in-core buddy = on-disk bitmap + preallocation descriptors</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this mean blocks mballoc considers used are:</span>", 
"<span class=\"comment\"> *  - allocated blocks (persistent)</span>", 
"<span class=\"comment\"> *  - preallocated blocks (non-persistent)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * consistency in mballoc world means that at any time a block is either</span>", 
"<span class=\"comment\"> * free or used in ALL structures. notice: \"any time\" should not be read</span>", 
"<span class=\"comment\"> * literally -- time is discrete and delimited by locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  to keep it simple, we don't use block numbers, instead we count number of</span>", 
"<span class=\"comment\"> *  blocks: how many blocks marked used/free in on-disk bitmap, buddy and PA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * all operations can be expressed as:</span>", 
"<span class=\"comment\"> *  - init buddy:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>buddy = on-disk + PAs</span>", 
"<span class=\"comment\"> *  - new PA:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>buddy += N; PA = N</span>", 
"<span class=\"comment\"> *  - use inode PA:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>on-disk += N; PA -= N</span>", 
"<span class=\"comment\"> *  - discard inode PA<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>buddy -= on-disk - PA; PA = 0</span>", 
"<span class=\"comment\"> *  - use locality group PA<span class=\"ts\"/><span class=\"ts\"/>on-disk += N; PA -= N</span>", 
"<span class=\"comment\"> *  - discard locality group PA<span class=\"ts\"/><span class=\"ts\"/>buddy -= PA; PA = 0</span>", 
"<span class=\"comment\"> *  note: 'buddy -= on-disk - PA' is used to show that on-disk bitmap</span>", 
"<span class=\"comment\"> *        is used in real operation because we can't know actual used</span>", 
"<span class=\"comment\"> *        bits from PA, only from on-disk bitmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * if we follow this strict logic, then all operations above should be atomic.</span>", 
"<span class=\"comment\"> * given some of them can block, we'd have to use something like semaphores</span>", 
"<span class=\"comment\"> * killing performance on high-end SMP hardware. let's try to relax it using</span>", 
"<span class=\"comment\"> * the following knowledge:</span>", 
"<span class=\"comment\"> *  1) if buddy is referenced, it's already initialized</span>", 
"<span class=\"comment\"> *  2) while block is used in buddy and the buddy is referenced,</span>", 
"<span class=\"comment\"> *     nobody can re-allocate that block</span>", 
"<span class=\"comment\"> *  3) we work on bitmaps and '+' actually means 'set bits'. if on-disk has</span>", 
"<span class=\"comment\"> *     bit set and PA claims same block, it's OK. IOW, one can set bit in</span>", 
"<span class=\"comment\"> *     on-disk bitmap if buddy has same bit set or/and PA covers corresponded</span>", 
"<span class=\"comment\"> *     block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * so, now we're building a concurrency table:</span>", 
"<span class=\"comment\"> *  - init buddy vs.</span>", 
"<span class=\"comment\"> *    - new PA</span>", 
"<span class=\"comment\"> *      blocks for PA are allocated in the buddy, buddy must be referenced</span>", 
"<span class=\"comment\"> *      until PA is linked to allocation group to avoid concurrent buddy init</span>", 
"<span class=\"comment\"> *    - use inode PA</span>", 
"<span class=\"comment\"> *      we need to make sure that either on-disk bitmap or PA has uptodate data</span>", 
"<span class=\"comment\"> *      given (3) we care that PA-=N operation doesn't interfere with init</span>", 
"<span class=\"comment\"> *    - discard inode PA</span>", 
"<span class=\"comment\"> *      the simplest way would be to have buddy initialized by the discard</span>", 
"<span class=\"comment\"> *    - use locality group PA</span>", 
"<span class=\"comment\"> *      again PA-=N must be serialized with init</span>", 
"<span class=\"comment\"> *    - discard locality group PA</span>", 
"<span class=\"comment\"> *      the simplest way would be to have buddy initialized by the discard</span>", 
"<span class=\"comment\"> *  - new PA vs.</span>", 
"<span class=\"comment\"> *    - use inode PA</span>", 
"<span class=\"comment\"> *      i_data_sem serializes them</span>", 
"<span class=\"comment\"> *    - discard inode PA</span>", 
"<span class=\"comment\"> *      discard process must wait until PA isn't used by another process</span>", 
"<span class=\"comment\"> *    - use locality group PA</span>", 
"<span class=\"comment\"> *      some mutex should serialize them</span>", 
"<span class=\"comment\"> *    - discard locality group PA</span>", 
"<span class=\"comment\"> *      discard process must wait until PA isn't used by another process</span>", 
"<span class=\"comment\"> *  - use inode PA</span>", 
"<span class=\"comment\"> *    - use inode PA</span>", 
"<span class=\"comment\"> *      i_data_sem or another mutex should serializes them</span>", 
"<span class=\"comment\"> *    - discard inode PA</span>", 
"<span class=\"comment\"> *      discard process must wait until PA isn't used by another process</span>", 
"<span class=\"comment\"> *    - use locality group PA</span>", 
"<span class=\"comment\"> *      nothing wrong here -- they're different PAs covering different blocks</span>", 
"<span class=\"comment\"> *    - discard locality group PA</span>", 
"<span class=\"comment\"> *      discard process must wait until PA isn't used by another process</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * now we're ready to make few consequences:</span>", 
"<span class=\"comment\"> *  - PA is referenced and while it is no discard is possible</span>", 
"<span class=\"comment\"> *  - PA is referenced until block isn't marked in on-disk bitmap</span>", 
"<span class=\"comment\"> *  - PA changes only after on-disk bitmap</span>", 
"<span class=\"comment\"> *  - discard must not compete with init. either init is done before</span>", 
"<span class=\"comment\"> *    any discard or they're serialized somehow</span>", 
"<span class=\"comment\"> *  - buddy init as sum of on-disk bitmap and PAs is done atomically</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * a special case when we've used PA to emptiness. no need to modify buddy</span>", 
"<span class=\"comment\"> * in this case, but we should care about concurrent init</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
" <span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Logic in few words:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - allocation:</span>", 
"<span class=\"comment\"> *    load group</span>", 
"<span class=\"comment\"> *    find blocks</span>", 
"<span class=\"comment\"> *    mark bits in on-disk bitmap</span>", 
"<span class=\"comment\"> *    release group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - use preallocation:</span>", 
"<span class=\"comment\"> *    find proper PA (per-inode or group)</span>", 
"<span class=\"comment\"> *    load group</span>", 
"<span class=\"comment\"> *    mark bits in on-disk bitmap</span>", 
"<span class=\"comment\"> *    release group</span>", 
"<span class=\"comment\"> *    release PA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - free:</span>", 
"<span class=\"comment\"> *    load group</span>", 
"<span class=\"comment\"> *    mark bits in on-disk bitmap</span>", 
"<span class=\"comment\"> *    release group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - discard preallocations in group:</span>", 
"<span class=\"comment\"> *    mark PAs deleted</span>", 
"<span class=\"comment\"> *    move them onto local list</span>", 
"<span class=\"comment\"> *    load on-disk bitmap</span>", 
"<span class=\"comment\"> *    load group</span>", 
"<span class=\"comment\"> *    remove PA from object (inode or locality group)</span>", 
"<span class=\"comment\"> *    mark free blocks in-core</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - discard inode's preallocations:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locking rules</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locks:</span>", 
"<span class=\"comment\"> *  - bitlock on a group<span class=\"ts\"/>(group)</span>", 
"<span class=\"comment\"> *  - object (inode/locality)<span class=\"ts\"/>(object)</span>", 
"<span class=\"comment\"> *  - per-pa lock<span class=\"ts\"/><span class=\"ts\"/>(pa)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Paths:</span>", 
"<span class=\"comment\"> *  - new pa</span>", 
"<span class=\"comment\"> *    object</span>", 
"<span class=\"comment\"> *    group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - find and use pa:</span>", 
"<span class=\"comment\"> *    pa</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - release consumed pa:</span>", 
"<span class=\"comment\"> *    pa</span>", 
"<span class=\"comment\"> *    group</span>", 
"<span class=\"comment\"> *    object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - generate in-core bitmap:</span>", 
"<span class=\"comment\"> *    group</span>", 
"<span class=\"comment\"> *        pa</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - discard all for given object (inode, locality group):</span>", 
"<span class=\"comment\"> *    object</span>", 
"<span class=\"comment\"> *        pa</span>", 
"<span class=\"comment\"> *    group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - discard all for given group:</span>", 
"<span class=\"comment\"> *    group</span>", 
"<span class=\"comment\"> *        pa</span>", 
"<span class=\"comment\"> *    group</span>", 
"<span class=\"comment\"> *        object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#ext4_free_ext_cachep\">ext4_free_ext_cachep</a>;", 
"static void <a class=\"id\" href=\"#ext4_mb_generate_from_pa\">ext4_mb_generate_from_pa</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#bitmap\">bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>);", 
"static void <a class=\"id\" href=\"#ext4_mb_generate_from_freelist\">ext4_mb_generate_from_freelist</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#bitmap\">bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>);", 
"static void <a class=\"id\" href=\"#release_blocks_on_commit\">release_blocks_on_commit</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#txn\">txn</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#mb_correct_addr_and_bit\">mb_correct_addr_and_bit</a>(int *<a class=\"id\" href=\"#bit\">bit</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#bit\">bit</a> += ((unsigned long) <a class=\"id\" href=\"#addr\">addr</a> &amp; 7UL) << 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (void *) ((unsigned long) <a class=\"id\" href=\"#addr\">addr</a> &amp; ~7UL);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#bit\">bit</a> += ((unsigned long) <a class=\"id\" href=\"#addr\">addr</a> &amp; 3UL) << 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (void *) ((unsigned long) <a class=\"id\" href=\"#addr\">addr</a> &amp; ~3UL);", 
"#else", 
"#<a class=\"id\" href=\"#error\">error</a> \"how many bits you are?!\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(int <a class=\"id\" href=\"#bit\">bit</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext4_test_bit on architecture like powerpc</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * needs unsigned long aligned address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mb_correct_addr_and_bit\">mb_correct_addr_and_bit</a>(&amp;<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_test_bit\">ext4_test_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mb_set_bit\">mb_set_bit</a>(int <a class=\"id\" href=\"#bit\">bit</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mb_correct_addr_and_bit\">mb_correct_addr_and_bit</a>(&amp;<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_set_bit\">ext4_set_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mb_clear_bit\">mb_clear_bit</a>(int <a class=\"id\" href=\"#bit\">bit</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mb_correct_addr_and_bit\">mb_correct_addr_and_bit</a>(&amp;<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_bit\">ext4_clear_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mb_find_next_zero_bit\">mb_find_next_zero_bit</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#max\">max</a>, int <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fix\">fix</a> = 0, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#tmpmax\">tmpmax</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mb_correct_addr_and_bit\">mb_correct_addr_and_bit</a>(&amp;<a class=\"id\" href=\"#fix\">fix</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmpmax\">tmpmax</a> = <a class=\"id\" href=\"#max\">max</a> + <a class=\"id\" href=\"#fix\">fix</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#fix\">fix</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_find_next_zero_bit\">ext4_find_next_zero_bit</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#tmpmax\">tmpmax</a>, <a class=\"id\" href=\"#start\">start</a>) - <a class=\"id\" href=\"#fix\">fix</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mb_find_next_bit\">mb_find_next_bit</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#max\">max</a>, int <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fix\">fix</a> = 0, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#tmpmax\">tmpmax</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mb_correct_addr_and_bit\">mb_correct_addr_and_bit</a>(&amp;<a class=\"id\" href=\"#fix\">fix</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmpmax\">tmpmax</a> = <a class=\"id\" href=\"#max\">max</a> + <a class=\"id\" href=\"#fix\">fix</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#fix\">fix</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_find_next_bit\">ext4_find_next_bit</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#tmpmax\">tmpmax</a>, <a class=\"id\" href=\"#start\">start</a>) - <a class=\"id\" href=\"#fix\">fix</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, int <a class=\"id\" href=\"#order\">order</a>, int *<a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#bb\">bb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>) == <a class=\"id\" href=\"#EXT4_MB_BUDDY\">EXT4_MB_BUDDY</a>(<a class=\"id\" href=\"#e4b\">e4b</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#max\">max</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &gt; <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_blkbits\">bd_blkbits</a> + 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#max\">max</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* at order 0 we see each particular block */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#max\">max</a> = 1 << (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_blkbits\">bd_blkbits</a> + 3);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a> = <a class=\"id\" href=\"#EXT4_MB_BUDDY\">EXT4_MB_BUDDY</a>(<a class=\"id\" href=\"#e4b\">e4b</a>) + <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>)-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a>[<a class=\"id\" href=\"#order\">order</a>];", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>)-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a>[<a class=\"id\" href=\"#order\">order</a>];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bb\">bb</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DOUBLE_CHECK\">DOUBLE_CHECK</a>", 
"static void <a class=\"id\" href=\"#mb_free_blocks_double\">mb_free_blocks_double</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#first\">first</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(<a class=\"id\" href=\"#ext4_group_lock_ptr\">ext4_group_lock_ptr</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#blocknr\">blocknr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocknr\">blocknr</a> = <a class=\"id\" href=\"#ext4_group_first_block_no\">ext4_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocknr\">blocknr</a> += <a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_grp_locked_error\">ext4_grp_locked_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#inode\">inode</a> ? <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> : 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#blocknr\">blocknr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"freeing block already freed \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"(bit %u)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_clear_bit\">mb_clear_bit</a>(<a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mb_mark_used_double\">mb_mark_used_double</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, int <a class=\"id\" href=\"#first\">first</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(<a class=\"id\" href=\"#ext4_group_lock_ptr\">ext4_group_lock_ptr</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bit\">mb_set_bit</a>(<a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mb_cmp_bitmaps\">mb_cmp_bitmaps</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, void *<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#b1\">b1</a>, *<a class=\"id\" href=\"#b2\">b2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b1\">b1</a> = (unsigned char *) <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b2\">b2</a> = (unsigned char *) <a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b1\">b1</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#b2\">b2</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"corruption in group %u \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"at byte %u(%u): %x in copy != %x \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"on disk/prealloc\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#i\">i</a> * 8, <a class=\"id\" href=\"#b1\">b1</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#b2\">b2</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mb_free_blocks_double\">mb_free_blocks_double</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, int <a class=\"id\" href=\"#first\">first</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mb_mark_used_double\">mb_mark_used_double</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#first\">first</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mb_cmp_bitmaps\">mb_cmp_bitmaps</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, void *<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#AGGRESSIVE_CHECK\">AGGRESSIVE_CHECK</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#assert\">assert</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#assert\">assert</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Assertion failure in %s() at %s:%d: \\\"%s\\\"\\n\",<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#function\">function</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#line\">line</a>, # <a class=\"id\" href=\"#assert\">assert</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"static int <a class=\"id\" href=\"#__mb_check_buddy\">__mb_check_buddy</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, char *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#function\">function</a>, int <a class=\"id\" href=\"#line\">line</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_blkbits\">bd_blkbits</a> + 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max2\">max2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fragments\">fragments</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fstart\">fstart</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buddy\">buddy</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buddy2\">buddy2</a>;", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>static int <a class=\"id\" href=\"#mb_check_counter\">mb_check_counter</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mb_check_counter\">mb_check_counter</a>++ % 100 != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#order\">order</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#order\">order</a>, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#buddy\">buddy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy2\">buddy2</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#order\">order</a> - 1, &amp;<a class=\"id\" href=\"#max2\">max2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#buddy2\">buddy2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#buddy\">buddy</a> != <a class=\"id\" href=\"#buddy2\">buddy2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#max\">max</a> * 2 == <a class=\"id\" href=\"#max2\">max2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max\">max</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#buddy\">buddy</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* only single bit in buddy2 may be 1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#i\">i</a> << 1, <a class=\"id\" href=\"#buddy2\">buddy2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>((<a class=\"id\" href=\"#i\">i</a><<1)+1, <a class=\"id\" href=\"#buddy2\">buddy2</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>((<a class=\"id\" href=\"#i\">i</a> << 1) + 1, <a class=\"id\" href=\"#buddy2\">buddy2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#i\">i</a> << 1, <a class=\"id\" href=\"#buddy2\">buddy2</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* both bits in buddy2 must be 0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#i\">i</a> << 1, <a class=\"id\" href=\"#buddy2\">buddy2</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>((<a class=\"id\" href=\"#i\">i</a> << 1) + 1, <a class=\"id\" href=\"#buddy2\">buddy2</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; (1 << <a class=\"id\" href=\"#order\">order</a>); <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = (<a class=\"id\" href=\"#i\">i</a> * (1 << <a class=\"id\" href=\"#order\">order</a>)) + <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#order\">order</a>] == <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fstart\">fstart</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, 0, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max\">max</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#buddy\">buddy</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_first_free\">bb_first_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fstart\">fstart</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragments\">fragments</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fstart\">fstart</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fstart\">fstart</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check used bits only */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_blkbits\">bd_blkbits</a> + 1; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy2\">buddy2</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#j\">j</a>, &amp;<a class=\"id\" href=\"#max2\">max2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#i\">i</a> >> <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#max2\">max2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#buddy2\">buddy2</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(!<a class=\"id\" href=\"#EXT4_MB_GRP_NEED_INIT\">EXT4_MB_GRP_NEED_INIT</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_fragments\">bb_fragments</a> == <a class=\"id\" href=\"#fragments\">fragments</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, 0, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#cur\">cur</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_prealloc_list\">bb_prealloc_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#groupnr\">groupnr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#cur\">cur</a>, struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a>, <a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>, &amp;<a class=\"id\" href=\"#groupnr\">groupnr</a>, &amp;<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#groupnr\">groupnr</a> == <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>(<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#k\">k</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#buddy\">buddy</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#MB_CHECK_ASSERT\">MB_CHECK_ASSERT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mb_check_buddy\">mb_check_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>) <a class=\"id\" href=\"#__mb_check_buddy\">__mb_check_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mb_check_buddy\">mb_check_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* FIXME!! need more doc */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_mark_free_simple\">ext4_mb_mark_free_simple</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#buddy\">buddy</a>, <a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#min\">min</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#border\">border</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#border\">border</a> = 2 << <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* find how many blocks can be covered since this position */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#ffs\">ffs</a>(<a class=\"id\" href=\"#first\">first</a> | <a class=\"id\" href=\"#border\">border</a>) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* find how many blocks of power 2 we need to mark */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a> = <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#len\">len</a>) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> &lt; <a class=\"id\" href=\"#min\">min</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = 1 << <a class=\"id\" href=\"#min\">min</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mark multiblock chunks only */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#min\">min</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#min\">min</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_clear_bit\">mb_clear_bit</a>(<a class=\"id\" href=\"#first\">first</a> >> <a class=\"id\" href=\"#min\">min</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#buddy\">buddy</a> + <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a>[<a class=\"id\" href=\"#min\">min</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> += <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cache the order of the largest free extent we have available in this block</span>", 
"<span class=\"comment\"> * group.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#mb_set_largest_free_order\">mb_set_largest_free_order</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bits\">bits</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_largest_free_order\">bb_largest_free_order</a> = -1; <span class=\"comment\">/* uninit */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> + 1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#bits\">bits</a>; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#i\">i</a>] &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_largest_free_order\">bb_largest_free_order</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"void <a class=\"id\" href=\"#ext4_mb_generate_buddy\">ext4_mb_generate_buddy</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#buddy\">buddy</a>, void *<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#free\">free</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#fragments\">fragments</a> = 0;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* initialize buddy from bitmap which is aggregation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of on-disk bitmap and preallocations */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#mb_find_next_zero_bit\">mb_find_next_zero_bit</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#max\">max</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_first_free\">bb_first_free</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragments\">fragments</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#mb_find_next_bit\">mb_find_next_bit</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#i\">i</a> - <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_mark_free_simple\">ext4_mb_mark_free_simple</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#buddy\">buddy</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#grp\">grp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[0]++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#mb_find_next_zero_bit\">mb_find_next_zero_bit</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_fragments\">bb_fragments</a> = <a class=\"id\" href=\"#fragments\">fragments</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> != <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_free\">bb_free</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_grp_locked_error\">ext4_grp_locked_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, 0, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%u blocks in bitmap, %u in gd\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#free\">free</a>, <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_free\">bb_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we intent to continue, we consider group descritor</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * corrupt and update bb_free using bitmap value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_free\">bb_free</a> = <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_set_largest_free_order\">mb_set_largest_free_order</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#grp\">grp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#EXT4_GROUP_INFO_NEED_INIT_BIT\">EXT4_GROUP_INFO_NEED_INIT_BIT</a>, &amp;(<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_state\">bb_state</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>() - <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_bal_lock\">s_bal_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mb_buddies_generated\">s_mb_buddies_generated</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mb_generation_time\">s_mb_generation_time</a> += <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_bal_lock\">s_bal_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* The buddy information is attached the buddy cache inode</span>", 
"<span class=\"comment\"> * for convenience. The information regarding each group</span>", 
"<span class=\"comment\"> * is loaded via ext4_mb_load_buddy. The information involve</span>", 
"<span class=\"comment\"> * block bitmap and buddy information. The information are</span>", 
"<span class=\"comment\"> * stored in the inode as</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * {                        page                        }</span>", 
"<span class=\"comment\"> * [ group 0 bitmap][ group 0 buddy] [group 1][ group 1]...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * one block each for bitmap and buddy information.</span>", 
"<span class=\"comment\"> * So for each group we take up 2 blocks. A page can</span>", 
"<span class=\"comment\"> * contain blocks_per_page (PAGE_CACHE_SIZE / blocksize)  blocks.</span>", 
"<span class=\"comment\"> * So it can have information regarding groups_per_page which</span>", 
"<span class=\"comment\"> * is blocks_per_page/2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking note:  This routine takes the block group lock of all groups</span>", 
"<span class=\"comment\"> * for this page; do not hold this lock when calling this routine!</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#ext4_mb_init_cache\">ext4_mb_init_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, char *<a class=\"id\" href=\"#incore\">incore</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#groups_per_page\">groups_per_page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#first_group\">first_group</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#first_block\">first_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bhs\">bhs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> **<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"init page %lu\\n\", <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#ext4_get_groups_count\">ext4_get_groups_count</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> / <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> = <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> >> 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate buffer_heads to read bitmaps */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = sizeof(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *) * <a class=\"id\" href=\"#groups_per_page\">groups_per_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = &amp;<a class=\"id\" href=\"#bhs\">bhs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_group\">first_group</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> * <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> / 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read all groups the page covers into the cache */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#groups_per_page\">groups_per_page</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_desc\">ext4_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#ngroups\">ngroups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext4_get_group_desc\">ext4_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ext4_block_bitmap\">ext4_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#desc\">desc</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap_uptodate\">bitmap_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap_uptodate\">bitmap_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_flags\">bg_flags</a> &amp; <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#EXT4_BG_BLOCK_UNINIT\">EXT4_BG_BLOCK_UNINIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_init_block_bitmap\">ext4_init_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bitmap_uptodate\">set_bitmap_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if not uninit if bh is uptodate,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bitmap is also uptodate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bitmap_uptodate\">set_bitmap_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * submit the buffer_head for read. We can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * safely mark the bitmap as uptodate now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We do it here so the bitmap uptodate bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * get set with buffer lock held.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bitmap_uptodate\">set_bitmap_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_read_sync\">end_buffer_read_sync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"read bitmap for group %u\\n\", <a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for I/O completion */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> && <a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> && <a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_block\">first_block</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> * <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* init the page  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>), 0xff, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grinfo\">grinfo</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = (<a class=\"id\" href=\"#first_block\">first_block</a> + <a class=\"id\" href=\"#i\">i</a>) >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a> >= <a class=\"id\" href=\"#ngroups\">ngroups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * data carry information regarding this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * particular group in the format specified</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * above</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + (<a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#group\">group</a> - <a class=\"id\" href=\"#first_group\">first_group</a>]-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We place the buddy block and bitmap block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * close together</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#first_block\">first_block</a> + <a class=\"id\" href=\"#i\">i</a>) &amp; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this is block of buddy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#incore\">incore</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"put buddy for group %u in page %lu/%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mb_buddy_bitmap_load\">trace_ext4_mb_buddy_bitmap_load</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grinfo\">grinfo</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grinfo\">grinfo</a>-><a class=\"id\" href=\"#bb_fragments\">bb_fragments</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#grinfo\">grinfo</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(*<a class=\"id\" href=\"#grinfo\">grinfo</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>+2));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * incore got set to the group block bitmap below</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_generate_buddy\">ext4_mb_generate_buddy</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#incore\">incore</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#incore\">incore</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this is block of bitmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#incore\">incore</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"put bitmap for group %u in page %lu/%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mb_bitmap_load\">trace_ext4_mb_bitmap_load</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* see comments in ext4_mb_put_pa() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mark all preallocated blks used in in-core bitmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_generate_from_pa\">ext4_mb_generate_from_pa</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_generate_from_freelist\">ext4_mb_generate_from_freelist</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set incore so that the buddy information can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * generated using this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#incore\">incore</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> && <a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a> != &amp;<a class=\"id\" href=\"#bhs\">bhs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locking note:  This routine calls ext4_mb_init_cache(), which takes the</span>", 
"<span class=\"comment\"> * block group lock of all groups for this page; do not hold the BG lock when</span>", 
"<span class=\"comment\"> * calling this routine!</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"int <a class=\"id\" href=\"#ext4_mb_init_group\">ext4_mb_init_group</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#poff\">poff</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_grp_locked\">num_grp_locked</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#this_grp\">this_grp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_buddy_cache\">s_buddy_cache</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#bitmap_page\">bitmap_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"init group %u\\n\", <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> / <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_grp\">this_grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This ensures that we don't reinit the buddy cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page which map to the group from which we are already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocating. If we are looking at the buddy cache we would</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have taken a reference using ext4_mb_load_buddy and that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would have taken the alloc_sem lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_grp_locked\">num_grp_locked</a> =  <a class=\"id\" href=\"#ext4_mb_get_buddy_cache_lock\">ext4_mb_get_buddy_cache_lock</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#EXT4_MB_GRP_NEED_INIT\">EXT4_MB_GRP_NEED_INIT</a>(<a class=\"id\" href=\"#this_grp\">this_grp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * somebody initialized the group</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return without doing anything</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buddy cache inode stores the block bitmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and buddy information in consecutive blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So for each group we need two blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#group\">group</a> * 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#block\">block</a> / <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poff\">poff</a> = <a class=\"id\" href=\"#block\">block</a> % <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_mb_init_cache\">ext4_mb_init_cache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || !<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_page_accessed\">mark_page_accessed</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_page\">bitmap_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + (<a class=\"id\" href=\"#poff\">poff</a> * <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* init buddy cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#block\">block</a> / <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poff\">poff</a> = <a class=\"id\" href=\"#block\">block</a> % <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#bitmap_page\">bitmap_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If both the bitmap and buddy are in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the same page we don't need to force</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * init the buddy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_mb_init_cache\">ext4_mb_init_cache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || !<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_page_accessed\">mark_page_accessed</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_put_buddy_cache_lock\">ext4_mb_put_buddy_cache_lock</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#num_grp_locked\">num_grp_locked</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap_page\">bitmap_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#bitmap_page\">bitmap_page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locking note:  This routine calls ext4_mb_init_cache(), which takes the</span>", 
"<span class=\"comment\"> * block group lock of all groups for this page; do not hold the BG lock when</span>", 
"<span class=\"comment\"> * calling this routine!</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_load_buddy\">ext4_mb_load_buddy</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#poff\">poff</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_buddy_cache\">s_buddy_cache</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"load group %u\\n\", <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> / <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_blkbits\">bd_blkbits</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy_page\">bd_buddy_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap_page\">bd_bitmap_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#alloc_semp\">alloc_semp</a> = &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#alloc_sem\">alloc_sem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Take the read lock on the group alloc</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sem. This would make sure a parallel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext4_mb_init_group happening on other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * groups mapped by the page is blocked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * till we are done with allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#repeat_load_buddy\">repeat_load_buddy</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#alloc_semp\">alloc_semp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#EXT4_MB_GRP_NEED_INIT\">EXT4_MB_GRP_NEED_INIT</a>(<a class=\"id\" href=\"#grp\">grp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we need to check for group need init flag</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with alloc_semp held so that we can be sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that new blocks didn't get added to the group</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when we are loading the buddy cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#alloc_semp\">alloc_semp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we need full data about the group</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to make a good selection</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_mb_init_group\">ext4_mb_init_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat_load_buddy\">repeat_load_buddy</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buddy cache inode stores the block bitmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and buddy information in consecutive blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So for each group we need two blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#group\">group</a> * 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#block\">block</a> / <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poff\">poff</a> = <a class=\"id\" href=\"#block\">block</a> % <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we could use find_or_create_page(), but it locks page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * what we'd like to avoid in fast path ... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || !<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * drop the page reference and try</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to get the page with lock. If we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * are not uptodate that implies</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * somebody just created the page but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is yet to initialize the same. So</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * wait for it to initialize.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_mb_init_cache\">ext4_mb_init_cache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_cmp_bitmaps\">mb_cmp_bitmaps</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#poff\">poff</a> * <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || !<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap_page\">bd_bitmap_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap\">bd_bitmap</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + (<a class=\"id\" href=\"#poff\">poff</a> * <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_page_accessed\">mark_page_accessed</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#block\">block</a> / <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poff\">poff</a> = <a class=\"id\" href=\"#block\">block</a> % <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || !<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_mb_init_cache\">ext4_mb_init_cache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap\">bd_bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || !<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy_page\">bd_buddy_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy\">bd_buddy</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + (<a class=\"id\" href=\"#poff\">poff</a> * <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_page_accessed\">mark_page_accessed</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap_page\">bd_bitmap_page</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy_page\">bd_buddy_page</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap_page\">bd_bitmap_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap_page\">bd_bitmap_page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy_page\">bd_buddy_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy_page\">bd_buddy_page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy\">bd_buddy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap\">bd_bitmap</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Done with the buddy cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#alloc_semp\">alloc_semp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap_page\">bd_bitmap_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap_page\">bd_bitmap_page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy_page\">bd_buddy_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy_page\">bd_buddy_page</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Done with the buddy cache */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#alloc_semp\">alloc_semp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#alloc_semp\">alloc_semp</a>);", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#mb_find_order_for_block\">mb_find_order_for_block</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, int <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = 1;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#bb\">bb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>) == <a class=\"id\" href=\"#EXT4_MB_BUDDY\">EXT4_MB_BUDDY</a>(<a class=\"id\" href=\"#e4b\">e4b</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#block\">block</a> >= (1 << (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_blkbits\">bd_blkbits</a> + 3)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a> = <a class=\"id\" href=\"#EXT4_MB_BUDDY\">EXT4_MB_BUDDY</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#order\">order</a> <= <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_blkbits\">bd_blkbits</a> + 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#block\">block</a> >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#bb\">bb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this block is part of buddy of order 'order' */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a> += 1 << (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_blkbits\">bd_blkbits</a> - <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mb_clear_bits\">mb_clear_bits</a>(void *<a class=\"id\" href=\"#bm\">bm</a>, int <a class=\"id\" href=\"#cur\">cur</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#cur\">cur</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cur\">cur</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cur\">cur</a> &amp; 31) == 0 && (<a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#cur\">cur</a>) >= 32) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fast path: clear whole word at once */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#bm\">bm</a> + (<a class=\"id\" href=\"#cur\">cur</a> >> 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> += 32;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_clear_bit\">mb_clear_bit</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mb_set_bits\">mb_set_bits</a>(void *<a class=\"id\" href=\"#bm\">bm</a>, int <a class=\"id\" href=\"#cur\">cur</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#cur\">cur</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cur\">cur</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cur\">cur</a> &amp; 31) == 0 && (<a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#cur\">cur</a>) >= 32) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fast path: set whole word at once */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#bm\">bm</a> + (<a class=\"id\" href=\"#cur\">cur</a> >> 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a> = 0xffffffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> += 32;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bit\">mb_set_bit</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mb_free_blocks\">mb_free_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#first\">first</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#block\">block</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buddy\">buddy</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buddy2\">buddy2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#count\">count</a> &gt; (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> << 3));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(<a class=\"id\" href=\"#ext4_group_lock_ptr\">ext4_group_lock_ptr</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_check_buddy\">mb_check_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_free_blocks_double\">mb_free_blocks_double</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_free\">bb_free</a> += <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> &lt; <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_first_free\">bb_first_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_first_free\">bb_first_free</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* let's maintain fragments counter */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = !<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#first\">first</a> - 1, <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = !<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> && <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_fragments\">bb_fragments</a>--;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#block\">block</a> && !<a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_fragments\">bb_fragments</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* let's maintain buddy itself */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#first\">first</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#blocknr\">blocknr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocknr\">blocknr</a> = <a class=\"id\" href=\"#ext4_group_first_block_no\">ext4_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocknr\">blocknr</a> += <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_grp_locked_error\">ext4_grp_locked_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#inode\">inode</a> ? <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> : 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#blocknr\">blocknr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"freeing already freed block \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"(bit %u)\", <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_clear_bit\">mb_clear_bit</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#order\">order</a>]++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* start of the buddy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#order\">order</a>, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> &= ~1UL;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#buddy\">buddy</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#block\">block</a> + 1, <a class=\"id\" href=\"#buddy\">buddy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* both the buddies are free, try to coalesce them */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy2\">buddy2</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#order\">order</a> + 1, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buddy2\">buddy2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for special purposes, we don't set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * free bits in bitmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bit\">mb_set_bit</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#buddy\">buddy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bit\">mb_set_bit</a>(<a class=\"id\" href=\"#block\">block</a> + 1, <a class=\"id\" href=\"#buddy\">buddy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#order\">order</a>]--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#order\">order</a>]--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#block\">block</a> >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#order\">order</a>]++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_clear_bit\">mb_clear_bit</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#buddy2\">buddy2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#buddy2\">buddy2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_set_largest_free_order\">mb_set_largest_free_order</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_check_buddy\">mb_check_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mb_find_extent\">mb_find_extent</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, int <a class=\"id\" href=\"#order\">order</a>, int <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#needed\">needed</a>, struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> *<a class=\"id\" href=\"#ex\">ex</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ord\">ord</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buddy\">buddy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(<a class=\"id\" href=\"#ext4_group_lock_ptr\">ext4_group_lock_ptr</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#order\">order</a>, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#buddy\">buddy</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#block\">block</a> >= <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#buddy\">buddy</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_start\">fe_start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_group\">fe_group</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME dorp order completely ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#order\">order</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* find actual order */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#mb_find_order_for_block\">mb_find_order_for_block</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#block\">block</a> >> <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> = 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_start\">fe_start</a> = <a class=\"id\" href=\"#block\">block</a> << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_group\">fe_group</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* calc difference from given start */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_start\">fe_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> -= <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_start\">fe_start</a> += <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#needed\">needed</a> &gt; <a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> &&", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#order\">order</a>, &amp;<a class=\"id\" href=\"#max\">max</a>))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> + 1 >= <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = (<a class=\"id\" href=\"#block\">block</a> + 1) * (1 << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ord\">ord</a> = <a class=\"id\" href=\"#mb_find_order_for_block\">mb_find_order_for_block</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#ord\">ord</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#next\">next</a> >> <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> += 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_start\">fe_start</a> + <a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> &gt; (1 << (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_blkbits\">bd_blkbits</a> + 3)));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mb_mark_used\">mb_mark_used</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> *<a class=\"id\" href=\"#ex\">ex</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ord\">ord</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mlen\">mlen</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_start\">fe_start</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len0\">len0</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buddy\">buddy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a> &gt; (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> << 3));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a> != <a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(<a class=\"id\" href=\"#ext4_group_lock_ptr\">ext4_group_lock_ptr</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_check_buddy\">mb_check_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_mark_used_double\">mb_mark_used_double</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_free\">bb_free</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_first_free\">bb_first_free</a> == <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_first_free\">bb_first_free</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* let's maintain fragments counter */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mlen\">mlen</a> = !<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#start\">start</a> - 1, <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>)-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = !<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mlen\">mlen</a> && <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_fragments\">bb_fragments</a>++;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#mlen\">mlen</a> && !<a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_fragments\">bb_fragments</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* let's maintain buddy itself */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ord\">ord</a> = <a class=\"id\" href=\"#mb_find_order_for_block\">mb_find_order_for_block</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#ord\">ord</a>) << <a class=\"id\" href=\"#ord\">ord</a>) == <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#len\">len</a> >= (1 << <a class=\"id\" href=\"#ord\">ord</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the whole chunk may be allocated at once! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mlen\">mlen</a> = 1 << <a class=\"id\" href=\"#ord\">ord</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#ord\">ord</a>, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#ord\">ord</a>) >= <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bit\">mb_set_bit</a>(<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#ord\">ord</a>, <a class=\"id\" href=\"#buddy\">buddy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#ord\">ord</a>]--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#mlen\">mlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#mlen\">mlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#len\">len</a> &lt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* store for history */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#len\">len</a> | (<a class=\"id\" href=\"#ord\">ord</a> << 16);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we have to split large buddy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ord\">ord</a> <= 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#ord\">ord</a>, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bit\">mb_set_bit</a>(<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#ord\">ord</a>, <a class=\"id\" href=\"#buddy\">buddy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#ord\">ord</a>]--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ord\">ord</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = (<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#ord\">ord</a>) &amp; ~1U;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#ord\">ord</a>, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_clear_bit\">mb_clear_bit</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#buddy\">buddy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_clear_bit\">mb_clear_bit</a>(<a class=\"id\" href=\"#cur\">cur</a> + 1, <a class=\"id\" href=\"#buddy\">buddy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#ord\">ord</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#ord\">ord</a>]++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_set_largest_free_order\">mb_set_largest_free_order</a>(<a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bits\">mb_set_bits</a>(<a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>), <a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_start\">fe_start</a>, <a class=\"id\" href=\"#len0\">len0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_check_buddy\">mb_check_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must be called under group lock!</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> != <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> == <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mb_mark_used\">mb_mark_used</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* preallocation can change ac_b_ex, thus we store actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated blocks for history */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_f_ex\">ac_f_ex</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> = <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_tail\">ac_tail</a> = <a class=\"id\" href=\"#ret\">ret</a> &amp; 0xffff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_buddy\">ac_buddy</a> = <a class=\"id\" href=\"#ret\">ret</a> >> 16;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * take the page reference. We want the page to be pinned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that we don't get a ext4_mb_init_cache_call for this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group until we update the bitmap. That would mean we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * double allocate blocks. The reference is dropped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in ext4_mb_release_context</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_bitmap_page\">ac_bitmap_page</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_bitmap_page\">bd_bitmap_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_bitmap_page\">ac_bitmap_page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_buddy_page\">ac_buddy_page</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_buddy_page\">bd_buddy_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_buddy_page\">ac_buddy_page</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* on allocation we use ac to track the held semaphore */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#alloc_semp\">alloc_semp</a> =  <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#alloc_semp\">alloc_semp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#alloc_semp\">alloc_semp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* store last allocated for subsequent stream allocation */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_STREAM_ALLOC\">EXT4_MB_STREAM_ALLOC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_md_lock\">s_md_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_last_group\">s_mb_last_group</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_f_ex\">ac_f_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_last_start\">s_mb_last_start</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_f_ex\">ac_f_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_md_lock\">s_md_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * regular allocator, for general purposes allocation</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#ext4_mb_check_limits\">ext4_mb_check_limits</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#finish_group\">finish_group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> *<a class=\"id\" href=\"#bex\">bex</a> = &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> *<a class=\"id\" href=\"#gex\">gex</a> = &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> <a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> == <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't want to scan for a whole year</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a> &gt; <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_max_to_scan\">s_mb_max_to_scan</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_FIRST\">EXT4_MB_HINT_FIRST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> = <a class=\"id\" href=\"#AC_STATUS_BREAK\">AC_STATUS_BREAK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Haven't found good chunk so far, let's continue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bex\">bex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> &lt; <a class=\"id\" href=\"#gex\">gex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#finish_group\">finish_group</a> || <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a> &gt; <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_min_to_scan\">s_mb_min_to_scan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#bex\">bex</a>-><a class=\"id\" href=\"#fe_group\">fe_group</a> == <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* recheck chunk's availability - we don't know</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when it was found (within this lock-unlock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * period or not) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#mb_find_extent\">mb_find_extent</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, 0, <a class=\"id\" href=\"#bex\">bex</a>-><a class=\"id\" href=\"#fe_start\">fe_start</a>, <a class=\"id\" href=\"#gex\">gex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>, &amp;<a class=\"id\" href=\"#ex\">ex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> >= <a class=\"id\" href=\"#gex\">gex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The routine checks whether found extent is good enough. If it is,</span>", 
"<span class=\"comment\"> * then the extent gets marked used and flag is set to the context</span>", 
"<span class=\"comment\"> * to stop scanning. Otherwise, the extent is compared with the</span>", 
"<span class=\"comment\"> * previous found extent and if new one is better, then it's stored</span>", 
"<span class=\"comment\"> * in the context. Later, the best found extent will be used, if</span>", 
"<span class=\"comment\"> * mballoc can't find good enough extent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME: real allocation policy is to be designed yet!</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_measure_extent\">ext4_mb_measure_extent</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> *<a class=\"id\" href=\"#ex\">ex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> *<a class=\"id\" href=\"#bex\">bex</a> = &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> *<a class=\"id\" href=\"#gex\">gex</a> = &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> <= 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> &gt; <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_start\">fe_start</a> >= <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> != <a class=\"id\" href=\"#AC_STATUS_CONTINUE\">AC_STATUS_CONTINUE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The special case - take what you catch first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_FIRST\">EXT4_MB_HINT_FIRST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bex\">bex</a> = *<a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Let's check whether the chuck is good enough</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> == <a class=\"id\" href=\"#gex\">gex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bex\">bex</a> = *<a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is first found extent, just store it in the context</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bex\">bex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bex\">bex</a> = *<a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If new found extent is better, store it in the context</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bex\">bex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> &lt; <a class=\"id\" href=\"#gex\">gex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if the request isn't satisfied, any found extent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * larger than previous best one is better */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> &gt; <a class=\"id\" href=\"#bex\">bex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bex\">bex</a> = *<a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> &gt; <a class=\"id\" href=\"#gex\">gex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if the request is satisfied, then we try to find</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an extent that still satisfy the request, but is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * smaller than previous one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a> &lt; <a class=\"id\" href=\"#bex\">bex</a>-><a class=\"id\" href=\"#fe_len\">fe_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bex\">bex</a> = *<a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_check_limits\">ext4_mb_check_limits</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"int <a class=\"id\" href=\"#ext4_mb_try_best_found\">ext4_mb_try_best_found</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> <a class=\"id\" href=\"#ex\">ex</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> <= 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_load_buddy\">ext4_mb_load_buddy</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#mb_find_extent\">mb_find_extent</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, 0, <a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>, <a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>, &amp;<a class=\"id\" href=\"#ex\">ex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a> = <a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"int <a class=\"id\" href=\"#ext4_mb_find_by_goal\">ext4_mb_find_by_goal</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> <a class=\"id\" href=\"#ex\">ex</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_TRY_GOAL\">EXT4_MB_HINT_TRY_GOAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_load_buddy\">ext4_mb_load_buddy</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#mb_find_extent\">mb_find_extent</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, 0, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>, &amp;<a class=\"id\" href=\"#ex\">ex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> >= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> && <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> == <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ext4_group_first_block_no\">ext4_group_first_block_no</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use do_div to get remainder (would be 64-bit modulo) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a> = <a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#max\">max</a> >= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> <= 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> != <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> != <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a> = <a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#max\">max</a> &gt; 0 && (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_MERGE\">EXT4_MB_HINT_MERGE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Sometimes, caller may want to merge even small</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * number of blocks to an existing extent */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> <= 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> != <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> != <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a> = <a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The routine scans buddy structures (not bitmap!) from given order</span>", 
"<span class=\"comment\"> * to max order and tries to find big enough chunk to satisfy the req</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"void <a class=\"id\" href=\"#ext4_mb_simple_scan_group\">ext4_mb_simple_scan_group</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buddy\">buddy</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_2order\">ac_2order</a> <= 0);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_2order\">ac_2order</a>; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> + 1; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#i\">i</a>] == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#mb_find_buddy\">mb_find_buddy</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#buddy\">buddy</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#mb_find_next_zero_bit\">mb_find_next_zero_bit</a>(<a class=\"id\" href=\"#buddy\">buddy</a>, <a class=\"id\" href=\"#max\">max</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#k\">k</a> >= <a class=\"id\" href=\"#max\">max</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = 1 << <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> = <a class=\"id\" href=\"#k\">k</a> << <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> != <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mb_stats\">s_mb_stats</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_bal_2orders\">s_bal_2orders</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The routine scans the group and measures all found extents.</span>", 
"<span class=\"comment\"> * In order to optimize scanning, caller must pass number of</span>", 
"<span class=\"comment\"> * free blocks in the group, so the routine can know upper limit.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"void <a class=\"id\" href=\"#ext4_mb_complex_scan_group\">ext4_mb_complex_scan_group</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> <a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_free\">bb_free</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#free\">free</a> <= 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_info\">bd_info</a>-><a class=\"id\" href=\"#bb_first_free\">bb_first_free</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#free\">free</a> && <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> == <a class=\"id\" href=\"#AC_STATUS_CONTINUE\">AC_STATUS_CONTINUE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#mb_find_next_zero_bit\">mb_find_next_zero_bit</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * IF we have corrupt bitmap, we won't find any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * free blocks even though group info says we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we have free blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_grp_locked_error\">ext4_grp_locked_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>, 0, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%d free blocks as per \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"group info. But bitmap says 0\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_find_extent\">mb_find_extent</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, 0, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>, &amp;<a class=\"id\" href=\"#ex\">ex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> <= 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> &lt; <a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_grp_locked_error\">ext4_grp_locked_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>, 0, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%d free blocks as per \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"group info. But got %d blocks\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>, <a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The number of free blocks differs. This mostly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * indicate that the bitmap is corrupt. So exit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * without claiming the space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_measure_extent\">ext4_mb_measure_extent</a>(<a class=\"id\" href=\"#ac\">ac</a>, &amp;<a class=\"id\" href=\"#ex\">ex</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> -= <a class=\"id\" href=\"#ex\">ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_check_limits\">ext4_mb_check_limits</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a special case for storages like raid5</span>", 
"<span class=\"comment\"> * we try to find stripe-aligned chunks for stripe-size-multiple requests</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"void <a class=\"id\" href=\"#ext4_mb_scan_aligned\">ext4_mb_scan_aligned</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#EXT4_MB_BITMAP\">EXT4_MB_BITMAP</a>(<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_extent\">ext4_free_extent</a> <a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#first_group_block\">first_group_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a> == 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* find first stripe-aligned block in group */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_group_block\">first_group_block</a> = <a class=\"id\" href=\"#ext4_group_first_block_no\">ext4_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#first_group_block\">first_group_block</a> + <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#a\">a</a> * <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>) - <a class=\"id\" href=\"#first_group_block\">first_group_block</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#mb_find_extent\">mb_find_extent</a>(<a class=\"id\" href=\"#e4b\">e4b</a>, 0, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>, &amp;<a class=\"id\" href=\"#ex\">ex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> >= <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a> = <a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_best_found\">ext4_mb_use_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* This is now called BEFORE we load the buddy bitmap. */</span>", 
"static int <a class=\"id\" href=\"#ext4_mb_good_group\">ext4_mb_good_group</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>, int <a class=\"id\" href=\"#cr\">cr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#free\">free</a>, <a class=\"id\" href=\"#fragments\">fragments</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flex_size\">flex_size</a> = <a class=\"id\" href=\"#ext4_flex_bg_size\">ext4_flex_bg_size</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>));", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cr\">cr</a> &lt; 0 || <a class=\"id\" href=\"#cr\">cr</a> >= 4);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We only do this if the grp has never been initialized */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#EXT4_MB_GRP_NEED_INIT\">EXT4_MB_GRP_NEED_INIT</a>(<a class=\"id\" href=\"#grp\">grp</a>))) {", 
];
xr_frag_insert('l/c0/4366213361d5617f3d5afc4445611deb494e7f.xr', __xr_tmp);
