var __xr_tmp = [
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip_size\">bip_size</a>;", 
"", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip_slab\">bip_slab</a>;<span class=\"ts\"/><span class=\"comment\">/* slab the bip came from */</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip_vcnt\">bip_vcnt</a>;<span class=\"ts\"/><span class=\"comment\">/* # of integrity bio_vecs */</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip_idx\">bip_idx</a>;<span class=\"ts\"/><span class=\"comment\">/* current bip_vec index */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#bip_work\">bip_work</a>;<span class=\"ts\"/><span class=\"comment\">/* I/O completion */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip_vec\">bip_vec</a>[0];<span class=\"ts\"/><span class=\"comment\">/* embedded bvec array */</span>", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BLK_DEV_INTEGRITY */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A bio_pair is used when we need to split a bio.</span>", 
"<span class=\"comment\"> * This can only happen for a bio that refers to just one</span>", 
"<span class=\"comment\"> * page of data, and in the unusual situation when the</span>", 
"<span class=\"comment\"> * page crosses a chunk/device boundary</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The address of the master bio is stored in bio1.bi_private</span>", 
"<span class=\"comment\"> * The address of the pool the pair was allocated from is stored</span>", 
"<span class=\"comment\"> *   in bio2.bi_private</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio1\">bio1</a>, <a class=\"id\" href=\"#bio2\">bio2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bv1\">bv1</a>, <a class=\"id\" href=\"#bv2\">bv2</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BLK_DEV_INTEGRITY\">CONFIG_BLK_DEV_INTEGRITY</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_integrity_payload\">bio_integrity_payload</a><span class=\"ts\"/><a class=\"id\" href=\"#bip1\">bip1</a>, <a class=\"id\" href=\"#bip2\">bip2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iv1\">iv1</a>, <a class=\"id\" href=\"#iv2\">iv2</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>;", 
"};", 
"extern struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a> *<a class=\"id\" href=\"#bio_split\">bio_split</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bi\">bi</a>, int <a class=\"id\" href=\"#first_sectors\">first_sectors</a>);", 
"extern void <a class=\"id\" href=\"#bio_pair_release\">bio_pair_release</a>(struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a> *<a class=\"id\" href=\"#dbio\">dbio</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bioset_create\">bioset_create</a>(unsigned int, unsigned int);", 
"extern void <a class=\"id\" href=\"#bioset_free\">bioset_free</a>(struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *);", 
"", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_alloc\">bio_alloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a>, int);", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_kmalloc\">bio_kmalloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a>, int);", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_alloc_bioset\">bio_alloc_bioset</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a>, int, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *);", 
"extern void <a class=\"id\" href=\"#bio_put\">bio_put</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *);", 
"extern void <a class=\"id\" href=\"#bio_free\">bio_free</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *);", 
"", 
"extern void <a class=\"id\" href=\"#bio_endio\">bio_endio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, int);", 
"struct <a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"extern int <a class=\"id\" href=\"#bio_phys_segments\">bio_phys_segments</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *, struct <a class=\"id\" href=\"#bio\">bio</a> *);", 
"", 
"extern void <a class=\"id\" href=\"#__bio_clone\">__bio_clone</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, struct <a class=\"id\" href=\"#bio\">bio</a> *);", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_clone\">bio_clone</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"", 
"extern void <a class=\"id\" href=\"#bio_init\">bio_init</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *);", 
"", 
"extern int <a class=\"id\" href=\"#bio_add_page\">bio_add_page</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, struct <a class=\"id\" href=\"#page\">page</a> *, unsigned int,unsigned int);", 
"extern int <a class=\"id\" href=\"#bio_add_pc_page\">bio_add_pc_page</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *, struct <a class=\"id\" href=\"#bio\">bio</a> *, struct <a class=\"id\" href=\"#page\">page</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int, unsigned int);", 
"extern int <a class=\"id\" href=\"#bio_get_nr_vecs\">bio_get_nr_vecs</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"extern <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#bio_sector_offset\">bio_sector_offset</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, unsigned short, unsigned int);", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_map_user\">bio_map_user</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *, struct <a class=\"id\" href=\"#block_device\">block_device</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long, unsigned int, int, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"struct <a class=\"id\" href=\"#sg_iovec\">sg_iovec</a>;", 
"struct <a class=\"id\" href=\"#rq_map_data\">rq_map_data</a>;", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_map_user_iov\">bio_map_user_iov</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#block_device\">block_device</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sg_iovec\">sg_iovec</a> *, int, int, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"extern void <a class=\"id\" href=\"#bio_unmap_user\">bio_unmap_user</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *);", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_map_kern\">bio_map_kern</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *, void *, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_copy_kern\">bio_copy_kern</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *, void *, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>, int);", 
"extern void <a class=\"id\" href=\"#bio_set_pages_dirty\">bio_set_pages_dirty</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"extern void <a class=\"id\" href=\"#bio_check_pages_dirty\">bio_check_pages_dirty</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE\">ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE</a>", 
"# <a class=\"id\" href=\"#error\">error</a><span class=\"ts\"/>\"You should define ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE for your platform\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE\">ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE</a>", 
"extern void <a class=\"id\" href=\"#bio_flush_dcache_pages\">bio_flush_dcache_pages</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bi\">bi</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bio_flush_dcache_pages\">bio_flush_dcache_pages</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bi\">bi</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_copy_user\">bio_copy_user</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *, struct <a class=\"id\" href=\"#rq_map_data\">rq_map_data</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long, unsigned int, int, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"extern struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_copy_user_iov\">bio_copy_user_iov</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rq_map_data\">rq_map_data</a> *, struct <a class=\"id\" href=\"#sg_iovec\">sg_iovec</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int, int, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"extern int <a class=\"id\" href=\"#bio_uncopy_user\">bio_uncopy_user</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *);", 
"void <a class=\"id\" href=\"#zero_fill_bio\">zero_fill_bio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"extern struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec_alloc_bs\">bvec_alloc_bs</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a>, int, unsigned long *, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *);", 
"extern void <a class=\"id\" href=\"#bvec_free_bs\">bvec_free_bs</a>(struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *, struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *, unsigned int);", 
"extern unsigned int <a class=\"id\" href=\"#bvec_nr_vecs\">bvec_nr_vecs</a>(unsigned short <a class=\"id\" href=\"#idx\">idx</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allow queuer to specify a completion CPU for this bio</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bio_set_completion_cpu\">bio_set_completion_cpu</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_comp_cpu\">bi_comp_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bio_set is used to allow other portions of the IO system to</span>", 
"<span class=\"comment\"> * allocate their own private memory pools for bio and iovec structures.</span>", 
"<span class=\"comment\"> * These memory pools in turn all allocate from the bio_slab</span>", 
"<span class=\"comment\"> * and the bvec_slabs[].</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BIO_POOL_SIZE\">BIO_POOL_SIZE</a> 2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BIOVEC_NR_POOLS\">BIOVEC_NR_POOLS</a> 6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BIOVEC_MAX_IDX\">BIOVEC_MAX_IDX</a><span class=\"ts\"/>(<a class=\"id\" href=\"#BIOVEC_NR_POOLS\">BIOVEC_NR_POOLS</a> - 1)", 
"", 
"struct <a class=\"id\" href=\"#bio_set\">bio_set</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#bio_slab\">bio_slab</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#front_pad\">front_pad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#bio_pool\">bio_pool</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BLK_DEV_INTEGRITY\">CONFIG_BLK_DEV_INTEGRITY</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#bio_integrity_pool\">bio_integrity_pool</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#bvec_pool\">bvec_pool</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#biovec_slab\">biovec_slab</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#slab\">slab</a>;", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a>;", 
"extern struct <a class=\"id\" href=\"#biovec_slab\">biovec_slab</a> <a class=\"id\" href=\"#bvec_slabs\">bvec_slabs</a>[<a class=\"id\" href=\"#BIOVEC_NR_POOLS\">BIOVEC_NR_POOLS</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * a small number of entries is fine, not going to be performance critical.</span>", 
"<span class=\"comment\"> * basically we just need to survive</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BIO_SPLIT_ENTRIES\">BIO_SPLIT_ENTRIES</a> 2", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * remember never ever reenable interrupts between a bvec_kmap_irq and</span>", 
"<span class=\"comment\"> * bvec_kunmap_irq!</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> char *<a class=\"id\" href=\"#bvec_kmap_irq\">bvec_kmap_irq</a>(struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might not be a highmem page, but the preempt/irq count</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * balancing is a lot nicer this way</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(*<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long) <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>, <a class=\"id\" href=\"#KM_BIO_SRC_IRQ\">KM_BIO_SRC_IRQ</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"", 
"<span class=\"ts\"/>return (char *) <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bvec_kunmap_irq\">bvec_kunmap_irq</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ptr\">ptr</a> = (unsigned long) <a class=\"id\" href=\"#buffer\">buffer</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>((void *) <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#KM_BIO_SRC_IRQ\">KM_BIO_SRC_IRQ</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(*<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bvec_kmap_irq\">bvec_kmap_irq</a>(<a class=\"id\" href=\"#bvec\">bvec</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#page_address\">page_address</a>((<a class=\"id\" href=\"#bvec\">bvec</a>)-><a class=\"id\" href=\"#bv_page\">bv_page</a>) + (<a class=\"id\" href=\"#bvec\">bvec</a>)-><a class=\"id\" href=\"#bv_offset\">bv_offset</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bvec_kunmap_irq\">bvec_kunmap_irq</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/>do { *(<a class=\"id\" href=\"#flags\">flags</a>) = 0; } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> char *<a class=\"id\" href=\"#__bio_kmap_irq\">__bio_kmap_irq</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, unsigned short <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bvec_kmap_irq\">bvec_kmap_irq</a>(<a class=\"id\" href=\"#bio_iovec_idx\">bio_iovec_idx</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#idx\">idx</a>), <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__bio_kunmap_irq\">__bio_kunmap_irq</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><a class=\"id\" href=\"#bvec_kunmap_irq\">bvec_kunmap_irq</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#flags\">flags</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_kmap_irq\">bio_kmap_irq</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#flags\">flags</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bio_kmap_irq\">__bio_kmap_irq</a>((<a class=\"id\" href=\"#bio\">bio</a>), (<a class=\"id\" href=\"#bio\">bio</a>)-><a class=\"id\" href=\"#bi_idx\">bi_idx</a>, (<a class=\"id\" href=\"#flags\">flags</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_kunmap_irq\">bio_kunmap_irq</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__bio_kunmap_irq\">__bio_kunmap_irq</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#flags\">flags</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check whether this bio carries any data or not. A NULL bio is allowed.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bio_has_data\">bio_has_data</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a> && <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * BIO list management for use by remapping drivers (e.g. DM or MD) and loop.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A bio_list anchors a singly-linked list of bios chained through the bi_next</span>", 
"<span class=\"comment\"> * member of the bio.  The bio_list also caches the last list member to allow</span>", 
"<span class=\"comment\"> * fast access to the tail.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio_list\">bio_list</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#tail\">tail</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bio_list_empty\">bio_list_empty</a>(const struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a> == <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bio_list_init\">bio_list_init</a>(struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_list_for_each\">bio_list_for_each</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#bl\">bl</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#bio\">bio</a> = (<a class=\"id\" href=\"#bl\">bl</a>)-><a class=\"id\" href=\"#head\">head</a>; <a class=\"id\" href=\"#bio\">bio</a>; <a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#bio_list_size\">bio_list_size</a>(const struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#sz\">sz</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_list_for_each\">bio_list_for_each</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#bl\">bl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sz\">sz</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bio_list_add\">bio_list_add</a>(struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bio_list_add_head\">bio_list_add_head</a>(struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bio_list_merge\">bio_list_merge</a>(struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>, struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl2\">bl2</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bl2\">bl2</a>-><a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#bl2\">bl2</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bl2\">bl2</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#bl2\">bl2</a>-><a class=\"id\" href=\"#tail\">tail</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bio_list_merge_head\">bio_list_merge_head</a>(struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl2\">bl2</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bl2\">bl2</a>-><a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bl2\">bl2</a>-><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#bl2\">bl2</a>-><a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bl2\">bl2</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_list_peek\">bio_list_peek</a>(struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_list_pop\">bio_list_pop</a>(struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_list_get\">bio_list_get</a>(struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bl\">bl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bl\">bl</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BLK_DEV_INTEGRITY\">CONFIG_BLK_DEV_INTEGRITY</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bip_vec_idx\">bip_vec_idx</a>(<a class=\"id\" href=\"#bip\">bip</a>, <a class=\"id\" href=\"#idx\">idx</a>)<span class=\"ts\"/>(&amp;(<a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_vec\">bip_vec</a>[(<a class=\"id\" href=\"#idx\">idx</a>)]))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bip_vec\">bip_vec</a>(<a class=\"id\" href=\"#bip\">bip</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip_vec_idx\">bip_vec_idx</a>(<a class=\"id\" href=\"#bip\">bip</a>, 0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__bip_for_each_vec\">__bip_for_each_vec</a>(<a class=\"id\" href=\"#bvl\">bvl</a>, <a class=\"id\" href=\"#bip\">bip</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#start_idx\">start_idx</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#bvl\">bvl</a> = <a class=\"id\" href=\"#bip_vec_idx\">bip_vec_idx</a>((<a class=\"id\" href=\"#bip\">bip</a>), (<a class=\"id\" href=\"#start_idx\">start_idx</a>)), <a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#start_idx\">start_idx</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a> &lt; (<a class=\"id\" href=\"#bip\">bip</a>)-><a class=\"id\" href=\"#bip_vcnt\">bip_vcnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#bvl\">bvl</a>++, <a class=\"id\" href=\"#i\">i</a>++)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bip_for_each_vec\">bip_for_each_vec</a>(<a class=\"id\" href=\"#bvl\">bvl</a>, <a class=\"id\" href=\"#bip\">bip</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bip_for_each_vec\">__bip_for_each_vec</a>(<a class=\"id\" href=\"#bvl\">bvl</a>, <a class=\"id\" href=\"#bip\">bip</a>, <a class=\"id\" href=\"#i\">i</a>, (<a class=\"id\" href=\"#bip\">bip</a>)-><a class=\"id\" href=\"#bip_idx\">bip_idx</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#bio\">bio</a>) (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"extern struct <a class=\"id\" href=\"#bio_integrity_payload\">bio_integrity_payload</a> *<a class=\"id\" href=\"#bio_integrity_alloc_bioset\">bio_integrity_alloc_bioset</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>, unsigned int, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *);", 
"extern struct <a class=\"id\" href=\"#bio_integrity_payload\">bio_integrity_payload</a> *<a class=\"id\" href=\"#bio_integrity_alloc\">bio_integrity_alloc</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>, unsigned int);", 
"extern void <a class=\"id\" href=\"#bio_integrity_free\">bio_integrity_free</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *);", 
"extern int <a class=\"id\" href=\"#bio_integrity_add_page\">bio_integrity_add_page</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, struct <a class=\"id\" href=\"#page\">page</a> *, unsigned int, unsigned int);", 
"extern int <a class=\"id\" href=\"#bio_integrity_enabled\">bio_integrity_enabled</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"extern int <a class=\"id\" href=\"#bio_integrity_set_tag\">bio_integrity_set_tag</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, void *, unsigned int);", 
"extern int <a class=\"id\" href=\"#bio_integrity_get_tag\">bio_integrity_get_tag</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, void *, unsigned int);", 
"extern int <a class=\"id\" href=\"#bio_integrity_prep\">bio_integrity_prep</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *);", 
"extern void <a class=\"id\" href=\"#bio_integrity_endio\">bio_integrity_endio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, int);", 
"extern void <a class=\"id\" href=\"#bio_integrity_advance\">bio_integrity_advance</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, unsigned int);", 
"extern void <a class=\"id\" href=\"#bio_integrity_trim\">bio_integrity_trim</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, unsigned int, unsigned int);", 
"extern void <a class=\"id\" href=\"#bio_integrity_split\">bio_integrity_split</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a> *, int);", 
"extern int <a class=\"id\" href=\"#bio_integrity_clone\">bio_integrity_clone</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *, struct <a class=\"id\" href=\"#bio\">bio</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *);", 
"extern int <a class=\"id\" href=\"#bioset_integrity_create\">bioset_integrity_create</a>(struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *, int);", 
"extern void <a class=\"id\" href=\"#bioset_integrity_free\">bioset_integrity_free</a>(struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *);", 
"extern void <a class=\"id\" href=\"#bio_integrity_init\">bio_integrity_init</a>(void);", 
"", 
"#else <span class=\"comment\">/* CONFIG_BLK_DEV_INTEGRITY */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bioset_integrity_create\">bioset_integrity_create</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_prep\">bio_integrity_prep</a>(<a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_enabled\">bio_integrity_enabled</a>(<a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_clone\">bio_integrity_clone</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>)<span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bioset_integrity_free\">bioset_integrity_free</a>(<a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_free\">bio_integrity_free</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_endio\">bio_integrity_endio</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_advance\">bio_integrity_advance</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_trim\">bio_integrity_trim</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_split\">bio_integrity_split</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_set_tag\">bio_integrity_set_tag</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_get_tag\">bio_integrity_get_tag</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_integrity_init\">bio_integrity_init</a>(<a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BLK_DEV_INTEGRITY */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BLOCK */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_BIO_H */</span>", 
];
xr_frag_insert('l/c0/b12cd9a49d95dfd41671d0ff138292069a1c21.xr', __xr_tmp);
