var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PCI Express PCI Hot Plug Driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1995,2001 Compaq Computer Corporation</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 Greg Kroah-Hartman (greg@kroah.com)</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 IBM Corp.</span>", 
"<span class=\"comment\"> * Copyright (C) 2003-2004 Intel Corporation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or (at</span>", 
"<span class=\"comment\"> * your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or</span>", 
"<span class=\"comment\"> * NON INFRINGEMENT.  See the GNU General Public License for more</span>", 
"<span class=\"comment\"> * details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Send feedback to &lt;greg@kroah.com&gt;,&lt;kristen.c.accardi@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"../pci.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"pciehp.h\"", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#pciehp_num_controllers\">pciehp_num_controllers</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#pcie\">pcie</a>-><a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>) + <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pciehp_readl\">pciehp_readl</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#pcie\">pcie</a>-><a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>) + <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pciehp_writew\">pciehp_writew</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#pcie\">pcie</a>-><a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>) + <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pciehp_writel\">pciehp_writel</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#pcie\">pcie</a>-><a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>) + <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Power Control Command */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#POWER_ON\">POWER_ON</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#POWER_OFF\">POWER_OFF</a><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_SLTCTL_PCC\">PCI_EXP_SLTCTL_PCC</a>", 
"", 
"static <a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#pcie_isr\">pcie_isr</a>(int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"static void <a class=\"id\" href=\"#start_int_poll_timer\">start_int_poll_timer</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#sec\">sec</a>);", 
"", 
"<span class=\"comment\">/* This is the interrupt polling timeout function. */</span>", 
"static void <a class=\"id\" href=\"#int_poll_timeout\">int_poll_timeout</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a> = (struct <a class=\"id\" href=\"#controller\">controller</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Poll for interrupt events.  regs == NULL =&gt; polling */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcie_isr\">pcie_isr</a>(0, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timer\">init_timer</a>(&amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#poll_timer\">poll_timer</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pciehp_poll_time\">pciehp_poll_time</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pciehp_poll_time\">pciehp_poll_time</a> = 2; <span class=\"comment\">/* default polling interval is 2 sec */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_int_poll_timer\">start_int_poll_timer</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#pciehp_poll_time\">pciehp_poll_time</a>);", 
"}", 
"", 
"<span class=\"comment\">/* This function starts the interrupt polling timer. */</span>", 
"static void <a class=\"id\" href=\"#start_int_poll_timer\">start_int_poll_timer</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#sec\">sec</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Clamp to sane value */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sec\">sec</a> <= 0) || (<a class=\"id\" href=\"#sec\">sec</a> &gt; 60))", 
"        <span class=\"ts\"/><a class=\"id\" href=\"#sec\">sec</a> = 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#poll_timer\">poll_timer</a>.<a class=\"id\" href=\"#function\">function</a> = &amp;<a class=\"id\" href=\"#int_poll_timeout\">int_poll_timeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#poll_timer\">poll_timer</a>.<a class=\"id\" href=\"#data\">data</a> = (unsigned long)<a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#poll_timer\">poll_timer</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#sec\">sec</a> * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer\">add_timer</a>(&amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#poll_timer\">poll_timer</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pciehp_request_irq\">pciehp_request_irq</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#pcie\">pcie</a>-><a class=\"id\" href=\"#irq\">irq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Install interrupt polling timer. Start with 10 sec delay */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pciehp_poll_mode\">pciehp_poll_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_timer\">init_timer</a>(&amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#poll_timer\">poll_timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_int_poll_timer\">start_int_poll_timer</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 10);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Installs the interrupt handler */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#request_irq\">request_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#pcie_isr\">pcie_isr</a>, <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>, <a class=\"id\" href=\"#MY_NAME\">MY_NAME</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"Cannot get irq %d for the hotplug controller\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pciehp_free_irq\">pciehp_free_irq</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pciehp_poll_mode\">pciehp_poll_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#poll_timer\">poll_timer</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_irq\">free_irq</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#pcie\">pcie</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pcie_poll_cmd\">pcie_poll_cmd</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#slot_status\">slot_status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#timeout\">timeout</a> = 1000;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA\">PCI_EXP_SLTSTA</a>, &amp;<a class=\"id\" href=\"#slot_status\">slot_status</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a> && (<a class=\"id\" href=\"#slot_status\">slot_status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTSTA_CC\">PCI_EXP_SLTSTA_CC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pciehp_writew\">pciehp_writew</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA\">PCI_EXP_SLTSTA</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA_CC\">PCI_EXP_SLTSTA_CC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#timeout\">timeout</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(10);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> -= 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA\">PCI_EXP_SLTSTA</a>, &amp;<a class=\"id\" href=\"#slot_status\">slot_status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a> && (<a class=\"id\" href=\"#slot_status\">slot_status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTSTA_CC\">PCI_EXP_SLTSTA_CC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pciehp_writew\">pciehp_writew</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA\">PCI_EXP_SLTSTA</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA_CC\">PCI_EXP_SLTSTA_CC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"comment\">/* timeout */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pcie_wait_cmd\">pcie_wait_cmd</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#poll\">poll</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#msecs\">msecs</a> = <a class=\"id\" href=\"#pciehp_poll_mode\">pciehp_poll_mode</a> ? 2500 : 1000;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#msecs\">msecs</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#poll\">poll</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcie_poll_cmd\">pcie_poll_cmd</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#wait_event_timeout\">wait_event_timeout</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#queue\">queue</a>, !<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#cmd_busy\">cmd_busy</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_dbg\">ctrl_dbg</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"Command not completed in 1000 msec\\n\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcie_write_cmd - Issue controller command</span>", 
"<span class=\"comment\"> * @ctrl: controller to which the command is issued</span>", 
"<span class=\"comment\"> * @cmd:  command value written to slot control register</span>", 
"<span class=\"comment\"> * @mask: bitmask of slot control register to be modified</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pcie_write_cmd\">pcie_write_cmd</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#slot_status\">slot_status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ctrl_lock\">ctrl_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA\">PCI_EXP_SLTSTA</a>, &amp;<a class=\"id\" href=\"#slot_status\">slot_status</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"%s: Cannot read SLOTSTATUS register\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot_status\">slot_status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTSTA_CC\">PCI_EXP_SLTSTA_CC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#no_cmd_complete\">no_cmd_complete</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * After 1 sec and CMD_COMPLETED still not set, just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * proceed forward to issue the next command according</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to spec. Just print out the error message.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_dbg\">ctrl_dbg</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"CMD_COMPLETED not clear after 1 sec\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#NO_CMD_CMPL\">NO_CMD_CMPL</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This controller semms to notify of command completed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * event even though it supports none of power</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * controller, attention led, power led and EMI.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_dbg\">ctrl_dbg</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"Unexpected CMD_COMPLETED. Need to \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"wait for command completed event.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#no_cmd_complete\">no_cmd_complete</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_dbg\">ctrl_dbg</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"Unexpected CMD_COMPLETED. Maybe \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"the controller is broken.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTCTL\">PCI_EXP_SLTCTL</a>, &amp;<a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"%s: Cannot read SLOTCTRL register\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a> &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a> |= (<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#cmd_busy\">cmd_busy</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pciehp_writew\">pciehp_writew</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTCTL\">PCI_EXP_SLTCTL</a>, <a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"Cannot write to SLOTCTRL register\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for command completion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a> && !<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#no_cmd_complete\">no_cmd_complete</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#poll\">poll</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if hotplug interrupt is not enabled or command</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * completed interrupt is not enabled, we need to poll</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * command completed event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTCTL_HPIE\">PCI_EXP_SLTCTL_HPIE</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTCTL_CCIE\">PCI_EXP_SLTCTL_CCIE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll\">poll</a> = 1;", 
"                <a class=\"id\" href=\"#pcie_wait_cmd\">pcie_wait_cmd</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#poll\">poll</a>);", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ctrl_lock\">ctrl_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_link_active\">check_link_active</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#link_status\">link_status</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_LNKSTA\">PCI_EXP_LNKSTA</a>, &amp;<a class=\"id\" href=\"#link_status\">link_status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return !!(<a class=\"id\" href=\"#link_status\">link_status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_LNKSTA_DLLLA\">PCI_EXP_LNKSTA_DLLLA</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pcie_wait_link_active\">pcie_wait_link_active</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#timeout\">timeout</a> = 1000;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#check_link_active\">check_link_active</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#timeout\">timeout</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(10);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> -= 10;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_link_active\">check_link_active</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl_dbg\">ctrl_dbg</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"Data Link Layer Link Active not set in 1000 msec\\n\");", 
"}", 
"", 
"int <a class=\"id\" href=\"#pciehp_check_link_status\">pciehp_check_link_status</a>(struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#lnk_status\">lnk_status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"        <span class=\"comment\">/*</span>", 
"<span class=\"comment\">         * Data Link Layer Link Active Reporting must be capable for</span>", 
"<span class=\"comment\">         * hot-plug capable downstream port. But old controller might</span>", 
"<span class=\"comment\">         * not implement it. In this case, we wait for 1000 ms.</span>", 
"<span class=\"comment\">         */</span>", 
"        if (<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#link_active_reporting\">link_active_reporting</a>){", 
"                <span class=\"comment\">/* Wait for Data Link Layer Link Active bit to be set */</span>", 
"                <a class=\"id\" href=\"#pcie_wait_link_active\">pcie_wait_link_active</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"                <span class=\"comment\">/*</span>", 
"<span class=\"comment\">                 * We must wait for 100 ms after the Data Link Layer</span>", 
"<span class=\"comment\">                 * Link Active bit reads 1b before initiating a</span>", 
"<span class=\"comment\">                 * configuration access to the hot added device.</span>", 
"<span class=\"comment\">                 */</span>", 
"                <a class=\"id\" href=\"#msleep\">msleep</a>(100);", 
"        } else", 
"                <a class=\"id\" href=\"#msleep\">msleep</a>(1000);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_LNKSTA\">PCI_EXP_LNKSTA</a>, &amp;<a class=\"id\" href=\"#lnk_status\">lnk_status</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"Cannot read LNKSTATUS register\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl_dbg\">ctrl_dbg</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"%s: lnk_status = %x\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#lnk_status\">lnk_status</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#lnk_status\">lnk_status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_LNKSTA_LT\">PCI_EXP_LNKSTA_LT</a>) ||", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#lnk_status\">lnk_status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_LNKSTA_NLW\">PCI_EXP_LNKSTA_NLW</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"Link Training Error occurs \\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#pciehp_get_attention_status\">pciehp_get_attention_status</a>(struct <a class=\"id\" href=\"#slot\">slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#atten_led_state\">atten_led_state</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTCTL\">PCI_EXP_SLTCTL</a>, &amp;<a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"%s: Cannot read SLOTCTRL register\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl_dbg\">ctrl_dbg</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"%s: SLOTCTRL %x, value read %x\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#pcie\">pcie</a>-><a class=\"id\" href=\"#port\">port</a>) + <a class=\"id\" href=\"#PCI_EXP_SLTCTL\">PCI_EXP_SLTCTL</a>, <a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atten_led_state\">atten_led_state</a> = (<a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTCTL_AIC\">PCI_EXP_SLTCTL_AIC</a>) >> 6;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#atten_led_state\">atten_led_state</a>) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = 0xFF;<span class=\"ts\"/><span class=\"comment\">/* Reserved */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = 1;<span class=\"ts\"/><span class=\"comment\">/* On */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = 2;<span class=\"ts\"/><span class=\"comment\">/* Blink */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 3:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* Off */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = 0xFF;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#pciehp_get_power_status\">pciehp_get_power_status</a>(struct <a class=\"id\" href=\"#slot\">slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pwr_state\">pwr_state</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTCTL\">PCI_EXP_SLTCTL</a>, &amp;<a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"%s: Cannot read SLOTCTRL register\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl_dbg\">ctrl_dbg</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"%s: SLOTCTRL %x value read %x\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#pcie\">pcie</a>-><a class=\"id\" href=\"#port\">port</a>) + <a class=\"id\" href=\"#PCI_EXP_SLTCTL\">PCI_EXP_SLTCTL</a>, <a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwr_state\">pwr_state</a> = (<a class=\"id\" href=\"#slot_ctrl\">slot_ctrl</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTCTL_PCC\">PCI_EXP_SLTCTL_PCC</a>) >> 10;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#pwr_state\">pwr_state</a>) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = 0xFF;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#pciehp_get_latch_status\">pciehp_get_latch_status</a>(struct <a class=\"id\" href=\"#slot\">slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#slot_status\">slot_status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA\">PCI_EXP_SLTSTA</a>, &amp;<a class=\"id\" href=\"#slot_status\">slot_status</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"%s: Cannot read SLOTSTATUS register\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = !!(<a class=\"id\" href=\"#slot_status\">slot_status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTSTA_MRLSS\">PCI_EXP_SLTSTA_MRLSS</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#pciehp_get_adapter_status\">pciehp_get_adapter_status</a>(struct <a class=\"id\" href=\"#slot\">slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#slot_status\">slot_status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA\">PCI_EXP_SLTSTA</a>, &amp;<a class=\"id\" href=\"#slot_status\">slot_status</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"%s: Cannot read SLOTSTATUS register\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = !!(<a class=\"id\" href=\"#slot_status\">slot_status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTSTA_PDS\">PCI_EXP_SLTSTA_PDS</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#pciehp_query_power_fault\">pciehp_query_power_fault</a>(struct <a class=\"id\" href=\"#slot\">slot</a> *<a class=\"id\" href=\"#slot\">slot</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#controller\">controller</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#slot_status\">slot_status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pciehp_readw\">pciehp_readw</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#PCI_EXP_SLTSTA\">PCI_EXP_SLTSTA</a>, &amp;<a class=\"id\" href=\"#slot_status\">slot_status</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl_err\">ctrl_err</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, \"Cannot check for power fault\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return !!(<a class=\"id\" href=\"#slot_status\">slot_status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_SLTSTA_PFD\">PCI_EXP_SLTSTA_PFD</a>);", 
];
xr_frag_insert('l/c1/20c57c6ce6e1cf20180c6e76493068f275c9b2.xr', __xr_tmp);
