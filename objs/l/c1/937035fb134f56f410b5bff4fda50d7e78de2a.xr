var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmpv6_param_prob\">icmpv6_param_prob</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ICMPV6_HDR_FIELD\">ICMPV6_HDR_FIELD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  ((<a class=\"id\" href=\"#u8\">u8</a> *)&amp;<a class=\"id\" href=\"#fhdr\">fhdr</a>-><a class=\"id\" href=\"#frag_off\">frag_off</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#nh\">nh</a> = <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_sub\">csum_sub</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#csum_partial\">csum_partial</a>(<a class=\"id\" href=\"#nh\">nh</a>, (<a class=\"id\" href=\"#u8\">u8</a> *)(<a class=\"id\" href=\"#fhdr\">fhdr</a> + 1) - <a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  0));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is this the final fragment? */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#fhdr\">fhdr</a>-><a class=\"id\" href=\"#frag_off\">frag_off</a> &amp; <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#IP6_MF\">IP6_MF</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we already have some bits beyond end</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or have different end, the segment is corrupted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_LAST_IN\">INET_FRAG_LAST_IN</a>) && <a class=\"id\" href=\"#end\">end</a> != <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> |= <a class=\"id\" href=\"#INET_FRAG_LAST_IN\">INET_FRAG_LAST_IN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check if the fragment is rounded to 8 bytes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Required by the RFC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &amp; 0x7) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* RFC2460 says always send parameter problem in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this case. -DaveM</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IP6_INC_STATS_BH\">IP6_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ip6_dst_idev\">ip6_dst_idev</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#IPSTATS_MIB_INHDRERRORS\">IPSTATS_MIB_INHDRERRORS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmpv6_param_prob\">icmpv6_param_prob</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ICMPV6_HDR_FIELD\">ICMPV6_HDR_FIELD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#ipv6hdr\">ipv6hdr</a>, <a class=\"id\" href=\"#payload_len\">payload_len</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Some bits beyond end -&gt; corruption. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_LAST_IN\">INET_FRAG_LAST_IN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Point into the IP datagram 'data' part. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_pull\">pskb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, (<a class=\"id\" href=\"#u8\">u8</a> *) (<a class=\"id\" href=\"#fhdr\">fhdr</a> + 1) - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pskb_trim_rcsum\">pskb_trim_rcsum</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find out which fragments are in front and at the back of us</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the chain of fragments so far.  We must know where to put</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this fragment, right?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments_tail\">fragments_tail</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prev\">prev</a> || <a class=\"id\" href=\"#FRAG6_CB\">FRAG6_CB</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>; <a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#FRAG6_CB\">FRAG6_CB</a>(<a class=\"id\" href=\"#next\">next</a>)-><a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* bingo! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* RFC5722, Section 4:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *                                  When reassembling an IPv6 datagram, if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   one or more its constituent fragments is determined to be an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   overlapping fragment, the entire datagram (and any constituent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   fragments, including those not yet received) MUST be silently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   discarded.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for overlap with preceding fragment. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#FRAG6_CB\">FRAG6_CB</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#len\">len</a>) - <a class=\"id\" href=\"#offset\">offset</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#discard_fq\">discard_fq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Look for overlap with succeeding segment. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#FRAG6_CB\">FRAG6_CB</a>(<a class=\"id\" href=\"#next\">next</a>)-><a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#discard_fq\">discard_fq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FRAG6_CB\">FRAG6_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Insert this fragment in the chain of fragments. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments_tail\">fragments_tail</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#iif\">iif</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#stamp\">stamp</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#meat\">meat</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The first fragment.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nhoffset is obtained from the first fragment, of course.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#nhoffset\">nhoffset</a> = <a class=\"id\" href=\"#nhoff\">nhoff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> |= <a class=\"id\" href=\"#INET_FRAG_FIRST_IN\">INET_FRAG_FIRST_IN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> == (<a class=\"id\" href=\"#INET_FRAG_FIRST_IN\">INET_FRAG_FIRST_IN</a> | <a class=\"id\" href=\"#INET_FRAG_LAST_IN\">INET_FRAG_LAST_IN</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#meat\">meat</a> == <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ip6_frag_reasm\">ip6_frag_reasm</a>(<a class=\"id\" href=\"#fq\">fq</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lru_list\">lru_list</a>, &amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#lru_list\">lru_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return -1;", 
"", 
"<a class=\"id\" href=\"#discard_fq\">discard_fq</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fq_kill\">fq_kill</a>(<a class=\"id\" href=\"#fq\">fq</a>);", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP6_INC_STATS\">IP6_INC_STATS</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ip6_dst_idev\">ip6_dst_idev</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IPSTATS_MIB_REASMFAILS\">IPSTATS_MIB_REASMFAILS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check if this packet is complete.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns NULL on failure by any reason, and pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to current nexthdr field in reassembled frame.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It is called with locked fq, and caller must check that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>queue is eligible for reassembly i.e. it is not COMPLETE,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the last and the first frames arrived and all the bits are here.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ip6_frag_reasm\">ip6_frag_reasm</a>(struct <a class=\"id\" href=\"#frag_queue\">frag_queue</a> *<a class=\"id\" href=\"#fq\">fq</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#fp\">fp</a>, *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>;", 
"<span class=\"ts\"/>int    <a class=\"id\" href=\"#payload_len\">payload_len</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nhoff\">nhoff</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fq_kill\">fq_kill</a>(<a class=\"id\" href=\"#fq\">fq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make the one we just received the head. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#skb_clone\">skb_clone</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fp\">fp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_oom\">out_oom</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments_tail\">fragments_tail</a> = <a class=\"id\" href=\"#fp\">fp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#fp\">fp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_morph\">skb_morph</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#head\">head</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#FRAG6_CB\">FRAG6_CB</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#offset\">offset</a> != 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unfragmented part is taken from the first segment. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#payload_len\">payload_len</a> = ((<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#head\">head</a>)) -", 
"<span class=\"ts\"/><span class=\"ts\"/>       sizeof(struct <a class=\"id\" href=\"#ipv6hdr\">ipv6hdr</a>) + <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/>       sizeof(struct <a class=\"id\" href=\"#frag_hdr\">frag_hdr</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#payload_len\">payload_len</a> &gt; <a class=\"id\" href=\"#IPV6_MAXPLEN\">IPV6_MAXPLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_oversize\">out_oversize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Head of list must not be cloned. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#head\">head</a>) && <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#head\">head</a>, 0, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_oom\">out_oom</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the first fragment is fragmented itself, we split</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it to two chunks: the first with data and paged part</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the second, holding only fragments. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#plen\">plen</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>)) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_oom\">out_oom</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#clone\">clone</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_frag_list_init\">skb_frag_list_init</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plen\">plen</a> += <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#data_len\">data_len</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data_len\">data_len</a> - <a class=\"id\" href=\"#plen\">plen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data_len\">data_len</a> -= <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We have to remove fragment header from datagram and to relocate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * header in order to calculate ICV correctly. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhoff\">nhoff</a> = <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#nhoffset\">nhoffset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#head\">head</a>)[<a class=\"id\" href=\"#nhoff\">nhoff</a>] = <a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(<a class=\"id\" href=\"#head\">head</a>)[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#head\">head</a> + sizeof(struct <a class=\"id\" href=\"#frag_hdr\">frag_hdr</a>), <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#head\">head</a>) - sizeof(struct <a class=\"id\" href=\"#frag_hdr\">frag_hdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> += sizeof(struct <a class=\"id\" href=\"#frag_hdr\">frag_hdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#network_header\">network_header</a> += sizeof(struct <a class=\"id\" href=\"#frag_hdr\">frag_hdr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_transport_header\">skb_reset_transport_header</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#head\">head</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fp\">fp</a>=<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#fp\">fp</a>; <a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data_len\">data_len</a> += <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> != <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_add\">csum_add</a>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#truesize\">truesize</a> += <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#truesize\">truesize</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a> = <a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#stamp\">stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipv6_hdr\">ipv6_hdr</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#payload_len\">payload_len</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#payload_len\">payload_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP6CB\">IP6CB</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#nhoff\">nhoff</a> = <a class=\"id\" href=\"#nhoff\">nhoff</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Yes, and fold redundant checksum back. 8) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_partial\">csum_partial</a>(<a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#head\">head</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#skb_network_header_len\">skb_network_header_len</a>(<a class=\"id\" href=\"#head\">head</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#csum\">csum</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP6_INC_STATS_BH\">IP6_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#__in6_dev_get\">__in6_dev_get</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#IPSTATS_MIB_REASMOKS\">IPSTATS_MIB_REASMOKS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments_tail\">fragments_tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#out_oversize\">out_oversize</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"ip6_frag_reasm: payload len = %d\\n\", <a class=\"id\" href=\"#payload_len\">payload_len</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"<a class=\"id\" href=\"#out_oom\">out_oom</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"ip6_frag_reasm: no memory for reassembly\\n\");", 
"<a class=\"id\" href=\"#out_fail\">out_fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP6_INC_STATS_BH\">IP6_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#__in6_dev_get\">__in6_dev_get</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#IPSTATS_MIB_REASMFAILS\">IPSTATS_MIB_REASMFAILS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ipv6_frag_rcv\">ipv6_frag_rcv</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#frag_hdr\">frag_hdr</a> *<a class=\"id\" href=\"#fhdr\">fhdr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#frag_queue\">frag_queue</a> *<a class=\"id\" href=\"#fq\">fq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipv6hdr\">ipv6hdr</a> *<a class=\"id\" href=\"#hdr\">hdr</a> = <a class=\"id\" href=\"#ipv6_hdr\">ipv6_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP6_INC_STATS_BH\">IP6_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ip6_dst_idev\">ip6_dst_idev</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)), <a class=\"id\" href=\"#IPSTATS_MIB_REASMREQDS\">IPSTATS_MIB_REASMREQDS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Jumbo payload inhibits frag. header */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#payload_len\">payload_len</a>==0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_hdr\">fail_hdr</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, (<a class=\"id\" href=\"#skb_transport_offset\">skb_transport_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#frag_hdr\">frag_hdr</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_hdr\">fail_hdr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hdr\">hdr</a> = <a class=\"id\" href=\"#ipv6_hdr\">ipv6_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fhdr\">fhdr</a> = (struct <a class=\"id\" href=\"#frag_hdr\">frag_hdr</a> *)<a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#fhdr\">fhdr</a>-><a class=\"id\" href=\"#frag_off\">frag_off</a> &amp; <a class=\"id\" href=\"#htons\">htons</a>(0xFFF9))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It is not a fragmented frame */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> += sizeof(struct <a class=\"id\" href=\"#frag_hdr\">frag_hdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IP6_INC_STATS_BH\">IP6_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ip6_dst_idev\">ip6_dst_idev</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)), <a class=\"id\" href=\"#IPSTATS_MIB_REASMOKS\">IPSTATS_MIB_REASMOKS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IP6CB\">IP6CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nhoff\">nhoff</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#fhdr\">fhdr</a> - <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#mem\">mem</a>) &gt; <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#high_thresh\">high_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip6_evictor\">ip6_evictor</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ip6_dst_idev\">ip6_dst_idev</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a> = <a class=\"id\" href=\"#fq_find\">fq_find</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#fhdr\">fhdr</a>-><a class=\"id\" href=\"#identification\">identification</a>, &amp;<a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, &amp;<a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#daddr\">daddr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fq\">fq</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ip6_frag_queue\">ip6_frag_queue</a>(<a class=\"id\" href=\"#fq\">fq</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#fhdr\">fhdr</a>, <a class=\"id\" href=\"#IP6CB\">IP6CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nhoff\">nhoff</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq_put\">fq_put</a>(<a class=\"id\" href=\"#fq\">fq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP6_INC_STATS_BH\">IP6_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ip6_dst_idev\">ip6_dst_idev</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)), <a class=\"id\" href=\"#IPSTATS_MIB_REASMFAILS\">IPSTATS_MIB_REASMFAILS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return -1;", 
"", 
"<a class=\"id\" href=\"#fail_hdr\">fail_hdr</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP6_INC_STATS\">IP6_INC_STATS</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ip6_dst_idev\">ip6_dst_idev</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)), <a class=\"id\" href=\"#IPSTATS_MIB_INHDRERRORS\">IPSTATS_MIB_INHDRERRORS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmpv6_param_prob\">icmpv6_param_prob</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ICMPV6_HDR_FIELD\">ICMPV6_HDR_FIELD</a>, <a class=\"id\" href=\"#skb_network_header_len\">skb_network_header_len</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#inet6_protocol\">inet6_protocol</a> <a class=\"id\" href=\"#frag_protocol\">frag_protocol</a> =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a><span class=\"ts\"/>=<span class=\"ts\"/><a class=\"id\" href=\"#ipv6_frag_rcv\">ipv6_frag_rcv</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>=<span class=\"ts\"/><a class=\"id\" href=\"#INET6_PROTO_NOPOLICY\">INET6_PROTO_NOPOLICY</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#ip6_frags_ns_ctl_table\">ip6_frags_ns_ctl_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"ip6frag_high_thresh\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#high_thresh\">high_thresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"ip6frag_low_thresh\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#low_thresh\">low_thresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"ip6frag_time\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_jiffies\">proc_dointvec_jiffies</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#ip6_frags_ctl_table\">ip6_frags_ctl_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"ip6frag_secret_interval\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#secret_interval\">secret_interval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_jiffies\">proc_dointvec_jiffies</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__net_init\">__net_init</a> <a class=\"id\" href=\"#ip6_frags_ns_sysctl_register\">ip6_frags_ns_sysctl_register</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#hdr\">hdr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#ip6_frags_ns_ctl_table\">ip6_frags_ns_ctl_table</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#init_net\">init_net</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#kmemdup\">kmemdup</a>(<a class=\"id\" href=\"#table\">table</a>, sizeof(<a class=\"id\" href=\"#ip6_frags_ns_ctl_table\">ip6_frags_ns_ctl_table</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_alloc\">err_alloc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>[0].<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#high_thresh\">high_thresh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>[1].<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#low_thresh\">low_thresh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>[2].<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hdr\">hdr</a> = <a class=\"id\" href=\"#register_net_sysctl_table\">register_net_sysctl_table</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#net_ipv6_ctl_path\">net_ipv6_ctl_path</a>, <a class=\"id\" href=\"#table\">table</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hdr\">hdr</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_reg\">err_reg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#frags_hdr\">frags_hdr</a> = <a class=\"id\" href=\"#hdr\">hdr</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_reg\">err_reg</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#init_net\">init_net</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#table\">table</a>);", 
"<a class=\"id\" href=\"#err_alloc\">err_alloc</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#ip6_frags_ns_sysctl_unregister\">ip6_frags_ns_sysctl_unregister</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#frags_hdr\">frags_hdr</a>-><a class=\"id\" href=\"#ctl_table_arg\">ctl_table_arg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_net_sysctl_table\">unregister_net_sysctl_table</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#frags_hdr\">frags_hdr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#init_net\">init_net</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#table\">table</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#ip6_ctl_header\">ip6_ctl_header</a>;", 
"", 
"static int <a class=\"id\" href=\"#ip6_frags_sysctl_register\">ip6_frags_sysctl_register</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_ctl_header\">ip6_ctl_header</a> = <a class=\"id\" href=\"#register_net_sysctl_rotable\">register_net_sysctl_rotable</a>(<a class=\"id\" href=\"#net_ipv6_ctl_path\">net_ipv6_ctl_path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags_ctl_table\">ip6_frags_ctl_table</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ip6_ctl_header\">ip6_ctl_header</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ? -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a> : 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ip6_frags_sysctl_unregister\">ip6_frags_sysctl_unregister</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_net_sysctl_table\">unregister_net_sysctl_table</a>(<a class=\"id\" href=\"#ip6_ctl_header\">ip6_ctl_header</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ip6_frags_ns_sysctl_register\">ip6_frags_ns_sysctl_register</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ip6_frags_ns_sysctl_unregister\">ip6_frags_ns_sysctl_unregister</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ip6_frags_sysctl_register\">ip6_frags_sysctl_register</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ip6_frags_sysctl_unregister\">ip6_frags_sysctl_unregister</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__net_init\">__net_init</a> <a class=\"id\" href=\"#ipv6_frags_init_net\">ipv6_frags_init_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#high_thresh\">high_thresh</a> = <a class=\"id\" href=\"#IPV6_FRAG_HIGH_THRESH\">IPV6_FRAG_HIGH_THRESH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#low_thresh\">low_thresh</a> = <a class=\"id\" href=\"#IPV6_FRAG_LOW_THRESH\">IPV6_FRAG_LOW_THRESH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#IPV6_FRAG_TIMEOUT\">IPV6_FRAG_TIMEOUT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frags_init_net\">inet_frags_init_net</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ip6_frags_ns_sysctl_register\">ip6_frags_ns_sysctl_register</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#ipv6_frags_exit_net\">ipv6_frags_exit_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags_ns_sysctl_unregister\">ip6_frags_ns_sysctl_unregister</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frags_exit_net\">inet_frags_exit_net</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#frags\">frags</a>, &amp;<a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> <a class=\"id\" href=\"#ip6_frags_ops\">ip6_frags_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a> = <a class=\"id\" href=\"#ipv6_frags_init_net\">ipv6_frags_init_net</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit\">exit</a> = <a class=\"id\" href=\"#ipv6_frags_exit_net\">ipv6_frags_exit_net</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ipv6_frag_init\">ipv6_frag_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#inet6_add_protocol\">inet6_add_protocol</a>(&amp;<a class=\"id\" href=\"#frag_protocol\">frag_protocol</a>, <a class=\"id\" href=\"#IPPROTO_FRAGMENT\">IPPROTO_FRAGMENT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ip6_frags_sysctl_register\">ip6_frags_sysctl_register</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_sysctl\">err_sysctl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_pernet_subsys\">register_pernet_subsys</a>(&amp;<a class=\"id\" href=\"#ip6_frags_ops\">ip6_frags_ops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_pernet\">err_pernet</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#hashfn\">hashfn</a> = <a class=\"id\" href=\"#ip6_hashfn\">ip6_hashfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#constructor\">constructor</a> = <a class=\"id\" href=\"#ip6_frag_init\">ip6_frag_init</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#skb_free\">skb_free</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#qsize\">qsize</a> = sizeof(struct <a class=\"id\" href=\"#frag_queue\">frag_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#ip6_frag_match\">ip6_frag_match</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#frag_expire\">frag_expire</a> = <a class=\"id\" href=\"#ip6_frag_expire\">ip6_frag_expire</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>.<a class=\"id\" href=\"#secret_interval\">secret_interval</a> = 10 * 60 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frags_init\">inet_frags_init</a>(&amp;<a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#err_pernet\">err_pernet</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags_sysctl_unregister\">ip6_frags_sysctl_unregister</a>();", 
"<a class=\"id\" href=\"#err_sysctl\">err_sysctl</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet6_del_protocol\">inet6_del_protocol</a>(&amp;<a class=\"id\" href=\"#frag_protocol\">frag_protocol</a>, <a class=\"id\" href=\"#IPPROTO_FRAGMENT\">IPPROTO_FRAGMENT</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#ipv6_frag_exit\">ipv6_frag_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frags_fini\">inet_frags_fini</a>(&amp;<a class=\"id\" href=\"#ip6_frags\">ip6_frags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip6_frags_sysctl_unregister\">ip6_frags_sysctl_unregister</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_pernet_subsys\">unregister_pernet_subsys</a>(&amp;<a class=\"id\" href=\"#ip6_frags_ops\">ip6_frags_ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet6_del_protocol\">inet6_del_protocol</a>(&amp;<a class=\"id\" href=\"#frag_protocol\">frag_protocol</a>, <a class=\"id\" href=\"#IPPROTO_FRAGMENT\">IPPROTO_FRAGMENT</a>);", 
"}", 
];
xr_frag_insert('l/c1/937035fb134f56f410b5bff4fda50d7e78de2a.xr', __xr_tmp);
