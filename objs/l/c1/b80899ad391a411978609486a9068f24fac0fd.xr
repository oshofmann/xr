var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_UACCESS_H__\">__LINUX_UACCESS_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_UACCESS_H__\">__LINUX_UACCESS_H__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#preempt\">preempt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These routines enable/disable the pagefault handler in that</span>", 
"<span class=\"comment\"> * it will not take any locks and go straight to the fixup table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * They have great resemblance to the preempt_disable/enable calls</span>", 
"<span class=\"comment\"> * and in fact they are identical; this is because currently there is</span>", 
"<span class=\"comment\"> * no other way to make the pagefault handlers do this. So we do</span>", 
"<span class=\"comment\"> * disable preemption but we don't necessarily care about that.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pagefault_disable\">pagefault_disable</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_preempt_count\">inc_preempt_count</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure to have issued the store before a pagefault</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can hit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pagefault_enable\">pagefault_enable</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure to issue those last loads/stores before enabling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pagefault handler again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_preempt_count\">dec_preempt_count</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure we do..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_check_resched\">preempt_check_resched</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_NOCACHE_UACCESS\">ARCH_HAS_NOCACHE_UACCESS</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#__copy_from_user_inatomic_nocache\">__copy_from_user_inatomic_nocache</a>(void *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__copy_from_user_inatomic\">__copy_from_user_inatomic</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#__copy_from_user_nocache\">__copy_from_user_nocache</a>(void *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__copy_from_user\">__copy_from_user</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ARCH_HAS_NOCACHE_UACCESS */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * probe_kernel_address(): safely attempt to read from a location</span>", 
"<span class=\"comment\"> * @addr: address to read from - its type is type typeof(retval)*</span>", 
"<span class=\"comment\"> * @retval: read into this variable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Safely read from address @addr into variable @revtal.  If a kernel fault</span>", 
"<span class=\"comment\"> * happens, handle that and return -EFAULT.</span>", 
"<span class=\"comment\"> * We ensure that the __get_user() is executed in atomic context so that</span>", 
"<span class=\"comment\"> * do_page_fault() doesn't attempt to take mmap_sem.  This makes</span>", 
"<span class=\"comment\"> * probe_kernel_address() suitable for use within regions where the caller</span>", 
"<span class=\"comment\"> * already holds mmap_sem, or other locks which nest inside mmap_sem.</span>", 
"<span class=\"comment\"> * This must be a macro because __get_user() needs to know the types of the</span>", 
"<span class=\"comment\"> * args.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We don't include enough header files to be able to do the set_fs().  We</span>", 
"<span class=\"comment\"> * require that the probe_kernel_address() caller will do that.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#retval\">retval</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagefault_disable\">pagefault_disable</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__copy_from_user_inatomic\">__copy_from_user_inatomic</a>(&amp;(<a class=\"id\" href=\"#retval\">retval</a>), (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#retval\">retval</a>) <a class=\"id\" href=\"#__user\">__user</a> *)(<a class=\"id\" href=\"#addr\">addr</a>), sizeof(<a class=\"id\" href=\"#retval\">retval</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagefault_enable\">pagefault_enable</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>})", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * probe_kernel_read(): safely attempt to read from a location</span>", 
"<span class=\"comment\"> * @dst: pointer to the buffer that shall take the data</span>", 
"<span class=\"comment\"> * @src: address to read from</span>", 
"<span class=\"comment\"> * @size: size of the data chunk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Safely read from address @src to the buffer at @dst.  If a kernel fault</span>", 
"<span class=\"comment\"> * happens, handle that and return -EFAULT.</span>", 
"<span class=\"comment\"> */</span>", 
"extern long <a class=\"id\" href=\"#probe_kernel_read\">probe_kernel_read</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"extern long <a class=\"id\" href=\"#__probe_kernel_read\">__probe_kernel_read</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * probe_kernel_write(): safely attempt to write to a location</span>", 
"<span class=\"comment\"> * @dst: address to write to</span>", 
"<span class=\"comment\"> * @src: pointer to the data that shall be written</span>", 
"<span class=\"comment\"> * @size: size of the data chunk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Safely write to address @dst from the buffer at @src.  If a kernel fault</span>", 
"<span class=\"comment\"> * happens, handle that and return -EFAULT.</span>", 
"<span class=\"comment\"> */</span>", 
"extern long <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#probe_kernel_write\">probe_kernel_write</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"extern long <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__probe_kernel_write\">__probe_kernel_write</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* __LINUX_UACCESS_H__ */</span>", 
];
xr_frag_insert('l/c1/b80899ad391a411978609486a9068f24fac0fd.xr', __xr_tmp);
