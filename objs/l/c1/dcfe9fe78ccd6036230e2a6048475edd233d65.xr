var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  scsi.c Copyright (C) 1992 Drew Eckhardt</span>", 
"<span class=\"comment\"> *         Copyright (C) 1993, 1994, 1995, 1999 Eric Youngdale</span>", 
"<span class=\"comment\"> *         Copyright (C) 2002, 2003 Christoph Hellwig</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  generic mid-level SCSI driver</span>", 
"<span class=\"comment\"> *      Initial versions: Drew Eckhardt</span>", 
"<span class=\"comment\"> *      Subsequent revisions: Eric Youngdale</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  &lt;drew@colorado.edu&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Bug correction thanks go to :</span>", 
"<span class=\"comment\"> *      Rik Faith &lt;faith@cs.unc.edu&gt;</span>", 
"<span class=\"comment\"> *      Tommy Thorn &lt;tthorn&gt;</span>", 
"<span class=\"comment\"> *      Thomas Wuensche &lt;tw@fgb1.fgb.mw.tu-muenchen.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Modified by Eric Youngdale eric@andante.org or ericy@gnu.ai.mit.edu to</span>", 
"<span class=\"comment\"> *  add scatter-gather, multiple outstanding request, and other</span>", 
"<span class=\"comment\"> *  enhancements.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Native multichannel, wide scsi, /proc/scsi and hot plugging</span>", 
"<span class=\"comment\"> *  support added by Michael Neuffer &lt;mike@i-connect.net&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Added request_module(\"scsi_hostadapter\") for kerneld:</span>", 
"<span class=\"comment\"> *  (Put an \"alias scsi_hostadapter your_hostadapter\" in /etc/modprobe.conf)</span>", 
"<span class=\"comment\"> *  Bjorn Ekwall  &lt;bj0rn@blox.se&gt;</span>", 
"<span class=\"comment\"> *  (changed to kmod)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Major improvements to the timeout, abort, and reset processing,</span>", 
"<span class=\"comment\"> *  as well as performance modifications for large queue depths by</span>", 
"<span class=\"comment\"> *  Leonard N. Zubkoff &lt;lnz@dandelion.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Converted cli() code to spinlocks, Ingo Molnar</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Jiffies wrap fixes (host-&gt;resetting), 3 Dec 1998 Andrea Arcangeli</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  out_of_space hacks, D. Gilbert (dpg) 990608</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi\">scsi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_dbg\">scsi_dbg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_device\">scsi_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_driver\">scsi_driver</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_eh\">scsi_eh</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_host\">scsi_host</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_tcq\">scsi_tcq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"scsi_priv.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"scsi_logging.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_TRACE_POINTS\">CREATE_TRACE_POINTS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#scsi\">scsi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static void <a class=\"id\" href=\"#scsi_done\">scsi_done</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Definitions and constants.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MIN_RESET_DELAY\">MIN_RESET_DELAY</a> (2*<a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"<span class=\"comment\">/* Do not call reset on error if we just did a reset within 15 sec. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MIN_RESET_PERIOD\">MIN_RESET_PERIOD</a> (15*<a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note - the initial logging level can be set here to log events at boot time.</span>", 
"<span class=\"comment\"> * After the system is up, you may enable logging via the /proc interface.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#scsi_logging_level\">scsi_logging_level</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCSI_LOGGING\">CONFIG_SCSI_LOGGING</a>)", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_logging_level\">scsi_logging_level</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* NB: These are exposed through /proc/scsi/scsi and form part of the ABI.</span>", 
"<span class=\"comment\"> * You may not alter any existing entry (although adding new ones is</span>", 
"<span class=\"comment\"> * encouraged once assigned by ANSI/INCITS T10</span>", 
"<span class=\"comment\"> */</span>", 
"static const char *const <a class=\"id\" href=\"#scsi_device_types\">scsi_device_types</a>[] = {", 
"<span class=\"ts\"/>\"Direct-Access    \",", 
"<span class=\"ts\"/>\"Sequential-Access\",", 
"<span class=\"ts\"/>\"Printer          \",", 
"<span class=\"ts\"/>\"Processor        \",", 
"<span class=\"ts\"/>\"WORM             \",", 
"<span class=\"ts\"/>\"CD-ROM           \",", 
"<span class=\"ts\"/>\"Scanner          \",", 
"<span class=\"ts\"/>\"Optical Device   \",", 
"<span class=\"ts\"/>\"Medium Changer   \",", 
"<span class=\"ts\"/>\"Communications   \",", 
"<span class=\"ts\"/>\"ASC IT8          \",", 
"<span class=\"ts\"/>\"ASC IT8          \",", 
"<span class=\"ts\"/>\"RAID             \",", 
"<span class=\"ts\"/>\"Enclosure        \",", 
"<span class=\"ts\"/>\"Direct-Access-RBC\",", 
"<span class=\"ts\"/>\"Optical card     \",", 
"<span class=\"ts\"/>\"Bridge controller\",", 
"<span class=\"ts\"/>\"Object storage   \",", 
"<span class=\"ts\"/>\"Automation/Drive \",", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_device_type - Return 17 char string indicating device type.</span>", 
"<span class=\"comment\"> * @type: type number to look up</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"const char * <a class=\"id\" href=\"#scsi_device_type\">scsi_device_type</a>(unsigned <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == 0x1e)", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"Well-known LUN   \";", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == 0x1f)", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"No Device        \";", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#scsi_device_types\">scsi_device_types</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"Unknown          \";", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scsi_device_types\">scsi_device_types</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_device_type\">scsi_device_type</a>);", 
"", 
"struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a><span class=\"ts\"/>*<a class=\"id\" href=\"#cmd_slab\">cmd_slab</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a><span class=\"ts\"/>*<a class=\"id\" href=\"#sense_slab\">sense_slab</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#users\">users</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cmd_name\">cmd_name</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sense_name\">sense_name</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_flags\">slab_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> <a class=\"id\" href=\"#scsi_cmd_pool\">scsi_cmd_pool</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cmd_name\">cmd_name</a><span class=\"ts\"/>= \"scsi_cmd_cache\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sense_name\">sense_name</a><span class=\"ts\"/>= \"scsi_sense_cache\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#slab_flags\">slab_flags</a><span class=\"ts\"/>= <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> <a class=\"id\" href=\"#scsi_cmd_dma_pool\">scsi_cmd_dma_pool</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cmd_name\">cmd_name</a><span class=\"ts\"/>= \"scsi_cmd_cache(DMA)\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sense_name\">sense_name</a><span class=\"ts\"/>= \"scsi_sense_cache(DMA)\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#slab_flags\">slab_flags</a><span class=\"ts\"/>= <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_CACHE_DMA\">SLAB_CACHE_DMA</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a><span class=\"ts\"/>= <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#host_cmd_pool_mutex\">host_cmd_pool_mutex</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_pool_alloc_command - internal function to get a fully allocated command</span>", 
"<span class=\"comment\"> * @pool:<span class=\"ts\"/>slab pool to allocate the command from</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>mask for the allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a fully allocated command (with the allied sense buffer) or</span>", 
"<span class=\"comment\"> * NULL on failure</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *", 
"<a class=\"id\" href=\"#scsi_pool_alloc_command\">scsi_pool_alloc_command</a>(struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#cmd_slab\">cmd_slab</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> | <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#sense_slab\">sense_slab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> | <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#cmd_slab\">cmd_slab</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_pool_free_command - internal function to release a command</span>", 
"<span class=\"comment\"> * @pool:<span class=\"ts\"/>slab pool to allocate the command from</span>", 
"<span class=\"comment\"> * @cmd:<span class=\"ts\"/>command to release</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * the command must previously have been allocated by</span>", 
"<span class=\"comment\"> * scsi_pool_alloc_command.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#scsi_pool_free_command\">scsi_pool_free_command</a>(struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#scsi_sdb_cache\">scsi_sdb_cache</a>, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#sense_slab\">sense_slab</a>, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#cmd_slab\">cmd_slab</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_host_alloc_command - internal function to allocate command</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>SCSI host whose pool to allocate from</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>mask for the allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a fully allocated command with sense buffer and protection</span>", 
"<span class=\"comment\"> * data buffer (where applicable) or NULL on failure</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *", 
"<a class=\"id\" href=\"#scsi_host_alloc_command\">scsi_host_alloc_command</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#scsi_pool_alloc_command\">scsi_pool_alloc_command</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#cmd_pool\">cmd_pool</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_get_prot\">scsi_host_get_prot</a>(<a class=\"id\" href=\"#shost\">shost</a>) >= <a class=\"id\" href=\"#SHOST_DIX_TYPE0_PROTECTION\">SHOST_DIX_TYPE0_PROTECTION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#scsi_sdb_cache\">scsi_sdb_cache</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_pool_free_command\">scsi_pool_free_command</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#cmd_pool\">cmd_pool</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __scsi_get_command - Allocate a struct scsi_cmnd</span>", 
"<span class=\"comment\"> * @shost: host to transmit command</span>", 
"<span class=\"comment\"> * @gfp_mask: allocation mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: allocate a struct scsi_cmd from host's slab, recycling from the</span>", 
"<span class=\"comment\"> *              host's free_list if necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#__scsi_get_command\">__scsi_get_command</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#scsi_host_alloc_command\">scsi_host_alloc_command</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cmd\">cmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list_lock\">free_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list\">free_list</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list\">free_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list_lock\">free_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>, *<a class=\"id\" href=\"#prot\">prot</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, 0, sizeof(*<a class=\"id\" href=\"#cmd\">cmd</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#prot_sdb\">prot_sdb</a> = <a class=\"id\" href=\"#prot\">prot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__scsi_get_command\">__scsi_get_command</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_get_command - Allocate and setup a scsi command block</span>", 
"<span class=\"comment\"> * @dev: parent scsi device</span>", 
"<span class=\"comment\"> * @gfp_mask: allocator flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>The allocated scsi command structure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scsi_get_command\">scsi_get_command</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Bail if we can't get a reference to the device */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#__scsi_get_command\">__scsi_get_command</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cmd\">cmd</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cmd_list\">cmd_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#jiffies_at_alloc\">jiffies_at_alloc</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_get_command\">scsi_get_command</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __scsi_put_command - Free a struct scsi_cmnd</span>", 
"<span class=\"comment\"> * @shost: dev-&gt;host</span>", 
"<span class=\"comment\"> * @cmd: Command to free</span>", 
"<span class=\"comment\"> * @dev: parent scsi device</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__scsi_put_command\">__scsi_put_command</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* changing locks here, don't need to restore the irq state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list_lock\">free_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list\">free_list</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list_lock\">free_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cmd\">cmd</a> != <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_pool_free_command\">scsi_pool_free_command</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#cmd_pool\">cmd_pool</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__scsi_put_command\">__scsi_put_command</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_put_command - Free a scsi command block</span>", 
"<span class=\"comment\"> * @cmd: command block to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>Nothing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:<span class=\"ts\"/>The command must not belong to any lists.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_put_command\">scsi_put_command</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* serious error if the command hasn't come from a device list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__scsi_put_command\">__scsi_put_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, &amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_put_command\">scsi_put_command</a>);", 
"", 
"static struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> *<a class=\"id\" href=\"#scsi_get_host_cmd_pool\">scsi_get_host_cmd_pool</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> *<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#pool\">pool</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Select a command slab for this host and create it if not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * yet existent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#host_cmd_pool_mutex\">host_cmd_pool_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a> = (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a>) ? &amp;<a class=\"id\" href=\"#scsi_cmd_dma_pool\">scsi_cmd_dma_pool</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#scsi_cmd_pool\">scsi_cmd_pool</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#users\">users</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#cmd_slab\">cmd_slab</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#cmd_name\">cmd_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#slab_flags\">slab_flags</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#cmd_slab\">cmd_slab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#sense_slab\">sense_slab</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#sense_name\">sense_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#slab_flags\">slab_flags</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#sense_slab\">sense_slab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#cmd_slab\">cmd_slab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#users\">users</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pool\">pool</a>;", 
" <a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#host_cmd_pool_mutex\">host_cmd_pool_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_put_host_cmd_pool\">scsi_put_host_cmd_pool</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#host_cmd_pool_mutex\">host_cmd_pool_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a> = (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a>) ? &amp;<a class=\"id\" href=\"#scsi_cmd_dma_pool\">scsi_cmd_dma_pool</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#scsi_cmd_pool\">scsi_cmd_pool</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This may happen if a driver has a mismatched get and put</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the command pool; the driver should be implicated in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the stack trace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#users\">users</a> == 0);", 
"", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#users\">users</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#cmd_slab\">cmd_slab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#sense_slab\">sense_slab</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#host_cmd_pool_mutex\">host_cmd_pool_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_allocate_command - get a fully allocated SCSI command</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>allocation mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is for use outside of the normal host based pools.</span>", 
"<span class=\"comment\"> * It allocates the relevant command and takes an additional reference</span>", 
"<span class=\"comment\"> * on the pool it used.  This function *must* be paired with</span>", 
"<span class=\"comment\"> * scsi_free_command which also has the identical mask, otherwise the</span>", 
"<span class=\"comment\"> * free pool counts will eventually go wrong and you'll trigger a bug.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should *only* be used by drivers that need a static</span>", 
"<span class=\"comment\"> * command allocation at start of day for internal functions.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scsi_allocate_command\">scsi_allocate_command</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> *<a class=\"id\" href=\"#pool\">pool</a> = <a class=\"id\" href=\"#scsi_get_host_cmd_pool\">scsi_get_host_cmd_pool</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pool\">pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scsi_pool_alloc_command\">scsi_pool_alloc_command</a>(<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_allocate_command\">scsi_allocate_command</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_free_command - free a command allocated by scsi_allocate_command</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>mask used in the original allocation</span>", 
"<span class=\"comment\"> * @cmd:<span class=\"ts\"/>command to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: using the original allocation mask is vital because that's</span>", 
"<span class=\"comment\"> * what determines which command pool we use to free the command.  Any</span>", 
"<span class=\"comment\"> * mismatch will cause the system to BUG eventually.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_free_command\">scsi_free_command</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_cmd_pool\">scsi_host_cmd_pool</a> *<a class=\"id\" href=\"#pool\">pool</a> = <a class=\"id\" href=\"#scsi_get_host_cmd_pool\">scsi_get_host_cmd_pool</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this could trigger if the mask to scsi_allocate_command</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't match this mask.  Otherwise we're guaranteed that this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * succeeds because scsi_allocate_command must have taken a reference</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the pool</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#pool\">pool</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_pool_free_command\">scsi_pool_free_command</a>(<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scsi_put_host_cmd_pool is called twice; once to release the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reference we took above, and once to release the reference</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * originally taken by scsi_allocate_command</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_put_host_cmd_pool\">scsi_put_host_cmd_pool</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_put_host_cmd_pool\">scsi_put_host_cmd_pool</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_free_command\">scsi_free_command</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_setup_command_freelist - Setup the command freelist for a scsi host.</span>", 
"<span class=\"comment\"> * @shost: host to allocate the freelist for.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: The command freelist protects against system-wide out of memory</span>", 
"<span class=\"comment\"> * deadlock by preallocating one SCSI command structure for each host, so the</span>", 
"<span class=\"comment\"> * system can always write to a swap file on a device associated with that host.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>Nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_setup_command_freelist\">scsi_setup_command_freelist</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#unchecked_isa_dma\">unchecked_isa_dma</a> ? <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a> : <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list_lock\">free_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list\">free_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#cmd_pool\">cmd_pool</a> = <a class=\"id\" href=\"#scsi_get_host_cmd_pool\">scsi_get_host_cmd_pool</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#cmd_pool\">cmd_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get one backup command for this host.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#scsi_host_alloc_command\">scsi_host_alloc_command</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_put_host_cmd_pool\">scsi_put_host_cmd_pool</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#cmd_pool\">cmd_pool</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_destroy_command_freelist - Release the command freelist for a scsi host.</span>", 
"<span class=\"comment\"> * @shost: host whose freelist is going to be destroyed</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_destroy_command_freelist\">scsi_destroy_command_freelist</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If cmd_pool is NULL the free list was not initialized, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do not attempt to release resources.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#cmd_pool\">cmd_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list\">free_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#free_list\">free_list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_pool_free_command\">scsi_pool_free_command</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#cmd_pool\">cmd_pool</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#cmd_pool\">cmd_pool</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_put_host_cmd_pool\">scsi_put_host_cmd_pool</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#unchecked_isa_dma\">unchecked_isa_dma</a> ? <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a> : <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCSI_LOGGING\">CONFIG_SCSI_LOGGING</a>", 
"void <a class=\"id\" href=\"#scsi_log_send\">scsi_log_send</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If ML QUEUE log level is greater than or equal to:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1: nothing (match completion)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2: log opcode + command of all commands</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3: same as 2 plus dump cmd address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4: same as 3 plus dump extra junk</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsi_logging_level\">scsi_logging_level</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#SCSI_LOG_LEVEL\">SCSI_LOG_LEVEL</a>(<a class=\"id\" href=\"#SCSI_LOG_MLQUEUE_SHIFT\">SCSI_LOG_MLQUEUE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SCSI_LOG_MLQUEUE_BITS\">SCSI_LOG_MLQUEUE_BITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd_printk\">scmd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, \"Send: \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> &gt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"0x%p \", <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_command\">scsi_print_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> &gt; 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"buffer = 0x%p, bufflen = %d,\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" queuecommand 0x%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_sglist\">scsi_sglist</a>(<a class=\"id\" href=\"#cmd\">cmd</a>), <a class=\"id\" href=\"#scsi_bufflen\">scsi_bufflen</a>(<a class=\"id\" href=\"#cmd\">cmd</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#queuecommand\">queuecommand</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#scsi_log_completion\">scsi_log_completion</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, int <a class=\"id\" href=\"#disposition\">disposition</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If ML COMPLETE log level is greater than or equal to:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1: log disposition, result, opcode + command, and conditionally</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sense data for failures or non SUCCESS dispositions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2: same as 1 but for all command completions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3: same as 2 plus dump cmd address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4: same as 3 plus dump extra junk</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsi_logging_level\">scsi_logging_level</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#SCSI_LOG_LEVEL\">SCSI_LOG_LEVEL</a>(<a class=\"id\" href=\"#SCSI_LOG_MLCOMPLETE_SHIFT\">SCSI_LOG_MLCOMPLETE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SCSI_LOG_MLCOMPLETE_BITS\">SCSI_LOG_MLCOMPLETE_BITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#level\">level</a> &gt; 0) && (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> || <a class=\"id\" href=\"#disposition\">disposition</a> != <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#level\">level</a> &gt; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd_printk\">scmd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, \"Done: \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> &gt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"0x%p \", <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Dump truncated values, so we usually fit within</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 80 chars.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#disposition\">disposition</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"SUCCESS\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"RETRY\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ADD_TO_MLQUEUE\">ADD_TO_MLQUEUE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"MLQUEUE\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FAILED\">FAILED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"FAILED\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TIMEOUT_ERROR\">TIMEOUT_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If called via scsi_times_out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"TIMEOUT\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"UNKNOWN\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_result\">scsi_print_result</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_command\">scsi_print_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status_byte\">status_byte</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a>) &amp; <a class=\"id\" href=\"#CHECK_CONDITION\">CHECK_CONDITION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_sense\">scsi_print_sense</a>(\"\", <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd_printk\">scmd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"scsi host busy %d failed %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_busy\">host_busy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_failed\">host_failed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_cmd_get_serial - Assign a serial number to a command</span>", 
"<span class=\"comment\"> * @host: the scsi host</span>", 
"<span class=\"comment\"> * @cmd: command to assign serial number to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: a serial number identifies a request for error recovery</span>", 
"<span class=\"comment\"> * and debugging purposes.  Protected by the Host_Lock of host.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#scsi_cmd_get_serial\">scsi_cmd_get_serial</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#host\">host</a>, struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#serial_number\">serial_number</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#cmd_serial_number\">cmd_serial_number</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#serial_number\">serial_number</a> == 0) ", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#serial_number\">serial_number</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#cmd_serial_number\">cmd_serial_number</a>++;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_dispatch_command - Dispatch a command to the low-level driver.</span>", 
"<span class=\"comment\"> * @cmd: command block we are dispatching.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return: nonzero return request was rejected and device's queue needs to be</span>", 
"<span class=\"comment\"> * plugged.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_dispatch_cmd\">scsi_dispatch_cmd</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#iorequest_cnt\">iorequest_cnt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check if the device is still usable */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> == <a class=\"id\" href=\"#SDEV_DEL\">SDEV_DEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* in SDEV_DEL we error all commands. DID_NO_CONNECT</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * returns an immediate error upwards, and signals</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that the device is no longer present */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#DID_NO_CONNECT\">DID_NO_CONNECT</a> << 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_done\">scsi_done</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* return 0 (because the command has been processed) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check to see if the scsi lld made this device blocked. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsi_device_blocked\">scsi_device_blocked</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in blocked state, the command is just put back on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the device queue.  The suspend state has already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * blocked the queue so future requests should not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * occur until the device transitions out of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * suspend state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_queue_insert\">scsi_queue_insert</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#SCSI_MLQUEUE_DEVICE_BUSY\">SCSI_MLQUEUE_DEVICE_BUSY</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_MLQUEUE\">SCSI_LOG_MLQUEUE</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"queuecommand : device blocked \\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NOTE: rtn is still zero here because we don't need the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * queue to be plugged on return (it's already stopped)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If SCSI-2 or lower, store the LUN value in cmnd.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> <= <a class=\"id\" href=\"#SCSI_2\">SCSI_2</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> != <a class=\"id\" href=\"#SCSI_UNKNOWN\">SCSI_UNKNOWN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[1] = (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[1] &amp; 0x1f) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#lun\">lun</a> << 5 &amp; 0xe0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will wait MIN_RESET_DELAY clock ticks after the last reset so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can avoid the drive not being ready.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#last_reset\">last_reset</a> + <a class=\"id\" href=\"#MIN_RESET_DELAY\">MIN_RESET_DELAY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#resetting\">resetting</a> && <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#timeout\">timeout</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ticks_remaining\">ticks_remaining</a> = <a class=\"id\" href=\"#timeout\">timeout</a> - <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NOTE: This may be executed from within an interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handler!  This is bad, but for now, it'll do.  The irq</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * level of the interrupt handler has been masked out by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * platform dependent interrupt handling code already, so the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sti() here will not cause another call to the SCSI host's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interrupt handler (assuming there is one irq-level per</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * host).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#ticks_remaining\">ticks_remaining</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(1 + 999 / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#resetting\">resetting</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_log_send\">scsi_log_send</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Before we queue this command, check if the command</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * length exceeds what the host adapter can handle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> &gt; <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#max_cmd_len\">max_cmd_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_MLQUEUE\">SCSI_LOG_MLQUEUE</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"queuecommand : command too long. \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"cdb_size=%d host->max_cmd_len=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a>, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#max_cmd_len\">max_cmd_len</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = (<a class=\"id\" href=\"#DID_ABORT\">DID_ABORT</a> << 16);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_done\">scsi_done</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AK: unlikely race here: for some reason the timer could</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expire before the serial number is set up below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: kill serial or move to blk layer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd_get_serial\">scsi_cmd_get_serial</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#cmd\">cmd</a>); ", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#shost_state\">shost_state</a> == <a class=\"id\" href=\"#SHOST_DEL\">SHOST_DEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = (<a class=\"id\" href=\"#DID_NO_CONNECT\">DID_NO_CONNECT</a> << 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_done\">scsi_done</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_scsi_dispatch_cmd_start\">trace_scsi_dispatch_cmd_start</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#queuecommand\">queuecommand</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#scsi_done\">scsi_done</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_scsi_dispatch_cmd_error\">trace_scsi_dispatch_cmd_error</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#rtn\">rtn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> != <a class=\"id\" href=\"#SCSI_MLQUEUE_DEVICE_BUSY\">SCSI_MLQUEUE_DEVICE_BUSY</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rtn\">rtn</a> != <a class=\"id\" href=\"#SCSI_MLQUEUE_TARGET_BUSY\">SCSI_MLQUEUE_TARGET_BUSY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#SCSI_MLQUEUE_HOST_BUSY\">SCSI_MLQUEUE_HOST_BUSY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_queue_insert\">scsi_queue_insert</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#rtn\">rtn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_MLQUEUE\">SCSI_LOG_MLQUEUE</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#printk\">printk</a>(\"queuecommand : request rejected\\n\"));", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_MLQUEUE\">SCSI_LOG_MLQUEUE</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"leaving scsi_dispatch_cmnd()\\n\"));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_done - Enqueue the finished SCSI command into the done queue.</span>", 
"<span class=\"comment\"> * @cmd: The SCSI Command for which a low-level device driver (LLDD) gives</span>", 
"<span class=\"comment\"> * ownership back to SCSI Core -- i.e. the LLDD has finished with it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: This function is the mid-level's (SCSI Core) interrupt routine,</span>", 
"<span class=\"comment\"> * which regains ownership of the SCSI command (de facto) from a LLDD, and</span>", 
"<span class=\"comment\"> * enqueues the command to the done queue for further processing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the producer of the done queue who enqueues at the tail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is interrupt context safe.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_done\">scsi_done</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_scsi_dispatch_cmd_done\">trace_scsi_dispatch_cmd_done</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_complete_request\">blk_complete_request</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Move this to a header if it becomes more generally useful */</span>", 
"static struct <a class=\"id\" href=\"#scsi_driver\">scsi_driver</a> *<a class=\"id\" href=\"#scsi_cmd_to_driver\">scsi_cmd_to_driver</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>return *(struct <a class=\"id\" href=\"#scsi_driver\">scsi_driver</a> **)<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_finish_command - cleanup and pass command back to upper layer</span>", 
"<span class=\"comment\"> * @cmd: the command</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Pass command off to upper layer for finishing of I/O</span>", 
"<span class=\"comment\"> *              request, waking processes that are waiting on results,</span>", 
"<span class=\"comment\"> *              etc.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_finish_command\">scsi_finish_command</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_driver\">scsi_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#good_bytes\">good_bytes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_unbusy\">scsi_device_unbusy</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"        <span class=\"comment\">/*</span>", 
"<span class=\"comment\">         * Clear the flags which say that the device/host is no longer</span>", 
"<span class=\"comment\">         * capable of accepting new commands.  These are set in scsi_queue.c</span>", 
"<span class=\"comment\">         * for both the queue full condition on a device, and for a</span>", 
"<span class=\"comment\">         * host full condition on the host.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX(hch): What about locking?</span>", 
"<span class=\"comment\">         */</span>", 
"        <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_blocked\">host_blocked</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#target_blocked\">target_blocked</a> = 0;", 
"        <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_blocked\">device_blocked</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have valid sense information, then some kind of recovery</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must have taken place.  Make a note of this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#SCSI_SENSE_VALID\">SCSI_SENSE_VALID</a>(<a class=\"id\" href=\"#cmd\">cmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> |= (<a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a> << 24);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_MLCOMPLETE\">SCSI_LOG_MLCOMPLETE</a>(4, <a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Notifying upper driver of completion \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(result %x)\\n\", <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#good_bytes\">good_bytes</a> = <a class=\"id\" href=\"#scsi_bufflen\">scsi_bufflen</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"        if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> != <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#old_good_bytes\">old_good_bytes</a> = <a class=\"id\" href=\"#good_bytes\">good_bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#scsi_cmd_to_driver\">scsi_cmd_to_driver</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#done\">done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#good_bytes\">good_bytes</a> = <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#done\">done</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * USB may not give sense identifying bad sector and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * simply return a residue instead, so subtract off the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * residue if drv-&gt;done() error processing indicates no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * change to the completion length.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#good_bytes\">good_bytes</a> == <a class=\"id\" href=\"#old_good_bytes\">old_good_bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#good_bytes\">good_bytes</a> -= <a class=\"id\" href=\"#scsi_get_resid\">scsi_get_resid</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_io_completion\">scsi_io_completion</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#good_bytes\">good_bytes</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_finish_command\">scsi_finish_command</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_adjust_queue_depth - Let low level drivers change a device's queue depth</span>", 
"<span class=\"comment\"> * @sdev: SCSI Device in question</span>", 
"<span class=\"comment\"> * @tagged: Do we use tagged queueing (non-0) or do we treat</span>", 
"<span class=\"comment\"> *          this device as an untagged device (0)</span>", 
"<span class=\"comment\"> * @tags: Number of tags allowed if tagged queueing enabled,</span>", 
"<span class=\"comment\"> *        or number of commands the low level driver can</span>", 
"<span class=\"comment\"> *        queue up in non-tagged mode (as per cmd_per_lun).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock Status:<span class=\"ts\"/>None held on entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:<span class=\"ts\"/>Low level drivers may call this at any time and we will do</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>the right thing depending on whether or not the device is</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>currently active and whether or not it even has the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>command blocks built yet.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#tagged\">tagged</a>, int <a class=\"id\" href=\"#tags\">tags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * refuse to set tagged depth to an unworkable size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tags\">tags</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check to see if the queue is managed by the block layer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it is, and we fail to adjust the depth, exit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not resize the tag map if it is a host wide share bqt,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because the size should be the hosts's can_queue. If there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is more IO than the LLD's can_queue (so there are not enuogh</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tags) request_fn's host queue ready check will handle it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#bqt\">bqt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_tagged\">blk_queue_tagged</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#blk_queue_resize_tags\">blk_queue_resize_tags</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#tags\">tags</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a> = <a class=\"id\" href=\"#tags\">tags</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#tagged\">tagged</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MSG_ORDERED_TAG\">MSG_ORDERED_TAG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#ordered_tags\">ordered_tags</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#simple_tags\">simple_tags</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MSG_SIMPLE_TAG\">MSG_SIMPLE_TAG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#ordered_tags\">ordered_tags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#simple_tags\">simple_tags</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"scsi_adjust_queue_depth, bad queue type, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#ordered_tags\">ordered_tags</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#simple_tags\">simple_tags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a> = <a class=\"id\" href=\"#tags\">tags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_track_queue_full - track QUEUE_FULL events to adjust queue depth</span>", 
"<span class=\"comment\"> * @sdev: SCSI Device in question</span>", 
"<span class=\"comment\"> * @depth: Current number of outstanding SCSI commands on this device,</span>", 
"<span class=\"comment\"> *         not counting the one returned as QUEUE_FULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:<span class=\"ts\"/>This function will track successive QUEUE_FULL events on a</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>specific SCSI device to determine if and when there is a</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>need to adjust the queue depth on the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>0 - No change needed, &gt;0 - Adjust queue depth to this new depth,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>-1 - Drop back to untagged operation using host-&gt;cmd_per_lun</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>as the untagged command depth</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock Status:<span class=\"ts\"/>None held on entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:<span class=\"ts\"/>Low level drivers may call this at any time and we will do</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>\"The Right Thing.\"  We are interrupt context safe.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_track_queue_full\">scsi_track_queue_full</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't let QUEUE_FULLs on the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * jiffies count, they could all be from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * same event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#jiffies\">jiffies</a> >> 4) == (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_full_time\">last_queue_full_time</a> >> 4))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_full_time\">last_queue_full_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_full_depth\">last_queue_full_depth</a> != <a class=\"id\" href=\"#depth\">depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_full_count\">last_queue_full_count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_full_depth\">last_queue_full_depth</a> = <a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_full_count\">last_queue_full_count</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_full_count\">last_queue_full_count</a> <= 10)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_full_depth\">last_queue_full_depth</a> &lt; 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Drop back to untagged */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, 0, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#cmd_per_lun\">cmd_per_lun</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#ordered_tags\">ordered_tags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#MSG_ORDERED_TAG\">MSG_ORDERED_TAG</a>, <a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#MSG_SIMPLE_TAG\">MSG_SIMPLE_TAG</a>, <a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#depth\">depth</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_track_queue_full\">scsi_track_queue_full</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_vpd_inquiry - Request a device provide us with a VPD page</span>", 
"<span class=\"comment\"> * @sdev: The device to ask</span>", 
"<span class=\"comment\"> * @buffer: Where to put the result</span>", 
"<span class=\"comment\"> * @page: Which Vital Product Data to return</span>", 
"<span class=\"comment\"> * @len: The length of the buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is an internal helper function.  You probably want to use</span>", 
"<span class=\"comment\"> * scsi_get_vpd_page instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or a negative error number.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_vpd_inquiry\">scsi_vpd_inquiry</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#page\">page</a>, unsigned <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#cmd\">cmd</a>[16];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#INQUIRY\">INQUIRY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[1] = 1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* EVPD */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[2] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[3] = <a class=\"id\" href=\"#len\">len</a> >> 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[4] = <a class=\"id\" href=\"#len\">len</a> &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[5] = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Control byte */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I'm not convinced we need to try quite this hard to get VPD, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all the existing users tried this hard.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>, <a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 30 * <a class=\"id\" href=\"#HZ\">HZ</a>, 3, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sanity check that we got the page back that we asked for */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[1] != <a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_get_vpd_page - Get Vital Product Data from a SCSI device</span>", 
"<span class=\"comment\"> * @sdev: The device to ask</span>", 
"<span class=\"comment\"> * @page: Which Vital Product Data to return</span>", 
"<span class=\"comment\"> * @buf: where to store the VPD</span>", 
"<span class=\"comment\"> * @buf_len: number of bytes in the VPD buffer area</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SCSI devices may optionally supply Vital Product Data.  Each 'page'</span>", 
"<span class=\"comment\"> * of VPD is defined in the appropriate SCSI document (eg SPC, SBC).</span>", 
"<span class=\"comment\"> * If the device supports this VPD page, this routine returns a pointer</span>", 
"<span class=\"comment\"> * to a buffer containing the data from that page.  The caller is</span>", 
"<span class=\"comment\"> * responsible for calling kfree() on this pointer when it is no longer</span>", 
"<span class=\"comment\"> * needed.  If we cannot retrieve the VPD page this routine returns %NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_get_vpd_page\">scsi_get_vpd_page</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#page\">page</a>, unsigned char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#buf_len\">buf_len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ask for all the pages supported by this device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scsi_vpd_inquiry\">scsi_vpd_inquiry</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#buf\">buf</a>, 0, <a class=\"id\" href=\"#buf_len\">buf_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the user actually wanted this page, we can skip the rest */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#min\">min</a>((int)<a class=\"id\" href=\"#buf\">buf</a>[3], <a class=\"id\" href=\"#buf_len\">buf_len</a> - 4); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a> + 4] == <a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#buf\">buf</a>[3] && <a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#buf_len\">buf_len</a> - 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ran off the end of the buffer, give us benefit of doubt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* The device claims it doesn't support the requested page */</span>", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
" <a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scsi_vpd_inquiry\">scsi_vpd_inquiry</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#buf_len\">buf_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#scsi_get_vpd_page\">scsi_get_vpd_page</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_device_get  -  get an additional reference to a scsi_device</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>device to get a reference to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Gets a reference to the scsi_device and increments the use count</span>", 
"<span class=\"comment\"> * of the underlying LLDD module.  You must hold host_lock of the</span>", 
"<span class=\"comment\"> * parent Scsi_Host or already have a reference when calling this.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> == <a class=\"id\" href=\"#SDEV_DEL\">SDEV_DEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* We can fail this if we're doing SCSI operations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from module exit (like cache flush) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#module\">module</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_device_put  -  release a reference to a scsi_device</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>device to release a reference on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Release a reference to the scsi_device and decrements the use</span>", 
"<span class=\"comment\"> * count of the underlying LLDD module.  The device is freed once the last</span>", 
"<span class=\"comment\"> * user vanishes.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_UNLOAD\">CONFIG_MODULE_UNLOAD</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#module\">module</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The module refcount will be zero if scsi_device_get()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was called from a module removal routine */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#module\">module</a> && <a class=\"id\" href=\"#module_refcount\">module_refcount</a>(<a class=\"id\" href=\"#module\">module</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#module\">module</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>);", 
"", 
"<span class=\"comment\">/* helper for shost_for_each_device, see that for documentation */</span>", 
"struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#__scsi_iterate_devices\">__scsi_iterate_devices</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = (<a class=\"id\" href=\"#prev\">prev</a> ? &amp;<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#siblings\">siblings</a> : &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#__devices\">__devices</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#__devices\">__devices</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a>, <a class=\"id\" href=\"#siblings\">siblings</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip devices that we can't get a reference to */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>(<a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__scsi_iterate_devices\">__scsi_iterate_devices</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * starget_for_each_device  -  helper to walk all devices of a target</span>", 
"<span class=\"comment\"> * @starget:<span class=\"ts\"/>target whose devices we want to iterate over.</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>Opaque passed to each function call.</span>", 
"<span class=\"comment\"> * @fn:<span class=\"ts\"/><span class=\"ts\"/>Function to call on each device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This traverses over each device of @starget.  The devices have</span>", 
"<span class=\"comment\"> * a reference that must be released by scsi_host_put when breaking</span>", 
"<span class=\"comment\"> * out of the loop.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#starget_for_each_device\">starget_for_each_device</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     void (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *, void *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost_for_each_device\">shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#channel\">channel</a> == <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#channel\">channel</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#starget_for_each_device\">starget_for_each_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __starget_for_each_device - helper to walk all devices of a target (UNLOCKED)</span>", 
"<span class=\"comment\"> * @starget:<span class=\"ts\"/>target whose devices we want to iterate over.</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>parameter for callback @fn()</span>", 
"<span class=\"comment\"> * @fn:<span class=\"ts\"/><span class=\"ts\"/>callback function that is invoked for each device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This traverses over each device of @starget.  It does _not_</span>", 
"<span class=\"comment\"> * take a reference on the scsi_device, so the whole loop must be</span>", 
"<span class=\"comment\"> * protected by shost-&gt;host_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note:  The only reason why drivers would want to use this is because</span>", 
"<span class=\"comment\"> * they need to access the device list in irq context.  Otherwise you</span>", 
"<span class=\"comment\"> * really want to use starget_for_each_device instead.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#__starget_for_each_device\">__starget_for_each_device</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *, void *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__shost_for_each_device\">__shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#channel\">channel</a> == <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#channel\">channel</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__starget_for_each_device\">__starget_for_each_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __scsi_device_lookup_by_target - find a device given the target (UNLOCKED)</span>", 
"<span class=\"comment\"> * @starget:<span class=\"ts\"/>SCSI target pointer</span>", 
"<span class=\"comment\"> * @lun:<span class=\"ts\"/>SCSI Logical Unit Number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Looks up the scsi_device with the specified @lun for a given</span>", 
"<span class=\"comment\"> * @starget.  The returned scsi_device does not have an additional</span>", 
"<span class=\"comment\"> * reference.  You must hold the host's host_lock over this call and</span>", 
"<span class=\"comment\"> * any access to the returned scsi_device. A scsi_device in state</span>", 
"<span class=\"comment\"> * SDEV_DEL is skipped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note:  The only reason why drivers should use this is because</span>", 
"<span class=\"comment\"> * they need to access the device list in irq context.  Otherwise you</span>", 
"<span class=\"comment\"> * really want to use scsi_device_lookup_by_target instead.</span>", 
"<span class=\"comment\"> **/</span>", 
"struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#__scsi_device_lookup_by_target\">__scsi_device_lookup_by_target</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#lun\">lun</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, &amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#same_target_siblings\">same_target_siblings</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> == <a class=\"id\" href=\"#SDEV_DEL\">SDEV_DEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#lun\">lun</a> ==<a class=\"id\" href=\"#lun\">lun</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__scsi_device_lookup_by_target\">__scsi_device_lookup_by_target</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_device_lookup_by_target - find a device given the target</span>", 
"<span class=\"comment\"> * @starget:<span class=\"ts\"/>SCSI target pointer</span>", 
"<span class=\"comment\"> * @lun:<span class=\"ts\"/>SCSI Logical Unit Number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Looks up the scsi_device with the specified @lun for a given</span>", 
"<span class=\"comment\"> * @starget.  The returned scsi_device has an additional reference that</span>", 
"<span class=\"comment\"> * needs to be released with scsi_device_put once you're done with it.</span>", 
"<span class=\"comment\"> **/</span>", 
"struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsi_device_lookup_by_target\">scsi_device_lookup_by_target</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#lun\">lun</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#__scsi_device_lookup_by_target\">__scsi_device_lookup_by_target</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#lun\">lun</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a> && <a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_device_lookup_by_target\">scsi_device_lookup_by_target</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __scsi_device_lookup - find a device given the host (UNLOCKED)</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>SCSI host pointer</span>", 
"<span class=\"comment\"> * @channel:<span class=\"ts\"/>SCSI channel (zero if only one channel)</span>", 
"<span class=\"comment\"> * @id:<span class=\"ts\"/><span class=\"ts\"/>SCSI target number (physical unit number)</span>", 
"<span class=\"comment\"> * @lun:<span class=\"ts\"/>SCSI Logical Unit Number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Looks up the scsi_device with the specified @channel, @id, @lun</span>", 
"<span class=\"comment\"> * for a given host. The returned scsi_device does not have an additional</span>", 
"<span class=\"comment\"> * reference.  You must hold the host's host_lock over this call and any access</span>", 
"<span class=\"comment\"> * to the returned scsi_device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note:  The only reason why drivers would want to use this is because</span>", 
"<span class=\"comment\"> * they need to access the device list in irq context.  Otherwise you</span>", 
"<span class=\"comment\"> * really want to use scsi_device_lookup instead.</span>", 
"<span class=\"comment\"> **/</span>", 
"struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#__scsi_device_lookup\">__scsi_device_lookup</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#lun\">lun</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#__devices\">__devices</a>, <a class=\"id\" href=\"#siblings\">siblings</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#channel\">channel</a> == <a class=\"id\" href=\"#channel\">channel</a> && <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#id\">id</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#lun\">lun</a> ==<a class=\"id\" href=\"#lun\">lun</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__scsi_device_lookup\">__scsi_device_lookup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_device_lookup - find a device given the host</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>SCSI host pointer</span>", 
"<span class=\"comment\"> * @channel:<span class=\"ts\"/>SCSI channel (zero if only one channel)</span>", 
"<span class=\"comment\"> * @id:<span class=\"ts\"/><span class=\"ts\"/>SCSI target number (physical unit number)</span>", 
"<span class=\"comment\"> * @lun:<span class=\"ts\"/>SCSI Logical Unit Number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Looks up the scsi_device with the specified @channel, @id, @lun</span>", 
"<span class=\"comment\"> * for a given host.  The returned scsi_device has an additional reference that</span>", 
"<span class=\"comment\"> * needs to be released with scsi_device_put once you're done with it.</span>", 
"<span class=\"comment\"> **/</span>", 
"struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsi_device_lookup\">scsi_device_lookup</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#lun\">lun</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#__scsi_device_lookup\">__scsi_device_lookup</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#lun\">lun</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a> && <a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_device_lookup\">scsi_device_lookup</a>);", 
"", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"SCSI core\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#scsi_logging_level\">scsi_logging_level</a>, int, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#scsi_logging_level\">scsi_logging_level</a>, \"a bit mask of logging levels\");", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_scsi\">init_scsi</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#scsi_init_queue\">scsi_init_queue</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#scsi_init_procfs\">scsi_init_procfs</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_queue\">cleanup_queue</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#scsi_init_devinfo\">scsi_init_devinfo</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_procfs\">cleanup_procfs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#scsi_init_hosts\">scsi_init_hosts</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_devlist\">cleanup_devlist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#scsi_init_sysctl\">scsi_init_sysctl</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_hosts\">cleanup_hosts</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#scsi_sysfs_register\">scsi_sysfs_register</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_sysctl\">cleanup_sysctl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_netlink_init\">scsi_netlink_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"SCSI subsystem initialized\\n\");", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#cleanup_sysctl\">cleanup_sysctl</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_sysctl\">scsi_exit_sysctl</a>();", 
"<a class=\"id\" href=\"#cleanup_hosts\">cleanup_hosts</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_hosts\">scsi_exit_hosts</a>();", 
"<a class=\"id\" href=\"#cleanup_devlist\">cleanup_devlist</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_devinfo\">scsi_exit_devinfo</a>();", 
"<a class=\"id\" href=\"#cleanup_procfs\">cleanup_procfs</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_procfs\">scsi_exit_procfs</a>();", 
"<a class=\"id\" href=\"#cleanup_queue\">cleanup_queue</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_queue\">scsi_exit_queue</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SCSI subsystem failed to initialize, error = %d\\n\",", 
"<span class=\"ts\"/>       -<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#exit_scsi\">exit_scsi</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_netlink_exit\">scsi_netlink_exit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_sysfs_unregister\">scsi_sysfs_unregister</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_sysctl\">scsi_exit_sysctl</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_hosts\">scsi_exit_hosts</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_devinfo\">scsi_exit_devinfo</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_procfs\">scsi_exit_procfs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_exit_queue\">scsi_exit_queue</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#init_scsi\">init_scsi</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#exit_scsi\">exit_scsi</a>);", 
];
xr_frag_insert('l/c1/dcfe9fe78ccd6036230e2a6048475edd233d65.xr', __xr_tmp);
