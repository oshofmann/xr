var __xr_tmp = [
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#i\">i</a> + 1; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#max_early_res\">max_early_res</a> && <a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(&amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>], &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a> + 1],", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#j\">j</a> - 1 - <a class=\"id\" href=\"#i\">i</a>) * sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#j\">j</a> - 1].<a class=\"id\" href=\"#end\">end</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_res_count\">early_res_count</a>--;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#drop_range_partial\">drop_range_partial</a>(int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#common_start\">common_start</a>, <a class=\"id\" href=\"#common_end\">common_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#old_start\">old_start</a>, <a class=\"id\" href=\"#old_end\">old_end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_start\">old_start</a> = <a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_end\">old_end</a> = <a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#common_start\">common_start</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#old_start\">old_start</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#common_end\">common_end</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#old_end\">old_end</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no overlap ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#common_start\">common_start</a> >= <a class=\"id\" href=\"#common_end\">common_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_start\">old_start</a> &lt; <a class=\"id\" href=\"#common_start\">common_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make head segment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#common_start\">common_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_end\">old_end</a> &gt; <a class=\"id\" href=\"#common_end\">common_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[15];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Save a local copy of the name, since the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * early_res array could get resized inside</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * reserve_early_without_check() -&gt;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * __check_and_double_early_res(), which would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * make the current name pointer invalid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* add another for left over on tail */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_early_without_check\">reserve_early_without_check</a>(<a class=\"id\" href=\"#common_end\">common_end</a>, <a class=\"id\" href=\"#old_end\">old_end</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_end\">old_end</a> &gt; <a class=\"id\" href=\"#common_end\">common_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reuse the entry for tail left */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#common_end\">common_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* all covered */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_range\">drop_range</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Split any existing ranges that:</span>", 
"<span class=\"comment\"> *  1) are marked 'overlap_ok', and</span>", 
"<span class=\"comment\"> *  2) overlap with the stated range [start, end)</span>", 
"<span class=\"comment\"> * into whatever portion (if any) of the existing range is entirely</span>", 
"<span class=\"comment\"> * below or entirely above the stated range.  Drop the portion</span>", 
"<span class=\"comment\"> * of the existing range that overlaps with the stated range,</span>", 
"<span class=\"comment\"> * which will allow the caller of this routine to then add that</span>", 
"<span class=\"comment\"> * stated range without conflicting with any existing range.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#drop_overlaps_that_are_ok\">drop_overlaps_that_are_ok</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lower_start\">lower_start</a>, <a class=\"id\" href=\"#lower_end\">lower_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#upper_start\">upper_start</a>, <a class=\"id\" href=\"#upper_end\">upper_end</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[15];", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_early_res\">max_early_res</a> && <a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Continue past non-overlapping ranges */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> || <a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Leave non-ok overlaps as is; let caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * panic \"Overlapping early reservations\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when it hits this overlap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#overlap_ok\">overlap_ok</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have an ok overlap.  We will drop it from the early</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reservation map, and add back in any non-overlapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * portions (lower or upper) as separate, overlap_ok,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * non-overlapping ranges.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1. Note any non-overlapping (lower or upper) ranges. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#name\">name</a>) - 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower_start\">lower_start</a> = <a class=\"id\" href=\"#lower_end\">lower_end</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upper_start\">upper_start</a> = <a class=\"id\" href=\"#upper_end\">upper_end</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower_start\">lower_start</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower_end\">lower_end</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upper_start\">upper_start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upper_end\">upper_end</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 2. Drop the original ok overlapping range */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_range\">drop_range</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>--;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* resume for-loop on copied down entry */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 3. Add back in any non-overlapping ranges. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lower_end\">lower_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_early_overlap_ok\">reserve_early_overlap_ok</a>(<a class=\"id\" href=\"#lower_start\">lower_start</a>, <a class=\"id\" href=\"#lower_end\">lower_end</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#upper_end\">upper_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_early_overlap_ok\">reserve_early_overlap_ok</a>(<a class=\"id\" href=\"#upper_start\">upper_start</a>, <a class=\"id\" href=\"#upper_end\">upper_end</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__reserve_early\">__reserve_early</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#overlap_ok\">overlap_ok</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_overlapped_early\">find_overlapped_early</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#max_early_res\">max_early_res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Too many early reservations\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Overlapping early reservations \"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"%llx-%llx %s to %llx-%llx %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a> - 1, <a class=\"id\" href=\"#name\">name</a> ? <a class=\"id\" href=\"#name\">name</a> : \"\", <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> - 1, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#overlap_ok\">overlap_ok</a> = <a class=\"id\" href=\"#overlap_ok\">overlap_ok</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>) - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_res_count\">early_res_count</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A few early reservtations come here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The 'overlap_ok' in the name of this routine does -not- mean it</span>", 
"<span class=\"comment\"> * is ok for these reservations to overlap an earlier reservation.</span>", 
"<span class=\"comment\"> * Rather it means that it is ok for subsequent reservations to</span>", 
"<span class=\"comment\"> * overlap this one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use this entry point to reserve early ranges when you are doing</span>", 
"<span class=\"comment\"> * so out of \"Paranoia\", reserving perhaps more memory than you need,</span>", 
"<span class=\"comment\"> * just in case, and don't mind a subsequent overlapping reservation</span>", 
"<span class=\"comment\"> * that is known to be needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The drop_overlaps_that_are_ok() call here isn't really needed.</span>", 
"<span class=\"comment\"> * It would be needed if we had two colliding 'overlap_ok'</span>", 
"<span class=\"comment\"> * reservations, so that the second such would not panic on the</span>", 
"<span class=\"comment\"> * overlap with the first.  We don't have any such as of this</span>", 
"<span class=\"comment\"> * writing, but might as well tolerate such if it happens in</span>", 
"<span class=\"comment\"> * the future.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#reserve_early_overlap_ok\">reserve_early_overlap_ok</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_overlaps_that_are_ok\">drop_overlaps_that_are_ok</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__reserve_early\">__reserve_early</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#name\">name</a>, 1);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__check_and_double_early_res\">__check_and_double_early_res</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ex_start\">ex_start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ex_end\">ex_end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do we have enough slots left ? */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#max_early_res\">max_early_res</a> - <a class=\"id\" href=\"#early_res_count\">early_res_count</a>) &gt; <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#max_early_res\">max_early_res</a>/8, 2))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* double it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = -1ULL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>) * <a class=\"id\" href=\"#max_early_res\">max_early_res</a> * 2;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_res\">early_res</a> == <a class=\"id\" href=\"#early_res_x\">early_res_x</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#early_res\">early_res</a>[0].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#ex_start\">ex_start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#find_fw_memmap_area\">find_fw_memmap_area</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> == -1ULL) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ex_end\">ex_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#get_max_mapped\">get_max_mapped</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#find_fw_memmap_area\">find_fw_memmap_area</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> == -1ULL)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"can not find more space for early_res array\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* save the first one for own */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>[0].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>[0].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#mem\">mem</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>[0].<a class=\"id\" href=\"#overlap_ok\">overlap_ok</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* copy old to new */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_res\">early_res</a> == <a class=\"id\" href=\"#early_res_x\">early_res_x</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#new\">new</a>[1], &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>) * <a class=\"id\" href=\"#max_early_res\">max_early_res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#new\">new</a>[<a class=\"id\" href=\"#max_early_res\">max_early_res</a>+1], 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>) * (<a class=\"id\" href=\"#max_early_res\">max_early_res</a> - 1));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_res_count\">early_res_count</a>++;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#new\">new</a>[1], &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[1],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>) * (<a class=\"id\" href=\"#max_early_res\">max_early_res</a> - 1));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#new\">new</a>[<a class=\"id\" href=\"#max_early_res\">max_early_res</a>], 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>) * <a class=\"id\" href=\"#max_early_res\">max_early_res</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#early_res\">early_res</a>[0], 0, sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>) * <a class=\"id\" href=\"#max_early_res\">max_early_res</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_res\">early_res</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_early_res\">max_early_res</a> *= 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"early_res array is doubled to %d at [%llx - %llx]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_early_res\">max_early_res</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mem\">mem</a> + <a class=\"id\" href=\"#size\">size</a> - 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Most early reservations come here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We first have drop_overlaps_that_are_ok() drop any pre-existing</span>", 
"<span class=\"comment\"> * 'overlap_ok' ranges, so that we can then reserve this memory</span>", 
"<span class=\"comment\"> * range without risk of panic'ing on an overlapping overlap_ok</span>", 
"<span class=\"comment\"> * early reservation.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#reserve_early\">reserve_early</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__check_and_double_early_res\">__check_and_double_early_res</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_overlaps_that_are_ok\">drop_overlaps_that_are_ok</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__reserve_early\">__reserve_early</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#name\">name</a>, 0);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#reserve_early_without_check\">reserve_early_without_check</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__check_and_double_early_res\">__check_and_double_early_res</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#early_res_count\">early_res_count</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#overlap_ok\">overlap_ok</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>) - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_res_count\">early_res_count</a>++;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_early\">free_early</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_free_part\">kmemleak_free_part</a>(<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#start\">start</a>), <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_overlapped_early\">find_overlapped_early</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#max_early_res\">max_early_res</a> || <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> != <a class=\"id\" href=\"#end\">end</a> || <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"free_early on not reserved area: %llx-%llx!\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a> - 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_range\">drop_range</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_early_partial\">free_early_partial</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_free_part\">kmemleak_free_part</a>(<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#start\">start</a>), <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#end\">end</a>, \"  wrong range [%#llx, %#llx]\\n\", <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#try_next\">try_next</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_overlapped_early\">find_overlapped_early</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#max_early_res\">max_early_res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"comment\">/* hole ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> >= <a class=\"id\" href=\"#end\">end</a> && <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_range_partial\">drop_range_partial</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_range_partial\">drop_range_partial</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#try_next\">try_next</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#subtract_early_res\">subtract_early_res</a>(struct <a class=\"id\" href=\"#range\">range</a> *<a class=\"id\" href=\"#range\">range</a>, int <a class=\"id\" href=\"#az\">az</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#final_start\">final_start</a>, <a class=\"id\" href=\"#final_end\">final_end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>  = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_early_res\">max_early_res</a> && <a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need to skip first one ?*/</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_res\">early_res</a> != <a class=\"id\" href=\"#early_res_x\">early_res_x</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = 1;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEBUG_PRINT_EARLY_RES\">DEBUG_PRINT_EARLY_RES</a> 1", 
"", 
"#if <a class=\"id\" href=\"#DEBUG_PRINT_EARLY_RES\">DEBUG_PRINT_EARLY_RES</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Subtract (%d early reservations)\\n\", <a class=\"id\" href=\"#count\">count</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#idx\">idx</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"#if <a class=\"id\" href=\"#DEBUG_PRINT_EARLY_RES\">DEBUG_PRINT_EARLY_RES</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"  #%d [%010llx - %010llx] %15s\\n\", <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final_start\">final_start</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final_end\">final_end</a> = <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#final_start\">final_start</a> >= <a class=\"id\" href=\"#final_end\">final_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subtract_range\">subtract_range</a>(<a class=\"id\" href=\"#range\">range</a>, <a class=\"id\" href=\"#az\">az</a>, <a class=\"id\" href=\"#final_start\">final_start</a>, <a class=\"id\" href=\"#final_end\">final_end</a>);", 
"<span class=\"ts\"/>}", 
"", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#get_free_all_memory_range\">get_free_all_memory_range</a>(struct <a class=\"id\" href=\"#range\">range</a> **<a class=\"id\" href=\"#rangep\">rangep</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a> = 0, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#range\">range</a> *<a class=\"id\" href=\"#range\">range</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_range\">nr_range</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>  = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_early_res\">max_early_res</a> && <a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> *= 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#range\">range</a>) * <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#get_max_mapped\">get_max_mapped</a>();", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; (<a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#find_fw_memmap_area\">find_fw_memmap_area</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#size\">size</a>, sizeof(struct <a class=\"id\" href=\"#range\">range</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> == -1ULL)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"can not find more space for range free\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#range\">range</a> = <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* use early_node_map[] and early_res to get range array at first */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#range\">range</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_range\">nr_range</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need to go over early_node_map to find out good range for node */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_range\">nr_range</a> = <a class=\"id\" href=\"#add_from_early_node_map\">add_from_early_node_map</a>(<a class=\"id\" href=\"#range\">range</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#nr_range\">nr_range</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#subtract_range\">subtract_range</a>(<a class=\"id\" href=\"#range\">range</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a>, -1ULL);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#subtract_early_res\">subtract_early_res</a>(<a class=\"id\" href=\"#range\">range</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_range\">nr_range</a> = <a class=\"id\" href=\"#clean_sort_range\">clean_sort_range</a>(<a class=\"id\" href=\"#range\">range</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need to clear it ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodeid\">nodeid</a> == <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#early_res\">early_res</a>[0], 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>) * <a class=\"id\" href=\"#max_early_res\">max_early_res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_res\">early_res</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_early_res\">max_early_res</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rangep\">rangep</a> = <a class=\"id\" href=\"#range\">range</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_range\">nr_range</a>;", 
"}", 
"#else", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_res_to_bootmem\">early_res_to_bootmem</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#final_start\">final_start</a>, <a class=\"id\" href=\"#final_end\">final_end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>  = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_early_res\">max_early_res</a> && <a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need to skip first one ?*/</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_res\">early_res</a> != <a class=\"id\" href=\"#early_res_x\">early_res_x</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"(%d/%d early reservations) ==> bootmem [%010llx - %010llx]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#count\">count</a> - <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#max_early_res\">max_early_res</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#idx\">idx</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"  #%d [%010llx - %010llx] %16s\", <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final_start\">final_start</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final_end\">final_end</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#final_start\">final_start</a> >= <a class=\"id\" href=\"#final_end\">final_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" ==> [%010llx - %010llx]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final_start\">final_start</a>, <a class=\"id\" href=\"#final_end\">final_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_bootmem_generic\">reserve_bootmem_generic</a>(<a class=\"id\" href=\"#final_start\">final_start</a>, <a class=\"id\" href=\"#final_end\">final_end</a> - <a class=\"id\" href=\"#final_start\">final_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BOOTMEM_DEFAULT\">BOOTMEM_DEFAULT</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* clear them */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#early_res\">early_res</a>[0], 0, sizeof(struct <a class=\"id\" href=\"#early_res\">early_res</a>) * <a class=\"id\" href=\"#max_early_res\">max_early_res</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_res\">early_res</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_early_res\">max_early_res</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_res_count\">early_res_count</a> = 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Check for already reserved areas */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#bad_addr\">bad_addr</a>(<a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#addrp\">addrp</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a> = *<a class=\"id\" href=\"#addrp\">addrp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#changed\">changed</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_overlapped_early\">find_overlapped_early</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_early_res\">max_early_res</a> && <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#addrp\">addrp</a> = <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#round_up\">round_up</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#changed\">changed</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Check for already reserved areas */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#bad_addr_size\">bad_addr_size</a>(<a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#addrp\">addrp</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#sizep\">sizep</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a> = *<a class=\"id\" href=\"#addrp\">addrp</a>, <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a> = *<a class=\"id\" href=\"#sizep\">sizep</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#changed\">changed</a> = 0;", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_early_res\">max_early_res</a> && <a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#early_res\">early_res</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#early_res\">early_res</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a> &gt; <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a> &gt; <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#round_up\">round_up</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#last\">last</a> - <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a> <= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> && <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#sizep\">sizep</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
];
xr_frag_insert('l/c2/09d1414626be3c33a49c2497925c09a6664244.xr', __xr_tmp);
