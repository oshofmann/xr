var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#usedp\">usedp</a> |= 1U << <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#idp\">idp</a> = <a class=\"id\" href=\"#x86_stack_ids\">x86_stack_ids</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (unsigned long *)<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#in_irq_stack\">in_irq_stack</a>(unsigned long *<a class=\"id\" href=\"#stack\">stack</a>, unsigned long *<a class=\"id\" href=\"#irq_stack\">irq_stack</a>,", 
"<span class=\"ts\"/>     unsigned long *<a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#stack\">stack</a> >= <a class=\"id\" href=\"#irq_stack\">irq_stack</a> && <a class=\"id\" href=\"#stack\">stack</a> &lt; <a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We are returning from the irq stack and go to the previous one.</span>", 
"<span class=\"comment\"> * If the previous stack is also in the irq stack, then bp in the first</span>", 
"<span class=\"comment\"> * frame of the irq stack points to the previous, interrupted one.</span>", 
"<span class=\"comment\"> * Otherwise we have another level of indirection: We first save</span>", 
"<span class=\"comment\"> * the bp of the previous stack, then we switch the stack to the irq one</span>", 
"<span class=\"comment\"> * and save a new bp that links to the previous one.</span>", 
"<span class=\"comment\"> * (See save_args())</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#fixup_bp_irq_link\">fixup_bp_irq_link</a>(unsigned long <a class=\"id\" href=\"#bp\">bp</a>, unsigned long *<a class=\"id\" href=\"#stack\">stack</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned long *<a class=\"id\" href=\"#irq_stack\">irq_stack</a>, unsigned long *<a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FRAME_POINTER\">CONFIG_FRAME_POINTER</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_frame\">stack_frame</a> *<a class=\"id\" href=\"#frame\">frame</a> = (struct <a class=\"id\" href=\"#stack_frame\">stack_frame</a> *)<a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_irq_stack\">in_irq_stack</a>(<a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#irq_stack\">irq_stack</a>, <a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>(&amp;<a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#next_frame\">next_frame</a>, <a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(1, \"Perf: bad frame pointer = %p in \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"callchain\\n\", &amp;<a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#next_frame\">next_frame</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bp\">bp</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86-64 can have up to three kernel stacks:</span>", 
"<span class=\"comment\"> * process stack</span>", 
"<span class=\"comment\"> * interrupt stack</span>", 
"<span class=\"comment\"> * severe exception (double fault, nmi, stack fault, debug, mce) hardware stack</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#dump_trace\">dump_trace</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#stack\">stack</a>, unsigned long <a class=\"id\" href=\"#bp\">bp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#stacktrace_ops\">stacktrace_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long *)<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#irq_stack_ptr\">irq_stack_ptr</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#used\">used</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#tinfo\">tinfo</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#graph\">graph</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#stack\">stack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dummy\">dummy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a> = &amp;<a class=\"id\" href=\"#dummy\">dummy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> && <a class=\"id\" href=\"#task\">task</a> != <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a> = (unsigned long *)<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FRAME_POINTER\">CONFIG_FRAME_POINTER</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bp\">bp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Grab bp right from our regs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bp\">get_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bp is the last reg pushed by switch_to */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = *(unsigned long *) <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Print function call entries in all stacks, starting at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current stack address. If the stacks consist of nested</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exceptions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tinfo\">tinfo</a> = <a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#estack_end\">estack_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#estack_end\">estack_end</a> = <a class=\"id\" href=\"#in_exception_stack\">in_exception_stack</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, (unsigned long)<a class=\"id\" href=\"#stack\">stack</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#used\">used</a>, &amp;<a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#estack_end\">estack_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#stack\">stack</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#id\">id</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#walk_stack\">walk_stack</a>(<a class=\"id\" href=\"#tinfo\">tinfo</a>, <a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#estack_end\">estack_end</a>, &amp;<a class=\"id\" href=\"#graph\">graph</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#stack\">stack</a>(<a class=\"id\" href=\"#data\">data</a>, \"<EOE>\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We link to the next stack via the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * second-to-last pointer (index -2 to end) in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * exception stack:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a> = (unsigned long *) <a class=\"id\" href=\"#estack_end\">estack_end</a>[-2];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#irq_stack\">irq_stack</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_stack\">irq_stack</a> = <a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#IRQ_STACK_SIZE\">IRQ_STACK_SIZE</a> - 64) / sizeof(*<a class=\"id\" href=\"#irq_stack\">irq_stack</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_irq_stack\">in_irq_stack</a>(<a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#irq_stack\">irq_stack</a>, <a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#stack\">stack</a>(<a class=\"id\" href=\"#data\">data</a>, \"IRQ\") &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#walk_stack\">walk_stack</a>(<a class=\"id\" href=\"#tinfo\">tinfo</a>, <a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#bp\">bp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>, &amp;<a class=\"id\" href=\"#graph\">graph</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We link to the next stack (which would be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the process stack normally) the last</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pointer (index -1 to end) in the IRQ stack:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a> = (unsigned long *) (<a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>[-1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#fixup_bp_irq_link\">fixup_bp_irq_link</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#irq_stack\">irq_stack</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#stack\">stack</a>(<a class=\"id\" href=\"#data\">data</a>, \"EOI\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This handles the process stack:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#walk_stack\">walk_stack</a>(<a class=\"id\" href=\"#tinfo\">tinfo</a>, <a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#graph\">graph</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dump_trace\">dump_trace</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#show_stack_log_lvl\">show_stack_log_lvl</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned long *<a class=\"id\" href=\"#sp\">sp</a>, unsigned long <a class=\"id\" href=\"#bp\">bp</a>, char *<a class=\"id\" href=\"#log_lvl\">log_lvl</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#irq_stack\">irq_stack</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#stack\">stack</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a><span class=\"ts\"/>= (unsigned long *)(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#irq_stack_ptr\">irq_stack_ptr</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_stack\">irq_stack</a><span class=\"ts\"/>= (unsigned long *)(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#irq_stack_ptr\">irq_stack_ptr</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) - <a class=\"id\" href=\"#IRQ_STACK_SIZE\">IRQ_STACK_SIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Debugging aid: \"show_stack(NULL, NULL);\" prints the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * back trace for this cpu:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = (unsigned long *)<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = (unsigned long *)&amp;<a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a> = <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#kstack_depth_to_print\">kstack_depth_to_print</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stack\">stack</a> >= <a class=\"id\" href=\"#irq_stack\">irq_stack</a> && <a class=\"id\" href=\"#stack\">stack</a> <= <a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stack\">stack</a> == <a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a> = (unsigned long *) (<a class=\"id\" href=\"#irq_stack_end\">irq_stack_end</a>[-1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" <EOI> \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((long) <a class=\"id\" href=\"#stack\">stack</a> &amp; (<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>-1)) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> && ((<a class=\"id\" href=\"#i\">i</a> % <a class=\"id\" href=\"#STACKSLOTS_PER_LINE\">STACKSLOTS_PER_LINE</a>) == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n%s\", <a class=\"id\" href=\"#log_lvl\">log_lvl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" %016lx\", *<a class=\"id\" href=\"#stack\">stack</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_trace_log_lvl\">show_trace_log_lvl</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#log_lvl\">log_lvl</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#show_registers\">show_registers</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"CPU %d \", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_modules\">print_modules</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__show_regs\">__show_regs</a>(<a class=\"id\" href=\"#regs\">regs</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Process %s (pid: %d, threadinfo %p, task %p)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#cur\">cur</a>), <a class=\"id\" href=\"#cur\">cur</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When in-kernel, we also print out the stack and code at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time of the fault..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#code_prologue\">code_prologue</a> = <a class=\"id\" href=\"#code_bytes\">code_bytes</a> * 43 / 64;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#code_len\">code_len</a> = <a class=\"id\" href=\"#code_bytes\">code_bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ip\">ip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"Stack:\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_stack_log_lvl\">show_stack_log_lvl</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#regs\">regs</a>, (unsigned long *)<a class=\"id\" href=\"#sp\">sp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"Code: \");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> - <a class=\"id\" href=\"#code_prologue\">code_prologue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ip\">ip</a> &lt; (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a> || <a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* try starting at IP */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#code_len\">code_len</a> = <a class=\"id\" href=\"#code_len\">code_len</a> - <a class=\"id\" href=\"#code_prologue\">code_prologue</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#code_len\">code_len</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#ip\">ip</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ip\">ip</a> &lt; (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" Bad RIP value.\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ip\">ip</a> == (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"<%02x> \", <a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%02x \", <a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"}", 
"", 
"int <a class=\"id\" href=\"#is_valid_bugaddr\">is_valid_bugaddr</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#ud2\">ud2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__copy_from_user\">__copy_from_user</a>(&amp;<a class=\"id\" href=\"#ud2\">ud2</a>, (const void <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#ip\">ip</a>, sizeof(<a class=\"id\" href=\"#ud2\">ud2</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ud2\">ud2</a> == 0x0b0f;", 
"}", 
];
xr_frag_insert('l/c2/b22ad8d69c4b5e9607abf634b54b1d43ad21fe.xr', __xr_tmp);
