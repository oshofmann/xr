var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_MM_TYPES_H\">_LINUX_MM_TYPES_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_MM_TYPES_H\">_LINUX_MM_TYPES_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#auxvec\">auxvec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#threads\">threads</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prio_tree\">prio_tree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rbtree\">rbtree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page\">page</a>-<a class=\"id\" href=\"#debug\">debug</a>-<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu\">mmu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#AT_VECTOR_SIZE_ARCH\">AT_VECTOR_SIZE_ARCH</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AT_VECTOR_SIZE_ARCH\">AT_VECTOR_SIZE_ARCH</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AT_VECTOR_SIZE\">AT_VECTOR_SIZE</a> (2*(<a class=\"id\" href=\"#AT_VECTOR_SIZE_ARCH\">AT_VECTOR_SIZE_ARCH</a> + <a class=\"id\" href=\"#AT_VECTOR_SIZE_BASE\">AT_VECTOR_SIZE_BASE</a> + 1))", 
"", 
"struct <a class=\"id\" href=\"#address_space\">address_space</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USE_SPLIT_PTLOCKS\">USE_SPLIT_PTLOCKS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> >= <a class=\"id\" href=\"#CONFIG_SPLIT_PTLOCK_CPUS\">CONFIG_SPLIT_PTLOCK_CPUS</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each physical page in the system has a struct page associated with</span>", 
"<span class=\"comment\"> * it to keep track of whatever it is we are using the page for at the</span>", 
"<span class=\"comment\"> * moment. Note that we have no way to track which tasks are using</span>", 
"<span class=\"comment\"> * a page, though if it is a pagecache page, rmap structures can tell us</span>", 
"<span class=\"comment\"> * who is mapping it.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Atomic flags, some possibly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * updated asynchronously */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#_count\">_count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Usage count, see below. */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#_mapcount\">_mapcount</a>;<span class=\"ts\"/><span class=\"comment\">/* Count of ptes mapped in mms,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to show when page is mapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * &amp; limit reverse map searches.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SLUB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#inuse\">inuse</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#objects\">objects</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/>    struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#private\">private</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mapping-private opaque data:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <span class=\"ts\"/> * usually used for buffer_heads</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if PagePrivate set; used for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * swp_entry_t if PageSwapCache;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * indicates order in the buddy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * system if PG_buddy is set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;<span class=\"ts\"/><span class=\"comment\">/* If low bit clear, points to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * inode address_space, or NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If page mapped as anonymous</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * memory, low bit is set, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it points to anon_vma object:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * see PAGE_MAPPING_ANON below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>    };", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INK_GUEST\">CONFIG_INK_GUEST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#ink_priv_ctx\">ink_priv_ctx</a>;", 
"<span class=\"ts\"/>#if <a class=\"id\" href=\"#USE_SPLIT_PTLOCKS\">USE_SPLIT_PTLOCKS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/> <span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#USE_SPLIT_PTLOCKS\">USE_SPLIT_PTLOCKS</a>", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#ptl\">ptl</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>    struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#slab\">slab</a>;<span class=\"ts\"/><span class=\"comment\">/* SLUB: Pointer to slab */</span>", 
"<span class=\"ts\"/>    struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#first_page\">first_page</a>;<span class=\"ts\"/><span class=\"comment\">/* Compound tail pages */</span>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Our offset within mapping. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#freelist\">freelist</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SLUB: freelist req. slab lock */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INK_GUEST\">CONFIG_INK_GUEST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#ink_priv_shadow\">ink_priv_shadow</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#lru\">lru</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pageout list, eg. active_list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * protected by zone-&gt;lru_lock !</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On machines where all RAM is mapped into kernel address space,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can simply calculate the virtual address. On machines with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * highmem some memory is mapped into kernel virtual memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dynamically, so we need a place to store that address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that this field could be 16 bits on x86 ... ;)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Architectures with slow multiplication can define</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * WANT_PAGE_VIRTUAL in asm/page.h</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#WANT_PAGE_VIRTUAL\">WANT_PAGE_VIRTUAL</a>)", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#virtual\">virtual</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Kernel virtual address (NULL if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   not kmapped, ie. highmem) */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* WANT_PAGE_VIRTUAL */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_WANT_PAGE_DEBUG_FLAGS\">CONFIG_WANT_PAGE_DEBUG_FLAGS</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debug_flags\">debug_flags</a>;<span class=\"ts\"/><span class=\"comment\">/* Use atomic bitops on this */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KMEMCHECK\">CONFIG_KMEMCHECK</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmemcheck wants to track the status of each byte in a page; this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is a pointer to such a status block. NULL if not tracked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#shadow\">shadow</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A region containing a mapping of a non-memory backed file under NOMMU</span>", 
"<span class=\"comment\"> * conditions.  These are held in a global tree and are pinned by the VMAs that</span>", 
"<span class=\"comment\"> * map parts of them.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_region\">vm_region</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a><span class=\"ts\"/><a class=\"id\" href=\"#vm_rb\">vm_rb</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* link in global region tree */</span>", 
];
xr_frag_insert('l/c2/ceb17bbcc2ac9acf7f7494ea2d63839f282476.xr', __xr_tmp);
