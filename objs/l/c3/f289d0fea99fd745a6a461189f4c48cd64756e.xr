var __xr_tmp = [
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_RCU\">CONFIG_PROVE_RCU</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"\\tRCU lockdep checking is enabled.\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_TORTURE_TEST_RUNNABLE\">CONFIG_RCU_TORTURE_TEST_RUNNABLE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"\\tRCU torture testing starts during boot.\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_RCU_CPU_STALL_DETECTOR\">CONFIG_RCU_CPU_STALL_DETECTOR</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/>       \"\\tRCU-based detection of stalled CPUs is disabled.\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_RCU_CPU_STALL_VERBOSE\">CONFIG_RCU_CPU_STALL_VERBOSE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"\\tVerbose stalled-CPUs detection is disabled.\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#NUM_RCU_LVL_4\">NUM_RCU_LVL_4</a> != 0", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"\\tExperimental four-level hierarchy is enabled.\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TREE_PREEMPT_RCU\">CONFIG_TREE_PREEMPT_RCU</a>", 
"", 
"struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> <a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a> = <a class=\"id\" href=\"#RCU_STATE_INITIALIZER\">RCU_STATE_INITIALIZER</a>(<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>);", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a>, <a class=\"id\" href=\"#rcu_preempt_data\">rcu_preempt_data</a>);", 
"", 
"static int <a class=\"id\" href=\"#rcu_preempted_readers_exp\">rcu_preempted_readers_exp</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tell them what RCU they are running.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#rcu_bootup_announce\">rcu_bootup_announce</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Preemptable hierarchical RCU implementation.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_bootup_announce_oddness\">rcu_bootup_announce_oddness</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the number of RCU-preempt batches processed thus far</span>", 
"<span class=\"comment\"> * for debug and statistics.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#rcu_batches_completed_preempt\">rcu_batches_completed_preempt</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>.<a class=\"id\" href=\"#completed\">completed</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_batches_completed_preempt\">rcu_batches_completed_preempt</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the number of RCU batches processed thus far for debug &amp; stats.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#rcu_batches_completed\">rcu_batches_completed</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_batches_completed_preempt\">rcu_batches_completed_preempt</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_batches_completed\">rcu_batches_completed</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force a quiescent state for preemptible RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_force_quiescent_state\">rcu_force_quiescent_state</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(&amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_force_quiescent_state\">rcu_force_quiescent_state</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Record a preemptable-RCU quiescent state for the specified CPU.  Note</span>", 
"<span class=\"comment\"> * that this just means that the task currently running on the CPU is</span>", 
"<span class=\"comment\"> * not in a quiescent state.  There might be any number of tasks blocked</span>", 
"<span class=\"comment\"> * while in an RCU read-side critical section.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unlike the other rcu_*_qs() functions, callers to this function</span>", 
"<span class=\"comment\"> * must disable irqs in order to protect the assignment to</span>", 
"<span class=\"comment\"> * -&gt;rcu_read_unlock_special.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_qs\">rcu_preempt_qs</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_preempt_data\">rcu_preempt_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc_completed\">passed_quiesc_completed</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a> &= ~<a class=\"id\" href=\"#RCU_READ_UNLOCK_NEED_QS\">RCU_READ_UNLOCK_NEED_QS</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We have entered the scheduler, and the current task might soon be</span>", 
"<span class=\"comment\"> * context-switched away from.  If this task is in an RCU read-side</span>", 
"<span class=\"comment\"> * critical section, we will no longer be able to rely on the CPU to</span>", 
"<span class=\"comment\"> * record that fact, so we enqueue the task on the appropriate entry</span>", 
"<span class=\"comment\"> * of the blocked_tasks[] array.  The task will dequeue itself when</span>", 
"<span class=\"comment\"> * it exits the outermost enclosing RCU read-side critical section.</span>", 
"<span class=\"comment\"> * Therefore, the current grace period cannot be permitted to complete</span>", 
"<span class=\"comment\"> * until the blocked_tasks[] entry indexed by the low-order bit of</span>", 
"<span class=\"comment\"> * rnp-&gt;gpnum empties.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must disable preemption.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_note_context_switch\">rcu_preempt_note_context_switch</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#phase\">phase</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_lock_nesting\">rcu_read_lock_nesting</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a> &amp; <a class=\"id\" href=\"#RCU_READ_UNLOCK_BLOCKED\">RCU_READ_UNLOCK_BLOCKED</a>) == 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Possibly blocking in an RCU read-side critical section. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a> = <a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>.<a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a> |= <a class=\"id\" href=\"#RCU_READ_UNLOCK_BLOCKED\">RCU_READ_UNLOCK_BLOCKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_blocked_node\">rcu_blocked_node</a> = <a class=\"id\" href=\"#rnp\">rnp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this CPU has already checked in, then this task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will hold up the next grace period rather than the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * current grace period.  Queue the task accordingly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the task is queued for the current grace period</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (i.e., this CPU has not yet passed through a quiescent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * state for the current grace period), then as long</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as that task remains queued, the current grace period</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cannot end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But first, note that the current CPU must still be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on line!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>((<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a> &amp; <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a>) == 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phase\">phase</a> = (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> + !(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> &amp; <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>)) &amp; 0x1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>, &amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[<a class=\"id\" href=\"#phase\">phase</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Either we were not in an RCU read-side critical section to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * begin with, or we have now recorded that critical section</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * globally.  Either way, we can now note a quiescent state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for this CPU.  Again, if we were in an RCU read-side critical</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * section, and if that critical section was blocking the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grace period, then the fact that the task has been enqueued</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * means that we continue to block the current grace period.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_qs\">rcu_preempt_qs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tree-preemptable RCU implementation for rcu_read_lock().</span>", 
"<span class=\"comment\"> * Just increment -&gt;rcu_read_lock_nesting, shared state will be updated</span>", 
"<span class=\"comment\"> * if we block.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__rcu_read_lock\">__rcu_read_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#rcu_read_lock_nesting\">rcu_read_lock_nesting</a>)++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();  <span class=\"comment\">/* needed if we ever invoke rcu_read_lock in rcutree.c */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__rcu_read_lock\">__rcu_read_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check for preempted RCU readers blocking the current grace period</span>", 
"<span class=\"comment\"> * for the specified rcu_node structure.  If the caller needs a reliable</span>", 
"<span class=\"comment\"> * answer, it must hold the rcu_node's -&gt;lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#phase\">phase</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> &amp; 0x1;", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[<a class=\"id\" href=\"#phase\">phase</a>]) ||", 
"<span class=\"ts\"/>       !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[<a class=\"id\" href=\"#phase\">phase</a> + 2]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Record a quiescent state for all tasks that were previously queued</span>", 
"<span class=\"comment\"> * on the specified rcu_node structure and that were blocking the current</span>", 
"<span class=\"comment\"> * RCU grace period.  The caller must hold the specified rnp-&gt;lock with</span>", 
"<span class=\"comment\"> * irqs disabled, and this lock is released upon return, but irqs remain</span>", 
"<span class=\"comment\"> * disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_report_unblock_qs_rnp\">rcu_report_unblock_qs_rnp</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp_p\">rnp_p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> != 0 || <a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(<a class=\"id\" href=\"#rnp\">rnp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;  <span class=\"comment\">/* Still need more quiescent states! */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp_p\">rnp_p</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp_p\">rnp_p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Either there is only one rcu_node in the tree,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or tasks were kicked up to root rcu_node due to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CPUs going offline.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_qs_rsp\">rcu_report_qs_rsp</a>(&amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Report up the rest of the hierarchy. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"comment\">/* irqs remain disabled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp_p\">rnp_p</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_qs_rnp\">rcu_report_qs_rnp</a>(<a class=\"id\" href=\"#mask\">mask</a>, &amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>, <a class=\"id\" href=\"#rnp_p\">rnp_p</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle special cases during rcu_read_unlock(), such as needing to</span>", 
"<span class=\"comment\"> * notify RCU core processing or task having blocked during the RCU</span>", 
"<span class=\"comment\"> * read-side critical section.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#empty\">empty</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#empty_exp\">empty_exp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#special\">special</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NMI handlers cannot block and cannot safely manipulate state. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_nmi\">in_nmi</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If RCU core is waiting for this CPU to exit critical section,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * let it know that we have done so.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#special\">special</a> &amp; <a class=\"id\" href=\"#RCU_READ_UNLOCK_NEED_QS\">RCU_READ_UNLOCK_NEED_QS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_qs\">rcu_preempt_qs</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hardware IRQ handlers cannot block. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_irq\">in_irq</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clean up if blocked during RCU read-side critical section. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#special\">special</a> &amp; <a class=\"id\" href=\"#RCU_READ_UNLOCK_BLOCKED\">RCU_READ_UNLOCK_BLOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a> &= ~<a class=\"id\" href=\"#RCU_READ_UNLOCK_BLOCKED\">RCU_READ_UNLOCK_BLOCKED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove this task from the list it blocked on.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * task can migrate while we acquire the lock, but at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * most one time.  So at most two passes through loop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_blocked_node\">rcu_blocked_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);  <span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a> == <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_blocked_node\">rcu_blocked_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs remain disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#empty\">empty</a> = !<a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#empty_exp\">empty_exp</a> = !<a class=\"id\" href=\"#rcu_preempted_readers_exp\">rcu_preempted_readers_exp</a>(<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* ensure expedited fastpath sees end of RCU c-s. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_blocked_node\">rcu_blocked_node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this was the last task on the current list, and if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we aren't waiting on any CPUs, report the quiescent state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note that rcu_report_unblock_qs_rnp() releases rnp-&gt;lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#empty\">empty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_unblock_qs_rnp\">rcu_report_unblock_qs_rnp</a>(<a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this was the last task on the expedited lists,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then we need to report up the rcu_node hierarchy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#empty_exp\">empty_exp</a> && !<a class=\"id\" href=\"#rcu_preempted_readers_exp\">rcu_preempted_readers_exp</a>(<a class=\"id\" href=\"#rnp\">rnp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_exp_rnp\">rcu_report_exp_rnp</a>(&amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>, <a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tree-preemptable RCU implementation for rcu_read_unlock().</span>", 
"<span class=\"comment\"> * Decrement -&gt;rcu_read_lock_nesting.  If the result is zero (outermost</span>", 
"<span class=\"comment\"> * rcu_read_unlock()) and -&gt;rcu_read_unlock_special is non-zero, then</span>", 
"<span class=\"comment\"> * invoke rcu_read_unlock_special() to clean up after a context switch</span>", 
"<span class=\"comment\"> * in an RCU read-side critical section and other special cases.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__rcu_read_unlock\">__rcu_read_unlock</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();  <span class=\"comment\">/* needed if we ever invoke rcu_read_unlock in rcutree.c */</span>", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_lock_nesting\">rcu_read_lock_nesting</a>) == 0 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_lock_nesting\">rcu_read_lock_nesting</a>) &lt; 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_PROVE_LOCKING */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__rcu_read_unlock\">__rcu_read_unlock</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_CPU_STALL_DETECTOR\">CONFIG_RCU_CPU_STALL_DETECTOR</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_CPU_STALL_VERBOSE\">CONFIG_RCU_CPU_STALL_VERBOSE</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dump detailed information for all tasks blocking the current RCU</span>", 
"<span class=\"comment\"> * grace period on the specified rcu_node structure.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_print_detail_task_stall_rnp\">rcu_print_detail_task_stall_rnp</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#phase\">phase</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(<a class=\"id\" href=\"#rnp\">rnp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phase\">phase</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> &amp; 0x1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a> = &amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[<a class=\"id\" href=\"#phase\">phase</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#lp\">lp</a>, <a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_show_task\">sched_show_task</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dump detailed information for all tasks blocking the current RCU</span>", 
"<span class=\"comment\"> * grace period.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_print_detail_task_stall\">rcu_print_detail_task_stall</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_print_detail_task_stall_rnp\">rcu_print_detail_task_stall_rnp</a>(<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_for_each_leaf_node\">rcu_for_each_leaf_node</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_print_detail_task_stall_rnp\">rcu_print_detail_task_stall_rnp</a>(<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_RCU_CPU_STALL_VERBOSE */</span>", 
"", 
"static void <a class=\"id\" href=\"#rcu_print_detail_task_stall\">rcu_print_detail_task_stall</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_RCU_CPU_STALL_VERBOSE */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scan the current list of tasks blocked within RCU read-side critical</span>", 
"<span class=\"comment\"> * sections, printing out the tid of each.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_print_task_stall\">rcu_print_task_stall</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#phase\">phase</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(<a class=\"id\" href=\"#rnp\">rnp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phase\">phase</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> &amp; 0x1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a> = &amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[<a class=\"id\" href=\"#phase\">phase</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#lp\">lp</a>, <a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" P%d\", <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_RCU_CPU_STALL_DETECTOR */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check that the list of blocked tasks for the newly completed grace</span>", 
"<span class=\"comment\"> * period is in fact empty.  It is a serious bug to complete a grace</span>", 
"<span class=\"comment\"> * period that still has RCU readers blocked!  This function must be</span>", 
"<span class=\"comment\"> * invoked -before- updating this rnp's -&gt;gpnum, and the rnp's -&gt;lock</span>", 
"<span class=\"comment\"> * must be held by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_check_blocked_tasks\">rcu_preempt_check_blocked_tasks</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(<a class=\"id\" href=\"#rnp\">rnp</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle tasklist migration for case in which all CPUs covered by the</span>", 
"<span class=\"comment\"> * specified rcu_node have gone offline.  Move them up to the root</span>", 
"<span class=\"comment\"> * rcu_node.  The reason for not just moving them to the immediate</span>", 
"<span class=\"comment\"> * parent is to remove the need for rcu_read_unlock_special() to</span>", 
"<span class=\"comment\"> * make more than two attempts to acquire the target rcu_node's lock.</span>", 
"<span class=\"comment\"> * Returns true if there were tasks blocking the current RCU grace</span>", 
"<span class=\"comment\"> * period.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if there was previously a task blocking the current grace</span>", 
"<span class=\"comment\"> * period on the specified rcu_node structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must hold rnp-&gt;lock with irqs disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempt_offline_tasks\">rcu_preempt_offline_tasks</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lp_root\">lp_root</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp_root\">rnp_root</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tp\">tp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a> == <a class=\"id\" href=\"#rnp_root\">rnp_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(1, \"Last CPU thought to be offlined?\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;  <span class=\"comment\">/* Shouldn't happen: at least one CPU online. */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rnp\">rnp</a> != <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[0]) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>      !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[1]) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>      !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[2]) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>      !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[3])));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Move tasks up to root rcu_node.  Rely on the fact that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * root rcu_node can be at most one ahead of the rest of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rcu_nodes in terms of gp_num value.  This fact allows us to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * move the blocked_tasks[] array directly, element by element.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(<a class=\"id\" href=\"#rnp\">rnp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> |= <a class=\"id\" href=\"#RCU_OFL_TASKS_NORM_GP\">RCU_OFL_TASKS_NORM_GP</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_preempted_readers_exp\">rcu_preempted_readers_exp</a>(<a class=\"id\" href=\"#rnp\">rnp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> |= <a class=\"id\" href=\"#RCU_OFL_TASKS_EXP_GP\">RCU_OFL_TASKS_EXP_GP</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a> = &amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp_root\">lp_root</a> = &amp;<a class=\"id\" href=\"#rnp_root\">rnp_root</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#lp\">lp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#lp\">lp</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tp\">tp</a>), <a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp_root\">rnp_root</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs already disabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcu_blocked_node\">rcu_blocked_node</a> = <a class=\"id\" href=\"#rnp_root\">rnp_root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>, <a class=\"id\" href=\"#lp_root\">lp_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp_root\">rnp_root</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs remain disabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do CPU-offline processing for preemptable RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_offline_cpu\">rcu_preempt_offline_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_offline_cpu\">__rcu_offline_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_HOTPLUG_CPU */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check for a quiescent state from the current CPU.  When a task blocks,</span>", 
"<span class=\"comment\"> * the task is recorded in the corresponding CPU's rcu_node structure,</span>", 
"<span class=\"comment\"> * which is checked elsewhere.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must disable hard irqs.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_check_callbacks\">rcu_preempt_check_callbacks</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_lock_nesting\">rcu_read_lock_nesting</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_qs\">rcu_preempt_qs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_preempt_data\">rcu_preempt_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#qs_pending\">qs_pending</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a> |= <a class=\"id\" href=\"#RCU_READ_UNLOCK_NEED_QS\">RCU_READ_UNLOCK_NEED_QS</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Process callbacks for preemptable RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_process_callbacks\">rcu_preempt_process_callbacks</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_process_callbacks\">__rcu_process_callbacks</a>(&amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_preempt_data\">rcu_preempt_data</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Queue a preemptable-RCU callback for invocation after a grace period.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#call_rcu\">call_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>, void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__call_rcu\">__call_rcu</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#func\">func</a>, &amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#call_rcu\">call_rcu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * synchronize_rcu - wait until a grace period has elapsed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Control will return to the caller some time after a full grace</span>", 
"<span class=\"comment\"> * period has elapsed, in other words after all currently executing RCU</span>", 
"<span class=\"comment\"> * read-side critical sections have completed.  RCU read-side critical</span>", 
"<span class=\"comment\"> * sections are delimited by rcu_read_lock() and rcu_read_unlock(),</span>", 
"<span class=\"comment\"> * and may be nested.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_synchronize\">rcu_synchronize</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rcu_scheduler_active\">rcu_scheduler_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rcu_head_on_stack\">init_rcu_head_on_stack</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Will wake me after RCU finished. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#wakeme_after_rcu\">wakeme_after_rcu</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for it. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_rcu_head_on_stack\">destroy_rcu_head_on_stack</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>);", 
"", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#sync_rcu_preempt_exp_wq\">sync_rcu_preempt_exp_wq</a>);", 
"static long <a class=\"id\" href=\"#sync_rcu_preempt_exp_count\">sync_rcu_preempt_exp_count</a>;", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#sync_rcu_preempt_exp_mutex\">sync_rcu_preempt_exp_mutex</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return non-zero if there are any tasks in RCU read-side critical</span>", 
];
xr_frag_insert('l/c3/f289d0fea99fd745a6a461189f4c48cd64756e.xr', __xr_tmp);
