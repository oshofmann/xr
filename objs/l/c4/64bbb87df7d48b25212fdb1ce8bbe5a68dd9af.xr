var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  include/linux/ktime.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  ktime_t - nanosecond-resolution time format.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Copyright(C) 2005, Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>", 
"<span class=\"comment\"> *   Copyright(C) 2005, Red Hat, Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  data type definitions, declarations, prototypes and macros.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Started by: Thomas Gleixner and Ingo Molnar</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Credits:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/>Roman Zippel provided the ideas and primary code snippets of</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/>the ktime_t union and further simplifications of the original</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/>code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  For licencing details see kernel-base/COPYING</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_KTIME_H\">_LINUX_KTIME_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_KTIME_H\">_LINUX_KTIME_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ktime_t:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On 64-bit CPUs a single 64-bit variable is used to store the hrtimers</span>", 
"<span class=\"comment\"> * internal representation of time values in scalar nanoseconds. The</span>", 
"<span class=\"comment\"> * design plays out best on 64-bit CPUs, where most conversions are</span>", 
"<span class=\"comment\"> * NOPs and most arithmetic ktime_t operations are plain arithmetic</span>", 
"<span class=\"comment\"> * operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On 32-bit CPUs an optimized representation of the timespec structure</span>", 
"<span class=\"comment\"> * is used to avoid expensive conversions from and to timespecs. The</span>", 
"<span class=\"comment\"> * endian-aware order of the tv struct members is choosen to allow</span>", 
"<span class=\"comment\"> * mathematical operations on the tv64 member of the union too, which</span>", 
"<span class=\"comment\"> * for certain operations produces better code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For architectures with efficient support for 64/32-bit conversions the</span>", 
"<span class=\"comment\"> * plain scalar nanosecond based representation can be selected by the</span>", 
"<span class=\"comment\"> * config switch CONFIG_KTIME_SCALAR.</span>", 
"<span class=\"comment\"> */</span>", 
"union <a class=\"id\" href=\"#ktime\">ktime</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a><span class=\"ts\"/><a class=\"id\" href=\"#tv64\">tv64</a>;", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> != 64 && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_KTIME_SCALAR\">CONFIG_KTIME_SCALAR</a>)", 
"<span class=\"ts\"/>struct {", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__BIG_ENDIAN\">__BIG_ENDIAN</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s32\">s32</a><span class=\"ts\"/><a class=\"id\" href=\"#sec\">sec</a>, <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"# else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s32\">s32</a><span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#sec\">sec</a>;", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#tv\">tv</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"typedef union <a class=\"id\" href=\"#ktime\">ktime</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Kill this */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#s64\">s64</a>)~((<a class=\"id\" href=\"#u64\">u64</a>)1 << 63))", 
"#if (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KTIME_SEC_MAX\">KTIME_SEC_MAX</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a> / <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KTIME_SEC_MAX\">KTIME_SEC_MAX</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ktime_t definitions when using the 64-bit scalar representation:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#if (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_KTIME_SCALAR\">CONFIG_KTIME_SCALAR</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_set - Set a ktime_t variable from a seconds/nanoseconds value</span>", 
"<span class=\"comment\"> * @secs:<span class=\"ts\"/>seconds to set</span>", 
"<span class=\"comment\"> * @nsecs:<span class=\"ts\"/>nanoseconds to set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the ktime_t representation of the value</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#ktime_set\">ktime_set</a>(const long <a class=\"id\" href=\"#secs\">secs</a>, const unsigned long <a class=\"id\" href=\"#nsecs\">nsecs</a>)", 
"{", 
"#if (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#secs\">secs</a> >= <a class=\"id\" href=\"#KTIME_SEC_MAX\">KTIME_SEC_MAX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#ktime_t\">ktime_t</a>){ .<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a> };", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ktime_t\">ktime_t</a>) { .<a class=\"id\" href=\"#tv64\">tv64</a> = (<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#secs\">secs</a> * <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> + (<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#nsecs\">nsecs</a> };", 
"}", 
"", 
"<span class=\"comment\">/* Subtract two ktime_t variables. rem = lhs -rhs: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#lhs\">lhs</a>, <a class=\"id\" href=\"#rhs\">rhs</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ (<a class=\"id\" href=\"#ktime_t\">ktime_t</a>){ .<a class=\"id\" href=\"#tv64\">tv64</a> = (<a class=\"id\" href=\"#lhs\">lhs</a>).<a class=\"id\" href=\"#tv64\">tv64</a> - (<a class=\"id\" href=\"#rhs\">rhs</a>).<a class=\"id\" href=\"#tv64\">tv64</a> }; })", 
"", 
"<span class=\"comment\">/* Add two ktime_t variables. res = lhs + rhs: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#lhs\">lhs</a>, <a class=\"id\" href=\"#rhs\">rhs</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ (<a class=\"id\" href=\"#ktime_t\">ktime_t</a>){ .<a class=\"id\" href=\"#tv64\">tv64</a> = (<a class=\"id\" href=\"#lhs\">lhs</a>).<a class=\"id\" href=\"#tv64\">tv64</a> + (<a class=\"id\" href=\"#rhs\">rhs</a>).<a class=\"id\" href=\"#tv64\">tv64</a> }; })", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a ktime_t variable and a scalar nanosecond value.</span>", 
"<span class=\"comment\"> * res = kt + nsval:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>(<a class=\"id\" href=\"#kt\">kt</a>, <a class=\"id\" href=\"#nsval\">nsval</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ (<a class=\"id\" href=\"#ktime_t\">ktime_t</a>){ .<a class=\"id\" href=\"#tv64\">tv64</a> = (<a class=\"id\" href=\"#kt\">kt</a>).<a class=\"id\" href=\"#tv64\">tv64</a> + (<a class=\"id\" href=\"#nsval\">nsval</a>) }; })", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Subtract a scalar nanosecod from a ktime_t variable</span>", 
"<span class=\"comment\"> * res = kt - nsval:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ktime_sub_ns\">ktime_sub_ns</a>(<a class=\"id\" href=\"#kt\">kt</a>, <a class=\"id\" href=\"#nsval\">nsval</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ (<a class=\"id\" href=\"#ktime_t\">ktime_t</a>){ .<a class=\"id\" href=\"#tv64\">tv64</a> = (<a class=\"id\" href=\"#kt\">kt</a>).<a class=\"id\" href=\"#tv64\">tv64</a> - (<a class=\"id\" href=\"#nsval\">nsval</a>) }; })", 
"", 
"<span class=\"comment\">/* convert a timespec to ktime_t format: */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#timespec_to_ktime\">timespec_to_ktime</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ktime_set\">ktime_set</a>(<a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>, <a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>);", 
"}", 
"", 
"<span class=\"comment\">/* convert a timeval to ktime_t format: */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#timeval_to_ktime\">timeval_to_ktime</a>(struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#tv\">tv</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ktime_set\">ktime_set</a>(<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>, <a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Map the ktime_t to timespec conversion to ns_to_timespec function */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(<a class=\"id\" href=\"#kt\">kt</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns_to_timespec\">ns_to_timespec</a>((<a class=\"id\" href=\"#kt\">kt</a>).<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"", 
"<span class=\"comment\">/* Map the ktime_t to timeval conversion to ns_to_timeval function */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ktime_to_timeval\">ktime_to_timeval</a>(<a class=\"id\" href=\"#kt\">kt</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns_to_timeval\">ns_to_timeval</a>((<a class=\"id\" href=\"#kt\">kt</a>).<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"", 
"<span class=\"comment\">/* Convert ktime_t to nanoseconds - NOP in the scalar storage format: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#kt\">kt</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#kt\">kt</a>).<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* !((BITS_PER_LONG == 64) || defined(CONFIG_KTIME_SCALAR)) */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper macros/inlines to get the ktime_t math right in the timespec</span>", 
"<span class=\"comment\"> * representation. The macros are sometimes ugly - their actual use is</span>", 
"<span class=\"comment\"> * pretty okay-ish, given the circumstances. We do all this for</span>", 
"<span class=\"comment\"> * performance reasons. The pure scalar nsec_t based code was nice and</span>", 
"<span class=\"comment\"> * simple, but created too many 64-bit / 32-bit conversions and divisions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Be especially aware that negative values are represented in a way</span>", 
"<span class=\"comment\"> * that the tv.sec field is negative and the tv.nsec field is greater</span>", 
"<span class=\"comment\"> * or equal to zero but less than nanoseconds per second. This is the</span>", 
"<span class=\"comment\"> * same representation which is used by timespecs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   tv.sec &lt; 0 and 0 &gt;= tv.nsec &lt; NSEC_PER_SEC</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Set a ktime_t variable to a value in sec/nsec representation: */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#ktime_set\">ktime_set</a>(const long <a class=\"id\" href=\"#secs\">secs</a>, const unsigned long <a class=\"id\" href=\"#nsecs\">nsecs</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ktime_t\">ktime_t</a>) { .<a class=\"id\" href=\"#tv\">tv</a> = { .<a class=\"id\" href=\"#sec\">sec</a> = <a class=\"id\" href=\"#secs\">secs</a>, .<a class=\"id\" href=\"#nsec\">nsec</a> = <a class=\"id\" href=\"#nsecs\">nsecs</a> } };", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_sub - subtract two ktime_t variables</span>", 
"<span class=\"comment\"> * @lhs:<span class=\"ts\"/>minuend</span>", 
"<span class=\"comment\"> * @rhs:<span class=\"ts\"/>subtrahend</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the remainder of the substraction</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#lhs\">lhs</a>, const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#rhs\">rhs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#lhs\">lhs</a>.<a class=\"id\" href=\"#tv64\">tv64</a> - <a class=\"id\" href=\"#rhs\">rhs</a>.<a class=\"id\" href=\"#tv64\">tv64</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#nsec\">nsec</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#nsec\">nsec</a> += <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_add - add two ktime_t variables</span>", 
"<span class=\"comment\"> * @add1:<span class=\"ts\"/>addend1</span>", 
"<span class=\"comment\"> * @add2:<span class=\"ts\"/>addend2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the sum of @add1 and @add2.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#add1\">add1</a>, const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#add2\">add2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#add1\">add1</a>.<a class=\"id\" href=\"#tv64\">tv64</a> + <a class=\"id\" href=\"#add2\">add2</a>.<a class=\"id\" href=\"#tv64\">tv64</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * performance trick: the (u32) -NSEC gives 0x00000000Fxxxxxxx</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we subtract NSEC_PER_SEC and add 1 to the upper 32 bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's equivalent to:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   tv.nsec -= NSEC_PER_SEC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   tv.sec ++;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#nsec\">nsec</a> >= <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#tv64\">tv64</a> += (<a class=\"id\" href=\"#u32\">u32</a>)-<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_add_ns - Add a scalar nanoseconds value to a ktime_t variable</span>", 
"<span class=\"comment\"> * @kt:<span class=\"ts\"/><span class=\"ts\"/>addend</span>", 
"<span class=\"comment\"> * @nsec:<span class=\"ts\"/>the scalar nsec value to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the sum of @kt and @nsec in ktime_t format</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec\">nsec</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_sub_ns - Subtract a scalar nanoseconds value from a ktime_t variable</span>", 
"<span class=\"comment\"> * @kt:<span class=\"ts\"/><span class=\"ts\"/>minuend</span>", 
"<span class=\"comment\"> * @nsec:<span class=\"ts\"/>the scalar nsec value to subtract</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the subtraction of @nsec from @kt in ktime_t format</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#ktime_sub_ns\">ktime_sub_ns</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec\">nsec</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timespec_to_ktime - convert a timespec to ktime_t format</span>", 
"<span class=\"comment\"> * @ts:<span class=\"ts\"/><span class=\"ts\"/>the timespec variable to convert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a ktime_t variable with the converted timespec value</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#timespec_to_ktime\">timespec_to_ktime</a>(const struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ktime_t\">ktime_t</a>) { .<a class=\"id\" href=\"#tv\">tv</a> = { .<a class=\"id\" href=\"#sec\">sec</a> = (<a class=\"id\" href=\"#s32\">s32</a>)<a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <span class=\"ts\"/>   .<a class=\"id\" href=\"#nsec\">nsec</a> = (<a class=\"id\" href=\"#s32\">s32</a>)<a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> } };", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timeval_to_ktime - convert a timeval to ktime_t format</span>", 
"<span class=\"comment\"> * @tv:<span class=\"ts\"/><span class=\"ts\"/>the timeval variable to convert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a ktime_t variable with the converted timeval value</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#timeval_to_ktime\">timeval_to_ktime</a>(const struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#tv\">tv</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ktime_t\">ktime_t</a>) { .<a class=\"id\" href=\"#tv\">tv</a> = { .<a class=\"id\" href=\"#sec\">sec</a> = (<a class=\"id\" href=\"#s32\">s32</a>)<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   .<a class=\"id\" href=\"#nsec\">nsec</a> = (<a class=\"id\" href=\"#s32\">s32</a>)<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> * 1000 } };", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_to_timespec - convert a ktime_t variable to timespec format</span>", 
"<span class=\"comment\"> * @kt:<span class=\"ts\"/><span class=\"ts\"/>the ktime_t variable to convert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the timespec representation of the ktime value</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#timespec\">timespec</a>) { .<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = (<a class=\"id\" href=\"#time_t\">time_t</a>) <a class=\"id\" href=\"#kt\">kt</a>.<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#sec\">sec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   .<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = (long) <a class=\"id\" href=\"#kt\">kt</a>.<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#nsec\">nsec</a> };", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_to_timeval - convert a ktime_t variable to timeval format</span>", 
"<span class=\"comment\"> * @kt:<span class=\"ts\"/><span class=\"ts\"/>the ktime_t variable to convert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the timeval representation of the ktime value</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#ktime_to_timeval\">ktime_to_timeval</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#timeval\">timeval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = (<a class=\"id\" href=\"#time_t\">time_t</a>) <a class=\"id\" href=\"#kt\">kt</a>.<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#sec\">sec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> = (<a class=\"id\" href=\"#suseconds_t\">suseconds_t</a>) (<a class=\"id\" href=\"#kt\">kt</a>.<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#nsec\">nsec</a> / <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>) };", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_to_ns - convert a ktime_t variable to scalar nanoseconds</span>", 
"<span class=\"comment\"> * @kt:<span class=\"ts\"/><span class=\"ts\"/>the ktime_t variable to convert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the scalar nanoseconds representation of @kt</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#s64\">s64</a>) <a class=\"id\" href=\"#kt\">kt</a>.<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#sec\">sec</a> * <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> + <a class=\"id\" href=\"#kt\">kt</a>.<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#nsec\">nsec</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* !((BITS_PER_LONG == 64) || defined(CONFIG_KTIME_SCALAR)) */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
];
xr_frag_insert('l/c4/64bbb87df7d48b25212fdb1ce8bbe5a68dd9af.xr', __xr_tmp);
