var __xr_tmp = [
"<span class=\"ts\"/>.<a class=\"id\" href=\"#setsockopt\">setsockopt</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sock_no_setsockopt\">sock_no_setsockopt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#getsockopt\">getsockopt</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sock_no_getsockopt\">sock_no_getsockopt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sendmsg\">sendmsg</a> =<span class=\"ts\"/><a class=\"id\" href=\"#unix_seqpacket_sendmsg\">unix_seqpacket_sendmsg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#recvmsg\">recvmsg</a> =<span class=\"ts\"/><a class=\"id\" href=\"#unix_dgram_recvmsg\">unix_dgram_recvmsg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mmap\">mmap</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_no_mmap\">sock_no_mmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sendpage\">sendpage</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sock_no_sendpage\">sock_no_sendpage</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#proto\">proto</a> <a class=\"id\" href=\"#unix_proto\">unix_proto</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"UNIX\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#obj_size\">obj_size</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a>),", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AF_UNIX sockets do not interact with hardware, hence they</span>", 
"<span class=\"comment\"> * dont trigger interrupts - so it's safe for them to have</span>", 
"<span class=\"comment\"> * bh-unsafe locking for their sk_receive_queue.lock. Split off</span>", 
"<span class=\"comment\"> * this special lock-class by reinitializing the spinlock key:</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#af_unix_sk_receive_queue_lock_key\">af_unix_sk_receive_queue_lock_key</a>;", 
"", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#unix_create1\">unix_create1</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#u\">u</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#unix_nr_socks\">unix_nr_socks</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#unix_nr_socks\">unix_nr_socks</a>) &gt; 2 * <a class=\"id\" href=\"#get_max_files\">get_max_files</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sk_alloc\">sk_alloc</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#PF_UNIX\">PF_UNIX</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, &amp;<a class=\"id\" href=\"#unix_proto\">unix_proto</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk\">sk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_init_data\">sock_init_data</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>.<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#af_unix_sk_receive_queue_lock_key\">af_unix_sk_receive_queue_lock_key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_space\">sk_write_space</a><span class=\"ts\"/>= <a class=\"id\" href=\"#unix_write_space\">unix_write_space</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_max_ack_backlog\">sk_max_ack_backlog</a><span class=\"ts\"/>= <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#unx\">unx</a>.<a class=\"id\" href=\"#sysctl_max_dgram_qlen\">sysctl_max_dgram_qlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_destruct\">sk_destruct</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#unix_sock_destructor\">unix_sock_destructor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a><span class=\"ts\"/>  = <a class=\"id\" href=\"#unix_sk\">unix_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#mnt\">mnt</a><span class=\"ts\"/>  = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_set\">atomic_long_set</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#inflight\">inflight</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#readlock\">readlock</a>); <span class=\"comment\">/* single task reading lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#peer_wait\">peer_wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unix_insert_socket\">unix_insert_socket</a>(<a class=\"id\" href=\"#unix_sockets_unbound\">unix_sockets_unbound</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#unix_nr_socks\">unix_nr_socks</a>);", 
"<span class=\"ts\"/>else {", 
];
xr_frag_insert('l/c5/09a07d164f861f82f2781ce5b4c326ea5d45cf.xr', __xr_tmp);
