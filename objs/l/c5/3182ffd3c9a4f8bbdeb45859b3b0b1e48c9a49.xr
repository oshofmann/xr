var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Filesystem access notification for Linux</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 Red Hat, Inc., Eric Paris &lt;eparis@redhat.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_FSNOTIFY_BACKEND_H\">__LINUX_FSNOTIFY_BACKEND_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_FSNOTIFY_BACKEND_H\">__LINUX_FSNOTIFY_BACKEND_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* inotify uses this */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* struct inode */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* struct path */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * IN_* from inotfy.h lines up EXACTLY with FS_*, this is so we can easily</span>", 
"<span class=\"comment\"> * convert between them.  dnotify only needs conversion at watch creation</span>", 
"<span class=\"comment\"> * so no perf loss there.  fanotify isn't defined yet, so it can use the</span>", 
"<span class=\"comment\"> * wholes if it needs more events.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_ACCESS\">FS_ACCESS</a><span class=\"ts\"/><span class=\"ts\"/>0x00000001<span class=\"ts\"/><span class=\"comment\">/* File was accessed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_MODIFY\">FS_MODIFY</a><span class=\"ts\"/><span class=\"ts\"/>0x00000002<span class=\"ts\"/><span class=\"comment\">/* File was modified */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_ATTRIB\">FS_ATTRIB</a><span class=\"ts\"/><span class=\"ts\"/>0x00000004<span class=\"ts\"/><span class=\"comment\">/* Metadata changed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_CLOSE_WRITE\">FS_CLOSE_WRITE</a><span class=\"ts\"/><span class=\"ts\"/>0x00000008<span class=\"ts\"/><span class=\"comment\">/* Writtable file was closed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_CLOSE_NOWRITE\">FS_CLOSE_NOWRITE</a><span class=\"ts\"/>0x00000010<span class=\"ts\"/><span class=\"comment\">/* Unwrittable file closed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_OPEN\">FS_OPEN</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000020<span class=\"ts\"/><span class=\"comment\">/* File was opened */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_MOVED_FROM\">FS_MOVED_FROM</a><span class=\"ts\"/><span class=\"ts\"/>0x00000040<span class=\"ts\"/><span class=\"comment\">/* File was moved from X */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_MOVED_TO\">FS_MOVED_TO</a><span class=\"ts\"/><span class=\"ts\"/>0x00000080<span class=\"ts\"/><span class=\"comment\">/* File was moved to Y */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_CREATE\">FS_CREATE</a><span class=\"ts\"/><span class=\"ts\"/>0x00000100<span class=\"ts\"/><span class=\"comment\">/* Subfile was created */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_DELETE\">FS_DELETE</a><span class=\"ts\"/><span class=\"ts\"/>0x00000200<span class=\"ts\"/><span class=\"comment\">/* Subfile was deleted */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_DELETE_SELF\">FS_DELETE_SELF</a><span class=\"ts\"/><span class=\"ts\"/>0x00000400<span class=\"ts\"/><span class=\"comment\">/* Self was deleted */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_MOVE_SELF\">FS_MOVE_SELF</a><span class=\"ts\"/><span class=\"ts\"/>0x00000800<span class=\"ts\"/><span class=\"comment\">/* Self was moved */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_UNMOUNT\">FS_UNMOUNT</a><span class=\"ts\"/><span class=\"ts\"/>0x00002000<span class=\"ts\"/><span class=\"comment\">/* inode on umount fs */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_Q_OVERFLOW\">FS_Q_OVERFLOW</a><span class=\"ts\"/><span class=\"ts\"/>0x00004000<span class=\"ts\"/><span class=\"comment\">/* Event queued overflowed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IN_IGNORED\">FS_IN_IGNORED</a><span class=\"ts\"/><span class=\"ts\"/>0x00008000<span class=\"ts\"/><span class=\"comment\">/* last inotify event here */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_OPEN_PERM\">FS_OPEN_PERM</a><span class=\"ts\"/><span class=\"ts\"/>0x00010000<span class=\"ts\"/><span class=\"comment\">/* open event in an permission hook */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_ACCESS_PERM\">FS_ACCESS_PERM</a><span class=\"ts\"/><span class=\"ts\"/>0x00020000<span class=\"ts\"/><span class=\"comment\">/* access event in a permissions hook */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_EXCL_UNLINK\">FS_EXCL_UNLINK</a><span class=\"ts\"/><span class=\"ts\"/>0x04000000<span class=\"ts\"/><span class=\"comment\">/* do not send events if object is unlinked */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IN_ISDIR\">FS_IN_ISDIR</a><span class=\"ts\"/><span class=\"ts\"/>0x40000000<span class=\"ts\"/><span class=\"comment\">/* event occurred against dir */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IN_ONESHOT\">FS_IN_ONESHOT</a><span class=\"ts\"/><span class=\"ts\"/>0x80000000<span class=\"ts\"/><span class=\"comment\">/* only send event once */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_DN_RENAME\">FS_DN_RENAME</a><span class=\"ts\"/><span class=\"ts\"/>0x10000000<span class=\"ts\"/><span class=\"comment\">/* file renamed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_DN_MULTISHOT\">FS_DN_MULTISHOT</a><span class=\"ts\"/><span class=\"ts\"/>0x20000000<span class=\"ts\"/><span class=\"comment\">/* dnotify multishot */</span>", 
"", 
"<span class=\"comment\">/* This inode cares about things that happen to its children.  Always set for</span>", 
"<span class=\"comment\"> * dnotify and inotify. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_EVENT_ON_CHILD\">FS_EVENT_ON_CHILD</a><span class=\"ts\"/>0x08000000", 
"", 
"<span class=\"comment\">/* This is a list of all events that may get sent to a parernt based on fs event</span>", 
"<span class=\"comment\"> * happening to inodes inside that directory */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_EVENTS_POSS_ON_CHILD\">FS_EVENTS_POSS_ON_CHILD</a>   (<a class=\"id\" href=\"#FS_ACCESS\">FS_ACCESS</a> | <a class=\"id\" href=\"#FS_MODIFY\">FS_MODIFY</a> | <a class=\"id\" href=\"#FS_ATTRIB\">FS_ATTRIB</a> |\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#FS_CLOSE_WRITE\">FS_CLOSE_WRITE</a> | <a class=\"id\" href=\"#FS_CLOSE_NOWRITE\">FS_CLOSE_NOWRITE</a> | <a class=\"id\" href=\"#FS_OPEN\">FS_OPEN</a> |\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#FS_MOVED_FROM\">FS_MOVED_FROM</a> | <a class=\"id\" href=\"#FS_MOVED_TO\">FS_MOVED_TO</a> | <a class=\"id\" href=\"#FS_CREATE\">FS_CREATE</a> |\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#FS_DELETE\">FS_DELETE</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_MOVE\">FS_MOVE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#FS_MOVED_FROM\">FS_MOVED_FROM</a> | <a class=\"id\" href=\"#FS_MOVED_TO\">FS_MOVED_TO</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALL_FSNOTIFY_EVENTS\">ALL_FSNOTIFY_EVENTS</a> (<a class=\"id\" href=\"#FS_ACCESS\">FS_ACCESS</a> | <a class=\"id\" href=\"#FS_MODIFY\">FS_MODIFY</a> | <a class=\"id\" href=\"#FS_ATTRIB\">FS_ATTRIB</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#FS_CLOSE_WRITE\">FS_CLOSE_WRITE</a> | <a class=\"id\" href=\"#FS_CLOSE_NOWRITE\">FS_CLOSE_NOWRITE</a> | <a class=\"id\" href=\"#FS_OPEN\">FS_OPEN</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#FS_MOVED_FROM\">FS_MOVED_FROM</a> | <a class=\"id\" href=\"#FS_MOVED_TO\">FS_MOVED_TO</a> | <a class=\"id\" href=\"#FS_CREATE\">FS_CREATE</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#FS_DELETE\">FS_DELETE</a> | <a class=\"id\" href=\"#FS_DELETE_SELF\">FS_DELETE_SELF</a> | <a class=\"id\" href=\"#FS_MOVE_SELF\">FS_MOVE_SELF</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#FS_UNMOUNT\">FS_UNMOUNT</a> | <a class=\"id\" href=\"#FS_Q_OVERFLOW\">FS_Q_OVERFLOW</a> | <a class=\"id\" href=\"#FS_IN_IGNORED\">FS_IN_IGNORED</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#FS_OPEN_PERM\">FS_OPEN_PERM</a> | <a class=\"id\" href=\"#FS_ACCESS_PERM\">FS_ACCESS_PERM</a> | <a class=\"id\" href=\"#FS_EXCL_UNLINK\">FS_EXCL_UNLINK</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#FS_IN_ISDIR\">FS_IN_ISDIR</a> | <a class=\"id\" href=\"#FS_IN_ONESHOT\">FS_IN_ONESHOT</a> | <a class=\"id\" href=\"#FS_DN_RENAME\">FS_DN_RENAME</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#FS_DN_MULTISHOT\">FS_DN_MULTISHOT</a> | <a class=\"id\" href=\"#FS_EVENT_ON_CHILD\">FS_EVENT_ON_CHILD</a>)", 
"", 
"struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a>;", 
"struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a>;", 
"struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a>;", 
"struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each group much define these ops.  The fsnotify infrastructure will call</span>", 
"<span class=\"comment\"> * these operations for each relevant group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * should_send_event - given a group, inode, and mask this function determines</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>if the group is interested in this event.</span>", 
"<span class=\"comment\"> * handle_event - main call for a group to handle an fs event</span>", 
"<span class=\"comment\"> * free_group_priv - called when a group refcnt hits 0 to clean up the private union</span>", 
"<span class=\"comment\"> * freeing-mark - this means that a mark has been flagged to die when everything</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>finishes using it.  The function is supplied with what must be a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>valid group and inode to use to clean up.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_ops\">fsnotify_ops</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#should_send_event\">should_send_event</a>)(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#inode_mark\">inode_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#vfsmount_mark\">vfsmount_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#data_type\">data_type</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#handle_event\">handle_event</a>)(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#inode_mark\">inode_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#vfsmount_mark\">vfsmount_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#free_group_priv\">free_group_priv</a>)(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#freeing_mark\">freeing_mark</a>)(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#free_event_priv\">free_event_priv</a>)(struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#priv\">priv</a>);", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A group is a \"thing\" that wants to receive notification about filesystem</span>", 
"<span class=\"comment\"> * events.  The mask holds the subset of event types this group cares about.</span>", 
"<span class=\"comment\"> * refcnt on a group is up to the implementor and at any moment if it goes 0</span>", 
"<span class=\"comment\"> * everything will be cleaned up.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * How the refcnt is used is up to each group.  When the refcnt hits 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fsnotify will clean up all of the resources associated with this group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * As an example, the dnotify group will always have a refcnt=1 and that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will never change.  Inotify, on the other hand, has a group per</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inotify_init() and the refcnt will hit 0 only when that fd has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * closed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#refcnt\">refcnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* things with interest in this group */</span>", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#fsnotify_ops\">fsnotify_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;<span class=\"ts\"/><span class=\"comment\">/* how this group handles things */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* needed to send notification to userspace */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>;<span class=\"ts\"/><span class=\"comment\">/* protect the notification_list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#notification_list\">notification_list</a>;<span class=\"ts\"/><span class=\"comment\">/* list of event_holder this group needs to send to userspace */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#notification_waitq\">notification_waitq</a>;<span class=\"ts\"/><span class=\"comment\">/* read() on the notification file blocks on this waitq */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#q_len\">q_len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* events on the queue */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max_events\">max_events</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* maximum events allowed on the list */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* stores all fastpath marks assoc with this group so they can be cleaned on unregister */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#mark_lock\">mark_lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* protect marks_list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#num_marks\">num_marks</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1 for each mark and 1 for not being</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * past the point of no return when freeing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a group */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#marks_list\">marks_list</a>;<span class=\"ts\"/><span class=\"comment\">/* all inode marks for this group */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* groups can define private fields here or use the void *private */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INOTIFY_USER\">CONFIG_INOTIFY_USER</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inotify_group_private_data\">inotify_group_private_data</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#idr_lock\">idr_lock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#idr\">idr</a>      <a class=\"id\" href=\"#idr\">idr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a>             <a class=\"id\" href=\"#last_wd\">last_wd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a>    *<a class=\"id\" href=\"#fa\">fa</a>;    <span class=\"comment\">/* async notification */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a>      *<a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#inotify_data\">inotify_data</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FANOTIFY\">CONFIG_FANOTIFY</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fanotify_group_private_data\">fanotify_group_private_data</a> {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FANOTIFY_ACCESS_PERMISSIONS\">CONFIG_FANOTIFY_ACCESS_PERMISSIONS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allows a group to block waiting for a userspace response */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#access_mutex\">access_mutex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#access_list\">access_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#access_waitq\">access_waitq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#bypass_perm\">bypass_perm</a>; <span class=\"comment\">/* protected by access_mutex */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FANOTIFY_ACCESS_PERMISSIONS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#f_flags\">f_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#fanotify_data\">fanotify_data</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FANOTIFY */</span>", 
"<span class=\"ts\"/>};", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A single event can be queued in multiple group-&gt;notification_lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * each group-&gt;notification_list will point to an event_holder which in turns points</span>", 
"<span class=\"comment\"> * to the actual event that needs to be sent to userspace.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Seemed cheaper to create a refcnt'd event and a small holder for every group</span>", 
"<span class=\"comment\"> * than create a different event for every group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#event_list\">event_list</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inotify needs to tack data onto an event.  This struct lets us later find the</span>", 
"<span class=\"comment\"> * correct private data of the correct group.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#event_list\">event_list</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * all of the information about the original object we want to now send to</span>", 
"<span class=\"comment\"> * a group.  If you want to carry more info from the accessing task to the</span>", 
"<span class=\"comment\"> * listener this structure is where you need to be adding fields.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we create an event we are also likely going to need a holder</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to link to a group.  So embed one holder in the event.  Means only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one allocation for the common case where we only have one group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> <a class=\"id\" href=\"#holder\">holder</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;<span class=\"ts\"/><span class=\"comment\">/* protection for the associated event_holder and private_list */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* to_tell may ONLY be dereferenced during handle_event(). */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#to_tell\">to_tell</a>;<span class=\"ts\"/><span class=\"comment\">/* either the inode the event happened to or its parent */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * depending on the event type we should have either a path or inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We hold a reference on path, but NOT on inode.  Since we have the ref on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the path, it may be dereferenced at any point during this object's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lifetime.  That reference is dropped when this object's refcnt hits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 0.  If this event contains an inode instead of a path, the inode may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ONLY be used during handle_event().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>};", 
"<span class=\"comment\">/* when calling fsnotify tell it if the data is a path or inode */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FSNOTIFY_EVENT_NONE\">FSNOTIFY_EVENT_NONE</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FSNOTIFY_EVENT_PATH\">FSNOTIFY_EVENT_PATH</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FSNOTIFY_EVENT_INODE\">FSNOTIFY_EVENT_INODE</a><span class=\"ts\"/>2", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#data_type\">data_type</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* which of the above union we have */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#refcnt\">refcnt</a>;<span class=\"ts\"/><span class=\"comment\">/* how many groups still are using/need to send this event */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the type of access, bitwise OR for FS_* event types */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sync_cookie\">sync_cookie</a>;<span class=\"ts\"/><span class=\"comment\">/* used to corrolate events, namely inotify mv events */</span>", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#file_name\">file_name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#name_len\">name_len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#tgid\">tgid</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FANOTIFY_ACCESS_PERMISSIONS\">CONFIG_FANOTIFY_ACCESS_PERMISSIONS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#response\">response</a>;<span class=\"ts\"/><span class=\"comment\">/* userspace answer to question */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FANOTIFY_ACCESS_PERMISSIONS */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#private_data_list\">private_data_list</a>;<span class=\"ts\"/><span class=\"comment\">/* groups can store private data here */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inode specific fields in an fsnotify_mark</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_inode_mark\">fsnotify_inode_mark</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* inode this mark is associated with */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#i_list\">i_list</a>;<span class=\"ts\"/><span class=\"comment\">/* list of marks by inode-&gt;i_fsnotify_marks */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#free_i_list\">free_i_list</a>;<span class=\"ts\"/><span class=\"comment\">/* tmp list used when freeing this mark */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mount point specific fields in an fsnotify_mark</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_vfsmount_mark\">fsnotify_vfsmount_mark</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* vfsmount this mark is associated with */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#m_list\">m_list</a>;<span class=\"ts\"/><span class=\"comment\">/* list of marks by inode-&gt;i_fsnotify_marks */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#free_m_list\">free_m_list</a>;<span class=\"ts\"/><span class=\"comment\">/* tmp list used when freeing this mark */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * a mark is simply an object attached to an in core inode which allows an</span>", 
"<span class=\"comment\"> * fsnotify listener to indicate they are either no longer interested in events</span>", 
"<span class=\"comment\"> * of a type matching mask or only interested in those events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * these are flushed when an inode is evicted from core and may be flushed</span>", 
"<span class=\"comment\"> * when the inode is modified (as seen by fsnotify_access).  Some fsnotify users</span>", 
"<span class=\"comment\"> * (such as dnotify) will flush these when the open fd is closed and not at</span>", 
"<span class=\"comment\"> * inode eviction or modification.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mask this mark is for */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* we hold ref for each i_list and g_list.  also one ref for each 'thing'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in kernel that found and may be using this mark. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#refcnt\">refcnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* active things looking at this mark */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>;<span class=\"ts\"/><span class=\"comment\">/* group this mark is for */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#g_list\">g_list</a>;<span class=\"ts\"/><span class=\"comment\">/* list of marks by group-&gt;i_fsnotify_marks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* protect group and inode */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_inode_mark\">fsnotify_inode_mark</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_vfsmount_mark\">fsnotify_vfsmount_mark</a> <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#ignored_mask\">ignored_mask</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* events types to ignore */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#free_g_list\">free_g_list</a>;<span class=\"ts\"/><span class=\"comment\">/* tmp list used when freeing this mark */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_INODE\">FSNOTIFY_MARK_FLAG_INODE</a><span class=\"ts\"/><span class=\"ts\"/>0x01", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_VFSMOUNT\">FSNOTIFY_MARK_FLAG_VFSMOUNT</a><span class=\"ts\"/><span class=\"ts\"/>0x02", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_OBJECT_PINNED\">FSNOTIFY_MARK_FLAG_OBJECT_PINNED</a><span class=\"ts\"/>0x04", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_IGNORED_SURV_MODIFY\">FSNOTIFY_MARK_FLAG_IGNORED_SURV_MODIFY</a><span class=\"ts\"/>0x08", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_ALIVE\">FSNOTIFY_MARK_FLAG_ALIVE</a><span class=\"ts\"/><span class=\"ts\"/>0x10", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* vfsmount or inode mark? */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#destroy_list\">destroy_list</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#free_mark\">free_mark</a>)(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>); <span class=\"comment\">/* called on final put+free */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FSNOTIFY\">CONFIG_FSNOTIFY</a>", 
"", 
"<span class=\"comment\">/* called from the vfs helpers */</span>", 
"", 
"<span class=\"comment\">/* main fsnotify call to send events */</span>", 
"extern int <a class=\"id\" href=\"#fsnotify\">fsnotify</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#to_tell\">to_tell</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#data_is\">data_is</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const unsigned char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cookie\">cookie</a>);", 
"extern void <a class=\"id\" href=\"#__fsnotify_parent\">__fsnotify_parent</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>);", 
"extern void <a class=\"id\" href=\"#__fsnotify_inode_delete\">__fsnotify_inode_delete</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"extern void <a class=\"id\" href=\"#__fsnotify_vfsmount_delete\">__fsnotify_vfsmount_delete</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"extern <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#fsnotify_get_cookie\">fsnotify_get_cookie</a>(void);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fsnotify_inode_watches_children\">fsnotify_inode_watches_children</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* FS_EVENT_ON_CHILD is set if the inode may care */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_mask\">i_fsnotify_mask</a> &amp; <a class=\"id\" href=\"#FS_EVENT_ON_CHILD\">FS_EVENT_ON_CHILD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* this inode might care about child events, does it care about the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * specific set of events that can happen on a child? */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_mask\">i_fsnotify_mask</a> &amp; <a class=\"id\" href=\"#FS_EVENTS_POSS_ON_CHILD\">FS_EVENTS_POSS_ON_CHILD</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update the dentry with a flag indicating the interest of its parent to receive</span>", 
"<span class=\"comment\"> * filesystem events when those events happens to this dentry-&gt;d_inode.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__fsnotify_update_dcache_flags\">__fsnotify_update_dcache_flags</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> && <a class=\"id\" href=\"#fsnotify_inode_watches_children\">fsnotify_inode_watches_children</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> |= <a class=\"id\" href=\"#DCACHE_FSNOTIFY_PARENT_WATCHED\">DCACHE_FSNOTIFY_PARENT_WATCHED</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> &= ~<a class=\"id\" href=\"#DCACHE_FSNOTIFY_PARENT_WATCHED\">DCACHE_FSNOTIFY_PARENT_WATCHED</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fsnotify_d_instantiate - instantiate a dentry for inode</span>", 
"<span class=\"comment\"> * Called with dcache_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__fsnotify_d_instantiate\">__fsnotify_d_instantiate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__fsnotify_update_dcache_flags\">__fsnotify_update_dcache_flags</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* called from fsnotify listeners, such as fanotify or dnotify */</span>", 
"", 
"<span class=\"comment\">/* get a reference to an existing or create a new group */</span>", 
"extern struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#fsnotify_alloc_group\">fsnotify_alloc_group</a>(const struct <a class=\"id\" href=\"#fsnotify_ops\">fsnotify_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"comment\">/* drop reference on a group from fsnotify_alloc_group */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_put_group\">fsnotify_put_group</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"comment\">/* take a reference to an event */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_get_event\">fsnotify_get_event</a>(struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern void <a class=\"id\" href=\"#fsnotify_put_event\">fsnotify_put_event</a>(struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"comment\">/* find private data previously attached to an event and unlink it */</span>", 
"extern struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#fsnotify_remove_priv_from_event\">fsnotify_remove_priv_from_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"comment\">/* attach the event to the group notification queue */</span>", 
"extern struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#fsnotify_add_notify_event\">fsnotify_add_notify_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#priv\">priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *(*<a class=\"id\" href=\"#merge\">merge</a>)(struct <a class=\"id\" href=\"#list_head\">list_head</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *));", 
"<span class=\"comment\">/* true if the group notification queue is empty */</span>", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#fsnotify_notify_queue_is_empty\">fsnotify_notify_queue_is_empty</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"comment\">/* return, but do not dequeue the first event on the notification queue */</span>", 
"extern struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#fsnotify_peek_notify_event\">fsnotify_peek_notify_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"comment\">/* return AND dequeue the first event on the notification queue */</span>", 
"extern struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#fsnotify_remove_notify_event\">fsnotify_remove_notify_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"comment\">/* functions used to manipulate the marks attached to inodes */</span>", 
"", 
"<span class=\"comment\">/* run all marks associated with a vfsmount and update mnt-&gt;mnt_fsnotify_mask */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_recalc_vfsmount_mask\">fsnotify_recalc_vfsmount_mask</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"comment\">/* run all marks associated with an inode and update inode-&gt;i_fsnotify_mask */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_recalc_inode_mask\">fsnotify_recalc_inode_mask</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"extern void <a class=\"id\" href=\"#fsnotify_init_mark\">fsnotify_init_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, void (*<a class=\"id\" href=\"#free_mark\">free_mark</a>)(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>));", 
"<span class=\"comment\">/* find (and take a reference) to a mark associated with group and inode */</span>", 
"extern struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsnotify_find_inode_mark\">fsnotify_find_inode_mark</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"comment\">/* find (and take a reference) to a mark associated with group and vfsmount */</span>", 
"extern struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsnotify_find_vfsmount_mark\">fsnotify_find_vfsmount_mark</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"comment\">/* copy the values from old into new */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_duplicate_mark\">fsnotify_duplicate_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"comment\">/* set the ignored_mask of a mark */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_set_mark_ignored_mask_locked\">fsnotify_set_mark_ignored_mask_locked</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"comment\">/* set the mask of a mark (might pin the object into memory */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_set_mark_mask_locked\">fsnotify_set_mark_mask_locked</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"comment\">/* attach the mark to both the group and the inode */</span>", 
"extern int <a class=\"id\" href=\"#fsnotify_add_mark\">fsnotify_add_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#allow_dups\">allow_dups</a>);", 
"<span class=\"comment\">/* given a mark, flag it to be freed when all references are dropped */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"comment\">/* run all the marks in a group, and clear all of the vfsmount marks */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_clear_vfsmount_marks_by_group\">fsnotify_clear_vfsmount_marks_by_group</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
];
xr_frag_insert('l/c5/3182ffd3c9a4f8bbdeb45859b3b0b1e48c9a49.xr', __xr_tmp);
