var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implementation of the kernel access vector cache (AVC).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:  Stephen Smalley, &lt;sds@epoch.ncsc.mil&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     James Morris &lt;jmorris@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Update:   KaiGai, Kohei &lt;kaigai@ak.jp.nec.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Replaced the avc_lock spinlock by RCU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2003 Red Hat, Inc., James Morris &lt;jmorris@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it under the terms of the GNU General Public License version 2,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dcache\">dcache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#un\">un</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#af_unix\">af_unix</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"avc.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"avc_ss.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"classmap.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>512", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AVC_DEF_CACHE_THRESHOLD\">AVC_DEF_CACHE_THRESHOLD</a><span class=\"ts\"/><span class=\"ts\"/>512", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AVC_CACHE_RECLAIM\">AVC_CACHE_RECLAIM</a><span class=\"ts\"/><span class=\"ts\"/>16", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY_SELINUX_AVC_STATS\">CONFIG_SECURITY_SELINUX_AVC_STATS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#avc_cache_stats_incr\">avc_cache_stats_incr</a>(<a class=\"id\" href=\"#field\">field</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#avc_cache_stats\">avc_cache_stats</a>, <a class=\"id\" href=\"#get_cpu\">get_cpu</a>()).<a class=\"id\" href=\"#field\">field</a>++;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#avc_cache_stats_incr\">avc_cache_stats_incr</a>(<a class=\"id\" href=\"#field\">field</a>)<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#avc_entry\">avc_entry</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ssid\">ssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsid\">tsid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tclass\">tclass</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#av_decision\">av_decision</a><span class=\"ts\"/><a class=\"id\" href=\"#avd\">avd</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#avc_node\">avc_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_entry\">avc_entry</a><span class=\"ts\"/><a class=\"id\" href=\"#ae\">ae</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>; <span class=\"comment\">/* anchored in avc_cache-&gt;slots[i] */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rhead\">rhead</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#avc_cache\">avc_cache</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a>]; <span class=\"comment\">/* head for avc_node-&gt;list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots_lock\">slots_lock</a>[<a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a>]; <span class=\"comment\">/* lock for writes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_hint\">lru_hint</a>;<span class=\"ts\"/><span class=\"comment\">/* LRU hint for reclaim scan */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_nodes\">active_nodes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latest_notif\">latest_notif</a>;<span class=\"ts\"/><span class=\"comment\">/* latest revocation notification */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#avc_callback_node\">avc_callback_node</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#callback\">callback</a>) (<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#out_retained\">out_retained</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#events\">events</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_callback_node\">avc_callback_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Exported via selinufs */</span>", 
"unsigned int <a class=\"id\" href=\"#avc_cache_threshold\">avc_cache_threshold</a> = <a class=\"id\" href=\"#AVC_DEF_CACHE_THRESHOLD\">AVC_DEF_CACHE_THRESHOLD</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY_SELINUX_AVC_STATS\">CONFIG_SECURITY_SELINUX_AVC_STATS</a>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#avc_cache_stats\">avc_cache_stats</a>, <a class=\"id\" href=\"#avc_cache_stats\">avc_cache_stats</a>) = { 0 };", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static struct <a class=\"id\" href=\"#avc_cache\">avc_cache</a> <a class=\"id\" href=\"#avc_cache\">avc_cache</a>;", 
"static struct <a class=\"id\" href=\"#avc_callback_node\">avc_callback_node</a> *<a class=\"id\" href=\"#avc_callbacks\">avc_callbacks</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#avc_node_cachep\">avc_node_cachep</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#avc_hash\">avc_hash</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ssid\">ssid</a> ^ (<a class=\"id\" href=\"#tsid\">tsid</a><<2) ^ (<a class=\"id\" href=\"#tclass\">tclass</a><<4)) &amp; (<a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a> - 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_dump_av - Display an access vector in human-readable form.</span>", 
"<span class=\"comment\"> * @tclass: target security class</span>", 
"<span class=\"comment\"> * @av: access vector</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#avc_dump_av\">avc_dump_av</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a>)", 
"{", 
"<span class=\"ts\"/>const char **<a class=\"id\" href=\"#perms\">perms</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#perm\">perm</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#av\">av</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" null\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perms\">perms</a> = <a class=\"id\" href=\"#secclass_map\">secclass_map</a>[<a class=\"id\" href=\"#tclass\">tclass</a>-1].<a class=\"id\" href=\"#perms\">perms</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" {\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = 1;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; (sizeof(<a class=\"id\" href=\"#av\">av</a>) * 8)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#perm\">perm</a> &amp; <a class=\"id\" href=\"#av\">av</a>) && <a class=\"id\" href=\"#perms\">perms</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" %s\", <a class=\"id\" href=\"#perms\">perms</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> &= ~<a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> <<= 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#av\">av</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" 0x%x\", <a class=\"id\" href=\"#av\">av</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" }\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_dump_query - Display a SID pair and a class in human-readable form.</span>", 
"<span class=\"comment\"> * @ssid: source security identifier</span>", 
"<span class=\"comment\"> * @tsid: target security identifier</span>", 
"<span class=\"comment\"> * @tclass: target security class</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#avc_dump_query\">avc_dump_query</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#scontext\">scontext</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#scontext_len\">scontext_len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_sid_to_context\">security_sid_to_context</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, &amp;<a class=\"id\" href=\"#scontext\">scontext</a>, &amp;<a class=\"id\" href=\"#scontext_len\">scontext_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"ssid=%d\", <a class=\"id\" href=\"#ssid\">ssid</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"scontext=%s\", <a class=\"id\" href=\"#scontext\">scontext</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#scontext\">scontext</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_sid_to_context\">security_sid_to_context</a>(<a class=\"id\" href=\"#tsid\">tsid</a>, &amp;<a class=\"id\" href=\"#scontext\">scontext</a>, &amp;<a class=\"id\" href=\"#scontext_len\">scontext_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" tsid=%d\", <a class=\"id\" href=\"#tsid\">tsid</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" tcontext=%s\", <a class=\"id\" href=\"#scontext\">scontext</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#scontext\">scontext</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#tclass\">tclass</a> >= <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#secclass_map\">secclass_map</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" tclass=%s\", <a class=\"id\" href=\"#secclass_map\">secclass_map</a>[<a class=\"id\" href=\"#tclass\">tclass</a>-1].<a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_init - Initialize the AVC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialize the access vector cache.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#avc_init\">avc_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots_lock\">slots_lock</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#active_nodes\">active_nodes</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#lru_hint\">lru_hint</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_node_cachep\">avc_node_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"avc_node\", sizeof(struct <a class=\"id\" href=\"#avc_node\">avc_node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log\">audit_log</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#audit_context\">audit_context</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#AUDIT_KERNEL\">AUDIT_KERNEL</a>, \"AVC INITIALIZED\\n\");", 
"}", 
"", 
"int <a class=\"id\" href=\"#avc_get_hash_stats\">avc_get_hash_stats</a>(char *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#chain_len\">chain_len</a>, <a class=\"id\" href=\"#max_chain_len\">max_chain_len</a>, <a class=\"id\" href=\"#slots_used\">slots_used</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slots_used\">slots_used</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_chain_len\">max_chain_len</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots_used\">slots_used</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chain_len\">chain_len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chain_len\">chain_len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chain_len\">chain_len</a> &gt; <a class=\"id\" href=\"#max_chain_len\">max_chain_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_chain_len\">max_chain_len</a> = <a class=\"id\" href=\"#chain_len\">chain_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"entries: %d\\nbuckets used: %d/%d\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"longest chain: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#active_nodes\">active_nodes</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#slots_used\">slots_used</a>, <a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a>, <a class=\"id\" href=\"#max_chain_len\">max_chain_len</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#avc_node_free\">avc_node_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rhead\">rhead</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rhead\">rhead</a>, struct <a class=\"id\" href=\"#avc_node\">avc_node</a>, <a class=\"id\" href=\"#rhead\">rhead</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#avc_node_cachep\">avc_node_cachep</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_cache_stats_incr\">avc_cache_stats_incr</a>(<a class=\"id\" href=\"#frees\">frees</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#avc_node_delete\">avc_node_delete</a>(struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rhead\">rhead</a>, <a class=\"id\" href=\"#avc_node_free\">avc_node_free</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#active_nodes\">active_nodes</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#avc_node_kill\">avc_node_kill</a>(struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#avc_node_cachep\">avc_node_cachep</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_cache_stats_incr\">avc_cache_stats_incr</a>(<a class=\"id\" href=\"#frees\">frees</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#active_nodes\">active_nodes</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#avc_node_replace\">avc_node_replace</a>(struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_replace_rcu\">hlist_replace_rcu</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#rhead\">rhead</a>, <a class=\"id\" href=\"#avc_node_free\">avc_node_free</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#active_nodes\">active_nodes</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#avc_reclaim_node\">avc_reclaim_node</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hvalue\">hvalue</a>, <a class=\"id\" href=\"#try\">try</a>, <a class=\"id\" href=\"#ecx\">ecx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#try\">try</a> = 0, <a class=\"id\" href=\"#ecx\">ecx</a> = 0; <a class=\"id\" href=\"#try\">try</a> &lt; <a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a>; <a class=\"id\" href=\"#try\">try</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hvalue\">hvalue</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#lru_hint\">lru_hint</a>) &amp; (<a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#hvalue\">hvalue</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots_lock\">slots_lock</a>[<a class=\"id\" href=\"#hvalue\">hvalue</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#spin_trylock_irqsave\">spin_trylock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_node_delete\">avc_node_delete</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_cache_stats_incr\">avc_cache_stats_incr</a>(<a class=\"id\" href=\"#reclaims\">reclaims</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ecx\">ecx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ecx\">ecx</a> >= <a class=\"id\" href=\"#AVC_CACHE_RECLAIM\">AVC_CACHE_RECLAIM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ecx\">ecx</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#avc_alloc_node\">avc_alloc_node</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#avc_node_cachep\">avc_node_cachep</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_cache_stats_incr\">avc_cache_stats_incr</a>(<a class=\"id\" href=\"#allocations\">allocations</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#active_nodes\">active_nodes</a>) &gt; <a class=\"id\" href=\"#avc_cache_threshold\">avc_cache_threshold</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_reclaim_node\">avc_reclaim_node</a>();", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#avc_node_populate\">avc_node_populate</a>(struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>, struct <a class=\"id\" href=\"#av_decision\">av_decision</a> *<a class=\"id\" href=\"#avd\">avd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#ssid\">ssid</a> = <a class=\"id\" href=\"#ssid\">ssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#tsid\">tsid</a> = <a class=\"id\" href=\"#tsid\">tsid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#tclass\">tclass</a> = <a class=\"id\" href=\"#tclass\">tclass</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>, <a class=\"id\" href=\"#avd\">avd</a>, sizeof(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#avc_search_node\">avc_search_node</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hvalue\">hvalue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hvalue\">hvalue</a> = <a class=\"id\" href=\"#avc_hash\">avc_hash</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#hvalue\">hvalue</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ssid\">ssid</a> == <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#ssid\">ssid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tclass\">tclass</a> == <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#tclass\">tclass</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tsid\">tsid</a> == <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#tsid\">tsid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_lookup - Look up an AVC entry.</span>", 
"<span class=\"comment\"> * @ssid: source security identifier</span>", 
"<span class=\"comment\"> * @tsid: target security identifier</span>", 
"<span class=\"comment\"> * @tclass: target security class</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Look up an AVC entry that is valid for the</span>", 
"<span class=\"comment\"> * (@ssid, @tsid), interpreting the permissions</span>", 
"<span class=\"comment\"> * based on @tclass.  If a valid AVC entry exists,</span>", 
"<span class=\"comment\"> * then this function returns the avc_node.</span>", 
"<span class=\"comment\"> * Otherwise, this function returns NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#avc_lookup\">avc_lookup</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_cache_stats_incr\">avc_cache_stats_incr</a>(<a class=\"id\" href=\"#lookups\">lookups</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#avc_search_node\">avc_search_node</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_cache_stats_incr\">avc_cache_stats_incr</a>(<a class=\"id\" href=\"#hits\">hits</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_cache_stats_incr\">avc_cache_stats_incr</a>(<a class=\"id\" href=\"#misses\">misses</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#avc_latest_notif_update\">avc_latest_notif_update</a>(int <a class=\"id\" href=\"#seqno\">seqno</a>, int <a class=\"id\" href=\"#is_insert\">is_insert</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#notif_lock\">notif_lock</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flag\">flag</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#notif_lock\">notif_lock</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_insert\">is_insert</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#seqno\">seqno</a> &lt; <a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#latest_notif\">latest_notif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"SELinux: avc:  seqno %d < latest_notif %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#seqno\">seqno</a>, <a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#latest_notif\">latest_notif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#seqno\">seqno</a> &gt; <a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#latest_notif\">latest_notif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#latest_notif\">latest_notif</a> = <a class=\"id\" href=\"#seqno\">seqno</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#notif_lock\">notif_lock</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_insert - Insert an AVC entry.</span>", 
"<span class=\"comment\"> * @ssid: source security identifier</span>", 
"<span class=\"comment\"> * @tsid: target security identifier</span>", 
"<span class=\"comment\"> * @tclass: target security class</span>", 
"<span class=\"comment\"> * @avd: resulting av decision</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Insert an AVC entry for the SID pair</span>", 
"<span class=\"comment\"> * (@ssid, @tsid) and class @tclass.</span>", 
"<span class=\"comment\"> * The access vectors and the sequence number are</span>", 
"<span class=\"comment\"> * normally provided by the security server in</span>", 
"<span class=\"comment\"> * response to a security_compute_av() call.  If the</span>", 
"<span class=\"comment\"> * sequence number @avd-&gt;seqno is not less than the latest</span>", 
"<span class=\"comment\"> * revocation notification, then the function copies</span>", 
"<span class=\"comment\"> * the access vectors into a cache entry, returns</span>", 
"<span class=\"comment\"> * avc_node inserted. Otherwise, this function returns NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#avc_insert\">avc_insert</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>, struct <a class=\"id\" href=\"#av_decision\">av_decision</a> *<a class=\"id\" href=\"#avd\">avd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hvalue\">hvalue</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flag\">flag</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avc_latest_notif_update\">avc_latest_notif_update</a>(<a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#seqno\">seqno</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#avc_alloc_node\">avc_alloc_node</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hvalue\">hvalue</a> = <a class=\"id\" href=\"#avc_hash\">avc_hash</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_node_populate\">avc_node_populate</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#avd\">avd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#hvalue\">hvalue</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots_lock\">slots_lock</a>[<a class=\"id\" href=\"#hvalue\">hvalue</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#ssid\">ssid</a> == <a class=\"id\" href=\"#ssid\">ssid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#tsid\">tsid</a> == <a class=\"id\" href=\"#tsid\">tsid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#tclass\">tclass</a> == <a class=\"id\" href=\"#tclass\">tclass</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_node_replace\">avc_node_replace</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_audit_pre_callback - SELinux specific information</span>", 
"<span class=\"comment\"> * will be called by generic audit code</span>", 
"<span class=\"comment\"> * @ab: the audit buffer</span>", 
"<span class=\"comment\"> * @a: audit_data</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#avc_audit_pre_callback\">avc_audit_pre_callback</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, void *<a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> *<a class=\"id\" href=\"#ad\">ad</a> = <a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"avc:  %s \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#denied\">denied</a> ? \"denied\" : \"granted\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_dump_av\">avc_dump_av</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#tclass\">tclass</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#audited\">audited</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" for \");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_audit_post_callback - SELinux specific information</span>", 
"<span class=\"comment\"> * will be called by generic audit code</span>", 
"<span class=\"comment\"> * @ab: the audit buffer</span>", 
"<span class=\"comment\"> * @a: audit_data</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#avc_audit_post_callback\">avc_audit_post_callback</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, void *<a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> *<a class=\"id\" href=\"#ad\">ad</a> = <a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_dump_query\">avc_dump_query</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#ssid\">ssid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#tclass\">tclass</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_audit - Audit the granting or denial of permissions.</span>", 
"<span class=\"comment\"> * @ssid: source security identifier</span>", 
"<span class=\"comment\"> * @tsid: target security identifier</span>", 
"<span class=\"comment\"> * @tclass: target security class</span>", 
"<span class=\"comment\"> * @requested: requested permissions</span>", 
"<span class=\"comment\"> * @avd: access vector decisions</span>", 
"<span class=\"comment\"> * @result: result from avc_has_perm_noaudit</span>", 
"<span class=\"comment\"> * @a:  auxiliary audit data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Audit the granting or denial of permissions in accordance</span>", 
"<span class=\"comment\"> * with the policy.  This function is typically called by</span>", 
"<span class=\"comment\"> * avc_has_perm() after a permission check, but can also be</span>", 
"<span class=\"comment\"> * called directly by callers who use avc_has_perm_noaudit()</span>", 
"<span class=\"comment\"> * in order to separate the permission check from the auditing.</span>", 
"<span class=\"comment\"> * For example, this separation is useful when the permission check must</span>", 
"<span class=\"comment\"> * be performed under a lock, to allow the lock to be released</span>", 
"<span class=\"comment\"> * before calling the auditing code.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#avc_audit\">avc_audit</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#requested\">requested</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#av_decision\">av_decision</a> *<a class=\"id\" href=\"#avd\">avd</a>, int <a class=\"id\" href=\"#result\">result</a>, struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> *<a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#stack_data\">stack_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#denied\">denied</a>, <a class=\"id\" href=\"#audited\">audited</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#denied\">denied</a> = <a class=\"id\" href=\"#requested\">requested</a> &amp; ~<a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#allowed\">allowed</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#denied\">denied</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audited\">audited</a> = <a class=\"id\" href=\"#denied\">denied</a> &amp; <a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#auditdeny\">auditdeny</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a-&gt;selinux_audit_data.auditdeny is TRICKY!  Setting a bit in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this field means that ANY denials should NOT be audited if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the policy contains an explicit dontaudit rule for that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * permission.  Take notice that this is unrelated to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * actual permissions that were denied.  As an example lets</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * assume:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * denied == READ</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * avd.auditdeny &amp; ACCESS == 0 (not set means explicit rule)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * selinux_audit_data.auditdeny &amp; ACCESS == 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We will NOT audit the denial even though the denied</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * permission was READ and the auditdeny checks were for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ACCESS</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#auditdeny\">auditdeny</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#auditdeny\">auditdeny</a> &amp; <a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#auditdeny\">auditdeny</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audited\">audited</a> = 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audited\">audited</a> = <a class=\"id\" href=\"#denied\">denied</a> = <a class=\"id\" href=\"#requested\">requested</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audited\">audited</a> = <a class=\"id\" href=\"#requested\">requested</a> &amp; <a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#auditallow\">auditallow</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#audited\">audited</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#a\">a</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> = &amp;<a class=\"id\" href=\"#stack_data\">stack_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#NONE\">NONE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#tclass\">tclass</a> = <a class=\"id\" href=\"#tclass\">tclass</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#requested\">requested</a> = <a class=\"id\" href=\"#requested\">requested</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#ssid\">ssid</a> = <a class=\"id\" href=\"#ssid\">ssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#tsid\">tsid</a> = <a class=\"id\" href=\"#tsid\">tsid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#audited\">audited</a> = <a class=\"id\" href=\"#audited\">audited</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#selinux_audit_data\">selinux_audit_data</a>.<a class=\"id\" href=\"#denied\">denied</a> = <a class=\"id\" href=\"#denied\">denied</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#lsm_pre_audit\">lsm_pre_audit</a> = <a class=\"id\" href=\"#avc_audit_pre_callback\">avc_audit_pre_callback</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#lsm_post_audit\">lsm_post_audit</a> = <a class=\"id\" href=\"#avc_audit_post_callback\">avc_audit_post_callback</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#common_lsm_audit\">common_lsm_audit</a>(<a class=\"id\" href=\"#a\">a</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_add_callback - Register a callback for security events.</span>", 
"<span class=\"comment\"> * @callback: callback function</span>", 
"<span class=\"comment\"> * @events: security events</span>", 
"<span class=\"comment\"> * @ssid: source security identifier or %SECSID_WILD</span>", 
"<span class=\"comment\"> * @tsid: target security identifier or %SECSID_WILD</span>", 
"<span class=\"comment\"> * @tclass: target security class</span>", 
"<span class=\"comment\"> * @perms: permissions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register a callback function for events in the set @events</span>", 
"<span class=\"comment\"> * related to the SID pair (@ssid, @tsid) </span>", 
"<span class=\"comment\"> * and the permissions @perms, interpreting</span>", 
"<span class=\"comment\"> * @perms based on @tclass.  Returns %0 on success or</span>", 
"<span class=\"comment\"> * -%ENOMEM if insufficient memory exists to add the callback.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#avc_add_callback\">avc_add_callback</a>(int (*<a class=\"id\" href=\"#callback\">callback</a>)(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#out_retained\">out_retained</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#events\">events</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_callback_node\">avc_callback_node</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#c\">c</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#c\">c</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#callback\">callback</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#events\">events</a> = <a class=\"id\" href=\"#events\">events</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#ssid\">ssid</a> = <a class=\"id\" href=\"#ssid\">ssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#tsid\">tsid</a> = <a class=\"id\" href=\"#tsid\">tsid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#perms\">perms</a> = <a class=\"id\" href=\"#perms\">perms</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#avc_callbacks\">avc_callbacks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_callbacks\">avc_callbacks</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#avc_sidcmp\">avc_sidcmp</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#y\">y</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#x\">x</a> == <a class=\"id\" href=\"#y\">y</a> || <a class=\"id\" href=\"#x\">x</a> == <a class=\"id\" href=\"#SECSID_WILD\">SECSID_WILD</a> || <a class=\"id\" href=\"#y\">y</a> == <a class=\"id\" href=\"#SECSID_WILD\">SECSID_WILD</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_update_node Update an AVC entry</span>", 
"<span class=\"comment\"> * @event : Updating event</span>", 
"<span class=\"comment\"> * @perms : Permission mask bits</span>", 
"<span class=\"comment\"> * @ssid,@tsid,@tclass : identifier of an AVC entry</span>", 
"<span class=\"comment\"> * @seqno : sequence number when decision was made</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * if a valid AVC entry doesn't exist,this function returns -ENOENT.</span>", 
"<span class=\"comment\"> * if kmalloc() called internal returns NULL, this function returns -ENOMEM.</span>", 
"<span class=\"comment\"> * otherwise, this function updates the AVC entry. The original AVC-entry object</span>", 
"<span class=\"comment\"> * will release later by RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#avc_update_node\">avc_update_node</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seqno\">seqno</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hvalue\">hvalue</a>, <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#orig\">orig</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#avc_alloc_node\">avc_alloc_node</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lock the target slot */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hvalue\">hvalue</a> = <a class=\"id\" href=\"#avc_hash\">avc_hash</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#hvalue\">hvalue</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots_lock\">slots_lock</a>[<a class=\"id\" href=\"#hvalue\">hvalue</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ssid\">ssid</a> == <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#ssid\">ssid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tsid\">tsid</a> == <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#tsid\">tsid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tclass\">tclass</a> == <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#tclass\">tclass</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#seqno\">seqno</a> == <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>.<a class=\"id\" href=\"#seqno\">seqno</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orig\">orig</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#orig\">orig</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_node_kill\">avc_node_kill</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Copy and replace original node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_node_populate\">avc_node_populate</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, &amp;<a class=\"id\" href=\"#orig\">orig</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AVC_CALLBACK_GRANT\">AVC_CALLBACK_GRANT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>.<a class=\"id\" href=\"#allowed\">allowed</a> |= <a class=\"id\" href=\"#perms\">perms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AVC_CALLBACK_TRY_REVOKE\">AVC_CALLBACK_TRY_REVOKE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AVC_CALLBACK_REVOKE\">AVC_CALLBACK_REVOKE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>.<a class=\"id\" href=\"#allowed\">allowed</a> &= ~<a class=\"id\" href=\"#perms\">perms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AVC_CALLBACK_AUDITALLOW_ENABLE\">AVC_CALLBACK_AUDITALLOW_ENABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>.<a class=\"id\" href=\"#auditallow\">auditallow</a> |= <a class=\"id\" href=\"#perms\">perms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AVC_CALLBACK_AUDITALLOW_DISABLE\">AVC_CALLBACK_AUDITALLOW_DISABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>.<a class=\"id\" href=\"#auditallow\">auditallow</a> &= ~<a class=\"id\" href=\"#perms\">perms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AVC_CALLBACK_AUDITDENY_ENABLE\">AVC_CALLBACK_AUDITDENY_ENABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>.<a class=\"id\" href=\"#auditdeny\">auditdeny</a> |= <a class=\"id\" href=\"#perms\">perms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AVC_CALLBACK_AUDITDENY_DISABLE\">AVC_CALLBACK_AUDITDENY_DISABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>.<a class=\"id\" href=\"#auditdeny\">auditdeny</a> &= ~<a class=\"id\" href=\"#perms\">perms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_node_replace\">avc_node_replace</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#orig\">orig</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_flush - Flush the cache</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#avc_flush\">avc_flush</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#AVC_CACHE_SLOTS\">AVC_CACHE_SLOTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a> = &amp;<a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#slots_lock\">slots_lock</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * With preemptable RCU, the outer spinlock does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * prevent RCU grace periods from ending.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_node_delete\">avc_node_delete</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_ss_reset - Flush the cache and revalidate migrated permissions.</span>", 
"<span class=\"comment\"> * @seqno: policy sequence number</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#avc_ss_reset\">avc_ss_reset</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seqno\">seqno</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_callback_node\">avc_callback_node</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0, <a class=\"id\" href=\"#tmprc\">tmprc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_flush\">avc_flush</a>();", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#avc_callbacks\">avc_callbacks</a>; <a class=\"id\" href=\"#c\">c</a>; <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#events\">events</a> &amp; <a class=\"id\" href=\"#AVC_CALLBACK_RESET\">AVC_CALLBACK_RESET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmprc\">tmprc</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#callback\">callback</a>(<a class=\"id\" href=\"#AVC_CALLBACK_RESET\">AVC_CALLBACK_RESET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    0, 0, 0, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* save the first error encountered for the return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   value and continue processing the callbacks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#tmprc\">tmprc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_latest_notif_update\">avc_latest_notif_update</a>(<a class=\"id\" href=\"#seqno\">seqno</a>, 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_has_perm_noaudit - Check permissions but perform no auditing.</span>", 
"<span class=\"comment\"> * @ssid: source security identifier</span>", 
"<span class=\"comment\"> * @tsid: target security identifier</span>", 
"<span class=\"comment\"> * @tclass: target security class</span>", 
"<span class=\"comment\"> * @requested: requested permissions, interpreted based on @tclass</span>", 
"<span class=\"comment\"> * @flags:  AVC_STRICT or 0</span>", 
"<span class=\"comment\"> * @avd: access vector decisions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check the AVC to determine whether the @requested permissions are granted</span>", 
"<span class=\"comment\"> * for the SID pair (@ssid, @tsid), interpreting the permissions</span>", 
"<span class=\"comment\"> * based on @tclass, and call the security server on a cache miss to obtain</span>", 
"<span class=\"comment\"> * a new decision and add it to the cache.  Return a copy of the decisions</span>", 
"<span class=\"comment\"> * in @avd.  Return %0 if all @requested permissions are granted,</span>", 
"<span class=\"comment\"> * -%EACCES if any permissions are denied, or another -errno upon</span>", 
"<span class=\"comment\"> * other errors.  This function is typically called by avc_has_perm(),</span>", 
"<span class=\"comment\"> * but may also be called directly to separate permission checking from</span>", 
"<span class=\"comment\"> * auditing, e.g. in cases where a lock must be held for the check but</span>", 
"<span class=\"comment\"> * should be released for the auditing.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#avc_has_perm_noaudit\">avc_has_perm_noaudit</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#requested\">requested</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#av_decision\">av_decision</a> *<a class=\"id\" href=\"#in_avd\">in_avd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avc_node\">avc_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#av_decision\">av_decision</a> <a class=\"id\" href=\"#avd_entry\">avd_entry</a>, *<a class=\"id\" href=\"#avd\">avd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#denied\">denied</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#requested\">requested</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#avc_lookup\">avc_lookup</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_avd\">in_avd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avd\">avd</a> = <a class=\"id\" href=\"#in_avd\">in_avd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avd\">avd</a> = &amp;<a class=\"id\" href=\"#avd_entry\">avd_entry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_compute_av\">security_compute_av</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#avd\">avd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#avc_insert\">avc_insert</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#avd\">avd</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_avd\">in_avd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#in_avd\">in_avd</a>, &amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>, sizeof(*<a class=\"id\" href=\"#in_avd\">in_avd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avd\">avd</a> = &amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#ae\">ae</a>.<a class=\"id\" href=\"#avd\">avd</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#denied\">denied</a> = <a class=\"id\" href=\"#requested\">requested</a> &amp; ~(<a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#allowed\">allowed</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#denied\">denied</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#AVC_STRICT\">AVC_STRICT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (!<a class=\"id\" href=\"#selinux_enforcing\">selinux_enforcing</a> || (<a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#AVD_FLAGS_PERMISSIVE\">AVD_FLAGS_PERMISSIVE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_update_node\">avc_update_node</a>(<a class=\"id\" href=\"#AVC_CALLBACK_GRANT\">AVC_CALLBACK_GRANT</a>, <a class=\"id\" href=\"#requested\">requested</a>, <a class=\"id\" href=\"#ssid\">ssid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#seqno\">seqno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * avc_has_perm - Check permissions and perform any appropriate auditing.</span>", 
"<span class=\"comment\"> * @ssid: source security identifier</span>", 
"<span class=\"comment\"> * @tsid: target security identifier</span>", 
"<span class=\"comment\"> * @tclass: target security class</span>", 
"<span class=\"comment\"> * @requested: requested permissions, interpreted based on @tclass</span>", 
"<span class=\"comment\"> * @auditdata: auxiliary audit data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check the AVC to determine whether the @requested permissions are granted</span>", 
"<span class=\"comment\"> * for the SID pair (@ssid, @tsid), interpreting the permissions</span>", 
"<span class=\"comment\"> * based on @tclass, and call the security server on a cache miss to obtain</span>", 
"<span class=\"comment\"> * a new decision and add it to the cache.  Audit the granting or denial of</span>", 
"<span class=\"comment\"> * permissions in accordance with the policy.  Return %0 if all @requested</span>", 
"<span class=\"comment\"> * permissions are granted, -%EACCES if any permissions are denied, or</span>", 
"<span class=\"comment\"> * another -errno upon other errors.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#requested\">requested</a>, struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> *<a class=\"id\" href=\"#auditdata\">auditdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#av_decision\">av_decision</a> <a class=\"id\" href=\"#avd\">avd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm_noaudit\">avc_has_perm_noaudit</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#requested\">requested</a>, 0, &amp;<a class=\"id\" href=\"#avd\">avd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc_audit\">avc_audit</a>(<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#requested\">requested</a>, &amp;<a class=\"id\" href=\"#avd\">avd</a>, <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#auditdata\">auditdata</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#avc_policy_seqno\">avc_policy_seqno</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_cache\">avc_cache</a>.<a class=\"id\" href=\"#latest_notif\">latest_notif</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#avc_disable\">avc_disable</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If you are looking at this because you have realized that we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not destroying the avc_node_cachep it might be easy to fix, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I don't know the memory barrier semantics well enough to know.  It's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * possible that some other task dereferenced security_ops when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it still pointed to selinux operations.  If that is the case it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * possible that it is about to use the avc and is about to need the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * avc_node_cachep.  I know I could wrap the security.c security_ops call</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in an rcu_lock, but seriously, it's not worth it.  Instead I just flush</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the cache and get that memory back.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avc_node_cachep\">avc_node_cachep</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_flush\">avc_flush</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kmem_cache_destroy(avc_node_cachep); */</span>", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/c5/6d90aa58d7fdc48d175bad12fb277a3403bdbe.xr', __xr_tmp);
