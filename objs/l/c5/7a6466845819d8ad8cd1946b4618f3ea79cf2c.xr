var __xr_tmp = [
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     SCSI_SCAN_NO_RESPONSE: could not allocate or setup a scsi_device</span>", 
"<span class=\"comment\"> *     SCSI_SCAN_TARGET_PRESENT: target responded, but no device is</span>", 
"<span class=\"comment\"> *         attached at the LUN</span>", 
"<span class=\"comment\"> *     SCSI_SCAN_LUN_PRESENT: a new scsi_device was allocated and initialized</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#scsi_probe_and_add_lun\">scsi_probe_and_add_lun</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#lun\">lun</a>, int *<a class=\"id\" href=\"#bflagsp\">bflagsp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> **<a class=\"id\" href=\"#sdevp\">sdevp</a>, int <a class=\"id\" href=\"#rescan\">rescan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#hostdata\">hostdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bflags\">bflags</a>, <a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#SCSI_SCAN_NO_RESPONSE\">SCSI_SCAN_NO_RESPONSE</a>, <a class=\"id\" href=\"#result_len\">result_len</a> = 256;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The rescan flag is used as an optimization, the first scan of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * host adapter calls into here with rescan == 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#scsi_device_lookup_by_target\">scsi_device_lookup_by_target</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#lun\">lun</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rescan\">rescan</a> || !<a class=\"id\" href=\"#scsi_device_created\">scsi_device_created</a>(<a class=\"id\" href=\"#sdev\">sdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"scsi scan: device exists on %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdevp\">sdevp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sdevp\">sdevp</a> = <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bflagsp\">bflagsp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bflagsp\">bflagsp</a> = <a class=\"id\" href=\"#scsi_get_device_flags\">scsi_get_device_flags</a>(<a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#vendor\">vendor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#model\">model</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SCSI_SCAN_LUN_PRESENT\">SCSI_SCAN_LUN_PRESENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#scsi_alloc_sdev\">scsi_alloc_sdev</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#hostdata\">hostdata</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#result_len\">result_len</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#unchecked_isa_dma\">unchecked_isa_dma</a>) ? <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> : 0));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_sdev\">out_free_sdev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_probe_lun\">scsi_probe_lun</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#result_len\">result_len</a>, &amp;<a class=\"id\" href=\"#bflags\">bflags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_result\">out_free_result</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bflagsp\">bflagsp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bflagsp\">bflagsp</a> = <a class=\"id\" href=\"#bflags\">bflags</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * result contains valid SCSI INQUIRY data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#result\">result</a>[0] >> 5) == 3) && !(<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_ATTACH_PQ3\">BLIST_ATTACH_PQ3</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For a Peripheral qualifier 3 (011b), the SCSI</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * spec says: The device server is not capable of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * supporting a physical device on this logical</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For disks, this implies that there is no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * logical disk configured at sdev-&gt;lun, but there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is a target id responding.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(2, <a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdev\">sdev</a>, \"scsi scan:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \" peripheral qualifier of 3, device not\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \" added\\n\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lun\">lun</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(1, {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#vend\">vend</a>[9];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#mod\">mod</a>[17];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"scsi scan: consider passing scsi_mod.\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"dev_flags=%s:%s:0x240 or 0x1000240\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_inq_str\">scsi_inq_str</a>(<a class=\"id\" href=\"#vend\">vend</a>, <a class=\"id\" href=\"#result\">result</a>, 8, 16),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_inq_str\">scsi_inq_str</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#result\">result</a>, 16, 32));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>});", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#SCSI_SCAN_TARGET_PRESENT\">SCSI_SCAN_TARGET_PRESENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_result\">out_free_result</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some targets may set slight variations of PQ and PDT to signal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that no LUN is present, so don't add sdev in these cases.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Two specific examples are:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) NetApp targets: return PQ=1, PDT=0x1f</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) USB UFI: returns PDT=0x1f, with the PQ bits being \"reserved\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    in the UFI 1.0 spec (we cannot rely on reserved bits).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * References:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) SCSI SPC-3, pp. 145-146</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PQ=1: \"A peripheral device having the specified peripheral</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device type is not connected to this logical unit. However, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device server is capable of supporting the specified peripheral</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device type on this logical unit.\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PDT=0x1f: \"Unknown or no device type\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) USB UFI 1.0, p. 20</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PDT=00h Direct-access device (floppy)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PDT=1Fh none (no FDD connected to the requested logical unit)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#result\">result</a>[0] >> 5) == 1 || <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#pdt_1f_for_no_lun\">pdt_1f_for_no_lun</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#result\">result</a>[0] &amp; 0x1f) == 0x1f &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#scsi_is_wlun\">scsi_is_wlun</a>(<a class=\"id\" href=\"#lun\">lun</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"scsi scan: peripheral device type\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" of 31, no device added\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#SCSI_SCAN_TARGET_PRESENT\">SCSI_SCAN_TARGET_PRESENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_result\">out_free_result</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#scsi_add_lun\">scsi_add_lun</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#result\">result</a>, &amp;<a class=\"id\" href=\"#bflags\">bflags</a>, <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#async_scan\">async_scan</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == <a class=\"id\" href=\"#SCSI_SCAN_LUN_PRESENT\">SCSI_SCAN_LUN_PRESENT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_KEY\">BLIST_KEY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#lockable\">lockable</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_unlock_floptical\">scsi_unlock_floptical</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out_free_result\">out_free_result</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#result\">result</a>);", 
" <a class=\"id\" href=\"#out_free_sdev\">out_free_sdev</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == <a class=\"id\" href=\"#SCSI_SCAN_LUN_PRESENT\">SCSI_SCAN_LUN_PRESENT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdevp\">sdevp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>(<a class=\"id\" href=\"#sdev\">sdev</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sdevp\">sdevp</a> = <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_remove_device\">__scsi_remove_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#SCSI_SCAN_NO_RESPONSE\">SCSI_SCAN_NO_RESPONSE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_remove_device\">__scsi_remove_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_sequential_lun_scan - sequentially scan a SCSI target</span>", 
"<span class=\"comment\"> * @starget:<span class=\"ts\"/>pointer to target structure to scan</span>", 
"<span class=\"comment\"> * @bflags:<span class=\"ts\"/>black/white list flag for LUN 0</span>", 
"<span class=\"comment\"> * @scsi_level: Which version of the standard does this device adhere to</span>", 
"<span class=\"comment\"> * @rescan:     passed to scsi_probe_add_lun()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Generally, scan from LUN 1 (LUN 0 is assumed to already have been</span>", 
"<span class=\"comment\"> *     scanned) to some maximum lun until a LUN is found with no device</span>", 
"<span class=\"comment\"> *     attached. Use the bflags to figure out any oddities.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Modifies sdevscan-&gt;lun.</span>", 
"<span class=\"comment\"> **/</span>", 
"static void <a class=\"id\" href=\"#scsi_sequential_lun_scan\">scsi_sequential_lun_scan</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#bflags\">bflags</a>, int <a class=\"id\" href=\"#scsi_level\">scsi_level</a>, int <a class=\"id\" href=\"#rescan\">rescan</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sparse_lun\">sparse_lun</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#max_dev_lun\">max_dev_lun</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"scsi scan: Sequential scan of\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"%s\\n\", <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_dev_lun\">max_dev_lun</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#max_scsi_luns\">max_scsi_luns</a>, <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_lun\">max_lun</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this device is known to support sparse multiple units,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * override the other settings, and scan all of them. Normally,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SCSI-3 devices should be scanned via the REPORT LUNS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_SPARSELUN\">BLIST_SPARSELUN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_dev_lun\">max_dev_lun</a> = <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_lun\">max_lun</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sparse_lun\">sparse_lun</a> = 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sparse_lun\">sparse_lun</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If less than SCSI_1_CSS, and no special lun scaning, stop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scanning; this matches 2.4 behaviour, but could just be a bug</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (to continue scanning a SCSI_1_CSS device).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This test is broken.  We might not have any device on lun0 for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a sparselun device, and if that's the case then how would we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * know the real scsi_level, eh?  It might make sense to just not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scan any SCSI_1 device for non-0 luns, but that check would best</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * go into scsi_alloc_sdev() and just have it return null when asked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to alloc an sdev for lun &gt; 0 on an already found SCSI_1 device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/>if ((sdevscan-&gt;scsi_level &lt; SCSI_1_CCS) &amp;&amp;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>    ((bflags &amp; (BLIST_FORCELUN | BLIST_SPARSELUN | BLIST_MAX5LUN))</span>", 
"<span class=\"comment\"><span class=\"ts\"/>     == 0))</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>return;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this device is known to support multiple units, override</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the other settings, and scan all of them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_FORCELUN\">BLIST_FORCELUN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_dev_lun\">max_dev_lun</a> = <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_lun\">max_lun</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * REGAL CDC-4X: avoid hang after LUN 4</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_MAX5LUN\">BLIST_MAX5LUN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_dev_lun\">max_dev_lun</a> = <a class=\"id\" href=\"#min\">min</a>(5U, <a class=\"id\" href=\"#max_dev_lun\">max_dev_lun</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not scan SCSI-2 or lower device past LUN 7, unless</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * BLIST_LARGELUN.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_level\">scsi_level</a> &lt; <a class=\"id\" href=\"#SCSI_3\">SCSI_3</a> && !(<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_LARGELUN\">BLIST_LARGELUN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_dev_lun\">max_dev_lun</a> = <a class=\"id\" href=\"#min\">min</a>(8U, <a class=\"id\" href=\"#max_dev_lun\">max_dev_lun</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have already scanned LUN 0, so start at LUN 1. Keep scanning</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * until we reach the max, or no LUN is found and we are not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sparse_lun.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#lun\">lun</a> = 1; <a class=\"id\" href=\"#lun\">lun</a> &lt; <a class=\"id\" href=\"#max_dev_lun\">max_dev_lun</a>; ++<a class=\"id\" href=\"#lun\">lun</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#scsi_probe_and_add_lun\">scsi_probe_and_add_lun</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#rescan\">rescan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>) != <a class=\"id\" href=\"#SCSI_SCAN_LUN_PRESENT\">SCSI_SCAN_LUN_PRESENT</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#sparse_lun\">sparse_lun</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsilun_to_int - convert a scsi_lun to an int</span>", 
"<span class=\"comment\"> * @scsilun:<span class=\"ts\"/>struct scsi_lun to be converted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Convert @scsilun from a struct scsi_lun to a four byte host byte-ordered</span>", 
"<span class=\"comment\"> *     integer, and return the result. The caller must check for</span>", 
"<span class=\"comment\"> *     truncation before using this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *     The struct scsi_lun is assumed to be four levels, with each level</span>", 
"<span class=\"comment\"> *     effectively containing a SCSI byte-ordered (big endian) short; the</span>", 
"<span class=\"comment\"> *     addressing bits of each level are ignored (the highest two bits).</span>", 
"<span class=\"comment\"> *     For a description of the LUN format, post SCSI-3 see the SCSI</span>", 
"<span class=\"comment\"> *     Architecture Model, for SCSI-3 see the SCSI Controller Commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Given a struct scsi_lun of: 0a 04 0b 03 00 00 00 00, this function returns</span>", 
"<span class=\"comment\"> *     the integer: 0x0b030a04</span>", 
"<span class=\"comment\"> **/</span>", 
"int <a class=\"id\" href=\"#scsilun_to_int\">scsilun_to_int</a>(struct <a class=\"id\" href=\"#scsi_lun\">scsi_lun</a> *<a class=\"id\" href=\"#scsilun\">scsilun</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lun\">lun</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lun\">lun</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; sizeof(<a class=\"id\" href=\"#lun\">lun</a>); <a class=\"id\" href=\"#i\">i</a> += 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lun\">lun</a> = <a class=\"id\" href=\"#lun\">lun</a> | (((<a class=\"id\" href=\"#scsilun\">scsilun</a>-><a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>[<a class=\"id\" href=\"#i\">i</a>] << 8) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#scsilun\">scsilun</a>-><a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>[<a class=\"id\" href=\"#i\">i</a> + 1]) << (<a class=\"id\" href=\"#i\">i</a> * 8));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lun\">lun</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsilun_to_int\">scsilun_to_int</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int_to_scsilun - reverts an int into a scsi_lun</span>", 
"<span class=\"comment\"> * @lun:        integer to be reverted</span>", 
"<span class=\"comment\"> * @scsilun:<span class=\"ts\"/>struct scsi_lun to be set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Reverts the functionality of the scsilun_to_int, which packed</span>", 
"<span class=\"comment\"> *     an 8-byte lun value into an int. This routine unpacks the int</span>", 
"<span class=\"comment\"> *     back into the lun value.</span>", 
"<span class=\"comment\"> *     Note: the scsilun_to_int() routine does not truly handle all</span>", 
"<span class=\"comment\"> *     8bytes of the lun value. This functions restores only as much</span>", 
"<span class=\"comment\"> *     as was set by the routine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *     Given an integer : 0x0b030a04,  this function returns a</span>", 
"<span class=\"comment\"> *     scsi_lun of : struct scsi_lun of: 0a 04 0b 03 00 00 00 00</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#int_to_scsilun\">int_to_scsilun</a>(unsigned int <a class=\"id\" href=\"#lun\">lun</a>, struct <a class=\"id\" href=\"#scsi_lun\">scsi_lun</a> *<a class=\"id\" href=\"#scsilun\">scsilun</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#scsilun\">scsilun</a>-><a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>, 0, sizeof(<a class=\"id\" href=\"#scsilun\">scsilun</a>-><a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; sizeof(<a class=\"id\" href=\"#lun\">lun</a>); <a class=\"id\" href=\"#i\">i</a> += 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsilun\">scsilun</a>-><a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>[<a class=\"id\" href=\"#i\">i</a>] = (<a class=\"id\" href=\"#lun\">lun</a> >> 8) &amp; 0xFF;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsilun\">scsilun</a>-><a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>[<a class=\"id\" href=\"#i\">i</a>+1] = <a class=\"id\" href=\"#lun\">lun</a> &amp; 0xFF;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lun\">lun</a> = <a class=\"id\" href=\"#lun\">lun</a> >> 16;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#int_to_scsilun\">int_to_scsilun</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_report_lun_scan - Scan using SCSI REPORT LUN results</span>", 
"<span class=\"comment\"> * @starget: which target</span>", 
"<span class=\"comment\"> * @bflags: Zero or a mix of BLIST_NOLUN, BLIST_REPORTLUN2, or BLIST_NOREPORTLUN</span>", 
"<span class=\"comment\"> * @rescan: nonzero if we can skip code only needed on first scan</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Fast scanning for modern (SCSI-3) devices by sending a REPORT LUN command.</span>", 
"<span class=\"comment\"> *   Scan the resulting list of LUNs by calling scsi_probe_and_add_lun.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   If BLINK_REPORTLUN2 is set, scan a target that supports more than 8</span>", 
"<span class=\"comment\"> *   LUNs even if it's older than SCSI-3.</span>", 
"<span class=\"comment\"> *   If BLIST_NOREPORTLUN is set, return 1 always.</span>", 
"<span class=\"comment\"> *   If BLIST_NOLUN is set, return 0 always.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     0: scan completed (or no memory, so further scanning is futile)</span>", 
"<span class=\"comment\"> *     1: could not scan with REPORT LUN</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#scsi_report_lun_scan\">scsi_report_lun_scan</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>, int <a class=\"id\" href=\"#bflags\">bflags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rescan\">rescan</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#devname\">devname</a>[64];", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[<a class=\"id\" href=\"#MAX_COMMAND_SIZE\">MAX_COMMAND_SIZE</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lun\">lun</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_luns\">num_luns</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#retries\">retries</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_lun\">scsi_lun</a> *<a class=\"id\" href=\"#lunp\">lunp</a>, *<a class=\"id\" href=\"#lun_data\">lun_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only support SCSI-3 and up devices if BLIST_NOREPORTLUN is not set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also allow SCSI-2 if BLIST_REPORTLUN2 is set and host adapter does</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * support more than 8 LUNs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_NOREPORTLUN\">BLIST_NOREPORTLUN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> &lt; <a class=\"id\" href=\"#SCSI_2\">SCSI_2</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> != <a class=\"id\" href=\"#SCSI_UNKNOWN\">SCSI_UNKNOWN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> &lt; <a class=\"id\" href=\"#SCSI_3\">SCSI_3</a> &&", 
"<span class=\"ts\"/>    (!(<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_REPORTLUN2\">BLIST_REPORTLUN2</a>) || <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_lun\">max_lun</a> <= 8))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_NOLUN\">BLIST_NOLUN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#scsi_device_lookup_by_target\">scsi_device_lookup_by_target</a>(<a class=\"id\" href=\"#starget\">starget</a>, 0))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#scsi_alloc_sdev\">scsi_alloc_sdev</a>(<a class=\"id\" href=\"#starget\">starget</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>(<a class=\"id\" href=\"#sdev\">sdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_remove_device\">__scsi_remove_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#devname\">devname</a>, \"host %d channel %d id %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate enough to hold the header (the same size as one scsi_lun)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * plus the max number of luns we are requesting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reallocating and trying again (with the exact amount we need)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would be nice, but then we need to somehow limit the size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated based on the available memory and the limits of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmalloc - we don't want a kmalloc() failure of a huge value to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent us from finding any LUNs on this target.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = (<a class=\"id\" href=\"#max_scsi_report_luns\">max_scsi_report_luns</a> + 1) * sizeof(struct <a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lun_data\">lun_data</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#unchecked_isa_dma\">unchecked_isa_dma</a> ? <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> : 0));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#lun_data\">lun_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#ALLOC_FAILURE_MSG\">ALLOC_FAILURE_MSG</a>, <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[0] = <a class=\"id\" href=\"#REPORT_LUNS\">REPORT_LUNS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bytes 1 - 5: reserved, set to zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[1], 0, 5);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bytes 6 - 9: length of the command.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[6] = (unsigned char) (<a class=\"id\" href=\"#length\">length</a> >> 24) &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[7] = (unsigned char) (<a class=\"id\" href=\"#length\">length</a> >> 16) &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[8] = (unsigned char) (<a class=\"id\" href=\"#length\">length</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[9] = (unsigned char) <a class=\"id\" href=\"#length\">length</a> &amp; 0xff;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[10] = 0;<span class=\"ts\"/><span class=\"comment\">/* reserved */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[11] = 0;<span class=\"ts\"/><span class=\"comment\">/* control */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can get a UNIT ATTENTION, for example a power on/reset, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * retry a few times (like sd.c does for TEST UNIT READY).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Experience shows some combinations of adapter/devices get at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * least two power on/resets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Illegal requests (for devices that do not support REPORT LUNS)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should come through as a check condition, and will not generate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a retry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#retries\">retries</a> = 0; <a class=\"id\" href=\"#retries\">retries</a> &lt; 3; <a class=\"id\" href=\"#retries\">retries</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(3, <a class=\"id\" href=\"#printk\">printk</a> (<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"scsi scan: Sending\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" REPORT LUNS to %s (try %d)\\n\", <a class=\"id\" href=\"#devname\">devname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retries\">retries</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#lun_data\">lun_data</a>, <a class=\"id\" href=\"#length\">length</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SCSI_TIMEOUT\">SCSI_TIMEOUT</a> + 4 * <a class=\"id\" href=\"#HZ\">HZ</a>, 3, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(3, <a class=\"id\" href=\"#printk\">printk</a> (<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"scsi scan: REPORT LUNS\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" %s (try %d) result 0x%x\\n\", <a class=\"id\" href=\"#result\">result</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>?  \"failed\" : \"successful\", <a class=\"id\" href=\"#retries\">retries</a>, <a class=\"id\" href=\"#result\">result</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> != <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The device probably does not support a REPORT LUN command</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the length from the first four bytes of lun_data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#lun_data\">lun_data</a>-><a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = ((<a class=\"id\" href=\"#data\">data</a>[0] << 24) | (<a class=\"id\" href=\"#data\">data</a>[1] << 16) |", 
"<span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#data\">data</a>[2] << 8) | (<a class=\"id\" href=\"#data\">data</a>[3] << 0));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_luns\">num_luns</a> = (<a class=\"id\" href=\"#length\">length</a> / sizeof(struct <a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_luns\">num_luns</a> &gt; <a class=\"id\" href=\"#max_scsi_report_luns\">max_scsi_report_luns</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"scsi: On %s only %d (max_scsi_report_luns)\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" of %d luns reported, try increasing\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" max_scsi_report_luns.\\n\", <a class=\"id\" href=\"#devname\">devname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#max_scsi_report_luns\">max_scsi_report_luns</a>, <a class=\"id\" href=\"#num_luns\">num_luns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_luns\">num_luns</a> = <a class=\"id\" href=\"#max_scsi_report_luns\">max_scsi_report_luns</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(3, <a class=\"id\" href=\"#sdev_printk\">sdev_printk</a> (<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"scsi scan: REPORT LUN scan\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Scan the luns in lun_data. The entry at offset 0 is really</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the header, so start at 1 and go up to and including num_luns.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#lunp\">lunp</a> = &amp;<a class=\"id\" href=\"#lun_data\">lun_data</a>[1]; <a class=\"id\" href=\"#lunp\">lunp</a> <= &amp;<a class=\"id\" href=\"#lun_data\">lun_data</a>[<a class=\"id\" href=\"#num_luns\">num_luns</a>]; <a class=\"id\" href=\"#lunp\">lunp</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lun\">lun</a> = <a class=\"id\" href=\"#scsilun_to_int\">scsilun_to_int</a>(<a class=\"id\" href=\"#lunp\">lunp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check if the unused part of lunp is non-zero, and so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * does not fit in lun.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(&amp;<a class=\"id\" href=\"#lunp\">lunp</a>-><a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>[sizeof(<a class=\"id\" href=\"#lun\">lun</a>)], \"\\0\\0\\0\\0\", 4)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Output an error displaying the LUN in byte order,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this differs from what linux would print for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * integer LUN value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"scsi: %s lun 0x\", <a class=\"id\" href=\"#devname\">devname</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = (char *)<a class=\"id\" href=\"#lunp\">lunp</a>-><a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; sizeof(struct <a class=\"id\" href=\"#scsi_lun\">scsi_lun</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%02x\", <a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" has a LUN larger than currently supported.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#lun\">lun</a> &gt; <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#max_lun\">max_lun</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"scsi: %s lun%d has a LUN larger\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" than allowed by the host adapter\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#devname\">devname</a>, <a class=\"id\" href=\"#lun\">lun</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#scsi_probe_and_add_lun\">scsi_probe_and_add_lun</a>(<a class=\"id\" href=\"#starget\">starget</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#rescan\">rescan</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == <a class=\"id\" href=\"#SCSI_SCAN_NO_RESPONSE\">SCSI_SCAN_NO_RESPONSE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Got some results, but now none, abort.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Unexpected response\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        \" from lun %d while scanning, scan\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        \" aborted\\n\", <a class=\"id\" href=\"#lun\">lun</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#lun_data\">lun_data</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_device_created\">scsi_device_created</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the sdev we used didn't appear in the report luns scan</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_remove_device\">__scsi_remove_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#__scsi_add_device\">__scsi_add_device</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#lun\">lun</a>, void *<a class=\"id\" href=\"#hostdata\">hostdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENODEV\">ENODEV</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a> = &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#shost_gendev\">shost_gendev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#scsi_scan_type\">scsi_scan_type</a>, \"none\", 4) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENODEV\">ENODEV</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_alloc_target\">scsi_alloc_target</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#starget\">starget</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_get_target\">scsi_autopm_get_target</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#async_scan\">async_scan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_complete_async_scans\">scsi_complete_async_scans</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_scan_allowed\">scsi_host_scan_allowed</a>(<a class=\"id\" href=\"#shost\">shost</a>) && <a class=\"id\" href=\"#scsi_autopm_get_host\">scsi_autopm_get_host</a>(<a class=\"id\" href=\"#shost\">shost</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_probe_and_add_lun\">scsi_probe_and_add_lun</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#sdev\">sdev</a>, 1, <a class=\"id\" href=\"#hostdata\">hostdata</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_host\">scsi_autopm_put_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_target\">scsi_autopm_put_target</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_target_reap\">scsi_target_reap</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__scsi_add_device\">__scsi_add_device</a>);", 
"", 
"int <a class=\"id\" href=\"#scsi_add_device\">scsi_add_device</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#lun\">lun</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = ", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_add_device\">__scsi_add_device</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_add_device\">scsi_add_device</a>);", 
"", 
"void <a class=\"id\" href=\"#scsi_rescan_device\">scsi_rescan_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_driver\">scsi_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#to_scsi_driver\">to_scsi_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#owner\">owner</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#rescan\">rescan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#rescan\">rescan</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_rescan_device\">scsi_rescan_device</a>);", 
"", 
"static void <a class=\"id\" href=\"#__scsi_scan_target\">__scsi_scan_target</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a>, unsigned int <a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#id\">id</a>, unsigned int <a class=\"id\" href=\"#lun\">lun</a>, int <a class=\"id\" href=\"#rescan\">rescan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bflags\">bflags</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#this_id\">this_id</a> == <a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't scan the host adapter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_alloc_target\">scsi_alloc_target</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#starget\">starget</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_get_target\">scsi_autopm_get_target</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lun\">lun</a> != <a class=\"id\" href=\"#SCAN_WILD_CARD\">SCAN_WILD_CARD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Scan for a specific host/chan/id/lun.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_probe_and_add_lun\">scsi_probe_and_add_lun</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#rescan\">rescan</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_reap\">out_reap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Scan LUN 0, if there is some response, scan further. Ideally, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would not configure LUN 0 until all LUNs are scanned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#scsi_probe_and_add_lun\">scsi_probe_and_add_lun</a>(<a class=\"id\" href=\"#starget\">starget</a>, 0, &amp;<a class=\"id\" href=\"#bflags\">bflags</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#rescan\">rescan</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == <a class=\"id\" href=\"#SCSI_SCAN_LUN_PRESENT\">SCSI_SCAN_LUN_PRESENT</a> || <a class=\"id\" href=\"#res\">res</a> == <a class=\"id\" href=\"#SCSI_SCAN_TARGET_PRESENT\">SCSI_SCAN_TARGET_PRESENT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_report_lun_scan\">scsi_report_lun_scan</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#bflags\">bflags</a>, <a class=\"id\" href=\"#rescan\">rescan</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The REPORT LUN did not scan the target,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * do a sequential scan.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_sequential_lun_scan\">scsi_sequential_lun_scan</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#bflags\">bflags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a>, <a class=\"id\" href=\"#rescan\">rescan</a>);", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out_reap\">out_reap</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_target\">scsi_autopm_put_target</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* now determine if the target has any children at all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and if not, nuke it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_target_reap\">scsi_target_reap</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_scan_target - scan a target id, possibly including all LUNs on the target.</span>", 
"<span class=\"comment\"> * @parent:<span class=\"ts\"/>host to scan</span>", 
"<span class=\"comment\"> * @channel:<span class=\"ts\"/>channel to scan</span>", 
"<span class=\"comment\"> * @id:<span class=\"ts\"/><span class=\"ts\"/>target id to scan</span>", 
"<span class=\"comment\"> * @lun:<span class=\"ts\"/>Specific LUN to scan or SCAN_WILD_CARD</span>", 
"<span class=\"comment\"> * @rescan:<span class=\"ts\"/>passed to LUN scanning routines</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Scan the target id on @parent, @channel, and @id. Scan at least LUN 0,</span>", 
"<span class=\"comment\"> *     and possibly all LUNs on the target id.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     First try a REPORT LUN scan, if that does not scan the target, do a</span>", 
"<span class=\"comment\"> *     sequential scan of LUNs on the target id.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#scsi_scan_target\">scsi_scan_target</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a>, unsigned int <a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#id\">id</a>, unsigned int <a class=\"id\" href=\"#lun\">lun</a>, int <a class=\"id\" href=\"#rescan\">rescan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#scsi_scan_type\">scsi_scan_type</a>, \"none\", 4) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#async_scan\">async_scan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_complete_async_scans\">scsi_complete_async_scans</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_scan_allowed\">scsi_host_scan_allowed</a>(<a class=\"id\" href=\"#shost\">shost</a>) && <a class=\"id\" href=\"#scsi_autopm_get_host\">scsi_autopm_get_host</a>(<a class=\"id\" href=\"#shost\">shost</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_scan_target\">__scsi_scan_target</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#rescan\">rescan</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_host\">scsi_autopm_put_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_scan_target\">scsi_scan_target</a>);", 
"", 
"static void <a class=\"id\" href=\"#scsi_scan_channel\">scsi_scan_channel</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, unsigned int <a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#id\">id</a>, unsigned int <a class=\"id\" href=\"#lun\">lun</a>, int <a class=\"id\" href=\"#rescan\">rescan</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#order_id\">order_id</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#SCAN_WILD_CARD\">SCAN_WILD_CARD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#id\">id</a> = 0; <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_id\">max_id</a>; ++<a class=\"id\" href=\"#id\">id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * XXX adapter drivers when possible (FCP, iSCSI)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * could modify max_id to match the current max,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not the absolute max.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * XXX add a shost id iterator, so for example,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the FC ID can be the same as a target id</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * without a huge overhead of sparse id's.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#reverse_ordering\">reverse_ordering</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Scan from high to low id.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order_id\">order_id</a> = <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_id\">max_id</a> - <a class=\"id\" href=\"#id\">id</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order_id\">order_id</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_scan_target\">__scsi_scan_target</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#shost_gendev\">shost_gendev</a>, <a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order_id\">order_id</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#rescan\">rescan</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_scan_target\">__scsi_scan_target</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#shost_gendev\">shost_gendev</a>, <a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#rescan\">rescan</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#scsi_scan_host_selected\">scsi_scan_host_selected</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, unsigned int <a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#id\">id</a>, unsigned int <a class=\"id\" href=\"#lun\">lun</a>, int <a class=\"id\" href=\"#rescan\">rescan</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(3, <a class=\"id\" href=\"#shost_printk\">shost_printk</a> (<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"%s: <%u:%u:%u>\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#lun\">lun</a>));", 
"", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#channel\">channel</a> != <a class=\"id\" href=\"#SCAN_WILD_CARD\">SCAN_WILD_CARD</a>) && (<a class=\"id\" href=\"#channel\">channel</a> &gt; <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_channel\">max_channel</a>)) ||", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#id\">id</a> != <a class=\"id\" href=\"#SCAN_WILD_CARD\">SCAN_WILD_CARD</a>) && (<a class=\"id\" href=\"#id\">id</a> >= <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_id\">max_id</a>)) ||", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#lun\">lun</a> != <a class=\"id\" href=\"#SCAN_WILD_CARD\">SCAN_WILD_CARD</a>) && (<a class=\"id\" href=\"#lun\">lun</a> &gt; <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_lun\">max_lun</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#async_scan\">async_scan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_complete_async_scans\">scsi_complete_async_scans</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_scan_allowed\">scsi_host_scan_allowed</a>(<a class=\"id\" href=\"#shost\">shost</a>) && <a class=\"id\" href=\"#scsi_autopm_get_host\">scsi_autopm_get_host</a>(<a class=\"id\" href=\"#shost\">shost</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#channel\">channel</a> == <a class=\"id\" href=\"#SCAN_WILD_CARD\">SCAN_WILD_CARD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#channel\">channel</a> = 0; <a class=\"id\" href=\"#channel\">channel</a> <= <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_channel\">max_channel</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#channel\">channel</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_scan_channel\">scsi_scan_channel</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#lun\">lun</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#rescan\">rescan</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_scan_channel\">scsi_scan_channel</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#lun\">lun</a>, <a class=\"id\" href=\"#rescan\">rescan</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_host\">scsi_autopm_put_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_sysfs_add_devices\">scsi_sysfs_add_devices</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost_for_each_device\">shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_host_scan_allowed\">scsi_host_scan_allowed</a>(<a class=\"id\" href=\"#shost\">shost</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#scsi_sysfs_add_sdev\">scsi_sysfs_add_sdev</a>(<a class=\"id\" href=\"#sdev\">sdev</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_remove_device\">__scsi_remove_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_prep_async_scan - prepare for an async scan</span>", 
"<span class=\"comment\"> * @shost: the host which will be scanned</span>", 
"<span class=\"comment\"> * Returns: a cookie to be passed to scsi_finish_async_scan()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Tells the midlayer this host is going to do an asynchronous scan.</span>", 
"<span class=\"comment\"> * It reserves the host's position in the scanning list and ensures</span>", 
"<span class=\"comment\"> * that other asynchronous scans started after this one won't affect the</span>", 
"<span class=\"comment\"> * ordering of the discovered devices.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a> *<a class=\"id\" href=\"#scsi_prep_async_scan\">scsi_prep_async_scan</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#scsi_scan_type\">scsi_scan_type</a>, \"sync\", 4) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#async_scan\">async_scan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s called twice for host %d\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#data\">data</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#scsi_host_get\">scsi_host_get</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#shost\">shost</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#prev_finished\">prev_finished</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#async_scan\">async_scan</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#async_scan_lock\">async_scan_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#prev_finished\">prev_finished</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#async_scan_lock\">async_scan_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>;", 
"", 
" <a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_finish_async_scan - asynchronous scan has finished</span>", 
"<span class=\"comment\"> * @data: cookie returned from earlier call to scsi_prep_async_scan()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All the devices currently attached to this host have been found.</span>", 
"<span class=\"comment\"> * This function announces all the devices it has found to the rest</span>", 
"<span class=\"comment\"> * of the system.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_finish_async_scan\">scsi_finish_async_scan</a>(struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#shost\">shost</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#async_scan\">async_scan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s called twice for host %d\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#prev_finished\">prev_finished</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_sysfs_add_devices\">scsi_sysfs_add_devices</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#async_scan\">async_scan</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#async_scan_lock\">async_scan_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev_finished\">prev_finished</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#async_scan_lock\">async_scan_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_host_put\">scsi_host_put</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_scsi_scan_host\">do_scsi_scan_host</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#scan_finished\">scan_finished</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#scan_start\">scan_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#scan_start\">scan_start</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#scan_finished\">scan_finished</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#start\">start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(10);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_scan_host_selected\">scsi_scan_host_selected</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#SCAN_WILD_CARD\">SCAN_WILD_CARD</a>, <a class=\"id\" href=\"#SCAN_WILD_CARD\">SCAN_WILD_CARD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCAN_WILD_CARD\">SCAN_WILD_CARD</a>, 0);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_scan_async\">do_scan_async</a>(void *<a class=\"id\" href=\"#_data\">_data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#_data\">_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#shost\">shost</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_scsi_scan_host\">do_scsi_scan_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_finish_async_scan\">scsi_finish_async_scan</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_host\">scsi_autopm_put_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_scan_host - scan the given adapter</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>adapter to scan</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#scsi_scan_host\">scsi_scan_host</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#scsi_scan_type\">scsi_scan_type</a>, \"none\", 4) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_autopm_get_host\">scsi_autopm_get_host</a>(<a class=\"id\" href=\"#shost\">shost</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#scsi_prep_async_scan\">scsi_prep_async_scan</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_scsi_scan_host\">do_scsi_scan_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_host\">scsi_autopm_put_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#do_scan_async\">do_scan_async</a>, <a class=\"id\" href=\"#data\">data</a>, \"scsi_scan_%d\", <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_scan_async\">do_scan_async</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* scsi_autopm_put_host(shost) is called in do_scan_async() */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_scan_host\">scsi_scan_host</a>);", 
"", 
"void <a class=\"id\" href=\"#scsi_forget_host\">scsi_forget_host</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
" <a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#__devices\">__devices</a>, <a class=\"id\" href=\"#siblings\">siblings</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> == <a class=\"id\" href=\"#SDEV_DEL\">SDEV_DEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_remove_device\">__scsi_remove_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_get_host_dev - Create a scsi_device that points to the host adapter itself</span>", 
"<span class=\"comment\"> * @shost: Host that needs a scsi_device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: None assumed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     The scsi_device or NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Attach a single scsi_device to the Scsi_Host - this should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be made to look like a \"pseudo-device\" that points to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>HA itself.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note - this device is not accessible from any high-level</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>drivers (including generics), which is probably not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>optimal.  We can add hooks later to attach.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsi_get_host_dev\">scsi_get_host_dev</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_host_scan_allowed\">scsi_host_scan_allowed</a>(<a class=\"id\" href=\"#shost\">shost</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_alloc_target\">scsi_alloc_target</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#shost_gendev\">shost_gendev</a>, 0, <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#this_id\">this_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#starget\">starget</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#scsi_alloc_sdev\">scsi_alloc_sdev</a>(<a class=\"id\" href=\"#starget\">starget</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#borken\">borken</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_target_reap\">scsi_target_reap</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#scan_mutex\">scan_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_get_host_dev\">scsi_get_host_dev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_free_host_dev - Free a scsi_device that points to the host adapter itself</span>", 
"<span class=\"comment\"> * @sdev: Host device to be freed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: None assumed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_free_host_dev\">scsi_free_host_dev</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#id\">id</a> != <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#this_id\">this_id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__scsi_remove_device\">__scsi_remove_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_free_host_dev\">scsi_free_host_dev</a>);", 
"", 
];
xr_frag_insert('l/c5/7a6466845819d8ad8cd1946b4618f3ea79cf2c.xr', __xr_tmp);
