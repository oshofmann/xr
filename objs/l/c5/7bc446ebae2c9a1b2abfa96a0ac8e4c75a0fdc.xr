var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#get_debugreg\">get_debugreg</a>(<a class=\"id\" href=\"#d2\">d2</a>, 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEFAULT\">KERN_DEFAULT</a> \"DR0: %016lx DR1: %016lx DR2: %016lx\\n\", <a class=\"id\" href=\"#d0\">d0</a>, <a class=\"id\" href=\"#d1\">d1</a>, <a class=\"id\" href=\"#d2\">d2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_debugreg\">get_debugreg</a>(<a class=\"id\" href=\"#d3\">d3</a>, 3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_debugreg\">get_debugreg</a>(<a class=\"id\" href=\"#d6\">d6</a>, 6);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_debugreg\">get_debugreg</a>(<a class=\"id\" href=\"#d7\">d7</a>, 7);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEFAULT\">KERN_DEFAULT</a> \"DR3: %016lx DR6: %016lx DR7: %016lx\\n\", <a class=\"id\" href=\"#d3\">d3</a>, <a class=\"id\" href=\"#d6\">d6</a>, <a class=\"id\" href=\"#d7\">d7</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#release_thread\">release_thread</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#dead_task\">dead_task</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dead_task\">dead_task</a>-><a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dead_task\">dead_task</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#context\">context</a>.<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"WARNING: dead process %8s still has LDT? <%p/%d>\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dead_task\">dead_task</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dead_task\">dead_task</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#context\">context</a>.<a class=\"id\" href=\"#ldt\">ldt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dead_task\">dead_task</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#context\">context</a>.<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_32bit_tls\">set_32bit_tls</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#tls\">tls</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_desc\">user_desc</a> <a class=\"id\" href=\"#ud\">ud</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#base_addr\">base_addr</a> = <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#limit\">limit</a> = 0xfffff,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#seg_32bit\">seg_32bit</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#limit_in_pages\">limit_in_pages</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#useable\">useable</a> = 1,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#tls_array\">tls_array</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> += <a class=\"id\" href=\"#tls\">tls</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_ldt\">fill_ldt</a>(<a class=\"id\" href=\"#desc\">desc</a>, &amp;<a class=\"id\" href=\"#ud\">ud</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#read_32bit_tls\">read_32bit_tls</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#tls\">tls</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_desc_base\">get_desc_base</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#tls_array\">tls_array</a>[<a class=\"id\" href=\"#tls\">tls</a>]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This gets called before we allocate a new thread and copy</span>", 
"<span class=\"comment\"> * the current task into it.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#prepare_to_copy\">prepare_to_copy</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlazy_fpu\">unlazy_fpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#copy_thread\">copy_thread</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, unsigned long <a class=\"id\" href=\"#sp\">sp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#unused\">unused</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#childregs\">childregs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#me\">me</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#childregs\">childregs</a> = ((struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> + <a class=\"id\" href=\"#task_stack_page\">task_stack_page</a>(<a class=\"id\" href=\"#p\">p</a>))) - 1;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#childregs\">childregs</a> = *<a class=\"id\" href=\"#regs\">regs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#childregs\">childregs</a>-><a class=\"id\" href=\"#ax\">ax</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#childregs\">childregs</a>-><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#childregs\">childregs</a>-><a class=\"id\" href=\"#sp\">sp</a> = (unsigned long)<a class=\"id\" href=\"#childregs\">childregs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a> = (unsigned long) <a class=\"id\" href=\"#childregs\">childregs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp0\">sp0</a> = (unsigned long) (<a class=\"id\" href=\"#childregs\">childregs</a>+1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#usersp\">usersp</a> = <a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#usersp\">usersp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_FORK\">TIF_FORK</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#gs\">gs</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a> ? 0 : <a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a> ? 0 : <a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#es\">es</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#es\">es</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#ds\">ds</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>, 0, sizeof(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#me\">me</a>, <a class=\"id\" href=\"#TIF_IO_BITMAP\">TIF_IO_BITMAP</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#IO_BITMAP_BYTES\">IO_BITMAP_BYTES</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>, <a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IO_BITMAP_BYTES\">IO_BITMAP_BYTES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_IO_BITMAP\">TIF_IO_BITMAP</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set a new TLS for the child thread?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_SETTLS\">CLONE_SETTLS</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_set_thread_area\">do_set_thread_area</a>(<a class=\"id\" href=\"#p\">p</a>, -1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#user_desc\">user_desc</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#childregs\">childregs</a>-><a class=\"id\" href=\"#si\">si</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_arch_prctl\">do_arch_prctl</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ARCH_SET_FS\">ARCH_SET_FS</a>, <a class=\"id\" href=\"#childregs\">childregs</a>-><a class=\"id\" href=\"#r8\">r8</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#start_thread_common\">start_thread_common</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#new_ip\">new_ip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#new_sp\">new_sp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#_cs\">_cs</a>, unsigned int <a class=\"id\" href=\"#_ss\">_ss</a>, unsigned int <a class=\"id\" href=\"#_ds\">_ds</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#fs\">fs</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#es\">es</a>, <a class=\"id\" href=\"#_ds\">_ds</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#_ds\">_ds</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_gs_index\">load_gs_index</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#new_ip\">new_ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#new_sp\">new_sp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_write\">percpu_write</a>(<a class=\"id\" href=\"#old_rsp\">old_rsp</a>, <a class=\"id\" href=\"#new_sp\">new_sp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#_cs\">_cs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ss\">ss</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#_ss\">_ss</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#USER_DS\">USER_DS</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Free the old FP and other extended state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_thread_xstate\">free_thread_xstate</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#start_thread\">start_thread</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#new_ip\">new_ip</a>, unsigned long <a class=\"id\" href=\"#new_sp\">new_sp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_thread_common\">start_thread_common</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#new_ip\">new_ip</a>, <a class=\"id\" href=\"#new_sp\">new_sp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__USER_CS\">__USER_CS</a>, <a class=\"id\" href=\"#__USER_DS\">__USER_DS</a>, 0);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"void <a class=\"id\" href=\"#start_thread_ia32\">start_thread_ia32</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#new_ip\">new_ip</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#new_sp\">new_sp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_thread_common\">start_thread_common</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#new_ip\">new_ip</a>, <a class=\"id\" href=\"#new_sp\">new_sp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__USER32_CS\">__USER32_CS</a>, <a class=\"id\" href=\"#__USER32_DS\">__USER32_DS</a>, <a class=\"id\" href=\"#__USER32_DS\">__USER32_DS</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>switch_to(x,y) should switch tasks from x to y.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This could still be optimized:</span>", 
"<span class=\"comment\"> * - fold all the options into a flag word and test it with a single test.</span>", 
"<span class=\"comment\"> * - could test fs/gs bitsliced</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Kprobes not supported here. Set the probe on schedule instead.</span>", 
"<span class=\"comment\"> * Function graph tracer not supported too.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__notrace_funcgraph\">__notrace_funcgraph</a> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *", 
"<a class=\"id\" href=\"#__switch_to\">__switch_to</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev_p\">prev_p</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next_p\">next_p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#prev_p\">prev_p</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#next\">next</a> = &amp;<a class=\"id\" href=\"#next_p\">next_p</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a> *<a class=\"id\" href=\"#tss\">tss</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#init_tss\">init_tss</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#fsindex\">fsindex</a>, <a class=\"id\" href=\"#gsindex\">gsindex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#preload_fpu\">preload_fpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the task has used fpu the last 5 timeslices, just do a full</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * restore of the math state immediately to avoid the trap; the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chances of needing FPU soon are obviously high now</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preload_fpu\">preload_fpu</a> = <a class=\"id\" href=\"#tsk_used_math\">tsk_used_math</a>(<a class=\"id\" href=\"#next_p\">next_p</a>) && <a class=\"id\" href=\"#next_p\">next_p</a>-><a class=\"id\" href=\"#fpu_counter\">fpu_counter</a> &gt; 5;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we're going to use this soon, after a few expensive things */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preload_fpu\">preload_fpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#fpu\">fpu</a>.<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reload esp0, LDT and the page table pointer:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_sp0\">load_sp0</a>(<a class=\"id\" href=\"#tss\">tss</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Switch DS and ES.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This won't pick up thread selector changes, but I guess that is ok.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#es\">es</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#es\">es</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#es\">es</a> | <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#es\">es</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#es\">es</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#es\">es</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#ds\">ds</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ds\">ds</a> | <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#ds\">ds</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ds\">ds</a>);", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We must save %fs and %gs before load_TLS() because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * %fs and %gs may be cleared by load_TLS().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (e.g. xen_load_tls())</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#fsindex\">fsindex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#gs\">gs</a>, <a class=\"id\" href=\"#gsindex\">gsindex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_TLS\">load_TLS</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must be after DS reload */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlazy_fpu\">unlazy_fpu</a>(<a class=\"id\" href=\"#prev_p\">prev_p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure cpu is ready for new context */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preload_fpu\">preload_fpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clts\">clts</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Leave lazy mode, flushing any hypercalls made here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This must be done before restoring TLS segments so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the GDT and LDT are properly updated, and must be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * done before math_state_restore, so the TS bit is up</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to date.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_end_context_switch\">arch_end_context_switch</a>(<a class=\"id\" href=\"#next_p\">next_p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Switch FS and GS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Segment register != 0 always requires a reload.  Also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reload when it has changed.  When prev process used 64bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * base always reload to avoid an information leak.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#fsindex\">fsindex</a> | <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#fsindex\">fsindex</a> | <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#fs\">fs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#fsindex\">fsindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check if the user used a selector != 0; if yes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  clear 64bit base, since overloaded base is always</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  mapped to the Null selector</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fsindex\">fsindex</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#fs\">fs</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* when next process has a 64bit base use it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#fs\">fs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_FS_BASE\">MSR_FS_BASE</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#fs\">fs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#fsindex\">fsindex</a> = <a class=\"id\" href=\"#fsindex\">fsindex</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#gsindex\">gsindex</a> | <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#gsindex\">gsindex</a> | <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#gs\">gs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_gs_index\">load_gs_index</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#gsindex\">gsindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gsindex\">gsindex</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#gs\">gs</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#gs\">gs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_KERNEL_GS_BASE\">MSR_KERNEL_GS_BASE</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#gs\">gs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#gsindex\">gsindex</a> = <a class=\"id\" href=\"#gsindex\">gsindex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Switch the PDA and FPU contexts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#usersp\">usersp</a> = <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#old_rsp\">old_rsp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_write\">percpu_write</a>(<a class=\"id\" href=\"#old_rsp\">old_rsp</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#usersp\">usersp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_write\">percpu_write</a>(<a class=\"id\" href=\"#current_task\">current_task</a>, <a class=\"id\" href=\"#next_p\">next_p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_write\">percpu_write</a>(<a class=\"id\" href=\"#kernel_stack\">kernel_stack</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  (unsigned long)<a class=\"id\" href=\"#task_stack_page\">task_stack_page</a>(<a class=\"id\" href=\"#next_p\">next_p</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> - <a class=\"id\" href=\"#KERNEL_STACK_OFFSET\">KERNEL_STACK_OFFSET</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now maybe reload the debug registers and handle I/O bitmaps</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#next_p\">next_p</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#_TIF_WORK_CTXSW_NEXT\">_TIF_WORK_CTXSW_NEXT</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#prev_p\">prev_p</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#_TIF_WORK_CTXSW_PREV\">_TIF_WORK_CTXSW_PREV</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__switch_to_xtra\">__switch_to_xtra</a>(<a class=\"id\" href=\"#prev_p\">prev_p</a>, <a class=\"id\" href=\"#next_p\">next_p</a>, <a class=\"id\" href=\"#tss\">tss</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Preload the FPU context, now that we've determined that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task is likely to be using it. </span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preload_fpu\">preload_fpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__math_state_restore\">__math_state_restore</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prev_p\">prev_p</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_personality_64bit\">set_personality_64bit</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* inherit personality from parent */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure to be in 64bit mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_thread_flag\">clear_thread_flag</a>(<a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* TBD: overwrites user setup. Should have two bits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   But 64bit processes have always behaved this way,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   so it's not too bad. The main problem is just that</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   32bit childs are affected again. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &= ~<a class=\"id\" href=\"#READ_IMPLIES_EXEC\">READ_IMPLIES_EXEC</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_personality_ia32\">set_personality_ia32</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* inherit personality from parent */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure to be in 32bit mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> |= <a class=\"id\" href=\"#force_personality32\">force_personality32</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prepare the first \"return\" to user space */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_COMPAT\">TS_COMPAT</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#get_wchan\">get_wchan</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack\">stack</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#fp\">fp</a>, <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a> || <a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#current\">current</a> || <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a> = (unsigned long)<a class=\"id\" href=\"#task_stack_page\">task_stack_page</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a> &lt; <a class=\"id\" href=\"#stack\">stack</a> || <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a> >= <a class=\"id\" href=\"#stack\">stack</a>+<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = *(<a class=\"id\" href=\"#u64\">u64</a> *)(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fp\">fp</a> &lt; (unsigned long)<a class=\"id\" href=\"#stack\">stack</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#fp\">fp</a> >= (unsigned long)<a class=\"id\" href=\"#stack\">stack</a>+<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a> = *(<a class=\"id\" href=\"#u64\">u64</a> *)(<a class=\"id\" href=\"#fp\">fp</a>+8);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_sched_functions\">in_sched_functions</a>(<a class=\"id\" href=\"#ip\">ip</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = *(<a class=\"id\" href=\"#u64\">u64</a> *)<a class=\"id\" href=\"#fp\">fp</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#count\">count</a>++ &lt; 16);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"long <a class=\"id\" href=\"#do_arch_prctl\">do_arch_prctl</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, int <a class=\"id\" href=\"#code\">code</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#doit\">doit</a> = <a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#code\">code</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARCH_SET_GS\">ARCH_SET_GS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#TASK_SIZE_OF\">TASK_SIZE_OF</a>(<a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* handle small bases via the GDT because that's faster to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   switch. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> <= 0xffffffff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_32bit_tls\">set_32bit_tls</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#GS_TLS\">GS_TLS</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#doit\">doit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_TLS\">load_TLS</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_gs_index\">load_gs_index</a>(<a class=\"id\" href=\"#GS_TLS_SEL\">GS_TLS_SEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a> = <a class=\"id\" href=\"#GS_TLS_SEL\">GS_TLS_SEL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#doit\">doit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_gs_index\">load_gs_index</a>(0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#checking_wrmsrl\">checking_wrmsrl</a>(<a class=\"id\" href=\"#MSR_KERNEL_GS_BASE\">MSR_KERNEL_GS_BASE</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARCH_SET_FS\">ARCH_SET_FS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not strictly needed for fs, but do it for symmetry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   with gs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#TASK_SIZE_OF\">TASK_SIZE_OF</a>(<a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* handle small bases via the GDT because that's faster to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   switch. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> <= 0xffffffff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_32bit_tls\">set_32bit_tls</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#FS_TLS\">FS_TLS</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#doit\">doit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_TLS\">load_TLS</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#FS_TLS_SEL\">FS_TLS_SEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a> = <a class=\"id\" href=\"#FS_TLS_SEL\">FS_TLS_SEL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#doit\">doit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set the selector to 0 to not confuse</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   __switch_to */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#fs\">fs</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#checking_wrmsrl\">checking_wrmsrl</a>(<a class=\"id\" href=\"#MSR_FS_BASE\">MSR_FS_BASE</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARCH_GET_FS\">ARCH_GET_FS</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a> == <a class=\"id\" href=\"#FS_TLS_SEL\">FS_TLS_SEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#read_32bit_tls\">read_32bit_tls</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#FS_TLS\">FS_TLS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#doit\">doit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_FS_BASE\">MSR_FS_BASE</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#base\">base</a>, (unsigned long <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARCH_GET_GS\">ARCH_GET_GS</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#gsindex\">gsindex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a> == <a class=\"id\" href=\"#GS_TLS_SEL\">GS_TLS_SEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#read_32bit_tls\">read_32bit_tls</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#GS_TLS\">GS_TLS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#doit\">doit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#gs\">gs</a>, <a class=\"id\" href=\"#gsindex\">gsindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gsindex\">gsindex</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_KERNEL_GS_BASE\">MSR_KERNEL_GS_BASE</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#base\">base</a>, (unsigned long <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"long <a class=\"id\" href=\"#sys_arch_prctl\">sys_arch_prctl</a>(int <a class=\"id\" href=\"#code\">code</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_arch_prctl\">do_arch_prctl</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#KSTK_ESP\">KSTK_ESP</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>)) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#sp\">sp</a>) : ((<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#usersp\">usersp</a>);", 
"}", 
];
xr_frag_insert('l/c5/7bc446ebae2c9a1b2abfa96a0ac8e4c75a0fdc.xr', __xr_tmp);
