var __xr_tmp = [
"<span class=\"ts\"/><span class=\"comment\">/* Support for BUG */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#num_bugs\">num_bugs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#bug_list\">bug_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a> *<a class=\"id\" href=\"#bug_table\">bug_table</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KALLSYMS\">CONFIG_KALLSYMS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We keep the symbol and string tables for kallsyms.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The core_* fields below are temporary, loader-only (they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could really be discarded after module init).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a> *<a class=\"id\" href=\"#symtab\">symtab</a>, *<a class=\"id\" href=\"#core_symtab\">core_symtab</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_symtab\">num_symtab</a>, <a class=\"id\" href=\"#core_num_syms\">core_num_syms</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#strtab\">strtab</a>, *<a class=\"id\" href=\"#core_strtab\">core_strtab</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Section attributes */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_sect_attrs\">module_sect_attrs</a> *<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Notes attributes */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_notes_attrs\">module_notes_attrs</a> *<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Per-cpu data. */</span>", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#percpu\">percpu</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#percpu_size\">percpu_size</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The command line arguments (may be mangled).  People like</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   keeping pointers to this stuff */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#args\">args</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACEPOINTS\">CONFIG_TRACEPOINTS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> *<a class=\"id\" href=\"#tracepoints\">tracepoints</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_tracepoints\">num_tracepoints</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"<span class=\"ts\"/>const char **<a class=\"id\" href=\"#trace_bprintk_fmt_start\">trace_bprintk_fmt_start</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_trace_bprintk_fmt\">num_trace_bprintk_fmt</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EVENT_TRACING\">CONFIG_EVENT_TRACING</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#trace_events\">trace_events</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_trace_events\">num_trace_events</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FTRACE_MCOUNT_RECORD\">CONFIG_FTRACE_MCOUNT_RECORD</a>", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#ftrace_callsites\">ftrace_callsites</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_ftrace_callsites\">num_ftrace_callsites</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_UNLOAD\">CONFIG_MODULE_UNLOAD</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* What modules depend on me? */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#source_list\">source_list</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* What modules do I depend on? */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#target_list\">target_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Who is waiting for us to be unloaded */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#waiter\">waiter</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Destruction function. */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#exit\">exit</a>)(void);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_ref\">module_ref</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#incs\">incs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#decs\">decs</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#refptr\">refptr</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CONSTRUCTORS\">CONFIG_CONSTRUCTORS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Constructor functions. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctor_fn_t\">ctor_fn_t</a> *<a class=\"id\" href=\"#ctors\">ctors</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_ctors\">num_ctors</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#MODULE_ARCH_INIT\">MODULE_ARCH_INIT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_ARCH_INIT\">MODULE_ARCH_INIT</a> {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#module_mutex\">module_mutex</a>;", 
"", 
"<span class=\"comment\">/* FIXME: It'd be nice to isolate modules during init, too, so they</span>", 
"<span class=\"comment\">   aren't used before they (may) fail.  But presently too much code</span>", 
"<span class=\"comment\">   (IDE &amp; SCSI) require entry into the module during init.*/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#module_is_live\">module_is_live</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#__module_text_address\">__module_text_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#__module_address\">__module_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_address\">is_module_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_percpu_address\">is_module_percpu_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_text_address\">is_module_text_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#within_module_core\">within_module_core</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a> <= <a class=\"id\" href=\"#addr\">addr</a> &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#addr\">addr</a> &lt; (unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#within_module_init\">within_module_init</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a> <= <a class=\"id\" href=\"#addr\">addr</a> &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#addr\">addr</a> &lt; (unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Search for module by name: must hold module_mutex. */</span>", 
"struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#find_module\">find_module</a>(const char *<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"struct <a class=\"id\" href=\"#symsearch\">symsearch</a> {", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#start\">start</a>, *<a class=\"id\" href=\"#stop\">stop</a>;", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#crcs\">crcs</a>;", 
"<span class=\"ts\"/>enum {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NOT_GPL_ONLY\">NOT_GPL_ONLY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GPL_ONLY\">GPL_ONLY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WILL_BE_GPL_ONLY\">WILL_BE_GPL_ONLY</a>,", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#licence\">licence</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#unused\">unused</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Search for an exported symbol by name. */</span>", 
"const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#find_symbol\">find_symbol</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> **<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long **<a class=\"id\" href=\"#crc\">crc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#gplok\">gplok</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#warn\">warn</a>);", 
"", 
"<span class=\"comment\">/* Walk the exported symbol table */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#each_symbol\">each_symbol</a>(<a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#fn\">fn</a>)(const struct <a class=\"id\" href=\"#symsearch\">symsearch</a> *<a class=\"id\" href=\"#arr\">arr</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#symnum\">symnum</a>, void *<a class=\"id\" href=\"#data\">data</a>), void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"comment\">/* Returns 0 and fills in value, defined and namebuf, or -ERANGE if</span>", 
"<span class=\"comment\">   symnum out of range. */</span>", 
"int <a class=\"id\" href=\"#module_get_kallsym\">module_get_kallsym</a>(unsigned int <a class=\"id\" href=\"#symnum\">symnum</a>, unsigned long *<a class=\"id\" href=\"#value\">value</a>, char *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>, char *<a class=\"id\" href=\"#module_name\">module_name</a>, int *<a class=\"id\" href=\"#exported\">exported</a>);", 
"", 
"<span class=\"comment\">/* Look for this name: can be of form module:name. */</span>", 
"unsigned long <a class=\"id\" href=\"#module_kallsyms_lookup_name\">module_kallsyms_lookup_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"int <a class=\"id\" href=\"#module_kallsyms_on_each_symbol\">module_kallsyms_on_each_symbol</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *, const char *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#module\">module</a> *, unsigned long),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"extern void <a class=\"id\" href=\"#__module_put_and_exit\">__module_put_and_exit</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, long <a class=\"id\" href=\"#code\">code</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#noreturn\">noreturn</a>));", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#module_put_and_exit\">module_put_and_exit</a>(<a class=\"id\" href=\"#code\">code</a>) <a class=\"id\" href=\"#__module_put_and_exit\">__module_put_and_exit</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, <a class=\"id\" href=\"#code\">code</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_UNLOAD\">CONFIG_MODULE_UNLOAD</a>", 
"unsigned int <a class=\"id\" href=\"#module_refcount\">module_refcount</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>);", 
"void <a class=\"id\" href=\"#__symbol_put\">__symbol_put</a>(const char *<a class=\"id\" href=\"#symbol\">symbol</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#symbol_put\">symbol_put</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__symbol_put\">__symbol_put</a>(<a class=\"id\" href=\"#MODULE_SYMBOL_PREFIX\">MODULE_SYMBOL_PREFIX</a> #<a class=\"id\" href=\"#x\">x</a>)", 
"void <a class=\"id\" href=\"#symbol_put_addr\">symbol_put_addr</a>(void *<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"comment\">/* Sometimes we know we already have a refcount, and it's easier not</span>", 
"<span class=\"comment\">   to handle the error case (which only happens with rmmod --wait). */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__module_get\">__module_get</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#module\">module</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#module\">module</a>-><a class=\"id\" href=\"#refptr\">refptr</a>-><a class=\"id\" href=\"#incs\">incs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_module_get\">trace_module_get</a>(<a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#try_module_get\">try_module_get</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#module\">module</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#module_is_live\">module_is_live</a>(<a class=\"id\" href=\"#module\">module</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#module\">module</a>-><a class=\"id\" href=\"#refptr\">refptr</a>-><a class=\"id\" href=\"#incs\">incs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_module_get\">trace_module_get</a>(<a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#module_put\">module_put</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>);", 
"", 
"#else <span class=\"comment\">/*!CONFIG_MODULE_UNLOAD*/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#try_module_get\">try_module_get</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#module\">module</a> || <a class=\"id\" href=\"#module_is_live\">module_is_live</a>(<a class=\"id\" href=\"#module\">module</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#module_put\">module_put</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__module_get\">__module_get</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#symbol_put\">symbol_put</a>(<a class=\"id\" href=\"#x\">x</a>) do { } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#symbol_put_addr\">symbol_put_addr</a>(<a class=\"id\" href=\"#p\">p</a>) do { } while(0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MODULE_UNLOAD */</span>", 
"int <a class=\"id\" href=\"#use_module\">use_module</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#b\">b</a>);", 
"", 
"<span class=\"comment\">/* This is a #define so the string doesn't get put in every .o file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#module_name\">module_name</a>(<a class=\"id\" href=\"#mod\">mod</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#__mod\">__mod</a> = (<a class=\"id\" href=\"#mod\">mod</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod\">__mod</a> ? <a class=\"id\" href=\"#__mod\">__mod</a>-><a class=\"id\" href=\"#name\">name</a> : \"kernel\";<span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"comment\">/* For kallsyms to ask for address resolution.  namebuf should be at</span>", 
"<span class=\"comment\"> * least KSYM_NAME_LEN long: a pointer to namebuf is returned if</span>", 
"<span class=\"comment\"> * found, otherwise NULL. */</span>", 
"const char *<a class=\"id\" href=\"#module_address_lookup\">module_address_lookup</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#symbolsize\">symbolsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char **<a class=\"id\" href=\"#modname\">modname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char *<a class=\"id\" href=\"#namebuf\">namebuf</a>);", 
"int <a class=\"id\" href=\"#lookup_module_symbol_name\">lookup_module_symbol_name</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, char *<a class=\"id\" href=\"#symname\">symname</a>);", 
"int <a class=\"id\" href=\"#lookup_module_symbol_attrs\">lookup_module_symbol_attrs</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long *<a class=\"id\" href=\"#size\">size</a>, unsigned long *<a class=\"id\" href=\"#offset\">offset</a>, char *<a class=\"id\" href=\"#modname\">modname</a>, char *<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"comment\">/* For extable.c to search modules' exception tables. */</span>", 
"const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#search_module_extables\">search_module_extables</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"int <a class=\"id\" href=\"#register_module_notifier\">register_module_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> * <a class=\"id\" href=\"#nb\">nb</a>);", 
"int <a class=\"id\" href=\"#unregister_module_notifier\">unregister_module_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> * <a class=\"id\" href=\"#nb\">nb</a>);", 
"", 
"extern void <a class=\"id\" href=\"#print_modules\">print_modules</a>(void);", 
"", 
"extern void <a class=\"id\" href=\"#module_update_tracepoints\">module_update_tracepoints</a>(void);", 
"extern int <a class=\"id\" href=\"#module_get_iter_tracepoints\">module_get_iter_tracepoints</a>(struct <a class=\"id\" href=\"#tracepoint_iter\">tracepoint_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"#else <span class=\"comment\">/* !CONFIG_MODULES... */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sym\">sym</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_SYMBOL_GPL_FUTURE\">EXPORT_SYMBOL_GPL_FUTURE</a>(<a class=\"id\" href=\"#sym\">sym</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_UNUSED_SYMBOL\">EXPORT_UNUSED_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_UNUSED_SYMBOL_GPL\">EXPORT_UNUSED_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sym\">sym</a>)", 
"", 
"<span class=\"comment\">/* Given an address, look for it in the exception tables. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *", 
"<a class=\"id\" href=\"#search_module_extables\">search_module_extables</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#__module_address\">__module_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#__module_text_address\">__module_text_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_address\">is_module_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_percpu_address\">is_module_percpu_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_text_address\">is_module_text_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
];
xr_frag_insert('l/c5/9cf8553af02937b4229ca01a8a7fd7ba878a97.xr', __xr_tmp);
