var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>These ioctl calls:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>- require superuser power.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>- require strict serialization.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>- do not return a value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFFLAGS\">SIOCSIFFLAGS</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFMETRIC\">SIOCSIFMETRIC</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFMTU\">SIOCSIFMTU</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFMAP\">SIOCSIFMAP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFHWADDR\">SIOCSIFHWADDR</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFSLAVE\">SIOCSIFSLAVE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCADDMULTI\">SIOCADDMULTI</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCDELMULTI\">SIOCDELMULTI</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFHWBROADCAST\">SIOCSIFHWBROADCAST</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFTXQLEN\">SIOCSIFTXQLEN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSMIIREG\">SIOCSMIIREG</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBONDENSLAVE\">SIOCBONDENSLAVE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBONDRELEASE\">SIOCBONDRELEASE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBONDSETHWADDR\">SIOCBONDSETHWADDR</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBONDCHANGEACTIVE\">SIOCBONDCHANGEACTIVE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBRADDIF\">SIOCBRADDIF</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBRDELIF\">SIOCBRDELIF</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSHWTSTAMP\">SIOCSHWTSTAMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_NET_ADMIN\">CAP_NET_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBONDSLAVEINFOQUERY\">SIOCBONDSLAVEINFOQUERY</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBONDINFOQUERY\">SIOCBONDINFOQUERY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_load\">dev_load</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ifr\">ifr</a>.<a class=\"id\" href=\"#ifr_name\">ifr_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dev_ifsioc\">dev_ifsioc</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#ifr\">ifr</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCGIFMEM\">SIOCGIFMEM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the per device memory space. We can add this but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * currently do not support it */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFMEM\">SIOCSIFMEM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set the per device memory buffer space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Not applicable in our case */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFLINK\">SIOCSIFLINK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Unknown or private ioctl.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#SIOCWANDEV\">SIOCWANDEV</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#cmd\">cmd</a> >= <a class=\"id\" href=\"#SIOCDEVPRIVATE\">SIOCDEVPRIVATE</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#cmd\">cmd</a> <= <a class=\"id\" href=\"#SIOCDEVPRIVATE\">SIOCDEVPRIVATE</a> + 15)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_load\">dev_load</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ifr\">ifr</a>.<a class=\"id\" href=\"#ifr_name\">ifr_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dev_ifsioc\">dev_ifsioc</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#ifr\">ifr</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#ifr\">ifr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#ifreq\">ifreq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Take care of Wireless Extensions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> >= <a class=\"id\" href=\"#SIOCIWFIRST\">SIOCIWFIRST</a> && <a class=\"id\" href=\"#cmd\">cmd</a> <= <a class=\"id\" href=\"#SIOCIWLAST\">SIOCIWLAST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#wext_handle_ioctl\">wext_handle_ioctl</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#ifr\">ifr</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_new_index<span class=\"ts\"/>-<span class=\"ts\"/>allocate an ifindex</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns a suitable unique value for a new device interface</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>number.  The caller must hold the rtnl semaphore or the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_base_lock to be sure it remains unique.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dev_new_index\">dev_new_index</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#ifindex\">ifindex</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ifindex\">ifindex</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__dev_get_by_index\">__dev_get_by_index</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ifindex\">ifindex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Delayed registration/unregisteration */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#net_todo_list\">net_todo_list</a>);", 
"", 
"static void <a class=\"id\" href=\"#net_set_todo\">net_set_todo</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#todo_list\">todo_list</a>, &amp;<a class=\"id\" href=\"#net_todo_list\">net_todo_list</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rollback_registered_many\">rollback_registered_many</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dev_boot_phase\">dev_boot_phase</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#unreg_list\">unreg_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Some devices call without registering</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for initialization unwind. Remove those</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * devices and proceed with the remaining.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> == <a class=\"id\" href=\"#NETREG_UNINITIALIZED\">NETREG_UNINITIALIZED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"unregister_netdevice: device %s/%p never \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"was registered\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#unreg_list\">unreg_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> != <a class=\"id\" href=\"#NETREG_REGISTERED\">NETREG_REGISTERED</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If device is running, close it first. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_close\">dev_close</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* And unlink it from device chain. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlist_netdevice\">unlist_netdevice</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> = <a class=\"id\" href=\"#NETREG_UNREGISTERING\">NETREG_UNREGISTERING</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#unreg_list\">unreg_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Shutdown queueing discipline. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_shutdown\">dev_shutdown</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Notify protocols, that we are about to destroy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   this device. They should clean all the things.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_UNREGISTER\">NETDEV_UNREGISTER</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rtnl_link_ops\">rtnl_link_ops</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rtnl_link_state\">rtnl_link_state</a> == <a class=\"id\" href=\"#RTNL_LINK_INITIALIZED\">RTNL_LINK_INITIALIZED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtmsg_ifinfo\">rtmsg_ifinfo</a>(<a class=\"id\" href=\"#RTM_DELLINK\">RTM_DELLINK</a>, <a class=\"id\" href=\"#dev\">dev</a>, ~0U);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Flush the unicast and multicast chains</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_uc_flush\">dev_uc_flush</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_mc_flush\">dev_mc_flush</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>-><a class=\"id\" href=\"#ndo_uninit\">ndo_uninit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>-><a class=\"id\" href=\"#ndo_uninit\">ndo_uninit</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Notifier chain MUST detach us from master device. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#master\">master</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove entries from kobject tree */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netdev_unregister_kobject\">netdev_unregister_kobject</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Process any work delayed until the end of the batch */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a>, <a class=\"id\" href=\"#unreg_list\">unreg_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_UNREGISTER_BATCH\">NETDEV_UNREGISTER_BATCH</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#unreg_list\">unreg_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_put\">dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rollback_registered\">rollback_registered</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#single\">single</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#unreg_list\">unreg_list</a>, &amp;<a class=\"id\" href=\"#single\">single</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rollback_registered_many\">rollback_registered_many</a>(&amp;<a class=\"id\" href=\"#single\">single</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__netdev_init_queue_locks_one\">__netdev_init_queue_locks_one</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#dev_queue\">dev_queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#_unused\">_unused</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#dev_queue\">dev_queue</a>-><a class=\"id\" href=\"#_xmit_lock\">_xmit_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_set_xmit_lockdep_class\">netdev_set_xmit_lockdep_class</a>(&amp;<a class=\"id\" href=\"#dev_queue\">dev_queue</a>-><a class=\"id\" href=\"#_xmit_lock\">_xmit_lock</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_queue\">dev_queue</a>-><a class=\"id\" href=\"#xmit_lock_owner\">xmit_lock_owner</a> = -1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#netdev_init_queue_locks\">netdev_init_queue_locks</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_for_each_tx_queue\">netdev_for_each_tx_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#__netdev_init_queue_locks_one\">__netdev_init_queue_locks_one</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__netdev_init_queue_locks_one\">__netdev_init_queue_locks_one</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_queue\">rx_queue</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#netdev_fix_features\">netdev_fix_features</a>(unsigned long <a class=\"id\" href=\"#features\">features</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Fix illegal SG+CSUM combinations. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a>) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_ALL_CSUM\">NETIF_F_ALL_CSUM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"%s: Dropping NETIF_F_SG since no \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"checksum feature.\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> &= ~<a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* TSO requires that SG is present as well. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_TSO\">NETIF_F_TSO</a>) && !(<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"%s: Dropping NETIF_F_TSO since no \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"SG feature.\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> &= ~<a class=\"id\" href=\"#NETIF_F_TSO\">NETIF_F_TSO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_UFO\">NETIF_F_UFO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_GEN_CSUM\">NETIF_F_GEN_CSUM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: Dropping NETIF_F_UFO \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"since no NETIF_F_HW_CSUM feature.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> &= ~<a class=\"id\" href=\"#NETIF_F_UFO\">NETIF_F_UFO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: Dropping NETIF_F_UFO \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"since no NETIF_F_SG feature.\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> &= ~<a class=\"id\" href=\"#NETIF_F_UFO\">NETIF_F_UFO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#features\">features</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netdev_fix_features\">netdev_fix_features</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netif_stacked_transfer_operstate -<span class=\"ts\"/>transfer operstate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rootdev: the root or lower level device to transfer state from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: the device to transfer operstate to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Transfer operational state from root to device. This is normally</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called when a stacking relationship exists between the root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device and the device(a leaf device).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netif_stacked_transfer_operstate\">netif_stacked_transfer_operstate</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#rootdev\">rootdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rootdev\">rootdev</a>-><a class=\"id\" href=\"#operstate\">operstate</a> == <a class=\"id\" href=\"#IF_OPER_DORMANT\">IF_OPER_DORMANT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_dormant_on\">netif_dormant_on</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_dormant_off\">netif_dormant_off</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netif_carrier_ok\">netif_carrier_ok</a>(<a class=\"id\" href=\"#rootdev\">rootdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#netif_carrier_ok\">netif_carrier_ok</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_carrier_on\">netif_carrier_on</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#netif_carrier_ok\">netif_carrier_ok</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_carrier_off\">netif_carrier_off</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netif_stacked_transfer_operstate\">netif_stacked_transfer_operstate</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_netdevice<span class=\"ts\"/>- register a network device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Take a completed network device structure and add it to the kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interfaces. A %NETDEV_REGISTER message is sent to the netdev notifier</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>chain. 0 is returned on success. A negative errno code is returned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on a failure to set up the device, or if the name is a duplicate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Callers must hold the rtnl semaphore. You may want</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_netdev() instead of this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>BUGS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The locking appears insufficient to guarantee two parallel registers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will not get the same name.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#register_netdevice\">register_netdevice</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dev_boot_phase\">dev_boot_phase</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* When net_device's are persistent, this will be fatal. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> != <a class=\"id\" href=\"#NETREG_UNINITIALIZED\">NETREG_UNINITIALIZED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#net\">net</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_list_lock\">addr_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_set_addr_lockdep_class\">netdev_set_addr_lockdep_class</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_init_queue_locks\">netdev_init_queue_locks</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#iflink\">iflink</a> = -1;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_rx_queues\">num_rx_queues</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Allocate a single RX queue if driver never called</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * alloc_netdev_mq</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_rx\">_rx</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#netdev_rx_queue\">netdev_rx_queue</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_rx\">_rx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_rx\">_rx</a>-><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_rx\">_rx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_rx\">_rx</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_rx_queues\">num_rx_queues</a> = 1;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Init, if this function is available */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>-><a class=\"id\" href=\"#ndo_init\">ndo_init</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>-><a class=\"id\" href=\"#ndo_init\">ndo_init</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dev_get_valid_name\">dev_get_valid_name</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_uninit\">err_uninit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a> = <a class=\"id\" href=\"#dev_new_index\">dev_new_index</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#iflink\">iflink</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#iflink\">iflink</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fix illegal checksum combinations */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_HW_CSUM\">NETIF_F_HW_CSUM</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; (<a class=\"id\" href=\"#NETIF_F_IP_CSUM\">NETIF_F_IP_CSUM</a>|<a class=\"id\" href=\"#NETIF_F_IPV6_CSUM\">NETIF_F_IPV6_CSUM</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"%s: mixed HW and IP checksum settings.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &= ~(<a class=\"id\" href=\"#NETIF_F_IP_CSUM\">NETIF_F_IP_CSUM</a>|<a class=\"id\" href=\"#NETIF_F_IPV6_CSUM\">NETIF_F_IPV6_CSUM</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_NO_CSUM\">NETIF_F_NO_CSUM</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; (<a class=\"id\" href=\"#NETIF_F_HW_CSUM\">NETIF_F_HW_CSUM</a>|<a class=\"id\" href=\"#NETIF_F_IP_CSUM\">NETIF_F_IP_CSUM</a>|<a class=\"id\" href=\"#NETIF_F_IPV6_CSUM\">NETIF_F_IPV6_CSUM</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"%s: mixed no checksumming and other settings.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &= ~(<a class=\"id\" href=\"#NETIF_F_IP_CSUM\">NETIF_F_IP_CSUM</a>|<a class=\"id\" href=\"#NETIF_F_IPV6_CSUM\">NETIF_F_IPV6_CSUM</a>|<a class=\"id\" href=\"#NETIF_F_HW_CSUM\">NETIF_F_HW_CSUM</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> = <a class=\"id\" href=\"#netdev_fix_features\">netdev_fix_features</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enable software GSO if SG is supported. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#NETIF_F_GSO\">NETIF_F_GSO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_POST_INIT\">NETDEV_POST_INIT</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_to_errno\">notifier_to_errno</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_uninit\">err_uninit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#netdev_register_kobject\">netdev_register_kobject</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_uninit\">err_uninit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> = <a class=\"id\" href=\"#NETREG_REGISTERED\">NETREG_REGISTERED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Default initial state at registry is that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>device is present.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_PRESENT\">__LINK_STATE_PRESENT</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_init_scheduler\">dev_init_scheduler</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_hold\">dev_hold</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_netdevice\">list_netdevice</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Notify protocols, that a new device appeared. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_REGISTER\">NETDEV_REGISTER</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_to_errno\">notifier_to_errno</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rollback_registered\">rollback_registered</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> = <a class=\"id\" href=\"#NETREG_UNREGISTERED\">NETREG_UNREGISTERED</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Prevent userspace races by waiting until the network</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>device is fully setup before sending notifications.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rtnl_link_ops\">rtnl_link_ops</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rtnl_link_state\">rtnl_link_state</a> == <a class=\"id\" href=\"#RTNL_LINK_INITIALIZED\">RTNL_LINK_INITIALIZED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtmsg_ifinfo\">rtmsg_ifinfo</a>(<a class=\"id\" href=\"#RTM_NEWLINK\">RTM_NEWLINK</a>, <a class=\"id\" href=\"#dev\">dev</a>, ~0U);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#err_uninit\">err_uninit</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>-><a class=\"id\" href=\"#ndo_uninit\">ndo_uninit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>-><a class=\"id\" href=\"#ndo_uninit\">ndo_uninit</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_netdevice\">register_netdevice</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>init_dummy_netdev<span class=\"ts\"/>- init a dummy network device for NAPI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to init</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This takes a network device structure and initialize the minimum</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>amount of fields so it can be used to schedule NAPI polls without</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>registering a full blown interface. This is to be used by drivers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that need to tie several hardware interfaces to a single NAPI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>poll scheduler due to HW limitations.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#init_dummy_netdev\">init_dummy_netdev</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear everything. Note we don't initialize spinlocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are they aren't supposed to be taken by any of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NAPI code and this dummy netdev is supposed to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only ever used for NAPI polls</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0, sizeof(struct <a class=\"id\" href=\"#net_device\">net_device</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure we BUG if trying to hit standard</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * register/unregister code path</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> = <a class=\"id\" href=\"#NETREG_DUMMY\">NETREG_DUMMY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* initialize the ref count */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NAPI wants this */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#napi_list\">napi_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* a dummy interface is started by default */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_PRESENT\">__LINK_STATE_PRESENT</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_START\">__LINK_STATE_START</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#init_dummy_netdev\">init_dummy_netdev</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_netdev<span class=\"ts\"/>- register a network device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Take a completed network device structure and add it to the kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interfaces. A %NETDEV_REGISTER message is sent to the netdev notifier</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>chain. 0 is returned on success. A negative errno code is returned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on a failure to set up the device, or if the name is a duplicate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is a wrapper around register_netdevice that takes the rtnl semaphore</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and expands the device name if you passed a format string to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>alloc_netdev.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_netdev\">register_netdev</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the name is a format string the caller wants us to do a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * name allocation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, '%')) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dev_alloc_name\">dev_alloc_name</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_netdevice\">register_netdevice</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_netdev\">register_netdev</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * netdev_wait_allrefs - wait until all references are gone.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called when unregistering network devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any protocol or device that holds a reference should register</span>", 
"<span class=\"comment\"> * for netdevice notification, and cleanup and put back the</span>", 
"<span class=\"comment\"> * reference if they receive an UNREGISTER event.</span>", 
"<span class=\"comment\"> * We can get stuck here if buggy protocols don't correctly</span>", 
"<span class=\"comment\"> * call dev_put.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#netdev_wait_allrefs\">netdev_wait_allrefs</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rebroadcast_time\">rebroadcast_time</a>, <a class=\"id\" href=\"#warning_time\">warning_time</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#linkwatch_forget_dev\">linkwatch_forget_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rebroadcast_time\">rebroadcast_time</a> = <a class=\"id\" href=\"#warning_time\">warning_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#rebroadcast_time\">rebroadcast_time</a> + 1 * <a class=\"id\" href=\"#HZ\">HZ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Rebroadcast unregister notification */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_UNREGISTER\">NETDEV_UNREGISTER</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* don't resend NETDEV_UNREGISTER_BATCH, _BATCH users</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * should have already handle it the first time */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_LINKWATCH_PENDING\">__LINK_STATE_LINKWATCH_PENDING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We must not have linkwatch events</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pending on unregister. If this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * happens, we simply run the queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unscheduled, resulting in a noop</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for this device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linkwatch_run_queue\">linkwatch_run_queue</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rtnl_unlock\">__rtnl_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rebroadcast_time\">rebroadcast_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(250);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#warning_time\">warning_time</a> + 10 * <a class=\"id\" href=\"#HZ\">HZ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"unregister_netdevice: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"waiting for %s to become free. Usage \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"count = %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warning_time\">warning_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* The sequence is:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rtnl_lock();</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_netdevice(x1);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_netdevice(x2);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unregister_netdevice(y1);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unregister_netdevice(y2);</span>", 
"<span class=\"comment\"> *      ...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rtnl_unlock();</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>free_netdev(y1);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>free_netdev(y2);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We are invoked by rtnl_unlock().</span>", 
"<span class=\"comment\"> * This allows us to deal with problems:</span>", 
"<span class=\"comment\"> * 1) We can delete sysfs objects which invoke hotplug</span>", 
"<span class=\"comment\"> *    without deadlocking with linkwatch via keventd.</span>", 
"<span class=\"comment\"> * 2) Since we run with the RTNL semaphore not held, we can sleep</span>", 
"<span class=\"comment\"> *    safely in order to wait for the netdev refcnt to drop to zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We must not return until all unregister events added during</span>", 
"<span class=\"comment\"> * the interval the lock was held have been completed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netdev_run_todo\">netdev_run_todo</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Snapshot list, allow later requests */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#net_todo_list\">net_todo_list</a>, &amp;<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rtnl_unlock\">__rtnl_unlock</a>();", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a>, <a class=\"id\" href=\"#todo_list\">todo_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#todo_list\">todo_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> != <a class=\"id\" href=\"#NETREG_UNREGISTERING\">NETREG_UNREGISTERING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"network todo '%s' but state %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> = <a class=\"id\" href=\"#NETREG_UNREGISTERED\">NETREG_UNREGISTERED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#flush_backlog\">flush_backlog</a>, <a class=\"id\" href=\"#dev\">dev</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netdev_wait_allrefs\">netdev_wait_allrefs</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* paranoia */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ip_ptr\">ip_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ip6_ptr\">ip6_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dn_ptr\">dn_ptr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#destructor\">destructor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#destructor\">destructor</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Free network device */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_txq_stats_fold - fold tx_queues stats</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to get statistics from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@stats: struct rtnl_link_stats64 to hold results</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_txq_stats_fold\">dev_txq_stats_fold</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rtnl_link_stats64\">rtnl_link_stats64</a> *<a class=\"id\" href=\"#stats\">stats</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tx_bytes\">tx_bytes</a> = 0, <a class=\"id\" href=\"#tx_packets\">tx_packets</a> = 0, <a class=\"id\" href=\"#tx_dropped\">tx_dropped</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#txq\">txq</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_tx_queues\">num_tx_queues</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#txq\">txq</a> = <a class=\"id\" href=\"#netdev_get_tx_queue\">netdev_get_tx_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#txq\">txq</a>-><a class=\"id\" href=\"#_xmit_lock\">_xmit_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tx_bytes\">tx_bytes</a>   += <a class=\"id\" href=\"#txq\">txq</a>-><a class=\"id\" href=\"#tx_bytes\">tx_bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tx_packets\">tx_packets</a> += <a class=\"id\" href=\"#txq\">txq</a>-><a class=\"id\" href=\"#tx_packets\">tx_packets</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tx_dropped\">tx_dropped</a> += <a class=\"id\" href=\"#txq\">txq</a>-><a class=\"id\" href=\"#tx_dropped\">tx_dropped</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#txq\">txq</a>-><a class=\"id\" href=\"#_xmit_lock\">_xmit_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tx_bytes\">tx_bytes</a> || <a class=\"id\" href=\"#tx_packets\">tx_packets</a> || <a class=\"id\" href=\"#tx_dropped\">tx_dropped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_bytes\">tx_bytes</a>   = <a class=\"id\" href=\"#tx_bytes\">tx_bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_packets\">tx_packets</a> = <a class=\"id\" href=\"#tx_packets\">tx_packets</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_dropped\">tx_dropped</a> = <a class=\"id\" href=\"#tx_dropped\">tx_dropped</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_txq_stats_fold\">dev_txq_stats_fold</a>);", 
"", 
"<span class=\"comment\">/* Convert net_device_stats to rtnl_link_stats64.  They have the same</span>", 
"<span class=\"comment\"> * fields in the same order, with only the type differing.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#netdev_stats_to_stats64\">netdev_stats_to_stats64</a>(struct <a class=\"id\" href=\"#rtnl_link_stats64\">rtnl_link_stats64</a> *<a class=\"id\" href=\"#stats64\">stats64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#net_device_stats\">net_device_stats</a> *<a class=\"id\" href=\"#netdev_stats\">netdev_stats</a>)", 
"{", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64", 
"        <a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(sizeof(*<a class=\"id\" href=\"#stats64\">stats64</a>) != sizeof(*<a class=\"id\" href=\"#netdev_stats\">netdev_stats</a>));", 
"        <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#stats64\">stats64</a>, <a class=\"id\" href=\"#netdev_stats\">netdev_stats</a>, sizeof(*<a class=\"id\" href=\"#stats64\">stats64</a>));", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#n\">n</a> = sizeof(*<a class=\"id\" href=\"#stats64\">stats64</a>) / sizeof(<a class=\"id\" href=\"#u64\">u64</a>);", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#src\">src</a> = (const unsigned long *)<a class=\"id\" href=\"#netdev_stats\">netdev_stats</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#dst\">dst</a> = (<a class=\"id\" href=\"#u64\">u64</a> *)<a class=\"id\" href=\"#stats64\">stats64</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(sizeof(*<a class=\"id\" href=\"#netdev_stats\">netdev_stats</a>) / sizeof(unsigned long) !=", 
"<span class=\"ts\"/><span class=\"ts\"/>     sizeof(*<a class=\"id\" href=\"#stats64\">stats64</a>) / sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_get_stats<span class=\"ts\"/>- get network device statistics</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to get statistics from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@storage: place to store stats</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Get network statistics from device. Return @storage.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The device driver may provide its own method by setting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev-&gt;netdev_ops-&gt;get_stats64 or dev-&gt;netdev_ops-&gt;get_stats;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>otherwise the internal statistics structure is used.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rtnl_link_stats64\">rtnl_link_stats64</a> *<a class=\"id\" href=\"#dev_get_stats\">dev_get_stats</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rtnl_link_stats64\">rtnl_link_stats64</a> *<a class=\"id\" href=\"#storage\">storage</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device_ops\">net_device_ops</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_get_stats64\">ndo_get_stats64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#storage\">storage</a>, 0, sizeof(*<a class=\"id\" href=\"#storage\">storage</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_get_stats64\">ndo_get_stats64</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#storage\">storage</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_get_stats\">ndo_get_stats</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netdev_stats_to_stats64\">netdev_stats_to_stats64</a>(<a class=\"id\" href=\"#storage\">storage</a>, <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_get_stats\">ndo_get_stats</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#storage\">storage</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_stats_to_stats64\">netdev_stats_to_stats64</a>(<a class=\"id\" href=\"#storage\">storage</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_txq_stats_fold\">dev_txq_stats_fold</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#storage\">storage</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#storage\">storage</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_get_stats\">dev_get_stats</a>);", 
"", 
"static void <a class=\"id\" href=\"#netdev_init_one_queue\">netdev_init_one_queue</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#queue\">queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#_unused\">_unused</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#netdev_init_queues\">netdev_init_queues</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_init_one_queue\">netdev_init_one_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_queue\">rx_queue</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_for_each_tx_queue\">netdev_for_each_tx_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#netdev_init_one_queue\">netdev_init_one_queue</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#tx_global_lock\">tx_global_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>alloc_netdev_mq - allocate network device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sizeof_priv:<span class=\"ts\"/>size of private data to allocate space for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name:<span class=\"ts\"/><span class=\"ts\"/>device name format string</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@setup:<span class=\"ts\"/><span class=\"ts\"/>callback to initialize device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@queue_count:<span class=\"ts\"/>the number of subqueues to allocate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocates a struct net_device with private data area for driver use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and performs basic initialization.  Also allocates subquue structs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for each queue on the device at the end of the netdevice.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#alloc_netdev_mq\">alloc_netdev_mq</a>(int <a class=\"id\" href=\"#sizeof_priv\">sizeof_priv</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#setup\">setup</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *), unsigned int <a class=\"id\" href=\"#queue_count\">queue_count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#tx\">tx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_rx_queue\">netdev_rx_queue</a> *<a class=\"id\" href=\"#rx\">rx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>) >= sizeof(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = sizeof(struct <a class=\"id\" href=\"#net_device\">net_device</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sizeof_priv\">sizeof_priv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ensure 32-byte alignment of private area */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#alloc_size\">alloc_size</a>, <a class=\"id\" href=\"#NETDEV_ALIGN\">NETDEV_ALIGN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> += <a class=\"id\" href=\"#sizeof_priv\">sizeof_priv</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* ensure 32-byte alignment of whole construct */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> += <a class=\"id\" href=\"#NETDEV_ALIGN\">NETDEV_ALIGN</a> - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#alloc_size\">alloc_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"alloc_netdev: Unable to allocate device.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#queue_count\">queue_count</a>, sizeof(struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tx\">tx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"alloc_netdev: Unable to allocate \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"tx qdiscs.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_p\">free_p</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rx\">rx</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#queue_count\">queue_count</a>, sizeof(struct <a class=\"id\" href=\"#netdev_rx_queue\">netdev_rx_queue</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rx\">rx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"alloc_netdev: Unable to allocate \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"rx queues.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_tx\">free_tx</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#rx\">rx</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#queue_count\">queue_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set a pointer to first element in the array which holds the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reference count.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#queue_count\">queue_count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rx\">rx</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#rx\">rx</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#PTR_ALIGN\">PTR_ALIGN</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#NETDEV_ALIGN\">NETDEV_ALIGN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#padded\">padded</a> = (char *)<a class=\"id\" href=\"#dev\">dev</a> - (char *)<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_addr_init\">dev_addr_init</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_rx\">free_rx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_mc_init\">dev_mc_init</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_uc_init\">dev_uc_init</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_net_set\">dev_net_set</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#init_net\">init_net</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_tx\">_tx</a> = <a class=\"id\" href=\"#tx\">tx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_tx_queues\">num_tx_queues</a> = <a class=\"id\" href=\"#queue_count\">queue_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a> = <a class=\"id\" href=\"#queue_count\">queue_count</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_rx\">_rx</a> = <a class=\"id\" href=\"#rx\">rx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_rx_queues\">num_rx_queues</a> = <a class=\"id\" href=\"#queue_count\">queue_count</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gso_max_size\">gso_max_size</a> = <a class=\"id\" href=\"#GSO_MAX_SIZE\">GSO_MAX_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_init_queues\">netdev_init_queues</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ntuple_list\">ethtool_ntuple_list</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ntuple_list\">ethtool_ntuple_list</a>.<a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#napi_list\">napi_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#unreg_list\">unreg_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link_watch_list\">link_watch_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> = <a class=\"id\" href=\"#IFF_XMIT_DST_RELEASE\">IFF_XMIT_DST_RELEASE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup\">setup</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<a class=\"id\" href=\"#free_rx\">free_rx</a>:", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rx\">rx</a>);", 
"<a class=\"id\" href=\"#free_tx\">free_tx</a>:", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tx\">tx</a>);", 
"<a class=\"id\" href=\"#free_p\">free_p</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_netdev_mq\">alloc_netdev_mq</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>free_netdev - free network device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function does the last stage of destroying an allocated device</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>interface. The reference to the device object is released.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If this is the last reference then it will be freed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_netdev\">free_netdev</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_net\">release_net</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_tx\">_tx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flush device addresses */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_addr_flush\">dev_addr_flush</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear ethtool n-tuple list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ethtool_ntuple_flush\">ethtool_ntuple_flush</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#napi_list\">napi_list</a>, <a class=\"id\" href=\"#dev_list\">dev_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_napi_del\">netif_napi_del</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*  Compatibility with error handling in drivers */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> == <a class=\"id\" href=\"#NETREG_UNINITIALIZED\">NETREG_UNINITIALIZED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>((char *)<a class=\"id\" href=\"#dev\">dev</a> - <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#padded\">padded</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> != <a class=\"id\" href=\"#NETREG_UNREGISTERED\">NETREG_UNREGISTERED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> = <a class=\"id\" href=\"#NETREG_RELEASED\">NETREG_RELEASED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* will free via device release */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#free_netdev\">free_netdev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>synchronize_net -  Synchronize with packet receive processing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Wait for packets currently being received to be done.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Does not block later packets from starting.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unregister_netdevice_queue - remove device from the kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@head: list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function shuts down a device interface and removes it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the kernel tables.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If head not NULL, device is queued to be unregistered later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Callers must hold the rtnl semaphore.  You may want</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unregister_netdev() instead of this.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#unregister_netdevice_queue\">unregister_netdevice_queue</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#unreg_list\">unreg_list</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rollback_registered\">rollback_registered</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Finish processing unregister after unlock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_set_todo\">net_set_todo</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_netdevice_queue\">unregister_netdevice_queue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unregister_netdevice_many - unregister many devices</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@head: list of devices</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_netdevice_many\">unregister_netdevice_many</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rollback_registered_many\">rollback_registered_many</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#unreg_list\">unreg_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_set_todo\">net_set_todo</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_netdevice_many\">unregister_netdevice_many</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unregister_netdev - remove device from the kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function shuts down a device interface and removes it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the kernel tables.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is just a wrapper for unregister_netdevice that takes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the rtnl semaphore.  In general you want to use this and not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unregister_netdevice.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_netdev\">unregister_netdev</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_netdevice\">unregister_netdevice</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_netdev\">unregister_netdev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_change_net_namespace - move device to different nethost namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: network namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pat: If not NULL name pattern to try if the current device name</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>      is already taken in the destination network namespace.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function shuts down a device interface and moves it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to a new network namespace. On success 0 is returned, on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a failure a netagive errno code is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Callers must hold the rtnl semaphore.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#dev_change_net_namespace\">dev_change_net_namespace</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#pat\">pat</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow namespace local devices to be moved. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_NETNS_LOCAL\">NETIF_F_NETNS_LOCAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure the device has been registrered */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#reg_state\">reg_state</a> != <a class=\"id\" href=\"#NETREG_REGISTERED\">NETREG_REGISTERED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get out if there is nothing todo */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#net\">net</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pick the destination device name, and ensure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can use it in the destination network namespace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__dev_get_by_name\">__dev_get_by_name</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We get here if we can't use the current device name */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat\">pat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_get_valid_name\">dev_get_valid_name</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pat\">pat</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And now a mini version of register_netdevice unregister_netdevice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If device is running close it first. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_close\">dev_close</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* And unlink it from device chain */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlist_netdevice\">unlist_netdevice</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Shutdown queueing discipline. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_shutdown\">dev_shutdown</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Notify protocols, that we are about to destroy</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   this device. They should clean all the things.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_UNREGISTER\">NETDEV_UNREGISTER</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_UNREGISTER_BATCH\">NETDEV_UNREGISTER_BATCH</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Flush the unicast and multicast chains</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_uc_flush\">dev_uc_flush</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_mc_flush\">dev_mc_flush</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Actually switch the network namespace */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_net_set\">dev_net_set</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#net\">net</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If there is an ifindex conflict assign a new one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__dev_get_by_index\">__dev_get_by_index</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#iflink\">iflink</a> = (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#iflink\">iflink</a> == <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a> = <a class=\"id\" href=\"#dev_new_index\">dev_new_index</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iflink\">iflink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#iflink\">iflink</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fixup kobjects */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#device_rename\">device_rename</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add the device back in the hashes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_netdevice\">list_netdevice</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Notify protocols, that a new device appeared. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_REGISTER\">NETDEV_REGISTER</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Prevent userspace races by waiting until the network</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>device is fully setup before sending notifications.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtmsg_ifinfo\">rtmsg_ifinfo</a>(<a class=\"id\" href=\"#RTM_NEWLINK\">RTM_NEWLINK</a>, <a class=\"id\" href=\"#dev\">dev</a>, ~0U);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dev_change_net_namespace\">dev_change_net_namespace</a>);", 
"", 
"static int <a class=\"id\" href=\"#dev_cpu_callback\">dev_cpu_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#ocpu\">ocpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#list_skb\">list_skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#oldcpu\">oldcpu</a> = (unsigned long)<a class=\"id\" href=\"#ocpu\">ocpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>, *<a class=\"id\" href=\"#oldsd\">oldsd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a> != <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a> && <a class=\"id\" href=\"#action\">action</a> != <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldsd\">oldsd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>, <a class=\"id\" href=\"#oldcpu\">oldcpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find end of our completion_queue. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_skb\">list_skb</a> = &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#completion_queue\">completion_queue</a>;", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#list_skb\">list_skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_skb\">list_skb</a> = &amp;(*<a class=\"id\" href=\"#list_skb\">list_skb</a>)-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Append completion queue from offline CPU. */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#list_skb\">list_skb</a> = <a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#completion_queue\">completion_queue</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#completion_queue\">completion_queue</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Append output queue from offline CPU. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue_tailp\">output_queue_tailp</a> = <a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue_tailp\">output_queue_tailp</a> = <a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#output_queue_tailp\">output_queue_tailp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#output_queue_tailp\">output_queue_tailp</a> = &amp;<a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq_irqoff\">raise_softirq_irqoff</a>(<a class=\"id\" href=\"#NET_TX_SOFTIRQ\">NET_TX_SOFTIRQ</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Process offline CPU's input_pkt_queue */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#__skb_dequeue\">__skb_dequeue</a>(&amp;<a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#process_queue\">process_queue</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_rx\">netif_rx</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_queue_head_incr\">input_queue_head_incr</a>(<a class=\"id\" href=\"#oldsd\">oldsd</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#__skb_dequeue\">__skb_dequeue</a>(&amp;<a class=\"id\" href=\"#oldsd\">oldsd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_rx\">netif_rx</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_queue_head_incr\">input_queue_head_incr</a>(<a class=\"id\" href=\"#oldsd\">oldsd</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_increment_features - increment feature set by one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@all: current feature set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@one: new feature set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mask: mask feature set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Computes a new feature set after adding a device with feature set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@one to the master device with current feature set @all.  Will not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>enable anything that is off in @mask. Returns the new feature set.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#netdev_increment_features\">netdev_increment_features</a>(unsigned long <a class=\"id\" href=\"#all\">all</a>, unsigned long <a class=\"id\" href=\"#one\">one</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If device needs checksumming, downgrade to it. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#all\">all</a> &amp; <a class=\"id\" href=\"#NETIF_F_NO_CSUM\">NETIF_F_NO_CSUM</a> && !(<a class=\"id\" href=\"#one\">one</a> &amp; <a class=\"id\" href=\"#NETIF_F_NO_CSUM\">NETIF_F_NO_CSUM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all\">all</a> ^= <a class=\"id\" href=\"#NETIF_F_NO_CSUM\">NETIF_F_NO_CSUM</a> | (<a class=\"id\" href=\"#one\">one</a> &amp; <a class=\"id\" href=\"#NETIF_F_ALL_CSUM\">NETIF_F_ALL_CSUM</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#NETIF_F_ALL_CSUM\">NETIF_F_ALL_CSUM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If one device supports v4/v6 checksumming, set for all. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#one\">one</a> &amp; (<a class=\"id\" href=\"#NETIF_F_IP_CSUM\">NETIF_F_IP_CSUM</a> | <a class=\"id\" href=\"#NETIF_F_IPV6_CSUM\">NETIF_F_IPV6_CSUM</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#all\">all</a> &amp; <a class=\"id\" href=\"#NETIF_F_GEN_CSUM\">NETIF_F_GEN_CSUM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all\">all</a> &= ~<a class=\"id\" href=\"#NETIF_F_ALL_CSUM\">NETIF_F_ALL_CSUM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all\">all</a> |= <a class=\"id\" href=\"#one\">one</a> &amp; (<a class=\"id\" href=\"#NETIF_F_IP_CSUM\">NETIF_F_IP_CSUM</a> | <a class=\"id\" href=\"#NETIF_F_IPV6_CSUM\">NETIF_F_IPV6_CSUM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If one device supports hw checksumming, set for all. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#one\">one</a> &amp; <a class=\"id\" href=\"#NETIF_F_GEN_CSUM\">NETIF_F_GEN_CSUM</a> && !(<a class=\"id\" href=\"#all\">all</a> &amp; <a class=\"id\" href=\"#NETIF_F_GEN_CSUM\">NETIF_F_GEN_CSUM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all\">all</a> &= ~<a class=\"id\" href=\"#NETIF_F_ALL_CSUM\">NETIF_F_ALL_CSUM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all\">all</a> |= <a class=\"id\" href=\"#NETIF_F_HW_CSUM\">NETIF_F_HW_CSUM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#one\">one</a> |= <a class=\"id\" href=\"#NETIF_F_ALL_CSUM\">NETIF_F_ALL_CSUM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#one\">one</a> |= <a class=\"id\" href=\"#all\">all</a> &amp; <a class=\"id\" href=\"#NETIF_F_ONE_FOR_ALL\">NETIF_F_ONE_FOR_ALL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#all\">all</a> &= <a class=\"id\" href=\"#one\">one</a> | <a class=\"id\" href=\"#NETIF_F_LLTX\">NETIF_F_LLTX</a> | <a class=\"id\" href=\"#NETIF_F_GSO\">NETIF_F_GSO</a> | <a class=\"id\" href=\"#NETIF_F_UFO\">NETIF_F_UFO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#all\">all</a> |= <a class=\"id\" href=\"#one\">one</a> &amp; <a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#NETIF_F_ONE_FOR_ALL\">NETIF_F_ONE_FOR_ALL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#all\">all</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netdev_increment_features\">netdev_increment_features</a>);", 
"", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#netdev_create_hash\">netdev_create_hash</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hash\">hash</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#hash\">hash</a>) * <a class=\"id\" href=\"#NETDEV_HASHENTRIES\">NETDEV_HASHENTRIES</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hash\">hash</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NETDEV_HASHENTRIES\">NETDEV_HASHENTRIES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hash\">hash</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Initialize per network namespace state */</span>", 
"static int <a class=\"id\" href=\"#__net_init\">__net_init</a> <a class=\"id\" href=\"#netdev_init\">netdev_init</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_name_head\">dev_name_head</a> = <a class=\"id\" href=\"#netdev_create_hash\">netdev_create_hash</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_name_head\">dev_name_head</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_name\">err_name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_index_head\">dev_index_head</a> = <a class=\"id\" href=\"#netdev_create_hash\">netdev_create_hash</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_index_head\">dev_index_head</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_idx\">err_idx</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_idx\">err_idx</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_name_head\">dev_name_head</a>);", 
"<a class=\"id\" href=\"#err_name\">err_name</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_drivername - network driver for the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: network device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buffer: buffer for resulting name</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: size of buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Determine network driver for device.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#netdev_drivername\">netdev_drivername</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> <= 0 || !<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[0] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver\">driver</a> && <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__netdev_printk\">__netdev_printk</a>(const char *<a class=\"id\" href=\"#level\">level</a>, const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#va_format\">va_format</a> *<a class=\"id\" href=\"#vaf\">vaf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>, \"%s: %pV\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#netdev_name\">netdev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#vaf\">vaf</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#printk\">printk</a>(\"%s%s: %pV\", <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#netdev_name\">netdev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#vaf\">vaf</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#printk\">printk</a>(\"%s(NULL net_device): %pV\", <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#vaf\">vaf</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#netdev_printk\">netdev_printk</a>(const char *<a class=\"id\" href=\"#level\">level</a>, const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#va_format\">va_format</a> <a class=\"id\" href=\"#vaf\">vaf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#format\">format</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaf\">vaf</a>.<a class=\"id\" href=\"#fmt\">fmt</a> = <a class=\"id\" href=\"#format\">format</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaf\">vaf</a>.<a class=\"id\" href=\"#va\">va</a> = &amp;<a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#__netdev_printk\">__netdev_printk</a>(<a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#vaf\">vaf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netdev_printk\">netdev_printk</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#define_netdev_printk_level\">define_netdev_printk_level</a>(<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#level\">level</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"int <a class=\"id\" href=\"#func\">func</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#va_format\">va_format</a> <a class=\"id\" href=\"#vaf\">vaf</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaf\">vaf</a>.<a class=\"id\" href=\"#fmt\">fmt</a> = <a class=\"id\" href=\"#fmt\">fmt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaf\">vaf</a>.<a class=\"id\" href=\"#va\">va</a> = &amp;<a class=\"id\" href=\"#args\">args</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#__netdev_printk\">__netdev_printk</a>(<a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#vaf\">vaf</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#func\">func</a>);", 
"", 
"<a class=\"id\" href=\"#define_netdev_printk_level\">define_netdev_printk_level</a>(<a class=\"id\" href=\"#netdev_emerg\">netdev_emerg</a>, <a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>);", 
"<a class=\"id\" href=\"#define_netdev_printk_level\">define_netdev_printk_level</a>(<a class=\"id\" href=\"#netdev_alert\">netdev_alert</a>, <a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a>);", 
"<a class=\"id\" href=\"#define_netdev_printk_level\">define_netdev_printk_level</a>(<a class=\"id\" href=\"#netdev_crit\">netdev_crit</a>, <a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a>);", 
"<a class=\"id\" href=\"#define_netdev_printk_level\">define_netdev_printk_level</a>(<a class=\"id\" href=\"#netdev_err\">netdev_err</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>);", 
"<a class=\"id\" href=\"#define_netdev_printk_level\">define_netdev_printk_level</a>(<a class=\"id\" href=\"#netdev_warn\">netdev_warn</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>);", 
"<a class=\"id\" href=\"#define_netdev_printk_level\">define_netdev_printk_level</a>(<a class=\"id\" href=\"#netdev_notice\">netdev_notice</a>, <a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>);", 
"<a class=\"id\" href=\"#define_netdev_printk_level\">define_netdev_printk_level</a>(<a class=\"id\" href=\"#netdev_info\">netdev_info</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>);", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#netdev_exit\">netdev_exit</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_name_head\">dev_name_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_index_head\">dev_index_head</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> <a class=\"id\" href=\"#__net_initdata\">__net_initdata</a> <a class=\"id\" href=\"#netdev_net_ops\">netdev_net_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a> = <a class=\"id\" href=\"#netdev_init\">netdev_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit\">exit</a> = <a class=\"id\" href=\"#netdev_exit\">netdev_exit</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#default_device_exit\">default_device_exit</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, *<a class=\"id\" href=\"#aux\">aux</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Push all migratable network devices back to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initial network namespace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev_safe\">for_each_netdev_safe</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#aux\">aux</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#fb_name\">fb_name</a>[<a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ignore unmoveable devices (i.e. loopback) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_NETNS_LOCAL\">NETIF_F_NETNS_LOCAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Leave virtual devices for the generic cleanup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rtnl_link_ops\">rtnl_link_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Push remaing network devices to init_net */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#fb_name\">fb_name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>, \"dev%d\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dev_change_net_namespace\">dev_change_net_namespace</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#init_net\">init_net</a>, <a class=\"id\" href=\"#fb_name\">fb_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"%s: failed to move %s to init_net: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#default_device_exit_batch\">default_device_exit_batch</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#net_list\">net_list</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* At exit all network devices most be removed from a network</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * namespace.  Do this in the reverse order of registeration.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do this across as many network namespaces as possible to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * improve batching efficiency.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#dev_kill_list\">dev_kill_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#net_list\">net_list</a>, <a class=\"id\" href=\"#exit_list\">exit_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev_reverse\">for_each_netdev_reverse</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rtnl_link_ops\">rtnl_link_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rtnl_link_ops\">rtnl_link_ops</a>-><a class=\"id\" href=\"#dellink\">dellink</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev_kill_list\">dev_kill_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_netdevice_queue\">unregister_netdevice_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev_kill_list\">dev_kill_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_netdevice_many\">unregister_netdevice_many</a>(&amp;<a class=\"id\" href=\"#dev_kill_list\">dev_kill_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> <a class=\"id\" href=\"#__net_initdata\">__net_initdata</a> <a class=\"id\" href=\"#default_device_ops\">default_device_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit\">exit</a> = <a class=\"id\" href=\"#default_device_exit\">default_device_exit</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit_batch\">exit_batch</a> = <a class=\"id\" href=\"#default_device_exit_batch\">default_device_exit_batch</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Initialize the DEV module. At boot time this walks the device list and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unhooks any devices that fail to initialise (normally hardware not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>present) and leaves us with a valid list of present and active devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *       This is called single threaded during boot, so no need</span>", 
"<span class=\"comment\"> *       to take the rtnl semaphore.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#net_dev_init\">net_dev_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#dev_boot_phase\">dev_boot_phase</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_proc_init\">dev_proc_init</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netdev_kobject_init\">netdev_kobject_init</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ptype_all\">ptype_all</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PTYPE_HASH_SIZE\">PTYPE_HASH_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ptype_base\">ptype_base</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_pernet_subsys\">register_pernet_subsys</a>(&amp;<a class=\"id\" href=\"#netdev_net_ops\">netdev_net_ops</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Initialise the packet receive queues.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#sd\">sd</a>, 0, sizeof(*<a class=\"id\" href=\"#sd\">sd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#process_queue\">process_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#completion_queue\">completion_queue</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue_tailp\">output_queue_tailp</a> = &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#rps_trigger_softirq\">rps_trigger_softirq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#backlog\">backlog</a>.<a class=\"id\" href=\"#poll\">poll</a> = <a class=\"id\" href=\"#process_backlog\">process_backlog</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#backlog\">backlog</a>.<a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#weight_p\">weight_p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#backlog\">backlog</a>.<a class=\"id\" href=\"#gro_list\">gro_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#backlog\">backlog</a>.<a class=\"id\" href=\"#gro_count\">gro_count</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_boot_phase\">dev_boot_phase</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The loopback device is special if any other network devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is present in a network namespace the loopback device must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be present. Since we now dynamically allocate and free the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * loopback device ensure this invariant is maintained by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * keeping the loopback device as the first device on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list of network devices.  Ensuring the loopback devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is the first device that appears and the last network device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that disappears.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_pernet_device\">register_pernet_device</a>(&amp;<a class=\"id\" href=\"#loopback_net_ops\">loopback_net_ops</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_pernet_device\">register_pernet_device</a>(&amp;<a class=\"id\" href=\"#default_device_ops\">default_device_ops</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_softirq\">open_softirq</a>(<a class=\"id\" href=\"#NET_TX_SOFTIRQ\">NET_TX_SOFTIRQ</a>, <a class=\"id\" href=\"#net_tx_action\">net_tx_action</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_softirq\">open_softirq</a>(<a class=\"id\" href=\"#NET_RX_SOFTIRQ\">NET_RX_SOFTIRQ</a>, <a class=\"id\" href=\"#net_rx_action\">net_rx_action</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#dev_cpu_callback\">dev_cpu_callback</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_init\">dst_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_mcast_init\">dev_mcast_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#net_dev_init\">net_dev_init</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#initialize_hashrnd\">initialize_hashrnd</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(&amp;<a class=\"id\" href=\"#hashrnd\">hashrnd</a>, sizeof(<a class=\"id\" href=\"#hashrnd\">hashrnd</a>));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall_sync\">late_initcall_sync</a>(<a class=\"id\" href=\"#initialize_hashrnd\">initialize_hashrnd</a>);", 
"", 
];
xr_frag_insert('l/c6/0f707854f53af8387be40a836424494d328d2f.xr', __xr_tmp);
