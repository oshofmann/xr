var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, **<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a> || <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#sibling\">sibling</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__release_resource\">__release_resource</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, **<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == <a class=\"id\" href=\"#old\">old</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__release_child_resources\">__release_child_resources</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#sibling\">sibling</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__release_child_resources\">__release_child_resources</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"release child resource %pR\\n\", <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* need to restore size, and keep flags */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#resource_size\">resource_size</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#release_child_resources\">release_child_resources</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release_child_resources\">__release_child_resources</a>(<a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * request_resource_conflict - request and reserve an I/O or memory resource</span>", 
"<span class=\"comment\"> * @root: root resource descriptor</span>", 
"<span class=\"comment\"> * @new: resource descriptor desired by caller</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 for success, conflict resource on error.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#request_resource_conflict\">request_resource_conflict</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a> = <a class=\"id\" href=\"#__request_resource\">__request_resource</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#conflict\">conflict</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * request_resource - request and reserve an I/O or memory resource</span>", 
"<span class=\"comment\"> * @root: root resource descriptor</span>", 
"<span class=\"comment\"> * @new: resource descriptor desired by caller</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 for success, negative error code on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#request_resource\">request_resource</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a> = <a class=\"id\" href=\"#request_resource_conflict\">request_resource_conflict</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#conflict\">conflict</a> ? -<a class=\"id\" href=\"#EBUSY\">EBUSY</a> : 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#request_resource\">request_resource</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * release_resource - release a previously reserved resource</span>", 
"<span class=\"comment\"> * @old: resource pointer</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#release_resource\">release_resource</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#__release_resource\">__release_resource</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#release_resource\">release_resource</a>);", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ARCH_HAS_WALK_MEMORY\">CONFIG_ARCH_HAS_WALK_MEMORY</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Finds the lowest memory reosurce exists within [res-&gt;start.res-&gt;end)</span>", 
"<span class=\"comment\"> * the caller must specify res-&gt;start, res-&gt;end, res-&gt;flags and \"name\".</span>", 
"<span class=\"comment\"> * If found, returns 0, res is overwritten, if not found, returns -1.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_next_system_ram\">find_next_system_ram</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>, char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#iomem_resource\">iomem_resource</a>.<a class=\"id\" href=\"#child\">child</a>; <a class=\"id\" href=\"#p\">p</a> ; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* system ram is just marked as IORESOURCE_MEM */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> != <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a> && <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#end\">end</a> >= <a class=\"id\" href=\"#start\">start</a>) && (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"comment\">/* copy data */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function calls callback against all memory range of \"System RAM\"</span>", 
"<span class=\"comment\"> * which are marked as IORESOURCE_MEM and IORESOUCE_BUSY.</span>", 
"<span class=\"comment\"> * Now, this function is only for \"System RAM\".</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#walk_system_ram_range\">walk_system_ram_range</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#arg\">arg</a>, int (*<a class=\"id\" href=\"#func\">func</a>)(unsigned long, unsigned long, void *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#orig_end\">orig_end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#start\">start</a> = (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#start_pfn\">start_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#end\">end</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#start_pfn\">start_pfn</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> | <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_end\">orig_end</a> = <a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#end\">end</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#find_next_system_ram\">find_next_system_ram</a>(&amp;<a class=\"id\" href=\"#res\">res</a>, \"System RAM\") >= 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = (<a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = (<a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#end\">end</a> + 1) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pfn\">end_pfn</a> &gt; <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (*<a class=\"id\" href=\"#func\">func</a>)(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a> - <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#end\">end</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#orig_end\">orig_end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__is_ram\">__is_ram</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This generic page_is_ram() returns true if specified address is</span>", 
"<span class=\"comment\"> * registered as \"System RAM\" in iomem_resource list.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#page_is_ram\">page_is_ram</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#walk_system_ram_range\">walk_system_ram_range</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#__is_ram\">__is_ram</a>) == 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find empty slot in the resource tree given range and alignment.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_resource\">find_resource</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#min\">min</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> (*<a class=\"id\" href=\"#alignf\">alignf</a>)(void *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#resource\">resource</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#alignf_data\">alignf_data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> <a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Skip past an allocated resource that starts at 0, since the assignment</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of this-&gt;start - 1 to tmp-&gt;end below would cause an underflow.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a> && <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#start\">start</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#end\">end</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for(;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#start\">start</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#min\">min</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#min\">min</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alignf\">alignf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#alignf\">alignf</a>(<a class=\"id\" href=\"#alignf_data\">alignf_data</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#end\">end</a> && <a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#size\">size</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#this\">this</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#end\">end</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * allocate_resource - allocate empty slot in the resource tree given range &amp; alignment</span>", 
"<span class=\"comment\"> * @root: root resource descriptor</span>", 
"<span class=\"comment\"> * @new: resource descriptor desired by caller</span>", 
"<span class=\"comment\"> * @size: requested resource region size</span>", 
"<span class=\"comment\"> * @min: minimum size to allocate</span>", 
"<span class=\"comment\"> * @max: maximum size to allocate</span>", 
"<span class=\"comment\"> * @align: alignment requested, in bytes</span>", 
"<span class=\"comment\"> * @alignf: alignment function, optional, called if not NULL</span>", 
"<span class=\"comment\"> * @alignf_data: arbitrary data to pass to the @alignf function</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#allocate_resource\">allocate_resource</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#min\">min</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> (*<a class=\"id\" href=\"#alignf\">alignf</a>)(void *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#resource\">resource</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#alignf_data\">alignf_data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#find_resource\">find_resource</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#alignf\">alignf</a>, <a class=\"id\" href=\"#alignf_data\">alignf_data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> >= 0 && <a class=\"id\" href=\"#__request_resource\">__request_resource</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#new\">new</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#allocate_resource\">allocate_resource</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Insert a resource into the resource tree. If successful, return NULL,</span>", 
"<span class=\"comment\"> * otherwise return the conflicting resource (compare to __request_resource())</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#resource\">resource</a> * <a class=\"id\" href=\"#__insert_resource\">__insert_resource</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#first\">first</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>for (;; <a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#__request_resource\">__request_resource</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> == <a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a>) || (<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a>) && (<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first\">first</a>; ; <a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Partial overlap? Bad, and unfixable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a> || <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sibling\">sibling</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sibling\">sibling</a>-><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#sibling\">sibling</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sibling\">sibling</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first\">first</a>; <a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sibling\">sibling</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a> == <a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sibling\">sibling</a> != <a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sibling\">sibling</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insert_resource_conflict - Inserts resource in the resource tree</span>", 
"<span class=\"comment\"> * @parent: parent of the new resource</span>", 
"<span class=\"comment\"> * @new: new resource to insert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, conflict resource if the resource can't be inserted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is equivalent to request_resource_conflict when no conflict</span>", 
"<span class=\"comment\"> * happens. If a conflict happens, and the conflicting resources</span>", 
"<span class=\"comment\"> * entirely fit within the range of the new resource, then the new</span>", 
"<span class=\"comment\"> * resource is inserted and the conflicting resources become children of</span>", 
"<span class=\"comment\"> * the new resource.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#insert_resource_conflict\">insert_resource_conflict</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a> = <a class=\"id\" href=\"#__insert_resource\">__insert_resource</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#conflict\">conflict</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insert_resource - Inserts a resource in the resource tree</span>", 
"<span class=\"comment\"> * @parent: parent of the new resource</span>", 
"<span class=\"comment\"> * @new: new resource to insert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, -EBUSY if the resource can't be inserted.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#insert_resource\">insert_resource</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a> = <a class=\"id\" href=\"#insert_resource_conflict\">insert_resource_conflict</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#conflict\">conflict</a> ? -<a class=\"id\" href=\"#EBUSY\">EBUSY</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insert_resource_expand_to_fit - Insert a resource into the resource tree</span>", 
"<span class=\"comment\"> * @root: root resource descriptor</span>", 
"<span class=\"comment\"> * @new: new resource to insert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Insert a resource into the resource tree, possibly expanding it in order</span>", 
"<span class=\"comment\"> * to make it encompass any conflicting resources.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#insert_resource_expand_to_fit\">insert_resource_expand_to_fit</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a> = <a class=\"id\" href=\"#__insert_resource\">__insert_resource</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#conflict\">conflict</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a> == <a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ok, expand resource to cover the conflict, then try again .. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Expanded resource %s due to conflict with %s\\n\", <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * adjust_resource - modify a resource's start and size</span>", 
"<span class=\"comment\"> * @res: resource to modify</span>", 
"<span class=\"comment\"> * @start: new start value</span>", 
"<span class=\"comment\"> * @size: new size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given an existing resource, change its start and size to match the</span>", 
"<span class=\"comment\"> * arguments.  Returns 0 on success, -EBUSY if it can't fit.</span>", 
"<span class=\"comment\"> * Existing children of the resource are assumed to be immutable.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#adjust_resource\">adjust_resource</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#start\">start</a>) || (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#child\">child</a>; <a class=\"id\" href=\"#tmp\">tmp</a>; <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#start\">start</a>) || (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#sibling\">sibling</a> && (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#sibling\">sibling</a>-><a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> != <a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#sibling\">sibling</a> != <a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__reserve_region_with_split\">__reserve_region_with_split</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#res\">res</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a> = <a class=\"id\" href=\"#__request_resource\">__request_resource</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#conflict\">conflict</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* failed, split and try again */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* conflict covered whole area */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#end\">end</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__reserve_region_with_split\">__reserve_region_with_split</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#start\">start</a>-1, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__reserve_region_with_split\">__reserve_region_with_split</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#end\">end</a>+1, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#reserve_region_with_split\">reserve_region_with_split</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__reserve_region_with_split\">__reserve_region_with_split</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#adjust_resource\">adjust_resource</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * resource_alignment - calculate resource's alignment</span>", 
"<span class=\"comment\"> * @res: resource pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns alignment on success, 0 (invalid alignment) on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#resource_alignment\">resource_alignment</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#IORESOURCE_SIZEALIGN\">IORESOURCE_SIZEALIGN</a> | <a class=\"id\" href=\"#IORESOURCE_STARTALIGN\">IORESOURCE_STARTALIGN</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IORESOURCE_SIZEALIGN\">IORESOURCE_SIZEALIGN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#resource_size\">resource_size</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IORESOURCE_STARTALIGN\">IORESOURCE_STARTALIGN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is compatibility stuff for IO resources.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note how this, unlike the above, knows about</span>", 
"<span class=\"comment\"> * the IO flag meanings (busy etc).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * request_region creates a new busy region.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * check_region returns non-zero if the area is already busy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * release_region releases a matching busy region.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#muxed_resource_wait\">muxed_resource_wait</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __request_region - create a new busy resource region</span>", 
"<span class=\"comment\"> * @parent: parent resource descriptor</span>", 
"<span class=\"comment\"> * @start: resource start address</span>", 
"<span class=\"comment\"> * @n: resource region size</span>", 
"<span class=\"comment\"> * @name: reserving caller's ID string</span>", 
"<span class=\"comment\"> * @flags: IO resource flags</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#resource\">resource</a> * <a class=\"id\" href=\"#__request_region\">__request_region</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#res\">res</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#n\">n</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a> = <a class=\"id\" href=\"#__request_resource\">__request_resource</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#conflict\">conflict</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a> != <a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#conflict\">conflict</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MUXED\">IORESOURCE_MUXED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(&amp;<a class=\"id\" href=\"#muxed_resource_wait\">muxed_resource_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#muxed_resource_wait\">muxed_resource_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Uhhuh, that didn't work out.. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__request_region\">__request_region</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __check_region - check if a resource region is busy or free</span>", 
"<span class=\"comment\"> * @parent: parent resource descriptor</span>", 
"<span class=\"comment\"> * @start: resource start address</span>", 
"<span class=\"comment\"> * @n: resource region size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if the region is free at the moment it is checked,</span>", 
"<span class=\"comment\"> * returns %-EBUSY if the region is busy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE:</span>", 
"<span class=\"comment\"> * This function is deprecated because its use is racy.</span>", 
"<span class=\"comment\"> * Even if it returns 0, a subsequent call to request_region()</span>", 
"<span class=\"comment\"> * may fail because another driver etc. just allocated the region.</span>", 
"<span class=\"comment\"> * Do NOT use it.  It will be removed from the kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__check_region\">__check_region</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> * <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#__request_region\">__request_region</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#n\">n</a>, \"check-region\", 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_resource\">release_resource</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__check_region\">__check_region</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __release_region - release a previously reserved resource region</span>", 
"<span class=\"comment\"> * @parent: parent resource descriptor</span>", 
"<span class=\"comment\"> * @start: resource start address</span>", 
"<span class=\"comment\"> * @n: resource region size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The described resource region must match a currently busy region.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__release_region\">__release_region</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> **<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#n\">n</a> - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> >= <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#start\">start</a> || <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> != <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MUXED\">IORESOURCE_MUXED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#muxed_resource_wait\">muxed_resource_wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Trying to free nonexistent resource \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"<%016llx-%016llx>\\n\", (unsigned long long)<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__release_region\">__release_region</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Managed region resource</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#region_devres\">region_devres</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#n\">n</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#devm_region_release\">devm_region_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#region_devres\">region_devres</a> *<a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release_region\">__release_region</a>(<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#devm_region_match\">devm_region_match</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#res\">res</a>, void *<a class=\"id\" href=\"#match_data\">match_data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#region_devres\">region_devres</a> *<a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#res\">res</a>, *<a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#match_data\">match_data</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#parent\">parent</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#n\">n</a> == <a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#resource\">resource</a> * <a class=\"id\" href=\"#__devm_request_region\">__devm_request_region</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#n\">n</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#region_devres\">region_devres</a> *<a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#devres_alloc\">devres_alloc</a>(<a class=\"id\" href=\"#devm_region_release\">devm_region_release</a>, sizeof(struct <a class=\"id\" href=\"#region_devres\">region_devres</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dr\">dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#__request_region\">__request_region</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#name\">name</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_add\">devres_add</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dr\">dr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_free\">devres_free</a>(<a class=\"id\" href=\"#dr\">dr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__devm_request_region\">__devm_request_region</a>);", 
"", 
"void <a class=\"id\" href=\"#__devm_release_region\">__devm_release_region</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#region_devres\">region_devres</a> <a class=\"id\" href=\"#match_data\">match_data</a> = { <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#n\">n</a> };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release_region\">__release_region</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#devres_destroy\">devres_destroy</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#devm_region_release\">devm_region_release</a>, <a class=\"id\" href=\"#devm_region_match\">devm_region_match</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#match_data\">match_data</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__devm_release_region\">__devm_release_region</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from init/main.c to reserve IO ports.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAXRESERVE\">MAXRESERVE</a> 4", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#reserve_setup\">reserve_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#reserved\">reserved</a>;", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#resource\">resource</a> <a class=\"id\" href=\"#reserve\">reserve</a>[<a class=\"id\" href=\"#MAXRESERVE\">MAXRESERVE</a>];", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#io_start\">io_start</a>, <a class=\"id\" href=\"#io_num\">io_num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#reserved\">reserved</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_option\">get_option</a> (&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#io_start\">io_start</a>) != 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_option\">get_option</a> (&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#io_num\">io_num</a>)   == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a> &lt; <a class=\"id\" href=\"#MAXRESERVE\">MAXRESERVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#reserve\">reserve</a> + <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#name\">name</a> = \"reserved\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#io_start\">io_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#io_start\">io_start</a> + <a class=\"id\" href=\"#io_num\">io_num</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#request_resource\">request_resource</a>(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> >= 0x10000 ? &amp;<a class=\"id\" href=\"#iomem_resource\">iomem_resource</a> : &amp;<a class=\"id\" href=\"#ioport_resource\">ioport_resource</a>, <a class=\"id\" href=\"#res\">res</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserved\">reserved</a> = <a class=\"id\" href=\"#x\">x</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"reserve=\", <a class=\"id\" href=\"#reserve_setup\">reserve_setup</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if the requested addr and size spans more than any slot in the</span>", 
"<span class=\"comment\"> * iomem resource tree.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#iomem_map_sanity_check\">iomem_map_sanity_check</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#iomem_resource\">iomem_resource</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#child\">child</a>; <a class=\"id\" href=\"#p\">p</a> ; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#r_next\">r_next</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#l\">l</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can probably skip the resources without</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * IORESOURCE_IO attribute?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start\">start</a>) <= <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#addr\">addr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#end\">end</a>) >= <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if a resource is \"BUSY\", it's not a hardware resource</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but a driver mapping of such a resource; we don't want</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to warn for those; some drivers legitimately map only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * partial hardware resources. (example: vesafb)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"resource map sanity check conflict: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"0x%llx 0x%llx 0x%llx 0x%llx %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> - 1),", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STRICT_DEVMEM\">CONFIG_STRICT_DEVMEM</a>", 
"static int <a class=\"id\" href=\"#strict_iomem_checks\">strict_iomem_checks</a> = 1;", 
"#else", 
"static int <a class=\"id\" href=\"#strict_iomem_checks\">strict_iomem_checks</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * check if an address is reserved in the iomem resource tree</span>", 
"<span class=\"comment\"> * returns 1 if reserved, 0 if not reserved.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#iomem_is_exclusive\">iomem_is_exclusive</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#iomem_resource\">iomem_resource</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strict_iomem_checks\">strict_iomem_checks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#child\">child</a>; <a class=\"id\" href=\"#p\">p</a> ; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#r_next\">r_next</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#l\">l</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can probably skip the resources without</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * IORESOURCE_IO attribute?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_EXCLUSIVE\">IORESOURCE_EXCLUSIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#resource_lock\">resource_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#strict_iomem\">strict_iomem</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#str\">str</a>, \"relaxed\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strict_iomem_checks\">strict_iomem_checks</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#str\">str</a>, \"strict\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strict_iomem_checks\">strict_iomem_checks</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"iomem=\", <a class=\"id\" href=\"#strict_iomem\">strict_iomem</a>);", 
];
xr_frag_insert('l/c6/8494b6650b22b341361f234c24912564a7d121.xr', __xr_tmp);
