var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__mpol_cond_copy\">__mpol_cond_copy</a>(<a class=\"id\" href=\"#tompol\">tompol</a>, <a class=\"id\" href=\"#frompol\">frompol</a>);", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#__mpol_dup\">__mpol_dup</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mpol_dup\">mpol_dup</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pol\">pol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#__mpol_dup\">__mpol_dup</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pol\">pol</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>) ((<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_policy\">vm_policy</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vma_set_policy\">vma_set_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pol\">pol</a>) ((<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_policy\">vm_policy</a> = (<a class=\"id\" href=\"#pol\">pol</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mpol_get\">mpol_get</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pol\">pol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#__mpol_equal\">__mpol_equal</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#b\">b</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mpol_equal\">mpol_equal</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a> == <a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__mpol_equal\">__mpol_equal</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tree of shared policies for a shared memory region.</span>", 
"<span class=\"comment\"> * Maintain the policies in a pseudo mm that contains vmas. The vmas</span>", 
"<span class=\"comment\"> * carry the policy. As a special twist the pseudo mm is indexed in pages, not</span>", 
"<span class=\"comment\"> * bytes, so that we can work with shared memory segments bigger than</span>", 
"<span class=\"comment\"> * unsigned long.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#sp_node\">sp_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> <a class=\"id\" href=\"#nd\">nd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#policy\">policy</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"};", 
"", 
"void <a class=\"id\" href=\"#mpol_shared_policy_init\">mpol_shared_policy_init</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mpol\">mpol</a>);", 
"int <a class=\"id\" href=\"#mpol_set_shared_policy\">mpol_set_shared_policy</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new\">new</a>);", 
"void <a class=\"id\" href=\"#mpol_free_shared_policy\">mpol_free_shared_policy</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mpol_shared_policy_lookup\">mpol_shared_policy_lookup</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#idx\">idx</a>);", 
"", 
"extern void <a class=\"id\" href=\"#numa_default_policy\">numa_default_policy</a>(void);", 
"extern void <a class=\"id\" href=\"#numa_policy_init\">numa_policy_init</a>(void);", 
"extern void <a class=\"id\" href=\"#mpol_rebind_task\">mpol_rebind_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#mpol_rebind_step\">mpol_rebind_step</a> <a class=\"id\" href=\"#step\">step</a>);", 
"extern void <a class=\"id\" href=\"#mpol_rebind_mm\">mpol_rebind_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#new\">new</a>);", 
"extern void <a class=\"id\" href=\"#mpol_fix_fork_child_flag\">mpol_fix_fork_child_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#huge_zonelist\">huge_zonelist</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> **<a class=\"id\" href=\"#mpol\">mpol</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> **<a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#init_nodemask_of_mempolicy\">init_nodemask_of_mempolicy</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>);", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mempolicy_nodemask_intersects\">mempolicy_nodemask_intersects</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>);", 
"extern unsigned <a class=\"id\" href=\"#slab_node\">slab_node</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#policy\">policy</a>);", 
"", 
"extern enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#policy_zone\">policy_zone</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_highest_zone\">check_highest_zone</a>(enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#k\">k</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &gt; <a class=\"id\" href=\"#policy_zone\">policy_zone</a> && <a class=\"id\" href=\"#k\">k</a> != <a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy_zone\">policy_zone</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#do_migrate_pages\">do_migrate_pages</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#from_nodes\">from_nodes</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#to_nodes\">to_nodes</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TMPFS\">CONFIG_TMPFS</a>", 
"extern int <a class=\"id\" href=\"#mpol_parse_str\">mpol_parse_str</a>(char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> **<a class=\"id\" href=\"#mpol\">mpol</a>, int <a class=\"id\" href=\"#no_context\">no_context</a>);", 
"", 
"extern int <a class=\"id\" href=\"#mpol_to_str\">mpol_to_str</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#maxlen\">maxlen</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#no_context\">no_context</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Check if a vma is migratable */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vma_migratable\">vma_migratable</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_IO\">VM_IO</a>|<a class=\"id\" href=\"#VM_HUGETLB\">VM_HUGETLB</a>|<a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>|<a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Migration allocates pages in the highest zone. If we cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do so then migration (at least from node to node) is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#mapping_gfp_mask\">mapping_gfp_mask</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&lt; <a class=\"id\" href=\"#policy_zone\">policy_zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#else", 
"", 
"struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> {};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mpol_equal\">mpol_equal</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mpol_put\">mpol_put</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mpol_cond_put\">mpol_cond_put</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mpol_cond_copy\">mpol_cond_copy</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#from\">from</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mpol_get\">mpol_get</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mpol_dup\">mpol_dup</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> {};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mpol_set_shared_policy\">mpol_set_shared_policy</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mpol_shared_policy_init\">mpol_shared_policy_init</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mpol\">mpol</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mpol_free_shared_policy\">mpol_free_shared_policy</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *", 
"<a class=\"id\" href=\"#mpol_shared_policy_lookup\">mpol_shared_policy_lookup</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>, unsigned long <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>) <a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vma_set_policy\">vma_set_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pol\">pol</a>) do {} while(0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#numa_policy_init\">numa_policy_init</a>(void)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#numa_default_policy\">numa_default_policy</a>(void)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mpol_rebind_task\">mpol_rebind_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#mpol_rebind_step\">mpol_rebind_step</a> <a class=\"id\" href=\"#step\">step</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mpol_rebind_mm\">mpol_rebind_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mpol_fix_fork_child_flag\">mpol_fix_fork_child_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#huge_zonelist\">huge_zonelist</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> **<a class=\"id\" href=\"#mpol\">mpol</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> **<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#mpol\">mpol</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#nodemask\">nodemask</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(0, <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#init_nodemask_of_mempolicy\">init_nodemask_of_mempolicy</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mempolicy_nodemask_intersects\">mempolicy_nodemask_intersects</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#do_migrate_pages\">do_migrate_pages</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#from_nodes\">from_nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#to_nodes\">to_nodes</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_highest_zone\">check_highest_zone</a>(int <a class=\"id\" href=\"#k\">k</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TMPFS\">CONFIG_TMPFS</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mpol_parse_str\">mpol_parse_str</a>(char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> **<a class=\"id\" href=\"#mpol\">mpol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#no_context\">no_context</a>)", 
"{", 
"<span class=\"ts\"/>return 1;<span class=\"ts\"/><span class=\"comment\">/* error */</span>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mpol_to_str\">mpol_to_str</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#maxlen\">maxlen</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#no_context\">no_context</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/c7/4ebb25143ce903a31e7e5de2ef65b9f02c82f7.xr', __xr_tmp);
