var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prctl\">prctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clockchips\">clockchips</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#user\">user</a>-return-<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#utsname\">utsname</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#idle\">idle</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#i387\">i387</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#debugreg\">debugreg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"unsigned long <a class=\"id\" href=\"#idle_halt\">idle_halt</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idle_halt\">idle_halt</a>);", 
"unsigned long <a class=\"id\" href=\"#idle_nomwait\">idle_nomwait</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idle_nomwait\">idle_nomwait</a>);", 
"", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#task_xstate_cachep\">task_xstate_cachep</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#task_xstate_cachep\">task_xstate_cachep</a>);", 
"", 
"int <a class=\"id\" href=\"#arch_dup_task_struct\">arch_dup_task_struct</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fpu_allocated\">fpu_allocated</a>(&amp;<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>, 0, sizeof(<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fpu_alloc\">fpu_alloc</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fpu_copy\">fpu_copy</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>, &amp;<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_thread_xstate\">free_thread_xstate</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpu_free\">fpu_free</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_thread_info\">free_thread_info</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_thread_xstate\">free_thread_xstate</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#arch_task_cache_init\">arch_task_cache_init</a>(void)", 
"{", 
"        <a class=\"id\" href=\"#task_xstate_cachep\">task_xstate_cachep</a> =", 
"        <span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"task_xstate\", <a class=\"id\" href=\"#xstate_size\">xstate_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__alignof__\">__alignof__</a>(union <a class=\"id\" href=\"#thread_xstate\">thread_xstate</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a> | <a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free current thread data structures etc..</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#exit_thread\">exit_thread</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#me\">me</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a> *<a class=\"id\" href=\"#tss\">tss</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#init_tss\">init_tss</a>, <a class=\"id\" href=\"#get_cpu\">get_cpu</a>());", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_thread_flag\">clear_thread_flag</a>(<a class=\"id\" href=\"#TIF_IO_BITMAP\">TIF_IO_BITMAP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Careful, clear this in the TSS too:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tss\">tss</a>-><a class=\"id\" href=\"#io_bitmap\">io_bitmap</a>, 0xff, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#show_regs\">show_regs</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_registers\">show_registers</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_trace\">show_trace</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#regs\">regs</a>, (unsigned long *)<a class=\"id\" href=\"#kernel_stack_pointer\">kernel_stack_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#show_regs_common\">show_regs_common</a>(void)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#board\">board</a>, *<a class=\"id\" href=\"#product\">product</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#board\">board</a> = <a class=\"id\" href=\"#dmi_get_system_info\">dmi_get_system_info</a>(<a class=\"id\" href=\"#DMI_BOARD_NAME\">DMI_BOARD_NAME</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#board\">board</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#board\">board</a> = \"\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#product\">product</a> = <a class=\"id\" href=\"#dmi_get_system_info\">dmi_get_system_info</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#product\">product</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#product\">product</a> = \"\";", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEFAULT\">KERN_DEFAULT</a> \"Pid: %d, comm: %.20s %s %s %.*s %s/%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#print_tainted\">print_tainted</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#release\">release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(int)<a class=\"id\" href=\"#strcspn\">strcspn</a>(<a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#version\">version</a>, \" \"),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#version\">version</a>, <a class=\"id\" href=\"#board\">board</a>, <a class=\"id\" href=\"#product\">product</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#flush_thread\">flush_thread</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_ptrace_hw_breakpoint\">flush_ptrace_hw_breakpoint</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#tls_array\">tls_array</a>, 0, sizeof(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#tls_array\">tls_array</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Forget coprocessor state..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#fpu_counter\">fpu_counter</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_fpu\">clear_fpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_used_math\">clear_used_math</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hard_disable_TSC\">hard_disable_TSC</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_cr4\">write_cr4</a>(<a class=\"id\" href=\"#read_cr4\">read_cr4</a>() | <a class=\"id\" href=\"#X86_CR4_TSD\">X86_CR4_TSD</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#disable_TSC\">disable_TSC</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_thread_flag\">test_and_set_thread_flag</a>(<a class=\"id\" href=\"#TIF_NOTSC\">TIF_NOTSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Must flip the CPU state synchronously with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TIF_NOTSC in the current running context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hard_disable_TSC\">hard_disable_TSC</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hard_enable_TSC\">hard_enable_TSC</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_cr4\">write_cr4</a>(<a class=\"id\" href=\"#read_cr4\">read_cr4</a>() &amp; ~<a class=\"id\" href=\"#X86_CR4_TSD\">X86_CR4_TSD</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#enable_TSC\">enable_TSC</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_thread_flag\">test_and_clear_thread_flag</a>(<a class=\"id\" href=\"#TIF_NOTSC\">TIF_NOTSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Must flip the CPU state synchronously with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TIF_NOTSC in the current running context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hard_enable_TSC\">hard_enable_TSC</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"int <a class=\"id\" href=\"#get_tsc_mode\">get_tsc_mode</a>(unsigned long <a class=\"id\" href=\"#adr\">adr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_NOTSC\">TIF_NOTSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#PR_TSC_SIGSEGV\">PR_TSC_SIGSEGV</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#PR_TSC_ENABLE\">PR_TSC_ENABLE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#val\">val</a>, (unsigned int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#adr\">adr</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#set_tsc_mode\">set_tsc_mode</a>(unsigned int <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#PR_TSC_SIGSEGV\">PR_TSC_SIGSEGV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_TSC\">disable_TSC</a>();", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#PR_TSC_ENABLE\">PR_TSC_ENABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_TSC\">enable_TSC</a>();", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__switch_to_xtra\">__switch_to_xtra</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev_p\">prev_p</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next_p\">next_p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a> *<a class=\"id\" href=\"#tss\">tss</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#prev_p\">prev_p</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = &amp;<a class=\"id\" href=\"#next_p\">next_p</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#prev_p\">prev_p</a>, <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>) ^", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#next_p\">next_p</a>, <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debugctl\">debugctl</a> = <a class=\"id\" href=\"#get_debugctlmsr\">get_debugctlmsr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugctl\">debugctl</a> &= ~<a class=\"id\" href=\"#DEBUGCTLMSR_BTF\">DEBUGCTLMSR_BTF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#next_p\">next_p</a>, <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugctl\">debugctl</a> |= <a class=\"id\" href=\"#DEBUGCTLMSR_BTF\">DEBUGCTLMSR_BTF</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_debugctlmsr\">update_debugctlmsr</a>(<a class=\"id\" href=\"#debugctl\">debugctl</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#prev_p\">prev_p</a>, <a class=\"id\" href=\"#TIF_NOTSC\">TIF_NOTSC</a>) ^", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#next_p\">next_p</a>, <a class=\"id\" href=\"#TIF_NOTSC\">TIF_NOTSC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* prev and next are different */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#next_p\">next_p</a>, <a class=\"id\" href=\"#TIF_NOTSC\">TIF_NOTSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hard_disable_TSC\">hard_disable_TSC</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hard_enable_TSC\">hard_enable_TSC</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#next_p\">next_p</a>, <a class=\"id\" href=\"#TIF_IO_BITMAP\">TIF_IO_BITMAP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Copy the relevant range of the IO bitmap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Normally this is 128 bytes or less:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tss\">tss</a>-><a class=\"id\" href=\"#io_bitmap\">io_bitmap</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a>));", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#prev_p\">prev_p</a>, <a class=\"id\" href=\"#TIF_IO_BITMAP\">TIF_IO_BITMAP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Clear any possible leftover bits:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tss\">tss</a>-><a class=\"id\" href=\"#io_bitmap\">io_bitmap</a>, 0xff, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#propagate_user_return_notify\">propagate_user_return_notify</a>(<a class=\"id\" href=\"#prev_p\">prev_p</a>, <a class=\"id\" href=\"#next_p\">next_p</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#sys_fork\">sys_fork</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_fork\">do_fork</a>(<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#regs\">regs</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is trivial, and on the face of it looks like it</span>", 
"<span class=\"comment\"> * could equally well be done in user mode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Not so, for quite unobvious reasons - register pressure.</span>", 
"<span class=\"comment\"> * In user mode vfork() cannot have a stack frame, and if</span>", 
"<span class=\"comment\"> * done by calling the \"clone()\" system call directly, you</span>", 
"<span class=\"comment\"> * do not have enough call-clobbered registers to hold all</span>", 
"<span class=\"comment\"> * the information you need.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sys_vfork\">sys_vfork</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_fork\">do_fork</a>(<a class=\"id\" href=\"#CLONE_VFORK\">CLONE_VFORK</a> | <a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a> | <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#regs\">regs</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"long", 
"<a class=\"id\" href=\"#sys_clone\">sys_clone</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, unsigned long <a class=\"id\" href=\"#newsp\">newsp</a>,", 
"<span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#parent_tid\">parent_tid</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#child_tid\">child_tid</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#newsp\">newsp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsp\">newsp</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_fork\">do_fork</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#newsp\">newsp</a>, <a class=\"id\" href=\"#regs\">regs</a>, 0, <a class=\"id\" href=\"#parent_tid\">parent_tid</a>, <a class=\"id\" href=\"#child_tid\">child_tid</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This gets run with %si containing the</span>", 
"<span class=\"comment\"> * function to call, and %di containing</span>", 
"<span class=\"comment\"> * the \"args\".</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#kernel_thread_helper\">kernel_thread_helper</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create a kernel thread</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kernel_thread\">kernel_thread</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#arg\">arg</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> <a class=\"id\" href=\"#regs\">regs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#regs\">regs</a>, 0, sizeof(<a class=\"id\" href=\"#regs\">regs</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#si\">si</a> = (unsigned long) <a class=\"id\" href=\"#fn\">fn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#di\">di</a> = (unsigned long) <a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#__USER_DS\">__USER_DS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#__USER_DS\">__USER_DS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#__KERNEL_PERCPU\">__KERNEL_PERCPU</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#gs\">gs</a> = <a class=\"id\" href=\"#__KERNEL_STACK_CANARY\">__KERNEL_STACK_CANARY</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#__KERNEL_DS\">__KERNEL_DS</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#orig_ax\">orig_ax</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#ip\">ip</a> = (unsigned long) <a class=\"id\" href=\"#kernel_thread_helper\">kernel_thread_helper</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a> | <a class=\"id\" href=\"#get_kernel_rpl\">get_kernel_rpl</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a> | 0x2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, create the new process.. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_fork\">do_fork</a>(<a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a> | <a class=\"id\" href=\"#CLONE_UNTRACED\">CLONE_UNTRACED</a>, 0, &amp;<a class=\"id\" href=\"#regs\">regs</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kernel_thread\">kernel_thread</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sys_execve() executes a new program.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#sys_execve\">sys_execve</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *const <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argv\">argv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *const <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#envp\">envp</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#filename\">filename</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filename\">filename</a> = <a class=\"id\" href=\"#getname\">getname</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#filename\">filename</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#filename\">filename</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_execve\">do_execve</a>(<a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#envp\">envp</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure we don't return using sysenter.. */</span>", 
"                <a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#TIF_IRET\">TIF_IRET</a>);", 
"        }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#putname\">putname</a>(<a class=\"id\" href=\"#filename\">filename</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Idle related variables and functions</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#boot_option_idle_override\">boot_option_idle_override</a> = 0;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#boot_option_idle_override\">boot_option_idle_override</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Powermanagement idle function, if any..</span>", 
"<span class=\"comment\"> */</span>", 
"void (*<a class=\"id\" href=\"#pm_idle\">pm_idle</a>)(void);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pm_idle\">pm_idle</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This halt magic was a workaround for ancient floppy DMA</span>", 
"<span class=\"comment\"> * wreckage. It should be safe to remove.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hlt_counter\">hlt_counter</a>;", 
"void <a class=\"id\" href=\"#disable_hlt\">disable_hlt</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlt_counter\">hlt_counter</a>++;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#disable_hlt\">disable_hlt</a>);", 
"", 
"void <a class=\"id\" href=\"#enable_hlt\">enable_hlt</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlt_counter\">hlt_counter</a>--;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#enable_hlt\">enable_hlt</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hlt_use_halt\">hlt_use_halt</a>(void)", 
"{", 
"<span class=\"ts\"/>return (!<a class=\"id\" href=\"#hlt_counter\">hlt_counter</a> && <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#hlt_works_ok\">hlt_works_ok</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hlt_use_halt\">hlt_use_halt</a>(void)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use this if we don't have any better</span>", 
"<span class=\"comment\"> * idle routine..</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#default_idle\">default_idle</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hlt_use_halt\">hlt_use_halt</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_power_start\">trace_power_start</a>(<a class=\"id\" href=\"#POWER_CSTATE\">POWER_CSTATE</a>, 1, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TS_POLLING-cleared state must be visible before we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * test NEED_RESCHED:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#safe_halt\">safe_halt</a>();<span class=\"ts\"/><span class=\"comment\">/* enables interrupts racelessly */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* loop is done by the caller */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_APM_MODULE\">CONFIG_APM_MODULE</a>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#default_idle\">default_idle</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#stop_this_cpu\">stop_this_cpu</a>(void *<a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove this CPU:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_online\">set_cpu_online</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_local_APIC\">disable_local_APIC</a>();", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hlt_works\">hlt_works</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#halt\">halt</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_nothing\">do_nothing</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cpu_idle_wait - Used to ensure that all the CPUs discard old value of</span>", 
"<span class=\"comment\"> * pm_idle and update to new pm_idle value. Required while changing pm_idle</span>", 
"<span class=\"comment\"> * handler on SMP systems.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must have changed pm_idle to the new value before the call. Old</span>", 
"<span class=\"comment\"> * pm_idle value will not be used by any CPU after the return of this function.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpu_idle_wait\">cpu_idle_wait</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* kick all the CPUs so that they exit out of pm_idle */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function\">smp_call_function</a>(<a class=\"id\" href=\"#do_nothing\">do_nothing</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cpu_idle_wait\">cpu_idle_wait</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This uses new MONITOR/MWAIT instructions on P4 processors with PNI,</span>", 
"<span class=\"comment\"> * which can obviate IPI to trigger checking of need_resched.</span>", 
"<span class=\"comment\"> * We execute MONITOR against need_resched and enter optimized wait state</span>", 
"<span class=\"comment\"> * through MWAIT. Whenever someone changes need_resched, we would be woken</span>", 
"<span class=\"comment\"> * up from MWAIT (without an IPI).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * New with Core Duo processors, MWAIT can take some hints based on CPU</span>", 
"<span class=\"comment\"> * capability.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mwait_idle_with_hints\">mwait_idle_with_hints</a>(unsigned long <a class=\"id\" href=\"#ax\">ax</a>, unsigned long <a class=\"id\" href=\"#cx\">cx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_power_start\">trace_power_start</a>(<a class=\"id\" href=\"#POWER_CSTATE\">POWER_CSTATE</a>, (<a class=\"id\" href=\"#ax\">ax</a>>>4)+1, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_resched\">need_resched</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(&amp;<a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a>, <a class=\"id\" href=\"#X86_FEATURE_CLFLUSH_MONITOR\">X86_FEATURE_CLFLUSH_MONITOR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clflush\">clflush</a>((void *)&amp;<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__monitor\">__monitor</a>((void *)&amp;<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#flags\">flags</a>, 0, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mwait\">__mwait</a>(<a class=\"id\" href=\"#ax\">ax</a>, <a class=\"id\" href=\"#cx\">cx</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Default MONITOR/MWAIT with no hints, used for default C1 state */</span>", 
"static void <a class=\"id\" href=\"#mwait_idle\">mwait_idle</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_resched\">need_resched</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_power_start\">trace_power_start</a>(<a class=\"id\" href=\"#POWER_CSTATE\">POWER_CSTATE</a>, 1, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(&amp;<a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a>, <a class=\"id\" href=\"#X86_FEATURE_CLFLUSH_MONITOR\">X86_FEATURE_CLFLUSH_MONITOR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clflush\">clflush</a>((void *)&amp;<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__monitor\">__monitor</a>((void *)&amp;<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#flags\">flags</a>, 0, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sti_mwait\">__sti_mwait</a>(0, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On SMP it's slightly faster (but much more power-consuming!)</span>", 
"<span class=\"comment\"> * to poll the -&gt;work.need_resched flag instead of waiting for the</span>", 
"<span class=\"comment\"> * cross-CPU IPI to arrive. Use this option with caution.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#poll_idle\">poll_idle</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_power_start\">trace_power_start</a>(<a class=\"id\" href=\"#POWER_CSTATE\">POWER_CSTATE</a>, 0, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_power_end\">trace_power_end</a>(0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mwait selection logic:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It depends on the CPU. For AMD CPUs that support MWAIT this is</span>", 
"<span class=\"comment\"> * wrong. Family 0x10 and 0x11 CPUs will enter C1 on HLT. Powersavings</span>", 
"<span class=\"comment\"> * then depend on a clock divisor and current Pstate of the core. If</span>", 
"<span class=\"comment\"> * all cores of a processor are in halt state (C1) the processor can</span>", 
"<span class=\"comment\"> * enter the C1E (C1 enhanced) state. If mwait is used this will never</span>", 
"<span class=\"comment\"> * happen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * idle=mwait overrides this decision and forces the usage of mwait.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#force_mwait\">force_mwait</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MWAIT_INFO\">MWAIT_INFO</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x05", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MWAIT_ECX_EXTENDED_INFO\">MWAIT_ECX_EXTENDED_INFO</a><span class=\"ts\"/><span class=\"ts\"/>0x01", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MWAIT_EDX_C1\">MWAIT_EDX_C1</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0xf0", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#mwait_usable\">mwait_usable</a>(const struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#force_mwait\">force_mwait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> &lt; <a class=\"id\" href=\"#MWAIT_INFO\">MWAIT_INFO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(<a class=\"id\" href=\"#MWAIT_INFO\">MWAIT_INFO</a>, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Check, whether EDX has extended info about MWAIT */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ecx\">ecx</a> &amp; <a class=\"id\" href=\"#MWAIT_ECX_EXTENDED_INFO\">MWAIT_ECX_EXTENDED_INFO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * edx enumeratios MONITOR/MWAIT extensions. Check, whether</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * C1  supports MWAIT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#edx\">edx</a> &amp; <a class=\"id\" href=\"#MWAIT_EDX_C1\">MWAIT_EDX_C1</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#c1e_detected\">c1e_detected</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#c1e_detected\">c1e_detected</a>);", 
"", 
"static <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#c1e_mask\">c1e_mask</a>;", 
"", 
"void <a class=\"id\" href=\"#c1e_remove_cpu\">c1e_remove_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c1e_mask\">c1e_mask</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#c1e_mask\">c1e_mask</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * C1E aware idle routine. We check for C1E active in the interrupt</span>", 
"<span class=\"comment\"> * pending message MSR. If we detect C1E, then we handle it the same</span>", 
"<span class=\"comment\"> * way as C3 power states (local apic timer and TSC stop)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#c1e_idle\">c1e_idle</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#c1e_detected\">c1e_detected</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_K8_INT_PENDING_MSG\">MSR_K8_INT_PENDING_MSG</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lo\">lo</a> &amp; <a class=\"id\" href=\"#K8_INTP_C1E_ACTIVE_MASK\">K8_INTP_C1E_ACTIVE_MASK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c1e_detected\">c1e_detected</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_NONSTOP_TSC\">X86_FEATURE_NONSTOP_TSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_tsc_unstable\">mark_tsc_unstable</a>(\"TSC halt in AMD C1E\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"System has AMD C1E enabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c1e_detected\">c1e_detected</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#c1e_mask\">c1e_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#c1e_mask\">c1e_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Force broadcast so ACPI can not interfere.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_notify\">clockevents_notify</a>(<a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_FORCE\">CLOCK_EVT_NOTIFY_BROADCAST_FORCE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Switch to broadcast mode on CPU%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_notify\">clockevents_notify</a>(<a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_ENTER\">CLOCK_EVT_NOTIFY_BROADCAST_ENTER</a>, &amp;<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_idle\">default_idle</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The switch back from broadcast mode needs to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * called with interrupts disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#clockevents_notify\">clockevents_notify</a>(<a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_EXIT\">CLOCK_EVT_NOTIFY_BROADCAST_EXIT</a>, &amp;<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_idle\">default_idle</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#select_idle_routine\">select_idle_routine</a>(const struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_idle\">pm_idle</a> == <a class=\"id\" href=\"#poll_idle\">poll_idle</a> && <a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"WARNING: polling idle and HT enabled,\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" performance may degrade.\\n\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_idle\">pm_idle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_MWAIT\">X86_FEATURE_MWAIT</a>) && <a class=\"id\" href=\"#mwait_usable\">mwait_usable</a>(<a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * One CPU supports mwait =&gt; All CPUs supports mwait</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"using mwait in idle threads.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_idle\">pm_idle</a> = <a class=\"id\" href=\"#mwait_idle\">mwait_idle</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cpu_has_amd_erratum\">cpu_has_amd_erratum</a>(<a class=\"id\" href=\"#amd_erratum_400\">amd_erratum_400</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* E400: APIC timer interrupt does not wake up CPU from C1e */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"using C1E aware idle routine\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_idle\">pm_idle</a> = <a class=\"id\" href=\"#c1e_idle\">c1e_idle</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_idle\">pm_idle</a> = <a class=\"id\" href=\"#default_idle\">default_idle</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_c1e_mask\">init_c1e_mask</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If we're using c1e_idle, we need to allocate c1e_mask. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_idle\">pm_idle</a> == <a class=\"id\" href=\"#c1e_idle\">c1e_idle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#c1e_mask\">c1e_mask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#idle_setup\">idle_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"poll\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"using polling idle threads.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_idle\">pm_idle</a> = <a class=\"id\" href=\"#poll_idle\">poll_idle</a>;", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"mwait\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_mwait\">force_mwait</a> = 1;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"halt\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When the boot option of idle=halt is added, halt is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * forced to be used for CPU idle. In such case CPU C2/C3</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * won't be used again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * To continue to load the CPU idle driver, don't touch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the boot_option_idle_override.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_idle\">pm_idle</a> = <a class=\"id\" href=\"#default_idle\">default_idle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idle_halt\">idle_halt</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"nomwait\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the boot option of \"idle=nomwait\" is added,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it means that mwait will be disabled for CPU C2/C3</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * states. In such case it won't touch the variable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of boot_option_idle_override.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idle_nomwait\">idle_nomwait</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boot_option_idle_override\">boot_option_idle_override</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"idle\", <a class=\"id\" href=\"#idle_setup\">idle_setup</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#arch_align_stack\">arch_align_stack</a>(unsigned long <a class=\"id\" href=\"#sp\">sp</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &amp; <a class=\"id\" href=\"#ADDR_NO_RANDOMIZE\">ADDR_NO_RANDOMIZE</a>) && <a class=\"id\" href=\"#randomize_va_space\">randomize_va_space</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> -= <a class=\"id\" href=\"#get_random_int\">get_random_int</a>() % 8192;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sp\">sp</a> &amp; ~0xf;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#arch_randomize_brk\">arch_randomize_brk</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#range_end\">range_end</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a> + 0x02000000;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#randomize_range\">randomize_range</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a>, <a class=\"id\" href=\"#range_end\">range_end</a>, 0) ? : <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a>;", 
"}", 
"", 
];
xr_frag_insert('l/c7/9e83b777a255143ddda121c9fc1129562186a7.xr', __xr_tmp);
