var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_SCSI_GENERIC_H\">_SCSI_GENERIC_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_SCSI_GENERIC_H\">_SCSI_GENERIC_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   History:</span>", 
"<span class=\"comment\">    Started: Aug 9 by Lawrence Foard (entropy@world.std.com), to allow user</span>", 
"<span class=\"comment\">     process control of SCSI devices.</span>", 
"<span class=\"comment\">    Development Sponsored by Killy Corp. NY NY</span>", 
"<span class=\"comment\">Original driver (sg.h):</span>", 
"<span class=\"comment\">*       Copyright (C) 1992 Lawrence Foard</span>", 
"<span class=\"comment\">Version 2 and 3 extensions to driver:</span>", 
"<span class=\"comment\">*       Copyright (C) 1998 - 2006 Douglas Gilbert</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    Version: 3.5.34 (20060920)</span>", 
"<span class=\"comment\">    This version is for 2.6 series kernels.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    For a full changelog see http://www.torque.net/sg</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">Map of SG verions to the Linux kernels in which they appear:</span>", 
"<span class=\"comment\">       ----------        ----------------------------------</span>", 
"<span class=\"comment\">       original          all kernels &lt; 2.2.6</span>", 
"<span class=\"comment\">       2.1.40            2.2.20</span>", 
"<span class=\"comment\">       3.0.x             optional version 3 sg driver for 2.2 series</span>", 
"<span class=\"comment\">       3.1.17++          2.4.0++</span>", 
"<span class=\"comment\">       3.5.30++          2.6.0++</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">Major new features in SG 3.x driver (cf SG 2.x drivers)</span>", 
"<span class=\"comment\"><span class=\"ts\"/>- SG_IO ioctl() combines function if write() and read()</span>", 
"<span class=\"comment\"><span class=\"ts\"/>- new interface (sg_io_hdr_t) but still supports old interface</span>", 
"<span class=\"comment\"><span class=\"ts\"/>- scatter/gather in user space, direct IO, and mmap supported</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> The normal action of this driver is to use the adapter (HBA) driver to DMA</span>", 
"<span class=\"comment\"> data into kernel buffers and then use the CPU to copy the data into the </span>", 
"<span class=\"comment\"> user space (vice versa for writes). That is called \"indirect\" IO due to </span>", 
"<span class=\"comment\"> the double handling of data. There are two methods offered to remove the</span>", 
"<span class=\"comment\"> redundant copy: 1) direct IO and 2) using the mmap() system call to map</span>", 
"<span class=\"comment\"> the reserve buffer (this driver has one reserve buffer per fd) into the</span>", 
"<span class=\"comment\"> user space. Both have their advantages.</span>", 
"<span class=\"comment\"> In terms of absolute speed mmap() is faster. If speed is not a concern, </span>", 
"<span class=\"comment\"> indirect IO should be fine. Read the documentation for more information.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> ** N.B. To use direct IO 'echo 1 &gt; /proc/scsi/sg/allow_dio' or</span>", 
"<span class=\"comment\">         'echo 1 &gt; /sys/module/sg/parameters/allow_dio' is needed.</span>", 
"<span class=\"comment\">         That attribute is 0 by default. **</span>", 
"<span class=\"comment\"> </span>", 
"<span class=\"comment\"> Historical note: this SCSI pass-through driver has been known as \"sg\" for </span>", 
"<span class=\"comment\"> a decade. In broader kernel discussions \"sg\" is used to refer to scatter</span>", 
"<span class=\"comment\"> gather techniques. The context should clarify which \"sg\" is referred to.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> Documentation</span>", 
"<span class=\"comment\"> =============</span>", 
"<span class=\"comment\"> A web site for the SG device driver can be found at:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>http://www.torque.net/sg  [alternatively check the MAINTAINERS file]</span>", 
"<span class=\"comment\"> The documentation for the sg version 3 driver can be found at:</span>", 
"<span class=\"comment\"> <span class=\"ts\"/>http://www.torque.net/sg/p/sg_v3_ho.html</span>", 
"<span class=\"comment\"> This is a rendering from DocBook source [change the extension to \"sgml\"</span>", 
"<span class=\"comment\"> or \"xml\"]. There are renderings in \"ps\", \"pdf\", \"rtf\" and \"txt\" (soon).</span>", 
"<span class=\"comment\"> The SG_IO ioctl is now found in other parts kernel (e.g. the block layer).</span>", 
"<span class=\"comment\"> For more information see http://www.torque.net/sg/sg_io.html</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> The older, version 2 documents discuss the original sg interface in detail:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>http://www.torque.net/sg/p/scsi-generic.txt</span>", 
"<span class=\"comment\"><span class=\"ts\"/>http://www.torque.net/sg/p/scsi-generic_long.txt</span>", 
"<span class=\"comment\"> Also available: &lt;kernel_source&gt;/Documentation/scsi/scsi-generic.txt</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> Utility and test programs are available at the sg web site. They are </span>", 
"<span class=\"comment\"> packaged as sg3_utils (for the lk 2.4 and 2.6 series) and sg_utils</span>", 
"<span class=\"comment\"> (for the lk 2.2 series).</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"extern int <a class=\"id\" href=\"#sg_big_buff\">sg_big_buff</a>; <span class=\"comment\">/* for sysctl */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* New interface introduced in the 3.x SG drivers follows */</span>", 
"", 
"typedef struct <a class=\"id\" href=\"#sg_iovec\">sg_iovec</a> <span class=\"comment\">/* same structure as used by readv() Linux system */</span>", 
"{                       <span class=\"comment\">/* call. It defines one scatter-gather element. */</span>", 
"    void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#iov_base\">iov_base</a>;      <span class=\"comment\">/* Starting address  */</span>", 
"    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#iov_len\">iov_len</a>;             <span class=\"comment\">/* Length in bytes  */</span>", 
"} <a class=\"id\" href=\"#sg_iovec_t\">sg_iovec_t</a>;", 
"", 
"", 
"typedef struct <a class=\"id\" href=\"#sg_io_hdr\">sg_io_hdr</a>", 
"{", 
"    int <a class=\"id\" href=\"#interface_id\">interface_id</a>;           <span class=\"comment\">/* [i] 'S' for SCSI generic (required) */</span>", 
"    int <a class=\"id\" href=\"#dxfer_direction\">dxfer_direction</a>;        <span class=\"comment\">/* [i] data transfer direction  */</span>", 
"    unsigned char <a class=\"id\" href=\"#cmd_len\">cmd_len</a>;      <span class=\"comment\">/* [i] SCSI command length ( &lt;= 16 bytes) */</span>", 
"    unsigned char <a class=\"id\" href=\"#mx_sb_len\">mx_sb_len</a>;    <span class=\"comment\">/* [i] max length to write to sbp */</span>", 
"    unsigned short <a class=\"id\" href=\"#iovec_count\">iovec_count</a>; <span class=\"comment\">/* [i] 0 implies no scatter gather */</span>", 
"    unsigned int <a class=\"id\" href=\"#dxfer_len\">dxfer_len</a>;     <span class=\"comment\">/* [i] byte count of data transfer */</span>", 
"    void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#dxferp\">dxferp</a>;<span class=\"ts\"/><span class=\"comment\">/* [i], [*io] points to data transfer memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      or scatter gather list */</span>", 
"    unsigned char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#cmdp\">cmdp</a>; <span class=\"comment\">/* [i], [*i] points to command to perform */</span>", 
"    void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#sbp\">sbp</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* [i], [*o] points to sense_buffer memory */</span>", 
"    unsigned int <a class=\"id\" href=\"#timeout\">timeout</a>;       <span class=\"comment\">/* [i] MAX_UINT-&gt;no timeout (unit: millisec) */</span>", 
"    unsigned int <a class=\"id\" href=\"#flags\">flags</a>;         <span class=\"comment\">/* [i] 0 -&gt; default, see SG_FLAG... */</span>", 
"    int <a class=\"id\" href=\"#pack_id\">pack_id</a>;                <span class=\"comment\">/* [i-&gt;o] unused internally (normally) */</span>", 
"    void <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#usr_ptr\">usr_ptr</a>;      <span class=\"comment\">/* [i-&gt;o] unused internally */</span>", 
"    unsigned char <a class=\"id\" href=\"#status\">status</a>;       <span class=\"comment\">/* [o] scsi status */</span>", 
"    unsigned char <a class=\"id\" href=\"#masked_status\">masked_status</a>;<span class=\"comment\">/* [o] shifted, masked scsi status */</span>", 
"    unsigned char <a class=\"id\" href=\"#msg_status\">msg_status</a>;   <span class=\"comment\">/* [o] messaging level data (optional) */</span>", 
"    unsigned char <a class=\"id\" href=\"#sb_len_wr\">sb_len_wr</a>;    <span class=\"comment\">/* [o] byte count actually written to sbp */</span>", 
"    unsigned short <a class=\"id\" href=\"#host_status\">host_status</a>; <span class=\"comment\">/* [o] errors from host adapter */</span>", 
"    unsigned short <a class=\"id\" href=\"#driver_status\">driver_status</a>;<span class=\"comment\">/* [o] errors from software driver */</span>", 
"    int <a class=\"id\" href=\"#resid\">resid</a>;                  <span class=\"comment\">/* [o] dxfer_len - actual_transferred */</span>", 
"    unsigned int <a class=\"id\" href=\"#duration\">duration</a>;      <span class=\"comment\">/* [o] time taken by cmd (unit: millisec) */</span>", 
"    unsigned int <a class=\"id\" href=\"#info\">info</a>;          <span class=\"comment\">/* [o] auxiliary information */</span>", 
"} <a class=\"id\" href=\"#sg_io_hdr_t\">sg_io_hdr_t</a>;  <span class=\"comment\">/* 64 bytes long (on i386) */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_INTERFACE_ID_ORIG\">SG_INTERFACE_ID_ORIG</a> 'S'", 
"", 
"<span class=\"comment\">/* Use negative values to flag difference from original sg_header structure */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DXFER_NONE\">SG_DXFER_NONE</a> (-1)      <span class=\"comment\">/* e.g. a SCSI Test Unit Ready command */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DXFER_TO_DEV\">SG_DXFER_TO_DEV</a> (-2)    <span class=\"comment\">/* e.g. a SCSI WRITE command */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DXFER_FROM_DEV\">SG_DXFER_FROM_DEV</a> (-3)  <span class=\"comment\">/* e.g. a SCSI READ command */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DXFER_TO_FROM_DEV\">SG_DXFER_TO_FROM_DEV</a> (-4) <span class=\"comment\">/* treated like SG_DXFER_FROM_DEV with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   additional property than during indirect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   IO the user buffer is copied into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   kernel buffers before the transfer */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DXFER_UNKNOWN\">SG_DXFER_UNKNOWN</a> (-5)   <span class=\"comment\">/* Unknown data direction */</span>", 
"", 
"<span class=\"comment\">/* following flag values can be \"or\"-ed together */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_FLAG_DIRECT_IO\">SG_FLAG_DIRECT_IO</a> 1     <span class=\"comment\">/* default is indirect IO */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_FLAG_UNUSED_LUN_INHIBIT\">SG_FLAG_UNUSED_LUN_INHIBIT</a> 2   <span class=\"comment\">/* default is overwrite lun in SCSI */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* command block (when &lt;= SCSI_2) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_FLAG_MMAP_IO\">SG_FLAG_MMAP_IO</a> 4       <span class=\"comment\">/* request memory mapped IO */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_FLAG_NO_DXFER\">SG_FLAG_NO_DXFER</a> 0x10000 <span class=\"comment\">/* no transfer of kernel buffers to/from */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* user space (debug indirect IO) */</span>", 
"", 
"<span class=\"comment\">/* following 'info' values are \"or\"-ed together */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_INFO_OK_MASK\">SG_INFO_OK_MASK</a> 0x1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_INFO_OK\">SG_INFO_OK</a> 0x0          <span class=\"comment\">/* no sense, host nor driver \"noise\" */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_INFO_CHECK\">SG_INFO_CHECK</a> 0x1       <span class=\"comment\">/* something abnormal happened */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_INFO_DIRECT_IO_MASK\">SG_INFO_DIRECT_IO_MASK</a> 0x6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_INFO_INDIRECT_IO\">SG_INFO_INDIRECT_IO</a> 0x0 <span class=\"comment\">/* data xfer via kernel buffers (or no xfer) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_INFO_DIRECT_IO\">SG_INFO_DIRECT_IO</a> 0x2   <span class=\"comment\">/* direct IO requested and performed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_INFO_MIXED_IO\">SG_INFO_MIXED_IO</a> 0x4    <span class=\"comment\">/* part direct, part indirect IO */</span>", 
"", 
"", 
"typedef struct <a class=\"id\" href=\"#sg_scsi_id\">sg_scsi_id</a> { <span class=\"comment\">/* used by SG_GET_SCSI_ID ioctl() */</span>", 
"    int <a class=\"id\" href=\"#host_no\">host_no</a>;        <span class=\"comment\">/* as in \"scsi&lt;n&gt;\" where 'n' is one of 0, 1, 2 etc */</span>", 
"    int <a class=\"id\" href=\"#channel\">channel</a>;", 
"    int <a class=\"id\" href=\"#scsi_id\">scsi_id</a>;        <span class=\"comment\">/* scsi id of target device */</span>", 
"    int <a class=\"id\" href=\"#lun\">lun</a>;", 
"    int <a class=\"id\" href=\"#scsi_type\">scsi_type</a>;      <span class=\"comment\">/* TYPE_... defined in scsi/scsi.h */</span>", 
"    short <a class=\"id\" href=\"#h_cmd_per_lun\">h_cmd_per_lun</a>;<span class=\"comment\">/* host (adapter) maximum commands per lun */</span>", 
"    short <a class=\"id\" href=\"#d_queue_depth\">d_queue_depth</a>;<span class=\"comment\">/* device (or adapter) maximum queue length */</span>", 
"    int <a class=\"id\" href=\"#unused\">unused</a>[2];      <span class=\"comment\">/* probably find a good use, set 0 for now */</span>", 
"} <a class=\"id\" href=\"#sg_scsi_id_t\">sg_scsi_id_t</a>; <span class=\"comment\">/* 32 bytes long on i386 */</span>", 
"", 
"typedef struct <a class=\"id\" href=\"#sg_req_info\">sg_req_info</a> { <span class=\"comment\">/* used by SG_GET_REQUEST_TABLE ioctl() */</span>", 
"    char <a class=\"id\" href=\"#req_state\">req_state</a>;     <span class=\"comment\">/* 0 -&gt; not used, 1 -&gt; written, 2 -&gt; ready to read */</span>", 
"    char <a class=\"id\" href=\"#orphan\">orphan</a>;        <span class=\"comment\">/* 0 -&gt; normal request, 1 -&gt; from interruped SG_IO */</span>", 
"    char <a class=\"id\" href=\"#sg_io_owned\">sg_io_owned</a>;   <span class=\"comment\">/* 0 -&gt; complete with read(), 1 -&gt; owned by SG_IO */</span>", 
"    char <a class=\"id\" href=\"#problem\">problem</a>;       <span class=\"comment\">/* 0 -&gt; no problem detected, 1 -&gt; error to report */</span>", 
"    int <a class=\"id\" href=\"#pack_id\">pack_id</a>;        <span class=\"comment\">/* pack_id associated with request */</span>", 
"    void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#usr_ptr\">usr_ptr</a>;     <span class=\"comment\">/* user provided pointer (in new interface) */</span>", 
"    unsigned int <a class=\"id\" href=\"#duration\">duration</a>; <span class=\"comment\">/* millisecs elapsed since written (req_state==1)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      or request duration (req_state==2) */</span>", 
"    int <a class=\"id\" href=\"#unused\">unused</a>;", 
"} <a class=\"id\" href=\"#sg_req_info_t\">sg_req_info_t</a>; <span class=\"comment\">/* 20 bytes long on i386 */</span>", 
"", 
"", 
"<span class=\"comment\">/* IOCTLs: Those ioctls that are relevant to the SG 3.x drivers follow.</span>", 
"<span class=\"comment\"> [Those that only apply to the SG 2.x drivers are at the end of the file.]</span>", 
"<span class=\"comment\"> (_GET_s yield result via 'int *' 3rd argument unless otherwise indicated) */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_EMULATED_HOST\">SG_EMULATED_HOST</a> 0x2203 <span class=\"comment\">/* true for emulated host adapter (ATAPI) */</span>", 
"", 
"<span class=\"comment\">/* Used to configure SCSI command transformation layer for ATAPI devices */</span>", 
"<span class=\"comment\">/* Only supported by the ide-scsi driver */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SET_TRANSFORM\">SG_SET_TRANSFORM</a> 0x2204 <span class=\"comment\">/* N.B. 3rd arg is not pointer but value: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>      <span class=\"comment\">/* 3rd arg = 0 to disable transform, 1 to enable it */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_TRANSFORM\">SG_GET_TRANSFORM</a> 0x2205", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SET_RESERVED_SIZE\">SG_SET_RESERVED_SIZE</a> 0x2275  <span class=\"comment\">/* request a new reserved buffer size */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_RESERVED_SIZE\">SG_GET_RESERVED_SIZE</a> 0x2272  <span class=\"comment\">/* actual size of reserved buffer */</span>", 
"", 
"<span class=\"comment\">/* The following ioctl has a 'sg_scsi_id_t *' object as its 3rd argument. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_SCSI_ID\">SG_GET_SCSI_ID</a> 0x2276   <span class=\"comment\">/* Yields fd's bus, chan, dev, lun + type */</span>", 
"<span class=\"comment\">/* SCSI id information can also be obtained from SCSI_IOCTL_GET_IDLUN */</span>", 
"", 
"<span class=\"comment\">/* Override host setting and always DMA using low memory ( &lt;16MB on i386) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SET_FORCE_LOW_DMA\">SG_SET_FORCE_LOW_DMA</a> 0x2279  <span class=\"comment\">/* 0-&gt; use adapter setting, 1-&gt; force */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_LOW_DMA\">SG_GET_LOW_DMA</a> 0x227a   <span class=\"comment\">/* 0-&gt; use all ram for dma; 1-&gt; low dma ram */</span>", 
"", 
"<span class=\"comment\">/* When SG_SET_FORCE_PACK_ID set to 1, pack_id is input to read() which</span>", 
"<span class=\"comment\">   tries to fetch a packet with a matching pack_id, waits, or returns EAGAIN.</span>", 
"<span class=\"comment\">   If pack_id is -1 then read oldest waiting. When ...FORCE_PACK_ID set to 0</span>", 
"<span class=\"comment\">   then pack_id ignored by read() and oldest readable fetched. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SET_FORCE_PACK_ID\">SG_SET_FORCE_PACK_ID</a> 0x227b", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_PACK_ID\">SG_GET_PACK_ID</a> 0x227c <span class=\"comment\">/* Yields oldest readable pack_id (or -1) */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_NUM_WAITING\">SG_GET_NUM_WAITING</a> 0x227d <span class=\"comment\">/* Number of commands awaiting read() */</span>", 
"", 
"<span class=\"comment\">/* Yields max scatter gather tablesize allowed by current host adapter */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_SG_TABLESIZE\">SG_GET_SG_TABLESIZE</a> 0x227F  <span class=\"comment\">/* 0 implies can't do scatter gather */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_VERSION_NUM\">SG_GET_VERSION_NUM</a> 0x2282 <span class=\"comment\">/* Example: version 2.1.34 yields 20134 */</span>", 
"", 
"<span class=\"comment\">/* Returns -EBUSY if occupied. 3rd argument pointer to int (see next) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SCSI_RESET\">SG_SCSI_RESET</a> 0x2284", 
"<span class=\"comment\">/* Associated values that can be given to SG_SCSI_RESET follow */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SG_SCSI_RESET_NOTHING\">SG_SCSI_RESET_NOTHING</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SG_SCSI_RESET_DEVICE\">SG_SCSI_RESET_DEVICE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SG_SCSI_RESET_BUS\">SG_SCSI_RESET_BUS</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SG_SCSI_RESET_HOST\">SG_SCSI_RESET_HOST</a><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SG_SCSI_RESET_TARGET\">SG_SCSI_RESET_TARGET</a><span class=\"ts\"/>4", 
"", 
"<span class=\"comment\">/* synchronous SCSI command ioctl, (only in version 3 interface) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_IO\">SG_IO</a> 0x2285   <span class=\"comment\">/* similar effect as write() followed by read() */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_REQUEST_TABLE\">SG_GET_REQUEST_TABLE</a> 0x2286   <span class=\"comment\">/* yields table of active requests */</span>", 
"", 
"<span class=\"comment\">/* How to treat EINTR during SG_IO ioctl(), only in SG 3.x series */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SET_KEEP_ORPHAN\">SG_SET_KEEP_ORPHAN</a> 0x2287 <span class=\"comment\">/* 1 -&gt; hold for read(), 0 -&gt; drop (def) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_KEEP_ORPHAN\">SG_GET_KEEP_ORPHAN</a> 0x2288", 
"", 
"<span class=\"comment\">/* yields scsi midlevel's access_count for this SCSI device */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_ACCESS_COUNT\">SG_GET_ACCESS_COUNT</a> 0x2289  ", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SCATTER_SZ\">SG_SCATTER_SZ</a> (8 * 4096)", 
"<span class=\"comment\">/* Largest size (in bytes) a single scatter-gather list element can have.</span>", 
"<span class=\"comment\">   The value used by the driver is 'max(SG_SCATTER_SZ, PAGE_SIZE)'.</span>", 
"<span class=\"comment\">   This value should be a power of 2 (and may be rounded up internally).</span>", 
"<span class=\"comment\">   If scatter-gather is not supported by adapter then this value is the</span>", 
"<span class=\"comment\">   largest data block that can be read/written by a single scsi command. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DEFAULT_RETRIES\">SG_DEFAULT_RETRIES</a> 0", 
"", 
"<span class=\"comment\">/* Defaults, commented if they differ from original sg driver */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DEF_FORCE_LOW_DMA\">SG_DEF_FORCE_LOW_DMA</a> 0  <span class=\"comment\">/* was 1 -&gt; memory below 16MB on i386 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DEF_FORCE_PACK_ID\">SG_DEF_FORCE_PACK_ID</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DEF_KEEP_ORPHAN\">SG_DEF_KEEP_ORPHAN</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DEF_RESERVED_SIZE\">SG_DEF_RESERVED_SIZE</a> <a class=\"id\" href=\"#SG_SCATTER_SZ\">SG_SCATTER_SZ</a> <span class=\"comment\">/* load time option */</span>", 
"", 
"<span class=\"comment\">/* maximum outstanding requests, write() yields EDOM if exceeded */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_MAX_QUEUE\">SG_MAX_QUEUE</a> 16", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_BIG_BUFF\">SG_BIG_BUFF</a> <a class=\"id\" href=\"#SG_DEF_RESERVED_SIZE\">SG_DEF_RESERVED_SIZE</a>    <span class=\"comment\">/* for backward compatibility */</span>", 
"", 
"<span class=\"comment\">/* Alternate style type names, \"..._t\" variants preferred */</span>", 
"typedef struct <a class=\"id\" href=\"#sg_io_hdr\">sg_io_hdr</a> <a class=\"id\" href=\"#Sg_io_hdr\">Sg_io_hdr</a>;", 
"typedef struct <a class=\"id\" href=\"#sg_io_vec\">sg_io_vec</a> <a class=\"id\" href=\"#Sg_io_vec\">Sg_io_vec</a>;", 
"typedef struct <a class=\"id\" href=\"#sg_scsi_id\">sg_scsi_id</a> <a class=\"id\" href=\"#Sg_scsi_id\">Sg_scsi_id</a>;", 
"typedef struct <a class=\"id\" href=\"#sg_req_info\">sg_req_info</a> <a class=\"id\" href=\"#Sg_req_info\">Sg_req_info</a>;", 
"", 
"", 
"<span class=\"comment\">/* vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv */</span>", 
"<span class=\"comment\">/*   The older SG interface based on the 'sg_header' structure follows.   */</span>", 
"<span class=\"comment\">/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_MAX_SENSE\">SG_MAX_SENSE</a> 16   <span class=\"comment\">/* this only applies to the sg_header interface */</span>", 
"", 
"struct <a class=\"id\" href=\"#sg_header\">sg_header</a>", 
"{", 
"    int <a class=\"id\" href=\"#pack_len\">pack_len</a>;    <span class=\"comment\">/* [o] reply_len (ie useless), ignored as input */</span>", 
"    int <a class=\"id\" href=\"#reply_len\">reply_len</a>;   <span class=\"comment\">/* [i] max length of expected reply (inc. sg_header) */</span>", 
"    int <a class=\"id\" href=\"#pack_id\">pack_id</a>;     <span class=\"comment\">/* [io] id number of packet (use ints &gt;= 0) */</span>", 
"    int <a class=\"id\" href=\"#result\">result</a>;      <span class=\"comment\">/* [o] 0==ok, else (+ve) Unix errno (best ignored) */</span>", 
"    unsigned int <a class=\"id\" href=\"#twelve_byte\">twelve_byte</a>:1;", 
"<span class=\"ts\"/><span class=\"comment\">/* [i] Force 12 byte command length for group 6 &amp; 7 commands  */</span>", 
"    unsigned int <a class=\"id\" href=\"#target_status\">target_status</a>:5;   <span class=\"comment\">/* [o] scsi status from target */</span>", 
"    unsigned int <a class=\"id\" href=\"#host_status\">host_status</a>:8;     <span class=\"comment\">/* [o] host status (see \"DID\" codes) */</span>", 
"    unsigned int <a class=\"id\" href=\"#driver_status\">driver_status</a>:8;   <span class=\"comment\">/* [o] driver status+suggestion */</span>", 
"    unsigned int <a class=\"id\" href=\"#other_flags\">other_flags</a>:10;    <span class=\"comment\">/* unused */</span>", 
"    unsigned char <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[<a class=\"id\" href=\"#SG_MAX_SENSE\">SG_MAX_SENSE</a>]; <span class=\"comment\">/* [o] Output in 3 cases:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   when target_status is CHECK_CONDITION or</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   when target_status is COMMAND_TERMINATED or</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   when (driver_status &amp; DRIVER_SENSE) is true. */</span>", 
"};      <span class=\"comment\">/* This structure is 36 bytes long on i386 */</span>", 
"", 
"", 
"<span class=\"comment\">/* IOCTLs: The following are not required (or ignored) when the sg_io_hdr_t</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   interface is used. They are kept for backward compatibility with</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   the original and version 2 drivers. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SET_TIMEOUT\">SG_SET_TIMEOUT</a> 0x2201  <span class=\"comment\">/* unit: jiffies (10ms on i386) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_TIMEOUT\">SG_GET_TIMEOUT</a> 0x2202  <span class=\"comment\">/* yield timeout as _return_ value */</span>", 
"", 
"<span class=\"comment\">/* Get/set command queuing state per fd (default is SG_DEF_COMMAND_Q.</span>", 
"<span class=\"comment\">   Each time a sg_io_hdr_t object is seen on this file descriptor, this</span>", 
"<span class=\"comment\">   command queuing flag is set on (overriding the previous setting). */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_GET_COMMAND_Q\">SG_GET_COMMAND_Q</a> 0x2270   <span class=\"comment\">/* Yields 0 (queuing off) or 1 (on) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SET_COMMAND_Q\">SG_SET_COMMAND_Q</a> 0x2271   <span class=\"comment\">/* Change queuing state with 0 or 1 */</span>", 
"", 
"<span class=\"comment\">/* Turn on/off error sense trace (1 and 0 respectively, default is off).</span>", 
"<span class=\"comment\">   Try using: \"# cat /proc/scsi/sg/debug\" instead in the v3 driver */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_SET_DEBUG\">SG_SET_DEBUG</a> 0x227e    <span class=\"comment\">/* 0 -&gt; turn off debug */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_NEXT_CMD_LEN\">SG_NEXT_CMD_LEN</a> 0x2283  <span class=\"comment\">/* override SCSI command length with given</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   number on the next write() on this file descriptor */</span>", 
"", 
"", 
"<span class=\"comment\">/* Defaults, commented if they differ from original sg driver */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DEFAULT_TIMEOUT_USER\">SG_DEFAULT_TIMEOUT_USER</a><span class=\"ts\"/>(60*<a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>) <span class=\"comment\">/* HZ == 'jiffies in 1 second' */</span>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DEFAULT_TIMEOUT\">SG_DEFAULT_TIMEOUT</a><span class=\"ts\"/>(60*<a class=\"id\" href=\"#HZ\">HZ</a>)<span class=\"ts\"/>     <span class=\"comment\">/* HZ == 'jiffies in 1 second' */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DEF_COMMAND_Q\">SG_DEF_COMMAND_Q</a> 0     <span class=\"comment\">/* command queuing is always on when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  the new interface is used */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_DEF_UNDERRUN_FLAG\">SG_DEF_UNDERRUN_FLAG</a> 0", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/c8/50fa39ee6a4b5953d7b4f63b5b3300cc625d96.xr', __xr_tmp);
