var __xr_tmp = [
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cap\">cap</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_cmci_disabled\">mce_cmci_disabled</a> || <a class=\"id\" href=\"#mce_ignore_ce\">mce_ignore_ce</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Vendor check is not strictly needed, but the initial</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initialization is vendor keyed and this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * makes sure none of the backdoors are entered otherwise.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> != <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a> || <a class=\"id\" href=\"#lapic_get_maxlvt\">lapic_get_maxlvt</a>() &lt; 6)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCG_CAP\">MSR_IA32_MCG_CAP</a>, <a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#banks\">banks</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned, <a class=\"id\" href=\"#MAX_NR_BANKS\">MAX_NR_BANKS</a>, <a class=\"id\" href=\"#cap\">cap</a> &amp; 0xff);", 
"<span class=\"ts\"/>return !!(<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#MCG_CMCI_P\">MCG_CMCI_P</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The interrupt handler. This is called on every event.</span>", 
"<span class=\"comment\"> * Just call the poller directly to log any events.</span>", 
"<span class=\"comment\"> * This could in theory increase the threshold under high load,</span>", 
"<span class=\"comment\"> * but doesn't for now.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#intel_threshold_interrupt\">intel_threshold_interrupt</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_check_poll\">machine_check_poll</a>(<a class=\"id\" href=\"#MCP_TIMESTAMP\">MCP_TIMESTAMP</a>, &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_banks_owned\">mce_banks_owned</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_notify_irq\">mce_notify_irq</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#print_update\">print_update</a>(char *<a class=\"id\" href=\"#type\">type</a>, int *<a class=\"id\" href=\"#hdr\">hdr</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#hdr\">hdr</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"CPU %d MCA banks\", <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#hdr\">hdr</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" %s:%d\", <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enable CMCI (Corrected Machine Check Interrupt) for available MCE banks</span>", 
"<span class=\"comment\"> * on this CPU. Use the algorithm recommended in the SDM to discover shared</span>", 
"<span class=\"comment\"> * banks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cmci_discover\">cmci_discover</a>(int <a class=\"id\" href=\"#banks\">banks</a>, int <a class=\"id\" href=\"#boot\">boot</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#owned\">owned</a> = (void *)&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_banks_owned\">mce_banks_owned</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hdr\">hdr</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cmci_discover_lock\">cmci_discover_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#banks\">banks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#owned\">owned</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_CTL2\">MSR_IA32_MCx_CTL2</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Already owned by someone else? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#MCI_CTL2_CMCI_EN\">MCI_CTL2_CMCI_EN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#owned\">owned</a>) && !<a class=\"id\" href=\"#boot\">boot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_update\">print_update</a>(\"SHD\", &amp;<a class=\"id\" href=\"#hdr\">hdr</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_poll_banks\">mce_poll_banks</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> &= ~<a class=\"id\" href=\"#MCI_CTL2_CMCI_THRESHOLD_MASK\">MCI_CTL2_CMCI_THRESHOLD_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= <a class=\"id\" href=\"#MCI_CTL2_CMCI_EN\">MCI_CTL2_CMCI_EN</a> | <a class=\"id\" href=\"#CMCI_THRESHOLD\">CMCI_THRESHOLD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_CTL2\">MSR_IA32_MCx_CTL2</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_CTL2\">MSR_IA32_MCx_CTL2</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Did the enable bit stick? -- the bank supports CMCI */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#MCI_CTL2_CMCI_EN\">MCI_CTL2_CMCI_EN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#owned\">owned</a>) && !<a class=\"id\" href=\"#boot\">boot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_update\">print_update</a>(\"CMCI\", &amp;<a class=\"id\" href=\"#hdr\">hdr</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_poll_banks\">mce_poll_banks</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_poll_banks\">mce_poll_banks</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cmci_discover_lock\">cmci_discover_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hdr\">hdr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Just in case we missed an event during initialization check</span>", 
"<span class=\"comment\"> * all the CMCI owned banks.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cmci_recheck\">cmci_recheck</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#banks\">banks</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_available\">mce_available</a>(&amp;<a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a>) || !<a class=\"id\" href=\"#cmci_supported\">cmci_supported</a>(&amp;<a class=\"id\" href=\"#banks\">banks</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_check_poll\">machine_check_poll</a>(<a class=\"id\" href=\"#MCP_TIMESTAMP\">MCP_TIMESTAMP</a>, &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_banks_owned\">mce_banks_owned</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable CMCI on this CPU for all banks it owns when it goes down.</span>", 
"<span class=\"comment\"> * This allows other CPUs to claim the banks on rediscovery.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cmci_clear\">cmci_clear</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#banks\">banks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cmci_supported\">cmci_supported</a>(&amp;<a class=\"id\" href=\"#banks\">banks</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cmci_discover_lock\">cmci_discover_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#banks\">banks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_banks_owned\">mce_banks_owned</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable CMCI */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_CTL2\">MSR_IA32_MCx_CTL2</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> &= ~(<a class=\"id\" href=\"#MCI_CTL2_CMCI_EN\">MCI_CTL2_CMCI_EN</a>|<a class=\"id\" href=\"#MCI_CTL2_CMCI_THRESHOLD_MASK\">MCI_CTL2_CMCI_THRESHOLD_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_CTL2\">MSR_IA32_MCx_CTL2</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_banks_owned\">mce_banks_owned</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cmci_discover_lock\">cmci_discover_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * After a CPU went down cycle through all the others and rediscover</span>", 
"<span class=\"comment\"> * Must run in process context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cmci_rediscover\">cmci_rediscover</a>(int <a class=\"id\" href=\"#dying\">dying</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#banks\">banks</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cmci_supported\">cmci_supported</a>(&amp;<a class=\"id\" href=\"#banks\">banks</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#old\">old</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#dying\">dying</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Recheck banks in case CPUs don't all have the same */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmci_supported\">cmci_supported</a>(&amp;<a class=\"id\" href=\"#banks\">banks</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmci_discover\">cmci_discover</a>(<a class=\"id\" href=\"#banks\">banks</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reenable CMCI on this CPU in case a CPU down failed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cmci_reenable\">cmci_reenable</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#banks\">banks</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmci_supported\">cmci_supported</a>(&amp;<a class=\"id\" href=\"#banks\">banks</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmci_discover\">cmci_discover</a>(<a class=\"id\" href=\"#banks\">banks</a>, 0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#intel_init_cmci\">intel_init_cmci</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#banks\">banks</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cmci_supported\">cmci_supported</a>(&amp;<a class=\"id\" href=\"#banks\">banks</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_threshold_vector\">mce_threshold_vector</a> = <a class=\"id\" href=\"#intel_threshold_interrupt\">intel_threshold_interrupt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmci_discover\">cmci_discover</a>(<a class=\"id\" href=\"#banks\">banks</a>, 1);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For CPU #0 this runs with still disabled APIC, but that's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ok because only the vector is set up. We still do another</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check for the banks later for CPU #0 just to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to not miss any events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTCMCI\">APIC_LVTCMCI</a>, <a class=\"id\" href=\"#THRESHOLD_APIC_VECTOR\">THRESHOLD_APIC_VECTOR</a>|<a class=\"id\" href=\"#APIC_DM_FIXED\">APIC_DM_FIXED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmci_recheck\">cmci_recheck</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#mce_intel_feature_init\">mce_intel_feature_init</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intel_init_thermal\">intel_init_thermal</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intel_init_cmci\">intel_init_cmci</a>();", 
"}", 
];
xr_frag_insert('l/c8/829ccddd4ccac118ce06c69498d85a7fe613a4.xr', __xr_tmp);
