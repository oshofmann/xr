var __xr_tmp = [
"<span class=\"comment\">/* Common capabilities, needed by capability.o.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netlink\">netlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#xattr\">xattr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prctl\">prctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#securebits\">securebits</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syslog\">syslog</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If a non-root user executes a setuid-root binary in</span>", 
"<span class=\"comment\"> * !secure(SECURE_NOROOT) mode, then we raise capabilities.</span>", 
"<span class=\"comment\"> * However if fE is also set, then the intent is for only</span>", 
"<span class=\"comment\"> * the file capabilities to be applied, and the setuid-root</span>", 
"<span class=\"comment\"> * bit is left on either to change the uid (plausible) or</span>", 
"<span class=\"comment\"> * to get full privilege on a kernel without file capabilities</span>", 
"<span class=\"comment\"> * support.  So in that case we do not raise capabilities.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Warn if that happens, once per boot.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#warn_setuid_and_fcaps_mixed\">warn_setuid_and_fcaps_mixed</a>(const char *<a class=\"id\" href=\"#fname\">fname</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#warned\">warned</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#warned\">warned</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"warning: `%s' has both setuid-root and\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" effective capabilities. Therefore not raising all\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" capabilities.\\n\", <a class=\"id\" href=\"#fname\">fname</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warned\">warned</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#cap_netlink_send\">cap_netlink_send</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#eff_cap\">eff_cap</a> = <a class=\"id\" href=\"#current_cap\">current_cap</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cap_netlink_recv\">cap_netlink_recv</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_raised\">cap_raised</a>(<a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#eff_cap\">eff_cap</a>, <a class=\"id\" href=\"#cap\">cap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cap_netlink_recv\">cap_netlink_recv</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_capable - Determine whether a task has a particular effective capability</span>", 
"<span class=\"comment\"> * @tsk: The task to query</span>", 
"<span class=\"comment\"> * @cred: The credentials to use</span>", 
"<span class=\"comment\"> * @cap: The capability to check for</span>", 
"<span class=\"comment\"> * @audit: Whether to write an audit message or not</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether the nominated task has the specified capability amongst</span>", 
"<span class=\"comment\"> * its effective set, returning 0 if it does, -ve if it does not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE WELL: cap_has_capability() cannot be used like the kernel's capable()</span>", 
"<span class=\"comment\"> * and has_capability() functions.  That is, it has the reverse semantics:</span>", 
"<span class=\"comment\"> * cap_has_capability() returns 0 when a task has a capability, but the</span>", 
"<span class=\"comment\"> * kernel's capable() and has_capability() returns 1 for this case.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_capable\">cap_capable</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, int <a class=\"id\" href=\"#cap\">cap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#audit\">audit</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_raised\">cap_raised</a>(<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>, <a class=\"id\" href=\"#cap\">cap</a>) ? 0 : -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_settime - Determine whether the current process may set the system clock</span>", 
"<span class=\"comment\"> * @ts: The time to set</span>", 
"<span class=\"comment\"> * @tz: The timezone to set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether the current process may set the system clock and timezone</span>", 
"<span class=\"comment\"> * information, returning 0 if permission granted, -ve if denied.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_settime\">cap_settime</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>, struct <a class=\"id\" href=\"#timezone\">timezone</a> *<a class=\"id\" href=\"#tz\">tz</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_TIME\">CAP_SYS_TIME</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_ptrace_access_check - Determine whether the current process may access</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   another</span>", 
"<span class=\"comment\"> * @child: The process to be accessed</span>", 
"<span class=\"comment\"> * @mode: The mode of attachment.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether a process may access another, returning 0 if permission</span>", 
"<span class=\"comment\"> * granted, -ve if denied.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_ptrace_access_check\">cap_ptrace_access_check</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(<a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#child\">child</a>)-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current_cred\">current_cred</a>()-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_PTRACE\">CAP_SYS_PTRACE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_ptrace_traceme - Determine whether another process may trace the current</span>", 
"<span class=\"comment\"> * @parent: The task proposed to be the tracer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether the nominated task is permitted to trace the current</span>", 
"<span class=\"comment\"> * process, returning 0 if permission is granted, -ve if denied.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_ptrace_traceme\">cap_ptrace_traceme</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(<a class=\"id\" href=\"#current_cred\">current_cred</a>()-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#parent\">parent</a>)-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#has_capability\">has_capability</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#CAP_SYS_PTRACE\">CAP_SYS_PTRACE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_capget - Retrieve a task's capability sets</span>", 
"<span class=\"comment\"> * @target: The task from which to retrieve the capability sets</span>", 
"<span class=\"comment\"> * @effective: The place to record the effective set</span>", 
"<span class=\"comment\"> * @inheritable: The place to record the inheritable set</span>", 
"<span class=\"comment\"> * @permitted: The place to record the permitted set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function retrieves the capabilities of the nominated task and returns</span>", 
"<span class=\"comment\"> * them to the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_capget\">cap_capget</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>, <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Derived from kernel/capability.c:sys_capget. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#target\">target</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#effective\">effective</a>   = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#inheritable\">inheritable</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#cap_inheritable\">cap_inheritable</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#permitted\">permitted</a>   = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine whether the inheritable capabilities are limited to the old</span>", 
"<span class=\"comment\"> * permitted set.  Returns 1 if they are limited, 0 if they are not.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cap_inh_is_capped\">cap_inh_is_capped</a>(void)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* they are so limited unless the current task has the CAP_SETPCAP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * capability</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cap_capable\">cap_capable</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current_cred\">current_cred</a>(), <a class=\"id\" href=\"#CAP_SETPCAP\">CAP_SETPCAP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SECURITY_CAP_AUDIT\">SECURITY_CAP_AUDIT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_capset - Validate and apply proposed changes to current's capabilities</span>", 
"<span class=\"comment\"> * @new: The proposed new credentials; alterations should be made here</span>", 
"<span class=\"comment\"> * @old: The current task's current credentials</span>", 
"<span class=\"comment\"> * @effective: A pointer to the proposed new effective capabilities set</span>", 
"<span class=\"comment\"> * @inheritable: A pointer to the proposed new inheritable capabilities set</span>", 
"<span class=\"comment\"> * @permitted: A pointer to the proposed new permitted capabilities set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function validates and applies a proposed mass change to the current</span>", 
"<span class=\"comment\"> * process's capability sets.  The changes are made to the proposed new</span>", 
"<span class=\"comment\"> * credentials, and assuming no error, will be committed by the caller of LSM.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_capset\">cap_capset</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/>       const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/>       const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>,", 
"<span class=\"ts\"/>       const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cap_inh_is_capped\">cap_inh_is_capped</a>() &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(*<a class=\"id\" href=\"#inheritable\">inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#cap_combine\">cap_combine</a>(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_inheritable\">cap_inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* incapable of using this inheritable set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(*<a class=\"id\" href=\"#inheritable\">inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#cap_combine\">cap_combine</a>(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_inheritable\">cap_inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_bset\">cap_bset</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no new pI capabilities outside bounding set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* verify restrictions on target's new Permitted set */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(*<a class=\"id\" href=\"#permitted\">permitted</a>, <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* verify the _new_Effective_ is a subset of the _new_Permitted_ */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(*<a class=\"id\" href=\"#effective\">effective</a>, *<a class=\"id\" href=\"#permitted\">permitted</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>   = *<a class=\"id\" href=\"#effective\">effective</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_inheritable\">cap_inheritable</a> = *<a class=\"id\" href=\"#inheritable\">inheritable</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>   = *<a class=\"id\" href=\"#permitted\">permitted</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clear proposed capability sets for execve().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bprm_clear_caps\">bprm_clear_caps</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cap_clear\">cap_clear</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_inode_need_killpriv - Determine if inode change affects privileges</span>", 
"<span class=\"comment\"> * @dentry: The inode/dentry in being changed with change marked ATTR_KILL_PRIV</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine if an inode having a change applied that's marked ATTR_KILL_PRIV</span>", 
"<span class=\"comment\"> * affects the security markings on that inode, and if it is, should</span>", 
"<span class=\"comment\"> * inode_killpriv() be invoked or the change rejected?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if granted; +ve if granted, but inode_killpriv() is required; and</span>", 
"<span class=\"comment\"> * -ve to deny the change.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_inode_need_killpriv\">cap_inode_need_killpriv</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a>)", 
"<span class=\"ts\"/>       return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#XATTR_NAME_CAPS\">XATTR_NAME_CAPS</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_inode_killpriv - Erase the security markings on an inode</span>", 
"<span class=\"comment\"> * @dentry: The inode/dentry to alter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Erase the privilege-enhancing security markings on an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if successful, -ve on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_inode_killpriv\">cap_inode_killpriv</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#removexattr\">removexattr</a>)", 
"<span class=\"ts\"/>       return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#removexattr\">removexattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#XATTR_NAME_CAPS\">XATTR_NAME_CAPS</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the new process capability sets from the capability sets attached</span>", 
"<span class=\"comment\"> * to a file.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bprm_caps_from_vfs_caps\">bprm_caps_from_vfs_caps</a>(struct <a class=\"id\" href=\"#cpu_vfs_cap_data\">cpu_vfs_cap_data</a> *<a class=\"id\" href=\"#caps\">caps</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#effective\">effective</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#caps\">caps</a>-><a class=\"id\" href=\"#magic_etc\">magic_etc</a> &amp; <a class=\"id\" href=\"#VFS_CAP_FLAGS_EFFECTIVE\">VFS_CAP_FLAGS_EFFECTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#effective\">effective</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CAP_FOR_EACH_U32\">CAP_FOR_EACH_U32</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#permitted\">permitted</a> = <a class=\"id\" href=\"#caps\">caps</a>-><a class=\"id\" href=\"#permitted\">permitted</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#inheritable\">inheritable</a> = <a class=\"id\" href=\"#caps\">caps</a>-><a class=\"id\" href=\"#inheritable\">inheritable</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pP' = (X &amp; fP) | (pI &amp; fI)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_bset\">cap_bset</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] &amp; <a class=\"id\" href=\"#permitted\">permitted</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_inheritable\">cap_inheritable</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] &amp; <a class=\"id\" href=\"#inheritable\">inheritable</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#permitted\">permitted</a> &amp; ~<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* insufficient to execute correctly */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For legacy apps, with no internal support for recognizing they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do not have enough capabilities, we return an error if they are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * missing some \"forced\" (aka file-permitted) capabilities.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#effective\">effective</a> ? <a class=\"id\" href=\"#ret\">ret</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Extract the on-exec-apply capability sets for an executable file.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#get_vfs_caps_from_disk\">get_vfs_caps_from_disk</a>(const struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#cpu_vfs_cap_data\">cpu_vfs_cap_data</a> *<a class=\"id\" href=\"#cpu_caps\">cpu_caps</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#magic_etc\">magic_etc</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#tocopy\">tocopy</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfs_cap_data\">vfs_cap_data</a> <a class=\"id\" href=\"#caps\">caps</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cpu_caps\">cpu_caps</a>, 0, sizeof(struct <a class=\"id\" href=\"#cpu_vfs_cap_data\">cpu_vfs_cap_data</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a> || !<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODATA\">ENODATA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a>((struct <a class=\"id\" href=\"#dentry\">dentry</a> *)<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#XATTR_NAME_CAPS\">XATTR_NAME_CAPS</a>, &amp;<a class=\"id\" href=\"#caps\">caps</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#XATTR_CAPS_SZ\">XATTR_CAPS_SZ</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> == -<a class=\"id\" href=\"#ENODATA\">ENODATA</a> || <a class=\"id\" href=\"#size\">size</a> == -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no data, that's ok */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODATA\">ENODATA</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; sizeof(<a class=\"id\" href=\"#magic_etc\">magic_etc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_caps\">cpu_caps</a>-><a class=\"id\" href=\"#magic_etc\">magic_etc</a> = <a class=\"id\" href=\"#magic_etc\">magic_etc</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#caps\">caps</a>.<a class=\"id\" href=\"#magic_etc\">magic_etc</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#magic_etc\">magic_etc</a> &amp; <a class=\"id\" href=\"#VFS_CAP_REVISION_MASK\">VFS_CAP_REVISION_MASK</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VFS_CAP_REVISION_1\">VFS_CAP_REVISION_1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> != <a class=\"id\" href=\"#XATTR_CAPS_SZ_1\">XATTR_CAPS_SZ_1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tocopy\">tocopy</a> = <a class=\"id\" href=\"#VFS_CAP_U32_1\">VFS_CAP_U32_1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VFS_CAP_REVISION_2\">VFS_CAP_REVISION_2</a>:", 
];
xr_frag_insert('l/c8/8552effe9768ad7eeeff699c6456a1260a4c63.xr', __xr_tmp);
