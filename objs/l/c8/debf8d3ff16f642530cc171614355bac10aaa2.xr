var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_COMPACTION_H\">_LINUX_COMPACTION_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_COMPACTION_H\">_LINUX_COMPACTION_H</a>", 
"", 
"<span class=\"comment\">/* Return values for compact_zone() and try_to_compact_pages() */</span>", 
"<span class=\"comment\">/* compaction didn't start as it was not possible or direct reclaim was more suitable */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COMPACT_SKIPPED\">COMPACT_SKIPPED</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"<span class=\"comment\">/* compaction should continue to another pageblock */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COMPACT_CONTINUE\">COMPACT_CONTINUE</a><span class=\"ts\"/>1", 
"<span class=\"comment\">/* direct compaction partially compacted a zone and there are suitable pages */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COMPACT_PARTIAL\">COMPACT_PARTIAL</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"<span class=\"comment\">/* The full zone was compacted */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COMPACT_COMPLETE\">COMPACT_COMPLETE</a><span class=\"ts\"/>3", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPACTION\">CONFIG_COMPACTION</a>", 
"extern int <a class=\"id\" href=\"#sysctl_compact_memory\">sysctl_compact_memory</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_compaction_handler\">sysctl_compaction_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"extern int <a class=\"id\" href=\"#sysctl_extfrag_threshold\">sysctl_extfrag_threshold</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_extfrag_handler\">sysctl_extfrag_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"extern int <a class=\"id\" href=\"#fragmentation_index\">fragmentation_index</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>);", 
"extern unsigned long <a class=\"id\" href=\"#try_to_compact_pages\">try_to_compact_pages</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"comment\">/* Do not skip compaction more than 64 times */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COMPACT_MAX_DEFER_SHIFT\">COMPACT_MAX_DEFER_SHIFT</a> 6", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Compaction is deferred when compaction fails to result in a page</span>", 
"<span class=\"comment\"> * allocation success. 1 &lt;&lt; compact_defer_limit compactions are skipped up</span>", 
"<span class=\"comment\"> * to a limit of 1 &lt;&lt; COMPACT_MAX_DEFER_SHIFT</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#defer_compaction\">defer_compaction</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#compact_considered\">compact_considered</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#compact_defer_shift\">compact_defer_shift</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#compact_defer_shift\">compact_defer_shift</a> &gt; <a class=\"id\" href=\"#COMPACT_MAX_DEFER_SHIFT\">COMPACT_MAX_DEFER_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#compact_defer_shift\">compact_defer_shift</a> = <a class=\"id\" href=\"#COMPACT_MAX_DEFER_SHIFT\">COMPACT_MAX_DEFER_SHIFT</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Returns true if compaction should be skipped this time */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#compaction_deferred\">compaction_deferred</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#defer_limit\">defer_limit</a> = 1UL << <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#compact_defer_shift\">compact_defer_shift</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Avoid possible overflow */</span>", 
"<span class=\"ts\"/>if (++<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#compact_considered\">compact_considered</a> &gt; <a class=\"id\" href=\"#defer_limit\">defer_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#compact_considered\">compact_considered</a> = <a class=\"id\" href=\"#defer_limit\">defer_limit</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#compact_considered\">compact_considered</a> &lt; (1UL << <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#compact_defer_shift\">compact_defer_shift</a>);", 
"}", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#try_to_compact_pages\">try_to_compact_pages</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#COMPACT_CONTINUE\">COMPACT_CONTINUE</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#defer_compaction\">defer_compaction</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#compaction_deferred\">compaction_deferred</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_COMPACTION */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_COMPACTION\">CONFIG_COMPACTION</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>)", 
"extern int <a class=\"id\" href=\"#compaction_register_node\">compaction_register_node</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>);", 
"extern void <a class=\"id\" href=\"#compaction_unregister_node\">compaction_unregister_node</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#compaction_register_node\">compaction_register_node</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#compaction_unregister_node\">compaction_unregister_node</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_COMPACTION &amp;&amp; CONFIG_SYSFS &amp;&amp; CONFIG_NUMA */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_COMPACTION_H */</span>", 
];
xr_frag_insert('l/c8/debf8d3ff16f642530cc171614355bac10aaa2.xr', __xr_tmp);
