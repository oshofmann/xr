var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kallsyms.c: in-kernel printing of symbolic oopses and stack traces.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Rewritten and vastly simplified by Rusty Russell for in-kernel</span>", 
"<span class=\"comment\"> * module loader:</span>", 
"<span class=\"comment\"> *   Copyright 2002 Rusty Russell &lt;rusty@rustcorp.com.au&gt; IBM Corporation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ChangeLog:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (25/Aug/2004) Paulo Marques &lt;pmarques@grupopie.com&gt;</span>", 
"<span class=\"comment\"> *      Changed the compression method from stem compression to \"table lookup\"</span>", 
"<span class=\"comment\"> *      compression (see scripts/kallsyms.c for a more complete description)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdb\">kdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"comment\">/* for cond_resched */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KALLSYMS_ALL\">CONFIG_KALLSYMS_ALL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#all_var\">all_var</a> 1", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#all_var\">all_var</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These will be re-linked against their real values</span>", 
"<span class=\"comment\"> * during the second link stage.</span>", 
"<span class=\"comment\"> */</span>", 
"extern const unsigned long <a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[] <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>));", 
"extern const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#kallsyms_names\">kallsyms_names</a>[] <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>));", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tell the compiler that the count isn't in the small data section if the arch</span>", 
"<span class=\"comment\"> * has one (eg: FRV).</span>", 
"<span class=\"comment\"> */</span>", 
"extern const unsigned long <a class=\"id\" href=\"#kallsyms_num_syms\">kallsyms_num_syms</a>", 
"<a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>, <a class=\"id\" href=\"#section\">section</a>(\".rodata\")));", 
"", 
"extern const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#kallsyms_token_table\">kallsyms_token_table</a>[] <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>));", 
"extern const <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#kallsyms_token_index\">kallsyms_token_index</a>[] <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>));", 
"", 
"extern const unsigned long <a class=\"id\" href=\"#kallsyms_markers\">kallsyms_markers</a>[] <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>));", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_kernel_inittext\">is_kernel_inittext</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= (unsigned long)<a class=\"id\" href=\"#_sinittext\">_sinittext</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#addr\">addr</a> <= (unsigned long)<a class=\"id\" href=\"#_einittext\">_einittext</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_kernel_text\">is_kernel_text</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#addr\">addr</a> >= (unsigned long)<a class=\"id\" href=\"#_stext\">_stext</a> && <a class=\"id\" href=\"#addr\">addr</a> <= (unsigned long)<a class=\"id\" href=\"#_etext\">_etext</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#arch_is_kernel_text\">arch_is_kernel_text</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#in_gate_area_no_task\">in_gate_area_no_task</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_kernel\">is_kernel</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= (unsigned long)<a class=\"id\" href=\"#_stext\">_stext</a> && <a class=\"id\" href=\"#addr\">addr</a> <= (unsigned long)<a class=\"id\" href=\"#_end\">_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#in_gate_area_no_task\">in_gate_area_no_task</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#is_ksym_addr\">is_ksym_addr</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#all_var\">all_var</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#is_kernel\">is_kernel</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#is_kernel_text\">is_kernel_text</a>(<a class=\"id\" href=\"#addr\">addr</a>) || <a class=\"id\" href=\"#is_kernel_inittext\">is_kernel_inittext</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Expand a compressed symbol data into the resulting uncompressed string,</span>", 
"<span class=\"comment\"> * given the offset to where the symbol is in the compressed stream.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#kallsyms_expand_symbol\">kallsyms_expand_symbol</a>(unsigned int <a class=\"id\" href=\"#off\">off</a>, char *<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#skipped_first\">skipped_first</a> = 0;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#tptr\">tptr</a>, *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the compressed symbol length from the first symbol byte. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#kallsyms_names\">kallsyms_names</a>[<a class=\"id\" href=\"#off\">off</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the offset to return the offset for the next symbol on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the compressed stream.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> += <a class=\"id\" href=\"#len\">len</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For every byte on the compressed symbol data, copy the table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * entry for that byte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tptr\">tptr</a> = &amp;<a class=\"id\" href=\"#kallsyms_token_table\">kallsyms_token_table</a>[<a class=\"id\" href=\"#kallsyms_token_index\">kallsyms_token_index</a>[*<a class=\"id\" href=\"#data\">data</a>]];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#tptr\">tptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skipped_first\">skipped_first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = *<a class=\"id\" href=\"#tptr\">tptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skipped_first\">skipped_first</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tptr\">tptr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = '\\0';", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return to offset to the next symbol. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#off\">off</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get symbol type information. This is encoded as a single char at the</span>", 
"<span class=\"comment\"> * beginning of the symbol name.</span>", 
"<span class=\"comment\"> */</span>", 
"static char <a class=\"id\" href=\"#kallsyms_get_symbol_type\">kallsyms_get_symbol_type</a>(unsigned int <a class=\"id\" href=\"#off\">off</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get just the first code, look it up in the token table,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and return the first char from this token.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kallsyms_token_table\">kallsyms_token_table</a>[<a class=\"id\" href=\"#kallsyms_token_index\">kallsyms_token_index</a>[<a class=\"id\" href=\"#kallsyms_names\">kallsyms_names</a>[<a class=\"id\" href=\"#off\">off</a> + 1]]];", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find the offset on the compressed stream given and index in the</span>", 
"<span class=\"comment\"> * kallsyms array.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#get_symbol_offset\">get_symbol_offset</a>(unsigned long <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use the closest marker we have. We have markers every 256 positions,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that should be close enough.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = &amp;<a class=\"id\" href=\"#kallsyms_names\">kallsyms_names</a>[<a class=\"id\" href=\"#kallsyms_markers\">kallsyms_markers</a>[<a class=\"id\" href=\"#pos\">pos</a> >> 8]];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sequentially scan all the symbols up to the point we're searching</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for. Every symbol is stored in a [&lt;len&gt;][&lt;len&gt; bytes of data] format,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we just need to add the len to the current pointer for every</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * symbol we wish to skip.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (<a class=\"id\" href=\"#pos\">pos</a> &amp; 0xFF); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a> + (*<a class=\"id\" href=\"#name\">name</a>) + 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#name\">name</a> - <a class=\"id\" href=\"#kallsyms_names\">kallsyms_names</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Lookup the address for this symbol. Returns 0 if not found. */</span>", 
"unsigned long <a class=\"id\" href=\"#kallsyms_lookup_name\">kallsyms_lookup_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#namebuf\">namebuf</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#off\">off</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#kallsyms_num_syms\">kallsyms_num_syms</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#kallsyms_expand_symbol\">kallsyms_expand_symbol</a>(<a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#namebuf\">namebuf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#namebuf\">namebuf</a>, <a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#module_kallsyms_lookup_name\">module_kallsyms_lookup_name</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kallsyms_lookup_name\">kallsyms_lookup_name</a>);", 
"", 
"int <a class=\"id\" href=\"#kallsyms_on_each_symbol\">kallsyms_on_each_symbol</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *, const char *, struct <a class=\"id\" href=\"#module\">module</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#namebuf\">namebuf</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#off\">off</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#kallsyms_num_syms\">kallsyms_num_syms</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#kallsyms_expand_symbol\">kallsyms_expand_symbol</a>(<a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#namebuf\">namebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#namebuf\">namebuf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#module_kallsyms_on_each_symbol\">module_kallsyms_on_each_symbol</a>(<a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kallsyms_on_each_symbol\">kallsyms_on_each_symbol</a>);", 
"", 
"static unsigned long <a class=\"id\" href=\"#get_symbol_pos\">get_symbol_pos</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#symbolsize\">symbolsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#symbol_start\">symbol_start</a> = 0, <a class=\"id\" href=\"#symbol_end\">symbol_end</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#low\">low</a>, <a class=\"id\" href=\"#high\">high</a>, <a class=\"id\" href=\"#mid\">mid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This kernel should never had been booted. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do a binary search on the sorted kallsyms_addresses array. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#high\">high</a> = <a class=\"id\" href=\"#kallsyms_num_syms\">kallsyms_num_syms</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#high\">high</a> - <a class=\"id\" href=\"#low\">low</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mid\">mid</a> = <a class=\"id\" href=\"#low\">low</a> + (<a class=\"id\" href=\"#high\">high</a> - <a class=\"id\" href=\"#low\">low</a>) / 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[<a class=\"id\" href=\"#mid\">mid</a>] <= <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> = <a class=\"id\" href=\"#mid\">mid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#high\">high</a> = <a class=\"id\" href=\"#mid\">mid</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Search for the first aliased symbol. Aliased</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * symbols are symbols with the same address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#low\">low</a> && <a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[<a class=\"id\" href=\"#low\">low</a>-1] == <a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[<a class=\"id\" href=\"#low\">low</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#low\">low</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#symbol_start\">symbol_start</a> = <a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[<a class=\"id\" href=\"#low\">low</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Search for next non-aliased symbol. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#low\">low</a> + 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#kallsyms_num_syms\">kallsyms_num_syms</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[<a class=\"id\" href=\"#i\">i</a>] &gt; <a class=\"id\" href=\"#symbol_start\">symbol_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#symbol_end\">symbol_end</a> = <a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we found no next symbol, we use the end of the section. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#symbol_end\">symbol_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_kernel_inittext\">is_kernel_inittext</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#symbol_end\">symbol_end</a> = (unsigned long)<a class=\"id\" href=\"#_einittext\">_einittext</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#all_var\">all_var</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#symbol_end\">symbol_end</a> = (unsigned long)<a class=\"id\" href=\"#_end\">_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#symbol_end\">symbol_end</a> = (unsigned long)<a class=\"id\" href=\"#_etext\">_etext</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#symbolsize\">symbolsize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#symbolsize\">symbolsize</a> = <a class=\"id\" href=\"#symbol_end\">symbol_end</a> - <a class=\"id\" href=\"#symbol_start\">symbol_start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#symbol_start\">symbol_start</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#low\">low</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lookup an address but don't bother to find any names.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kallsyms_lookup_size_offset\">kallsyms_lookup_size_offset</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long *<a class=\"id\" href=\"#symbolsize\">symbolsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#namebuf\">namebuf</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_ksym_addr\">is_ksym_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return !!<a class=\"id\" href=\"#get_symbol_pos\">get_symbol_pos</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#symbolsize\">symbolsize</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/>return !!<a class=\"id\" href=\"#module_address_lookup\">module_address_lookup</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#symbolsize\">symbolsize</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#namebuf\">namebuf</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lookup an address</span>", 
"<span class=\"comment\"> * - modname is set to NULL if it's in the kernel.</span>", 
"<span class=\"comment\"> * - We guarantee that the returned name is valid until we reschedule even if.</span>", 
"<span class=\"comment\"> *   It resides in a module.</span>", 
"<span class=\"comment\"> * - We also guarantee that modname will be valid until rescheduled.</span>", 
"<span class=\"comment\"> */</span>", 
"const char *<a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#symbolsize\">symbolsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char **<a class=\"id\" href=\"#modname\">modname</a>, char *<a class=\"id\" href=\"#namebuf\">namebuf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#namebuf\">namebuf</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a> - 1] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#namebuf\">namebuf</a>[0] = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_ksym_addr\">is_ksym_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#get_symbol_pos\">get_symbol_pos</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#symbolsize\">symbolsize</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Grab name */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kallsyms_expand_symbol\">kallsyms_expand_symbol</a>(<a class=\"id\" href=\"#get_symbol_offset\">get_symbol_offset</a>(<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#namebuf\">namebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#modname\">modname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#modname\">modname</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#namebuf\">namebuf</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See if it's in a module. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#module_address_lookup\">module_address_lookup</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#symbolsize\">symbolsize</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#modname\">modname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#namebuf\">namebuf</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#lookup_symbol_name\">lookup_symbol_name</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, char *<a class=\"id\" href=\"#symname\">symname</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#symname\">symname</a>[0] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#symname\">symname</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a> - 1] = '\\0';", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_ksym_addr\">is_ksym_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#get_symbol_pos\">get_symbol_pos</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Grab name */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kallsyms_expand_symbol\">kallsyms_expand_symbol</a>(<a class=\"id\" href=\"#get_symbol_offset\">get_symbol_offset</a>(<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#symname\">symname</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* See if it's in a module. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lookup_module_symbol_name\">lookup_module_symbol_name</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#symname\">symname</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#lookup_symbol_attrs\">lookup_symbol_attrs</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long *<a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#offset\">offset</a>, char *<a class=\"id\" href=\"#modname\">modname</a>, char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>[0] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a> - 1] = '\\0';", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_ksym_addr\">is_ksym_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#get_symbol_pos\">get_symbol_pos</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Grab name */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kallsyms_expand_symbol\">kallsyms_expand_symbol</a>(<a class=\"id\" href=\"#get_symbol_offset\">get_symbol_offset</a>(<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#modname\">modname</a>[0] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* See if it's in a module. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lookup_module_symbol_attrs\">lookup_module_symbol_attrs</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Look up a kernel symbol and return it in a text buffer. */</span>", 
"int <a class=\"id\" href=\"#sprint_symbol\">sprint_symbol</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#modname\">modname</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, &amp;<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"0x%lx\", <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a> != <a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#modname\">modname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"+%#lx/%#lx [%s]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#modname\">modname</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"+%#lx/%#lx\", <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sprint_symbol\">sprint_symbol</a>);", 
"", 
"<span class=\"comment\">/* Look up a kernel symbol and print it to the kernel messages. */</span>", 
"void <a class=\"id\" href=\"#__print_symbol\">__print_symbol</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#KSYM_SYMBOL_LEN\">KSYM_SYMBOL_LEN</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprint_symbol\">sprint_symbol</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__print_symbol\">__print_symbol</a>);", 
"", 
"<span class=\"comment\">/* To avoid using get_symbol_offset for every symbol, we carry prefix along. */</span>", 
"struct <a class=\"id\" href=\"#kallsym_iter\">kallsym_iter</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nameoff\">nameoff</a>; <span class=\"comment\">/* If iterating in core kernel symbols. */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>];", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#module_name\">module_name</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#exported\">exported</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#get_ksymbol_mod\">get_ksymbol_mod</a>(struct <a class=\"id\" href=\"#kallsym_iter\">kallsym_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#module_get_kallsym\">module_get_kallsym</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pos\">pos</a> - <a class=\"id\" href=\"#kallsyms_num_syms\">kallsyms_num_syms</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#exported\">exported</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* Returns space to next name. */</span>", 
"static unsigned long <a class=\"id\" href=\"#get_ksymbol_core\">get_ksymbol_core</a>(struct <a class=\"id\" href=\"#kallsym_iter\">kallsym_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#nameoff\">nameoff</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#module_name\">module_name</a>[0] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#kallsyms_addresses\">kallsyms_addresses</a>[<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pos\">pos</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#kallsyms_get_symbol_type\">kallsyms_get_symbol_type</a>(<a class=\"id\" href=\"#off\">off</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#kallsyms_expand_symbol\">kallsyms_expand_symbol</a>(<a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#off\">off</a> - <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#nameoff\">nameoff</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#reset_iter\">reset_iter</a>(struct <a class=\"id\" href=\"#kallsym_iter\">kallsym_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#new_pos\">new_pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#name\">name</a>[0] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#nameoff\">nameoff</a> = <a class=\"id\" href=\"#get_symbol_offset\">get_symbol_offset</a>(<a class=\"id\" href=\"#new_pos\">new_pos</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#new_pos\">new_pos</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Returns false if pos at or past end of file. */</span>", 
"static int <a class=\"id\" href=\"#update_iter\">update_iter</a>(struct <a class=\"id\" href=\"#kallsym_iter\">kallsym_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Module symbols can be accessed randomly. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> >= <a class=\"id\" href=\"#kallsyms_num_syms\">kallsyms_num_syms</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_ksymbol_mod\">get_ksymbol_mod</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we're not on the desired position, reset to new position. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> != <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_iter\">reset_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#nameoff\">nameoff</a> += <a class=\"id\" href=\"#get_ksymbol_core\">get_ksymbol_core</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pos\">pos</a>++;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#s_next\">s_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#pos\">pos</a>)++;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#update_iter\">update_iter</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>, *<a class=\"id\" href=\"#pos\">pos</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#s_start\">s_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#update_iter\">update_iter</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>, *<a class=\"id\" href=\"#pos\">pos</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#s_stop\">s_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"}", 
"", 
"static int <a class=\"id\" href=\"#s_show\">s_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kallsym_iter\">kallsym_iter</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Some debugging symbols have no name.  Ignore them. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#name\">name</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#module_name\">module_name</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Label it \"global\" if it is exported,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"local\" if not exported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#exported\">exported</a> ? <a class=\"id\" href=\"#toupper\">toupper</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#type\">type</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tolower\">tolower</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%0*lx %c %s\\t[%s]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (int)(2 * sizeof(void *)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#module_name\">module_name</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%0*lx %c %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (int)(2 * sizeof(void *)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#kallsyms_op\">kallsyms_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#s_start\">s_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#s_next\">s_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a> = <a class=\"id\" href=\"#s_stop\">s_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#s_show\">s_show</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#kallsyms_open\">kallsyms_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We keep iterator in m-&gt;private, since normal case is to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * s_start from where we left off, so we avoid doing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using get_symbol_offset for every symbol.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kallsym_iter\">kallsym_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#iter\">iter</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reset_iter\">reset_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#kallsyms_op\">kallsyms_op</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>((struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>)-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"const char *<a class=\"id\" href=\"#kdb_walk_kallsyms\">kdb_walk_kallsyms</a>(<a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#kallsym_iter\">kallsym_iter</a> <a class=\"id\" href=\"#kdb_walk_kallsyms_iter\">kdb_walk_kallsyms_iter</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#kdb_walk_kallsyms_iter\">kdb_walk_kallsyms_iter</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#kdb_walk_kallsyms_iter\">kdb_walk_kallsyms_iter</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_iter\">reset_iter</a>(&amp;<a class=\"id\" href=\"#kdb_walk_kallsyms_iter\">kdb_walk_kallsyms_iter</a>, 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#update_iter\">update_iter</a>(&amp;<a class=\"id\" href=\"#kdb_walk_kallsyms_iter\">kdb_walk_kallsyms_iter</a>, *<a class=\"id\" href=\"#pos\">pos</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Some debugging symbols have no name.  Ignore them. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kdb_walk_kallsyms_iter\">kdb_walk_kallsyms_iter</a>.<a class=\"id\" href=\"#name\">name</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kdb_walk_kallsyms_iter\">kdb_walk_kallsyms_iter</a>.<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_KGDB_KDB */</span>", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#kallsyms_operations\">kallsyms_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#kallsyms_open\">kallsyms_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#seq_release_private\">seq_release_private</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kallsyms_init\">kallsyms_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"kallsyms\", 0444, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#kallsyms_operations\">kallsyms_operations</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#device_initcall\">device_initcall</a>(<a class=\"id\" href=\"#kallsyms_init\">kallsyms_init</a>);", 
];
xr_frag_insert('l/c8/fe2423e1b5a15b418068d5bd37bd4f93018d1f.xr', __xr_tmp);
