var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Generic process-grouping system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Based originally on the cpuset system, extracted by Paul Menage</span>", 
"<span class=\"comment\"> *  Copyright (C) 2006 Google, Inc</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Notifications support</span>", 
"<span class=\"comment\"> *  Copyright (C) 2009 Nokia Corporation</span>", 
"<span class=\"comment\"> *  Author: Kirill A. Shutemov</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright notices from the original cpuset code:</span>", 
"<span class=\"comment\"> *  --------------------------------------------------</span>", 
"<span class=\"comment\"> *  Copyright (C) 2003 BULL SA.</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004-2006 Silicon Graphics, Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Portions derived from Patrick Mochel's sysfs code.</span>", 
"<span class=\"comment\"> *  sysfs is Copyright (c) 2001-3 Patrick Mochel</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  2003-10-10 Written by Simon Derr.</span>", 
"<span class=\"comment\"> *  2003-10-22 Updates by Stephen Hemminger.</span>", 
"<span class=\"comment\"> *  2004 May-July Rework by Paul Jackson.</span>", 
"<span class=\"comment\"> *  ---------------------------------------------------</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This file is subject to the terms and conditions of the GNU General Public</span>", 
"<span class=\"comment\"> *  License.  See the file COPYING in the main directory of the Linux</span>", 
"<span class=\"comment\"> *  distribution for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup\">cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sort\">sort</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delayacct\">delayacct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroupstats\">cgroupstats</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp_lock\">smp_lock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* TODO: replace with more sophisticated array */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#eventfd\">eventfd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generate an array of cgroup subsystem pointers. At boot time, this is</span>", 
"<span class=\"comment\"> * populated up to CGROUP_BUILTIN_SUBSYS_COUNT, and modular subsystems are</span>", 
"<span class=\"comment\"> * registered after that. The mutable section of this array is protected by</span>", 
"<span class=\"comment\"> * cgroup_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SUBSYS\">SUBSYS</a>(<a class=\"id\" href=\"#_x\">_x</a>) &amp;<a class=\"id\" href=\"#_x\">_x</a> ## <a class=\"id\" href=\"#_subsys\">_subsys</a>,", 
"static struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>] = {", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_CGROUP_ROOT_NAMELEN\">MAX_CGROUP_ROOT_NAMELEN</a> 64", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A cgroupfs_root represents the root of a cgroup hierarchy,</span>", 
"<span class=\"comment\"> * and may be associated with a superblock to form an active</span>", 
"<span class=\"comment\"> * hierarchy</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The bitmask of subsystems intended to be attached to this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hierarchy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unique id for this hierarchy. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hierarchy_id\">hierarchy_id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The bitmask of subsystems currently attached to this hierarchy */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#actual_subsys_bits\">actual_subsys_bits</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* A list running through the attached subsystems */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#subsys_list\">subsys_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The root cgroup for this hierarchy */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> <a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tracks how many cgroups are currently defined in hierarchy.*/</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#number_of_cgroups\">number_of_cgroups</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* A list running through the active hierarchies */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#root_list\">root_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hierarchy-specific flags */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The path to use for release notifications. */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#release_agent_path\">release_agent_path</a>[<a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The name for this hierarchy - may be empty */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#MAX_CGROUP_ROOT_NAMELEN\">MAX_CGROUP_ROOT_NAMELEN</a>];", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The \"rootnode\" hierarchy is the \"dummy hierarchy\", reserved for the</span>", 
"<span class=\"comment\"> * subsystems that are otherwise unattached - it never has more than a</span>", 
"<span class=\"comment\"> * single cgroup, and all tasks are part of that cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> <a class=\"id\" href=\"#rootnode\">rootnode</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CSS ID -- ID per subsys's Cgroup Subsys State(CSS). used only when</span>", 
"<span class=\"comment\"> * cgroup_subsys-&gt;use_id != 0.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CSS_ID_MAX\">CSS_ID_MAX</a><span class=\"ts\"/>(65535)", 
"struct <a class=\"id\" href=\"#css_id\">css_id</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The css to which this ID points. This pointer is set to valid value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * after cgroup is populated. If cgroup is removed, this will be NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This pointer is expected to be RCU-safe because destroy()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is called after synchronize_rcu(). But for safe use, css_is_removed()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * css_tryget() should be used for avoiding race.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ID of this css.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Depth in hierarchy which this ID belongs to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ID is freed by RCU. (and lookup routine is RCU safe.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hierarchy of CSS ID belongs to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#stack\">stack</a>[0]; <span class=\"comment\">/* Array of Length (depth+1) */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cgroup_event represents events which userspace want to recieve.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cgroup_event\">cgroup_event</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cgroup which the event belongs to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Control file which the event associated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * eventfd to signal userspace about the event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd\">eventfd</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Each of these stored in a list by the cgroup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All fields below needed to unregister event when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * userspace closes eventfd.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_table\">poll_table</a> <a class=\"id\" href=\"#pt\">pt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wqh\">wqh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#remove\">remove</a>;", 
"};", 
"", 
"<span class=\"comment\">/* The list of hierarchy roots */</span>", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#roots\">roots</a>);", 
"static int <a class=\"id\" href=\"#root_count\">root_count</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_IDA\">DEFINE_IDA</a>(<a class=\"id\" href=\"#hierarchy_ida\">hierarchy_ida</a>);", 
"static int <a class=\"id\" href=\"#next_hierarchy_id\">next_hierarchy_id</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#hierarchy_id_lock\">hierarchy_id_lock</a>);", 
"", 
"<span class=\"comment\">/* dummytop is a shorthand for the dummy hierarchy's top cgroup */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dummytop\">dummytop</a> (&amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>.<a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>)", 
"", 
"<span class=\"comment\">/* This flag indicates whether tasks in the fork and exit paths should</span>", 
"<span class=\"comment\"> * check for fork/exit handlers to call. This avoids us having to do</span>", 
"<span class=\"comment\"> * extra work in the fork/exit path if none of the subsystems need to</span>", 
"<span class=\"comment\"> * be called.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#need_forkexit_callback\">need_forkexit_callback</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"int <a class=\"id\" href=\"#cgroup_lock_is_held\">cgroup_lock_is_held</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"}", 
"#else <span class=\"comment\">/* #ifdef CONFIG_PROVE_LOCKING */</span>", 
"int <a class=\"id\" href=\"#cgroup_lock_is_held\">cgroup_lock_is_held</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_PROVE_LOCKING */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_lock_is_held\">cgroup_lock_is_held</a>);", 
"", 
"<span class=\"comment\">/* convenient tests for these bits */</span>", 
"<a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cgroup_is_removed\">cgroup_is_removed</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#CGRP_REMOVED\">CGRP_REMOVED</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/* bits in struct cgroupfs_root flags field */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROOT_NOPREFIX\">ROOT_NOPREFIX</a>, <span class=\"comment\">/* mounted subsystems have no named prefix */</span>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cgroup_is_releasable\">cgroup_is_releasable</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#bits\">bits</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#CGRP_RELEASABLE\">CGRP_RELEASABLE</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#CGRP_NOTIFY_ON_RELEASE\">CGRP_NOTIFY_ON_RELEASE</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#bits\">bits</a>) == <a class=\"id\" href=\"#bits\">bits</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#notify_on_release\">notify_on_release</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#CGRP_NOTIFY_ON_RELEASE\">CGRP_NOTIFY_ON_RELEASE</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * for_each_subsys() allows you to iterate on each subsystem attached to</span>", 
"<span class=\"comment\"> * an active hierarchy</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#_root\">_root</a>, <a class=\"id\" href=\"#_ss\">_ss</a>) \\", 
"<a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#_ss\">_ss</a>, &amp;<a class=\"id\" href=\"#_root\">_root</a>-><a class=\"id\" href=\"#subsys_list\">subsys_list</a>, <a class=\"id\" href=\"#sibling\">sibling</a>)", 
"", 
"<span class=\"comment\">/* for_each_active_root() allows you to iterate across the active hierarchies */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_active_root\">for_each_active_root</a>(<a class=\"id\" href=\"#_root\">_root</a>) \\", 
"<a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#_root\">_root</a>, &amp;<a class=\"id\" href=\"#roots\">roots</a>, <a class=\"id\" href=\"#root_list\">root_list</a>)", 
"", 
"<span class=\"comment\">/* the list of cgroups eligible for automatic release. Protected by</span>", 
"<span class=\"comment\"> * release_list_lock */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#release_list\">release_list</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#release_list_lock\">release_list_lock</a>);", 
"static void <a class=\"id\" href=\"#cgroup_release_agent\">cgroup_release_agent</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"static <a class=\"id\" href=\"#DECLARE_WORK\">DECLARE_WORK</a>(<a class=\"id\" href=\"#release_agent_work\">release_agent_work</a>, <a class=\"id\" href=\"#cgroup_release_agent\">cgroup_release_agent</a>);", 
"static void <a class=\"id\" href=\"#check_for_release\">check_for_release</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"comment\">/* Link structure for associating css_set objects with cgroups */</span>", 
"struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * List running through cg_cgroup_links associated with a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cgroup, anchored on cgroup-&gt;css_sets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * List running through cg_cgroup_links pointing at a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single css_set object, anchored on css_set-&gt;cg_links</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>;", 
"};", 
"", 
"<span class=\"comment\">/* The default css_set - used by init and its children prior to any</span>", 
"<span class=\"comment\"> * hierarchies being mounted. It contains a pointer to the root state</span>", 
"<span class=\"comment\"> * for each subsystem. Also used to anchor the list of css_sets. Not</span>", 
"<span class=\"comment\"> * reference-counted, to improve performance when child cgroups</span>", 
"<span class=\"comment\"> * haven't been created.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#css_set\">css_set</a> <a class=\"id\" href=\"#init_css_set\">init_css_set</a>;", 
"static struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> <a class=\"id\" href=\"#init_css_set_link\">init_css_set_link</a>;", 
"", 
"static int <a class=\"id\" href=\"#cgroup_init_idr\">cgroup_init_idr</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>);", 
"", 
"<span class=\"comment\">/* css_set_lock protects the list of css_set objects, and the</span>", 
"<span class=\"comment\"> * chain of tasks off each css_set.  Nests outside task-&gt;alloc_lock</span>", 
"<span class=\"comment\"> * due to cgroup_iter_start() */</span>", 
"static <a class=\"id\" href=\"#DEFINE_RWLOCK\">DEFINE_RWLOCK</a>(<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"static int <a class=\"id\" href=\"#css_set_count\">css_set_count</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * hash table for cgroup groups. This improves the performance to find</span>", 
"<span class=\"comment\"> * an existing css_set. This hash doesn't (currently) take into</span>", 
"<span class=\"comment\"> * account cgroups in empty hierarchies.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CSS_SET_HASH_BITS\">CSS_SET_HASH_BITS</a><span class=\"ts\"/>7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CSS_SET_TABLE_SIZE\">CSS_SET_TABLE_SIZE</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#CSS_SET_HASH_BITS\">CSS_SET_HASH_BITS</a>)", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#css_set_table\">css_set_table</a>[<a class=\"id\" href=\"#CSS_SET_TABLE_SIZE\">CSS_SET_TABLE_SIZE</a>];", 
"", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#css_set_hash\">css_set_hash</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>[])", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a> = 0UL;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> += (unsigned long)<a class=\"id\" href=\"#css\">css</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (<a class=\"id\" href=\"#tmp\">tmp</a> >> 16) ^ <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#CSS_SET_HASH_BITS\">CSS_SET_HASH_BITS</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#css_set_table\">css_set_table</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_css_set_rcu\">free_css_set_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#obj\">obj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#obj\">obj</a>, struct <a class=\"id\" href=\"#css_set\">css_set</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cg\">cg</a>);", 
"}", 
"", 
"<span class=\"comment\">/* We don't maintain the lists running through each css_set to its</span>", 
"<span class=\"comment\"> * task until after the first call to cgroup_iter_start(). This</span>", 
"<span class=\"comment\"> * reduces the fork()/exit() overhead for people who have cgroups</span>", 
"<span class=\"comment\"> * compiled into their kernel but not actually in use */</span>", 
"static int <a class=\"id\" href=\"#use_task_css_set_links\">use_task_css_set_links</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#__put_css_set\">__put_css_set</a>(struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>, int <a class=\"id\" href=\"#taskexit\">taskexit</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#saved_link\">saved_link</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure that the refcount doesn't hit zero while any readers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can see it. Similar to atomic_dec_and_lock(), but for an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rwlock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#refcount\">refcount</a>, -1, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#refcount\">refcount</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This css_set is dead. unlink it and release cgroup refcounts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_set_count\">css_set_count</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#saved_link\">saved_link</a>, &amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#count\">count</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#notify_on_release\">notify_on_release</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#taskexit\">taskexit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CGRP_RELEASABLE\">CGRP_RELEASABLE</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_for_release\">check_for_release</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#free_css_set_rcu\">free_css_set_rcu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * refcounted get/put for css_set objects</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#get_css_set\">get_css_set</a>(struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#refcount\">refcount</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_css_set\">put_css_set</a>(struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_css_set\">__put_css_set</a>(<a class=\"id\" href=\"#cg\">cg</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_css_set_taskexit\">put_css_set_taskexit</a>(struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_css_set\">__put_css_set</a>(<a class=\"id\" href=\"#cg\">cg</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * compare_css_sets - helper function for find_existing_css_set().</span>", 
"<span class=\"comment\"> * @cg: candidate css_set being tested</span>", 
"<span class=\"comment\"> * @old_cg: existing css_set for a task</span>", 
"<span class=\"comment\"> * @new_cgrp: cgroup that's being entered by the task</span>", 
"<span class=\"comment\"> * @template: desired set of css pointers in css_set (pre-calculated)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if \"cg\" matches \"old_cg\" except for the hierarchy</span>", 
"<span class=\"comment\"> * which \"new_cgrp\" belongs to, for which it should match \"new_cgrp\".</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#compare_css_sets\">compare_css_sets</a>(struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#old_cg\">old_cg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#new_cgrp\">new_cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#template\">template</a>[])", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l1\">l1</a>, *<a class=\"id\" href=\"#l2\">l2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#template\">template</a>, <a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#subsys\">subsys</a>, sizeof(<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#subsys\">subsys</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not all subsystems matched */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Compare cgroup pointers in order to distinguish between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * different cgroups in heirarchies with no subsystems. We</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could get by with just this check alone (and skip the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * memcmp above) but on most setups the memcmp check will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * avoid the need for this more expensive check on almost all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * candidates.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l1\">l1</a> = &amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l2\">l2</a> = &amp;<a class=\"id\" href=\"#old_cg\">old_cg</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>;", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#cgl1\">cgl1</a>, *<a class=\"id\" href=\"#cgl2\">cgl2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cg1\">cg1</a>, *<a class=\"id\" href=\"#cg2\">cg2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l1\">l1</a> = <a class=\"id\" href=\"#l1\">l1</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l2\">l2</a> = <a class=\"id\" href=\"#l2\">l2</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See if we reached the end - both lists are equal length. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l1\">l1</a> == &amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#l2\">l2</a> != &amp;<a class=\"id\" href=\"#old_cg\">old_cg</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#l2\">l2</a> == &amp;<a class=\"id\" href=\"#old_cg\">old_cg</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Locate the cgroups associated with these links. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgl1\">cgl1</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l1\">l1</a>, struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a>, <a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgl2\">cgl2</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l2\">l2</a>, struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a>, <a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cg1\">cg1</a> = <a class=\"id\" href=\"#cgl1\">cgl1</a>-><a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cg2\">cg2</a> = <a class=\"id\" href=\"#cgl2\">cgl2</a>-><a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Hierarchies should be linked in the same order. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cg1\">cg1</a>-><a class=\"id\" href=\"#root\">root</a> != <a class=\"id\" href=\"#cg2\">cg2</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this hierarchy is the hierarchy of the cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that's changing, then we need to check that this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * css_set points to the new cgroup; if it's any other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hierarchy, then this css_set should point to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * same cgroup as the old css_set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cg1\">cg1</a>-><a class=\"id\" href=\"#root\">root</a> == <a class=\"id\" href=\"#new_cgrp\">new_cgrp</a>-><a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cg1\">cg1</a> != <a class=\"id\" href=\"#new_cgrp\">new_cgrp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cg1\">cg1</a> != <a class=\"id\" href=\"#cg2\">cg2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find_existing_css_set() is a helper for</span>", 
"<span class=\"comment\"> * find_css_set(), and checks to see whether an existing</span>", 
"<span class=\"comment\"> * css_set is suitable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * oldcg: the cgroup group that we're using before the cgroup</span>", 
"<span class=\"comment\"> * transition</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cgrp: the cgroup that we're moving into</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * template: location in which to build the desired set of subsystem</span>", 
"<span class=\"comment\"> * state objects for the new cgroup group</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#find_existing_css_set\">find_existing_css_set</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#oldcg\">oldcg</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#template\">template</a>[])", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhead\">hhead</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Build the set of subsystem state objects that we want to see in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new css_set. while subsystems can change globally, the entries here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * won't change, so no need for locking.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> &amp; (1UL << <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Subsystem is in this hierarchy. So we want</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the subsystem state from the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cgroup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#template\">template</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Subsystem is not in this hierarchy, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * don't want to change the subsystem state */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#template\">template</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#oldcg\">oldcg</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hhead\">hhead</a> = <a class=\"id\" href=\"#css_set_hash\">css_set_hash</a>(<a class=\"id\" href=\"#template\">template</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#cg\">cg</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#hhead\">hhead</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#compare_css_sets\">compare_css_sets</a>(<a class=\"id\" href=\"#cg\">cg</a>, <a class=\"id\" href=\"#oldcg\">oldcg</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#template\">template</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This css_set matches what we need */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cg\">cg</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No existing cgroup group matched */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_cg_links\">free_cg_links</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#saved_link\">saved_link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#saved_link\">saved_link</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * allocate_cg_links() allocates \"count\" cg_cgroup_link structures</span>", 
"<span class=\"comment\"> * and chains them on tmp through their cgrp_link_list fields. Returns 0 on</span>", 
"<span class=\"comment\"> * success or a negative error</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#allocate_cg_links\">allocate_cg_links</a>(int <a class=\"id\" href=\"#count\">count</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#link\">link</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cg_links\">free_cg_links</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * link_css_set - a helper function to link a css_set to a cgroup</span>", 
"<span class=\"comment\"> * @tmp_cg_links: cg_cgroup_link objects allocated by allocate_cg_links()</span>", 
"<span class=\"comment\"> * @cg: the css_set to be linked</span>", 
"<span class=\"comment\"> * @cgrp: the destination cgroup</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#link_css_set\">link_css_set</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>, struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cg\">cg</a> = <a class=\"id\" href=\"#cg\">cg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#css_sets\">css_sets</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always add links to the tail of the list so that the list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is sorted by order of hierarchy creation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>, &amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find_css_set() takes an existing cgroup group and a</span>", 
"<span class=\"comment\"> * cgroup object, and returns a css_set object that's</span>", 
"<span class=\"comment\"> * equivalent to the old group, but with the given cgroup</span>", 
"<span class=\"comment\"> * substituted into the appropriate hierarchy. Must be called with</span>", 
"<span class=\"comment\"> * cgroup_mutex held</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#find_css_set\">find_css_set</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#oldcg\">oldcg</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#template\">template</a>[<a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhead\">hhead</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First see if we already have a cgroup group that matches</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the desired set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#find_existing_css_set\">find_existing_css_set</a>(<a class=\"id\" href=\"#oldcg\">oldcg</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#template\">template</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_css_set\">get_css_set</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#res\">res</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate all the cg_cgroup_link objects that we'll need */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#allocate_cg_links\">allocate_cg_links</a>(<a class=\"id\" href=\"#root_count\">root_count</a>, &amp;<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#refcount\">refcount</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy the set of subsystem state objects generated in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * find_existing_css_set() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#subsys\">subsys</a>, <a class=\"id\" href=\"#template\">template</a>, sizeof(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#subsys\">subsys</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Add reference counts and links from the new css_set. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#oldcg\">oldcg</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>, <a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#root\">root</a> == <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link_css_set\">link_css_set</a>(&amp;<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>, <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_set_count\">css_set_count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add this cgroup group to the hash table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hhead\">hhead</a> = <a class=\"id\" href=\"#css_set_hash\">css_set_hash</a>(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#subsys\">subsys</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, <a class=\"id\" href=\"#hhead\">hhead</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the cgroup for \"task\" from the given hierarchy. Must be</span>", 
"<span class=\"comment\"> * called with cgroup_mutex held.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#task_cgroup_from_root\">task_cgroup_from_root</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need to lock the task - since we hold cgroup_mutex the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task can't change groups, so the only thing that can happen</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is that it exits and its css is set back to init_css_set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#css\">css</a> == &amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#cg_links\">cg_links</a>, <a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#root\">root</a> == <a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There is one global cgroup mutex. We also require taking</span>", 
"<span class=\"comment\"> * task_lock() when dereferencing a task's cgroup subsys pointers.</span>", 
"<span class=\"comment\"> * See \"The task_lock() exception\", at the end of this comment.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A task must hold cgroup_mutex to modify cgroups.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any task can increment and decrement the count field without lock.</span>", 
"<span class=\"comment\"> * So in general, code holding cgroup_mutex can't rely on the count</span>", 
"<span class=\"comment\"> * field not changing.  However, if the count goes to zero, then only</span>", 
"<span class=\"comment\"> * cgroup_attach_task() can increment it again.  Because a count of zero</span>", 
"<span class=\"comment\"> * means that no tasks are currently attached, therefore there is no</span>", 
"<span class=\"comment\"> * way a task attached to that cgroup can fork (the other way to</span>", 
"<span class=\"comment\"> * increment the count).  So code holding cgroup_mutex can safely</span>", 
"<span class=\"comment\"> * assume that if the count is zero, it will stay zero. Similarly, if</span>", 
"<span class=\"comment\"> * a task holds cgroup_mutex on a cgroup with zero count, it</span>", 
"<span class=\"comment\"> * knows that the cgroup won't be removed, as cgroup_rmdir()</span>", 
"<span class=\"comment\"> * needs that mutex.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The fork and exit callbacks cgroup_fork() and cgroup_exit(), don't</span>", 
"<span class=\"comment\"> * (usually) take cgroup_mutex.  These are the two most performance</span>", 
"<span class=\"comment\"> * critical pieces of code here.  The exception occurs on cgroup_exit(),</span>", 
"<span class=\"comment\"> * when a task in a notify_on_release cgroup exits.  Then cgroup_mutex</span>", 
"<span class=\"comment\"> * is taken, and if the cgroup count is zero, a usermode call made</span>", 
"<span class=\"comment\"> * to the release agent with the name of the cgroup (path relative to</span>", 
"<span class=\"comment\"> * the root of cgroup file system) as the argument.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A cgroup can only be deleted if both its 'count' of using tasks</span>", 
"<span class=\"comment\"> * is zero, and its list of 'children' cgroups is empty.  Since all</span>", 
"<span class=\"comment\"> * tasks in the system use _some_ cgroup, and since there is always at</span>", 
"<span class=\"comment\"> * least one task in the system (init, pid == 1), therefore, top_cgroup</span>", 
"<span class=\"comment\"> * always has either children cgroups and/or using tasks.  So we don't</span>", 
"<span class=\"comment\"> * need a special hack to ensure that top_cgroup cannot be deleted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The task_lock() exception</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The need for this exception arises from the action of</span>", 
"<span class=\"comment\"> * cgroup_attach_task(), which overwrites one tasks cgroup pointer with</span>", 
"<span class=\"comment\"> * another.  It does so using cgroup_mutex, however there are</span>", 
"<span class=\"comment\"> * several performance critical places that need to reference</span>", 
"<span class=\"comment\"> * task-&gt;cgroup without the expense of grabbing a system global</span>", 
"<span class=\"comment\"> * mutex.  Therefore except as noted below, when dereferencing or, as</span>", 
"<span class=\"comment\"> * in cgroup_attach_task(), modifying a task'ss cgroup pointer we use</span>", 
"<span class=\"comment\"> * task_lock(), which acts on a spinlock (task-&gt;alloc_lock) already in</span>", 
"<span class=\"comment\"> * the task_struct routinely used for such matters.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * P.S.  One more locking exception.  RCU is used to guard the</span>", 
"<span class=\"comment\"> * update of a tasks cgroup pointer by cgroup_attach_task()</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_lock - lock out any changes to cgroup structures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cgroup_lock\">cgroup_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_lock\">cgroup_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_unlock - release lock on cgroup changes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Undo the lock taken in a previous cgroup_lock() call.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A couple of forward declarations required, due to cyclic reference loop:</span>", 
"<span class=\"comment\"> * cgroup_mkdir -&gt; cgroup_create -&gt; cgroup_populate_dir -&gt;</span>", 
"<span class=\"comment\"> * cgroup_add_file -&gt; cgroup_create_file -&gt; cgroup_dir_inode_operations</span>", 
"<span class=\"comment\"> * -&gt; cgroup_mkdir.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#cgroup_mkdir\">cgroup_mkdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>);", 
"static int <a class=\"id\" href=\"#cgroup_rmdir\">cgroup_rmdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#unused_dir\">unused_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"static int <a class=\"id\" href=\"#cgroup_populate_dir\">cgroup_populate_dir</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"static const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#cgroup_dir_inode_operations\">cgroup_dir_inode_operations</a>;", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_cgroupstats_operations\">proc_cgroupstats_operations</a>;", 
"", 
"static struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> <a class=\"id\" href=\"#cgroup_backing_dev_info\">cgroup_backing_dev_info</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"cgroup\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#capabilities\">capabilities</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BDI_CAP_NO_ACCT_AND_WRITEBACK\">BDI_CAP_NO_ACCT_AND_WRITEBACK</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#alloc_css_id\">alloc_css_id</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#child\">child</a>);", 
"", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#cgroup_new_inode\">cgroup_new_inode</a>(<a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#current_fsgid\">current_fsgid</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> = &amp;<a class=\"id\" href=\"#cgroup_backing_dev_info\">cgroup_backing_dev_info</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call subsys's pre_destroy handler.</span>", 
"<span class=\"comment\"> * This is called before css refcnt check.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cgroup_call_pre_destroy\">cgroup_call_pre_destroy</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#pre_destroy\">pre_destroy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#pre_destroy\">pre_destroy</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_cgroup_rcu\">free_cgroup_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#obj\">obj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#obj\">obj</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cgroup_diput\">cgroup_diput</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* is dentry a directory ? if so, kfree() associated cgroup */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#cgroup_is_removed\">cgroup_is_removed</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It's possible for external users to be holding css</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reference counts on a cgroup; css_put() needs to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be able to access the cgroup after decrementing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the reference count in order to know if it needs to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * queue the cgroup to be handled by the release</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * agent */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Release the subsystem state objects.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#number_of_cgroups\">number_of_cgroups</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Drop the active superblock reference that we took when we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * created the cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if we're getting rid of the cgroup, refcount should ensure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that there are no pidlists left.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#pidlists\">pidlists</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#free_cgroup_rcu\">free_cgroup_rcu</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#remove_dir\">remove_dir</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_delete\">d_delete</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_rmdir\">simple_rmdir</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cgroup_clear_directory\">cgroup_clear_directory</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#node\">node</a> != &amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This should never be called on a cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * directory with child cgroups */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> &amp; <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#dget_locked\">dget_locked</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_delete\">d_delete</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_unlink\">simple_unlink</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE : the dentry must have been dget()'ed</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cgroup_d_remove_dir\">cgroup_d_remove_dir</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_clear_directory\">cgroup_clear_directory</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_dir\">remove_dir</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A queue for waiters to do rmdir() cgroup. A tasks will sleep when</span>", 
"<span class=\"comment\"> * cgroup-&gt;count == 0 &amp;&amp; list_empty(&amp;cgroup-&gt;children) &amp;&amp; subsys has some</span>", 
"<span class=\"comment\"> * reference to css-&gt;refcnt. In general, this refcnt is expected to goes down</span>", 
"<span class=\"comment\"> * to zero, soon.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CGRP_WAIT_ON_RMDIR flag is set under cgroup's inode-&gt;i_mutex;</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#cgroup_rmdir_waitq\">cgroup_rmdir_waitq</a>);", 
"", 
"static void <a class=\"id\" href=\"#cgroup_wakeup_rmdir_waiter\">cgroup_wakeup_rmdir_waiter</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#CGRP_WAIT_ON_RMDIR\">CGRP_WAIT_ON_RMDIR</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#cgroup_rmdir_waitq\">cgroup_rmdir_waitq</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#cgroup_exclude_rmdir\">cgroup_exclude_rmdir</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_get\">css_get</a>(<a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#cgroup_release_and_wakeup_rmdir\">cgroup_release_and_wakeup_rmdir</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_wakeup_rmdir_waiter\">cgroup_wakeup_rmdir_waiter</a>(<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#cgroup\">cgroup</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(<a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call with cgroup_mutex held. Drops reference counts on modules, including</span>", 
"<span class=\"comment\"> * any duplicate ones that parse_cgroupfs_options took. If this function</span>", 
"<span class=\"comment\"> * returns an error, no reference counts are touched.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rebind_subsystems\">rebind_subsystems</a>(struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#final_bits\">final_bits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#added_bits\">added_bits</a>, <a class=\"id\" href=\"#removed_bits\">removed_bits</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#removed_bits\">removed_bits</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#actual_subsys_bits\">actual_subsys_bits</a> &amp; ~<a class=\"id\" href=\"#final_bits\">final_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#added_bits\">added_bits</a> = <a class=\"id\" href=\"#final_bits\">final_bits</a> &amp; ~<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#actual_subsys_bits\">actual_subsys_bits</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Check that any added subsystems are currently free */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a> = 1UL << <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bit\">bit</a> &amp; <a class=\"id\" href=\"#added_bits\">added_bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Nobody should tell us to do a subsys that doesn't exist:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * parse_cgroupfs_options should catch that case and refcounts</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ensure that subsystems won't disappear once selected.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a> != &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Subsystem isn't free */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Currently we don't handle adding/removing subsystems when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any child cgroups exist. This is theoretically supportable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but involves complex error handling, so it's being left until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * later */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#number_of_cgroups\">number_of_cgroups</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Process each subsystem */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a> = 1UL << <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bit\">bit</a> &amp; <a class=\"id\" href=\"#added_bits\">added_bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We're binding this subsystem to this hierarchy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#dummytop\">dummytop</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dummytop\">dummytop</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#cgroup\">cgroup</a> != <a class=\"id\" href=\"#dummytop\">dummytop</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#dummytop\">dummytop</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#cgroup\">cgroup</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#subsys_list\">subsys_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#bind\">bind</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#bind\">bind</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* refcount was already taken, and we're keeping it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#bit\">bit</a> &amp; <a class=\"id\" href=\"#removed_bits\">removed_bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We're removing this subsystem */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#dummytop\">dummytop</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#cgroup\">cgroup</a> != <a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#bind\">bind</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#bind\">bind</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#dummytop\">dummytop</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dummytop\">dummytop</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#cgroup\">cgroup</a> = <a class=\"id\" href=\"#dummytop\">dummytop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#root\">root</a> = &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>.<a class=\"id\" href=\"#subsys_list\">subsys_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* subsystem is now free - drop reference on module */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#module\">module</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#bit\">bit</a> &amp; <a class=\"id\" href=\"#final_bits\">final_bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Subsystem state should already exist */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a refcount was taken, but we already had one, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * drop the extra reference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#module\">module</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_UNLOAD\">CONFIG_MODULE_UNLOAD</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#module\">module</a> && !<a class=\"id\" href=\"#module_refcount\">module_refcount</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#module\">module</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Subsystem state shouldn't exist */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#actual_subsys_bits\">actual_subsys_bits</a> = <a class=\"id\" href=\"#final_bits\">final_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_show_options\">cgroup_show_options</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#vfs\">vfs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#vfs\">vfs</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \",%s\", <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#ROOT_NOPREFIX\">ROOT_NOPREFIX</a>, &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#seq\">seq</a>, \",noprefix\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#release_agent_path\">release_agent_path</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \",release_agent=%s\", <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#release_agent_path\">release_agent_path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \",name=%s\", <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#cgroup_sb_opts\">cgroup_sb_opts</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#release_agent\">release_agent</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* User explicitly requested empty subsystem */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#none\">none</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#new_root\">new_root</a>;", 
"", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert a hierarchy specifier into a bitmask of subsystems and flags. Call</span>", 
"<span class=\"comment\"> * with cgroup_mutex held to protect the subsys[] array. This function takes</span>", 
"<span class=\"comment\"> * refcounts on subsystems to be used, unless it returns error, in which case</span>", 
"<span class=\"comment\"> * no refcounts are taken.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#parse_cgroupfs_options\">parse_cgroupfs_options</a>(char *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#cgroup_sb_opts\">cgroup_sb_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#token\">token</a>, *<a class=\"id\" href=\"#o\">o</a> = <a class=\"id\" href=\"#data\">data</a> ?: \"all\";", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a> = (unsigned long)-1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#module_pin_failed\">module_pin_failed</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>));", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPUSETS\">CONFIG_CPUSETS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = ~(1UL << <a class=\"id\" href=\"#cpuset_subsys_id\">cpuset_subsys_id</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#opts\">opts</a>, 0, sizeof(*<a class=\"id\" href=\"#opts\">opts</a>));", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#token\">token</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#o\">o</a>, \",\")) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#token\">token</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#token\">token</a>, \"all\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add all non-disabled subsystems */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#disabled\">disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> |= 1ul << <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#token\">token</a>, \"none\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Explicitly have no subsystems */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#none\">none</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#token\">token</a>, \"noprefix\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#ROOT_NOPREFIX\">ROOT_NOPREFIX</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#token\">token</a>, \"release_agent=\", 14)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Specifying two release agents is forbidden */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#release_agent\">release_agent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#release_agent\">release_agent</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kstrndup\">kstrndup</a>(<a class=\"id\" href=\"#token\">token</a> + 14, <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a> - 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#release_agent\">release_agent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#token\">token</a>, \"name=\", 5)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#token\">token</a> + 5;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Can't specify an empty name */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Must match [\\w.-]+ */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isalnum\">isalnum</a>(<a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a> == '.') || (<a class=\"id\" href=\"#c\">c</a> == '-') || (<a class=\"id\" href=\"#c\">c</a> == '_'))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Specifying two names is forbidden */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kstrndup\">kstrndup</a>(<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#MAX_CGROUP_ROOT_NAMELEN\">MAX_CGROUP_ROOT_NAMELEN</a> - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#token\">token</a>, <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#disabled\">disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Consistency checks */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Option noprefix was introduced just for backward compatibility</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with the old cpuset, so we allow noprefix only if mounting just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the cpuset subsystem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#ROOT_NOPREFIX\">ROOT_NOPREFIX</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#flags\">flags</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can't specify \"none\" and some subsystems */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> && <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#none\">none</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We either have to specify by name or by subsystems. (So all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * empty hierarchies must have a name).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> && !<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Grab references on all the modules we'll need, so the subsystems</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't dance around before rebind_subsystems attaches them. This may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * take duplicate reference counts on a subsystem that's already used,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but rebind_subsystems handles this case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a> = 1UL << <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bit\">bit</a> &amp; <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#module\">module</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_pin_failed\">module_pin_failed</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#module_pin_failed\">module_pin_failed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * oops, one of the modules was going away. this means that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * raced with a module_delete call, and to the user this is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * essentially a \"subsystem doesn't exist\" case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>--; <a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drop refcounts only on the ones we took */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a> = 1UL << <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bit\">bit</a> &amp; <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#module\">module</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#drop_parsed_module_refcounts\">drop_parsed_module_refcounts</a>(unsigned long <a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a> = 1UL << <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bit\">bit</a> &amp; <a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#module\">module</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_remount\">cgroup_remount</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int *<a class=\"id\" href=\"#flags\">flags</a>, char *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_sb_opts\">cgroup_sb_opts</a> <a class=\"id\" href=\"#opts\">opts</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See what subsystems are wanted */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#parse_cgroupfs_options\">parse_cgroupfs_options</a>(<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow flags or name to change at remount */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#flags\">flags</a> != <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#flags\">flags</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#name\">name</a> && <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#name\">name</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_parsed_module_refcounts\">drop_parsed_module_refcounts</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rebind_subsystems\">rebind_subsystems</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_parsed_module_refcounts\">drop_parsed_module_refcounts</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* (re)populate subsystem files */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_populate_dir\">cgroup_populate_dir</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#release_agent\">release_agent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#release_agent_path\">release_agent_path</a>, <a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#release_agent\">release_agent</a>);", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#release_agent\">release_agent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> <a class=\"id\" href=\"#cgroup_ops\">cgroup_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#statfs\">statfs</a> = <a class=\"id\" href=\"#simple_statfs\">simple_statfs</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#drop_inode\">drop_inode</a> = <a class=\"id\" href=\"#generic_delete_inode\">generic_delete_inode</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show_options\">show_options</a> = <a class=\"id\" href=\"#cgroup_show_options\">cgroup_show_options</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#remount_fs\">remount_fs</a> = <a class=\"id\" href=\"#cgroup_remount\">cgroup_remount</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#init_cgroup_housekeeping\">init_cgroup_housekeeping</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#css_sets\">css_sets</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#release_list\">release_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#pidlists\">pidlists</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#pidlist_mutex\">pidlist_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list_lock\">event_list_lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#init_cgroup_root\">init_cgroup_root</a>(struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#subsys_list\">subsys_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#root_list\">root_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#number_of_cgroups\">number_of_cgroups</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cgroup_housekeeping\">init_cgroup_housekeeping</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#init_root_id\">init_root_id</a>(struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#hierarchy_ida\">hierarchy_ida</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hierarchy_id_lock\">hierarchy_id_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to allocate the next unused ID */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>(&amp;<a class=\"id\" href=\"#hierarchy_ida\">hierarchy_ida</a>, <a class=\"id\" href=\"#next_hierarchy_id\">next_hierarchy_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#hierarchy_id\">hierarchy_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try again starting from 0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ida_get_new\">ida_get_new</a>(&amp;<a class=\"id\" href=\"#hierarchy_ida\">hierarchy_ida</a>, &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#hierarchy_id\">hierarchy_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_hierarchy_id\">next_hierarchy_id</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#hierarchy_id\">hierarchy_id</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Can only get here if the 31-bit IDR is full ... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hierarchy_id_lock\">hierarchy_id_lock</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_test_super\">cgroup_test_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_sb_opts\">cgroup_sb_opts</a> *<a class=\"id\" href=\"#opts\">opts</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we asked for a name then it must match */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#name\">name</a> && <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we asked for subsystems (or explicitly for no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * subsystems) then they must match</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> || <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#none\">none</a>)", 
"<span class=\"ts\"/>    && (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> != <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#cgroup_root_from_opts\">cgroup_root_from_opts</a>(struct <a class=\"id\" href=\"#cgroup_sb_opts\">cgroup_sb_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> && !<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#none\">none</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#root\">root</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#init_root_id\">init_root_id</a>(<a class=\"id\" href=\"#root\">root</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cgroup_root\">init_cgroup_root</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> = <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#release_agent\">release_agent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#release_agent_path\">release_agent_path</a>, <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#release_agent\">release_agent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#root\">root</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cgroup_drop_root\">cgroup_drop_root</a>(struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#hierarchy_id\">hierarchy_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hierarchy_id_lock\">hierarchy_id_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#hierarchy_ida\">hierarchy_ida</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#hierarchy_id\">hierarchy_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hierarchy_id_lock\">hierarchy_id_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_set_super\">cgroup_set_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_sb_opts\">cgroup_sb_opts</a> *<a class=\"id\" href=\"#opts\">opts</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we don't have a new root, we can't set up a new sb */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#new_root\">new_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a> && !<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#none\">none</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#set_anon_super\">set_anon_super</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a> = <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#new_root\">new_root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#new_root\">new_root</a>-><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> = <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_magic\">s_magic</a> = <a class=\"id\" href=\"#CGROUP_SUPER_MAGIC\">CGROUP_SUPER_MAGIC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a> = &amp;<a class=\"id\" href=\"#cgroup_ops\">cgroup_ops</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_get_rootdir\">cgroup_get_rootdir</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_new_inode\">cgroup_new_inode</a>(<a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a> | <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>, <a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#simple_dir_operations\">simple_dir_operations</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#cgroup_dir_inode_operations\">cgroup_dir_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* directories start off with i_nlink == 2 (for \".\" entry) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_nlink\">inc_nlink</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_alloc_root\">d_alloc_root</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_get_sb\">cgroup_get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#unused_dev_name\">unused_dev_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_sb_opts\">cgroup_sb_opts</a> <a class=\"id\" href=\"#opts\">opts</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#new_root\">new_root</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First find the desired set of subsystems */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#parse_cgroupfs_options\">parse_cgroupfs_options</a>(<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate a new cgroup root. We may not need it if we're</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reusing an existing hierarchy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_root\">new_root</a> = <a class=\"id\" href=\"#cgroup_root_from_opts\">cgroup_root_from_opts</a>(&amp;<a class=\"id\" href=\"#opts\">opts</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new_root\">new_root</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#new_root\">new_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop_modules\">drop_modules</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#new_root\">new_root</a> = <a class=\"id\" href=\"#new_root\">new_root</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Locate an existing or new sb for this hierarchy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#sget\">sget</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#cgroup_test_super\">cgroup_test_super</a>, <a class=\"id\" href=\"#cgroup_set_super\">cgroup_set_super</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_drop_root\">cgroup_drop_root</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#new_root\">new_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop_modules\">drop_modules</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a> == <a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#new_root\">new_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We used the new root structure, so this is a new hierarchy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#root_cgrp\">root_cgrp</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#existing_root\">existing_root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cgroup_get_rootdir\">cgroup_get_rootdir</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop_new_super\">drop_new_super</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for name clashes with existing mounts */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_root\">for_each_active_root</a>(<a class=\"id\" href=\"#existing_root\">existing_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#existing_root\">existing_root</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop_new_super\">drop_new_super</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We're accessing css_set_count without locking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * css_set_lock here, but that's OK - it can only be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * increased by someone holding cgroup_lock, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that's us. The worst that can happen is that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have some link structures left over</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#allocate_cg_links\">allocate_cg_links</a>(<a class=\"id\" href=\"#css_set_count\">css_set_count</a>, &amp;<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop_new_super\">drop_new_super</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rebind_subsystems\">rebind_subsystems</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cg_links\">free_cg_links</a>(&amp;<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop_new_super\">drop_new_super</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There must be no failure case after here, since rebinding</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * takes care of subsystems' refcounts, which are explicitly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * dropped in the failure exit path.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* EBUSY should be the only error here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#root_list\">root_list</a>, &amp;<a class=\"id\" href=\"#roots\">roots</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_count\">root_count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a> = <a class=\"id\" href=\"#root_cgrp\">root_cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Link the top cgroup in this hierarchy into all</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the css_set objects */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CSS_SET_TABLE_SIZE\">CSS_SET_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhead\">hhead</a> = &amp;<a class=\"id\" href=\"#css_set_table\">css_set_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#cg\">cg</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#hhead\">hhead</a>, <a class=\"id\" href=\"#hlist\">hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link_css_set\">link_css_set</a>(&amp;<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>, <a class=\"id\" href=\"#cg\">cg</a>, <a class=\"id\" href=\"#root_cgrp\">root_cgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cg_links\">free_cg_links</a>(&amp;<a class=\"id\" href=\"#tmp_cg_links\">tmp_cg_links</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#root_cgrp\">root_cgrp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#root_cgrp\">root_cgrp</a>-><a class=\"id\" href=\"#children\">children</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#number_of_cgroups\">number_of_cgroups</a> != 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_populate_dir\">cgroup_populate_dir</a>(<a class=\"id\" href=\"#root_cgrp\">root_cgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We re-used an existing hierarchy - the new root (if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * any) is not needed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_drop_root\">cgroup_drop_root</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#new_root\">new_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no subsys rebinding, so refcounts don't change */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_parsed_module_refcounts\">drop_parsed_module_refcounts</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_set_mnt\">simple_set_mnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#release_agent\">release_agent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#drop_new_super\">drop_new_super</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
" <a class=\"id\" href=\"#drop_modules\">drop_modules</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_parsed_module_refcounts\">drop_parsed_module_refcounts</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#subsys_bits\">subsys_bits</a>);", 
" <a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#release_agent\">release_agent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cgroup_kill_sb\">cgroup_kill_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>) {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#saved_link\">saved_link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#root\">root</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#number_of_cgroups\">number_of_cgroups</a> != 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#children\">children</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Rebind all subsystems back to the default hierarchy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rebind_subsystems\">rebind_subsystems</a>(<a class=\"id\" href=\"#root\">root</a>, 0);", 
"<span class=\"ts\"/><span class=\"comment\">/* Shouldn't be able to fail ... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Release all the links from css_sets to this hierarchy's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * root cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#saved_link\">saved_link</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#css_sets\">css_sets</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#root_list\">root_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#root_list\">root_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_count\">root_count</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kill_litter_super\">kill_litter_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_drop_root\">cgroup_drop_root</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> <a class=\"id\" href=\"#cgroup_fs_type\">cgroup_fs_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"cgroup\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sb\">get_sb</a> = <a class=\"id\" href=\"#cgroup_get_sb\">cgroup_get_sb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kill_sb\">kill_sb</a> = <a class=\"id\" href=\"#cgroup_kill_sb\">cgroup_kill_sb</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#cgroup_kobj\">cgroup_kobj</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#__d_cgrp\">__d_cgrp</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#__d_cft\">__d_cft</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_path - generate the path of a cgroup</span>", 
"<span class=\"comment\"> * @cgrp: the cgroup in question</span>", 
"<span class=\"comment\"> * @buf: the buffer to write the path into</span>", 
"<span class=\"comment\"> * @buflen: the length of the buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with cgroup_mutex held or else with an RCU-protected cgroup</span>", 
"<span class=\"comment\"> * reference.  Writes path of cgroup into buf.  Returns 0 on success,</span>", 
"<span class=\"comment\"> * -errno on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroup_path\">cgroup_path</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cgroup_lock_is_held\">cgroup_lock_is_held</a>());", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a> || <a class=\"id\" href=\"#cgrp\">cgrp</a> == <a class=\"id\" href=\"#dummytop\">dummytop</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Inactive subsystems have no dentry for their root</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"/\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"", 
"<span class=\"ts\"/>*--<a class=\"id\" href=\"#start\">start</a> = '\\0';", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#start\">start</a> -= <a class=\"id\" href=\"#len\">len</a>) &lt; <a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cgroup_lock_is_held\">cgroup_lock_is_held</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#start\">start</a> = '/';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#buflen\">buflen</a> - <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_path\">cgroup_path</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_attach_task - attach task 'tsk' to cgroup 'cgrp'</span>", 
"<span class=\"comment\"> * @cgrp: the cgroup the task is attaching to</span>", 
"<span class=\"comment\"> * @tsk: the task to be attached</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call holding cgroup_mutex. May take task_lock of</span>", 
"<span class=\"comment\"> * the task 'tsk' during call.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroup_attach_task\">cgroup_attach_task</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, *<a class=\"id\" href=\"#failed_ss\">failed_ss</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#oldcgrp\">oldcgrp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#newcg\">newcg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Nothing to do if the task is already in that cgroup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldcgrp\">oldcgrp</a> = <a class=\"id\" href=\"#task_cgroup_from_root\">task_cgroup_from_root</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgrp\">cgrp</a> == <a class=\"id\" href=\"#oldcgrp\">oldcgrp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#can_attach\">can_attach</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#can_attach\">can_attach</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Remember on which subsystem the can_attach()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * failed, so that we only call cancel_attach()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * against the subsystems whose can_attach()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * succeeded. (See below)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#failed_ss\">failed_ss</a> = <a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cg\">cg</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_css_set\">get_css_set</a>(<a class=\"id\" href=\"#cg\">cg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Locate or allocate a new css_set for this task,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * based on its final set of cgroups</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newcg\">newcg</a> = <a class=\"id\" href=\"#find_css_set\">find_css_set</a>(<a class=\"id\" href=\"#cg\">cg</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_css_set\">put_css_set</a>(<a class=\"id\" href=\"#cg\">cg</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#newcg\">newcg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_css_set\">put_css_set</a>(<a class=\"id\" href=\"#newcg\">newcg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>, <a class=\"id\" href=\"#newcg\">newcg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update the css_set linked lists if we're using them */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>, &amp;<a class=\"id\" href=\"#newcg\">newcg</a>-><a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#attach\">attach</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#attach\">attach</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#oldcgrp\">oldcgrp</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CGRP_RELEASABLE\">CGRP_RELEASABLE</a>, &amp;<a class=\"id\" href=\"#oldcgrp\">oldcgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_css_set\">put_css_set</a>(<a class=\"id\" href=\"#cg\">cg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wake up rmdir() waiter. the rmdir should fail since the cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is no longer empty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_wakeup_rmdir_waiter\">cgroup_wakeup_rmdir_waiter</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#failed_ss\">failed_ss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This subsystem was the one that failed the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * can_attach() check earlier, so we don't need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to call cancel_attach() against it or any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * remaining subsystems.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#cancel_attach\">cancel_attach</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#cancel_attach\">cancel_attach</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_attach_task_all - attach task 'tsk' to all cgroups of task 'from'</span>", 
"<span class=\"comment\"> * @from: attach to all cgroups of a given task</span>", 
"<span class=\"comment\"> * @tsk: the task to be attached</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroup_attach_task_all\">cgroup_attach_task_all</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#from\">from</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_lock\">cgroup_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_root\">for_each_active_root</a>(<a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#from_cg\">from_cg</a> = <a class=\"id\" href=\"#task_cgroup_from_root\">task_cgroup_from_root</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#cgroup_attach_task\">cgroup_attach_task</a>(<a class=\"id\" href=\"#from_cg\">from_cg</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_attach_task_all\">cgroup_attach_task_all</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach task with pid 'pid' to cgroup 'cgrp'. Call with cgroup_mutex</span>", 
"<span class=\"comment\"> * held. May take task_lock of task</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#attach_task_by_pid\">attach_task_by_pid</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>(), *<a class=\"id\" href=\"#tcred\">tcred</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a> || <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcred\">tcred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#uid\">uid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#suid\">suid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cgroup_attach_task\">cgroup_attach_task</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_tasks_write\">cgroup_tasks_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#attach_task_by_pid\">attach_task_by_pid</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_lock_live_group - take cgroup_mutex and check that cgrp is alive.</span>", 
"<span class=\"comment\"> * @cgrp: the cgroup to be checked for liveness</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On success, returns true; the lock should be later released with</span>", 
"<span class=\"comment\"> * cgroup_unlock(). On failure returns false with no lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgroup_is_removed\">cgroup_is_removed</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>);", 
"", 
"static int <a class=\"id\" href=\"#cgroup_release_agent_write\">cgroup_release_agent_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(sizeof(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#release_agent_path\">release_agent_path</a>) &lt; <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#release_agent_path\">release_agent_path</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_release_agent_show\">cgroup_release_agent_show</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#release_agent_path\">release_agent_path</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#seq\">seq</a>, '\\n');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* A buffer size big enough for numbers or short strings */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CGROUP_LOCAL_BUFFER_SIZE\">CGROUP_LOCAL_BUFFER_SIZE</a> 64", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#cgroup_write_X64\">cgroup_write_X64</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#userbuf\">userbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#unused_ppos\">unused_ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#CGROUP_LOCAL_BUFFER_SIZE\">CGROUP_LOCAL_BUFFER_SIZE</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nbytes\">nbytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nbytes\">nbytes</a> >= sizeof(<a class=\"id\" href=\"#buffer\">buffer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#userbuf\">userbuf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#nbytes\">nbytes</a>] = 0;     <span class=\"comment\">/* nul-terminate */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_u64\">write_u64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoull\">simple_strtoull</a>(<a class=\"id\" href=\"#strstrip\">strstrip</a>(<a class=\"id\" href=\"#buffer\">buffer</a>), &amp;<a class=\"id\" href=\"#end\">end</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_u64\">write_u64</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoll\">simple_strtoll</a>(<a class=\"id\" href=\"#strstrip\">strstrip</a>(<a class=\"id\" href=\"#buffer\">buffer</a>), &amp;<a class=\"id\" href=\"#end\">end</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_s64\">write_s64</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#cgroup_write_string\">cgroup_write_string</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#userbuf\">userbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#unused_ppos\">unused_ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#local_buffer\">local_buffer</a>[<a class=\"id\" href=\"#CGROUP_LOCAL_BUFFER_SIZE\">CGROUP_LOCAL_BUFFER_SIZE</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#max_bytes\">max_bytes</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#max_write_len\">max_write_len</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#local_buffer\">local_buffer</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#max_bytes\">max_bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_bytes\">max_bytes</a> = sizeof(<a class=\"id\" href=\"#local_buffer\">local_buffer</a>) - 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nbytes\">nbytes</a> >= <a class=\"id\" href=\"#max_bytes\">max_bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate a dynamic buffer if we need one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nbytes\">nbytes</a> >= sizeof(<a class=\"id\" href=\"#local_buffer\">local_buffer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#nbytes\">nbytes</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nbytes\">nbytes</a> && <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#userbuf\">userbuf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#nbytes\">nbytes</a>] = 0;     <span class=\"comment\">/* nul-terminate */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_string\">write_string</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#strstrip\">strstrip</a>(<a class=\"id\" href=\"#buffer\">buffer</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a> != <a class=\"id\" href=\"#local_buffer\">local_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#cgroup_file_write\">cgroup_file_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a> = <a class=\"id\" href=\"#__d_cft\">__d_cft</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#__d_cgrp\">__d_cgrp</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgroup_is_removed\">cgroup_is_removed</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write\">write</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_u64\">write_u64</a> || <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_s64\">write_s64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_write_X64\">cgroup_write_X64</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_string\">write_string</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_write_string\">cgroup_write_string</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#trigger\">trigger</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#trigger\">trigger</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, (unsigned int)<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#cgroup_read_u64\">cgroup_read_u64</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#CGROUP_LOCAL_BUFFER_SIZE\">CGROUP_LOCAL_BUFFER_SIZE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_u64\">read_u64</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \"%llu\\n\", (unsigned long long) <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#cgroup_read_s64\">cgroup_read_s64</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#CGROUP_LOCAL_BUFFER_SIZE\">CGROUP_LOCAL_BUFFER_SIZE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_s64\">read_s64</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \"%lld\\n\", (long long) <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#cgroup_file_read\">cgroup_file_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a> = <a class=\"id\" href=\"#__d_cft\">__d_cft</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#__d_cgrp\">__d_cgrp</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgroup_is_removed\">cgroup_is_removed</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read\">read</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_u64\">read_u64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_read_u64\">cgroup_read_u64</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_s64\">read_s64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_read_s64\">cgroup_read_s64</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * seqfile ops/methods for returning structured data. Currently just</span>", 
"<span class=\"comment\"> * supports string-&gt;u64 maps, but can be extended in future.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#cgroup_seqfile_state\">cgroup_seqfile_state</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cgroup_map_add\">cgroup_map_add</a>(struct <a class=\"id\" href=\"#cgroup_map_cb\">cgroup_map_cb</a> *<a class=\"id\" href=\"#cb\">cb</a>, const char *<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#sf\">sf</a> = <a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#sf\">sf</a>, \"%s %llu\\n\", <a class=\"id\" href=\"#key\">key</a>, (unsigned long long)<a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_seqfile_show\">cgroup_seqfile_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_seqfile_state\">cgroup_seqfile_state</a> *<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#cft\">cft</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_map\">read_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_map_cb\">cgroup_map_cb</a> <a class=\"id\" href=\"#cb\">cb</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fill\">fill</a> = <a class=\"id\" href=\"#cgroup_map_add\">cgroup_map_add</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#m\">m</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_map\">read_map</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#cgroup\">cgroup</a>, <a class=\"id\" href=\"#cft\">cft</a>, &amp;<a class=\"id\" href=\"#cb\">cb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_seq_string\">read_seq_string</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#cgroup\">cgroup</a>, <a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#m\">m</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_seqfile_release\">cgroup_seqfile_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#single_release\">single_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#cgroup_seqfile_operations\">cgroup_seqfile_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#cgroup_file_write\">cgroup_file_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#cgroup_seqfile_release\">cgroup_seqfile_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cgroup_file_open\">cgroup_file_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#generic_file_open\">generic_file_open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cft\">cft</a> = <a class=\"id\" href=\"#__d_cft\">__d_cft</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_map\">read_map</a> || <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_seq_string\">read_seq_string</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_seqfile_state\">cgroup_seqfile_state</a> *<a class=\"id\" href=\"#state\">state</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#state\">state</a>), <a class=\"id\" href=\"#GFP_USER\">GFP_USER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#state\">state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#cft\">cft</a> = <a class=\"id\" href=\"#cft\">cft</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#cgroup\">cgroup</a> = <a class=\"id\" href=\"#__d_cgrp\">__d_cgrp</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> = &amp;<a class=\"id\" href=\"#cgroup_seqfile_operations\">cgroup_seqfile_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#cgroup_seqfile_show\">cgroup_seqfile_show</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#open\">open</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#open\">open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_file_release\">cgroup_file_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a> = <a class=\"id\" href=\"#__d_cft\">__d_cft</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#release\">release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cgroup_rename - Only allow simple rename of directories in place.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cgroup_rename\">cgroup_rename</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old_dir\">old_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#new_dir\">new_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#old_dentry\">old_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_dentry\">new_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_dir\">old_dir</a> != <a class=\"id\" href=\"#new_dir\">new_dir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_rename\">simple_rename</a>(<a class=\"id\" href=\"#old_dir\">old_dir</a>, <a class=\"id\" href=\"#old_dentry\">old_dentry</a>, <a class=\"id\" href=\"#new_dir\">new_dir</a>, <a class=\"id\" href=\"#new_dentry\">new_dentry</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#cgroup_file_operations\">cgroup_file_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#cgroup_file_read\">cgroup_file_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#cgroup_file_write\">cgroup_file_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> = <a class=\"id\" href=\"#generic_file_llseek\">generic_file_llseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#cgroup_file_open\">cgroup_file_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#cgroup_file_release\">cgroup_file_release</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#cgroup_dir_inode_operations\">cgroup_dir_inode_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lookup\">lookup</a> = <a class=\"id\" href=\"#simple_lookup\">simple_lookup</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mkdir\">mkdir</a> = <a class=\"id\" href=\"#cgroup_mkdir\">cgroup_mkdir</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rmdir\">rmdir</a> = <a class=\"id\" href=\"#cgroup_rmdir\">cgroup_rmdir</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rename\">rename</a> = <a class=\"id\" href=\"#cgroup_rename\">cgroup_rename</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if a file is a control file</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#__file_cft\">__file_cft</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> != &amp;<a class=\"id\" href=\"#cgroup_file_operations\">cgroup_file_operations</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__d_cft\">__d_cft</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_create_file\">cgroup_create_file</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#dentry_operations\">dentry_operations</a> <a class=\"id\" href=\"#cgroup_dops\">cgroup_dops</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#d_iput\">d_iput</a> = <a class=\"id\" href=\"#cgroup_diput\">cgroup_diput</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#cgroup_new_inode\">cgroup_new_inode</a>(<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#cgroup_dir_inode_operations\">cgroup_dir_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#simple_dir_operations\">simple_dir_operations</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* start off with i_nlink == 2 (for \".\" entry) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_nlink\">inc_nlink</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* start with the directory inode held, so that we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * populate it without racing with another mkdir */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock_nested\">mutex_lock_nested</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>, <a class=\"id\" href=\"#I_MUTEX_CHILD\">I_MUTEX_CHILD</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#cgroup_file_operations\">cgroup_file_operations</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> = &amp;<a class=\"id\" href=\"#cgroup_dops\">cgroup_dops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);<span class=\"ts\"/><span class=\"comment\">/* Extra count - pin the dentry in core */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cgroup_create_dir - create a directory for an object.</span>", 
"<span class=\"comment\"> * @cgrp: the cgroup we create the directory for. It must have a valid</span>", 
"<span class=\"comment\"> *        -&gt;parent field. And we are going to fill its -&gt;dentry field.</span>", 
"<span class=\"comment\"> * @dentry: dentry of the new cgroup</span>", 
"<span class=\"comment\"> * @mode: mode to set on new directory.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cgroup_create_dir\">cgroup_create_dir</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#cgroup_create_file\">cgroup_create_file</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a> | <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_nlink\">inc_nlink</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_file_mode - deduce file mode of a control file</span>", 
"<span class=\"comment\"> * @cft: the control file in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns cft-&gt;mode if -&gt;mode is not 0</span>", 
"<span class=\"comment\"> * returns S_IRUGO|S_IWUSR if it has both a read and a write handler</span>", 
"<span class=\"comment\"> * returns S_IRUGO if it has only a read handler</span>", 
"<span class=\"comment\"> * returns S_IWUSR if it has only a write hander</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#cgroup_file_mode\">cgroup_file_mode</a>(const struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#mode\">mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read\">read</a> || <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_u64\">read_u64</a> || <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_s64\">read_s64</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_map\">read_map</a> || <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#read_seq_string\">read_seq_string</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write\">write</a> || <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_u64\">write_u64</a> || <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_s64\">write_s64</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#write_string\">write_string</a> || <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#trigger\">trigger</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mode\">mode</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cgroup_add_file\">cgroup_add_file</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#subsys\">subsys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dir\">dir</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#MAX_CGROUP_TYPE_NAMELEN\">MAX_CGROUP_TYPE_NAMELEN</a> + <a class=\"id\" href=\"#MAX_CFTYPE_NAME\">MAX_CFTYPE_NAME</a> + 2] = { 0 };", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#subsys\">subsys</a> && !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#ROOT_NOPREFIX\">ROOT_NOPREFIX</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#subsys\">subsys</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#name\">name</a>, \".\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#lookup_one_len\">lookup_one_len</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#cgroup_file_mode\">cgroup_file_mode</a>(<a class=\"id\" href=\"#cft\">cft</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#cgroup_create_file\">cgroup_create_file</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a> | <a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a> = (void *)<a class=\"id\" href=\"#cft\">cft</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_add_file\">cgroup_add_file</a>);", 
"", 
"int <a class=\"id\" href=\"#cgroup_add_files\">cgroup_add_files</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#subsys\">subsys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#cft\">cft</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cgroup_add_file\">cgroup_add_file</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#subsys\">subsys</a>, &amp;<a class=\"id\" href=\"#cft\">cft</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_add_files\">cgroup_add_files</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_task_count - count the number of tasks in a cgroup.</span>", 
"<span class=\"comment\"> * @cgrp: the cgroup in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the number of tasks in the cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroup_task_count\">cgroup_task_count</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#css_sets\">css_sets</a>, <a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#refcount\">refcount</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Advance a list_head iterator.  The iterator should be positioned at</span>", 
"<span class=\"comment\"> * the start of a css_set</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cgroup_advance_iter\">cgroup_advance_iter</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> *<a class=\"id\" href=\"#it\">it</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#cg_link\">cg_link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Advance to the next non-empty css_set */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a> == &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#css_sets\">css_sets</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#cg_link\">cg_link</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a>, <a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cg\">cg</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cg\">cg</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#tasks\">tasks</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#cg_link\">cg_link</a> = <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#tasks\">tasks</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * To reduce the fork() overhead for systems that are not actually</span>", 
"<span class=\"comment\"> * using their cgroups capability, we don't maintain the lists running</span>", 
"<span class=\"comment\"> * through each css_set to its tasks until we see the list actually</span>", 
"<span class=\"comment\"> * used - in other words after the first call to cgroup_iter_start().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The tasklist_lock is not held here, as do_each_thread() and</span>", 
"<span class=\"comment\"> * while_each_thread() are protected by RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cgroup_enable_task_cg_lists\">cgroup_enable_task_cg_lists</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#g\">g</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#use_task_css_set_links\">use_task_css_set_links</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We should check if the process is exiting, otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it will race with cgroup_exit() in that the list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * entry won't be deleted though the process has exited.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>) && <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>-><a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#cgroup_iter_start\">cgroup_iter_start</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> *<a class=\"id\" href=\"#it\">it</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The first time anyone tries to iterate across a cgroup,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to enable the list linking each css_set to its</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tasks, and fix up all existing tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#use_task_css_set_links\">use_task_css_set_links</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_enable_task_cg_lists\">cgroup_enable_task_cg_lists</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#cg_link\">cg_link</a> = &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#css_sets\">css_sets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_advance_iter\">cgroup_advance_iter</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#it\">it</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#cgroup_iter_next\">cgroup_iter_next</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> *<a class=\"id\" href=\"#it\">it</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the iterator cg is NULL, we have no tasks */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#cg_link\">cg_link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#cg_list\">cg_list</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Advance iterator to find next entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#cg_link\">cg_link</a>, struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a>, <a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a> == &amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#tasks\">tasks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We reached the end of this task list - move on to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the next cg_cgroup_link */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_advance_iter\">cgroup_advance_iter</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#it\">it</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#cgroup_iter_end\">cgroup_iter_end</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> *<a class=\"id\" href=\"#it\">it</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#started_after_time\">started_after_time</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t1\">t1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#time\">time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t2\">t2</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start_diff\">start_diff</a> = <a class=\"id\" href=\"#timespec_compare\">timespec_compare</a>(&amp;<a class=\"id\" href=\"#t1\">t1</a>-><a class=\"id\" href=\"#start_time\">start_time</a>, <a class=\"id\" href=\"#time\">time</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_diff\">start_diff</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#start_diff\">start_diff</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Arbitrarily, if two processes started at the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * time, we'll say that the lower pointer value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * started first. Note that t2 may have exited by now</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so this may not be a valid pointer any longer, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that's fine - it still serves to distinguish</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * between two tasks started (effectively) simultaneously.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t1\">t1</a> &gt; <a class=\"id\" href=\"#t2\">t2</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is a callback from heap_insert() and is used to order</span>", 
"<span class=\"comment\"> * the heap.</span>", 
"<span class=\"comment\"> * In this case we order the heap in descending task start time.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#started_after\">started_after</a>(void *<a class=\"id\" href=\"#p1\">p1</a>, void *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t1\">t1</a> = <a class=\"id\" href=\"#p1\">p1</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t2\">t2</a> = <a class=\"id\" href=\"#p2\">p2</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#started_after_time\">started_after_time</a>(<a class=\"id\" href=\"#t1\">t1</a>, &amp;<a class=\"id\" href=\"#t2\">t2</a>-><a class=\"id\" href=\"#start_time\">start_time</a>, <a class=\"id\" href=\"#t2\">t2</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_scan_tasks - iterate though all the tasks in a cgroup</span>", 
"<span class=\"comment\"> * @scan: struct cgroup_scanner containing arguments for the scan</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments include pointers to callback functions test_task() and</span>", 
"<span class=\"comment\"> * process_task().</span>", 
"<span class=\"comment\"> * Iterate through all the tasks in a cgroup, calling test_task() for each,</span>", 
"<span class=\"comment\"> * and if it returns true, call process_task() for it also.</span>", 
"<span class=\"comment\"> * The test_task pointer may be NULL, meaning always true (select all tasks).</span>", 
"<span class=\"comment\"> * Effectively duplicates cgroup_iter_{start,next,end}()</span>", 
"<span class=\"comment\"> * but does not lock css_set_lock for the call to process_task().</span>", 
"<span class=\"comment\"> * The struct cgroup_scanner may be embedded in any structure of the caller's</span>", 
"<span class=\"comment\"> * creation.</span>", 
"<span class=\"comment\"> * It is guaranteed that process_task() will act on every task that</span>", 
"<span class=\"comment\"> * is a member of the cgroup for the duration of this call. This</span>", 
"<span class=\"comment\"> * function may or may not call process_task() for tasks that exit</span>", 
"<span class=\"comment\"> * or move to a different cgroup during the call, or are forked or</span>", 
"<span class=\"comment\"> * move into the cgroup during the call.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that test_task() may be called with locks held, and may in some</span>", 
"<span class=\"comment\"> * situations be called multiple times for the same task, so it should</span>", 
"<span class=\"comment\"> * be cheap.</span>", 
"<span class=\"comment\"> * If the heap pointer in the struct cgroup_scanner is non-NULL, a heap has been</span>", 
"<span class=\"comment\"> * pre-allocated and will be used for heap operations (and its \"gt\" member will</span>", 
"<span class=\"comment\"> * be overwritten), else a temporary heap will be used (allocation of which</span>", 
"<span class=\"comment\"> * may cause this function to fail).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroup_scan_tasks\">cgroup_scan_tasks</a>(struct <a class=\"id\" href=\"#cgroup_scanner\">cgroup_scanner</a> *<a class=\"id\" href=\"#scan\">scan</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> <a class=\"id\" href=\"#it\">it</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#dropped\">dropped</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Never dereference latest_task, since it's not refcounted */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#latest_task\">latest_task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> <a class=\"id\" href=\"#tmp_heap\">tmp_heap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> *<a class=\"id\" href=\"#heap\">heap</a>;", 
];
xr_frag_insert('l/c9/5e90f751633ef4e7823cfc8ab4a680d019cc9c.xr', __xr_tmp);
