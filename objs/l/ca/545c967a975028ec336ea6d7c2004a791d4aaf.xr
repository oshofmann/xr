var __xr_tmp = [
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: nseval - Object evaluation, includes control method execution</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acparser.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acinterp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_NAMESPACE\">ACPI_NAMESPACE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"nseval\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static void", 
"<a class=\"id\" href=\"#acpi_ns_exec_module_code\">acpi_ns_exec_module_code</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#method_obj\">method_obj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_evaluate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Info            - Evaluation info block, contains:</span>", 
"<span class=\"comment\"> *                  prefix_node     - Prefix or Method/Object Node to execute</span>", 
"<span class=\"comment\"> *                  Pathname        - Name of method to execute, If NULL, the</span>", 
"<span class=\"comment\"> *                                    Node is the object to execute</span>", 
"<span class=\"comment\"> *                  Parameters      - List of parameters to pass to the method,</span>", 
"<span class=\"comment\"> *                                    terminated by NULL. Params itself may be</span>", 
"<span class=\"comment\"> *                                    NULL if no parameters are being passed.</span>", 
"<span class=\"comment\"> *                  return_object   - Where to put method's return value (if</span>", 
"<span class=\"comment\"> *                                    any). If NULL, no value is returned.</span>", 
"<span class=\"comment\"> *                  parameter_type  - Type of Parameter list</span>", 
"<span class=\"comment\"> *                  return_object   - Where to put method's return value (if</span>", 
"<span class=\"comment\"> *                                    any). If NULL, no value is returned.</span>", 
"<span class=\"comment\"> *                  Flags           - ACPI_IGNORE_RETURN_VALUE to delete return</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Execute a control method or return the current value of an</span>", 
"<span class=\"comment\"> *              ACPI namespace object.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * MUTEX:       Locks interpreter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ns_evaluate\">acpi_ns_evaluate</a>(struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> * <a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_evaluate\">ns_evaluate</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the return value to an invalid object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#param_count\">param_count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the actual namespace node for the target object. Handles these cases:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Null node, Pathname (absolute path)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Node, Pathname (path relative to Node)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3) Node, Null Pathname</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_get_node\">acpi_ns_get_node</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#prefix_node\">prefix_node</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_NS_NO_UPSEARCH\">ACPI_NS_NO_UPSEARCH</a>, &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For a method alias, we must grab the actual method node so that proper</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scoping context will be established before execution.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ns_get_type\">acpi_ns_get_type</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>) ==", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_TYPE_LOCAL_METHOD_ALIAS\">ACPI_TYPE_LOCAL_METHOD_ALIAS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>-><a class=\"id\" href=\"#object\">object</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>, \"%s [%p] Value %p\\n\", <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ns_get_attached_object\">acpi_ns_get_attached_object</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Two major cases here:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) The object is a control method -- execute it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) The object is not a method -- just return it's current value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ns_get_type\">acpi_ns_get_type</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>) == <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1) Object is a control method - execute it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Verify that there is a method object associated with this node */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#obj_desc\">obj_desc</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ns_get_attached_object\">acpi_ns_get_attached_object</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Control method has no attached sub-object\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NULL_OBJECT\">AE_NULL_OBJECT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Count the number of arguments being passed to the method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#parameters\">parameters</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#parameters\">parameters</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#param_count\">param_count</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#param_count\">param_count</a> &gt; <a class=\"id\" href=\"#ACPI_METHOD_MAX_ARG\">ACPI_METHOD_MAX_ARG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_LIMIT\">AE_LIMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#param_count\">param_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DUMP_PATHNAME\">ACPI_DUMP_PATHNAME</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>, \"ACPI: Execute Method\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_LV_INFO\">ACPI_LV_INFO</a>, <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Method at AML address %p Length %X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#aml_start\">aml_start</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#aml_length\">aml_length</a> - 1));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Any namespace deletion must acquire both the namespace and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interpreter locks to ensure that no thread is using the portion of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the namespace that is being deleted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Execute the method via the interpreter. The interpreter is locked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * here before calling into the AML parser</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_enter_interpreter\">acpi_ex_enter_interpreter</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ps_execute_method\">acpi_ps_execute_method</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_exit_interpreter\">acpi_ex_exit_interpreter</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 2) Object is not a method, return its current value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Disallow certain object types. For these, \"evaluation\" is undefined.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_DEVICE\">ACPI_TYPE_DEVICE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_EVENT\">ACPI_TYPE_EVENT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_MUTEX\">ACPI_TYPE_MUTEX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_REGION\">ACPI_TYPE_REGION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_THERMAL\">ACPI_TYPE_THERMAL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_LOCAL_SCOPE\">ACPI_TYPE_LOCAL_SCOPE</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"[%4.4s] Evaluation of object type [%s] is not supported\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>-><a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#ascii\">ascii</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_type_name\">acpi_ut_get_type_name</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#type\">type</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_TYPE\">AE_TYPE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Objects require additional resolution steps (e.g., the Node may be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a field that must be read, etc.) -- we can't just grab the object</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * out of the node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Use resolve_node_to_value() to get the associated value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NOTE: we can get away with passing in NULL for a walk state because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * resolved_node is guaranteed to not be a reference to either a method</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * local or a method argument (because this interface is never called</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from a running method.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Even though we do not directly invoke the interpreter for object</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * resolution, we must lock it because we could access an opregion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The opregion access code assumes that the interpreter is locked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_enter_interpreter\">acpi_ex_enter_interpreter</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Function has a strange interface */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ex_resolve_node_to_value\">acpi_ex_resolve_node_to_value</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_exit_interpreter\">acpi_ex_exit_interpreter</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If acpi_ex_resolve_node_to_value() succeeded, the return value was placed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in resolved_node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_CTRL_RETURN_VALUE\">AE_CTRL_RETURN_VALUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#resolved_node\">resolved_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Returning object %p [%s]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_object_type_name\">acpi_ut_get_object_type_name</a>(<a class=\"id\" href=\"#info\">info</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#return_object\">return_object</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check input argument count against the ASL-defined count for a method.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also check predefined names: argument count and return value against</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the ACPI specification. Some incorrect return value types are repaired.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ns_check_predefined_names\">acpi_ns_check_predefined_names</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#param_count\">param_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>, &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if there is a return value that must be dealt with */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_CTRL_RETURN_VALUE\">AE_CTRL_RETURN_VALUE</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If caller does not want the return value, delete it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_IGNORE_RETURN_VALUE\">ACPI_IGNORE_RETURN_VALUE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Map AE_CTRL_RETURN_VALUE to AE_OK, we are done with it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"*** Completed evaluation of object %s ***\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pathname\">pathname</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Namespace was unlocked by the handling acpi_ns* function, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just return</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_exec_module_code_list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None. Exceptions during method execution are ignored, since</span>", 
"<span class=\"comment\"> *              we cannot abort a table load.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Execute all elements of the global module-level code list.</span>", 
"<span class=\"comment\"> *              Each element is executed as a single control method.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ns_exec_module_code_list\">acpi_ns_exec_module_code_list</a>(void)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#method_count\">method_count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_exec_module_code_list\">ns_exec_module_code_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exit now if the list is empty */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#acpi_gbl_module_code_list\">acpi_gbl_module_code_list</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate the evaluation information block */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE\">ACPI_ALLOCATE</a>(sizeof(struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk the list, executing each \"method\" */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear the link field and execute the method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_exec_module_code\">acpi_ns_exec_module_code</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#method_count\">method_count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Delete the (temporary) method object */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_INFO\">ACPI_INFO</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"Executed %u blocks of module-level executable AML code\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#method_count\">method_count</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_module_code_list\">acpi_gbl_module_code_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_exec_module_code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  method_obj          - Object container for the module-level code</span>", 
"<span class=\"comment\"> *              Info                - Info block for method evaluation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None. Exceptions during method execution are ignored, since</span>", 
"<span class=\"comment\"> *              we cannot abort a table load.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Execute a control method containing a block of module-level</span>", 
"<span class=\"comment\"> *              executable AML code. The control method is temporarily</span>", 
"<span class=\"comment\"> *              installed to the root node, then evaluated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#acpi_ns_exec_module_code\">acpi_ns_exec_module_code</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#method_obj\">method_obj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#parent_obj\">parent_obj</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#parent_node\">parent_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_exec_module_code\">ns_exec_module_code</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the parent node. We cheat by using the next_object field</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the method object descriptor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_node\">parent_node</a> = <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#method_obj\">method_obj</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#next_object\">next_object</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#acpi_ns_get_type\">acpi_ns_get_type</a>(<a class=\"id\" href=\"#parent_node\">parent_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the region handler and save it in the method object. We may need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this if an operation region declaration causes a _REG method to be run.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can't do this in acpi_ps_link_module_code because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * acpi_gbl_root_node-&gt;Object is NULL at PASS1.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_DEVICE\">ACPI_TYPE_DEVICE</a>) && <a class=\"id\" href=\"#parent_node\">parent_node</a>-><a class=\"id\" href=\"#object\">object</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#method_obj\">method_obj</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#extra\">extra</a>.<a class=\"id\" href=\"#handler\">handler</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#parent_node\">parent_node</a>-><a class=\"id\" href=\"#object\">object</a>-><a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must clear next_object (acpi_ns_attach_object needs the field) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#method_obj\">method_obj</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#next_object\">next_object</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the evaluation information block */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMSET\">ACPI_MEMSET</a>(<a class=\"id\" href=\"#info\">info</a>, 0, sizeof(struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#prefix_node\">prefix_node</a> = <a class=\"id\" href=\"#parent_node\">parent_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the currently attached parent object. Add a reference, because the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ref count will be decreased when the method object is installed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the parent node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_obj\">parent_obj</a> = <a class=\"id\" href=\"#acpi_ns_get_attached_object\">acpi_ns_get_attached_object</a>(<a class=\"id\" href=\"#parent_node\">parent_node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_obj\">parent_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_add_reference\">acpi_ut_add_reference</a>(<a class=\"id\" href=\"#parent_obj\">parent_obj</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Install the method (module-level code) in the parent node */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_attach_object\">acpi_ns_attach_object</a>(<a class=\"id\" href=\"#parent_node\">parent_node</a>, <a class=\"id\" href=\"#method_obj\">method_obj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Execute the parent node as a control method */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_evaluate\">acpi_ns_evaluate</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INIT\">ACPI_DB_INIT</a>, \"Executed module-level code at %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#method_obj\">method_obj</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#aml_start\">aml_start</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Delete a possible implicit return value (in slack mode) */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Detach the temporary method object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_detach_object\">acpi_ns_detach_object</a>(<a class=\"id\" href=\"#parent_node\">parent_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Restore the original parent object */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_obj\">parent_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_attach_object\">acpi_ns_attach_object</a>(<a class=\"id\" href=\"#parent_node\">parent_node</a>, <a class=\"id\" href=\"#parent_obj\">parent_obj</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent_node\">parent_node</a>-><a class=\"id\" href=\"#type\">type</a> = (<a class=\"id\" href=\"#u8\">u8</a>)<a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_obj\">parent_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#parent_obj\">parent_obj</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
];
xr_frag_insert('l/ca/545c967a975028ec336ea6d7c2004a791d4aaf.xr', __xr_tmp);
