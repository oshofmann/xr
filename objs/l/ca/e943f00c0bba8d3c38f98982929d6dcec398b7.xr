var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * workqueue.h --- work queue handling for Linux.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_WORKQUEUE_H\">_LINUX_WORKQUEUE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_WORKQUEUE_H\">_LINUX_WORKQUEUE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#lockdep\">lockdep</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#threads\">threads</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a>;", 
"", 
"struct <a class=\"id\" href=\"#work_struct\">work_struct</a>;", 
"typedef void (*<a class=\"id\" href=\"#work_func_t\">work_func_t</a>)(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The first word is the work queue pointer and the flags rolled into</span>", 
"<span class=\"comment\"> * one</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>) ((unsigned long *)(&amp;(<a class=\"id\" href=\"#work\">work</a>)-><a class=\"id\" href=\"#data\">data</a>))", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_PENDING_BIT\">WORK_STRUCT_PENDING_BIT</a><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"comment\">/* work item is pending execution */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_DELAYED_BIT\">WORK_STRUCT_DELAYED_BIT</a><span class=\"ts\"/>= 1,<span class=\"ts\"/><span class=\"comment\">/* work item is delayed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_CWQ_BIT\">WORK_STRUCT_CWQ_BIT</a><span class=\"ts\"/>= 2,<span class=\"ts\"/><span class=\"comment\">/* data points to cwq */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_LINKED_BIT\">WORK_STRUCT_LINKED_BIT</a><span class=\"ts\"/>= 3,<span class=\"ts\"/><span class=\"comment\">/* next work is linked to this one */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS_WORK\">CONFIG_DEBUG_OBJECTS_WORK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_STATIC_BIT\">WORK_STRUCT_STATIC_BIT</a><span class=\"ts\"/>= 4,<span class=\"ts\"/><span class=\"comment\">/* static initializer (debugobjects) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_COLOR_SHIFT\">WORK_STRUCT_COLOR_SHIFT</a><span class=\"ts\"/>= 5,<span class=\"ts\"/><span class=\"comment\">/* color for workqueue flushing */</span>", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_COLOR_SHIFT\">WORK_STRUCT_COLOR_SHIFT</a><span class=\"ts\"/>= 4,<span class=\"ts\"/><span class=\"comment\">/* color for workqueue flushing */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_COLOR_BITS\">WORK_STRUCT_COLOR_BITS</a><span class=\"ts\"/>= 4,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_PENDING\">WORK_STRUCT_PENDING</a><span class=\"ts\"/>= 1 << <a class=\"id\" href=\"#WORK_STRUCT_PENDING_BIT\">WORK_STRUCT_PENDING_BIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_DELAYED\">WORK_STRUCT_DELAYED</a><span class=\"ts\"/>= 1 << <a class=\"id\" href=\"#WORK_STRUCT_DELAYED_BIT\">WORK_STRUCT_DELAYED_BIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_CWQ\">WORK_STRUCT_CWQ</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << <a class=\"id\" href=\"#WORK_STRUCT_CWQ_BIT\">WORK_STRUCT_CWQ_BIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_LINKED\">WORK_STRUCT_LINKED</a><span class=\"ts\"/>= 1 << <a class=\"id\" href=\"#WORK_STRUCT_LINKED_BIT\">WORK_STRUCT_LINKED_BIT</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS_WORK\">CONFIG_DEBUG_OBJECTS_WORK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_STATIC\">WORK_STRUCT_STATIC</a><span class=\"ts\"/>= 1 << <a class=\"id\" href=\"#WORK_STRUCT_STATIC_BIT\">WORK_STRUCT_STATIC_BIT</a>,", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_STATIC\">WORK_STRUCT_STATIC</a><span class=\"ts\"/>= 0,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The last color is no color used for works which don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * participate in workqueue flushing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_NR_COLORS\">WORK_NR_COLORS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << <a class=\"id\" href=\"#WORK_STRUCT_COLOR_BITS\">WORK_STRUCT_COLOR_BITS</a>) - 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_NO_COLOR\">WORK_NO_COLOR</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#WORK_NR_COLORS\">WORK_NR_COLORS</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* special cpu IDs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_CPU_NONE\">WORK_CPU_NONE</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> + 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_CPU_LAST\">WORK_CPU_LAST</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#WORK_CPU_NONE\">WORK_CPU_NONE</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reserve 7 bits off of cwq pointer w/ debugobjects turned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * off.  This makes cwqs aligned to 256 bytes and allows 15</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * workqueue flush colors.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_FLAG_BITS\">WORK_STRUCT_FLAG_BITS</a><span class=\"ts\"/>= <a class=\"id\" href=\"#WORK_STRUCT_COLOR_SHIFT\">WORK_STRUCT_COLOR_SHIFT</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#WORK_STRUCT_COLOR_BITS\">WORK_STRUCT_COLOR_BITS</a>,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_FLAG_MASK\">WORK_STRUCT_FLAG_MASK</a><span class=\"ts\"/>= (1UL << <a class=\"id\" href=\"#WORK_STRUCT_FLAG_BITS\">WORK_STRUCT_FLAG_BITS</a>) - 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_WQ_DATA_MASK\">WORK_STRUCT_WQ_DATA_MASK</a> = ~<a class=\"id\" href=\"#WORK_STRUCT_FLAG_MASK\">WORK_STRUCT_FLAG_MASK</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_STRUCT_NO_CPU\">WORK_STRUCT_NO_CPU</a><span class=\"ts\"/>= <a class=\"id\" href=\"#WORK_CPU_NONE\">WORK_CPU_NONE</a> << <a class=\"id\" href=\"#WORK_STRUCT_FLAG_BITS\">WORK_STRUCT_FLAG_BITS</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* bit mask for work_busy() return values */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_BUSY_PENDING\">WORK_BUSY_PENDING</a><span class=\"ts\"/>= 1 << 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORK_BUSY_RUNNING\">WORK_BUSY_RUNNING</a><span class=\"ts\"/>= 1 << 1,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#work_struct\">work_struct</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work_func_t\">work_func_t</a> <a class=\"id\" href=\"#func\">func</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WORK_DATA_INIT\">WORK_DATA_INIT</a>()<span class=\"ts\"/><a class=\"id\" href=\"#ATOMIC_LONG_INIT\">ATOMIC_LONG_INIT</a>(<a class=\"id\" href=\"#WORK_STRUCT_NO_CPU\">WORK_STRUCT_NO_CPU</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WORK_DATA_STATIC_INIT\">WORK_DATA_STATIC_INIT</a>()<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATOMIC_LONG_INIT\">ATOMIC_LONG_INIT</a>(<a class=\"id\" href=\"#WORK_STRUCT_NO_CPU\">WORK_STRUCT_NO_CPU</a> | <a class=\"id\" href=\"#WORK_STRUCT_STATIC\">WORK_STRUCT_STATIC</a>)", 
"", 
"struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> <a class=\"id\" href=\"#timer\">timer</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#to_delayed_work\">to_delayed_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#execute_work\">execute_work</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#work\">work</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NB: because we have to copy the lockdep_map, setting _key</span>", 
"<span class=\"comment\"> * here is required, otherwise it could get initialised to the</span>", 
"<span class=\"comment\"> * copy of the lockdep_map!</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WORK_INIT_LOCKDEP_MAP\">__WORK_INIT_LOCKDEP_MAP</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#k\">k</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> = <a class=\"id\" href=\"#STATIC_LOCKDEP_MAP_INIT\">STATIC_LOCKDEP_MAP_INIT</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#k\">k</a>),", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WORK_INIT_LOCKDEP_MAP\">__WORK_INIT_LOCKDEP_MAP</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#k\">k</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WORK_INITIALIZER\">__WORK_INITIALIZER</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#f\">f</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#WORK_DATA_STATIC_INIT\">WORK_DATA_STATIC_INIT</a>(),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#entry\">entry</a><span class=\"ts\"/>= { &amp;(<a class=\"id\" href=\"#n\">n</a>).<a class=\"id\" href=\"#entry\">entry</a>, &amp;(<a class=\"id\" href=\"#n\">n</a>).<a class=\"id\" href=\"#entry\">entry</a> },<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a> = (<a class=\"id\" href=\"#f\">f</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__WORK_INIT_LOCKDEP_MAP\">__WORK_INIT_LOCKDEP_MAP</a>(#<a class=\"id\" href=\"#n\">n</a>, &amp;(<a class=\"id\" href=\"#n\">n</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DELAYED_WORK_INITIALIZER\">__DELAYED_WORK_INITIALIZER</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#f\">f</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#__WORK_INITIALIZER\">__WORK_INITIALIZER</a>((<a class=\"id\" href=\"#n\">n</a>).<a class=\"id\" href=\"#work\">work</a>, (<a class=\"id\" href=\"#f\">f</a>)),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#TIMER_INITIALIZER\">TIMER_INITIALIZER</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_WORK\">DECLARE_WORK</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#f\">f</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#__WORK_INITIALIZER\">__WORK_INITIALIZER</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#f\">f</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_DELAYED_WORK\">DECLARE_DELAYED_WORK</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#f\">f</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#__DELAYED_WORK_INITIALIZER\">__DELAYED_WORK_INITIALIZER</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#f\">f</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * initialize a work item's function pointer</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREPARE_WORK\">PREPARE_WORK</a>(<a class=\"id\" href=\"#_work\">_work</a>, <a class=\"id\" href=\"#_func\">_func</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#func\">func</a> = (<a class=\"id\" href=\"#_func\">_func</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREPARE_DELAYED_WORK\">PREPARE_DELAYED_WORK</a>(<a class=\"id\" href=\"#_work\">_work</a>, <a class=\"id\" href=\"#_func\">_func</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PREPARE_WORK\">PREPARE_WORK</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#work\">work</a>, (<a class=\"id\" href=\"#_func\">_func</a>))", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS_WORK\">CONFIG_DEBUG_OBJECTS_WORK</a>", 
"extern void <a class=\"id\" href=\"#__init_work\">__init_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>, int <a class=\"id\" href=\"#onstack\">onstack</a>);", 
"extern void <a class=\"id\" href=\"#destroy_work_on_stack\">destroy_work_on_stack</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#work_static\">work_static</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>) &amp; <a class=\"id\" href=\"#WORK_STRUCT_STATIC\">WORK_STRUCT_STATIC</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__init_work\">__init_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>, int <a class=\"id\" href=\"#onstack\">onstack</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#destroy_work_on_stack\">destroy_work_on_stack</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#work_static\">work_static</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * initialize all of a work item in one go</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! No point in using \"atomic_long_set()\": using a direct</span>", 
"<span class=\"comment\"> * assignment of the work data initializer allows the compiler</span>", 
"<span class=\"comment\"> * to generate better code.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__INIT_WORK\">__INIT_WORK</a>(<a class=\"id\" href=\"#_work\">_work</a>, <a class=\"id\" href=\"#_func\">_func</a>, <a class=\"id\" href=\"#_onstack\">_onstack</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#__key\">__key</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__init_work\">__init_work</a>((<a class=\"id\" href=\"#_work\">_work</a>), <a class=\"id\" href=\"#_onstack\">_onstack</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#data\">data</a> = (<a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a>) <a class=\"id\" href=\"#WORK_DATA_INIT\">WORK_DATA_INIT</a>();<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>, #<a class=\"id\" href=\"#_work\">_work</a>, &amp;<a class=\"id\" href=\"#__key\">__key</a>, 0);\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#entry\">entry</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PREPARE_WORK\">PREPARE_WORK</a>((<a class=\"id\" href=\"#_work\">_work</a>), (<a class=\"id\" href=\"#_func\">_func</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__INIT_WORK\">__INIT_WORK</a>(<a class=\"id\" href=\"#_work\">_work</a>, <a class=\"id\" href=\"#_func\">_func</a>, <a class=\"id\" href=\"#_onstack\">_onstack</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__init_work\">__init_work</a>((<a class=\"id\" href=\"#_work\">_work</a>), <a class=\"id\" href=\"#_onstack\">_onstack</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#data\">data</a> = (<a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a>) <a class=\"id\" href=\"#WORK_DATA_INIT\">WORK_DATA_INIT</a>();<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#entry\">entry</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PREPARE_WORK\">PREPARE_WORK</a>((<a class=\"id\" href=\"#_work\">_work</a>), (<a class=\"id\" href=\"#_func\">_func</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(<a class=\"id\" href=\"#_work\">_work</a>, <a class=\"id\" href=\"#_func\">_func</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__INIT_WORK\">__INIT_WORK</a>((<a class=\"id\" href=\"#_work\">_work</a>), (<a class=\"id\" href=\"#_func\">_func</a>), 0);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_WORK_ON_STACK\">INIT_WORK_ON_STACK</a>(<a class=\"id\" href=\"#_work\">_work</a>, <a class=\"id\" href=\"#_func\">_func</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__INIT_WORK\">__INIT_WORK</a>((<a class=\"id\" href=\"#_work\">_work</a>), (<a class=\"id\" href=\"#_func\">_func</a>), 1);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_DELAYED_WORK\">INIT_DELAYED_WORK</a>(<a class=\"id\" href=\"#_work\">_work</a>, <a class=\"id\" href=\"#_func\">_func</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#work\">work</a>, (<a class=\"id\" href=\"#_func\">_func</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_timer\">init_timer</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#timer\">timer</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_DELAYED_WORK_ON_STACK\">INIT_DELAYED_WORK_ON_STACK</a>(<a class=\"id\" href=\"#_work\">_work</a>, <a class=\"id\" href=\"#_func\">_func</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK_ON_STACK\">INIT_WORK_ON_STACK</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#work\">work</a>, (<a class=\"id\" href=\"#_func\">_func</a>));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_timer_on_stack\">init_timer_on_stack</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#timer\">timer</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_DELAYED_WORK_DEFERRABLE\">INIT_DELAYED_WORK_DEFERRABLE</a>(<a class=\"id\" href=\"#_work\">_work</a>, <a class=\"id\" href=\"#_func\">_func</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#work\">work</a>, (<a class=\"id\" href=\"#_func\">_func</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_timer_deferrable\">init_timer_deferrable</a>(&amp;(<a class=\"id\" href=\"#_work\">_work</a>)-><a class=\"id\" href=\"#timer\">timer</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * work_pending - Find out whether a work item is currently pending</span>", 
"<span class=\"comment\"> * @work: The work item in question</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#work_pending\">work_pending</a>(<a class=\"id\" href=\"#work\">work</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_PENDING_BIT\">WORK_STRUCT_PENDING_BIT</a>, <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * delayed_work_pending - Find out whether a delayable work item is currently</span>", 
"<span class=\"comment\"> * pending</span>", 
"<span class=\"comment\"> * @work: The work item in question</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#delayed_work_pending\">delayed_work_pending</a>(<a class=\"id\" href=\"#w\">w</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work_pending\">work_pending</a>(&amp;(<a class=\"id\" href=\"#w\">w</a>)-><a class=\"id\" href=\"#work\">work</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * work_clear_pending - for internal use only, mark a work item as not pending</span>", 
"<span class=\"comment\"> * @work: The work item in question</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#work_clear_pending\">work_clear_pending</a>(<a class=\"id\" href=\"#work\">work</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_PENDING_BIT\">WORK_STRUCT_PENDING_BIT</a>, <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Workqueue flags and constants.  For details, please refer to</span>", 
"<span class=\"comment\"> * Documentation/workqueue.txt.</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_NON_REENTRANT\">WQ_NON_REENTRANT</a><span class=\"ts\"/>= 1 << 0, <span class=\"comment\">/* guarantee non-reentrance */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 1, <span class=\"comment\">/* not bound to any cpu */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_FREEZEABLE\">WQ_FREEZEABLE</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 2, <span class=\"comment\">/* freeze during suspend */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_RESCUER\">WQ_RESCUER</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 3, <span class=\"comment\">/* has an rescue worker */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_HIGHPRI\">WQ_HIGHPRI</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 4, <span class=\"comment\">/* high priority */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_CPU_INTENSIVE\">WQ_CPU_INTENSIVE</a><span class=\"ts\"/>= 1 << 5, <span class=\"comment\">/* cpu instensive workqueue */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_DYING\">WQ_DYING</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 6, <span class=\"comment\">/* internal: workqueue is dying */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_MAX_ACTIVE\">WQ_MAX_ACTIVE</a><span class=\"ts\"/><span class=\"ts\"/>= 512,<span class=\"ts\"/>  <span class=\"comment\">/* I like 512, better ideas? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_MAX_UNBOUND_PER_CPU\">WQ_MAX_UNBOUND_PER_CPU</a><span class=\"ts\"/>= 4,<span class=\"ts\"/>  <span class=\"comment\">/* 4 * #cpus for unbound wq */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WQ_DFL_ACTIVE\">WQ_DFL_ACTIVE</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#WQ_MAX_ACTIVE\">WQ_MAX_ACTIVE</a> / 2,", 
"};", 
"", 
"<span class=\"comment\">/* unbound wq's aren't per-cpu, scale max_active according to #cpus */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WQ_UNBOUND_MAX_ACTIVE\">WQ_UNBOUND_MAX_ACTIVE</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_t\">max_t</a>(int, <a class=\"id\" href=\"#WQ_MAX_ACTIVE\">WQ_MAX_ACTIVE</a>, <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() * <a class=\"id\" href=\"#WQ_MAX_UNBOUND_PER_CPU\">WQ_MAX_UNBOUND_PER_CPU</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * System-wide workqueues which are always present.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * system_wq is the one used by schedule[_delayed]_work[_on]().</span>", 
"<span class=\"comment\"> * Multi-CPU multi-threaded.  There are users which expect relatively</span>", 
"<span class=\"comment\"> * short queue flush time.  Don't queue works which can run for too</span>", 
"<span class=\"comment\"> * long.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * system_long_wq is similar to system_wq but may host long running</span>", 
"<span class=\"comment\"> * works.  Queue flushing might take relatively long.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * system_nrt_wq is non-reentrant and guarantees that any given work</span>", 
"<span class=\"comment\"> * item is never executed in parallel by multiple CPUs.  Queue</span>", 
"<span class=\"comment\"> * flushing might take relatively long.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * system_unbound_wq is unbound workqueue.  Workers are not bound to</span>", 
"<span class=\"comment\"> * any specific CPU, not concurrency managed, and all queued works are</span>", 
"<span class=\"comment\"> * executed immediately as long as max_active limit is not reached and</span>", 
"<span class=\"comment\"> * resources are available.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#system_wq\">system_wq</a>;", 
"extern struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#system_long_wq\">system_long_wq</a>;", 
"extern struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#system_nrt_wq\">system_nrt_wq</a>;", 
"extern struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#system_unbound_wq\">system_unbound_wq</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *", 
"<a class=\"id\" href=\"#__alloc_workqueue_key\">__alloc_workqueue_key</a>(const char *<a class=\"id\" href=\"#name\">name</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#max_active\">max_active</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>, const char *<a class=\"id\" href=\"#lock_name\">lock_name</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#max_active\">max_active</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#__key\">__key</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#__lock_name\">__lock_name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#name\">name</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__lock_name\">__lock_name</a> = (<a class=\"id\" href=\"#name\">name</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__lock_name\">__lock_name</a> = #<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__alloc_workqueue_key\">__alloc_workqueue_key</a>((<a class=\"id\" href=\"#name\">name</a>), (<a class=\"id\" href=\"#flags\">flags</a>), (<a class=\"id\" href=\"#max_active\">max_active</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#__key\">__key</a>, <a class=\"id\" href=\"#__lock_name\">__lock_name</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#max_active\">max_active</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__alloc_workqueue_key\">__alloc_workqueue_key</a>((<a class=\"id\" href=\"#name\">name</a>), (<a class=\"id\" href=\"#flags\">flags</a>), (<a class=\"id\" href=\"#max_active\">max_active</a>), <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#create_workqueue\">create_workqueue</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>((<a class=\"id\" href=\"#name\">name</a>), <a class=\"id\" href=\"#WQ_RESCUER\">WQ_RESCUER</a>, 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#create_freezeable_workqueue\">create_freezeable_workqueue</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>((<a class=\"id\" href=\"#name\">name</a>), <a class=\"id\" href=\"#WQ_FREEZEABLE\">WQ_FREEZEABLE</a> | <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a> | <a class=\"id\" href=\"#WQ_RESCUER\">WQ_RESCUER</a>, 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#create_singlethread_workqueue\">create_singlethread_workqueue</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>((<a class=\"id\" href=\"#name\">name</a>), <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a> | <a class=\"id\" href=\"#WQ_RESCUER\">WQ_RESCUER</a>, 1)", 
"", 
"extern void <a class=\"id\" href=\"#destroy_workqueue\">destroy_workqueue</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>);", 
"", 
"extern int <a class=\"id\" href=\"#queue_work\">queue_work</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>, struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"extern int <a class=\"id\" href=\"#queue_work_on\">queue_work_on</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"extern int <a class=\"id\" href=\"#queue_delayed_work\">queue_delayed_work</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>, unsigned long <a class=\"id\" href=\"#delay\">delay</a>);", 
"extern int <a class=\"id\" href=\"#queue_delayed_work_on\">queue_delayed_work_on</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>, unsigned long <a class=\"id\" href=\"#delay\">delay</a>);", 
"", 
"extern void <a class=\"id\" href=\"#flush_workqueue\">flush_workqueue</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>);", 
"extern void <a class=\"id\" href=\"#flush_scheduled_work\">flush_scheduled_work</a>(void);", 
"extern void <a class=\"id\" href=\"#flush_delayed_work\">flush_delayed_work</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"extern int <a class=\"id\" href=\"#schedule_work\">schedule_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"extern int <a class=\"id\" href=\"#schedule_work_on\">schedule_work_on</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"extern int <a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>, unsigned long <a class=\"id\" href=\"#delay\">delay</a>);", 
"extern int <a class=\"id\" href=\"#schedule_delayed_work_on\">schedule_delayed_work_on</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delay\">delay</a>);", 
"extern int <a class=\"id\" href=\"#schedule_on_each_cpu\">schedule_on_each_cpu</a>(<a class=\"id\" href=\"#work_func_t\">work_func_t</a> <a class=\"id\" href=\"#func\">func</a>);", 
"extern int <a class=\"id\" href=\"#keventd_up\">keventd_up</a>(void);", 
"", 
"int <a class=\"id\" href=\"#execute_in_process_context\">execute_in_process_context</a>(<a class=\"id\" href=\"#work_func_t\">work_func_t</a> <a class=\"id\" href=\"#fn\">fn</a>, struct <a class=\"id\" href=\"#execute_work\">execute_work</a> *);", 
"", 
"extern int <a class=\"id\" href=\"#flush_work\">flush_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"extern int <a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"extern void <a class=\"id\" href=\"#workqueue_set_max_active\">workqueue_set_max_active</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#max_active\">max_active</a>);", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#workqueue_congested\">workqueue_congested</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>);", 
"extern unsigned int <a class=\"id\" href=\"#work_cpu\">work_cpu</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"extern unsigned int <a class=\"id\" href=\"#work_busy\">work_busy</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kill off a pending schedule_delayed_work().  Note that the work callback</span>", 
"<span class=\"comment\"> * function may still be running on return from cancel_delayed_work(), unless</span>", 
"<span class=\"comment\"> * it returns 1 and the work doesn't re-arm itself. Run flush_workqueue() or</span>", 
"<span class=\"comment\"> * cancel_work_sync() to wait on it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cancel_delayed_work\">cancel_delayed_work</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work_clear_pending\">work_clear_pending</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Like above, but uses del_timer() instead of del_timer_sync(). This means,</span>", 
"<span class=\"comment\"> * if it returns 0 the timer function may be running and the queueing is in</span>", 
"<span class=\"comment\"> * progress.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__cancel_delayed_work\">__cancel_delayed_work</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work_clear_pending\">work_clear_pending</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#cancel_delayed_work_sync\">cancel_delayed_work_sync</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"comment\">/* Obsolete. use cancel_delayed_work_sync() */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#cancel_rearming_delayed_workqueue\">cancel_rearming_delayed_workqueue</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cancel_delayed_work_sync\">cancel_delayed_work_sync</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Obsolete. use cancel_delayed_work_sync() */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#cancel_rearming_delayed_work\">cancel_rearming_delayed_work</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cancel_delayed_work_sync\">cancel_delayed_work_sync</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#work_on_cpu\">work_on_cpu</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, long (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"#else", 
"long <a class=\"id\" href=\"#work_on_cpu\">work_on_cpu</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, long (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#arg\">arg</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FREEZER\">CONFIG_FREEZER</a>", 
"extern void <a class=\"id\" href=\"#freeze_workqueues_begin\">freeze_workqueues_begin</a>(void);", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#freeze_workqueues_busy\">freeze_workqueues_busy</a>(void);", 
"extern void <a class=\"id\" href=\"#thaw_workqueues\">thaw_workqueues</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FREEZER */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"int <a class=\"id\" href=\"#in_workqueue_context\">in_workqueue_context</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/ca/e943f00c0bba8d3c38f98982929d6dcec398b7.xr', __xr_tmp);
