var __xr_tmp = [
"<span class=\"comment\"> * Return the index of a channel.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ppp_channel_index\">ppp_channel_index</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ppp\">ppp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the PPP unit number to which a channel is connected.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ppp_unit_number\">ppp_unit_number</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock_bh\">read_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit\">unit</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_bh\">read_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unit\">unit</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the PPP device interface name of a channel.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#ppp_dev_name\">ppp_dev_name</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock_bh\">read_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a> && <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_bh\">read_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#name\">name</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disconnect a channel from the generic layer.</span>", 
"<span class=\"comment\"> * This must be called in process context.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#ppp_unregister_channel\">ppp_unregister_channel</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pch\">pch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* should never happen */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This ensures that we have returned from any calls into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the channel's start_xmit or ioctl routine before we proceed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan_sem\">chan_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan_sem\">chan_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_disconnect_channel\">ppp_disconnect_channel</a>(<a class=\"id\" href=\"#pch\">pch</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#ppp_pernet\">ppp_pernet</a>(<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan_net\">chan_net</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_channels_lock\">all_channels_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_channels_lock\">all_channels_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rwait\">rwait</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#refcnt\">refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_destroy_channel\">ppp_destroy_channel</a>(<a class=\"id\" href=\"#pch\">pch</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Callback from a channel when it can accept more to transmit.</span>", 
"<span class=\"comment\"> * This should be called at BH/softirq level, not interrupt level.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#ppp_output_wakeup\">ppp_output_wakeup</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ppp\">ppp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pch\">pch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_channel_push\">ppp_channel_push</a>(<a class=\"id\" href=\"#pch\">pch</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Compression control.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Process the PPPIOCSCOMPRESS ioctl. */</span>", 
"static int", 
"<a class=\"id\" href=\"#ppp_set_compress\">ppp_set_compress</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor\">compressor</a> *<a class=\"id\" href=\"#cp\">cp</a>, *<a class=\"id\" href=\"#ocomp\">ocomp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_option_data\">ppp_option_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#state\">state</a>, *<a class=\"id\" href=\"#ostate\">ostate</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#ccp_option\">ccp_option</a>[<a class=\"id\" href=\"#CCP_MAX_OPTION_LENGTH\">CCP_MAX_OPTION_LENGTH</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#data\">data</a>, (void <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#arg\">arg</a>, sizeof(<a class=\"id\" href=\"#data\">data</a>)) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a> <= <a class=\"id\" href=\"#CCP_MAX_OPTION_LENGTH\">CCP_MAX_OPTION_LENGTH</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#ccp_option\">ccp_option</a>, (void <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#CCP_MAX_OPTION_LENGTH\">CCP_MAX_OPTION_LENGTH</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ccp_option\">ccp_option</a>[1] &lt; 2 || <a class=\"id\" href=\"#ccp_option\">ccp_option</a>[1] &gt; <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#try_then_request_module\">try_then_request_module</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#find_compressor\">find_compressor</a>(<a class=\"id\" href=\"#ccp_option\">ccp_option</a>[0]),", 
"<span class=\"ts\"/><span class=\"ts\"/>\"ppp-compress-%d\", <a class=\"id\" href=\"#ccp_option\">ccp_option</a>[0]);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOBUFS\">ENOBUFS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#transmit\">transmit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#comp_alloc\">comp_alloc</a>(<a class=\"id\" href=\"#ccp_option\">ccp_option</a>, <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_xmit_lock\">ppp_xmit_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xstate\">xstate</a> &= ~<a class=\"id\" href=\"#SC_COMP_RUN\">SC_COMP_RUN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ocomp\">ocomp</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xcomp\">xcomp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ostate\">ostate</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xcomp\">xcomp</a> = <a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_xmit_unlock\">ppp_xmit_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ostate\">ostate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ocomp\">ocomp</a>-><a class=\"id\" href=\"#comp_free\">comp_free</a>(<a class=\"id\" href=\"#ostate\">ostate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#ocomp\">ocomp</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#decomp_alloc\">decomp_alloc</a>(<a class=\"id\" href=\"#ccp_option\">ccp_option</a>, <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_recv_lock\">ppp_recv_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> &= ~<a class=\"id\" href=\"#SC_DECOMP_RUN\">SC_DECOMP_RUN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ocomp\">ocomp</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ostate\">ostate</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a> = <a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_recv_unlock\">ppp_recv_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ostate\">ostate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ocomp\">ocomp</a>-><a class=\"id\" href=\"#decomp_free\">decomp_free</a>(<a class=\"id\" href=\"#ostate\">ostate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#ocomp\">ocomp</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Look at a CCP packet and update our state accordingly.</span>", 
"<span class=\"comment\"> * We assume the caller has the xmit or recv path locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#ppp_ccp_peek\">ppp_ccp_peek</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#inbound\">inbound</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#dp\">dp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#CCP_HDRLEN\">CCP_HDRLEN</a> + 2))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"comment\">/* no header */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + 2;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#CCP_CODE\">CCP_CODE</a>(<a class=\"id\" href=\"#dp\">dp</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CCP_CONFREQ\">CCP_CONFREQ</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A ConfReq starts negotiation of compression</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in one direction of transmission,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and hence brings it down...but which way?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remember:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A ConfReq indicates what the sender would like to receive</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#inbound\">inbound</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* He is proposing what I should send */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xstate\">xstate</a> &= ~<a class=\"id\" href=\"#SC_COMP_RUN\">SC_COMP_RUN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I am proposing to what he should send */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> &= ~<a class=\"id\" href=\"#SC_DECOMP_RUN\">SC_DECOMP_RUN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CCP_TERMREQ\">CCP_TERMREQ</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CCP_TERMACK\">CCP_TERMACK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CCP is going down, both directions of transmission</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> &= ~<a class=\"id\" href=\"#SC_DECOMP_RUN\">SC_DECOMP_RUN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xstate\">xstate</a> &= ~<a class=\"id\" href=\"#SC_COMP_RUN\">SC_COMP_RUN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CCP_CONFACK\">CCP_CONFACK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#SC_CCP_OPEN\">SC_CCP_OPEN</a> | <a class=\"id\" href=\"#SC_CCP_UP\">SC_CCP_UP</a>)) != <a class=\"id\" href=\"#SC_CCP_OPEN\">SC_CCP_OPEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#CCP_LENGTH\">CCP_LENGTH</a>(<a class=\"id\" href=\"#dp\">dp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a> + 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* too short */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a> += <a class=\"id\" href=\"#CCP_HDRLEN\">CCP_HDRLEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#CCP_HDRLEN\">CCP_HDRLEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#CCP_OPT_MINLEN\">CCP_OPT_MINLEN</a> || <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#CCP_OPT_LENGTH\">CCP_OPT_LENGTH</a>(<a class=\"id\" href=\"#dp\">dp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inbound\">inbound</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we will start receiving compressed packets */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a>-><a class=\"id\" href=\"#decomp_init\">decomp_init</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a>, <a class=\"id\" href=\"#dp\">dp</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a>, 0, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mru\">mru</a>, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#debug\">debug</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> |= <a class=\"id\" href=\"#SC_DECOMP_RUN\">SC_DECOMP_RUN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> &= ~(<a class=\"id\" href=\"#SC_DC_ERROR\">SC_DC_ERROR</a> | <a class=\"id\" href=\"#SC_DC_FERROR\">SC_DC_FERROR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we will soon start sending compressed packets */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xcomp\">xcomp</a>-><a class=\"id\" href=\"#comp_init\">comp_init</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a>, <a class=\"id\" href=\"#dp\">dp</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a>, 0, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#debug\">debug</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xstate\">xstate</a> |= <a class=\"id\" href=\"#SC_COMP_RUN\">SC_COMP_RUN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CCP_RESETACK\">CCP_RESETACK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reset the [de]compressor */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_CCP_UP\">SC_CCP_UP</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inbound\">inbound</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a> && (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> &amp; <a class=\"id\" href=\"#SC_DECOMP_RUN\">SC_DECOMP_RUN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a>-><a class=\"id\" href=\"#decomp_reset\">decomp_reset</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> &= ~<a class=\"id\" href=\"#SC_DC_ERROR\">SC_DC_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a> && (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xstate\">xstate</a> &amp; <a class=\"id\" href=\"#SC_COMP_RUN\">SC_COMP_RUN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xcomp\">xcomp</a>-><a class=\"id\" href=\"#comp_reset\">comp_reset</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Free up compression resources. */</span>", 
"static void", 
"<a class=\"id\" href=\"#ppp_ccp_closed\">ppp_ccp_closed</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#xstate\">xstate</a>, *<a class=\"id\" href=\"#rstate\">rstate</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor\">compressor</a> *<a class=\"id\" href=\"#xcomp\">xcomp</a>, *<a class=\"id\" href=\"#rcomp\">rcomp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_lock\">ppp_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#SC_CCP_OPEN\">SC_CCP_OPEN</a> | <a class=\"id\" href=\"#SC_CCP_UP\">SC_CCP_UP</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xstate\">xstate</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xcomp\">xcomp</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xcomp\">xcomp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xstate\">xstate</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcomp\">rcomp</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rstate\">rstate</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xstate\">xstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xcomp\">xcomp</a>-><a class=\"id\" href=\"#comp_free\">comp_free</a>(<a class=\"id\" href=\"#xstate\">xstate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#xcomp\">xcomp</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rstate\">rstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcomp\">rcomp</a>-><a class=\"id\" href=\"#decomp_free\">decomp_free</a>(<a class=\"id\" href=\"#rstate\">rstate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#rcomp\">rcomp</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* List of compressors. */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#compressor_list\">compressor_list</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#compressor_list_lock\">compressor_list_lock</a>);", 
"", 
"struct <a class=\"id\" href=\"#compressor_entry\">compressor_entry</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor\">compressor</a> *<a class=\"id\" href=\"#comp\">comp</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#compressor_entry\">compressor_entry</a> *", 
"<a class=\"id\" href=\"#find_comp_entry\">find_comp_entry</a>(int <a class=\"id\" href=\"#proto\">proto</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor_entry\">compressor_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ce\">ce</a>, &amp;<a class=\"id\" href=\"#compressor_list\">compressor_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#compress_proto\">compress_proto</a> == <a class=\"id\" href=\"#proto\">proto</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ce\">ce</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Register a compressor */</span>", 
"int", 
"<a class=\"id\" href=\"#ppp_register_compressor\">ppp_register_compressor</a>(struct <a class=\"id\" href=\"#compressor\">compressor</a> *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor_entry\">compressor_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#compressor_list_lock\">compressor_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#find_comp_entry\">find_comp_entry</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#compress_proto\">compress_proto</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#compressor_entry\">compressor_entry</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ce\">ce</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#comp\">comp</a> = <a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#compressor_list\">compressor_list</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#compressor_list_lock\">compressor_list_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Unregister a compressor */</span>", 
"void", 
"<a class=\"id\" href=\"#ppp_unregister_compressor\">ppp_unregister_compressor</a>(struct <a class=\"id\" href=\"#compressor\">compressor</a> *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor_entry\">compressor_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#compressor_list_lock\">compressor_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#find_comp_entry\">find_comp_entry</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#compress_proto\">compress_proto</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a> && <a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#comp\">comp</a> == <a class=\"id\" href=\"#cp\">cp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#compressor_list_lock\">compressor_list_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Find a compressor. */</span>", 
"static struct <a class=\"id\" href=\"#compressor\">compressor</a> *", 
"<a class=\"id\" href=\"#find_compressor\">find_compressor</a>(int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor_entry\">compressor_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor\">compressor</a> *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#compressor_list_lock\">compressor_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#find_comp_entry\">find_comp_entry</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#comp\">comp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#compressor_list_lock\">compressor_list_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cp\">cp</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Miscelleneous stuff.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#ppp_get_stats\">ppp_get_stats</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#ppp_stats\">ppp_stats</a> *<a class=\"id\" href=\"#st\">st</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#vj\">vj</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#st\">st</a>, 0, sizeof(*<a class=\"id\" href=\"#st\">st</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#p\">p</a>.<a class=\"id\" href=\"#ppp_ipackets\">ppp_ipackets</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_packets\">rx_packets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#p\">p</a>.<a class=\"id\" href=\"#ppp_ierrors\">ppp_ierrors</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_errors\">rx_errors</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#p\">p</a>.<a class=\"id\" href=\"#ppp_ibytes\">ppp_ibytes</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_bytes\">rx_bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#p\">p</a>.<a class=\"id\" href=\"#ppp_opackets\">ppp_opackets</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_packets\">tx_packets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#p\">p</a>.<a class=\"id\" href=\"#ppp_oerrors\">ppp_oerrors</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_errors\">tx_errors</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#p\">p</a>.<a class=\"id\" href=\"#ppp_obytes\">ppp_obytes</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_bytes\">tx_bytes</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vj\">vj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#vj\">vj</a>.<a class=\"id\" href=\"#vjs_packets\">vjs_packets</a> = <a class=\"id\" href=\"#vj\">vj</a>-><a class=\"id\" href=\"#sls_o_compressed\">sls_o_compressed</a> + <a class=\"id\" href=\"#vj\">vj</a>-><a class=\"id\" href=\"#sls_o_uncompressed\">sls_o_uncompressed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#vj\">vj</a>.<a class=\"id\" href=\"#vjs_compressed\">vjs_compressed</a> = <a class=\"id\" href=\"#vj\">vj</a>-><a class=\"id\" href=\"#sls_o_compressed\">sls_o_compressed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#vj\">vj</a>.<a class=\"id\" href=\"#vjs_searches\">vjs_searches</a> = <a class=\"id\" href=\"#vj\">vj</a>-><a class=\"id\" href=\"#sls_o_searches\">sls_o_searches</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#vj\">vj</a>.<a class=\"id\" href=\"#vjs_misses\">vjs_misses</a> = <a class=\"id\" href=\"#vj\">vj</a>-><a class=\"id\" href=\"#sls_o_misses\">sls_o_misses</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#vj\">vj</a>.<a class=\"id\" href=\"#vjs_errorin\">vjs_errorin</a> = <a class=\"id\" href=\"#vj\">vj</a>-><a class=\"id\" href=\"#sls_i_error\">sls_i_error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#vj\">vj</a>.<a class=\"id\" href=\"#vjs_tossed\">vjs_tossed</a> = <a class=\"id\" href=\"#vj\">vj</a>-><a class=\"id\" href=\"#sls_i_tossed\">sls_i_tossed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#vj\">vj</a>.<a class=\"id\" href=\"#vjs_uncompressedin\">vjs_uncompressedin</a> = <a class=\"id\" href=\"#vj\">vj</a>-><a class=\"id\" href=\"#sls_i_uncompressed\">sls_i_uncompressed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#vj\">vj</a>.<a class=\"id\" href=\"#vjs_compressedin\">vjs_compressedin</a> = <a class=\"id\" href=\"#vj\">vj</a>-><a class=\"id\" href=\"#sls_i_compressed\">sls_i_compressed</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Stuff for handling the lists of ppp units and channels</span>", 
"<span class=\"comment\"> * and for initialization.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create a new ppp interface unit.  Fails if it can't allocate memory</span>", 
"<span class=\"comment\"> * or if there is already a unit with the requested number.</span>", 
"<span class=\"comment\"> * unit == -1 means allocate a new number.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#ppp\">ppp</a> *", 
"<a class=\"id\" href=\"#ppp_create_interface\">ppp_create_interface</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#unit\">unit</a>, int *<a class=\"id\" href=\"#retp\">retp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#alloc_netdev\">alloc_netdev</a>(sizeof(struct <a class=\"id\" href=\"#ppp\">ppp</a>), \"\", <a class=\"id\" href=\"#ppp_setup\">ppp_setup</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#ppp_pernet\">ppp_pernet</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#netdev_priv\">netdev_priv</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mru\">mru</a> = <a class=\"id\" href=\"#PPP_MRU\">PPP_MRU</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_ppp_file\">init_ppp_file</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#INTERFACE\">INTERFACE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#hdrlen\">hdrlen</a> = <a class=\"id\" href=\"#PPP_HDRLEN\">PPP_HDRLEN</a> - 2;<span class=\"ts\"/><span class=\"comment\">/* don't count proto bytes */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NUM_NP\">NUM_NP</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#npmode\">npmode</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NPMODE_PASS\">NPMODE_PASS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#channels\">channels</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#wlock\">wlock</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#minseq\">minseq</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mrq\">mrq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_MULTILINK */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drum roll: don't forget to set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the net device is belong to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_net_set\">dev_net_set</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#net\">net</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unit\">unit</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit\">unit</a> = <a class=\"id\" href=\"#unit_get\">unit_get</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#units_idr\">units_idr</a>, <a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unit\">unit</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#retp\">retp</a> = <a class=\"id\" href=\"#unit\">unit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out2\">out2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unit_find\">unit_find</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#units_idr\">units_idr</a>, <a class=\"id\" href=\"#unit\">unit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out2\">out2</a>; <span class=\"comment\">/* unit already exists */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if caller need a specified unit number</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lets try to satisfy him, otherwise --</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * he should better ask us for new unit number</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NOTE: yes I know that returning EEXIST it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fair but at least pppd will ask us to allocate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * new unit in this case so user is happy :)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit\">unit</a> = <a class=\"id\" href=\"#unit_set\">unit_set</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#units_idr\">units_idr</a>, <a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unit\">unit</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out2\">out2</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the new ppp unit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#unit\">unit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, \"ppp%d\", <a class=\"id\" href=\"#unit\">unit</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_netdev\">register_netdev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit_put\">unit_put</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#units_idr\">units_idr</a>, <a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: couldn't register device %s (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out2\">out2</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#ppp_net\">ppp_net</a> = <a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#ppp_unit_count\">ppp_unit_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#retp\">retp</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ppp\">ppp</a>;", 
"", 
"<a class=\"id\" href=\"#out2\">out2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_netdev\">free_netdev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<a class=\"id\" href=\"#out1\">out1</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#retp\">retp</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize a ppp_file structure.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#init_ppp_file\">init_ppp_file</a>(struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> *<a class=\"id\" href=\"#pf\">pf</a>, int <a class=\"id\" href=\"#kind\">kind</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#kind\">kind</a> = <a class=\"id\" href=\"#kind\">kind</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#xq\">xq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#rwait\">rwait</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Take down a ppp interface unit - called when the owning file</span>", 
"<span class=\"comment\"> * (the one that created the unit) is closed or detached.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ppp_shutdown_interface\">ppp_shutdown_interface</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#ppp_pernet\">ppp_pernet</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#ppp_net\">ppp_net</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This will call dev_close() for us. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_lock\">ppp_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#closing\">closing</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#closing\">closing</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_netdev\">unregister_netdev</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unit_put\">unit_put</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#units_idr\">units_idr</a>, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rwait\">rwait</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free the memory used by a ppp unit.  This is only called once</span>", 
"<span class=\"comment\"> * there are no channels connected to the unit and no file structs</span>", 
"<span class=\"comment\"> * that reference the unit.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ppp_destroy_interface\">ppp_destroy_interface</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#ppp_unit_count\">ppp_unit_count</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#dead\">dead</a> || <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#n_channels\">n_channels</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* \"can't happen\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ppp: destroying ppp struct %p but dead=%d \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"n_channels=%d !\\n\", <a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#dead\">dead</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#n_channels\">n_channels</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_ccp_closed\">ppp_ccp_closed</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slhc_free\">slhc_free</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_purge\">skb_queue_purge</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_purge\">skb_queue_purge</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_purge\">skb_queue_purge</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mrq\">mrq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_MULTILINK */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_FILTER\">CONFIG_PPP_FILTER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_filter\">pass_filter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_filter\">pass_filter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_filter\">active_filter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_filter\">active_filter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_FILTER */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xmit_pending\">xmit_pending</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_netdev\">free_netdev</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locate an existing ppp unit.</span>", 
"<span class=\"comment\"> * The caller should have locked the all_ppp_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#ppp\">ppp</a> *", 
"<a class=\"id\" href=\"#ppp_find_unit\">ppp_find_unit</a>(struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a>, int <a class=\"id\" href=\"#unit\">unit</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unit_find\">unit_find</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#units_idr\">units_idr</a>, <a class=\"id\" href=\"#unit\">unit</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locate an existing ppp channel.</span>", 
"<span class=\"comment\"> * The caller should have locked the all_channels_lock.</span>", 
"<span class=\"comment\"> * First we look in the new_channels list, then in the</span>", 
"<span class=\"comment\"> * all_channels list.  If found in the new_channels list,</span>", 
"<span class=\"comment\"> * we move it to the all_channels list.  This is for speed</span>", 
"<span class=\"comment\"> * when we have a lot of channels in use.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#channel\">channel</a> *", 
"<a class=\"id\" href=\"#ppp_find_channel\">ppp_find_channel</a>(struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a>, int <a class=\"id\" href=\"#unit\">unit</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pch\">pch</a>, &amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#new_channels\">new_channels</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#unit\">unit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_channels\">all_channels</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pch\">pch</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pch\">pch</a>, &amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_channels\">all_channels</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#unit\">unit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pch\">pch</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Connect a PPP channel to a PPP interface unit.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#ppp_connect_channel\">ppp_connect_channel</a>(struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>, int <a class=\"id\" href=\"#unit\">unit</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hdrlen\">hdrlen</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#ppp_pernet\">ppp_pernet</a>(<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan_net\">chan_net</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#ppp_find_unit\">ppp_find_unit</a>(<a class=\"id\" href=\"#pn\">pn</a>, <a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_bh\">write_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#outl\">outl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_lock\">ppp_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#hdrlen\">hdrlen</a> &gt; <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#hdrlen\">hdrlen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#hdrlen\">hdrlen</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#hdrlen\">hdrlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hdrlen\">hdrlen</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#hdrlen\">hdrlen</a> + 2;<span class=\"ts\"/><span class=\"comment\">/* for protocol bytes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hdrlen\">hdrlen</a> &gt; <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a> = <a class=\"id\" href=\"#hdrlen\">hdrlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#clist\">clist</a>, &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#channels\">channels</a>);", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#n_channels\">n_channels</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
" <a class=\"id\" href=\"#outl\">outl</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disconnect a channel from its ppp unit.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#ppp_disconnect_channel\">ppp_disconnect_channel</a>(struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_bh\">write_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remove it from the ppp unit's list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_lock\">ppp_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#clist\">clist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#n_channels\">n_channels</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rwait\">rwait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#refcnt\">refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_destroy_interface\">ppp_destroy_interface</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free up the resources used by a ppp channel.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ppp_destroy_channel\">ppp_destroy_channel</a>(struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#channel_count\">channel_count</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#dead\">dead</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* \"can't happen\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ppp: destroying undead channel %p !\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pch\">pch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_purge\">skb_queue_purge</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_purge\">skb_queue_purge</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pch\">pch</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#ppp_cleanup\">ppp_cleanup</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* should never happen */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ppp_unit_count\">ppp_unit_count</a>) || <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#channel_count\">channel_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: removing module but units remain!\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_chrdev\">unregister_chrdev</a>(<a class=\"id\" href=\"#PPP_MAJOR\">PPP_MAJOR</a>, \"ppp\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_destroy\">device_destroy</a>(<a class=\"id\" href=\"#ppp_class\">ppp_class</a>, <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#PPP_MAJOR\">PPP_MAJOR</a>, 0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_destroy\">class_destroy</a>(<a class=\"id\" href=\"#ppp_class\">ppp_class</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_pernet_device\">unregister_pernet_device</a>(&amp;<a class=\"id\" href=\"#ppp_net_ops\">ppp_net_ops</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Units handling. Caller must protect concurrent access</span>", 
"<span class=\"comment\"> * by holding all_ppp_mutex</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* associate pointer with specified number */</span>", 
"static int <a class=\"id\" href=\"#unit_set\">unit_set</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: No free memory for idr\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#idr_get_new_above\">idr_get_new_above</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unit\">unit</a> != <a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unit\">unit</a>;", 
"}", 
"", 
"<span class=\"comment\">/* get new free unit number and associate pointer with it */</span>", 
"static int <a class=\"id\" href=\"#unit_get\">unit_get</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: No free memory for idr\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#idr_get_new_above\">idr_get_new_above</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, 0, &amp;<a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unit\">unit</a>;", 
"}", 
"", 
"<span class=\"comment\">/* put unit number back to a pool */</span>", 
"static void <a class=\"id\" href=\"#unit_put\">unit_put</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"<span class=\"comment\">/* get pointer associated with the number */</span>", 
"static void *<a class=\"id\" href=\"#unit_find\">unit_find</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idr_find\">idr_find</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Module/initialization stuff */</span>", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#ppp_init\">ppp_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#ppp_cleanup\">ppp_cleanup</a>);", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_register_net_channel\">ppp_register_net_channel</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_register_channel\">ppp_register_channel</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_unregister_channel\">ppp_unregister_channel</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_channel_index\">ppp_channel_index</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_unit_number\">ppp_unit_number</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_dev_name\">ppp_dev_name</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_input\">ppp_input</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_input_error\">ppp_input_error</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_output_wakeup\">ppp_output_wakeup</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_register_compressor\">ppp_register_compressor</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ppp_unregister_compressor\">ppp_unregister_compressor</a>);", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"<a class=\"id\" href=\"#MODULE_ALIAS_CHARDEV\">MODULE_ALIAS_CHARDEV</a>(<a class=\"id\" href=\"#PPP_MAJOR\">PPP_MAJOR</a>, 0);", 
"<a class=\"id\" href=\"#MODULE_ALIAS\">MODULE_ALIAS</a>(\"devname:ppp\");", 
];
xr_frag_insert('l/ca/f4c096aa18770e8af9633bf81030b27db1b89b.xr', __xr_tmp);
