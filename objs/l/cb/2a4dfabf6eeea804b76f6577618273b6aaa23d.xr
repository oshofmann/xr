var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * INET<span class=\"ts\"/><span class=\"ts\"/>An implementation of the TCP/IP protocol suite for the LINUX</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>operating system.  INET is implemented using the  BSD Socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface as the means of communication with the user level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Definitions for the UDP protocol.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Version:<span class=\"ts\"/>@(#)udp.h<span class=\"ts\"/>1.0.2<span class=\"ts\"/>04/28/93</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author:<span class=\"ts\"/>Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_UDP_H\">_LINUX_UDP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_UDP_H\">_LINUX_UDP_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#udphdr\">udphdr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><a class=\"id\" href=\"#source\">source</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sum16\">__sum16</a><span class=\"ts\"/><a class=\"id\" href=\"#check\">check</a>;", 
"};", 
"", 
"<span class=\"comment\">/* UDP socket options */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDP_CORK\">UDP_CORK</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* Never send partially complete segments */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDP_ENCAP\">UDP_ENCAP</a><span class=\"ts\"/>100<span class=\"ts\"/><span class=\"comment\">/* Set the socket to accept encapsulated packets */</span>", 
"", 
"<span class=\"comment\">/* UDP encapsulation types */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDP_ENCAP_ESPINUDP_NON_IKE\">UDP_ENCAP_ESPINUDP_NON_IKE</a><span class=\"ts\"/>1 <span class=\"comment\">/* draft-ietf-ipsec-nat-t-ike-00/01 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDP_ENCAP_ESPINUDP\">UDP_ENCAP_ESPINUDP</a><span class=\"ts\"/>2 <span class=\"comment\">/* draft-ietf-ipsec-udp-encaps-06 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDP_ENCAP_L2TPINUDP\">UDP_ENCAP_L2TPINUDP</a><span class=\"ts\"/>3 <span class=\"comment\">/* rfc2661 */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#inet_sock\">inet_sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#udp_hdr\">udp_hdr</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *)<a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDP_HTABLE_SIZE_MIN\">UDP_HTABLE_SIZE_MIN</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#CONFIG_BASE_SMALL\">CONFIG_BASE_SMALL</a> ? 128 : 256)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#udp_hashfn\">udp_hashfn</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned <a class=\"id\" href=\"#num\">num</a>, unsigned <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#num\">num</a> + <a class=\"id\" href=\"#net_hash_mix\">net_hash_mix</a>(<a class=\"id\" href=\"#net\">net</a>)) &amp; <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* inet_sock has to be the first member */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> <a class=\"id\" href=\"#inet\">inet</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#udp_port_hash\">udp_port_hash</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#sk\">sk</a>.<a class=\"id\" href=\"#__sk_common\">__sk_common</a>.<a class=\"id\" href=\"#skc_u16hashes\">skc_u16hashes</a>[0]", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#udp_portaddr_hash\">udp_portaddr_hash</a><span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#sk\">sk</a>.<a class=\"id\" href=\"#__sk_common\">__sk_common</a>.<a class=\"id\" href=\"#skc_u16hashes\">skc_u16hashes</a>[1]", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#udp_portaddr_node\">udp_portaddr_node</a><span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#sk\">sk</a>.<a class=\"id\" href=\"#__sk_common\">__sk_common</a>.<a class=\"id\" href=\"#skc_portaddr_node\">skc_portaddr_node</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pending\">pending</a>;<span class=\"ts\"/><span class=\"comment\">/* Any pending frames ? */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/> <a class=\"id\" href=\"#corkflag\">corkflag</a>;<span class=\"ts\"/><span class=\"comment\">/* Cork is required */</span>", 
"  <span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#encap_type\">encap_type</a>;<span class=\"ts\"/><span class=\"comment\">/* Is this an Encapsulation socket? */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Following member retains the information to create a UDP header</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when the socket is uncorked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#len\">len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* total length of pending frames */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fields specific to UDP-Lite.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pcslen\">pcslen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pcrlen\">pcrlen</a>;", 
"<span class=\"comment\">/* indicator bits used by pcflag: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDPLITE_BIT\">UDPLITE_BIT</a>      0x1  <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set by udplite proto init function */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDPLITE_SEND_CC\">UDPLITE_SEND_CC</a>  0x2  <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set via udplite setsockopt         */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDPLITE_RECV_CC\">UDPLITE_RECV_CC</a>  0x4<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set via udplite setsocktopt        */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pcflag\">pcflag</a>;        <span class=\"comment\">/* marks socket as UDP-Lite if &gt; 0    */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#unused\">unused</a>[3];", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For encapsulation sockets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#encap_rcv\">encap_rcv</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *<a class=\"id\" href=\"#udp_sk\">udp_sk</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *)<a class=\"id\" href=\"#sk\">sk</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#udp_portaddr_for_each_entry\">udp_portaddr_for_each_entry</a>(<a class=\"id\" href=\"#__sk\">__sk</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#list\">list</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_nulls_for_each_entry\">hlist_nulls_for_each_entry</a>(<a class=\"id\" href=\"#__sk\">__sk</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#__sk_common\">__sk_common</a>.<a class=\"id\" href=\"#skc_portaddr_node\">skc_portaddr_node</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#udp_portaddr_for_each_entry_rcu\">udp_portaddr_for_each_entry_rcu</a>(<a class=\"id\" href=\"#__sk\">__sk</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#list\">list</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_nulls_for_each_entry_rcu\">hlist_nulls_for_each_entry_rcu</a>(<a class=\"id\" href=\"#__sk\">__sk</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#__sk_common\">__sk_common</a>.<a class=\"id\" href=\"#skc_portaddr_node\">skc_portaddr_node</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#__sk\">__sk</a>) (<a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#pcflag\">pcflag</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_UDP_H */</span>", 
];
xr_frag_insert('l/cb/2a4dfabf6eeea804b76f6577618273b6aaa23d.xr', __xr_tmp);
