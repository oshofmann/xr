var __xr_tmp = [
"<span class=\"comment\">/* sfi_acpi.c Simple Firmware Interface - ACPI extensions */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  This file is provided under a dual BSD/GPLv2 license.  When using or</span>", 
"<span class=\"comment\">  redistributing this file, you may do so under either license.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  GPL LICENSE SUMMARY</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  Copyright(c) 2009 Intel Corporation. All rights reserved.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\">  it under the terms of version 2 of the GNU General Public License as</span>", 
"<span class=\"comment\">  published by the Free Software Foundation.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\">  WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\">  General Public License for more details.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\">  along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\">  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.</span>", 
"<span class=\"comment\">  The full GNU General Public License is included in this distribution</span>", 
"<span class=\"comment\">  in the file called LICENSE.GPL.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  BSD LICENSE</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  Copyright(c) 2009 Intel Corporation. All rights reserved.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\">  modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\">  are met:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    * Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\">      notice, this list of conditions and the following disclaimer.</span>", 
"<span class=\"comment\">    * Redistributions in binary form must reproduce the above copyright</span>", 
"<span class=\"comment\">      notice, this list of conditions and the following disclaimer in</span>", 
"<span class=\"comment\">      the documentation and/or other materials provided with the</span>", 
"<span class=\"comment\">      distribution.</span>", 
"<span class=\"comment\">    * Neither the name of Intel Corporation nor the names of its</span>", 
"<span class=\"comment\">      contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\">      from this software without specific prior written permission.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\">  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\">  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span>", 
"<span class=\"comment\">  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\">  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span>", 
"<span class=\"comment\">  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span>", 
"<span class=\"comment\">  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span>", 
"<span class=\"comment\">  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span>", 
"<span class=\"comment\">  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span>", 
"<span class=\"comment\">  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span>", 
"<span class=\"comment\">  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KMSG_COMPONENT\">KMSG_COMPONENT</a> \"SFI\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) <a class=\"id\" href=\"#KMSG_COMPONENT\">KMSG_COMPONENT</a> \": \" <a class=\"id\" href=\"#fmt\">fmt</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sfi\">sfi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"sfi_core.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SFI can access ACPI-defined tables via an optional ACPI XSDT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This allows re-use, and avoids re-definition, of standard tables.</span>", 
"<span class=\"comment\"> * For example, the \"MCFG\" table is defined by PCI, reserved by ACPI,</span>", 
"<span class=\"comment\"> * and is expected to be present many SFI-only systems.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#acpi_table_xsdt\">acpi_table_xsdt</a> *<a class=\"id\" href=\"#xsdt_va\">xsdt_va</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XSDT_GET_NUM_ENTRIES\">XSDT_GET_NUM_ENTRIES</a>(<a class=\"id\" href=\"#ptable\">ptable</a>, <a class=\"id\" href=\"#entry_type\">entry_type</a>) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#ptable\">ptable</a>-><a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#length\">length</a> - sizeof(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a>)) / \\", 
"<span class=\"ts\"/>(sizeof(<a class=\"id\" href=\"#entry_type\">entry_type</a>)))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#acpi_to_sfi_th\">acpi_to_sfi_th</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *)<a class=\"id\" href=\"#th\">th</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#sfi_to_acpi_th\">sfi_to_acpi_th</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *)<a class=\"id\" href=\"#th\">th</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sfi_acpi_parse_xsdt()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Parse the ACPI XSDT for later access by sfi_acpi_table_parse().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sfi_acpi_parse_xsdt\">sfi_acpi_parse_xsdt</a>(struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> <a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#SFI_ANY_KEY\">SFI_ANY_KEY</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xsdt_va\">xsdt_va</a> = (struct <a class=\"id\" href=\"#acpi_table_xsdt\">acpi_table_xsdt</a> *)<a class=\"id\" href=\"#th\">th</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a> = <a class=\"id\" href=\"#XSDT_GET_NUM_ENTRIES\">XSDT_GET_NUM_ENTRIES</a>(<a class=\"id\" href=\"#xsdt_va\">xsdt_va</a>, <a class=\"id\" href=\"#u64\">u64</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sfi_check_table\">sfi_check_table</a>(<a class=\"id\" href=\"#xsdt_va\">xsdt_va</a>-><a class=\"id\" href=\"#table_offset_entry\">table_offset_entry</a>[<a class=\"id\" href=\"#i\">i</a>], &amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_sfi\">disable_sfi</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sfi_acpi_init\">sfi_acpi_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> <a class=\"id\" href=\"#xsdt_key\">xsdt_key</a> = { .<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#SFI_SIG_XSDT\">SFI_SIG_XSDT</a> };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_table_parse\">sfi_table_parse</a>(<a class=\"id\" href=\"#SFI_SIG_XSDT\">SFI_SIG_XSDT</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#sfi_acpi_parse_xsdt\">sfi_acpi_parse_xsdt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only call the get_table to keep the table mapped */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xsdt_va\">xsdt_va</a> = (struct <a class=\"id\" href=\"#acpi_table_xsdt\">acpi_table_xsdt</a> *)<a class=\"id\" href=\"#sfi_get_table\">sfi_get_table</a>(&amp;<a class=\"id\" href=\"#xsdt_key\">xsdt_key</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#sfi_acpi_get_table\">sfi_acpi_get_table</a>(struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a> = <a class=\"id\" href=\"#XSDT_GET_NUM_ENTRIES\">XSDT_GET_NUM_ENTRIES</a>(<a class=\"id\" href=\"#xsdt_va\">xsdt_va</a>, <a class=\"id\" href=\"#u64\">u64</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sfi_check_table\">sfi_check_table</a>(<a class=\"id\" href=\"#xsdt_va\">xsdt_va</a>-><a class=\"id\" href=\"#table_offset_entry\">table_offset_entry</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ret\">ret</a>) && <a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sfi_to_acpi_th\">sfi_to_acpi_th</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sfi_acpi_put_table\">sfi_acpi_put_table</a>(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_put_table\">sfi_put_table</a>(<a class=\"id\" href=\"#acpi_to_sfi_th\">acpi_to_sfi_th</a>(<a class=\"id\" href=\"#table\">table</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sfi_acpi_table_parse()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find specified table in XSDT, run handler on it and return its return value</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sfi_acpi_table_parse\">sfi_acpi_table_parse</a>(char *<a class=\"id\" href=\"#signature\">signature</a>, char *<a class=\"id\" href=\"#oem_id\">oem_id</a>, char *<a class=\"id\" href=\"#oem_table_id\">oem_table_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int(*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_disabled\">sfi_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#signature\">signature</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#oem_id\">oem_id</a> = <a class=\"id\" href=\"#oem_id\">oem_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#oem_table_id\">oem_table_id</a> = <a class=\"id\" href=\"#oem_table_id\">oem_table_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#sfi_acpi_get_table\">sfi_acpi_get_table</a>(&amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table\">table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#table\">table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_acpi_put_table\">sfi_acpi_put_table</a>(<a class=\"id\" href=\"#table\">table</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sfi_acpi_table_show\">sfi_acpi_table_show</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#bin_attribute\">bin_attribute</a> *<a class=\"id\" href=\"#bin_attr\">bin_attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_attr\">sfi_table_attr</a> *<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#bin_attr\">bin_attr</a>, struct <a class=\"id\" href=\"#sfi_table_attr\">sfi_table_attr</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#oem_id\">oem_id</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#oem_table_id\">oem_table_id</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#sfi_acpi_get_table\">sfi_acpi_get_table</a>(&amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#th\">th</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> =  <a class=\"id\" href=\"#memory_read_from_buffer\">memory_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>, <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_acpi_put_table\">sfi_acpi_put_table</a>(<a class=\"id\" href=\"#th\">th</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sfi_acpi_sysfs_init\">sfi_acpi_sysfs_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_attr\">sfi_table_attr</a> *<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a> = <a class=\"id\" href=\"#XSDT_GET_NUM_ENTRIES\">XSDT_GET_NUM_ENTRIES</a>(<a class=\"id\" href=\"#xsdt_va\">xsdt_va</a>, <a class=\"id\" href=\"#u64\">u64</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tbl_attr\">tbl_attr</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfi_sysfs_install_table\">sfi_sysfs_install_table</a>(<a class=\"id\" href=\"#xsdt_va\">xsdt_va</a>-><a class=\"id\" href=\"#table_offset_entry\">table_offset_entry</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#sfi_acpi_table_show\">sfi_acpi_table_show</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
];
xr_frag_insert('l/cb/679d0570a10fb7c2817e5770ccd690dd8399b9.xr', __xr_tmp);
