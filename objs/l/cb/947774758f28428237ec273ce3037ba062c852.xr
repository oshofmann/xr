var __xr_tmp = [
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#copied\">copied</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow overflow */</span>", 
"<span class=\"ts\"/>if ((unsigned long) <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = -(unsigned long) <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#vmlist\">vmlist</a>; <a class=\"id\" href=\"#count\">count</a> && <a class=\"id\" href=\"#tmp\">tmp</a>; <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = (char *) <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#vaddr\">vaddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#finished\">finished</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_IOREMAP\">VM_IOREMAP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aligned_vwrite\">aligned_vwrite</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#finished\">finished</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#copied\">copied</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>remap_vmalloc_range  -  map vmalloc pages to userspace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@vma:<span class=\"ts\"/><span class=\"ts\"/>vma to cover (map full range of vma)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr:<span class=\"ts\"/><span class=\"ts\"/>vmalloc memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pgoff:<span class=\"ts\"/><span class=\"ts\"/>number of pages into addr before first page to map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns:<span class=\"ts\"/>0 for success, -Exxx on failure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function checks that addr is a valid vmalloc'ed area, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that it is big enough to cover the vma. Will return failure if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that criteria isn't met.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Similar to remap_pfn_range() (see mm/memory.c)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#remap_vmalloc_range\">remap_vmalloc_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, void *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#uaddr\">uaddr</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#usize\">usize</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1) &amp; (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#find_vm_area\">find_vm_area</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#area\">area</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_USERMAP\">VM_USERMAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usize\">usize</a> + (<a class=\"id\" href=\"#pgoff\">pgoff</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) &gt; <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#pgoff\">pgoff</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vm_insert_page\">vm_insert_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uaddr\">uaddr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usize\">usize</a> -= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#usize\">usize</a> &gt; 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prevent \"things\" like memory migration? VM_flags need a cleanup... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#remap_vmalloc_range\">remap_vmalloc_range</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implement a stub for vmalloc_sync_all() if the architecture chose not to</span>", 
"<span class=\"comment\"> * have one.</span>", 
"<span class=\"comment\"> */</span>", 
"void  <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#vmalloc_sync_all\">vmalloc_sync_all</a>(void)", 
"{", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#f\">f</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pgtable_t\">pgtable_t</a> <a class=\"id\" href=\"#table\">table</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* apply_to_page_range() does all the hard work. */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>alloc_vm_area - allocate a range of kernel address space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size:<span class=\"ts\"/><span class=\"ts\"/>size of the area</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns:<span class=\"ts\"/>NULL on failure, vm_struct on success</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function reserves a range of kernel address space, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocates pagetables to map that range.  No actual mappings</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are created.  If the kernel address space is not shared</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>between processes, it syncs the pagetable across all</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>processes.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#alloc_vm_area\">alloc_vm_area</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#get_vm_area_caller\">get_vm_area_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#VM_IOREMAP\">VM_IOREMAP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#area\">area</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This ensures that page tables are constructed for this region</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of kernel virtual address space and mapped into init_mm.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apply_to_page_range\">apply_to_page_range</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, (unsigned long)<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_vm_area\">free_vm_area</a>(<a class=\"id\" href=\"#area\">area</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure the pagetables are constructed in process kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   mappings */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmalloc_sync_all\">vmalloc_sync_all</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#area\">area</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#alloc_vm_area\">alloc_vm_area</a>);", 
"", 
"void <a class=\"id\" href=\"#free_vm_area\">free_vm_area</a>(struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#remove_vm_area\">remove_vm_area</a>(<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#area\">area</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#area\">area</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#free_vm_area\">free_vm_area</a>);", 
"", 
"static struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#node_to_va\">node_to_va</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a> ? <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>) : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pvm_find_next_prev - find the next and prev vmap_area surrounding @end</span>", 
"<span class=\"comment\"> * @end: target address</span>", 
"<span class=\"comment\"> * @pnext: out arg for the next vmap_area</span>", 
"<span class=\"comment\"> * @pprev: out arg for the previous vmap_area</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: %true if either or both of next and prev are found,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    %false if no vmap_area exists</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find vmap_areas end addresses of which enclose @end.  ie. if not</span>", 
"<span class=\"comment\"> * NULL, *pnext-&gt;va_end &gt; @end and *pprev-&gt;va_end &lt;= @end.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pvm_find_next_prev\">pvm_find_next_prev</a>(unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> **<a class=\"id\" href=\"#pnext\">pnext</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> **<a class=\"id\" href=\"#pprev\">pprev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#vmap_area_root\">vmap_area_root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#va\">va</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pnext\">pnext</a> = <a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#node_to_va\">node_to_va</a>(<a class=\"id\" href=\"#rb_prev\">rb_prev</a>(&amp;(*<a class=\"id\" href=\"#pnext\">pnext</a>)-><a class=\"id\" href=\"#rb_node\">rb_node</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pnext\">pnext</a> = <a class=\"id\" href=\"#node_to_va\">node_to_va</a>(<a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;(*<a class=\"id\" href=\"#pprev\">pprev</a>)-><a class=\"id\" href=\"#rb_node\">rb_node</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pvm_determine_end - find the highest aligned address between two vmap_areas</span>", 
"<span class=\"comment\"> * @pnext: in/out arg for the next vmap_area</span>", 
"<span class=\"comment\"> * @pprev: in/out arg for the previous vmap_area</span>", 
"<span class=\"comment\"> * @align: alignment</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: determined end address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the highest aligned address between *@pnext and *@pprev below</span>", 
"<span class=\"comment\"> * VMALLOC_END.  *@pnext and *@pprev are adjusted so that the aligned</span>", 
"<span class=\"comment\"> * down address is between the end addresses of the two vmap_areas.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please note that the address returned by this function may fall</span>", 
"<span class=\"comment\"> * inside *@pnext vmap_area.  The caller is responsible for checking</span>", 
"<span class=\"comment\"> * that.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#pvm_determine_end\">pvm_determine_end</a>(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> **<a class=\"id\" href=\"#pnext\">pnext</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> **<a class=\"id\" href=\"#pprev\">pprev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#vmalloc_end\">vmalloc_end</a> = <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a> &amp; ~(<a class=\"id\" href=\"#align\">align</a> - 1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pnext\">pnext</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#min\">min</a>((*<a class=\"id\" href=\"#pnext\">pnext</a>)-><a class=\"id\" href=\"#va_start\">va_start</a> &amp; ~(<a class=\"id\" href=\"#align\">align</a> - 1), <a class=\"id\" href=\"#vmalloc_end\">vmalloc_end</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vmalloc_end\">vmalloc_end</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#pprev\">pprev</a> && (*<a class=\"id\" href=\"#pprev\">pprev</a>)-><a class=\"id\" href=\"#va_end\">va_end</a> &gt; <a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pnext\">pnext</a> = *<a class=\"id\" href=\"#pprev\">pprev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#node_to_va\">node_to_va</a>(<a class=\"id\" href=\"#rb_prev\">rb_prev</a>(&amp;(*<a class=\"id\" href=\"#pnext\">pnext</a>)-><a class=\"id\" href=\"#rb_node\">rb_node</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_get_vm_areas - allocate vmalloc areas for percpu allocator</span>", 
"<span class=\"comment\"> * @offsets: array containing offset of each area</span>", 
"<span class=\"comment\"> * @sizes: array containing size of each area</span>", 
"<span class=\"comment\"> * @nr_vms: the number of areas to allocate</span>", 
"<span class=\"comment\"> * @align: alignment, all entries in @offsets and @sizes must be aligned to this</span>", 
"<span class=\"comment\"> * @gfp_mask: allocation mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: kmalloc'd vm_struct pointer array pointing to allocated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    vm_structs on success, %NULL on failure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Percpu allocator wants to use congruent vm areas so that it can</span>", 
"<span class=\"comment\"> * maintain the offsets among percpu areas.  This function allocates</span>", 
"<span class=\"comment\"> * congruent vmalloc areas for it.  These areas tend to be scattered</span>", 
"<span class=\"comment\"> * pretty far, distance between two areas easily going up to</span>", 
"<span class=\"comment\"> * gigabytes.  To avoid interacting with regular vmallocs, these areas</span>", 
"<span class=\"comment\"> * are allocated from top.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Despite its complicated look, this allocator is rather simple.  It</span>", 
"<span class=\"comment\"> * does everything top-down and scans areas from the end looking for</span>", 
"<span class=\"comment\"> * matching slot.  While scanning, if any of the areas overlaps with</span>", 
"<span class=\"comment\"> * existing vmap_area, the base address is pulled down to fit the</span>", 
"<span class=\"comment\"> * area.  Scanning is repeated till all the areas fit and then all</span>", 
"<span class=\"comment\"> * necessary data structres are inserted and the result is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> **<a class=\"id\" href=\"#pcpu_get_vm_areas\">pcpu_get_vm_areas</a>(const unsigned long *<a class=\"id\" href=\"#offsets\">offsets</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#sizes\">sizes</a>, int <a class=\"id\" href=\"#nr_vms\">nr_vms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#vmalloc_start\">vmalloc_start</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#vmalloc_end\">vmalloc_end</a> = <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a> &amp; ~(<a class=\"id\" href=\"#align\">align</a> - 1);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> **<a class=\"id\" href=\"#vas\">vas</a>, *<a class=\"id\" href=\"#prev\">prev</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> **<a class=\"id\" href=\"#vms\">vms</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#area2\">area2</a>, <a class=\"id\" href=\"#last_area\">last_area</a>, <a class=\"id\" href=\"#term_area\">term_area</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#last_end\">last_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#purged\">purged</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &= <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* verify parameters and allocate data structures */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#align\">align</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a> || !<a class=\"id\" href=\"#is_power_of_2\">is_power_of_2</a>(<a class=\"id\" href=\"#align\">align</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#last_area\">last_area</a> = 0, <a class=\"id\" href=\"#area\">area</a> = 0; <a class=\"id\" href=\"#area\">area</a> &lt; <a class=\"id\" href=\"#nr_vms\">nr_vms</a>; <a class=\"id\" href=\"#area\">area</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#area\">area</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#area\">area</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* is everything aligned properly? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#IS_ALIGNED\">IS_ALIGNED</a>(<a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#area\">area</a>], <a class=\"id\" href=\"#align\">align</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#IS_ALIGNED\">IS_ALIGNED</a>(<a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#area\">area</a>], <a class=\"id\" href=\"#align\">align</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* detect the area with the highest address */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#last_area\">last_area</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_area\">last_area</a> = <a class=\"id\" href=\"#area\">area</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#area2\">area2</a> = 0; <a class=\"id\" href=\"#area2\">area2</a> &lt; <a class=\"id\" href=\"#nr_vms\">nr_vms</a>; <a class=\"id\" href=\"#area2\">area2</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start2\">start2</a> = <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#area2\">area2</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end2\">end2</a> = <a class=\"id\" href=\"#start2\">start2</a> + <a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#area2\">area2</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#area2\">area2</a> == <a class=\"id\" href=\"#area\">area</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start2\">start2</a> >= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#start2\">start2</a> &lt; <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#end2\">end2</a> <= <a class=\"id\" href=\"#end\">end</a> && <a class=\"id\" href=\"#end2\">end2</a> &gt; <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_end\">last_end</a> = <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#last_area\">last_area</a>] + <a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#last_area\">last_area</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vmalloc_end\">vmalloc_end</a> - <a class=\"id\" href=\"#vmalloc_start\">vmalloc_start</a> &lt; <a class=\"id\" href=\"#last_end\">last_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vms\">vms</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(<a class=\"id\" href=\"#vms\">vms</a>[0]) * <a class=\"id\" href=\"#nr_vms\">nr_vms</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vas\">vas</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(<a class=\"id\" href=\"#vas\">vas</a>[0]) * <a class=\"id\" href=\"#nr_vms\">nr_vms</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vas\">vas</a> || !<a class=\"id\" href=\"#vms\">vms</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free\">err_free</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#area\">area</a> = 0; <a class=\"id\" href=\"#area\">area</a> &lt; <a class=\"id\" href=\"#nr_vms\">nr_vms</a>; <a class=\"id\" href=\"#area\">area</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vas\">vas</a>[<a class=\"id\" href=\"#area\">area</a>] = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vms\">vms</a>[<a class=\"id\" href=\"#area\">area</a>] = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vas\">vas</a>[<a class=\"id\" href=\"#area\">area</a>] || !<a class=\"id\" href=\"#vms\">vms</a>[<a class=\"id\" href=\"#area\">area</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free\">err_free</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* start scanning - we scan from the top, begin with the last area */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#term_area\">term_area</a> = <a class=\"id\" href=\"#last_area\">last_area</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#area\">area</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#area\">area</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pvm_find_next_prev\">pvm_find_next_prev</a>(<a class=\"id\" href=\"#vmap_area_pcpu_hole\">vmap_area_pcpu_hole</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#vmalloc_end\">vmalloc_end</a> - <a class=\"id\" href=\"#last_end\">last_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#pvm_determine_end\">pvm_determine_end</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#align\">align</a>) - <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#true\">true</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#va_end\">va_end</a> <= <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#prev\">prev</a> && <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#va_end\">va_end</a> &gt; <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * base might have underflowed, add last_end before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * comparing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#last_end\">last_end</a> &lt; <a class=\"id\" href=\"#vmalloc_start\">vmalloc_start</a> + <a class=\"id\" href=\"#last_end\">last_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#purged\">purged</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#purge_vmap_area_lazy\">purge_vmap_area_lazy</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#purged\">purged</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free\">err_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If next overlaps, move base downwards so that it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * right below next and then recheck.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#va_start\">va_start</a> &lt; <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#pvm_determine_end\">pvm_determine_end</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#align\">align</a>) - <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#term_area\">term_area</a> = <a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If prev overlaps, shift down next and prev and move</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * base so that it's right below new next and then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * recheck.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> && <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#va_end\">va_end</a> &gt; <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#start\">start</a>)  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#node_to_va\">node_to_va</a>(<a class=\"id\" href=\"#rb_prev\">rb_prev</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#pvm_determine_end\">pvm_determine_end</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#align\">align</a>) - <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#term_area\">term_area</a> = <a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This area fits, move on to the previous one.  If</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the previous one is the terminal one, we're done.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = (<a class=\"id\" href=\"#area\">area</a> + <a class=\"id\" href=\"#nr_vms\">nr_vms</a> - 1) % <a class=\"id\" href=\"#nr_vms\">nr_vms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#area\">area</a> == <a class=\"id\" href=\"#term_area\">term_area</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#area\">area</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#area\">area</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pvm_find_next_prev\">pvm_find_next_prev</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#end\">end</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* we've found a fitting base, insert all va's */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#area\">area</a> = 0; <a class=\"id\" href=\"#area\">area</a> &lt; <a class=\"id\" href=\"#nr_vms\">nr_vms</a>; <a class=\"id\" href=\"#area\">area</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#vas\">vas</a>[<a class=\"id\" href=\"#area\">area</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> = <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#area\">area</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> = <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> + <a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#area\">area</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__insert_vmap_area\">__insert_vmap_area</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmap_area_pcpu_hole\">vmap_area_pcpu_hole</a> = <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#last_area\">last_area</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* insert all vm's */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#area\">area</a> = 0; <a class=\"id\" href=\"#area\">area</a> &lt; <a class=\"id\" href=\"#nr_vms\">nr_vms</a>; <a class=\"id\" href=\"#area\">area</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insert_vmalloc_vm\">insert_vmalloc_vm</a>(<a class=\"id\" href=\"#vms\">vms</a>[<a class=\"id\" href=\"#area\">area</a>], <a class=\"id\" href=\"#vas\">vas</a>[<a class=\"id\" href=\"#area\">area</a>], <a class=\"id\" href=\"#VM_ALLOC\">VM_ALLOC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pcpu_get_vm_areas\">pcpu_get_vm_areas</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vas\">vas</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vms\">vms</a>;", 
"", 
"<a class=\"id\" href=\"#err_free\">err_free</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#area\">area</a> = 0; <a class=\"id\" href=\"#area\">area</a> &lt; <a class=\"id\" href=\"#nr_vms\">nr_vms</a>; <a class=\"id\" href=\"#area\">area</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vas\">vas</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vas\">vas</a>[<a class=\"id\" href=\"#area\">area</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vms\">vms</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vms\">vms</a>[<a class=\"id\" href=\"#area\">area</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vas\">vas</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vms\">vms</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_free_vm_areas - free vmalloc areas for percpu allocator</span>", 
"<span class=\"comment\"> * @vms: vm_struct pointer array returned by pcpu_get_vm_areas()</span>", 
"<span class=\"comment\"> * @nr_vms: the number of allocated areas</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free vm_structs and the array allocated by pcpu_get_vm_areas().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pcpu_free_vm_areas\">pcpu_free_vm_areas</a>(struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> **<a class=\"id\" href=\"#vms\">vms</a>, int <a class=\"id\" href=\"#nr_vms\">nr_vms</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_vms\">nr_vms</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_vm_area\">free_vm_area</a>(<a class=\"id\" href=\"#vms\">vms</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vms\">vms</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"static void *<a class=\"id\" href=\"#s_start\">s_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#n\">n</a> = *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#vmlist\">vmlist</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> &gt; 0 && <a class=\"id\" href=\"#v\">v</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#s_next\">s_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#s_stop\">s_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#show_numa_info\">show_numa_info</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr\">nr</a>, *<a class=\"id\" href=\"#counters\">counters</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#counters\">counters</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#counters\">counters</a>, 0, <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a> * sizeof(unsigned int));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#nr\">nr</a> = 0; <a class=\"id\" href=\"#nr\">nr</a> &lt; <a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#nr\">nr</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#counters\">counters</a>[<a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#nr\">nr</a>])]++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#counters\">counters</a>[<a class=\"id\" href=\"#nr\">nr</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" N%u=%u\", <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#counters\">counters</a>[<a class=\"id\" href=\"#nr\">nr</a>]);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#s_show\">s_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"0x%p-0x%p %7ld\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#caller\">caller</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#buff\">buff</a>[<a class=\"id\" href=\"#KSYM_SYMBOL_LEN\">KSYM_SYMBOL_LEN</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, ' ');", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprint_symbol\">sprint_symbol</a>(<a class=\"id\" href=\"#buff\">buff</a>, (unsigned long)<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#caller\">caller</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#buff\">buff</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" pages=%d\", <a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#phys_addr\">phys_addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" phys=%llx\", (unsigned long long)<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#phys_addr\">phys_addr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_IOREMAP\">VM_IOREMAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" ioremap\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_ALLOC\">VM_ALLOC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" vmalloc\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_MAP\">VM_MAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" vmap\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_USERMAP\">VM_USERMAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" user\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_VPAGES\">VM_VPAGES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" vpages\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_numa_info\">show_numa_info</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#vmalloc_op\">vmalloc_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#s_start\">s_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#s_next\">s_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a> = <a class=\"id\" href=\"#s_stop\">s_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#s_show\">s_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#vmalloc_open\">vmalloc_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a> * sizeof(unsigned int), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#vmalloc_op\">vmalloc_op</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_vmalloc_operations\">proc_vmalloc_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#vmalloc_open\">vmalloc_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release_private\">seq_release_private</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_vmalloc_init\">proc_vmalloc_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"vmallocinfo\", <a class=\"id\" href=\"#S_IRUSR\">S_IRUSR</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_vmalloc_operations\">proc_vmalloc_operations</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#proc_vmalloc_init\">proc_vmalloc_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
];
xr_frag_insert('l/cb/947774758f28428237ec273ce3037ba062c852.xr', __xr_tmp);
