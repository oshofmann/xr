var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_KDB_H\">_KDB_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_KDB_H\">_KDB_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kernel Debugger Architecture Independent Global Headers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is subject to the terms and conditions of the GNU General Public</span>", 
"<span class=\"comment\"> * License.  See the file \"COPYING\" in the main directory of this archive</span>", 
"<span class=\"comment\"> * for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2000-2007 Silicon Graphics, Inc.  All Rights Reserved.</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 Stephane Eranian &lt;eranian@hpl.hp.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 Jason Wessel &lt;jason.wessel@windriver.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_POLL_FUNC_MAX\">KDB_POLL_FUNC_MAX</a><span class=\"ts\"/>5", 
"extern int <a class=\"id\" href=\"#kdb_poll_idx\">kdb_poll_idx</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kdb_initial_cpu is initialized to -1, and is set to the cpu</span>", 
"<span class=\"comment\"> * number whenever the kernel debugger is entered.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#kdb_initial_cpu\">kdb_initial_cpu</a>;", 
"extern <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#kdb_event\">kdb_event</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kdb_diemsg</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Contains a pointer to the last string supplied to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kernel 'die' panic function.</span>", 
"<span class=\"comment\"> */</span>", 
"extern const char *<a class=\"id\" href=\"#kdb_diemsg\">kdb_diemsg</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_EARLYKDB\">KDB_FLAG_EARLYKDB</a><span class=\"ts\"/>(1 << 0) <span class=\"comment\">/* set from boot parameter kdb=early */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_CATASTROPHIC\">KDB_FLAG_CATASTROPHIC</a><span class=\"ts\"/>(1 << 1) <span class=\"comment\">/* A catastrophic event has occurred */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_CMD_INTERRUPT\">KDB_FLAG_CMD_INTERRUPT</a><span class=\"ts\"/>(1 << 2) <span class=\"comment\">/* Previous command was interrupted */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_NOIPI\">KDB_FLAG_NOIPI</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 3) <span class=\"comment\">/* Do not send IPIs */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_ONLY_DO_DUMP\">KDB_FLAG_ONLY_DO_DUMP</a><span class=\"ts\"/>(1 << 4) <span class=\"comment\">/* Only do a dump, used when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  * kdb is off */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_NO_CONSOLE\">KDB_FLAG_NO_CONSOLE</a><span class=\"ts\"/>(1 << 5) <span class=\"comment\">/* No console is available,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  * kdb is disabled */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_NO_VT_CONSOLE\">KDB_FLAG_NO_VT_CONSOLE</a><span class=\"ts\"/>(1 << 6) <span class=\"comment\">/* No VT console is available, do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  * not use keyboard */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_NO_I8042\">KDB_FLAG_NO_I8042</a><span class=\"ts\"/>(1 << 7) <span class=\"comment\">/* No i8042 chip is available, do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  * not use keyboard */</span>", 
"", 
"extern int <a class=\"id\" href=\"#kdb_flags\">kdb_flags</a>;<span class=\"ts\"/><span class=\"comment\">/* Global flags, see kdb_state for per cpu state */</span>", 
"", 
"extern void <a class=\"id\" href=\"#kdb_save_flags\">kdb_save_flags</a>(void);", 
"extern void <a class=\"id\" href=\"#kdb_restore_flags\">kdb_restore_flags</a>(void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG\">KDB_FLAG</a>(<a class=\"id\" href=\"#flag\">flag</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#kdb_flags\">kdb_flags</a> &amp; <a class=\"id\" href=\"#KDB_FLAG_\">KDB_FLAG_</a>##<a class=\"id\" href=\"#flag\">flag</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_SET\">KDB_FLAG_SET</a>(<a class=\"id\" href=\"#flag\">flag</a>)<span class=\"ts\"/>((void)(<a class=\"id\" href=\"#kdb_flags\">kdb_flags</a> |= <a class=\"id\" href=\"#KDB_FLAG_\">KDB_FLAG_</a>##<a class=\"id\" href=\"#flag\">flag</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KDB_FLAG_CLEAR\">KDB_FLAG_CLEAR</a>(<a class=\"id\" href=\"#flag\">flag</a>)<span class=\"ts\"/>((void)(<a class=\"id\" href=\"#kdb_flags\">kdb_flags</a> &= ~<a class=\"id\" href=\"#KDB_FLAG_\">KDB_FLAG_</a>##<a class=\"id\" href=\"#flag\">flag</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * External entry point for the kernel debugger.  The pt_regs</span>", 
"<span class=\"comment\"> * at the time of entry are supplied along with the reason for</span>", 
"<span class=\"comment\"> * entry to the kernel debugger.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"typedef enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_ENTER\">KDB_REASON_ENTER</a> = 1,<span class=\"ts\"/><span class=\"comment\">/* KDB_ENTER() trap/fault - regs valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_ENTER_SLAVE\">KDB_REASON_ENTER_SLAVE</a>,<span class=\"ts\"/><span class=\"comment\">/* KDB_ENTER_SLAVE() trap/fault - regs valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_BREAK\">KDB_REASON_BREAK</a>,<span class=\"ts\"/><span class=\"comment\">/* Breakpoint inst. - regs valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_DEBUG\">KDB_REASON_DEBUG</a>,<span class=\"ts\"/><span class=\"comment\">/* Debug Fault - regs valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_OOPS\">KDB_REASON_OOPS</a>,<span class=\"ts\"/><span class=\"comment\">/* Kernel Oops - regs valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_SWITCH\">KDB_REASON_SWITCH</a>,<span class=\"ts\"/><span class=\"comment\">/* CPU switch - regs valid*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_KEYBOARD\">KDB_REASON_KEYBOARD</a>,<span class=\"ts\"/><span class=\"comment\">/* Keyboard entry - regs valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_NMI\">KDB_REASON_NMI</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Non-maskable interrupt; regs valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_RECURSE\">KDB_REASON_RECURSE</a>,<span class=\"ts\"/><span class=\"comment\">/* Recursive entry to kdb;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * regs probably valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_REASON_SSTEP\">KDB_REASON_SSTEP</a>,<span class=\"ts\"/><span class=\"comment\">/* Single Step trap. - regs valid */</span>", 
"} <a class=\"id\" href=\"#kdb_reason_t\">kdb_reason_t</a>;", 
"", 
"extern int <a class=\"id\" href=\"#kdb_trap_printk\">kdb_trap_printk</a>;", 
"extern int <a class=\"id\" href=\"#vkdb_printf\">vkdb_printf</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 0)));", 
"extern int <a class=\"id\" href=\"#kdb_printf\">kdb_printf</a>(const char *, ...)", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 2)));", 
"typedef int (*<a class=\"id\" href=\"#kdb_printf_t\">kdb_printf_t</a>)(const char *, ...)", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 2)));", 
"", 
"extern void <a class=\"id\" href=\"#kdb_init\">kdb_init</a>(int <a class=\"id\" href=\"#level\">level</a>);", 
"", 
"<span class=\"comment\">/* Access to kdb specific polling devices */</span>", 
"typedef int (*<a class=\"id\" href=\"#get_char_func\">get_char_func</a>)(void);", 
"extern <a class=\"id\" href=\"#get_char_func\">get_char_func</a> <a class=\"id\" href=\"#kdb_poll_funcs\">kdb_poll_funcs</a>[];", 
"extern int <a class=\"id\" href=\"#kdb_get_kbd_char\">kdb_get_kbd_char</a>(void);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#kdb_process_cpu\">kdb_process_cpu</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> &gt; <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"", 
"<span class=\"comment\">/* kdb access to register set for stack dumping */</span>", 
"extern struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#kdb_current_regs\">kdb_current_regs</a>;", 
"", 
"#else <span class=\"comment\">/* ! CONFIG_KGDB_KDB */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kdb_printf\">kdb_printf</a>(...)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kdb_init\">kdb_init</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_KGDB_KDB */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_NOT_INITIALIZED\">KDB_NOT_INITIALIZED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_INIT_EARLY\">KDB_INIT_EARLY</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KDB_INIT_FULL\">KDB_INIT_FULL</a>,", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#kdbgetintenv\">kdbgetintenv</a>(const char *, int *);", 
"extern int <a class=\"id\" href=\"#kdb_set\">kdb_set</a>(int, const char **);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* !_KDB_H */</span>", 
];
xr_frag_insert('l/cb/e059f6d1e9f46ff1f66319a1a1409c76bba7ab.xr', __xr_tmp);
