var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_completed_io_lock\">i_completed_io_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext4_end_io_buffer_write\">ext4_end_io_buffer_write</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_io_end_t\">ext4_io_end_t</a> *<a class=\"id\" href=\"#io_end\">io_end</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_private\">b_private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_clear_buffer_uninit\">test_clear_buffer_uninit</a>(<a class=\"id\" href=\"#bh\">bh</a>) || !<a class=\"id\" href=\"#io_end\">io_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"sb umounted, discard end_io request for inode %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_io_end\">ext4_free_io_end</a>(<a class=\"id\" href=\"#io_end\">io_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#EXT4_IO_UNWRITTEN\">EXT4_IO_UNWRITTEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add the io_end to per-inode completed io list*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_completed_io_lock\">i_completed_io_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_completed_io_list\">i_completed_io_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_completed_io_lock\">i_completed_io_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#dio_unwritten_wq\">dio_unwritten_wq</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* queue the work to convert unwritten extents to written */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_private\">b_private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_uninit\">clear_buffer_uninit</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_buffer_async_write\">end_buffer_async_write</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#uptodate\">uptodate</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_set_bh_endio\">ext4_set_bh_endio</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_io_end_t\">ext4_io_end_t</a> *<a class=\"id\" href=\"#io_end\">io_end</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_end\">io_end</a> = <a class=\"id\" href=\"#ext4_init_io_end\">ext4_init_io_end</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_end\">io_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: allocation fail\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to hold a reference to the page to make sure it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't get evicted before ext4_end_io_work() has a chance</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to convert the extent from written to unwritten.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#io_end\">io_end</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_private\">b_private</a> = <a class=\"id\" href=\"#io_end\">io_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#ext4_end_io_buffer_write\">ext4_end_io_buffer_write</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For ext4 extent files, ext4 will do direct-io write to holes,</span>", 
"<span class=\"comment\"> * preallocated extents, and those write extend the file, no need to</span>", 
"<span class=\"comment\"> * fall back to buffered IO.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For holes, we fallocate those blocks, mark them as unintialized</span>", 
"<span class=\"comment\"> * If those blocks were preallocated, we mark sure they are splited, but</span>", 
"<span class=\"comment\"> * still keep the range to write as unintialized.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The unwrritten extents will be converted to written when DIO is completed.</span>", 
"<span class=\"comment\"> * For async direct IO, since the IO may still pending when return, we</span>", 
"<span class=\"comment\"> * set up an end_io call back function, which will do the convertion</span>", 
"<span class=\"comment\"> * when async direct IO completed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the O_DIRECT write will extend the file then add this inode to the</span>", 
"<span class=\"comment\"> * orphan list.  So recovery will truncate it back to the original size</span>", 
"<span class=\"comment\"> * if the machine crashes during the write.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ext4_ext_direct_IO\">ext4_ext_direct_IO</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#iov_length\">iov_length</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#final_size\">final_size</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#WRITE\">WRITE</a> && <a class=\"id\" href=\"#final_size\">final_size</a> <= <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * We could direct write to holes and fallocate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * Allocated blocks to fill the hole are marked as uninitialized</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * to prevent paralel buffered read to expose the stale data</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * before DIO complete the data IO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * As to previously fallocated extents, ext4 get_block</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * will just simply mark the buffer mapped but still</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * keep the extents uninitialized.</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for non AIO case, we will convert those unwritten extents</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to written after return back from blockdev_direct_IO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for async DIO, the conversion needs to be defered when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the IO is completed. The ext4 end_io callback function</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will be called to take care of the conversion work.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Here for async case, we allocate an io_end structure to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hook to the iocb.</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#cur_aio_dio\">cur_aio_dio</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_sync_kiocb\">is_sync_kiocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#ext4_init_io_end\">ext4_init_io_end</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we save the io structure for current async</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * direct IO, so that later ext4_map_blocks()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * could flag the io structure whether there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is a unwritten extents needs to be converted</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * when IO is completed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#cur_aio_dio\">cur_aio_dio</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#blockdev_direct_IO\">blockdev_direct_IO</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>, <a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ext4_get_block_write\">ext4_get_block_write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ext4_end_io_dio\">ext4_end_io_dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#cur_aio_dio\">cur_aio_dio</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The io_end structure takes a reference to the inode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that structure needs to be destroyed and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reference to the inode need to be dropped, when IO is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * complete, even with 0 byte write, or failed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In the successful AIO DIO case, the io_end structure will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * desctroyed and the reference to the inode will be dropped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * after the end_io call back function is called.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In the case there is 0 byte write, or error case, since</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * VFS direct IO won't invoke the end_io call back function,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we need to free the end_io structure here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a> && <a class=\"id\" href=\"#ret\">ret</a> <= 0 && <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_io_end\">ext4_free_io_end</a>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0 && <a class=\"id\" href=\"#ext4_test_inode_state\">ext4_test_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_STATE_DIO_UNWRITTEN\">EXT4_STATE_DIO_UNWRITTEN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for non AIO case, since the IO is already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * completed, we could do the convertion right here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_convert_unwritten_extents\">ext4_convert_unwritten_extents</a>(<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_inode_state\">ext4_clear_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_STATE_DIO_UNWRITTEN\">EXT4_STATE_DIO_UNWRITTEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for write the the end of file case, we fall back to old way */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_ind_direct_IO\">ext4_ind_direct_IO</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ext4_direct_IO\">ext4_direct_IO</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_ext_direct_IO\">ext4_ext_direct_IO</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_ind_direct_IO\">ext4_ind_direct_IO</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pages can be marked dirty completely asynchronously from ext4's journalling</span>", 
"<span class=\"comment\"> * activity.  By filemap_sync_pte(), try_to_unmap_one(), etc.  We cannot do</span>", 
"<span class=\"comment\"> * much here because -&gt;set_page_dirty is called under VFS locks.  The page is</span>", 
"<span class=\"comment\"> * not necessarily locked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We cannot just dirty the page and leave attached buffers clean, because the</span>", 
"<span class=\"comment\"> * buffers' dirty state is \"definitive\".  We cannot just set the buffers dirty</span>", 
"<span class=\"comment\"> * or jbddirty because all the journalling code will explode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So what we do is to mark the page \"pending dirty\" and next time writepage</span>", 
"<span class=\"comment\"> * is called, propagate that into the buffers appropriately.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_journalled_set_page_dirty\">ext4_journalled_set_page_dirty</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageChecked\">SetPageChecked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__set_page_dirty_nobuffers\">__set_page_dirty_nobuffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext4_ordered_aops\">ext4_ordered_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_readpage\">ext4_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpages\">readpages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_readpages\">ext4_readpages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_writepage\">ext4_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_write_begin\">ext4_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_ordered_write_end\">ext4_ordered_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_bmap\">ext4_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#invalidatepage\">invalidatepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_invalidatepage\">ext4_invalidatepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#releasepage\">releasepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_releasepage\">ext4_releasepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#direct_IO\">direct_IO</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_direct_IO\">ext4_direct_IO</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#migratepage\">migratepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#is_partially_uptodate\">is_partially_uptodate</a>  = <a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext4_writeback_aops\">ext4_writeback_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_readpage\">ext4_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpages\">readpages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_readpages\">ext4_readpages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_writepage\">ext4_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_write_begin\">ext4_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_writeback_write_end\">ext4_writeback_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_bmap\">ext4_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#invalidatepage\">invalidatepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_invalidatepage\">ext4_invalidatepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#releasepage\">releasepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_releasepage\">ext4_releasepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#direct_IO\">direct_IO</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_direct_IO\">ext4_direct_IO</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#migratepage\">migratepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#is_partially_uptodate\">is_partially_uptodate</a>  = <a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext4_journalled_aops\">ext4_journalled_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_readpage\">ext4_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpages\">readpages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_readpages\">ext4_readpages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_writepage\">ext4_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_write_begin\">ext4_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_journalled_write_end\">ext4_journalled_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_journalled_set_page_dirty\">ext4_journalled_set_page_dirty</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_bmap\">ext4_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#invalidatepage\">invalidatepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_invalidatepage\">ext4_invalidatepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#releasepage\">releasepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_releasepage\">ext4_releasepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#is_partially_uptodate\">is_partially_uptodate</a>  = <a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext4_da_aops\">ext4_da_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_readpage\">ext4_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpages\">readpages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_readpages\">ext4_readpages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_writepage\">ext4_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepages\">writepages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_da_writepages\">ext4_da_writepages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_da_write_begin\">ext4_da_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_da_write_end\">ext4_da_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_bmap\">ext4_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#invalidatepage\">invalidatepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_da_invalidatepage\">ext4_da_invalidatepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#releasepage\">releasepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_releasepage\">ext4_releasepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#direct_IO\">direct_IO</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_direct_IO\">ext4_direct_IO</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#migratepage\">migratepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#is_partially_uptodate\">is_partially_uptodate</a>  = <a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#ext4_set_aops\">ext4_set_aops</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_should_order_data\">ext4_should_order_data</a>(<a class=\"id\" href=\"#inode\">inode</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#DELALLOC\">DELALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#ext4_da_aops\">ext4_da_aops</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#ext4_should_order_data\">ext4_should_order_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#ext4_ordered_aops\">ext4_ordered_aops</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#ext4_should_writeback_data\">ext4_should_writeback_data</a>(<a class=\"id\" href=\"#inode\">inode</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#DELALLOC\">DELALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#ext4_da_aops\">ext4_da_aops</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#ext4_should_writeback_data\">ext4_should_writeback_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#ext4_writeback_aops\">ext4_writeback_aops</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#ext4_journalled_aops\">ext4_journalled_aops</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext4_block_truncate_page() zeroes out a mapping from file offset `from'</span>", 
"<span class=\"comment\"> * up to the end of the block which corresponds to `from'.</span>", 
"<span class=\"comment\"> * This required during truncate. We need to physically zero the tail end</span>", 
"<span class=\"comment\"> * of that block so it doesn't yield old data if the file is later grown.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext4_block_truncate_page\">ext4_block_truncate_page</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#from\">from</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#from\">from</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>-1);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#from\">from</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mapping_gfp_mask\">mapping_gfp_mask</a>(<a class=\"id\" href=\"#mapping\">mapping</a>) &amp; ~<a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#blocksize\">blocksize</a> - (<a class=\"id\" href=\"#offset\">offset</a> &amp; (<a class=\"id\" href=\"#blocksize\">blocksize</a> - 1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a> = <a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the buffer that contains \"offset\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#pos\">pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_freed\">buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"freed: skip\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"unmapped\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_block\">ext4_get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#bh\">bh</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unmapped? It's a hole - nothing to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"still unmapped\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, it's mapped. Make sure it's up-to-date */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(<a class=\"id\" href=\"#READ\">READ</a>, 1, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Uhhuh. Read error. Complain and punt. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_should_journal_data\">ext4_should_journal_data</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"get write access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zero_user\">zero_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"zeroed end of block\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_should_journal_data\">ext4_should_journal_data</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_should_order_data\">ext4_should_order_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_jbd2_file_inode\">ext4_jbd2_file_inode</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Probably it should be a library function... search for first non-zero word</span>", 
"<span class=\"comment\"> * or memcmp with zero_page, whatever is better for particular architecture.</span>", 
"<span class=\"comment\"> * Linus?</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#all_zeroes\">all_zeroes</a>(<a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_find_shared - find the indirect blocks for partial truncation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode:<span class=\"ts\"/>  inode in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@depth:<span class=\"ts\"/>  depth of the affected branch</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: offsets of pointers in that branch (see ext4_block_to_path)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chain:<span class=\"ts\"/>  place to store the pointers to partial indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@top:<span class=\"ts\"/>  place to the (detached) top of branch</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is a helper function used by ext4_truncate().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When we do truncate() we may have to clean the ends of several</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>indirect blocks but leave the blocks themselves alive. Block is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>partially truncated if some data below the new i_size is refered</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from it (and it is on the path to the first completely truncated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data block, indeed).  We have to free the top of that path along</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with everything to the right of the path. Since no allocation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>past the truncation point is possible until ext4_truncate()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>finishes, we may safely do the latter, but top of branch may</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>require special attention - pageout below the truncation point</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>might try to populate it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We atomically detach the top of branch from the tree, store the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>block number of its root in *@top, pointers to buffer_heads of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>partially truncated blocks - in @chain[].bh and pointers to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>their last elements that should not be removed - in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chain[].p. Return value is the pointer to last filled element</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of @chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The work left to caller to do the actual freeing of subtrees:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>a) free the subtree starting from *@top</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>b) free the subtrees whose roots are stored in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(@chain[i].p+1 .. end of @chain[i].bh-&gt;b_data)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>c) free the subtrees growing from the inode past the @chain[0].</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(no partially truncated stuff there).  */</span>", 
"", 
"static <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#ext4_find_shared\">ext4_find_shared</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#depth\">depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#offsets\">offsets</a>[4], <a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#top\">top</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#top\">top</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* Make k index the deepest non-null offset + 1 */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#depth\">depth</a>; <a class=\"id\" href=\"#k\">k</a> &gt; 1 && !<a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#k\">k</a>-1]; <a class=\"id\" href=\"#k\">k</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext4_get_branch\">ext4_get_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Writer: pointers */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#k\">k</a>-1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the branch acquired continuation since we've looked at it -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fine, it should all survive and (new) top doesn't belong to us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#key\">key</a> && *<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Writer: end */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_top\">no_top</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#partial\">partial</a>; (<a class=\"id\" href=\"#p\">p</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) && <a class=\"id\" href=\"#all_zeroes\">all_zeroes</a>((<a class=\"id\" href=\"#__le32\">__le32</a> *) <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a>); <a class=\"id\" href=\"#p\">p</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, we've found the last block that must survive. The rest of our</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * branch should be detached before unlocking. However, if that rest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of branch is all ours and does not grow immediately from the inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's easier to cheat and just decrement partial-&gt;p.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#k\">k</a> - 1 && <a class=\"id\" href=\"#p\">p</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a>--;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#top\">top</a> = *<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nope, don't do this in ext4.  Must leave the tree intact */</span>", 
"#if 0", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Writer: end */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#no_top\">no_top</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#partial\">partial</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Zero a number of block pointers in either an inode or an indirect block.</span>", 
"<span class=\"comment\"> * If we restart the transaction we must again get write access to the</span>", 
"<span class=\"comment\"> * indirect block for further modification.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We release `count' blocks on disk, but (last - first) may be greater</span>", 
"<span class=\"comment\"> * than `count' because there can be holes in there.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_clear_blocks\">ext4_clear_blocks</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#block_to_free\">block_to_free</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#first\">first</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#last\">last</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#EXT4_FREE_BLOCKS_FORGET\">EXT4_FREE_BLOCKS_FORGET</a> | <a class=\"id\" href=\"#EXT4_FREE_BLOCKS_VALIDATED\">EXT4_FREE_BLOCKS_VALIDATED</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) || <a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#EXT4_FREE_BLOCKS_METADATA\">EXT4_FREE_BLOCKS_METADATA</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_data_block_valid\">ext4_data_block_valid</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>), <a class=\"id\" href=\"#block_to_free\">block_to_free</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#count\">count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE\">EXT4_ERROR_INODE</a>(<a class=\"id\" href=\"#inode\">inode</a>, \"attempt to clear invalid \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"blocks %llu len %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long) <a class=\"id\" href=\"#block_to_free\">block_to_free</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#try_to_extend_transaction\">try_to_extend_transaction</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call ext4_handle_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_truncate_restart_trans\">ext4_truncate_restart_trans</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"retaking write access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#first\">first</a>; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#last\">last</a>; <a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks\">ext4_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 0, <a class=\"id\" href=\"#block_to_free\">block_to_free</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext4_free_data - free a list of data blocks</span>", 
"<span class=\"comment\"> * @handle:<span class=\"ts\"/>handle for this transaction</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/>inode we are dealing with</span>", 
"<span class=\"comment\"> * @this_bh:<span class=\"ts\"/>indirect buffer_head which contains *@first and *@last</span>", 
"<span class=\"comment\"> * @first:<span class=\"ts\"/>array of block numbers</span>", 
"<span class=\"comment\"> * @last:<span class=\"ts\"/>points immediately past the end of array</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We are freeing all blocks refered from that array (numbers are stored as</span>", 
"<span class=\"comment\"> * little-endian 32-bit) and updating @inode-&gt;i_blocks appropriately.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We accumulate contiguous runs of blocks to free.  Conveniently, if these</span>", 
"<span class=\"comment\"> * blocks are contiguous then releasing them at one time will only affect one</span>", 
"<span class=\"comment\"> * or two bitmap blocks (+ group descriptor(s) and superblock) and we won't</span>", 
"<span class=\"comment\"> * actually use a lot of journal space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @this_bh will be %NULL if @first and @last point into the inode's direct</span>", 
"<span class=\"comment\"> * block pointers.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_free_data\">ext4_free_data</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#this_bh\">this_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#last\">last</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#block_to_free\">block_to_free</a> = 0;    <span class=\"comment\">/* Starting block # of a run */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;<span class=\"ts\"/>    <span class=\"comment\">/* Number of blocks in the run */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/>    <span class=\"comment\">/* Pointer into inode/ind</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       corresponding to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       block_to_free */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#nr\">nr</a>;<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* Current block # */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* Pointer into inode/ind</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       for current block */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_bh\">this_bh</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For indirect block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#this_bh\">this_bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#this_bh\">this_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Important: if we can't update the indirect pointers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to the blocks, we can't free them. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#first\">first</a>; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#last\">last</a>; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* accumulate blocks to free if they're contiguous */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_to_free\">block_to_free</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#nr\">nr</a> == <a class=\"id\" href=\"#block_to_free\">block_to_free</a> + <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_clear_blocks\">ext4_clear_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#this_bh\">this_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#block_to_free\">block_to_free</a>, <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_to_free\">block_to_free</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_blocks\">ext4_clear_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#this_bh\">this_bh</a>, <a class=\"id\" href=\"#block_to_free\">block_to_free</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_bh\">this_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#this_bh\">this_bh</a>, \"call ext4_handle_dirty_metadata\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The buffer head should have an attached journal head at this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * point. However, if the data is corrupted and an indirect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block pointed to itself, it would have been detached when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the block was cleared. Check for this instead of OOPSing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#EXT4_JOURNAL\">EXT4_JOURNAL</a>(<a class=\"id\" href=\"#inode\">inode</a>) == <a class=\"id\" href=\"#NULL\">NULL</a>) || <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#this_bh\">this_bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#this_bh\">this_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE\">EXT4_ERROR_INODE</a>(<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"circular indirect block detected at \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"block %llu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long) <a class=\"id\" href=\"#this_bh\">this_bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_free_branches - free an array of branches</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@handle: JBD handle for this transaction</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode:<span class=\"ts\"/>inode we are dealing with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@parent_bh: the buffer_head which contains *@first and *@last</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@first:<span class=\"ts\"/>array of block numbers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@last:<span class=\"ts\"/>pointer immediately past the end of array</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@depth:<span class=\"ts\"/>depth of the branches to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We are freeing all blocks refered from these branches (numbers are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>stored as little-endian 32-bit) and updating @inode-&gt;i_blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appropriately.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_free_branches\">ext4_free_branches</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#parent_bh\">parent_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#last\">last</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_handle_is_aborted\">ext4_handle_is_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#addr_per_block\">addr_per_block</a> = <a class=\"id\" href=\"#EXT4_ADDR_PER_BLOCK\">EXT4_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#p\">p</a> >= <a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr\">nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A hole */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_data_block_valid\">ext4_data_block_valid</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#nr\">nr</a>, 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE\">EXT4_ERROR_INODE</a>(<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"invalid indirect mapped \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"block %lu (level %d)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long) <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Go read the buffer for the next level down */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_bread\">sb_bread</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * A read failure? Report error and clear slot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (should be rare).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE_BLOCK\">EXT4_ERROR_INODE_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Read failure\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This zaps the entire block.  Bottom up. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"free child branches\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_branches\">ext4_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__le32\">__le32</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__le32\">__le32</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + <a class=\"id\" href=\"#addr_per_block\">addr_per_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Everything below this this pointer has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * released.  Now let this top-of-subtree go.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We want the freeing of this indirect block to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * atomic in the journal with the updating of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bitmap block which owns it.  So make some room in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the journal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We zero the parent pointer *after* freeing its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pointee in the bitmaps, so if extend_transaction()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for some reason fails to put the bitmap changes and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the release into the same transaction, recovery</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * will merely complain about releasing a free block,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * rather than leaking blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_handle_is_aborted\">ext4_handle_is_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#try_to_extend_transaction\">try_to_extend_transaction</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_truncate_restart_trans\">ext4_truncate_restart_trans</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The forget flag here is critical because if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we are journaling (and not doing data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * journaling), we have to make sure a revoke</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * record is written to prevent the journal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * replay from overwriting the (former)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * indirect block if it gets reallocated as a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * data block.  This must happen in the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * transaction where the data blocks are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * actually freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks\">ext4_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 0, <a class=\"id\" href=\"#nr\">nr</a>, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#EXT4_FREE_BLOCKS_METADATA\">EXT4_FREE_BLOCKS_METADATA</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#EXT4_FREE_BLOCKS_FORGET\">EXT4_FREE_BLOCKS_FORGET</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_bh\">parent_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The block which we have just freed is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pointed to by an indirect block: journal it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#parent_bh\">parent_bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#parent_bh\">parent_bh</a>)){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#parent_bh\">parent_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"call ext4_handle_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#parent_bh\">parent_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have reached the bottom of the tree. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#parent_bh\">parent_bh</a>, \"free data blocks\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_data\">ext4_free_data</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#parent_bh\">parent_bh</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext4_can_truncate\">ext4_can_truncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_APPEND\">IS_APPEND</a>(<a class=\"id\" href=\"#inode\">inode</a>) || <a class=\"id\" href=\"#IS_IMMUTABLE\">IS_IMMUTABLE</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return !<a class=\"id\" href=\"#ext4_inode_is_fast_symlink\">ext4_inode_is_fast_symlink</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext4_truncate()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We block out ext4_get_block() block instantiations across the entire</span>", 
"<span class=\"comment\"> * transaction, and VFS/VM ensures that ext4_truncate() cannot run</span>", 
"<span class=\"comment\"> * simultaneously on behalf of the same inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As we work through the truncate and commmit bits of it to the journal there</span>", 
"<span class=\"comment\"> * is one core, guiding principle: the file's tree must always be consistent on</span>", 
"<span class=\"comment\"> * disk.  We must be able to restart the truncate after a crash.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The file's tree may be transiently inconsistent in memory (although it</span>", 
"<span class=\"comment\"> * probably isn't), but whenever we close off and commit a journal transaction,</span>", 
"<span class=\"comment\"> * the contents of (the filesystem + the journal) must be consistent and</span>", 
"<span class=\"comment\"> * restartable.  It's pretty simple, really: bottom up, right to left (although</span>", 
"<span class=\"comment\"> * left-to-right works OK too).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that at recovery time, journal replay occurs *before* the restart of</span>", 
"<span class=\"comment\"> * truncate against the orphan inode list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The committed inode has the new, desired i_size (which is the same as</span>", 
"<span class=\"comment\"> * i_disksize in this case).  After a crash, ext4_orphan_cleanup() will see</span>", 
"<span class=\"comment\"> * that this inode's truncate did not complete and it will again call</span>", 
"<span class=\"comment\"> * ext4_truncate() to have another go.  So there will be instantiated blocks</span>", 
"<span class=\"comment\"> * to the right of the truncation point in a crashed ext4 filesystem.  But</span>", 
"<span class=\"comment\"> * that's fine - as long as they are linked from the inode, the post-crash</span>", 
"<span class=\"comment\"> * ext4_truncate() run will find them and release them.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext4_truncate\">ext4_truncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#i_data\">i_data</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr_per_block\">addr_per_block</a> = <a class=\"id\" href=\"#EXT4_ADDR_PER_BLOCK\">EXT4_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#offsets\">offsets</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#last_block\">last_block</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_can_truncate\">ext4_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_inode_flag\">ext4_clear_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EOFBLOCKS\">EXT4_INODE_EOFBLOCKS</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> == 0 && !<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#NO_AUTO_DA_ALLOC\">NO_AUTO_DA_ALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_set_inode_state\">ext4_set_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_STATE_DA_ALLOC_CLOSE\">EXT4_STATE_DA_ALLOC_CLOSE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_ext_truncate\">ext4_ext_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#start_transaction\">start_transaction</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* AKPM: return what? */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_block\">last_block</a> = (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>-1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>>> <a class=\"id\" href=\"#EXT4_BLOCK_SIZE_BITS\">EXT4_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> &amp; (<a class=\"id\" href=\"#blocksize\">blocksize</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_block_truncate_page\">ext4_block_truncate_page</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_stop\">out_stop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#ext4_block_to_path\">ext4_block_to_path</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#last_block\">last_block</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_stop\">out_stop</a>;<span class=\"ts\"/><span class=\"comment\">/* error */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK.  This truncate is going to happen.  We add the inode to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * orphan list, so that if this truncate spans multiple transactions,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and we crash, we will resume the truncate when the filesystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * recovers.  It also marks the inode dirty, to catch the new size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Implication: the file must always be in a sane, consistent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * truncatable state while each transaction commits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_orphan_add\">ext4_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_stop\">out_stop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * From here we block out all ext4_get_block() callers who want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * modify the block allocation tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data_sem\">i_data_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_discard_preallocations\">ext4_discard_preallocations</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The orphan list entry will now protect us from any crash which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * occurs before the truncate completes, so it is now safe to propagate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the new, shorter inode size (held for now in i_size) into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on-disk inode. We do this via i_disksize, which is the value which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext4 *really* writes onto the disk inode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 1) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* direct blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_data\">ext4_free_data</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i_data\">i_data</a>+<a class=\"id\" href=\"#offsets\">offsets</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#i_data\">i_data</a> + <a class=\"id\" href=\"#EXT4_NDIR_BLOCKS\">EXT4_NDIR_BLOCKS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_indirects\">do_indirects</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext4_find_shared\">ext4_find_shared</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Kill the top of shared branch (not detached) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partial\">partial</a> == <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Shared branch grows from the inode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_branches\">ext4_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, (<a class=\"id\" href=\"#chain\">chain</a>+<a class=\"id\" href=\"#n\">n</a>-1) - <a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We mark the inode dirty prior to restart,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and prior to stop.  No need for it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Shared branch grows from an indirect block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_branches\">ext4_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a>+1, (<a class=\"id\" href=\"#chain\">chain</a>+<a class=\"id\" href=\"#n\">n</a>-1) - <a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the ends of indirect blocks on the shared branch */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_branches\">ext4_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>+<a class=\"id\" href=\"#addr_per_block\">addr_per_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#chain\">chain</a>+<a class=\"id\" href=\"#n\">n</a>-1) - <a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"call brelse\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#do_indirects\">do_indirects</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Kill the remaining (whole) subtrees */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#offsets\">offsets</a>[0]) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT4_IND_BLOCK\">EXT4_IND_BLOCK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_branches\">ext4_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT4_IND_BLOCK\">EXT4_IND_BLOCK</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EXT4_IND_BLOCK\">EXT4_IND_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT4_DIND_BLOCK\">EXT4_DIND_BLOCK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_branches\">ext4_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT4_DIND_BLOCK\">EXT4_DIND_BLOCK</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EXT4_DIND_BLOCK\">EXT4_DIND_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT4_TIND_BLOCK\">EXT4_TIND_BLOCK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_branches\">ext4_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT4_TIND_BLOCK\">EXT4_TIND_BLOCK</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EXT4_TIND_BLOCK\">EXT4_TIND_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data_sem\">i_data_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#ext4_current_time\">ext4_current_time</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In a multi-transaction truncate, we only make the final transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synchronous</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_SYNC\">IS_SYNC</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_handle_sync\">ext4_handle_sync</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<a class=\"id\" href=\"#out_stop\">out_stop</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this was a simple ftruncate(), and the file will remain alive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we need to clear up the orphan record which we created above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * However, if this was a real unlink then we were called by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext4_delete_inode(), and we allow that function to clean up the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * orphan info for us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_del\">ext4_orphan_del</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext4_get_inode_loc returns with an extra refcount against the inode's</span>", 
"<span class=\"comment\"> * underlying buffer_head on success. If 'in_mem' is true, we have all</span>", 
"<span class=\"comment\"> * data in memory that is needed to recreate the on-disk version of this</span>", 
"<span class=\"comment\"> * inode.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__ext4_get_inode_loc\">__ext4_get_inode_loc</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_iloc\">ext4_iloc</a> *<a class=\"id\" href=\"#iloc\">iloc</a>, int <a class=\"id\" href=\"#in_mem\">in_mem</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_desc\">ext4_group_desc</a><span class=\"ts\"/>*<a class=\"id\" href=\"#gdp\">gdp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a><span class=\"ts\"/>*<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inodes_per_block\">inodes_per_block</a>, <a class=\"id\" href=\"#inode_offset\">inode_offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_valid_inum\">ext4_valid_inum</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#block_group\">block_group</a> = (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> - 1) / <a class=\"id\" href=\"#EXT4_INODES_PER_GROUP\">EXT4_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext4_get_group_desc\">ext4_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gdp\">gdp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Figure out the offset within the block group inode table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inodes_per_block\">inodes_per_block</a> = (<a class=\"id\" href=\"#EXT4_BLOCK_SIZE\">EXT4_BLOCK_SIZE</a>(<a class=\"id\" href=\"#sb\">sb</a>) / <a class=\"id\" href=\"#EXT4_INODE_SIZE\">EXT4_INODE_SIZE</a>(<a class=\"id\" href=\"#sb\">sb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_offset\">inode_offset</a> = ((<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> - 1) %", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_INODES_PER_GROUP\">EXT4_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#ext4_inode_table\">ext4_inode_table</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#gdp\">gdp</a>) + (<a class=\"id\" href=\"#inode_offset\">inode_offset</a> / <a class=\"id\" href=\"#inodes_per_block\">inodes_per_block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#inode_offset\">inode_offset</a> % <a class=\"id\" href=\"#inodes_per_block\">inodes_per_block</a>) * <a class=\"id\" href=\"#EXT4_INODE_SIZE\">EXT4_INODE_SIZE</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE_BLOCK\">EXT4_ERROR_INODE_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"unable to read itable block\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the buffer has the write error flag, we have failed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to write out another inode in the same block.  In this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * case, we don't have to read the block because we may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * read the old inode data successfully.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_write_io_error\">buffer_write_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>) && !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* someone brought it uptodate while we waited */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#has_buffer\">has_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we have all information of the inode in memory and this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is the only valid inode in the block, we need not read the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_mem\">in_mem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#inode_offset\">inode_offset</a> &amp; ~(<a class=\"id\" href=\"#inodes_per_block\">inodes_per_block</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Is the inode bitmap in cache? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ext4_inode_bitmap\">ext4_inode_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#gdp\">gdp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#make_io\">make_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the inode bitmap isn't in cache then the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * optimisation may end up performing two reads instead</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * of one, so skip it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#make_io\">make_io</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#inodes_per_block\">inodes_per_block</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#inode_offset\">inode_offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_test_bit\">ext4_test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#inodes_per_block\">inodes_per_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* all other inodes are free, so skip I/O */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, 0, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#has_buffer\">has_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#make_io\">make_io</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we need to do any I/O, try to pre-readahead extra</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * blocks from the inode table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_inode_readahead_blks\">s_inode_readahead_blks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#num\">num</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#ext4_inode_table\">ext4_inode_table</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#gdp\">gdp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* s_inode_readahead_blks is always a power of 2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#block\">block</a> &amp; ~(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_inode_readahead_blks\">s_inode_readahead_blks</a>-1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a> &gt; <a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#b\">b</a> + <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_inode_readahead_blks\">s_inode_readahead_blks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#EXT4_INODES_PER_GROUP\">EXT4_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_HAS_RO_COMPAT_FEATURE\">EXT4_HAS_RO_COMPAT_FEATURE</a>(<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#EXT4_FEATURE_RO_COMPAT_GDT_CSUM\">EXT4_FEATURE_RO_COMPAT_GDT_CSUM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> -= <a class=\"id\" href=\"#ext4_itable_unused_count\">ext4_itable_unused_count</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#gdp\">gdp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> += <a class=\"id\" href=\"#num\">num</a> / <a class=\"id\" href=\"#inodes_per_block\">inodes_per_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#table\">table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#b\">b</a> <= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb_breadahead\">sb_breadahead</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#b\">b</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There are other valid inodes in the buffer, this inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has in-inode xattrs, or we don't have this inode in memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Read the block from disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_read_sync\">end_buffer_read_sync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#READ_META\">READ_META</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE_BLOCK\">EXT4_ERROR_INODE_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"unable to read itable block\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#has_buffer\">has_buffer</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext4_get_inode_loc\">ext4_get_inode_loc</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#ext4_iloc\">ext4_iloc</a> *<a class=\"id\" href=\"#iloc\">iloc</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We have all inode data except xattrs in memory here. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ext4_get_inode_loc\">__ext4_get_inode_loc</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iloc\">iloc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#ext4_test_inode_state\">ext4_test_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_STATE_XATTR\">EXT4_STATE_XATTR</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#ext4_set_inode_flags\">ext4_set_inode_flags</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> &= ~(<a class=\"id\" href=\"#S_SYNC\">S_SYNC</a>|<a class=\"id\" href=\"#S_APPEND\">S_APPEND</a>|<a class=\"id\" href=\"#S_IMMUTABLE\">S_IMMUTABLE</a>|<a class=\"id\" href=\"#S_NOATIME\">S_NOATIME</a>|<a class=\"id\" href=\"#S_DIRSYNC\">S_DIRSYNC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_SYNC_FL\">EXT4_SYNC_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_SYNC\">S_SYNC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_APPEND_FL\">EXT4_APPEND_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_APPEND\">S_APPEND</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_IMMUTABLE_FL\">EXT4_IMMUTABLE_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_IMMUTABLE\">S_IMMUTABLE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_NOATIME_FL\">EXT4_NOATIME_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_NOATIME\">S_NOATIME</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_DIRSYNC_FL\">EXT4_DIRSYNC_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_DIRSYNC\">S_DIRSYNC</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Propagate flags from i_flags to EXT4_I(inode)-&gt;i_flags */</span>", 
"void <a class=\"id\" href=\"#ext4_get_inode_flags\">ext4_get_inode_flags</a>(struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#vfs_fl\">vfs_fl</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_fl\">old_fl</a>, <a class=\"id\" href=\"#new_fl\">new_fl</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfs_fl\">vfs_fl</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>.<a class=\"id\" href=\"#i_flags\">i_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_fl\">old_fl</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#old_fl\">old_fl</a> &amp; ~(<a class=\"id\" href=\"#EXT4_SYNC_FL\">EXT4_SYNC_FL</a>|<a class=\"id\" href=\"#EXT4_APPEND_FL\">EXT4_APPEND_FL</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_IMMUTABLE_FL\">EXT4_IMMUTABLE_FL</a>|<a class=\"id\" href=\"#EXT4_NOATIME_FL\">EXT4_NOATIME_FL</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_DIRSYNC_FL\">EXT4_DIRSYNC_FL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vfs_fl\">vfs_fl</a> &amp; <a class=\"id\" href=\"#S_SYNC\">S_SYNC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> |= <a class=\"id\" href=\"#EXT4_SYNC_FL\">EXT4_SYNC_FL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vfs_fl\">vfs_fl</a> &amp; <a class=\"id\" href=\"#S_APPEND\">S_APPEND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> |= <a class=\"id\" href=\"#EXT4_APPEND_FL\">EXT4_APPEND_FL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vfs_fl\">vfs_fl</a> &amp; <a class=\"id\" href=\"#S_IMMUTABLE\">S_IMMUTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> |= <a class=\"id\" href=\"#EXT4_IMMUTABLE_FL\">EXT4_IMMUTABLE_FL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vfs_fl\">vfs_fl</a> &amp; <a class=\"id\" href=\"#S_NOATIME\">S_NOATIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> |= <a class=\"id\" href=\"#EXT4_NOATIME_FL\">EXT4_NOATIME_FL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vfs_fl\">vfs_fl</a> &amp; <a class=\"id\" href=\"#S_DIRSYNC\">S_DIRSYNC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> |= <a class=\"id\" href=\"#EXT4_DIRSYNC_FL\">EXT4_DIRSYNC_FL</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a>, <a class=\"id\" href=\"#old_fl\">old_fl</a>, <a class=\"id\" href=\"#new_fl\">new_fl</a>) != <a class=\"id\" href=\"#old_fl\">old_fl</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#blkcnt_t\">blkcnt_t</a> <a class=\"id\" href=\"#ext4_inode_blocks\">ext4_inode_blocks</a>(struct <a class=\"id\" href=\"#ext4_inode\">ext4_inode</a> *<a class=\"id\" href=\"#raw_inode\">raw_inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blkcnt_t\">blkcnt_t</a> <a class=\"id\" href=\"#i_blocks\">i_blocks</a> ;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = &amp;(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_HAS_RO_COMPAT_FEATURE\">EXT4_HAS_RO_COMPAT_FEATURE</a>(<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_FEATURE_RO_COMPAT_HUGE_FILE\">EXT4_FEATURE_RO_COMPAT_HUGE_FILE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we are using combined 48 bit field */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_blocks\">i_blocks</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks_high\">i_blocks_high</a>)) << 32 |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks_lo\">i_blocks_lo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_HUGE_FILE\">EXT4_INODE_HUGE_FILE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* i_blocks represent file system block size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i_blocks\">i_blocks</a>  << (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a> - 9);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i_blocks\">i_blocks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks_lo\">i_blocks_lo</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ext4_iget\">ext4_iget</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_iloc\">ext4_iloc</a> <a class=\"id\" href=\"#iloc\">iloc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode\">ext4_inode</a> *<a class=\"id\" href=\"#raw_inode\">raw_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_journal\">s_journal</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#block\">block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#iget_locked\">iget_locked</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__ext4_get_inode_loc\">__ext4_get_inode_loc</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#iloc\">iloc</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_inode\">bad_inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a> = <a class=\"id\" href=\"#ext4_raw_inode\">ext4_raw_inode</a>(&amp;<a class=\"id\" href=\"#iloc\">iloc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = (<a class=\"id\" href=\"#uid_t\">uid_t</a>)<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_uid_low\">i_uid_low</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = (<a class=\"id\" href=\"#gid_t\">gid_t</a>)<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_gid_low\">i_gid_low</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#NO_UID32\">NO_UID32</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> |= <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_uid_high\">i_uid_high</a>) << 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> |= <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_gid_high\">i_gid_high</a>) << 16;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_links_count\">i_links_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_state_flags\">i_state_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dir_start_lookup\">i_dir_start_lookup</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dtime\">i_dtime</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_dtime\">i_dtime</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* We now have enough fields to check if the inode was active or not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is needed because nfsd might try to access dead inodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the test is that same one that e2fsck uses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NeilBrown 1999oct15</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_mount_state\">s_mount_state</a> &amp; <a class=\"id\" href=\"#EXT4_ORPHAN_FS\">EXT4_ORPHAN_FS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this inode is deleted */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ESTALE\">ESTALE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_inode\">bad_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The only unlinked inodes we let through here have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * valid i_mode and are being read by the orphan</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * recovery code: that's fine, we're about to complete</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the process of deleting those. */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> = <a class=\"id\" href=\"#ext4_inode_blocks\">ext4_inode_blocks</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>, <a class=\"id\" href=\"#ei\">ei</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_file_acl_lo\">i_file_acl_lo</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_HAS_INCOMPAT_FEATURE\">EXT4_HAS_INCOMPAT_FEATURE</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#EXT4_FEATURE_INCOMPAT_64BIT\">EXT4_FEATURE_INCOMPAT_64BIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__u64\">__u64</a>)<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_file_acl_high\">i_file_acl_high</a>)) << 32;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#ext4_isize\">ext4_isize</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA\">CONFIG_QUOTA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_quota\">i_reserved_quota</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_generation\">i_generation</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_generation\">i_generation</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_group\">i_block_group</a> = <a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_last_alloc_group\">i_last_alloc_group</a> = ~0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE! The in-memory inode i_data array is in little-endian order</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even on big-endian machines: we do NOT byteswap the block numbers!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#block\">block</a> = 0; <a class=\"id\" href=\"#block\">block</a> &lt; <a class=\"id\" href=\"#EXT4_N_BLOCKS\">EXT4_N_BLOCKS</a>; <a class=\"id\" href=\"#block\">block</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#block\">block</a>] = <a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[<a class=\"id\" href=\"#block\">block</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_orphan\">i_orphan</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set transaction id's of transactions that have to be committed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to finish f[data]sync. We set them to currently running transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as we cannot be sure that the inode or some of its metadata isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * part of the transaction - the inode could have been reclaimed and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now it is reread from disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid_t\">tid_t</a> <a class=\"id\" href=\"#tid\">tid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#transaction\">transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid\">tid</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid\">tid</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_commit_sequence\">j_commit_sequence</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_sync_tid\">i_sync_tid</a> = <a class=\"id\" href=\"#tid\">tid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_datasync_tid\">i_datasync_tid</a> = <a class=\"id\" href=\"#tid\">tid</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_INODE_SIZE\">EXT4_INODE_SIZE</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) &gt; <a class=\"id\" href=\"#EXT4_GOOD_OLD_INODE_SIZE\">EXT4_GOOD_OLD_INODE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_GOOD_OLD_INODE_SIZE\">EXT4_GOOD_OLD_INODE_SIZE</a> + <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#EXT4_INODE_SIZE\">EXT4_INODE_SIZE</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_inode\">bad_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The extra space is currently unused. Use it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> = sizeof(struct <a class=\"id\" href=\"#ext4_inode\">ext4_inode</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#EXT4_GOOD_OLD_INODE_SIZE\">EXT4_GOOD_OLD_INODE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#magic\">magic</a> = (void *)<a class=\"id\" href=\"#raw_inode\">raw_inode</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_GOOD_OLD_INODE_SIZE\">EXT4_GOOD_OLD_INODE_SIZE</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#magic\">magic</a> == <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#EXT4_XATTR_MAGIC\">EXT4_XATTR_MAGIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_set_inode_state\">ext4_set_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_STATE_XATTR\">EXT4_STATE_XATTR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_INODE_GET_XTIME\">EXT4_INODE_GET_XTIME</a>(<a class=\"id\" href=\"#i_ctime\">i_ctime</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#raw_inode\">raw_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_INODE_GET_XTIME\">EXT4_INODE_GET_XTIME</a>(<a class=\"id\" href=\"#i_mtime\">i_mtime</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#raw_inode\">raw_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_INODE_GET_XTIME\">EXT4_INODE_GET_XTIME</a>(<a class=\"id\" href=\"#i_atime\">i_atime</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#raw_inode\">raw_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_EINODE_GET_XTIME\">EXT4_EINODE_GET_XTIME</a>(<a class=\"id\" href=\"#i_crtime\">i_crtime</a>, <a class=\"id\" href=\"#ei\">ei</a>, <a class=\"id\" href=\"#raw_inode\">raw_inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_version\">i_version</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_disk_version\">i_disk_version</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_INODE_SIZE\">EXT4_INODE_SIZE</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) &gt; <a class=\"id\" href=\"#EXT4_GOOD_OLD_INODE_SIZE\">EXT4_GOOD_OLD_INODE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_FITS_IN_INODE\">EXT4_FITS_IN_INODE</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>, <a class=\"id\" href=\"#ei\">ei</a>, <a class=\"id\" href=\"#i_version_hi\">i_version_hi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_version\">i_version</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__u64\">__u64</a>)(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_version_hi\">i_version_hi</a>)) << 32;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#ext4_data_block_valid\">ext4_data_block_valid</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a>, 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE\">EXT4_ERROR_INODE</a>(<a class=\"id\" href=\"#inode\">inode</a>, \"bad extended attribute block %llu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_inode\">bad_inode</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) || <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#ext4_inode_is_fast_symlink\">ext4_inode_is_fast_symlink</a>(<a class=\"id\" href=\"#inode\">inode</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Validate extent which is part of inode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_ext_check_inode\">ext4_ext_check_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) || <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#ext4_inode_is_fast_symlink\">ext4_inode_is_fast_symlink</a>(<a class=\"id\" href=\"#inode\">inode</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Validate block references which are part of inode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_check_inode_blockref\">ext4_check_inode_blockref</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_inode\">bad_inode</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext4_file_inode_operations\">ext4_file_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#ext4_file_operations\">ext4_file_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_set_aops\">ext4_set_aops</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext4_dir_inode_operations\">ext4_dir_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#ext4_dir_operations\">ext4_dir_operations</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_inode_is_fast_symlink\">ext4_inode_is_fast_symlink</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext4_fast_symlink_inode_operations\">ext4_fast_symlink_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd_terminate_link\">nd_terminate_link</a>(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext4_symlink_inode_operations\">ext4_symlink_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_set_aops\">ext4_set_aops</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISCHR\">S_ISCHR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) || <a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) ||", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#S_ISFIFO\">S_ISFIFO</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) || <a class=\"id\" href=\"#S_ISSOCK\">S_ISSOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext4_special_inode_operations\">ext4_special_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#old_decode_dev\">old_decode_dev</a>(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[0])));", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#new_decode_dev\">new_decode_dev</a>(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[1])));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE\">EXT4_ERROR_INODE</a>(<a class=\"id\" href=\"#inode\">inode</a>, \"bogus i_mode (%o)\", <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_inode\">bad_inode</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_set_inode_flags\">ext4_set_inode_flags</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_new_inode\">unlock_new_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<a class=\"id\" href=\"#bad_inode\">bad_inode</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iget_failed\">iget_failed</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_inode_blocks_set\">ext4_inode_blocks_set</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode\">ext4_inode</a> *<a class=\"id\" href=\"#raw_inode\">raw_inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = &amp;(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#i_blocks\">i_blocks</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_blocks\">i_blocks</a> <= ~0U) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * i_blocks can be represnted in a 32 bit variable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as multiple of 512 bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks_lo\">i_blocks_lo</a>   = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#i_blocks\">i_blocks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks_high\">i_blocks_high</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_inode_flag\">ext4_clear_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_HUGE_FILE\">EXT4_INODE_HUGE_FILE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#EXT4_HAS_RO_COMPAT_FEATURE\">EXT4_HAS_RO_COMPAT_FEATURE</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#EXT4_FEATURE_RO_COMPAT_HUGE_FILE\">EXT4_FEATURE_RO_COMPAT_HUGE_FILE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFBIG\">EFBIG</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_blocks\">i_blocks</a> <= 0xffffffffffffULL) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * i_blocks can be represented in a 48 bit variable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as multiple of 512 bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks_lo\">i_blocks_lo</a>   = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#i_blocks\">i_blocks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks_high\">i_blocks_high</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#i_blocks\">i_blocks</a> >> 32);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_inode_flag\">ext4_clear_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_HUGE_FILE\">EXT4_INODE_HUGE_FILE</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_set_inode_flag\">ext4_set_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_HUGE_FILE\">EXT4_INODE_HUGE_FILE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* i_block is stored in file system block size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_blocks\">i_blocks</a> = <a class=\"id\" href=\"#i_blocks\">i_blocks</a> >> (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a> - 9);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks_lo\">i_blocks_lo</a>   = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#i_blocks\">i_blocks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks_high\">i_blocks_high</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#i_blocks\">i_blocks</a> >> 32);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Post the struct inode info into an on-disk inode location in the</span>", 
"<span class=\"comment\"> * buffer-cache.  This gobbles the caller's reference to the</span>", 
"<span class=\"comment\"> * buffer_head in the inode location struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must have write access to iloc-&gt;bh.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_do_update_inode\">ext4_do_update_inode</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_iloc\">ext4_iloc</a> *<a class=\"id\" href=\"#iloc\">iloc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode\">ext4_inode</a> *<a class=\"id\" href=\"#raw_inode\">raw_inode</a> = <a class=\"id\" href=\"#ext4_raw_inode\">ext4_raw_inode</a>(<a class=\"id\" href=\"#iloc\">iloc</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0, <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#block\">block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For fields not not tracking in the in-memory inode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initialise them to zero for new inodes. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_test_inode_state\">ext4_test_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_STATE_NEW\">EXT4_STATE_NEW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>, 0, <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_inode_size\">s_inode_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_inode_flags\">ext4_get_inode_flags</a>(<a class=\"id\" href=\"#ei\">ei</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#NO_UID32\">NO_UID32</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_uid_low\">i_uid_low</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#low_16_bits\">low_16_bits</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_gid_low\">i_gid_low</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#low_16_bits\">low_16_bits</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>));", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fix up interoperability with old kernels. Otherwise, old inodes get</span>", 
"<span class=\"comment\"> * re-used with the upper 16 bits of the uid/gid intact</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dtime\">i_dtime</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_uid_high\">i_uid_high</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#high_16_bits\">high_16_bits</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_gid_high\">i_gid_high</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#high_16_bits\">high_16_bits</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_uid_high\">i_uid_high</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_gid_high\">i_gid_high</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_uid_low\">i_uid_low</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#fs_high2lowuid\">fs_high2lowuid</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_gid_low\">i_gid_low</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#fs_high2lowgid\">fs_high2lowgid</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_uid_high\">i_uid_high</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_gid_high\">i_gid_high</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_links_count\">i_links_count</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_INODE_SET_XTIME\">EXT4_INODE_SET_XTIME</a>(<a class=\"id\" href=\"#i_ctime\">i_ctime</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#raw_inode\">raw_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_INODE_SET_XTIME\">EXT4_INODE_SET_XTIME</a>(<a class=\"id\" href=\"#i_mtime\">i_mtime</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#raw_inode\">raw_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_INODE_SET_XTIME\">EXT4_INODE_SET_XTIME</a>(<a class=\"id\" href=\"#i_atime\">i_atime</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#raw_inode\">raw_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_EINODE_SET_XTIME\">EXT4_EINODE_SET_XTIME</a>(<a class=\"id\" href=\"#i_crtime\">i_crtime</a>, <a class=\"id\" href=\"#ei\">ei</a>, <a class=\"id\" href=\"#raw_inode\">raw_inode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_inode_blocks_set\">ext4_inode_blocks_set</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#raw_inode\">raw_inode</a>, <a class=\"id\" href=\"#ei\">ei</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_brelse\">out_brelse</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_dtime\">i_dtime</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dtime\">i_dtime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>-><a class=\"id\" href=\"#s_creator_os\">s_creator_os</a> !=", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#EXT4_OS_HURD\">EXT4_OS_HURD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_file_acl_high\">i_file_acl_high</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a> >> 32);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_file_acl_lo\">i_file_acl_lo</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_isize_set\">ext4_isize_set</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>, <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_disksize\">i_disksize</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> &gt; 0x7fffffffULL) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#EXT4_HAS_RO_COMPAT_FEATURE\">EXT4_HAS_RO_COMPAT_FEATURE</a>(<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_FEATURE_RO_COMPAT_LARGE_FILE\">EXT4_FEATURE_RO_COMPAT_LARGE_FILE</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>-><a class=\"id\" href=\"#s_rev_level\">s_rev_level</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#EXT4_GOOD_OLD_REV\">EXT4_GOOD_OLD_REV</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this is the first large file</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * created, add a flag to the superblock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_sbh\">s_sbh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_brelse\">out_brelse</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_update_dynamic_rev\">ext4_update_dynamic_rev</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_SET_RO_COMPAT_FEATURE\">EXT4_SET_RO_COMPAT_FEATURE</a>(<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_FEATURE_RO_COMPAT_LARGE_FILE\">EXT4_FEATURE_RO_COMPAT_LARGE_FILE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_handle_sync\">ext4_handle_sync</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_sbh\">s_sbh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_generation\">i_generation</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_generation\">i_generation</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISCHR\">S_ISCHR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) || <a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_valid_dev\">old_valid_dev</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[0] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#old_encode_dev\">old_encode_dev</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[1] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[1] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#new_encode_dev\">new_encode_dev</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[2] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#block\">block</a> = 0; <a class=\"id\" href=\"#block\">block</a> &lt; <a class=\"id\" href=\"#EXT4_N_BLOCKS\">EXT4_N_BLOCKS</a>; <a class=\"id\" href=\"#block\">block</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[<a class=\"id\" href=\"#block\">block</a>] = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#block\">block</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_disk_version\">i_disk_version</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_version\">i_version</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_FITS_IN_INODE\">EXT4_FITS_IN_INODE</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>, <a class=\"id\" href=\"#ei\">ei</a>, <a class=\"id\" href=\"#i_version_hi\">i_version_hi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_version_hi\">i_version_hi</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_version\">i_version</a> >> 32);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call ext4_handle_dirty_metadata\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_inode_state\">ext4_clear_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_STATE_NEW\">EXT4_STATE_NEW</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_update_inode_fsync_trans\">ext4_update_inode_fsync_trans</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 0);", 
"<a class=\"id\" href=\"#out_brelse\">out_brelse</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_std_error\">ext4_std_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext4_write_inode()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We are called from a few places:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - Within generic_file_write() for O_SYNC files.</span>", 
"<span class=\"comment\"> *   Here, there will be no transaction running. We wait for any running</span>", 
"<span class=\"comment\"> *   trasnaction to commit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - Within sys_sync(), kupdate and such.</span>", 
"<span class=\"comment\"> *   We wait on commit, if tol to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - Within prune_icache() (PF_MEMALLOC == true)</span>", 
"<span class=\"comment\"> *   Here we simply return.  We can't afford to block kswapd on the</span>", 
"<span class=\"comment\"> *   journal commit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In all cases it is actually safe for us to return without doing anything,</span>", 
"<span class=\"comment\"> * because the inode has been copied into a raw inode buffer in</span>", 
"<span class=\"comment\"> * ext4_mark_inode_dirty().  This is a correctness thing for O_SYNC and for</span>", 
"<span class=\"comment\"> * knfsd.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that we are absolutely dependent upon all inode dirtiers doing the</span>", 
"<span class=\"comment\"> * right thing: they *must* call mark_inode_dirty() after dirtying info in</span>", 
"<span class=\"comment\"> * which we are interested.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It would be a bug for them to not do this.  The code:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mark_inode_dirty(inode)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>stuff();</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inode-&gt;i_size = expr;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * is in error because a kswapd-driven write_inode() could occur while</span>", 
"<span class=\"comment\"> * `stuff()' is running, and the new i_size will be lost.  Plus the inode</span>", 
"<span class=\"comment\"> * will no longer be on the superblock's dirty inode list.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext4_write_inode\">ext4_write_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_journal\">s_journal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_journal_current_handle\">ext4_journal_current_handle</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(1, \"called recursively, non-PF_MEMALLOC!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> != <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_force_commit\">ext4_force_commit</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_iloc\">ext4_iloc</a> <a class=\"id\" href=\"#iloc\">iloc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__ext4_get_inode_loc\">__ext4_get_inode_loc</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#iloc\">iloc</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> == <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_dirty_buffer\">sync_dirty_buffer</a>(<a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_req\">buffer_req</a>(<a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>) && !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE_BLOCK\">EXT4_ERROR_INODE_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"IO error syncing inode\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext4_setattr()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called from notify_change.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We want to trap VFS attempts to truncate the file as soon as</span>", 
"<span class=\"comment\"> * possible.  In particular, we want to make sure that when the VFS</span>", 
"<span class=\"comment\"> * shrinks i_size, we put the inode on the orphan list and modify</span>", 
"<span class=\"comment\"> * i_disksize immediately, so that during the subsequent flushing of</span>", 
"<span class=\"comment\"> * dirty pages and freeing of disk blocks, we can guarantee that any</span>", 
"<span class=\"comment\"> * commit will leave the blocks being flushed in an unused state on</span>", 
"<span class=\"comment\"> * disk.  (On recovery, the inode will get truncated and the blocks will</span>", 
"<span class=\"comment\"> * be freed, so we have a strong guarantee that no future commit will</span>", 
"<span class=\"comment\"> * leave these blocks visible to the user.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Another thing we have to assure is that if we are in ordered mode</span>", 
"<span class=\"comment\"> * and inode is still attached to the committing transaction, we must</span>", 
"<span class=\"comment\"> * we start writeout of all the dirty pages which are being truncated.</span>", 
"<span class=\"comment\"> * This way we are sure that all the data written in the previous</span>", 
"<span class=\"comment\"> * transaction are already on disk (truncate waits for pages under</span>", 
"<span class=\"comment\"> * writeback).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with inode-&gt;i_mutex down.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext4_setattr\">ext4_setattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>const unsigned int <a class=\"id\" href=\"#ia_valid\">ia_valid</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#inode_change_ok\">inode_change_ok</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_quota_modification\">is_quota_modification</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#attr\">attr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_initialize\">dquot_initialize</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_UID\">ATTR_UID</a> && <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_uid\">ia_uid</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_GID\">ATTR_GID</a> && <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_gid\">ia_gid</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (user+group)*(old+new) structure, inode write (sb,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inode block, ? - but truncate inode update has it) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext4_journal_start\">ext4_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, (<a class=\"id\" href=\"#EXT4_MAXQUOTAS_INIT_BLOCKS\">EXT4_MAXQUOTAS_INIT_BLOCKS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)+", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_MAXQUOTAS_DEL_BLOCKS\">EXT4_MAXQUOTAS_DEL_BLOCKS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>))+3);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dquot_transfer\">dquot_transfer</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update corresponding info in inode so that everything is in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one transaction */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_UID\">ATTR_UID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_uid\">ia_uid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_GID\">ATTR_GID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_gid\">ia_gid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_SIZE\">ATTR_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_size\">ia_size</a> &gt; <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bitmap_maxbytes\">s_bitmap_maxbytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFBIG\">EFBIG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_SIZE\">ATTR_SIZE</a> &&", 
];
xr_frag_insert('l/cc/3c3ab9cddfe3f0d21b12f9e9549d11704633ba.xr', __xr_tmp);
