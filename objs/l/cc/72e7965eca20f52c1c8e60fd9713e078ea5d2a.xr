var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_COMPILER_H\">__LINUX_COMPILER_H</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"Please don't include <linux/compiler-gcc4.h> directly, include <linux/compiler.h> instead.\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* GCC 4.1.[01] miscompiles __weak */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"# if <a class=\"id\" href=\"#__GNUC_MINOR__\">__GNUC_MINOR__</a> == 1 && <a class=\"id\" href=\"#__GNUC_PATCHLEVEL__\">__GNUC_PATCHLEVEL__</a> <= 1", 
"#  <a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#Your\">Your</a> <a class=\"id\" href=\"#version\">version</a> <a class=\"id\" href=\"#of\">of</a> <a class=\"id\" href=\"#gcc\">gcc</a> <a class=\"id\" href=\"#miscompiles\">miscompiles</a> <a class=\"id\" href=\"#the\">the</a> <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#directive\">directive</a>", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__used\">__used</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__used__\">__used__</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__must_check\">__must_check</a> <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#warn_unused_result\">warn_unused_result</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__compiler_offsetof\">__compiler_offsetof</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>) <a class=\"id\" href=\"#__builtin_offsetof\">__builtin_offsetof</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__always_inline\">__always_inline</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#always_inline\">always_inline</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A trick to suppress uninitialized variable warning without generating any</span>", 
"<span class=\"comment\"> * code</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#x\">x</a>", 
"", 
"#if <a class=\"id\" href=\"#__GNUC_MINOR__\">__GNUC_MINOR__</a> >= 3", 
"<span class=\"comment\">/* Mark functions as cold. gcc will assume any path leading to a call</span>", 
"<span class=\"comment\">   to them will be unlikely.  This means a lot of manual unlikely()s</span>", 
"<span class=\"comment\">   are unnecessary now for any paths leading to the usual suspects</span>", 
"<span class=\"comment\">   like BUG(), printk(), panic() etc. [but let's keep them for now for</span>", 
"<span class=\"comment\">   older compilers]</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Early snapshots of gcc 4.3 don't support this and we can't detect this</span>", 
"<span class=\"comment\">   in the preprocessor, but we can live with this because they're unreleased.</span>", 
"<span class=\"comment\">   Maketime probing would be overkill here.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   gcc also has a __attribute__((__hot__)) to move hot functions into</span>", 
"<span class=\"comment\">   a special section, but I don't see any sense in this right now in</span>", 
"<span class=\"comment\">   the kernel context */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__cold\">__cold</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__cold__\">__cold__</a>))", 
"", 
"", 
"#if <a class=\"id\" href=\"#__GNUC_MINOR__\">__GNUC_MINOR__</a> >= 5", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mark a position in code as unreachable.  This can be used to</span>", 
"<span class=\"comment\"> * suppress control flow warnings after asm blocks that transfer</span>", 
"<span class=\"comment\"> * control elsewhere.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Early snapshots of gcc 4.5 don't support this and we can't detect</span>", 
"<span class=\"comment\"> * this in the preprocessor, but we can live with this because they're</span>", 
"<span class=\"comment\"> * unreleased.  Really, we need to have autoconf for the kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unreachable\">unreachable</a>() <a class=\"id\" href=\"#__builtin_unreachable\">__builtin_unreachable</a>()", 
"", 
"<span class=\"comment\">/* Mark a function definition as prohibited from being cloned. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__noclone\">__noclone</a><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__noclone__\">__noclone__</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#__GNUC_MINOR__\">__GNUC_MINOR__</a> &gt; 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__compiletime_object_size\">__compiletime_object_size</a>(<a class=\"id\" href=\"#obj\">obj</a>) <a class=\"id\" href=\"#__builtin_object_size\">__builtin_object_size</a>(<a class=\"id\" href=\"#obj\">obj</a>, 0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#__GNUC_MINOR__\">__GNUC_MINOR__</a> >= 4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__compiletime_warning\">__compiletime_warning</a>(<a class=\"id\" href=\"#message\">message</a>) <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#warning\">warning</a>(<a class=\"id\" href=\"#message\">message</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__compiletime_error\">__compiletime_error</a>(<a class=\"id\" href=\"#message\">message</a>) <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#error\">error</a>(<a class=\"id\" href=\"#message\">message</a>)))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/cc/72e7965eca20f52c1c8e60fd9713e078ea5d2a.xr', __xr_tmp);
