var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sleep.c - ACPI sleep support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2005 Alexey Starikovskiy &lt;alexey.y.starikovskiy@intel.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2004 David Shaohua Li &lt;shaohua.li@intel.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2000-2003 Patrick Mochel</span>", 
"<span class=\"comment\"> * Copyright (c) 2003 Open Source Development Lab</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#reboot\">reboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi_bus\">acpi_bus</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi_drivers\">acpi_drivers</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"sleep.h\"", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sleep_states\">sleep_states</a>[<a class=\"id\" href=\"#ACPI_S_STATE_COUNT\">ACPI_S_STATE_COUNT</a>];", 
"", 
"static void <a class=\"id\" href=\"#acpi_sleep_tts_switch\">acpi_sleep_tts_switch</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_state\">acpi_state</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> <a class=\"id\" href=\"#in_arg\">in_arg</a> = { <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a> };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_object_list\">acpi_object_list</a> <a class=\"id\" href=\"#arg_list\">arg_list</a> = { 1, &amp;<a class=\"id\" href=\"#in_arg\">in_arg</a> };", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_arg\">in_arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#acpi_state\">acpi_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, \"\\\\_TTS\", &amp;<a class=\"id\" href=\"#arg_list\">arg_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * OS can't evaluate the _TTS object correctly. Some warning</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * message will be printed. But it won't break anything.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"Failure in evaluating _TTS object\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tts_notify_reboot\">tts_notify_reboot</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#this\">this</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#code\">code</a>, void *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_sleep_tts_switch\">acpi_sleep_tts_switch</a>(<a class=\"id\" href=\"#ACPI_STATE_S5\">ACPI_STATE_S5</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#tts_notifier\">tts_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tts_notify_reboot\">tts_notify_reboot</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priority\">priority</a><span class=\"ts\"/>= 0,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#acpi_sleep_prepare\">acpi_sleep_prepare</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_state\">acpi_state</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ACPI_SLEEP\">CONFIG_ACPI_SLEEP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* do we have a wakeup address for S2 and S3? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_state\">acpi_state</a> == <a class=\"id\" href=\"#ACPI_STATE_S3\">ACPI_STATE_S3</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_wakeup_address\">acpi_wakeup_address</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_set_firmware_waking_vector\">acpi_set_firmware_waking_vector</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)<a class=\"id\" href=\"#acpi_wakeup_address\">acpi_wakeup_address</a>);", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FLUSH_CPU_CACHE\">ACPI_FLUSH_CPU_CACHE</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"Preparing to enter system sleep state S%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_state\">acpi_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_enable_wakeup_devices\">acpi_enable_wakeup_devices</a>(<a class=\"id\" href=\"#acpi_state\">acpi_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_enter_sleep_state_prep\">acpi_enter_sleep_state_prep</a>(<a class=\"id\" href=\"#acpi_state\">acpi_state</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ACPI_SLEEP\">CONFIG_ACPI_SLEEP</a>", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a> = <a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The ACPI specification wants us to save NVS memory regions during hibernation</span>", 
"<span class=\"comment\"> * and to restore them during the subsequent resume.  Windows does that also for</span>", 
"<span class=\"comment\"> * suspend to RAM.  However, it is known that this mechanism does not work on</span>", 
"<span class=\"comment\"> * all machines, so we allow the user to disable it with the help of the</span>", 
"<span class=\"comment\"> * 'acpi_sleep=nonvs' kernel command line option.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#nvs_nosave\">nvs_nosave</a>;", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_nvs_nosave\">acpi_nvs_nosave</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nvs_nosave\">nvs_nosave</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ACPI 1.0 wants us to execute _PTS before suspending devices, so we allow the</span>", 
"<span class=\"comment\"> * user to request that behavior by using the 'acpi_old_suspend_ordering'</span>", 
"<span class=\"comment\"> * kernel command line option that causes the following variable to be set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#old_suspend_ordering\">old_suspend_ordering</a>;", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_old_suspend_ordering\">acpi_old_suspend_ordering</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_suspend_ordering\">old_suspend_ordering</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_pm_freeze - Disable the GPEs and suspend EC transactions.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_pm_freeze\">acpi_pm_freeze</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_disable_all_gpes\">acpi_disable_all_gpes</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_wait_events_complete\">acpi_os_wait_events_complete</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ec_block_transactions\">acpi_ec_block_transactions</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_pre_suspend - Enable wakeup devices, \"freeze\" EC and save NVS.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_pm_pre_suspend\">acpi_pm_pre_suspend</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_pm_freeze\">acpi_pm_freeze</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_nvs_save\">suspend_nvs_save</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__acpi_pm_prepare - Prepare the platform to enter the target state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If necessary, set the firmware waking vector and do arch-specific</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>nastiness to get the wakeup code to the waking vector.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__acpi_pm_prepare\">__acpi_pm_prepare</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#acpi_sleep_prepare\">acpi_sleep_prepare</a>(<a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a> = <a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>acpi_pm_prepare - Prepare the platform to enter the target sleep</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>state and disable the GPEs.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_pm_prepare\">acpi_pm_prepare</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__acpi_pm_prepare\">__acpi_pm_prepare</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_pm_pre_suspend\">acpi_pm_pre_suspend</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>acpi_pm_finish - Instruct the platform to leave a sleep state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is called after we wake back up (or if entering the sleep state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>failed).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#acpi_pm_finish\">acpi_pm_finish</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_state\">acpi_state</a> = <a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ec_unblock_transactions\">acpi_ec_unblock_transactions</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_state\">acpi_state</a> == <a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"Waking up from system sleep state S%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_state\">acpi_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_disable_wakeup_devices\">acpi_disable_wakeup_devices</a>(<a class=\"id\" href=\"#acpi_state\">acpi_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_leave_sleep_state\">acpi_leave_sleep_state</a>(<a class=\"id\" href=\"#acpi_state\">acpi_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* reset firmware waking vector */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_set_firmware_waking_vector\">acpi_set_firmware_waking_vector</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>) 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a> = <a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>acpi_pm_end - Finish up suspend sequence.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#acpi_pm_end\">acpi_pm_end</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_nvs_free\">suspend_nvs_free</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is necessary in case acpi_pm_finish() is not called during a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * failing transition to a sleep state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a> = <a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_sleep_tts_switch\">acpi_sleep_tts_switch</a>(<a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a>);", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_ACPI_SLEEP */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ACPI_SLEEP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SUSPEND\">CONFIG_SUSPEND</a>", 
"extern void <a class=\"id\" href=\"#do_suspend_lowlevel\">do_suspend_lowlevel</a>(void);", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_suspend_states\">acpi_suspend_states</a>[] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#PM_SUSPEND_ON\">PM_SUSPEND_ON</a>] = <a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>,", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#PM_SUSPEND_STANDBY\">PM_SUSPEND_STANDBY</a>] = <a class=\"id\" href=\"#ACPI_STATE_S1\">ACPI_STATE_S1</a>,", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#PM_SUSPEND_MEM\">PM_SUSPEND_MEM</a>] = <a class=\"id\" href=\"#ACPI_STATE_S3\">ACPI_STATE_S3</a>,", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#PM_SUSPEND_MAX\">PM_SUSPEND_MAX</a>] = <a class=\"id\" href=\"#ACPI_STATE_S5\">ACPI_STATE_S5</a>", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>acpi_suspend_begin - Set the target system sleep state to the state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>associated with given @pm_state, if supported.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_suspend_begin\">acpi_suspend_begin</a>(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#pm_state\">pm_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_state\">acpi_state</a> = <a class=\"id\" href=\"#acpi_suspend_states\">acpi_suspend_states</a>[<a class=\"id\" href=\"#pm_state\">pm_state</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#nvs_nosave\">nvs_nosave</a> ? 0 : <a class=\"id\" href=\"#suspend_nvs_alloc\">suspend_nvs_alloc</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sleep_states\">sleep_states</a>[<a class=\"id\" href=\"#acpi_state\">acpi_state</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a> = <a class=\"id\" href=\"#acpi_state\">acpi_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_sleep_tts_switch\">acpi_sleep_tts_switch</a>(<a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ACPI does not support this state: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_state\">pm_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>acpi_suspend_enter - Actually enter a sleep state.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pm_state: ignored</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Flush caches and go to sleep. For STR we have to call arch-specific</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>assembly, which in turn call acpi_enter_sleep_state().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It's unfortunate, but it works. Please fix if you're feeling frisky.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_suspend_enter\">acpi_suspend_enter</a>(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#pm_state\">pm_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_state\">acpi_state</a> = <a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FLUSH_CPU_CACHE\">ACPI_FLUSH_CPU_CACHE</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do arch specific saving of state. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_state\">acpi_state</a> == <a class=\"id\" href=\"#ACPI_STATE_S3\">ACPI_STATE_S3</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#acpi_save_state_mem\">acpi_save_state_mem</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#acpi_state\">acpi_state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_S1\">ACPI_STATE_S1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_enter_sleep_state\">acpi_enter_sleep_state</a>(<a class=\"id\" href=\"#acpi_state\">acpi_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_S3\">ACPI_STATE_S3</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_suspend_lowlevel\">do_suspend_lowlevel</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This violates the spec but is required for bug compatibility. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_SCI_ENABLE\">ACPI_BITREG_SCI_ENABLE</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reprogram control registers and execute _BFS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_leave_sleep_state_prep\">acpi_leave_sleep_state_prep</a>(<a class=\"id\" href=\"#acpi_state\">acpi_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ACPI 3.0 specs (P62) says that it's the responsibility</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the OSPM to clear the status bit [ implying that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * POWER_BUTTON event should not reach userspace ]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>) && (<a class=\"id\" href=\"#acpi_state\">acpi_state</a> == <a class=\"id\" href=\"#ACPI_STATE_S3\">ACPI_STATE_S3</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_clear_event\">acpi_clear_event</a>(<a class=\"id\" href=\"#ACPI_EVENT_POWER_BUTTON\">ACPI_EVENT_POWER_BUTTON</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable and clear GPE status before interrupt is enabled. Some GPEs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (like wakeup GPE) haven't handler, this can avoid such GPE misfire.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * acpi_leave_sleep_state will reenable specific GPEs later</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_disable_all_gpes\">acpi_disable_all_gpes</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow EC transactions to happen. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ec_unblock_transactions_early\">acpi_ec_unblock_transactions_early</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Back to C!\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* restore processor state */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_state\">acpi_state</a> == <a class=\"id\" href=\"#ACPI_STATE_S3\">ACPI_STATE_S3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_restore_state_mem\">acpi_restore_state_mem</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_nvs_restore\">suspend_nvs_restore</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>) ? 0 : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_suspend_state_valid\">acpi_suspend_state_valid</a>(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#pm_state\">pm_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_state\">acpi_state</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#pm_state\">pm_state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_SUSPEND_ON\">PM_SUSPEND_ON</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_SUSPEND_STANDBY\">PM_SUSPEND_STANDBY</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_SUSPEND_MEM\">PM_SUSPEND_MEM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_state\">acpi_state</a> = <a class=\"id\" href=\"#acpi_suspend_states\">acpi_suspend_states</a>[<a class=\"id\" href=\"#pm_state\">pm_state</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sleep_states\">sleep_states</a>[<a class=\"id\" href=\"#acpi_state\">acpi_state</a>];", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#platform_suspend_ops\">platform_suspend_ops</a> <a class=\"id\" href=\"#acpi_suspend_ops\">acpi_suspend_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#valid\">valid</a> = <a class=\"id\" href=\"#acpi_suspend_state_valid\">acpi_suspend_state_valid</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#begin\">begin</a> = <a class=\"id\" href=\"#acpi_suspend_begin\">acpi_suspend_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#prepare_late\">prepare_late</a> = <a class=\"id\" href=\"#acpi_pm_prepare\">acpi_pm_prepare</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enter\">enter</a> = <a class=\"id\" href=\"#acpi_suspend_enter\">acpi_suspend_enter</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#wake\">wake</a> = <a class=\"id\" href=\"#acpi_pm_finish\">acpi_pm_finish</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#acpi_pm_end\">acpi_pm_end</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>acpi_suspend_begin_old - Set the target system sleep state to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>state associated with given @pm_state, if supported, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>execute the _PTS control method.  This function is used if the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>pre-ACPI 2.0 suspend ordering has been requested.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_suspend_begin_old\">acpi_suspend_begin_old</a>(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#pm_state\">pm_state</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#acpi_suspend_begin\">acpi_suspend_begin</a>(<a class=\"id\" href=\"#pm_state\">pm_state</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__acpi_pm_prepare\">__acpi_pm_prepare</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following callbacks are used if the pre-ACPI 2.0 suspend ordering has</span>", 
"<span class=\"comment\"> * been requested.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#platform_suspend_ops\">platform_suspend_ops</a> <a class=\"id\" href=\"#acpi_suspend_ops_old\">acpi_suspend_ops_old</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#valid\">valid</a> = <a class=\"id\" href=\"#acpi_suspend_state_valid\">acpi_suspend_state_valid</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#begin\">begin</a> = <a class=\"id\" href=\"#acpi_suspend_begin_old\">acpi_suspend_begin_old</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#prepare_late\">prepare_late</a> = <a class=\"id\" href=\"#acpi_pm_pre_suspend\">acpi_pm_pre_suspend</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enter\">enter</a> = <a class=\"id\" href=\"#acpi_suspend_enter\">acpi_suspend_enter</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#wake\">wake</a> = <a class=\"id\" href=\"#acpi_pm_finish\">acpi_pm_finish</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#acpi_pm_end\">acpi_pm_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#recover\">recover</a> = <a class=\"id\" href=\"#acpi_pm_finish\">acpi_pm_finish</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_old_suspend_ordering\">init_old_suspend_ordering</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
];
xr_frag_insert('l/cd/0198bc3f3003f527b0c4a3cf65f24fff0f82fc.xr', __xr_tmp);
