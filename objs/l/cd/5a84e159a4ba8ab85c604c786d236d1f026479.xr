var __xr_tmp = [
"<span class=\"comment\"> * add_timer - start a timer</span>", 
"<span class=\"comment\"> * @timer: the timer to be added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The kernel will do a -&gt;function(-&gt;data) callback from the</span>", 
"<span class=\"comment\"> * timer interrupt at the -&gt;expires point in the future. The</span>", 
"<span class=\"comment\"> * current time is 'jiffies'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The timer's -&gt;expires, -&gt;function (and if the handler uses it, -&gt;data)</span>", 
"<span class=\"comment\"> * fields must be set prior calling this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Timers with an -&gt;expires field in the past will be executed in the next</span>", 
"<span class=\"comment\"> * timer tick.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#add_timer\">add_timer</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(<a class=\"id\" href=\"#timer\">timer</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#add_timer\">add_timer</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * add_timer_on - start a timer on a particular CPU</span>", 
"<span class=\"comment\"> * @timer: the timer to be added</span>", 
"<span class=\"comment\"> * @cpu: the CPU to start it on</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is not very scalable on SMP. Double adds are not possible.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#add_timer_on\">add_timer_on</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_timer_set_start_info\">timer_stats_timer_set_start_info</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(<a class=\"id\" href=\"#timer\">timer</a>) || !<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#function\">function</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_set_base\">timer_set_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_activate\">debug_activate</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#internal_add_timer\">internal_add_timer</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check whether the other CPU is idle and needs to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * triggered to reevaluate the timer wheel when nohz is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * active. We are protected against the other CPU fiddling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with the timer by holding the timer base lock. This also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * makes sure that a CPU on the way to idle can not evaluate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the timer wheel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_idle_cpu\">wake_up_idle_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#add_timer_on\">add_timer_on</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * del_timer - deactive a timer.</span>", 
"<span class=\"comment\"> * @timer: the timer to be deactivated</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * del_timer() deactivates a timer - this works on both active and inactive</span>", 
"<span class=\"comment\"> * timers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns whether it has deactivated a pending timer or not.</span>", 
"<span class=\"comment\"> * (ie. del_timer() of an inactive timer returns 0, del_timer() of an</span>", 
"<span class=\"comment\"> * active timer returns 1.)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#del_timer\">del_timer</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_timer_clear_start_info\">timer_stats_timer_clear_start_info</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(<a class=\"id\" href=\"#timer\">timer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#lock_timer_base\">lock_timer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(<a class=\"id\" href=\"#timer\">timer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_timer\">detach_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a> == <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#del_timer\">del_timer</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * try_to_del_timer_sync - Try to deactivate a timer</span>", 
"<span class=\"comment\"> * @timer: timer do del</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function tries to deactivate a timer. Upon successful (ret &gt;= 0)</span>", 
"<span class=\"comment\"> * exit the timer is not queued and the handler is not running on any CPU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It must not be called from interrupt contexts.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#try_to_del_timer_sync\">try_to_del_timer_sync</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#lock_timer_base\">lock_timer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#running_timer\">running_timer</a> == <a class=\"id\" href=\"#timer\">timer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_timer_clear_start_info\">timer_stats_timer_clear_start_info</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(<a class=\"id\" href=\"#timer\">timer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_timer\">detach_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a> == <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#try_to_del_timer_sync\">try_to_del_timer_sync</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * del_timer_sync - deactivate a timer and wait for the handler to finish.</span>", 
"<span class=\"comment\"> * @timer: the timer to be deactivated</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function only differs from del_timer() on SMP: besides deactivating</span>", 
"<span class=\"comment\"> * the timer it also makes sure the handler has finished executing on other</span>", 
"<span class=\"comment\"> * CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Synchronization rules: Callers must prevent restarting of the timer,</span>", 
"<span class=\"comment\"> * otherwise this function is meaningless. It must not be called from</span>", 
"<span class=\"comment\"> * interrupt contexts. The caller must not hold locks which would prevent</span>", 
"<span class=\"comment\"> * completion of the timer's handler. The timer's handler must not call</span>", 
"<span class=\"comment\"> * add_timer_on(). Upon exit the timer is not queued and the handler is</span>", 
"<span class=\"comment\"> * not running on any CPU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns whether it has deactivated a pending timer or not.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_to_del_timer_sync\">try_to_del_timer_sync</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#cascade\">cascade</a>(struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>, struct <a class=\"id\" href=\"#tvec\">tvec</a> *<a class=\"id\" href=\"#tv\">tv</a>, int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* cascade all the timers from tv up one level */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tv_list\">tv_list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(<a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#index\">index</a>, &amp;<a class=\"id\" href=\"#tv_list\">tv_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are removing _all_ timers from the list, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't have to detach them individually.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#tv_list\">tv_list</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#tbase_get_base\">tbase_get_base</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>) != <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_add_timer\">internal_add_timer</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#call_timer_fn\">call_timer_fn</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, void (*<a class=\"id\" href=\"#fn\">fn</a>)(unsigned long),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#preempt_count\">preempt_count</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is permissible to free the timer from inside the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function that is called from it, this we need to take into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * account for lockdep too. To avoid bogus \"held lock freed\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * warnings as well as problems when looking into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timer-&gt;lockdep_map, make a copy and use that here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Couple the lock chain with the lock chain at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * del_timer_sync() by acquiring the lock_map around the fn()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call here and in del_timer_sync().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(&amp;<a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_timer_expire_entry\">trace_timer_expire_entry</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_timer_expire_exit\">trace_timer_expire_exit</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(&amp;<a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preempt_count\">preempt_count</a> != <a class=\"id\" href=\"#preempt_count\">preempt_count</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(1, \"timer: %pF preempt leak: %08x -> %08x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#preempt_count\">preempt_count</a>, <a class=\"id\" href=\"#preempt_count\">preempt_count</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Restore the preempt count. That gives us a decent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * chance to survive and extract information. If the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * callback kept a lock held, bad luck, but not worse</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * than the BUG() we had.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_count\">preempt_count</a>() = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INDEX\">INDEX</a>(<a class=\"id\" href=\"#N\">N</a>) ((<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> >> (<a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a> + (<a class=\"id\" href=\"#N\">N</a>) * <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a>)) &amp; <a class=\"id\" href=\"#TVN_MASK\">TVN_MASK</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __run_timers - run all expired timers (if any) on this CPU.</span>", 
"<span class=\"comment\"> * @base: the timer vector to be processed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function cascades all vectors and executes all expired timer</span>", 
"<span class=\"comment\"> * vectors.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__run_timers\">__run_timers</a>(struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#work_list\">work_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#work_list\">work_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> &amp; <a class=\"id\" href=\"#TVR_MASK\">TVR_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Cascade timers:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#index\">index</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(!<a class=\"id\" href=\"#cascade\">cascade</a>(<a class=\"id\" href=\"#base\">base</a>, &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv2\">tv2</a>, <a class=\"id\" href=\"#INDEX\">INDEX</a>(0))) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(!<a class=\"id\" href=\"#cascade\">cascade</a>(<a class=\"id\" href=\"#base\">base</a>, &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv3\">tv3</a>, <a class=\"id\" href=\"#INDEX\">INDEX</a>(1))) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#cascade\">cascade</a>(<a class=\"id\" href=\"#base\">base</a>, &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv4\">tv4</a>, <a class=\"id\" href=\"#INDEX\">INDEX</a>(2)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cascade\">cascade</a>(<a class=\"id\" href=\"#base\">base</a>, &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv5\">tv5</a>, <a class=\"id\" href=\"#INDEX\">INDEX</a>(3));", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv1\">tv1</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#index\">index</a>, &amp;<a class=\"id\" href=\"#work_list\">work_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#fn\">fn</a>)(unsigned long);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#timer_list\">timer_list</a>,<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#function\">function</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_account_timer\">timer_stats_account_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_running_timer\">set_running_timer</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_timer\">detach_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_timer_fn\">call_timer_fn</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_running_timer\">set_running_timer</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find out when the next timer event is due to happen. This</span>", 
"<span class=\"comment\"> * is used on S/390 to stop all activity when a CPU is idle.</span>", 
"<span class=\"comment\"> * This function needs to be called with interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#__next_timer_interrupt\">__next_timer_interrupt</a>(struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> + <a class=\"id\" href=\"#NEXT_TIMER_MAX_DELTA\">NEXT_TIMER_MAX_DELTA</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#found\">found</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#nte\">nte</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec\">tvec</a> *<a class=\"id\" href=\"#varray\">varray</a>[4];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Look for timer events in tv1. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> &amp; <a class=\"id\" href=\"#TVR_MASK\">TVR_MASK</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#nte\">nte</a>, <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv1\">tv1</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#nte\">nte</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#nte\">nte</a>-><a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Look at the cascade bucket(s)? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#index\">index</a> || <a class=\"id\" href=\"#slot\">slot</a> &lt; <a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cascade\">cascade</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = (<a class=\"id\" href=\"#slot\">slot</a> + 1) &amp; <a class=\"id\" href=\"#TVR_MASK\">TVR_MASK</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#slot\">slot</a> != <a class=\"id\" href=\"#index\">index</a>);", 
"", 
"<a class=\"id\" href=\"#cascade\">cascade</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate the next cascade event */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> += <a class=\"id\" href=\"#TVR_SIZE\">TVR_SIZE</a> - <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> >>= <a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check tv2-tv5. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#varray\">varray</a>[0] = &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv2\">tv2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#varray\">varray</a>[1] = &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv3\">tv3</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#varray\">varray</a>[2] = &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv4\">tv4</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#varray\">varray</a>[3] = &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv5\">tv5</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#array\">array</a> = 0; <a class=\"id\" href=\"#array\">array</a> &lt; 4; <a class=\"id\" href=\"#array\">array</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec\">tvec</a> *<a class=\"id\" href=\"#varp\">varp</a> = <a class=\"id\" href=\"#varray\">varray</a>[<a class=\"id\" href=\"#array\">array</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> &amp; <a class=\"id\" href=\"#TVN_MASK\">TVN_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#nte\">nte</a>, <a class=\"id\" href=\"#varp\">varp</a>-><a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#nte\">nte</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#nte\">nte</a>-><a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#expires\">expires</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#nte\">nte</a>-><a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Do we still search for the first timer or are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we looking up the cascade buckets ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Look at the cascade bucket(s)? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#index\">index</a> || <a class=\"id\" href=\"#slot\">slot</a> &lt; <a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = (<a class=\"id\" href=\"#slot\">slot</a> + 1) &amp; <a class=\"id\" href=\"#TVN_MASK\">TVN_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#slot\">slot</a> != <a class=\"id\" href=\"#index\">index</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> += <a class=\"id\" href=\"#TVN_SIZE\">TVN_SIZE</a> - <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> >>= <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#expires\">expires</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check, if the next hrtimer event is before the next timer wheel</span>", 
"<span class=\"comment\"> * event:</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#cmp_next_hrtimer_event\">cmp_next_hrtimer_event</a>(unsigned long <a class=\"id\" href=\"#now\">now</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#expires\">expires</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#hr_delta\">hr_delta</a> = <a class=\"id\" href=\"#hrtimer_get_next_event\">hrtimer_get_next_event</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#tsdelta\">tsdelta</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hr_delta\">hr_delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> == <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Expired timer available, let it expire in the next tick</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hr_delta\">hr_delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#now\">now</a> + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsdelta\">tsdelta</a> = <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(<a class=\"id\" href=\"#hr_delta\">hr_delta</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#timespec_to_jiffies\">timespec_to_jiffies</a>(&amp;<a class=\"id\" href=\"#tsdelta\">tsdelta</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Limit the delta to the max value, which is checked in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tick_nohz_stop_sched_tick():</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#NEXT_TIMER_MAX_DELTA\">NEXT_TIMER_MAX_DELTA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#NEXT_TIMER_MAX_DELTA\">NEXT_TIMER_MAX_DELTA</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take rounding errors in to account and make sure, that it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expires in the next tick. Otherwise we go into an endless</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ping pong due to tick_nohz_stop_sched_tick() retriggering</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the timer softirq</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#expires\">expires</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#expires\">expires</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_next_timer_interrupt - return the jiffy of the next pending timer</span>", 
"<span class=\"comment\"> * @now: current time (in jiffies)</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#get_next_timer_interrupt\">get_next_timer_interrupt</a>(unsigned long <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a>, <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> = <a class=\"id\" href=\"#__next_timer_interrupt\">__next_timer_interrupt</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#now\">now</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmp_next_hrtimer_event\">cmp_next_hrtimer_event</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#expires\">expires</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from the timer interrupt handler to charge one tick to the current</span>", 
"<span class=\"comment\"> * process.  user_tick is 1 if the tick is user time, 0 for system.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#update_process_times\">update_process_times</a>(int <a class=\"id\" href=\"#user_tick\">user_tick</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Note: this timer irq context must be accounted for as well. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_process_tick\">account_process_tick</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#user_tick\">user_tick</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#run_local_timers\">run_local_timers</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_check_callbacks\">rcu_check_callbacks</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#user_tick\">user_tick</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_tick\">printk_tick</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_do_pending\">perf_event_do_pending</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scheduler_tick\">scheduler_tick</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#run_posix_cpu_timers\">run_posix_cpu_timers</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function runs timers and the timer-tq in bottom half context.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#run_timer_softirq\">run_timer_softirq</a>(struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_run_pending\">hrtimer_run_pending</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__run_timers\">__run_timers</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called by the local, per-CPU timer interrupt on SMP.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#run_local_timers\">run_local_timers</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_run_queues\">hrtimer_run_queues</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq\">raise_softirq</a>(<a class=\"id\" href=\"#TIMER_SOFTIRQ\">TIMER_SOFTIRQ</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The 64-bit jiffies value is not atomic - you MUST NOT read it</span>", 
"<span class=\"comment\"> * without sampling the sequence number in xtime_lock.</span>", 
"<span class=\"comment\"> * jiffies is defined in the linker script...</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#do_timer\">do_timer</a>(unsigned long <a class=\"id\" href=\"#ticks\">ticks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jiffies_64\">jiffies_64</a> += <a class=\"id\" href=\"#ticks\">ticks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_wall_time\">update_wall_time</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calc_global_load\">calc_global_load</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_SYS_ALARM\">__ARCH_WANT_SYS_ALARM</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For backwards compatibility?  This can be done in libc so Alpha</span>", 
"<span class=\"comment\"> * and all newer ports shouldn't need it.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#alarm\">alarm</a>, unsigned int, <a class=\"id\" href=\"#seconds\">seconds</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alarm_setitimer\">alarm_setitimer</a>(<a class=\"id\" href=\"#seconds\">seconds</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__alpha__\">__alpha__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The Alpha uses getxpid, getxuid, and getxgid instead.  Maybe this</span>", 
"<span class=\"comment\"> * should be moved into arch/i386 instead?</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_getpid - return the thread group id of the current process</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, despite the name, this returns the tgid not the pid.  The tgid and</span>", 
"<span class=\"comment\"> * the pid are identical unless CLONE_THREAD was specified on clone() in</span>", 
"<span class=\"comment\"> * which case the tgid is the same in all threads of the same group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is SMP safe as current-&gt;tgid does not change.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#getpid\">getpid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Accessing -&gt;real_parent is not SMP-safe, it could</span>", 
"<span class=\"comment\"> * change from under us. However, we can use a stale</span>", 
"<span class=\"comment\"> * value of -&gt;real_parent under rcu_read_lock(), see</span>", 
"<span class=\"comment\"> * release_task()-&gt;call_rcu(delayed_put_task_struct).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#getppid\">getppid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#getuid\">getuid</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Only we change this so SMP safe */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_uid\">current_uid</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#geteuid\">geteuid</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Only we change this so SMP safe */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_euid\">current_euid</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#getgid\">getgid</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Only we change this so SMP safe */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_gid\">current_gid</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#getegid\">getegid</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Only we change this so SMP safe */</span>", 
"<span class=\"ts\"/>return  <a class=\"id\" href=\"#current_egid\">current_egid</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#process_timeout\">process_timeout</a>(unsigned long <a class=\"id\" href=\"#__data\">__data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>((struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *)<a class=\"id\" href=\"#__data\">__data</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * schedule_timeout - sleep until timeout</span>", 
"<span class=\"comment\"> * @timeout: timeout value in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Make the current task sleep until @timeout jiffies have</span>", 
"<span class=\"comment\"> * elapsed. The routine will return immediately unless</span>", 
"<span class=\"comment\"> * the current task state has been set (see set_current_state()).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You can set the task state as follows -</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %TASK_UNINTERRUPTIBLE - at least @timeout jiffies are guaranteed to</span>", 
"<span class=\"comment\"> * pass before the routine returns. The routine will return 0</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %TASK_INTERRUPTIBLE - the routine may return early if a signal is</span>", 
"<span class=\"comment\"> * delivered to the current task. In this case the remaining time</span>", 
"<span class=\"comment\"> * in jiffies will be returned, or 0 if the timer expired in time</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The current task state is guaranteed to be TASK_RUNNING when this</span>", 
"<span class=\"comment\"> * routine returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Specifying a @timeout value of %MAX_SCHEDULE_TIMEOUT will schedule</span>", 
"<span class=\"comment\"> * the CPU away without a bound on the timeout. In this case the return</span>", 
"<span class=\"comment\"> * value will be %MAX_SCHEDULE_TIMEOUT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In all cases the return value is guaranteed to be non-negative.</span>", 
"<span class=\"comment\"> */</span>", 
"signed long <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(signed long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> <a class=\"id\" href=\"#timer\">timer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expire\">expire</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * These two special cases are useful to be comfortable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in the caller. Nothing more. We could take</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * MAX_SCHEDULE_TIMEOUT from one of the negative value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but I' d like to return a valid offset (&gt;=0) to allow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the caller to do everything it want with the retval.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Another bit of PARANOID. Note that the retval will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 0 since no piece of kernel is supposed to do a check</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for a negative retval of schedule_timeout() (since it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should never happens anyway). You just have the printk()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that will tell you if something is gone wrong and where.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"schedule_timeout: wrong timeout \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"value %lx\\n\", <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expire\">expire</a> = <a class=\"id\" href=\"#timeout\">timeout</a> + <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_timer_on_stack\">setup_timer_on_stack</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#process_timeout\">process_timeout</a>, (unsigned long)<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_timer\">__mod_timer</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#expire\">expire</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#TIMER_NOT_PINNED\">TIMER_NOT_PINNED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_singleshot_timer_sync\">del_singleshot_timer_sync</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the timer from the object tracker */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_timer_on_stack\">destroy_timer_on_stack</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#expire\">expire</a> - <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#timeout\">timeout</a> &lt; 0 ? 0 : <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We can use __set_current_state() here because schedule_timeout() calls</span>", 
"<span class=\"comment\"> * schedule() unconditionally.</span>", 
"<span class=\"comment\"> */</span>", 
"signed long <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#schedule_timeout_interruptible\">schedule_timeout_interruptible</a>(signed long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#schedule_timeout_interruptible\">schedule_timeout_interruptible</a>);", 
"", 
"signed long <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#schedule_timeout_killable\">schedule_timeout_killable</a>(signed long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_KILLABLE\">TASK_KILLABLE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#schedule_timeout_killable\">schedule_timeout_killable</a>);", 
"", 
"signed long <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(signed long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>);", 
"", 
"<span class=\"comment\">/* Thread ID - the internal kernel \"pid\" */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#gettid\">gettid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * do_sysinfo - fill in sysinfo struct</span>", 
"<span class=\"comment\"> * @info: pointer to buffer to fill</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#do_sysinfo\">do_sysinfo</a>(struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mem_total\">mem_total</a>, <a class=\"id\" href=\"#sav_total\">sav_total</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mem_unit\">mem_unit</a>, <a class=\"id\" href=\"#bitcount\">bitcount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#tp\">tp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#info\">info</a>, 0, sizeof(struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#monotonic_to_bootbased\">monotonic_to_bootbased</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#uptime\">uptime</a> = <a class=\"id\" href=\"#tp\">tp</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> + (<a class=\"id\" href=\"#tp\">tp</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> ? 1 : 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_avenrun\">get_avenrun</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#loads\">loads</a>, 0, <a class=\"id\" href=\"#SI_LOAD_SHIFT\">SI_LOAD_SHIFT</a> - <a class=\"id\" href=\"#FSHIFT\">FSHIFT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#procs\">procs</a> = <a class=\"id\" href=\"#nr_threads\">nr_threads</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si_meminfo\">si_meminfo</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si_swapinfo\">si_swapinfo</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the sum of all the available memory (i.e. ram + swap)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is less than can be stored in a 32 bit unsigned long then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can be binary compatible with 2.2.x kernels.  If not,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * well, in that case 2.2.x was broken anyways...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  -Erik Andersen &lt;andersee@debian.org&gt;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_total\">mem_total</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#totalram\">totalram</a> + <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#totalswap\">totalswap</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_total\">mem_total</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#totalram\">totalram</a> || <a class=\"id\" href=\"#mem_total\">mem_total</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#totalswap\">totalswap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitcount\">bitcount</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_unit\">mem_unit</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mem_unit\">mem_unit</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#mem_unit\">mem_unit</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitcount\">bitcount</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_unit\">mem_unit</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sav_total\">sav_total</a> = <a class=\"id\" href=\"#mem_total\">mem_total</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_total\">mem_total</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_total\">mem_total</a> &lt; <a class=\"id\" href=\"#sav_total\">sav_total</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If mem_total did not overflow, multiply all memory values by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * info-&gt;mem_unit and set it to 1.  This leaves things compatible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with 2.2.x, and also retains compatibility with earlier 2.4.x</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernels...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mem_unit\">mem_unit</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#totalram\">totalram</a> <<= <a class=\"id\" href=\"#bitcount\">bitcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#freeram\">freeram</a> <<= <a class=\"id\" href=\"#bitcount\">bitcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sharedram\">sharedram</a> <<= <a class=\"id\" href=\"#bitcount\">bitcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#bufferram\">bufferram</a> <<= <a class=\"id\" href=\"#bitcount\">bitcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#totalswap\">totalswap</a> <<= <a class=\"id\" href=\"#bitcount\">bitcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#freeswap\">freeswap</a> <<= <a class=\"id\" href=\"#bitcount\">bitcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#totalhigh\">totalhigh</a> <<= <a class=\"id\" href=\"#bitcount\">bitcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#freehigh\">freehigh</a> <<= <a class=\"id\" href=\"#bitcount\">bitcount</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#sysinfo\">sysinfo</a>, struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_sysinfo\">do_sysinfo</a>(&amp;<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#info\">info</a>, &amp;<a class=\"id\" href=\"#val\">val</a>, sizeof(struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_timers_cpu\">init_timers_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>static char <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#tvec_base_done\">tvec_base_done</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tvec_base_done\">tvec_base_done</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>static char <a class=\"id\" href=\"#boot_done\">boot_done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_done\">boot_done</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The APs use this path later in boot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(*<a class=\"id\" href=\"#base\">base</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#base\">base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure that tvec_base is 2 byte aligned */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#base\">base</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is for the boot CPU - we use compile-time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * static initialisation because per-cpu memory isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ready yet and because the memory allocators are not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * initialised either.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_done\">boot_done</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = &amp;<a class=\"id\" href=\"#boot_tvec_bases\">boot_tvec_bases</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tvec_base_done\">tvec_base_done</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#TVN_SIZE\">TVN_SIZE</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv5\">tv5</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv4\">tv4</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv3\">tv3</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv2\">tv2</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#TVR_SIZE\">TVR_SIZE</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv1\">tv1</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#j\">j</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"static void <a class=\"id\" href=\"#migrate_timer_list\">migrate_timer_list</a>(struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#new_base\">new_base</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#timer_list\">timer_list</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_timer\">detach_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_set_base\">timer_set_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#new_base\">new_base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_add_timer\">internal_add_timer</a>(<a class=\"id\" href=\"#new_base\">new_base</a>, <a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#migrate_timers\">migrate_timers</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#old_base\">old_base</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#new_base\">new_base</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_base\">old_base</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_base\">new_base</a> = <a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The caller is globally serialized and nobody else</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * takes two locks at once, deadlock is not possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nested\">spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#old_base\">old_base</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#old_base\">old_base</a>-><a class=\"id\" href=\"#running_timer\">running_timer</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#TVR_SIZE\">TVR_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_timer_list\">migrate_timer_list</a>(<a class=\"id\" href=\"#new_base\">new_base</a>, <a class=\"id\" href=\"#old_base\">old_base</a>-><a class=\"id\" href=\"#tv1\">tv1</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#TVN_SIZE\">TVN_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_timer_list\">migrate_timer_list</a>(<a class=\"id\" href=\"#new_base\">new_base</a>, <a class=\"id\" href=\"#old_base\">old_base</a>-><a class=\"id\" href=\"#tv2\">tv2</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_timer_list\">migrate_timer_list</a>(<a class=\"id\" href=\"#new_base\">new_base</a>, <a class=\"id\" href=\"#old_base\">old_base</a>-><a class=\"id\" href=\"#tv3\">tv3</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_timer_list\">migrate_timer_list</a>(<a class=\"id\" href=\"#new_base\">new_base</a>, <a class=\"id\" href=\"#old_base\">old_base</a>-><a class=\"id\" href=\"#tv4\">tv4</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_timer_list\">migrate_timer_list</a>(<a class=\"id\" href=\"#new_base\">new_base</a>, <a class=\"id\" href=\"#old_base\">old_base</a>-><a class=\"id\" href=\"#tv5\">tv5</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#old_base\">old_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HOTPLUG_CPU */</span>", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#timer_cpu_notify\">timer_cpu_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE_FROZEN\">CPU_UP_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#init_timers_cpu\">init_timers_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_from_errno\">notifier_from_errno</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_timers\">migrate_timers</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#timers_nb\">timers_nb</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/>= <a class=\"id\" href=\"#timer_cpu_notify\">timer_cpu_notify</a>,", 
"};", 
"", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_timers\">init_timers</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#timer_cpu_notify\">timer_cpu_notify</a>(&amp;<a class=\"id\" href=\"#timers_nb\">timers_nb</a>, (unsigned long)<a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void *)(long)<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timer_stats\">init_timer_stats</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a> != <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#timers_nb\">timers_nb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_softirq\">open_softirq</a>(<a class=\"id\" href=\"#TIMER_SOFTIRQ\">TIMER_SOFTIRQ</a>, <a class=\"id\" href=\"#run_timer_softirq\">run_timer_softirq</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * msleep - sleep safely even with waitqueue interruptions</span>", 
"<span class=\"comment\"> * @msecs: Time in milliseconds to sleep for</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#msleep\">msleep</a>(unsigned int <a class=\"id\" href=\"#msecs\">msecs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#msecs\">msecs</a>) + 1;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#msleep\">msleep</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * msleep_interruptible - sleep waiting for signals</span>", 
"<span class=\"comment\"> * @msecs: Time in milliseconds to sleep for</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#msleep_interruptible\">msleep_interruptible</a>(unsigned int <a class=\"id\" href=\"#msecs\">msecs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#msecs\">msecs</a>) + 1;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#timeout\">timeout</a> && !<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#schedule_timeout_interruptible\">schedule_timeout_interruptible</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#msleep_interruptible\">msleep_interruptible</a>);", 
"", 
"static int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#do_usleep_range\">do_usleep_range</a>(unsigned long <a class=\"id\" href=\"#min\">min</a>, unsigned long <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kmin\">kmin</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmin\">kmin</a> = <a class=\"id\" href=\"#ktime_set\">ktime_set</a>(0, <a class=\"id\" href=\"#min\">min</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#max\">max</a> - <a class=\"id\" href=\"#min\">min</a>) * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#schedule_hrtimeout_range\">schedule_hrtimeout_range</a>(&amp;<a class=\"id\" href=\"#kmin\">kmin</a>, <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#HRTIMER_MODE_REL\">HRTIMER_MODE_REL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usleep_range - Drop in replacement for udelay where wakeup is flexible</span>", 
"<span class=\"comment\"> * @min: Minimum time in usecs to sleep</span>", 
"<span class=\"comment\"> * @max: Maximum time in usecs to sleep</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#usleep_range\">usleep_range</a>(unsigned long <a class=\"id\" href=\"#min\">min</a>, unsigned long <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_usleep_range\">do_usleep_range</a>(<a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#usleep_range\">usleep_range</a>);", 
];
xr_frag_insert('l/cd/5a84e159a4ba8ab85c604c786d236d1f026479.xr', __xr_tmp);
