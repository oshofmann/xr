var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mc146818rtc\">mc146818rtc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mtrr\">mtrr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu_context\">mmu_context</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ipi\">ipi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"void <a class=\"id\" href=\"#default_send_IPI_mask_sequence_phys\">default_send_IPI_mask_sequence_phys</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>, int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#query_cpu\">query_cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hack. The clustered APIC addressing mode doesn't allow us to send</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to an arbitrary mask, so I do a unicast to each CPU instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - mbligh</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#query_cpu\">query_cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__default_send_IPI_dest_field\">__default_send_IPI_dest_field</a>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_apicid\">x86_cpu_to_apicid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#query_cpu\">query_cpu</a>), <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#APIC_DEST_PHYSICAL\">APIC_DEST_PHYSICAL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#default_send_IPI_mask_allbutself_phys\">default_send_IPI_mask_allbutself_phys</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#query_cpu\">query_cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See Hack comment above */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#query_cpu\">query_cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#query_cpu\">query_cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__default_send_IPI_dest_field\">__default_send_IPI_dest_field</a>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_apicid\">x86_cpu_to_apicid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#query_cpu\">query_cpu</a>), <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#APIC_DEST_PHYSICAL\">APIC_DEST_PHYSICAL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#default_send_IPI_mask_sequence_logical\">default_send_IPI_mask_sequence_logical</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#query_cpu\">query_cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hack. The clustered APIC addressing mode doesn't allow us to send</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to an arbitrary mask, so I do a unicasts to each CPU instead. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should be modified to do 1 message per cluster ID - mbligh</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#query_cpu\">query_cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__default_send_IPI_dest_field\">__default_send_IPI_dest_field</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#cpu_to_logical_apicid\">cpu_to_logical_apicid</a>(<a class=\"id\" href=\"#query_cpu\">query_cpu</a>), <a class=\"id\" href=\"#vector\">vector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#dest_logical\">dest_logical</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#default_send_IPI_mask_allbutself_logical\">default_send_IPI_mask_allbutself_logical</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#query_cpu\">query_cpu</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See Hack comment above */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#query_cpu\">query_cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#query_cpu\">query_cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__default_send_IPI_dest_field\">__default_send_IPI_dest_field</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#cpu_to_logical_apicid\">cpu_to_logical_apicid</a>(<a class=\"id\" href=\"#query_cpu\">query_cpu</a>), <a class=\"id\" href=\"#vector\">vector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#dest_logical\">dest_logical</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is only used on smaller machines.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#default_send_IPI_mask_logical\">default_send_IPI_mask_logical</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>, int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>)[0];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(!<a class=\"id\" href=\"#mask\">mask</a>, \"empty IPI mask\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#mask\">mask</a> &amp; ~<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>)[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__default_send_IPI_dest_field\">__default_send_IPI_dest_field</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#dest_logical\">dest_logical</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#default_send_IPI_allbutself\">default_send_IPI_allbutself</a>(int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if there are no other CPUs in the system then we get an APIC send</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error if we try to broadcast, thus avoid sending IPIs in this case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() &gt; 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__default_local_send_IPI_allbutself\">__default_local_send_IPI_allbutself</a>(<a class=\"id\" href=\"#vector\">vector</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#default_send_IPI_all\">default_send_IPI_all</a>(int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__default_local_send_IPI_all\">__default_local_send_IPI_all</a>(<a class=\"id\" href=\"#vector\">vector</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#default_send_IPI_self\">default_send_IPI_self</a>(int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__default_send_IPI_shortcut\">__default_send_IPI_shortcut</a>(<a class=\"id\" href=\"#APIC_DEST_SELF\">APIC_DEST_SELF</a>, <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#dest_logical\">dest_logical</a>);", 
"}", 
"", 
"<span class=\"comment\">/* must come after the send_IPI functions above for inlining */</span>", 
"static int <a class=\"id\" href=\"#convert_apicid_to_cpu\">convert_apicid_to_cpu</a>(int <a class=\"id\" href=\"#apic_id\">apic_id</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_apicid\">x86_cpu_to_apicid</a>, <a class=\"id\" href=\"#i\">i</a>) == <a class=\"id\" href=\"#apic_id\">apic_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#safe_smp_processor_id\">safe_smp_processor_id</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#apicid\">apicid</a>, <a class=\"id\" href=\"#cpuid\">cpuid</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#hard_smp_processor_id\">hard_smp_processor_id</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apicid\">apicid</a> == <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a> = <a class=\"id\" href=\"#convert_apicid_to_cpu\">convert_apicid_to_cpu</a>(<a class=\"id\" href=\"#apicid\">apicid</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpuid\">cpuid</a> >= 0 ? <a class=\"id\" href=\"#cpuid\">cpuid</a> : 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/cd/6e3e4906ad7a8eb9914d58e8c2e7073f38b944.xr', __xr_tmp);
