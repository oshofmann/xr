var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_PAGEMAP_H\">_LINUX_PAGEMAP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_PAGEMAP_H\">_LINUX_PAGEMAP_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright 1995 Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for in_interrupt() */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb_inline\">hugetlb_inline</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bits in mapping-&gt;flags.  The lower __GFP_BITS_SHIFT bits are the page</span>", 
"<span class=\"comment\"> * allocation mode flags.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#mapping_flags\">mapping_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AS_EIO\">AS_EIO</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__GFP_BITS_SHIFT\">__GFP_BITS_SHIFT</a> + 0,<span class=\"ts\"/><span class=\"comment\">/* IO error on async write */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AS_ENOSPC\">AS_ENOSPC</a><span class=\"ts\"/>= <a class=\"id\" href=\"#__GFP_BITS_SHIFT\">__GFP_BITS_SHIFT</a> + 1,<span class=\"ts\"/><span class=\"comment\">/* ENOSPC on async write */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AS_MM_ALL_LOCKS\">AS_MM_ALL_LOCKS</a><span class=\"ts\"/>= <a class=\"id\" href=\"#__GFP_BITS_SHIFT\">__GFP_BITS_SHIFT</a> + 2,<span class=\"ts\"/><span class=\"comment\">/* under mm_take_all_locks() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AS_UNEVICTABLE\">AS_UNEVICTABLE</a><span class=\"ts\"/>= <a class=\"id\" href=\"#__GFP_BITS_SHIFT\">__GFP_BITS_SHIFT</a> + 3,<span class=\"ts\"/><span class=\"comment\">/* e.g., ramdisk, SHM_LOCK */</span>", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mapping_set_error\">mapping_set_error</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#AS_ENOSPC\">AS_ENOSPC</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#AS_EIO\">AS_EIO</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mapping_set_unevictable\">mapping_set_unevictable</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#AS_UNEVICTABLE\">AS_UNEVICTABLE</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mapping_clear_unevictable\">mapping_clear_unevictable</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#AS_UNEVICTABLE\">AS_UNEVICTABLE</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mapping_unevictable\">mapping_unevictable</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#mapping\">mapping</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#AS_UNEVICTABLE\">AS_UNEVICTABLE</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return !!<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mapping_gfp_mask\">mapping_gfp_mask</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> * <a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#__GFP_BITS_MASK\">__GFP_BITS_MASK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is non-atomic.  Only to be used before the mapping is activated.</span>", 
"<span class=\"comment\"> * Probably needs a barrier...</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mapping_set_gfp_mask\">mapping_set_gfp_mask</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#flags\">flags</a> = (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; ~(<a class=\"id\" href=\"#__force\">__force</a> unsigned long)<a class=\"id\" href=\"#__GFP_BITS_MASK\">__GFP_BITS_MASK</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__force\">__force</a> unsigned long)<a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The page cache can done in larger chunks than</span>", 
"<span class=\"comment\"> * one page, because it allows for more efficient</span>", 
"<span class=\"comment\"> * throughput (it can then be mapped into user</span>", 
"<span class=\"comment\"> * space in smaller chunks for same flexibility).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Or rather, it _will_ be done in larger chunks.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_CACHE_ALIGN\">PAGE_CACHE_ALIGN</a>(<a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#addr\">addr</a>)+<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>-1)&amp;<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>)", 
"void <a class=\"id\" href=\"#release_pages\">release_pages</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#nr\">nr</a>, int <a class=\"id\" href=\"#cold\">cold</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * speculatively take a reference to a page.</span>", 
"<span class=\"comment\"> * If the page is free (_count == 0), then _count is untouched, and 0</span>", 
"<span class=\"comment\"> * is returned. Otherwise, _count is incremented by 1 and 1 is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called inside the same rcu_read_lock() section as has</span>", 
"<span class=\"comment\"> * been used to lookup the page in the pagecache radix-tree (or page table):</span>", 
"<span class=\"comment\"> * this allows allocators to use a synchronize_rcu() to stabilize _count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unless an RCU grace period has passed, the count of all pages coming out</span>", 
"<span class=\"comment\"> * of the allocator must be considered unstable. page_count may return higher</span>", 
"<span class=\"comment\"> * than expected, and put_page must be able to do the right thing when the</span>", 
"<span class=\"comment\"> * page has been finished with, no matter what it is subsequently allocated</span>", 
"<span class=\"comment\"> * for (because put_page is what is used here to drop an invalid speculative</span>", 
"<span class=\"comment\"> * reference).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the interesting part of the lockless pagecache (and lockless</span>", 
"<span class=\"comment\"> * get_user_pages) locking protocol, where the lookup-side (eg. find_get_page)</span>", 
"<span class=\"comment\"> * has the following pattern:</span>", 
"<span class=\"comment\"> * 1. find page in radix tree</span>", 
"<span class=\"comment\"> * 2. conditionally increment refcount</span>", 
"<span class=\"comment\"> * 3. check the page is still in pagecache (if no, goto 1)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Remove-side that cares about stability of _count (eg. reclaim) has the</span>", 
"<span class=\"comment\"> * following (with tree_lock held for write):</span>", 
"<span class=\"comment\"> * A. atomically check refcount is correct and set it to 0 (atomic_cmpxchg)</span>", 
"<span class=\"comment\"> * B. remove page from pagecache</span>", 
"<span class=\"comment\"> * C. free the page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are 2 critical interleavings that matter:</span>", 
"<span class=\"comment\"> * - 2 runs before A: in this case, A sees elevated refcount and bails out</span>", 
"<span class=\"comment\"> * - A runs before 2: in this case, 2 sees zero refcount and retries;</span>", 
"<span class=\"comment\"> *   subsequently, B will complete and 1 will find no page, causing the</span>", 
"<span class=\"comment\"> *   lookup to return NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is possible that between 1 and 2, the page is removed then the exact same</span>", 
"<span class=\"comment\"> * page is inserted into the same position in pagecache. That's OK: the</span>", 
"<span class=\"comment\"> * old find_get_page using tree_lock could equally have run before or after</span>", 
"<span class=\"comment\"> * such a re-insertion, depending on order that locks are granted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lookups racing against pagecache insertion isn't a big problem: either 1</span>", 
"<span class=\"comment\"> * will find the page or it will not. Likewise, the old find_get_page could run</span>", 
"<span class=\"comment\"> * either before the insertion or afterwards, depending on timing.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_cache_get_speculative\">page_cache_get_speculative</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TREE_RCU\">CONFIG_TREE_RCU</a>)", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#in_atomic\">in_atomic</a>());", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Preempt must be disabled here - we rely on rcu_read_lock doing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this for us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Pagecache won't be truncated from interrupt context, so if we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * found a page in the radix tree here, we have pinned its refcount by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disabling preempt, and hence no need for the \"speculative get\" that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SMP requires.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>);", 
"", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Either the page has been freed, or will be freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In either case, retry here and the caller should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do the right thing (see comments above).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageTail\">PageTail</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Same as above, but add instead of inc (could just be merged)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_cache_add_speculative\">page_cache_add_speculative</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TREE_RCU\">CONFIG_TREE_RCU</a>)", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#in_atomic\">in_atomic</a>());", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>);", 
"", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>, <a class=\"id\" href=\"#count\">count</a>, 0)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_freeze_refs\">page_freeze_refs</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>, <a class=\"id\" href=\"#count\">count</a>, 0) == <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#page_unfreeze_refs\">page_unfreeze_refs</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) != 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#count\">count</a> == 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"extern struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#__page_cache_alloc\">__page_cache_alloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#__page_cache_alloc\">__page_cache_alloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, 0);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page_cache_alloc\">page_cache_alloc</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__page_cache_alloc\">__page_cache_alloc</a>(<a class=\"id\" href=\"#mapping_gfp_mask\">mapping_gfp_mask</a>(<a class=\"id\" href=\"#x\">x</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page_cache_alloc_cold\">page_cache_alloc_cold</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__page_cache_alloc\">__page_cache_alloc</a>(<a class=\"id\" href=\"#mapping_gfp_mask\">mapping_gfp_mask</a>(<a class=\"id\" href=\"#x\">x</a>)|<a class=\"id\" href=\"#__GFP_COLD\">__GFP_COLD</a>);", 
"}", 
"", 
"typedef int <a class=\"id\" href=\"#filler_t\">filler_t</a>(void *, struct <a class=\"id\" href=\"#page\">page</a> *);", 
"", 
"extern struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>);", 
"extern struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#find_lock_page\">find_lock_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>);", 
"extern struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"unsigned <a class=\"id\" href=\"#find_get_pages\">find_get_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>);", 
"unsigned <a class=\"id\" href=\"#find_get_pages_contig\">find_get_pages_contig</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>);", 
"unsigned <a class=\"id\" href=\"#find_get_pages_tag\">find_get_pages_tag</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> *<a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#tag\">tag</a>, unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#grab_cache_page_write_begin\">grab_cache_page_write_begin</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns locked page at given index in given cache, creating it if needed.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#grab_cache_page\">grab_cache_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#mapping_gfp_mask\">mapping_gfp_mask</a>(<a class=\"id\" href=\"#mapping\">mapping</a>));", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#grab_cache_page_nowait\">grab_cache_page_nowait</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>);", 
"extern struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#read_cache_page_async\">read_cache_page_async</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#filler_t\">filler_t</a> *<a class=\"id\" href=\"#filler\">filler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#read_cache_page\">read_cache_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#filler_t\">filler_t</a> *<a class=\"id\" href=\"#filler\">filler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#read_cache_page_gfp\">read_cache_page_gfp</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"extern int <a class=\"id\" href=\"#read_cache_pages\">read_cache_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#filler_t\">filler_t</a> *<a class=\"id\" href=\"#filler\">filler</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#read_mapping_page_async\">read_mapping_page_async</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
];
xr_frag_insert('l/cd/6ed188a1ae5f3563c9225e879534654baa181c.xr', __xr_tmp);
