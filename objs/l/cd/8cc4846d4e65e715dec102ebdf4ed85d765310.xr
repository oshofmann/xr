var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_FTRACE_EVENT_H\">_LINUX_FTRACE_EVENT_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_FTRACE_EVENT_H\">_LINUX_FTRACE_EVENT_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ring_buffer\">ring_buffer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#trace_seq\">trace_seq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#trace_array\">trace_array</a>;", 
"struct <a class=\"id\" href=\"#tracer\">tracer</a>;", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"struct <a class=\"id\" href=\"#trace_print_flags\">trace_print_flags</a> {", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#ftrace_print_flags_seq\">ftrace_print_flags_seq</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#p\">p</a>, const char *<a class=\"id\" href=\"#delim\">delim</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#trace_print_flags\">trace_print_flags</a> *<a class=\"id\" href=\"#flag_array\">flag_array</a>);", 
"", 
"const char *<a class=\"id\" href=\"#ftrace_print_symbols_seq\">ftrace_print_symbols_seq</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#trace_print_flags\">trace_print_flags</a> *<a class=\"id\" href=\"#symbol_array\">symbol_array</a>);", 
"", 
"const char *<a class=\"id\" href=\"#ftrace_print_hex_seq\">ftrace_print_hex_seq</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The trace entry - the most basic unit of tracing. This is what</span>", 
"<span class=\"comment\"> * is printed in the end as a single line in the trace output, such as:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     bash-15816 [01]   235.197585: idle_cpu &lt;- irq_enter</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> {", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_count\">preempt_count</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_depth\">lock_depth</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTRACE_MAX_EVENT\">FTRACE_MAX_EVENT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((1 << (sizeof(((struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *)0)-><a class=\"id\" href=\"#type\">type</a>) * 8)) - 1)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Trace iterator - used by printout routines who present trace</span>", 
"<span class=\"comment\"> * results to users and which routines might sleep, etc:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array\">trace_array</a><span class=\"ts\"/>*<a class=\"id\" href=\"#tr\">tr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracer\">tracer</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_file\">cpu_file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex\">mutex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a><span class=\"ts\"/>*<a class=\"id\" href=\"#buffer_iter\">buffer_iter</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>];", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter_flags\">iter_flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* trace_seq for __print_flags() and __print_symbolic() etc. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a><span class=\"ts\"/><a class=\"id\" href=\"#tmp_seq\">tmp_seq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The below is zeroed out in pipe_read */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lost_events\">lost_events</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leftover\">leftover</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#started\">started</a>;", 
"};", 
"", 
"", 
"struct <a class=\"id\" href=\"#trace_event\">trace_event</a>;", 
"", 
"typedef enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a> (*<a class=\"id\" href=\"#trace_print_func\">trace_print_func</a>)(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#trace_event\">trace_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"struct <a class=\"id\" href=\"#trace_event_functions\">trace_event_functions</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_print_func\">trace_print_func</a><span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_print_func\">trace_print_func</a><span class=\"ts\"/><a class=\"id\" href=\"#raw\">raw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_print_func\">trace_print_func</a><span class=\"ts\"/><a class=\"id\" href=\"#hex\">hex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_print_func\">trace_print_func</a><span class=\"ts\"/><a class=\"id\" href=\"#binary\">binary</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#trace_event\">trace_event</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_event_functions\">trace_event_functions</a><span class=\"ts\"/>*<a class=\"id\" href=\"#funcs\">funcs</a>;", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#register_ftrace_event\">register_ftrace_event</a>(struct <a class=\"id\" href=\"#trace_event\">trace_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern int <a class=\"id\" href=\"#unregister_ftrace_event\">unregister_ftrace_event</a>(struct <a class=\"id\" href=\"#trace_event\">trace_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"comment\">/* Return values for print_line callback */</span>", 
"enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"comment\">/* Retry after flushing the seq */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_TYPE_UNHANDLED\">TRACE_TYPE_UNHANDLED</a><span class=\"ts\"/>= 2,<span class=\"ts\"/><span class=\"comment\">/* Relay to other output functions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_TYPE_NO_CONSUME\">TRACE_TYPE_NO_CONSUME</a><span class=\"ts\"/>= 3<span class=\"ts\"/><span class=\"comment\">/* Handled but ask to not consume */</span>", 
"};", 
"", 
"void <a class=\"id\" href=\"#tracing_generic_entry_update\">tracing_generic_entry_update</a>(struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#pc\">pc</a>);", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#trace_current_buffer_lock_reserve\">trace_current_buffer_lock_reserve</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> **<a class=\"id\" href=\"#current_buffer\">current_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#type\">type</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>);", 
"void <a class=\"id\" href=\"#trace_current_buffer_unlock_commit\">trace_current_buffer_unlock_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>);", 
"void <a class=\"id\" href=\"#trace_nowake_buffer_unlock_commit\">trace_nowake_buffer_unlock_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>);", 
"void <a class=\"id\" href=\"#trace_current_buffer_discard_commit\">trace_current_buffer_discard_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"void <a class=\"id\" href=\"#tracing_record_cmdline\">tracing_record_cmdline</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"struct <a class=\"id\" href=\"#event_filter\">event_filter</a>;", 
"", 
"enum <a class=\"id\" href=\"#trace_reg\">trace_reg</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_REG_REGISTER\">TRACE_REG_REGISTER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_REG_UNREGISTER\">TRACE_REG_UNREGISTER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_REG_PERF_REGISTER\">TRACE_REG_PERF_REGISTER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_REG_PERF_UNREGISTER\">TRACE_REG_PERF_UNREGISTER</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a>;", 
"", 
"struct <a class=\"id\" href=\"#ftrace_event_class\">ftrace_event_class</a> {", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#system\">system</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#probe\">probe</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#perf_probe\">perf_probe</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#reg\">reg</a>)(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       enum <a class=\"id\" href=\"#trace_reg\">trace_reg</a> <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#define_fields\">define_fields</a>)(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/>*(*<a class=\"id\" href=\"#get_fields\">get_fields</a>)(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#fields\">fields</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#raw_init\">raw_init</a>)(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *);", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#ftrace_event_reg\">ftrace_event_reg</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#trace_reg\">trace_reg</a> <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_EVENT_FL_ENABLED_BIT\">TRACE_EVENT_FL_ENABLED_BIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_EVENT_FL_FILTERED_BIT\">TRACE_EVENT_FL_FILTERED_BIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_EVENT_FL_RECORDED_CMD_BIT\">TRACE_EVENT_FL_RECORDED_CMD_BIT</a>,", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_EVENT_FL_ENABLED\">TRACE_EVENT_FL_ENABLED</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << <a class=\"id\" href=\"#TRACE_EVENT_FL_ENABLED_BIT\">TRACE_EVENT_FL_ENABLED_BIT</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_EVENT_FL_FILTERED\">TRACE_EVENT_FL_FILTERED</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << <a class=\"id\" href=\"#TRACE_EVENT_FL_FILTERED_BIT\">TRACE_EVENT_FL_FILTERED_BIT</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_EVENT_FL_RECORDED_CMD\">TRACE_EVENT_FL_RECORDED_CMD</a><span class=\"ts\"/>= (1 << <a class=\"id\" href=\"#TRACE_EVENT_FL_RECORDED_CMD_BIT\">TRACE_EVENT_FL_RECORDED_CMD_BIT</a>),", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_class\">ftrace_event_class</a> *<a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dir\">dir</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_event\">trace_event</a><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#print_fmt\">print_fmt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_filter\">event_filter</a><span class=\"ts\"/>*<a class=\"id\" href=\"#filter\">filter</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32 bit flags:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   bit 1:<span class=\"ts\"/><span class=\"ts\"/>enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   bit 2:<span class=\"ts\"/><span class=\"ts\"/>filter_active</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   bit 3:<span class=\"ts\"/><span class=\"ts\"/>enabled cmd record</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Changes to flags must hold the event_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: Reads of flags do not hold the event_mutex since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they occur in critical sections. But the way flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is currently used, these changes do no affect the code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * except that when a change is made, it may have a slight</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delay in propagating the changes to other CPUs due to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * caching and such.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_refcount\">perf_refcount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#perf_events\">perf_events</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_MAX_TRACE_SIZE\">PERF_MAX_TRACE_SIZE</a><span class=\"ts\"/>2048", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_FILTER_PRED\">MAX_FILTER_PRED</a><span class=\"ts\"/><span class=\"ts\"/>32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_FILTER_STR_VAL\">MAX_FILTER_STR_VAL</a><span class=\"ts\"/>256<span class=\"ts\"/><span class=\"comment\">/* Should handle KSYM_SYMBOL_LEN */</span>", 
"", 
"extern void <a class=\"id\" href=\"#destroy_preds\">destroy_preds</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>);", 
"extern int <a class=\"id\" href=\"#filter_match_preds\">filter_match_preds</a>(struct <a class=\"id\" href=\"#event_filter\">event_filter</a> *<a class=\"id\" href=\"#filter\">filter</a>, void *<a class=\"id\" href=\"#rec\">rec</a>);", 
"extern int <a class=\"id\" href=\"#filter_current_check_discard\">filter_current_check_discard</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#rec\">rec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILTER_OTHER\">FILTER_OTHER</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILTER_STATIC_STRING\">FILTER_STATIC_STRING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILTER_DYN_STRING\">FILTER_DYN_STRING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILTER_PTR_STRING\">FILTER_PTR_STRING</a>,", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#trace_event_raw_init\">trace_event_raw_init</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>);", 
"extern int <a class=\"id\" href=\"#trace_define_field\">trace_define_field</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>, const char *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#is_signed\">is_signed</a>, int <a class=\"id\" href=\"#filter_type\">filter_type</a>);", 
"extern int <a class=\"id\" href=\"#trace_add_event_call\">trace_add_event_call</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>);", 
"extern void <a class=\"id\" href=\"#trace_remove_event_call\">trace_remove_event_call</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#is_signed_type\">is_signed_type</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#type\">type</a>)(-1)) &lt; 0)", 
"", 
"int <a class=\"id\" href=\"#trace_set_clr_event\">trace_set_clr_event</a>(const char *<a class=\"id\" href=\"#system\">system</a>, const char *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#set\">set</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The double __builtin_constant_p is because gcc will give us an error</span>", 
"<span class=\"comment\"> * if we try to allocate the static variable to fmt if it is not a</span>", 
"<span class=\"comment\"> * constant. Even with the outer if statement optimizing out.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#event_trace_printk\">event_trace_printk</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__trace_printk_check_format\">__trace_printk_check_format</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_record_cmdline\">tracing_record_cmdline</a>(<a class=\"id\" href=\"#current\">current</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#fmt\">fmt</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>static const char *<a class=\"id\" href=\"#trace_printk_fmt\">trace_printk_fmt</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"__trace_printk_fmt\"))) =<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) ? <a class=\"id\" href=\"#fmt\">fmt</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__trace_bprintk\">__trace_bprintk</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#trace_printk_fmt\">trace_printk_fmt</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__trace_printk\">__trace_printk</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"struct <a class=\"id\" href=\"#perf_event\">perf_event</a>;", 
"", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#perf_trace_regs\">perf_trace_regs</a>);", 
"", 
"extern int  <a class=\"id\" href=\"#perf_trace_init\">perf_trace_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern void <a class=\"id\" href=\"#perf_trace_destroy\">perf_trace_destroy</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern int  <a class=\"id\" href=\"#perf_trace_enable\">perf_trace_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern void <a class=\"id\" href=\"#perf_trace_disable\">perf_trace_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern int  <a class=\"id\" href=\"#ftrace_profile_set_filter\">ftrace_profile_set_filter</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#event_id\">event_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     char *<a class=\"id\" href=\"#filter_str\">filter_str</a>);", 
"extern void <a class=\"id\" href=\"#ftrace_profile_free_filter\">ftrace_profile_free_filter</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern void *<a class=\"id\" href=\"#perf_trace_buf_prepare\">perf_trace_buf_prepare</a>(int <a class=\"id\" href=\"#size\">size</a>, unsigned short <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int *<a class=\"id\" href=\"#rctxp\">rctxp</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#perf_trace_buf_submit\">perf_trace_buf_submit</a>(void *<a class=\"id\" href=\"#raw_data\">raw_data</a>, int <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#rctx\">rctx</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#count\">count</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, void *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_tp_event\">perf_tp_event</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#raw_data\">raw_data</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#rctx\">rctx</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_FTRACE_EVENT_H */</span>", 
];
xr_frag_insert('l/cd/8cc4846d4e65e715dec102ebdf4ed85d765310.xr', __xr_tmp);
