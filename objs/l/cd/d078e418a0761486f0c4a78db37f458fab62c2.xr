var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_JIFFIES_H\">_LINUX_JIFFIES_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_JIFFIES_H\">_LINUX_JIFFIES_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#math64\">math64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#param\">param</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for HZ */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following defines establish the engineering parameters of the PLL</span>", 
"<span class=\"comment\"> * model. The HZ variable establishes the timer interrupt frequency, 100 Hz</span>", 
"<span class=\"comment\"> * for the SunOS kernel, 256 Hz for the Ultrix kernel and 1024 Hz for the</span>", 
"<span class=\"comment\"> * OSF/1 kernel. The SHIFT_HZ define expresses the same value as the</span>", 
"<span class=\"comment\"> * nearest power of two in order to avoid hardware multiply operations.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#HZ\">HZ</a> >= 12 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 24", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> >= 24 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 48", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> >= 48 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 96", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>6", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> >= 96 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 192", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>7", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> >= 192 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 384", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>8", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> >= 384 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 768", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>9", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> >= 768 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 1536", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> >= 1536 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 3072", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>11", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> >= 3072 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 6144", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>12", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#HZ\">HZ</a> >= 6144 && <a class=\"id\" href=\"#HZ\">HZ</a> &lt; 12288", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a><span class=\"ts\"/>13", 
"#else", 
"# <a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#Invalid\">Invalid</a> <a class=\"id\" href=\"#value\">value</a> <a class=\"id\" href=\"#of\">of</a> <a class=\"id\" href=\"#HZ\">HZ</a>.", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* LATCH is used in the interval timer and ftape setup. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LATCH\">LATCH</a>  ((<a class=\"id\" href=\"#CLOCK_TICK_RATE\">CLOCK_TICK_RATE</a> + <a class=\"id\" href=\"#HZ\">HZ</a>/2) / <a class=\"id\" href=\"#HZ\">HZ</a>)<span class=\"ts\"/><span class=\"comment\">/* For divider */</span>", 
"", 
"<span class=\"comment\">/* Suppose we want to devide two numbers NOM and DEN: NOM/DEN, then we can</span>", 
"<span class=\"comment\"> * improve accuracy by shifting LSH bits, hence calculating:</span>", 
"<span class=\"comment\"> *     (NOM &lt;&lt; LSH) / DEN</span>", 
"<span class=\"comment\"> * This however means trouble for large NOM, because (NOM &lt;&lt; LSH) may no</span>", 
"<span class=\"comment\"> * longer fit in 32 bits. The following way of calculating this gives us</span>", 
"<span class=\"comment\"> * some slack, under the following conditions:</span>", 
"<span class=\"comment\"> *   - (NOM / DEN) fits in (32 - LSH) bits.</span>", 
"<span class=\"comment\"> *   - (NOM % DEN) fits in (32 - LSH) bits.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SH_DIV\">SH_DIV</a>(<a class=\"id\" href=\"#NOM\">NOM</a>,<a class=\"id\" href=\"#DEN\">DEN</a>,<a class=\"id\" href=\"#LSH\">LSH</a>) (   (((<a class=\"id\" href=\"#NOM\">NOM</a>) / (<a class=\"id\" href=\"#DEN\">DEN</a>)) << (<a class=\"id\" href=\"#LSH\">LSH</a>))              \\", 
"                             + ((((<a class=\"id\" href=\"#NOM\">NOM</a>) % (<a class=\"id\" href=\"#DEN\">DEN</a>)) << (<a class=\"id\" href=\"#LSH\">LSH</a>)) + (<a class=\"id\" href=\"#DEN\">DEN</a>) / 2) / (<a class=\"id\" href=\"#DEN\">DEN</a>))", 
"", 
"<span class=\"comment\">/* HZ is the requested value. ACTHZ is actual HZ (\"&lt;&lt; 8\" is for accuracy) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACTHZ\">ACTHZ</a> (<a class=\"id\" href=\"#SH_DIV\">SH_DIV</a> (<a class=\"id\" href=\"#CLOCK_TICK_RATE\">CLOCK_TICK_RATE</a>, <a class=\"id\" href=\"#LATCH\">LATCH</a>, 8))", 
"", 
"<span class=\"comment\">/* TICK_NSEC is the time between ticks in nsec assuming real ACTHZ */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a> (<a class=\"id\" href=\"#SH_DIV\">SH_DIV</a> (1000000UL * 1000, <a class=\"id\" href=\"#ACTHZ\">ACTHZ</a>, 8))", 
"", 
"<span class=\"comment\">/* TICK_USEC is the time between ticks in usec assuming fake USER_HZ */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TICK_USEC\">TICK_USEC</a> ((1000000UL + <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>/2) / <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>)", 
"", 
"<span class=\"comment\">/* TICK_USEC_TO_NSEC is the time between ticks in nsec assuming real ACTHZ and<span class=\"ts\"/>*/</span>", 
"<span class=\"comment\">/* a value TUSEC for TICK_USEC (can be set bij adjtimex)<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TICK_USEC_TO_NSEC\">TICK_USEC_TO_NSEC</a>(<a class=\"id\" href=\"#TUSEC\">TUSEC</a>) (<a class=\"id\" href=\"#SH_DIV\">SH_DIV</a> (<a class=\"id\" href=\"#TUSEC\">TUSEC</a> * <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a> * 1000, <a class=\"id\" href=\"#ACTHZ\">ACTHZ</a>, 8))", 
"", 
"<span class=\"comment\">/* some arch's have a small-data section that can be accessed register-relative</span>", 
"<span class=\"comment\"> * but that can only take up to, say, 4-byte variables. jiffies being part of</span>", 
"<span class=\"comment\"> * an 8-byte variable may not be correctly accessed unless we force the issue</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__jiffy_data\">__jiffy_data</a>  <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\".data\")))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The 64-bit value is not atomic - you MUST NOT read it</span>", 
"<span class=\"comment\"> * without sampling the sequence number in xtime_lock.</span>", 
"<span class=\"comment\"> * get_jiffies_64() will do this for you as appropriate.</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__jiffy_data\">__jiffy_data</a> <a class=\"id\" href=\"#jiffies_64\">jiffies_64</a>;", 
"extern unsigned long volatile <a class=\"id\" href=\"#__jiffy_data\">__jiffy_data</a> <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"#if (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> &lt; 64)", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#get_jiffies_64\">get_jiffies_64</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#get_jiffies_64\">get_jiffies_64</a>(void)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>These inlines deal with timer wrapping correctly. You are </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>strongly encouraged to use them</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1. Because people otherwise forget</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2. Because if the timer wrap changes in future you won't have to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   alter your driver code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * time_after(a,b) returns true if the time a is after time b.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do this with \"&lt;0\" and \"&gt;=0\" to only test the sign of the result. A</span>", 
"<span class=\"comment\"> * good compiler would generate better code (and a really good compiler</span>", 
"<span class=\"comment\"> * wouldn't care). Gcc is currently neither.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#typecheck\">typecheck</a>(unsigned long, <a class=\"id\" href=\"#a\">a</a>) && \\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#typecheck\">typecheck</a>(unsigned long, <a class=\"id\" href=\"#b\">b</a>) && \\", 
"<span class=\"ts\"/> ((long)(<a class=\"id\" href=\"#b\">b</a>) - (long)(<a class=\"id\" href=\"#a\">a</a>) &lt; 0))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#b\">b</a>,<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#typecheck\">typecheck</a>(unsigned long, <a class=\"id\" href=\"#a\">a</a>) && \\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#typecheck\">typecheck</a>(unsigned long, <a class=\"id\" href=\"#b\">b</a>) && \\", 
"<span class=\"ts\"/> ((long)(<a class=\"id\" href=\"#a\">a</a>) - (long)(<a class=\"id\" href=\"#b\">b</a>) >= 0))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#b\">b</a>,<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate whether a is in the range of [b, c].</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_in_range\">time_in_range</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>,<a class=\"id\" href=\"#c\">c</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>) && \\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#c\">c</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate whether a is in the range of [b, c).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_in_range_open\">time_in_range_open</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>,<a class=\"id\" href=\"#c\">c</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>) && \\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#c\">c</a>))", 
"", 
"<span class=\"comment\">/* Same as above, but does so with platform independent 64bit types.</span>", 
"<span class=\"comment\"> * These must be used when utilizing jiffies_64 (i.e. return value of</span>", 
"<span class=\"comment\"> * get_jiffies_64() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_after64\">time_after64</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#typecheck\">typecheck</a>(<a class=\"id\" href=\"#__u64\">__u64</a>, <a class=\"id\" href=\"#a\">a</a>) &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#typecheck\">typecheck</a>(<a class=\"id\" href=\"#__u64\">__u64</a>, <a class=\"id\" href=\"#b\">b</a>) && \\", 
"<span class=\"ts\"/> ((<a class=\"id\" href=\"#__s64\">__s64</a>)(<a class=\"id\" href=\"#b\">b</a>) - (<a class=\"id\" href=\"#__s64\">__s64</a>)(<a class=\"id\" href=\"#a\">a</a>) &lt; 0))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_before64\">time_before64</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><a class=\"id\" href=\"#time_after64\">time_after64</a>(<a class=\"id\" href=\"#b\">b</a>,<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_after_eq64\">time_after_eq64</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#typecheck\">typecheck</a>(<a class=\"id\" href=\"#__u64\">__u64</a>, <a class=\"id\" href=\"#a\">a</a>) && \\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#typecheck\">typecheck</a>(<a class=\"id\" href=\"#__u64\">__u64</a>, <a class=\"id\" href=\"#b\">b</a>) && \\", 
"<span class=\"ts\"/> ((<a class=\"id\" href=\"#__s64\">__s64</a>)(<a class=\"id\" href=\"#a\">a</a>) - (<a class=\"id\" href=\"#__s64\">__s64</a>)(<a class=\"id\" href=\"#b\">b</a>) >= 0))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_before_eq64\">time_before_eq64</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><a class=\"id\" href=\"#time_after_eq64\">time_after_eq64</a>(<a class=\"id\" href=\"#b\">b</a>,<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These four macros compare jiffies and 'a' for convenience.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* time_is_before_jiffies(a) return true if a is before jiffies */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_is_before_jiffies\">time_is_before_jiffies</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#a\">a</a>)", 
"", 
"<span class=\"comment\">/* time_is_after_jiffies(a) return true if a is after jiffies */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_is_after_jiffies\">time_is_after_jiffies</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#a\">a</a>)", 
"", 
"<span class=\"comment\">/* time_is_before_eq_jiffies(a) return true if a is before or equal to jiffies*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_is_before_eq_jiffies\">time_is_before_eq_jiffies</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#a\">a</a>)", 
"", 
"<span class=\"comment\">/* time_is_after_eq_jiffies(a) return true if a is after or equal to jiffies*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#time_is_after_eq_jiffies\">time_is_after_eq_jiffies</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#a\">a</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Have the 32 bit jiffies value wrap 5 minutes after boot</span>", 
"<span class=\"comment\"> * so jiffies wrap bugs show up earlier.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INITIAL_JIFFIES\">INITIAL_JIFFIES</a> ((unsigned long)(unsigned int) (-300*<a class=\"id\" href=\"#HZ\">HZ</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Change timeval to jiffies, trying to avoid the</span>", 
"<span class=\"comment\"> * most obvious overflows..</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * And some not so obvious.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that we don't want to return LONG_MAX, because</span>", 
"<span class=\"comment\"> * for various timeout reasons we often end up having</span>", 
"<span class=\"comment\"> * to wait \"jiffies+1\" in order to guarantee that we wait</span>", 
"<span class=\"comment\"> * at _least_ \"jiffies\" - so \"jiffies+1\" had better still</span>", 
"<span class=\"comment\"> * be positive.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a> ((<a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a> >> 1)-1)", 
"", 
"extern unsigned long <a class=\"id\" href=\"#preset_lpj\">preset_lpj</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We want to do realistic conversions of time so we need to use the same</span>", 
"<span class=\"comment\"> * values the update wall clock code uses as the jiffies size.  This value</span>", 
"<span class=\"comment\"> * is: TICK_NSEC (which is defined in timex.h).  This</span>", 
"<span class=\"comment\"> * is a constant and is in nanoseconds.  We will use scaled math</span>", 
"<span class=\"comment\"> * with a set of scales defined here as SEC_JIFFIE_SC,  USEC_JIFFIE_SC and</span>", 
"<span class=\"comment\"> * NSEC_JIFFIE_SC.  Note that these defines contain nothing but</span>", 
"<span class=\"comment\"> * constants and so are computed at compile time.  SHIFT_HZ (computed in</span>", 
"<span class=\"comment\"> * timex.h) adjusts the scaling for different HZ values.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * Scaled math???  What is that?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Scaled math is a way to do integer math on values that would,</span>", 
"<span class=\"comment\"> * otherwise, either overflow, underflow, or cause undesired div</span>", 
"<span class=\"comment\"> * instructions to appear in the execution path.  In short, we \"scale\"</span>", 
"<span class=\"comment\"> * up the operands so they take more bits (more precision, less</span>", 
"<span class=\"comment\"> * underflow), do the desired operation and then \"scale\" the result back</span>", 
"<span class=\"comment\"> * by the same amount.  If we do the scaling by shifting we avoid the</span>", 
"<span class=\"comment\"> * costly mpy and the dastardly div instructions.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * Suppose, for example, we want to convert from seconds to jiffies</span>", 
"<span class=\"comment\"> * where jiffies is defined in nanoseconds as NSEC_PER_JIFFIE.  The</span>", 
"<span class=\"comment\"> * simple math is: jiff = (sec * NSEC_PER_SEC) / NSEC_PER_JIFFIE; We</span>", 
"<span class=\"comment\"> * observe that (NSEC_PER_SEC / NSEC_PER_JIFFIE) is a constant which we</span>", 
"<span class=\"comment\"> * might calculate at compile time, however, the result will only have</span>", 
"<span class=\"comment\"> * about 3-4 bits of precision (less for smaller values of HZ).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So, we scale as follows:</span>", 
"<span class=\"comment\"> * jiff = (sec) * (NSEC_PER_SEC / NSEC_PER_JIFFIE);</span>", 
"<span class=\"comment\"> * jiff = ((sec) * ((NSEC_PER_SEC * SCALE)/ NSEC_PER_JIFFIE)) / SCALE;</span>", 
"<span class=\"comment\"> * Then we make SCALE a power of two so:</span>", 
"<span class=\"comment\"> * jiff = ((sec) * ((NSEC_PER_SEC &lt;&lt; SCALE)/ NSEC_PER_JIFFIE)) &gt;&gt; SCALE;</span>", 
"<span class=\"comment\"> * Now we define:</span>", 
"<span class=\"comment\"> * #define SEC_CONV = ((NSEC_PER_SEC &lt;&lt; SCALE)/ NSEC_PER_JIFFIE))</span>", 
"<span class=\"comment\"> * jiff = (sec * SEC_CONV) &gt;&gt; SCALE;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Often the math we use will expand beyond 32-bits so we tell C how to</span>", 
"<span class=\"comment\"> * do this and pass the 64-bit result of the mpy through the \"&gt;&gt; SCALE\"</span>", 
"<span class=\"comment\"> * which should take the result back to 32-bits.  We want this expansion</span>", 
"<span class=\"comment\"> * to capture as much precision as possible.  At the same time we don't</span>", 
"<span class=\"comment\"> * want to overflow so we pick the SCALE to avoid this.  In this file,</span>", 
"<span class=\"comment\"> * that means using a different scale for each range of HZ values (as</span>", 
"<span class=\"comment\"> * defined in timex.h).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For those who want to know, gcc will give a 64-bit result from a \"*\"</span>", 
"<span class=\"comment\"> * operator if the result is a long long AND at least one of the</span>", 
"<span class=\"comment\"> * operands is cast to long long (usually just prior to the \"*\" so as</span>", 
"<span class=\"comment\"> * not to confuse it into thinking it really has a 64-bit operand,</span>", 
"<span class=\"comment\"> * which, buy the way, it can do, but it takes more code and at least 2</span>", 
"<span class=\"comment\"> * mpys).</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * We also need to be aware that one second in nanoseconds is only a</span>", 
"<span class=\"comment\"> * couple of bits away from overflowing a 32-bit word, so we MUST use</span>", 
"<span class=\"comment\"> * 64-bits to get the full range time in nanoseconds.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Here are the scales we will use.  One for seconds, nanoseconds and</span>", 
"<span class=\"comment\"> * microseconds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Within the limits of cpp we do a rough cut at the SEC_JIFFIE_SC and</span>", 
"<span class=\"comment\"> * check if the sign bit is set.  If not, we bump the shift count by 1.</span>", 
"<span class=\"comment\"> * (Gets an extra bit of precision where we can use it.)</span>", 
"<span class=\"comment\"> * We know it is set for HZ = 1024 and HZ = 100 not for 1000.</span>", 
"<span class=\"comment\"> * Haven't tested others.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * Limits of cpp (for #if expressions) only long (no long long), but</span>", 
"<span class=\"comment\"> * then we only need the most signicant bit.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a> (31 - <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a>)", 
"#if !((((<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> << 2) / <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>) << (<a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a> - 2)) &amp; 0x80000000)", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a> (32 - <a class=\"id\" href=\"#SHIFT_HZ\">SHIFT_HZ</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NSEC_JIFFIE_SC\">NSEC_JIFFIE_SC</a> (<a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a> + 29)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USEC_JIFFIE_SC\">USEC_JIFFIE_SC</a> (<a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a> + 19)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEC_CONVERSION\">SEC_CONVERSION</a> ((unsigned long)((((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> << <a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a>) +\\", 
"                                <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a> -1) / (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NSEC_CONVERSION\">NSEC_CONVERSION</a> ((unsigned long)((((<a class=\"id\" href=\"#u64\">u64</a>)1 << <a class=\"id\" href=\"#NSEC_JIFFIE_SC\">NSEC_JIFFIE_SC</a>) +\\", 
"                                        <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a> -1) / (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USEC_CONVERSION\">USEC_CONVERSION</a>  \\", 
"                    ((unsigned long)((((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a> << <a class=\"id\" href=\"#USEC_JIFFIE_SC\">USEC_JIFFIE_SC</a>) +\\", 
"                                        <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a> -1) / (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>))", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * USEC_ROUND is used in the timeval to jiffie conversion.  See there</span>", 
"<span class=\"comment\"> * for more details.  It is the scaled resolution rounding value.  Note</span>", 
"<span class=\"comment\"> * that it is a 64-bit value.  Since, when it is applied, we are already</span>", 
"<span class=\"comment\"> * in jiffies (albit scaled), it is nothing but the bits we will shift</span>", 
"<span class=\"comment\"> * off.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USEC_ROUND\">USEC_ROUND</a> (<a class=\"id\" href=\"#u64\">u64</a>)(((<a class=\"id\" href=\"#u64\">u64</a>)1 << <a class=\"id\" href=\"#USEC_JIFFIE_SC\">USEC_JIFFIE_SC</a>) - 1)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The maximum jiffie value is (MAX_INT &gt;&gt; 1).  Here we translate that</span>", 
"<span class=\"comment\"> * into seconds.  The 64-bit case will overflow if we are not careful,</span>", 
"<span class=\"comment\"> * so use the messy SH_DIV macro to do it.  Still all constants.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> &lt; 64", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_SEC_IN_JIFFIES\">MAX_SEC_IN_JIFFIES</a> \\", 
"<span class=\"ts\"/>(long)((<a class=\"id\" href=\"#u64\">u64</a>)((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a> * <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>) / <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>)", 
"#else<span class=\"ts\"/><span class=\"comment\">/* take care of overflow on 64 bits machines */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_SEC_IN_JIFFIES\">MAX_SEC_IN_JIFFIES</a> \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#SH_DIV\">SH_DIV</a>((<a class=\"id\" href=\"#MAX_JIFFY_OFFSET\">MAX_JIFFY_OFFSET</a> >> <a class=\"id\" href=\"#SEC_JIFFIE_SC\">SEC_JIFFIE_SC</a>) * <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>, 1) - 1)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert various time units to each other:</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned int <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(const unsigned long <a class=\"id\" href=\"#j\">j</a>);", 
"extern unsigned int <a class=\"id\" href=\"#jiffies_to_usecs\">jiffies_to_usecs</a>(const unsigned long <a class=\"id\" href=\"#j\">j</a>);", 
"extern unsigned long <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(const unsigned int <a class=\"id\" href=\"#m\">m</a>);", 
"extern unsigned long <a class=\"id\" href=\"#usecs_to_jiffies\">usecs_to_jiffies</a>(const unsigned int <a class=\"id\" href=\"#u\">u</a>);", 
"extern unsigned long <a class=\"id\" href=\"#timespec_to_jiffies\">timespec_to_jiffies</a>(const struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#value\">value</a>);", 
"extern void <a class=\"id\" href=\"#jiffies_to_timespec\">jiffies_to_timespec</a>(const unsigned long <a class=\"id\" href=\"#jiffies\">jiffies</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#value\">value</a>);", 
"extern unsigned long <a class=\"id\" href=\"#timeval_to_jiffies\">timeval_to_jiffies</a>(const struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#value\">value</a>);", 
"extern void <a class=\"id\" href=\"#jiffies_to_timeval\">jiffies_to_timeval</a>(const unsigned long <a class=\"id\" href=\"#jiffies\">jiffies</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#value\">value</a>);", 
"extern <a class=\"id\" href=\"#clock_t\">clock_t</a> <a class=\"id\" href=\"#jiffies_to_clock_t\">jiffies_to_clock_t</a>(long <a class=\"id\" href=\"#x\">x</a>);", 
"extern unsigned long <a class=\"id\" href=\"#clock_t_to_jiffies\">clock_t_to_jiffies</a>(unsigned long <a class=\"id\" href=\"#x\">x</a>);", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#jiffies_64_to_clock_t\">jiffies_64_to_clock_t</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#x\">x</a>);", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec_to_clock_t\">nsec_to_clock_t</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#x\">x</a>);", 
"extern unsigned long <a class=\"id\" href=\"#nsecs_to_jiffies\">nsecs_to_jiffies</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIMESTAMP_SIZE\">TIMESTAMP_SIZE</a><span class=\"ts\"/>30", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/cd/d078e418a0761486f0c4a78db37f458fab62c2.xr', __xr_tmp);
