var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Intel SMP support routines.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(c) 1995 Alan Cox, Building #3 &lt;alan@lxorguk.ukuu.org.uk&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(c) 1998-99, 2000, 2009 Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *      (c) 2002,2003 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>i386 and x86_64 integration by Glauber Costa &lt;gcosta@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This code is released under the GNU General Public License version 2 or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>later.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mc146818rtc\">mc146818rtc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mtrr\">mtrr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu_context\">mmu_context</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Some notes on x86 processor bugs affecting SMP operation:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pentium, Pentium Pro, II, III (and all CPUs) have bugs.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The Linux implications for SMP are handled as follows:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pentium III / [Xeon]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>None of the E1AP-E3AP errata are visible to the user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>E1AP.<span class=\"ts\"/>see PII A1AP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>E2AP.<span class=\"ts\"/>see PII A2AP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>E3AP.<span class=\"ts\"/>see PII A3AP</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pentium II / [Xeon]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>None of the A1AP-A3AP errata are visible to the user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A1AP.<span class=\"ts\"/>see PPro 1AP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A2AP.<span class=\"ts\"/>see PPro 2AP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A3AP.<span class=\"ts\"/>see PPro 7AP</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pentium Pro</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>None of 1AP-9AP errata are visible to the normal user,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>except occasional delivery of 'spurious interrupt' as trap #15.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is very rare and a non-problem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1AP.<span class=\"ts\"/>Linux maps APIC as non-cacheable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2AP.<span class=\"ts\"/>worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>3AP.<span class=\"ts\"/>fixed in C0 and above steppings microcode update.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Linux does not use excessive STARTUP_IPIs.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>4AP.<span class=\"ts\"/>worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>5AP.<span class=\"ts\"/>symmetric IO mode (normal Linux operation) not affected.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>'noapic' mode has vector 0xf filled out properly.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>6AP.<span class=\"ts\"/>'noapic' mode might be affected - fixed in later steppings</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>7AP.<span class=\"ts\"/>We do not assume writes to the LVT deassering IRQs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>8AP.<span class=\"ts\"/>We do not enable low power mode (deep sleep) during MP bootup</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>9AP.<span class=\"ts\"/>We do not use mixed mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pentium</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>There is a marginal case where REP MOVS on 100MHz SMP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>machines with B stepping processors can fail. XXX should provide</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>an L1cache=Writethrough or L1cache=off option.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>B stepping CPUs may hang. There are hardware work arounds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for this. We warn about it in case your board doesn't have the work</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>arounds. Basically that's so I can tell anyone with a B stepping</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CPU and SMP problems \"tough\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Specific items [From Pentium Processor Specification Update]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1AP.<span class=\"ts\"/>Linux doesn't use remote read</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2AP.<span class=\"ts\"/>Linux doesn't trust APIC errors</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>3AP.<span class=\"ts\"/>We work around this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>4AP.<span class=\"ts\"/>Linux never generated 3 interrupts of the same priority</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>to cause a lost local interrupt.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>5AP.<span class=\"ts\"/>Remote read is never used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>6AP.<span class=\"ts\"/>not affected - worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>7AP.<span class=\"ts\"/>not affected - worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>8AP.<span class=\"ts\"/>worked around in hardware - we get explicit CS errors if not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>9AP.<span class=\"ts\"/>only 'noapic' mode affected. Might generate spurious</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interrupts, we log only the first one and count the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>rest silently.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>10AP.<span class=\"ts\"/>not affected - worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>11AP.<span class=\"ts\"/>Linux reads the APIC between writes to avoid this, as per</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>the documentation. Make sure you preserve this as it affects</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>the C stepping chips too.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>12AP.<span class=\"ts\"/>not affected - worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>13AP.<span class=\"ts\"/>not affected - worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>14AP.<span class=\"ts\"/>we always deassert INIT during bootup</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>15AP.<span class=\"ts\"/>not affected - worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>16AP.<span class=\"ts\"/>not affected - worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>17AP.<span class=\"ts\"/>not affected - worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>18AP.<span class=\"ts\"/>not affected - worked around in hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>19AP.<span class=\"ts\"/>not affected - worked around in BIOS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If this sounds worrying believe me these bugs are either ___RARE___,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or are signal timing bugs worked around in hardware and there's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>about nothing of note with C stepping upwards.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * this function sends a 'reschedule' IPI to another CPU.</span>", 
"<span class=\"comment\"> * it goes straight through and wastes no time serializing</span>", 
"<span class=\"comment\"> * anything. Worst case is that we lose a reschedule ...</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#native_smp_send_reschedule\">native_smp_send_reschedule</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cpu_is_offline\">cpu_is_offline</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#RESCHEDULE_VECTOR\">RESCHEDULE_VECTOR</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#native_send_call_func_single_ipi\">native_send_call_func_single_ipi</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#CALL_FUNCTION_SINGLE_VECTOR\">CALL_FUNCTION_SINGLE_VECTOR</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#native_send_call_func_ipi\">native_send_call_func_ipi</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#allbutself\">allbutself</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#allbutself\">allbutself</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#CALL_FUNCTION_VECTOR\">CALL_FUNCTION_VECTOR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#allbutself\">allbutself</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#allbutself\">allbutself</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#allbutself\">allbutself</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#cpu_callout_mask\">cpu_callout_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_allbutself\">send_IPI_allbutself</a>(<a class=\"id\" href=\"#CALL_FUNCTION_VECTOR\">CALL_FUNCTION_VECTOR</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#CALL_FUNCTION_VECTOR\">CALL_FUNCTION_VECTOR</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#allbutself\">allbutself</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * this function calls the 'stop' function on all other CPUs in the system.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#smp_reboot_interrupt\">smp_reboot_interrupt</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_enter\">irq_enter</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stop_this_cpu\">stop_this_cpu</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_exit\">irq_exit</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#native_smp_send_stop\">native_smp_send_stop</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#wait\">wait</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reboot_force\">reboot_force</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use an own vector here because smp_call_function</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * does lots of things not suitable in a panic situation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On most systems we could also use an NMI here,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but there are a few systems around where NMI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is problematic so stay with an non NMI for now</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (this implies we cannot stop CPUs spinning with irq off</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * currently)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_allbutself\">send_IPI_allbutself</a>(<a class=\"id\" href=\"#REBOOT_VECTOR\">REBOOT_VECTOR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't wait longer than a second */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a> = <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() &gt; 1 && <a class=\"id\" href=\"#wait\">wait</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_local_APIC\">disable_local_APIC</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reschedule call back. Nothing to do,</span>", 
"<span class=\"comment\"> * all the work is done automatically when</span>", 
"<span class=\"comment\"> * we return from the interrupt.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#smp_reschedule_interrupt\">smp_reschedule_interrupt</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_irq_stat\">inc_irq_stat</a>(<a class=\"id\" href=\"#irq_resched_count\">irq_resched_count</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * KVM uses this interrupt to force a cpu out of guest mode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"}", 
"", 
"void <a class=\"id\" href=\"#smp_call_function_interrupt\">smp_call_function_interrupt</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_enter\">irq_enter</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_smp_call_function_interrupt\">generic_smp_call_function_interrupt</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_irq_stat\">inc_irq_stat</a>(<a class=\"id\" href=\"#irq_call_count\">irq_call_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_exit\">irq_exit</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#smp_call_function_single_interrupt\">smp_call_function_single_interrupt</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_enter\">irq_enter</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_smp_call_function_single_interrupt\">generic_smp_call_function_single_interrupt</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_irq_stat\">inc_irq_stat</a>(<a class=\"id\" href=\"#irq_call_count\">irq_call_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_exit\">irq_exit</a>();", 
"}", 
"", 
"struct <a class=\"id\" href=\"#smp_ops\">smp_ops</a> <a class=\"id\" href=\"#smp_ops\">smp_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smp_prepare_boot_cpu\">smp_prepare_boot_cpu</a><span class=\"ts\"/>= <a class=\"id\" href=\"#native_smp_prepare_boot_cpu\">native_smp_prepare_boot_cpu</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smp_prepare_cpus\">smp_prepare_cpus</a><span class=\"ts\"/>= <a class=\"id\" href=\"#native_smp_prepare_cpus\">native_smp_prepare_cpus</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smp_cpus_done\">smp_cpus_done</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#native_smp_cpus_done\">native_smp_cpus_done</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smp_send_stop\">smp_send_stop</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#native_smp_send_stop\">native_smp_send_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smp_send_reschedule\">smp_send_reschedule</a><span class=\"ts\"/>= <a class=\"id\" href=\"#native_smp_send_reschedule\">native_smp_send_reschedule</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cpu_up\">cpu_up</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#native_cpu_up\">native_cpu_up</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cpu_die\">cpu_die</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#native_cpu_die\">native_cpu_die</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cpu_disable\">cpu_disable</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#native_cpu_disable\">native_cpu_disable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#play_dead\">play_dead</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#native_play_dead\">native_play_dead</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#send_call_func_ipi\">send_call_func_ipi</a><span class=\"ts\"/>= <a class=\"id\" href=\"#native_send_call_func_ipi\">native_send_call_func_ipi</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#send_call_func_single_ipi\">send_call_func_single_ipi</a> = <a class=\"id\" href=\"#native_send_call_func_single_ipi\">native_send_call_func_single_ipi</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#smp_ops\">smp_ops</a>);", 
];
xr_frag_insert('l/ce/1ed6a01ae7e1514a0348577933e385ffeee020.xr', __xr_tmp);
