var __xr_tmp = [
"<span class=\"comment\"> * generating coredump, we need some margin. The number of extra sections is</span>", 
"<span class=\"comment\"> * 1-3 now and depends on arch. We use \"5\" as safe margin, here.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAPCOUNT_ELF_CORE_MARGIN\">MAPCOUNT_ELF_CORE_MARGIN</a><span class=\"ts\"/>(5)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_MAX_MAP_COUNT\">DEFAULT_MAX_MAP_COUNT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a> - <a class=\"id\" href=\"#MAPCOUNT_ELF_CORE_MARGIN\">MAPCOUNT_ELF_CORE_MARGIN</a>)", 
"", 
"extern int <a class=\"id\" href=\"#sysctl_max_map_count\">sysctl_max_map_count</a>;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#aio\">aio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"extern void <a class=\"id\" href=\"#arch_pick_mmap_layout\">arch_pick_mmap_layout</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"extern unsigned long", 
"<a class=\"id\" href=\"#arch_get_unmapped_area\">arch_get_unmapped_area</a>(struct <a class=\"id\" href=\"#file\">file</a> *, unsigned long, unsigned long,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned long, unsigned long);", 
"extern unsigned long", 
"<a class=\"id\" href=\"#arch_get_unmapped_area_topdown\">arch_get_unmapped_area_topdown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern void <a class=\"id\" href=\"#arch_unmap_area\">arch_unmap_area</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *, unsigned long);", 
"extern void <a class=\"id\" href=\"#arch_unmap_area_topdown\">arch_unmap_area_topdown</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *, unsigned long);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_pick_mmap_layout\">arch_pick_mmap_layout</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"extern void <a class=\"id\" href=\"#set_dumpable\">set_dumpable</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"extern int <a class=\"id\" href=\"#get_dumpable\">get_dumpable</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"comment\">/* mm flags */</span>", 
"<span class=\"comment\">/* dumpable bits */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMPABLE\">MMF_DUMPABLE</a>      0  <span class=\"comment\">/* core dump is permitted */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_SECURELY\">MMF_DUMP_SECURELY</a> 1  <span class=\"comment\">/* core file is readable only by root */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMPABLE_BITS\">MMF_DUMPABLE_BITS</a> 2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMPABLE_MASK\">MMF_DUMPABLE_MASK</a> ((1 << <a class=\"id\" href=\"#MMF_DUMPABLE_BITS\">MMF_DUMPABLE_BITS</a>) - 1)", 
"", 
"<span class=\"comment\">/* coredump filter bits */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_ANON_PRIVATE\">MMF_DUMP_ANON_PRIVATE</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_ANON_SHARED\">MMF_DUMP_ANON_SHARED</a><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_MAPPED_PRIVATE\">MMF_DUMP_MAPPED_PRIVATE</a><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_MAPPED_SHARED\">MMF_DUMP_MAPPED_SHARED</a><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_ELF_HEADERS\">MMF_DUMP_ELF_HEADERS</a><span class=\"ts\"/>6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_HUGETLB_PRIVATE\">MMF_DUMP_HUGETLB_PRIVATE</a> 7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_HUGETLB_SHARED\">MMF_DUMP_HUGETLB_SHARED</a>  8", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_FILTER_SHIFT\">MMF_DUMP_FILTER_SHIFT</a><span class=\"ts\"/><a class=\"id\" href=\"#MMF_DUMPABLE_BITS\">MMF_DUMPABLE_BITS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_FILTER_BITS\">MMF_DUMP_FILTER_BITS</a><span class=\"ts\"/>7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_FILTER_MASK\">MMF_DUMP_FILTER_MASK</a> \\", 
"<span class=\"ts\"/>(((1 << <a class=\"id\" href=\"#MMF_DUMP_FILTER_BITS\">MMF_DUMP_FILTER_BITS</a>) - 1) << <a class=\"id\" href=\"#MMF_DUMP_FILTER_SHIFT\">MMF_DUMP_FILTER_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_FILTER_DEFAULT\">MMF_DUMP_FILTER_DEFAULT</a> \\", 
"<span class=\"ts\"/>((1 << <a class=\"id\" href=\"#MMF_DUMP_ANON_PRIVATE\">MMF_DUMP_ANON_PRIVATE</a>) |<span class=\"ts\"/>(1 << <a class=\"id\" href=\"#MMF_DUMP_ANON_SHARED\">MMF_DUMP_ANON_SHARED</a>) |\\", 
"<span class=\"ts\"/> (1 << <a class=\"id\" href=\"#MMF_DUMP_HUGETLB_PRIVATE\">MMF_DUMP_HUGETLB_PRIVATE</a>) | <a class=\"id\" href=\"#MMF_DUMP_MASK_DEFAULT_ELF\">MMF_DUMP_MASK_DEFAULT_ELF</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS\">CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_MASK_DEFAULT_ELF\">MMF_DUMP_MASK_DEFAULT_ELF</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#MMF_DUMP_ELF_HEADERS\">MMF_DUMP_ELF_HEADERS</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_DUMP_MASK_DEFAULT_ELF\">MMF_DUMP_MASK_DEFAULT_ELF</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* leave room for more dump flags */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_VM_MERGEABLE\">MMF_VM_MERGEABLE</a><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"comment\">/* KSM may merge identical pages */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMF_INIT_MASK\">MMF_INIT_MASK</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#MMF_DUMPABLE_MASK\">MMF_DUMPABLE_MASK</a> | <a class=\"id\" href=\"#MMF_DUMP_FILTER_MASK\">MMF_DUMP_FILTER_MASK</a>)", 
"", 
"struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_sigaction\">k_sigaction</a><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#_NSIG\">_NSIG</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#siglock\">siglock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#signalfd_wqh\">signalfd_wqh</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pacct_struct\">pacct_struct</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac_flag\">ac_flag</a>;", 
"<span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac_exitcode\">ac_exitcode</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac_mem\">ac_mem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac_utime\">ac_utime</a>, <a class=\"id\" href=\"#ac_stime\">ac_stime</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac_minflt\">ac_minflt</a>, <a class=\"id\" href=\"#ac_majflt\">ac_majflt</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#cpu_itimer\">cpu_itimer</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#incr\">incr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#incr_error\">incr_error</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct task_cputime - collected CPU time counts</span>", 
"<span class=\"comment\"> * @utime:<span class=\"ts\"/><span class=\"ts\"/>time spent in user mode, in &amp;cputime_t units</span>", 
"<span class=\"comment\"> * @stime:<span class=\"ts\"/><span class=\"ts\"/>time spent in kernel mode, in &amp;cputime_t units</span>", 
"<span class=\"comment\"> * @sum_exec_runtime:<span class=\"ts\"/>total time spent on the CPU, in nanoseconds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure groups together three kinds of CPU time that are</span>", 
"<span class=\"comment\"> * tracked for threads and thread groups.  Most things considering</span>", 
"<span class=\"comment\"> * CPU time want to group these counts together and treat all three</span>", 
"<span class=\"comment\"> * of them in parallel.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#utime\">utime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#stime\">stime</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>;", 
"};", 
"<span class=\"comment\">/* Alternate field names when used to cache expirations. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#prof_exp\">prof_exp</a><span class=\"ts\"/><a class=\"id\" href=\"#stime\">stime</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virt_exp\">virt_exp</a><span class=\"ts\"/><a class=\"id\" href=\"#utime\">utime</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sched_exp\">sched_exp</a><span class=\"ts\"/><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_CPUTIME\">INIT_CPUTIME</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#stime\">stime</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> = 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable preemption until the scheduler is running.</span>", 
"<span class=\"comment\"> * Reset by start_kernel()-&gt;sched_init()-&gt;init_idle().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We include PREEMPT_ACTIVE to avoid cond_resched() from working</span>", 
"<span class=\"comment\"> * before the scheduler is active -- see should_resched().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_PREEMPT_COUNT\">INIT_PREEMPT_COUNT</a><span class=\"ts\"/>(1 + <a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct thread_group_cputimer - thread group interval timer counts</span>", 
"<span class=\"comment\"> * @cputime:<span class=\"ts\"/><span class=\"ts\"/>thread group interval timers.</span>", 
"<span class=\"comment\"> * @running:<span class=\"ts\"/><span class=\"ts\"/>non-zero when there are timers running and</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>@cputime receives updates.</span>", 
"<span class=\"comment\"> * @lock:<span class=\"ts\"/><span class=\"ts\"/>lock for fields in this struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure contains the version of task_cputime, above, that is</span>", 
"<span class=\"comment\"> * used for thread group CPU timer calculations.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#thread_group_cputimer\">thread_group_cputimer</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#cputime\">cputime</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#running\">running</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE! \"signal_struct\" does not have it's own</span>", 
"<span class=\"comment\"> * locking, because a shared signal_struct always</span>", 
"<span class=\"comment\"> * implies a shared sighand_struct, so locking</span>", 
"<span class=\"comment\"> * sighand_struct is always a proper superset of</span>", 
"<span class=\"comment\"> * the locking of signal_struct.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigcnt\">sigcnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#live\">live</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_threads\">nr_threads</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#wait_chldexit\">wait_chldexit</a>;<span class=\"ts\"/><span class=\"comment\">/* for wait4() */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* current thread group signal load-balancing target: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#curr_target\">curr_target</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* shared signal handling: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigpending\">sigpending</a><span class=\"ts\"/><a class=\"id\" href=\"#shared_pending\">shared_pending</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* thread group exit support */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* overloaded:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - notify group_exit_task when -&gt;count is equal to notify_count</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - everyone except group_exit_task is stopped during signal delivery</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   of fatal signals, group_exit_task processes the signal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notify_count\">notify_count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#group_exit_task\">group_exit_task</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* thread group stop support, overloads group_exit_code too */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>; <span class=\"comment\">/* see SIGNAL_* flags below */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* POSIX.1b Interval Timers */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#posix_timers\">posix_timers</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ITIMER_REAL timer for the process */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> <a class=\"id\" href=\"#real_timer\">real_timer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#leader_pid\">leader_pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#it_real_incr\">it_real_incr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ITIMER_PROF and ITIMER_VIRTUAL timers for the process, we use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPUCLOCK_PROF and CPUCLOCK_VIRT for indexing array as these</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * values are defined to 0 and 1 respectively</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_itimer\">cpu_itimer</a> <a class=\"id\" href=\"#it\">it</a>[2];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thread group totals for process CPU timers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See thread_group_cputimer(), et al, for details.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_group_cputimer\">thread_group_cputimer</a> <a class=\"id\" href=\"#cputimer\">cputimer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Earliest-expiration cache. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>[3];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#tty_old_pgrp\">tty_old_pgrp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* boolean value for session group leader */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#leader\">leader</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>; <span class=\"comment\">/* NULL if no tty */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cumulative resource counters for dead threads in the group,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and for reaped dead child processes forked by this group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Live threads maintain their own counters and add to these</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in __exit_signal, except for the group leader.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#cutime\">cutime</a>, <a class=\"id\" href=\"#cstime\">cstime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#gtime\">gtime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cgtime\">cgtime</a>;", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_VIRT_CPU_ACCOUNTING\">CONFIG_VIRT_CPU_ACCOUNTING</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#prev_utime\">prev_utime</a>, <a class=\"id\" href=\"#prev_stime\">prev_stime</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nvcsw\">nvcsw</a>, <a class=\"id\" href=\"#nivcsw\">nivcsw</a>, <a class=\"id\" href=\"#cnvcsw\">cnvcsw</a>, <a class=\"id\" href=\"#cnivcsw\">cnivcsw</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_flt\">min_flt</a>, <a class=\"id\" href=\"#maj_flt\">maj_flt</a>, <a class=\"id\" href=\"#cmin_flt\">cmin_flt</a>, <a class=\"id\" href=\"#cmaj_flt\">cmaj_flt</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#inblock\">inblock</a>, <a class=\"id\" href=\"#oublock\">oublock</a>, <a class=\"id\" href=\"#cinblock\">cinblock</a>, <a class=\"id\" href=\"#coublock\">coublock</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#maxrss\">maxrss</a>, <a class=\"id\" href=\"#cmaxrss\">cmaxrss</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_io_accounting\">task_io_accounting</a> <a class=\"id\" href=\"#ioac\">ioac</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cumulative ns of schedule CPU time fo dead threads in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group, not including a zombie group leader, (This only differs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from jiffies_to_ns(utime + stime) if sched_clock uses something</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * other than jiffies.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#sum_sched_runtime\">sum_sched_runtime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't bother to synchronize most readers of this at all,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because there is no reader checking a limit that actually needs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to get both rlim_cur and rlim_max atomically, and either one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * alone is a single word that can safely be read normally.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * getrlimit/setrlimit use task_lock(current-&gt;group_leader) to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * protect this instead of the siglock, because they really</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have no need to disable irqs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rlimit\">rlimit</a> <a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIM_NLIMITS\">RLIM_NLIMITS</a>];", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BSD_PROCESS_ACCT\">CONFIG_BSD_PROCESS_ACCT</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pacct_struct\">pacct_struct</a> <a class=\"id\" href=\"#pacct\">pacct</a>;<span class=\"ts\"/><span class=\"comment\">/* per-process accounting information */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TASKSTATS\">CONFIG_TASKSTATS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#taskstats\">taskstats</a> *<a class=\"id\" href=\"#stats\">stats</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#audit_tty\">audit_tty</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_audit_buf\">tty_audit_buf</a> *<a class=\"id\" href=\"#tty_audit_buf\">tty_audit_buf</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oom_adj\">oom_adj</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* OOM kill score adjustment (bit shift) */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oom_score_adj\">oom_score_adj</a>;<span class=\"ts\"/><span class=\"comment\">/* OOM kill score adjustment */</span>", 
"};", 
"", 
"<span class=\"comment\">/* Context switch must be unlocked if interrupts are to be enabled */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_INTERRUPTS_ON_CTXSW\">__ARCH_WANT_INTERRUPTS_ON_CTXSW</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__ARCH_WANT_UNLOCKED_CTXSW\">__ARCH_WANT_UNLOCKED_CTXSW</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bits in flags field of signal_struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIGNAL_STOP_STOPPED\">SIGNAL_STOP_STOPPED</a><span class=\"ts\"/>0x00000001 <span class=\"comment\">/* job control stop in effect */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIGNAL_STOP_DEQUEUED\">SIGNAL_STOP_DEQUEUED</a><span class=\"ts\"/>0x00000002 <span class=\"comment\">/* stop signal dequeued */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIGNAL_STOP_CONTINUED\">SIGNAL_STOP_CONTINUED</a><span class=\"ts\"/>0x00000004 <span class=\"comment\">/* SIGCONT since WCONTINUED reap */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIGNAL_GROUP_EXIT\">SIGNAL_GROUP_EXIT</a><span class=\"ts\"/>0x00000008 <span class=\"comment\">/* group exit in progress */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pending notifications to parent.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIGNAL_CLD_STOPPED\">SIGNAL_CLD_STOPPED</a><span class=\"ts\"/>0x00000010", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIGNAL_CLD_CONTINUED\">SIGNAL_CLD_CONTINUED</a><span class=\"ts\"/>0x00000020", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIGNAL_CLD_MASK\">SIGNAL_CLD_MASK</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SIGNAL_CLD_STOPPED\">SIGNAL_CLD_STOPPED</a>|<a class=\"id\" href=\"#SIGNAL_CLD_CONTINUED\">SIGNAL_CLD_CONTINUED</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIGNAL_UNKILLABLE\">SIGNAL_UNKILLABLE</a><span class=\"ts\"/>0x00000040 <span class=\"comment\">/* for init: ignore fatal signals */</span>", 
"", 
"<span class=\"comment\">/* If true, all threads except -&gt;group_exit_task have pending SIGKILL */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#signal_group_exit\">signal_group_exit</a>(const struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>return<span class=\"ts\"/>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGNAL_GROUP_EXIT\">SIGNAL_GROUP_EXIT</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_exit_task\">group_exit_task</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some day this will be a full-fledged user tracking system..</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#user_struct\">user_struct</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#__count\">__count</a>;<span class=\"ts\"/><span class=\"comment\">/* reference count */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#processes\">processes</a>;<span class=\"ts\"/><span class=\"comment\">/* How many processes does this user have? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#files\">files</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* How many open files does this user have? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#sigpending\">sigpending</a>;<span class=\"ts\"/><span class=\"comment\">/* How many pending signals does this user have? */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INOTIFY_USER\">CONFIG_INOTIFY_USER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#inotify_watches\">inotify_watches</a>; <span class=\"comment\">/* How many inotify watches does this user have? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#inotify_devs\">inotify_devs</a>;<span class=\"ts\"/><span class=\"comment\">/* How many inotify devs does this user have opened? */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EPOLL\">CONFIG_EPOLL</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#epoll_watches\">epoll_watches</a>;<span class=\"ts\"/><span class=\"comment\">/* The number of file descriptors currently watched */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_POSIX_MQUEUE\">CONFIG_POSIX_MQUEUE</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* protected by mq_lock<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mq_bytes\">mq_bytes</a>;<span class=\"ts\"/><span class=\"comment\">/* How many bytes can be allocated to mqueue? */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#locked_shm\">locked_shm</a>; <span class=\"comment\">/* How many pages of mlocked shm ? */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#uid_keyring\">uid_keyring</a>;<span class=\"ts\"/><span class=\"comment\">/* UID specific keyring */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#session_keyring\">session_keyring</a>;<span class=\"ts\"/><span class=\"comment\">/* UID's default session keyring */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hash table maintenance information */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#uidhash_node\">uidhash_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_namespace\">user_namespace</a> *<a class=\"id\" href=\"#user_ns\">user_ns</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#locked_vm\">locked_vm</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#uids_sysfs_init\">uids_sysfs_init</a>(void);", 
"", 
"extern struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#find_user\">find_user</a>(<a class=\"id\" href=\"#uid_t\">uid_t</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#user_struct\">user_struct</a> <a class=\"id\" href=\"#root_user\">root_user</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_USER\">INIT_USER</a> (&amp;<a class=\"id\" href=\"#root_user\">root_user</a>)", 
"", 
"", 
"struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"struct <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TASK_DELAY_ACCT\">CONFIG_TASK_DELAY_ACCT</a>)", 
"struct <a class=\"id\" href=\"#sched_info\">sched_info</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* cumulative counters */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pcount\">pcount</a>;<span class=\"ts\"/>      <span class=\"comment\">/* # of times run on this cpu */</span>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#run_delay\">run_delay</a>; <span class=\"comment\">/* time spent waiting on a runqueue */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* timestamps */</span>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#last_arrival\">last_arrival</a>,<span class=\"comment\">/* when we last ran on a cpu */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#last_queued\">last_queued</a>;<span class=\"ts\"/><span class=\"comment\">/* when we were last queued to run */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* BKL stats */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bkl_count\">bkl_count</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* defined(CONFIG_SCHEDSTATS) || defined(CONFIG_TASK_DELAY_ACCT) */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TASK_DELAY_ACCT\">CONFIG_TASK_DELAY_ACCT</a>", 
"struct <a class=\"id\" href=\"#task_delay_info\">task_delay_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"comment\">/* Private per-task flags */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For each stat XXX, add following, aligned appropriately</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct timespec XXX_start, XXX_end;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * u64 XXX_delay;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * u32 XXX_count;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Atomicity of updates to XXX_delay, XXX_count protected by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single lock above (split into XXX_lock if contention is an issue).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX_count is incremented on every XXX operation, the delay</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * associated with the operation is added to XXX_delay.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX_delay contains the accumulated delay time in nanoseconds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#blkio_start\">blkio_start</a>, <a class=\"id\" href=\"#blkio_end\">blkio_end</a>;<span class=\"ts\"/><span class=\"comment\">/* Shared by blkio, swapin */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#blkio_delay\">blkio_delay</a>;<span class=\"ts\"/><span class=\"comment\">/* wait for sync block io completion */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#swapin_delay\">swapin_delay</a>;<span class=\"ts\"/><span class=\"comment\">/* wait for swapin block io completion */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#blkio_count\">blkio_count</a>;<span class=\"ts\"/><span class=\"comment\">/* total count of the number of sync block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* io operations performed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#swapin_count\">swapin_count</a>;<span class=\"ts\"/><span class=\"comment\">/* total count of the number of swapin block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* io operations performed */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#freepages_start\">freepages_start</a>, <a class=\"id\" href=\"#freepages_end\">freepages_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#freepages_delay\">freepages_delay</a>;<span class=\"ts\"/><span class=\"comment\">/* wait for memory reclaim */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#freepages_count\">freepages_count</a>;<span class=\"ts\"/><span class=\"comment\">/* total count of memory reclaim */</span>", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_TASK_DELAY_ACCT */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sched_info_on\">sched_info_on</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/>return 1;", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TASK_DELAY_ACCT\">CONFIG_TASK_DELAY_ACCT</a>)", 
"<span class=\"ts\"/>extern int <a class=\"id\" href=\"#delayacct_on\">delayacct_on</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#delayacct_on\">delayacct_on</a>;", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CPU_IDLE\">CPU_IDLE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CPU_NOT_IDLE\">CPU_NOT_IDLE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CPU_NEWLY_IDLE\">CPU_NEWLY_IDLE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sched-domains (multiprocessor balancing) declarations:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Increase resolution of nice-level calculations:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCHED_LOAD_SHIFT\">SCHED_LOAD_SHIFT</a><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a><span class=\"ts\"/>(1L << <a class=\"id\" href=\"#SCHED_LOAD_SHIFT\">SCHED_LOAD_SHIFT</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCHED_LOAD_SCALE_FUZZ\">SCHED_LOAD_SCALE_FUZZ</a><span class=\"ts\"/><a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a><span class=\"ts\"/><span class=\"ts\"/>0x0001<span class=\"ts\"/><span class=\"comment\">/* Do load balancing on this domain. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_BALANCE_NEWIDLE\">SD_BALANCE_NEWIDLE</a><span class=\"ts\"/>0x0002<span class=\"ts\"/><span class=\"comment\">/* Balance when about to become idle */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_BALANCE_EXEC\">SD_BALANCE_EXEC</a><span class=\"ts\"/><span class=\"ts\"/>0x0004<span class=\"ts\"/><span class=\"comment\">/* Balance on exec */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_BALANCE_FORK\">SD_BALANCE_FORK</a><span class=\"ts\"/><span class=\"ts\"/>0x0008<span class=\"ts\"/><span class=\"comment\">/* Balance on fork, clone */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_BALANCE_WAKE\">SD_BALANCE_WAKE</a><span class=\"ts\"/><span class=\"ts\"/>0x0010  <span class=\"comment\">/* Balance on wakeup */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_WAKE_AFFINE\">SD_WAKE_AFFINE</a><span class=\"ts\"/><span class=\"ts\"/>0x0020<span class=\"ts\"/><span class=\"comment\">/* Wake task to waking CPU */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_PREFER_LOCAL\">SD_PREFER_LOCAL</a><span class=\"ts\"/><span class=\"ts\"/>0x0040  <span class=\"comment\">/* Prefer to keep tasks local to this domain */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a><span class=\"ts\"/>0x0080<span class=\"ts\"/><span class=\"comment\">/* Domain members share cpu power */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a><span class=\"ts\"/>0x0100<span class=\"ts\"/><span class=\"comment\">/* Balance for power savings */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_SHARE_PKG_RESOURCES\">SD_SHARE_PKG_RESOURCES</a><span class=\"ts\"/>0x0200<span class=\"ts\"/><span class=\"comment\">/* Domain members share cpu pkg resources */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_SERIALIZE\">SD_SERIALIZE</a><span class=\"ts\"/><span class=\"ts\"/>0x0400<span class=\"ts\"/><span class=\"comment\">/* Only a single load balancing instance */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_ASYM_PACKING\">SD_ASYM_PACKING</a><span class=\"ts\"/><span class=\"ts\"/>0x0800  <span class=\"comment\">/* Place busy groups earlier in the domain */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_PREFER_SIBLING\">SD_PREFER_SIBLING</a><span class=\"ts\"/>0x1000<span class=\"ts\"/><span class=\"comment\">/* Prefer to place tasks in a sibling domain */</span>", 
"", 
"enum <a class=\"id\" href=\"#powersavings_balance_level\">powersavings_balance_level</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#POWERSAVINGS_BALANCE_NONE\">POWERSAVINGS_BALANCE_NONE</a> = 0,  <span class=\"comment\">/* No power saving load balance */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#POWERSAVINGS_BALANCE_BASIC\">POWERSAVINGS_BALANCE_BASIC</a>,<span class=\"ts\"/><span class=\"comment\">/* Fill one thread/core/package</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * first for long running threads</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#POWERSAVINGS_BALANCE_WAKEUP\">POWERSAVINGS_BALANCE_WAKEUP</a>,<span class=\"ts\"/><span class=\"comment\">/* Also bias task wakeups to semi-idle</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cpu package for power savings</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAX_POWERSAVINGS_BALANCE_LEVELS\">MAX_POWERSAVINGS_BALANCE_LEVELS</a>", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a>, <a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sd_balance_for_mc_power\">sd_balance_for_mc_power</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SD_PREFER_SIBLING\">SD_PREFER_SIBLING</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sd_balance_for_package_power\">sd_balance_for_package_power</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a> | <a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SD_PREFER_SIBLING\">SD_PREFER_SIBLING</a>;", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_sd_sibiling_asym_packing\">arch_sd_sibiling_asym_packing</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Optimise SD flags for power savings:</span>", 
"<span class=\"comment\"> * SD_BALANCE_NEWIDLE helps agressive task consolidation and power savings.</span>", 
"<span class=\"comment\"> * Keep default SD flags if sched_{smt,mc}_power_saving=0</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sd_power_saving_flags\">sd_power_saving_flags</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a> | <a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SD_BALANCE_NEWIDLE\">SD_BALANCE_NEWIDLE</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#sched_group\">sched_group</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#next\">next</a>;<span class=\"ts\"/><span class=\"comment\">/* Must be a circular list */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU power of this group, SCHED_LOAD_SCALE being max power for a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu_power\">cpu_power</a>, <a class=\"id\" href=\"#cpu_power_orig\">cpu_power_orig</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The CPUs this group covers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: this field is variable length. (Allocated dynamically</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by attaching extra space to the end of the structure,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * depending on how many CPUs the kernel has booted up with)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is also be embedded into static data structures at build</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time. (See 'struct static_sched_group' in kernel/sched.c)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cpumask\">cpumask</a>[0];", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#sg\">sg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>);", 
"}", 
"", 
"enum <a class=\"id\" href=\"#sched_domain_level\">sched_domain_level</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_LV_NONE\">SD_LV_NONE</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_LV_SIBLING\">SD_LV_SIBLING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_LV_MC\">SD_LV_MC</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_LV_CPU\">SD_LV_CPU</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_LV_NODE\">SD_LV_NODE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_LV_ALLNODES\">SD_LV_ALLNODES</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_LV_MAX\">SD_LV_MAX</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#relax_domain_level\">relax_domain_level</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_ATTR_INIT\">SD_ATTR_INIT</a><span class=\"ts\"/>(struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a>) {<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#relax_domain_level\">relax_domain_level</a> = -1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* These fields must be setup */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#parent\">parent</a>;<span class=\"ts\"/><span class=\"comment\">/* top domain must be null terminated */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#child\">child</a>;<span class=\"ts\"/><span class=\"comment\">/* bottom domain must be null terminated */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#groups\">groups</a>;<span class=\"ts\"/><span class=\"comment\">/* the balancing groups of the domain */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_interval\">min_interval</a>;<span class=\"ts\"/><span class=\"comment\">/* Minimum balance interval ms */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_interval\">max_interval</a>;<span class=\"ts\"/><span class=\"comment\">/* Maximum balance interval ms */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#busy_factor\">busy_factor</a>;<span class=\"ts\"/><span class=\"comment\">/* less balancing by factor if busy */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#imbalance_pct\">imbalance_pct</a>;<span class=\"ts\"/><span class=\"comment\">/* No balance until over watermark */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cache_nice_tries\">cache_nice_tries</a>;<span class=\"ts\"/><span class=\"comment\">/* Leave cache hot tasks for # tries */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#busy_idx\">busy_idx</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#idle_idx\">idle_idx</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#newidle_idx\">newidle_idx</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#wake_idx\">wake_idx</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#forkexec_idx\">forkexec_idx</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#smt_gain\">smt_gain</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See SD_* */</span>", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#sched_domain_level\">sched_domain_level</a> <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Runtime fields. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#last_balance\">last_balance</a>;<span class=\"ts\"/><span class=\"comment\">/* init to jiffies. units in jiffies */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#balance_interval\">balance_interval</a>;<span class=\"ts\"/><span class=\"comment\">/* initialise to 1. units in ms. */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_balance_failed\">nr_balance_failed</a>; <span class=\"comment\">/* initialise to 0 */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#last_update\">last_update</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* load_balance() stats */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lb_count\">lb_count</a>[<a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lb_failed\">lb_failed</a>[<a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lb_balanced\">lb_balanced</a>[<a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lb_imbalance\">lb_imbalance</a>[<a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lb_gained\">lb_gained</a>[<a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lb_hot_gained\">lb_hot_gained</a>[<a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lb_nobusyg\">lb_nobusyg</a>[<a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lb_nobusyq\">lb_nobusyq</a>[<a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Active load balancing */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#alb_count\">alb_count</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#alb_failed\">alb_failed</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#alb_pushed\">alb_pushed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* SD_BALANCE_EXEC stats */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sbe_count\">sbe_count</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sbe_balanced\">sbe_balanced</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sbe_pushed\">sbe_pushed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* SD_BALANCE_FORK stats */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sbf_count\">sbf_count</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sbf_balanced\">sbf_balanced</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sbf_pushed\">sbf_pushed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* try_to_wake_up() stats */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ttwu_wake_remote\">ttwu_wake_remote</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ttwu_move_affine\">ttwu_move_affine</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ttwu_move_balance\">ttwu_move_balance</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#span_weight\">span_weight</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Span of all CPUs in this domain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: this field is variable length. (Allocated dynamically</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by attaching extra space to the end of the structure,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * depending on how many CPUs the kernel has booted up with)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is also be embedded into static data structures at build</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time. (See 'struct static_sched_domain' in kernel/sched.c)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#span\">span</a>[0];", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#span\">span</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#partition_sched_domains\">partition_sched_domains</a>(int <a class=\"id\" href=\"#ndoms_new\">ndoms_new</a>, <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#doms_new\">doms_new</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#dattr_new\">dattr_new</a>);", 
"", 
"<span class=\"comment\">/* Allocate an array of sched domains, for partition_sched_domains(). */</span>", 
"<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#alloc_sched_domains\">alloc_sched_domains</a>(unsigned int <a class=\"id\" href=\"#ndoms\">ndoms</a>);", 
"void <a class=\"id\" href=\"#free_sched_domains\">free_sched_domains</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#doms\">doms</a>[], unsigned int <a class=\"id\" href=\"#ndoms\">ndoms</a>);", 
"", 
"<span class=\"comment\">/* Test a flag in parent sched domain */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_sd_parent\">test_sd_parent</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a> && (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#flag\">flag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#default_scale_freq_power\">default_scale_freq_power</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"unsigned long <a class=\"id\" href=\"#default_scale_smt_power\">default_scale_smt_power</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"#else <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#partition_sched_domains\">partition_sched_domains</a>(int <a class=\"id\" href=\"#ndoms_new\">ndoms_new</a>, <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#doms_new\">doms_new</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#dattr_new\">dattr_new</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* !CONFIG_SMP */</span>", 
"", 
"", 
"struct <a class=\"id\" href=\"#io_context\">io_context</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See blkdev.h */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_HAS_PREFETCH_SWITCH_STACK\">ARCH_HAS_PREFETCH_SWITCH_STACK</a>", 
"extern void <a class=\"id\" href=\"#prefetch_stack\">prefetch_stack</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#prefetch_stack\">prefetch_stack</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#audit_context\">audit_context</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See audit.c */</span>", 
"struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a>;", 
"struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a>;", 
"", 
"struct <a class=\"id\" href=\"#rq\">rq</a>;", 
"struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wake flags</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WF_SYNC\">WF_SYNC</a><span class=\"ts\"/><span class=\"ts\"/>0x01<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* waker goes to sleep after wakup */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WF_FORK\">WF_FORK</a><span class=\"ts\"/><span class=\"ts\"/>0x02<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* child wakeup after fork */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ENQUEUE_WAKEUP\">ENQUEUE_WAKEUP</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ENQUEUE_WAKING\">ENQUEUE_WAKING</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ENQUEUE_HEAD\">ENQUEUE_HEAD</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEQUEUE_SLEEP\">DEQUEUE_SLEEP</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"", 
"struct <a class=\"id\" href=\"#sched_class\">sched_class</a> {", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#enqueue_task\">enqueue_task</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#dequeue_task\">dequeue_task</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#yield_task\">yield_task</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * (*<a class=\"id\" href=\"#pick_next_task\">pick_next_task</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#put_prev_task\">put_prev_task</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>int  (*<a class=\"id\" href=\"#select_task_rq\">select_task_rq</a>)(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#sd_flag\">sd_flag</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#pre_schedule\">pre_schedule</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#post_schedule\">post_schedule</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#task_waking\">task_waking</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#task_woken\">task_woken</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_cpus_allowed\">set_cpus_allowed</a>)(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#newmask\">newmask</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#rq_online\">rq_online</a>)(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#rq_offline\">rq_offline</a>)(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_curr_task\">set_curr_task</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#task_tick\">task_tick</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#queued\">queued</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#task_fork\">task_fork</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#switched_from\">switched_from</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#switched_to\">switched_to</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#prio_changed\">prio_changed</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#oldprio\">oldprio</a>, int <a class=\"id\" href=\"#running\">running</a>);", 
"", 
"<span class=\"ts\"/>unsigned int (*<a class=\"id\" href=\"#get_rr_interval\">get_rr_interval</a>) (struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#moved_group\">moved_group</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#on_rq\">on_rq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#load_weight\">load_weight</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#weight\">weight</a>, <a class=\"id\" href=\"#inv_weight\">inv_weight</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"struct <a class=\"id\" href=\"#sched_statistics\">sched_statistics</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_start\">wait_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_max\">wait_max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_count\">wait_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_sum\">wait_sum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iowait_count\">iowait_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iowait_sum\">iowait_sum</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sleep_start\">sleep_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sleep_max\">sleep_max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum_sleep_runtime\">sum_sleep_runtime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_start\">block_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_max\">block_max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exec_max\">exec_max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slice_max\">slice_max</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_migrations_cold\">nr_migrations_cold</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_failed_migrations_affine\">nr_failed_migrations_affine</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_failed_migrations_running\">nr_failed_migrations_running</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_failed_migrations_hot\">nr_failed_migrations_hot</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_forced_migrations\">nr_forced_migrations</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_wakeups\">nr_wakeups</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_wakeups_sync\">nr_wakeups_sync</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_wakeups_migrate\">nr_wakeups_migrate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_wakeups_local\">nr_wakeups_local</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_wakeups_remote\">nr_wakeups_remote</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_wakeups_affine\">nr_wakeups_affine</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_wakeups_affine_attempts\">nr_wakeups_affine_attempts</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_wakeups_passive\">nr_wakeups_passive</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_wakeups_idle\">nr_wakeups_idle</a>;", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#load_weight\">load_weight</a><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for load-balancing */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run_node\">run_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#group_node\">group_node</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exec_start\">exec_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vruntime\">vruntime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_sum_exec_runtime\">prev_sum_exec_runtime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_migrations\">nr_migrations</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_statistics\">sched_statistics</a> <a class=\"id\" href=\"#statistics\">statistics</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a><span class=\"ts\"/>*<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* rq on which this entity is (to be) queued: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* rq \"owned\" by this entity/group: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#my_q\">my_q</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#run_list\">run_list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#time_slice\">time_slice</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#back\">back</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a><span class=\"ts\"/>*<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* rq on which this entity is (to be) queued: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rt_rq\">rt_rq</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* rq \"owned\" by this entity/group: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#my_q\">my_q</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a>;", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> {", 
"<span class=\"ts\"/>volatile long <a class=\"id\" href=\"#state\">state</a>;<span class=\"ts\"/><span class=\"comment\">/* -1 unrunnable, 0 runnable, &gt;0 stopped */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#stack\">stack</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#usage\">usage</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"comment\">/* per process flags, defined below */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ptrace\">ptrace</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lock_depth\">lock_depth</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BKL lock depth */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_UNLOCKED_CTXSW\">__ARCH_WANT_UNLOCKED_CTXSW</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oncpu\">oncpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prio\">prio</a>, <a class=\"id\" href=\"#static_prio\">static_prio</a>, <a class=\"id\" href=\"#normal_prio\">normal_prio</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#rt_priority\">rt_priority</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> *<a class=\"id\" href=\"#sched_class\">sched_class</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> <a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> <a class=\"id\" href=\"#rt\">rt</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT_NOTIFIERS\">CONFIG_PREEMPT_NOTIFIERS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* list of struct preempt_notifier: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#preempt_notifiers\">preempt_notifiers</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fpu_counter contains the number of consecutive context switches</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that the FPU is used. If this is over a threshold, the lazy fpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * saving becomes unlazy to save the trap. This is an unsigned char</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that after 256 times the counter wraps and the behavior turns</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lazy again; this to deal with bursty apps that only use FPU for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a short time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#fpu_counter\">fpu_counter</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IO_TRACE\">CONFIG_BLK_DEV_IO_TRACE</a>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#btrace_seq\">btrace_seq</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#policy\">policy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> <a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TREE_PREEMPT_RCU\">CONFIG_TREE_PREEMPT_RCU</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rcu_read_lock_nesting\">rcu_read_lock_nesting</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rcu_blocked_node\">rcu_blocked_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_TREE_PREEMPT_RCU */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TASK_DELAY_ACCT\">CONFIG_TASK_DELAY_ACCT</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_info\">sched_info</a> <a class=\"id\" href=\"#sched_info\">sched_info</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tasks\">tasks</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_node\">plist_node</a> <a class=\"id\" href=\"#pushable_tasks\">pushable_tasks</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, *<a class=\"id\" href=\"#active_mm\">active_mm</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#SPLIT_RSS_COUNTING\">SPLIT_RSS_COUNTING</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_rss_stat\">task_rss_stat</a><span class=\"ts\"/><a class=\"id\" href=\"#rss_stat\">rss_stat</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/* task state */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#exit_state\">exit_state</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#exit_code\">exit_code</a>, <a class=\"id\" href=\"#exit_signal\">exit_signal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pdeath_signal\">pdeath_signal</a>;  <span class=\"comment\">/*  The signal sent when the parent dies  */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* ??? */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#personality\">personality</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#did_exec\">did_exec</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#in_execve\">in_execve</a>:1;<span class=\"ts\"/><span class=\"comment\">/* Tell the LSMs that the process is doing an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * execve */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#in_iowait\">in_iowait</a>:1;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Revert to default priority/policy when forking */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#sched_reset_on_fork\">sched_reset_on_fork</a>:1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#tgid\">tgid</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CC_STACKPROTECTOR\">CONFIG_CC_STACKPROTECTOR</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Canary value for the -fstack-protector gcc feature */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack_canary\">stack_canary</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pointers to (original) parent process, youngest child, younger sibling,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * older sibling, respectively.  (p-&gt;father can be replaced with </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * p-&gt;real_parent-&gt;pid)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#real_parent\">real_parent</a>; <span class=\"comment\">/* real parent process */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>; <span class=\"comment\">/* recipient of SIGCHLD, wait4() reports */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * children/sibling forms the list of my natural children</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#children\">children</a>;<span class=\"ts\"/><span class=\"comment\">/* list of my children */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#sibling\">sibling</a>;<span class=\"ts\"/><span class=\"comment\">/* linkage in my parent's children list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#group_leader\">group_leader</a>;<span class=\"ts\"/><span class=\"comment\">/* threadgroup leader */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ptraced is the list of tasks this task is using ptrace on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This includes both natural children and PTRACE_ATTACH targets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * p-&gt;ptrace_entry is p's link on the p-&gt;parent-&gt;ptraced list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#ptraced\">ptraced</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#ptrace_entry\">ptrace_entry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* PID/PID hash table linkage. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_link\">pid_link</a> <a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#thread_group\">thread_group</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#vfork_done\">vfork_done</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for vfork() */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#set_child_tid\">set_child_tid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CLONE_CHILD_SETTID */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#clear_child_tid\">clear_child_tid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CLONE_CHILD_CLEARTID */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#utimescaled\">utimescaled</a>, <a class=\"id\" href=\"#stimescaled\">stimescaled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#gtime\">gtime</a>;", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_VIRT_CPU_ACCOUNTING\">CONFIG_VIRT_CPU_ACCOUNTING</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#prev_utime\">prev_utime</a>, <a class=\"id\" href=\"#prev_stime\">prev_stime</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nvcsw\">nvcsw</a>, <a class=\"id\" href=\"#nivcsw\">nivcsw</a>; <span class=\"comment\">/* context switch counts */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#start_time\">start_time</a>; <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* monotonic time */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#real_start_time\">real_start_time</a>;<span class=\"ts\"/><span class=\"comment\">/* boot based time */</span>", 
"<span class=\"comment\">/* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_flt\">min_flt</a>, <a class=\"id\" href=\"#maj_flt\">maj_flt</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>[3];", 
"", 
"<span class=\"comment\">/* process credentials */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#real_cred\">real_cred</a>;<span class=\"ts\"/><span class=\"comment\">/* objective and real subjective task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * credentials (COW) */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>;<span class=\"ts\"/><span class=\"comment\">/* effective (overridable) subjective task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * credentials (COW) */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#cred_guard_mutex\">cred_guard_mutex</a>;<span class=\"ts\"/><span class=\"comment\">/* guard against foreign influences on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * credential calculations</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (notably. ptrace) */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#replacement_session_keyring\">replacement_session_keyring</a>; <span class=\"comment\">/* for KEYCTL_SESSION_TO_PARENT */</span>", 
"", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#comm\">comm</a>[<a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>]; <span class=\"comment\">/* executable name excluding path</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     - access with [gs]et_task_comm (which lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       it with task_lock())</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     - initialized normally by setup_new_exec */</span>", 
"<span class=\"comment\">/* file system info */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#link_count\">link_count</a>, <a class=\"id\" href=\"#total_link_count\">total_link_count</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSVIPC\">CONFIG_SYSVIPC</a>", 
"<span class=\"comment\">/* ipc stuff */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysv_sem\">sysv_sem</a> <a class=\"id\" href=\"#sysvsem\">sysvsem</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DETECT_HUNG_TASK\">CONFIG_DETECT_HUNG_TASK</a>", 
"<span class=\"comment\">/* hung task detection */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#last_switch_count\">last_switch_count</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/* CPU-specific state of this task */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> <a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"comment\">/* filesystem information */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a> *<a class=\"id\" href=\"#fs\">fs</a>;", 
"<span class=\"comment\">/* open file information */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"comment\">/* namespaces */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#nsproxy\">nsproxy</a>;", 
"<span class=\"comment\">/* signal handlers */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#sighand\">sighand</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#real_blocked\">real_blocked</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#saved_sigmask\">saved_sigmask</a>;<span class=\"ts\"/><span class=\"comment\">/* restored if set_restore_sigmask() was used */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigpending\">sigpending</a> <a class=\"id\" href=\"#pending\">pending</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sas_ss_sp\">sas_ss_sp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#sas_ss_size\">sas_ss_size</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#notifier\">notifier</a>)(void *<a class=\"id\" href=\"#priv\">priv</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#notifier_data\">notifier_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#notifier_mask\">notifier_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *<a class=\"id\" href=\"#audit_context\">audit_context</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDITSYSCALL\">CONFIG_AUDITSYSCALL</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#loginuid\">loginuid</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sessionid\">sessionid</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seccomp_t\">seccomp_t</a> <a class=\"id\" href=\"#seccomp\">seccomp</a>;", 
"", 
"<span class=\"comment\">/* Thread group tracking */</span>", 
"   <span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#parent_exec_id\">parent_exec_id</a>;", 
"   <span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#self_exec_id\">self_exec_id</a>;", 
"<span class=\"comment\">/* Protection of (de-)allocation: mm, files, fs, tty, keyrings, mems_allowed,</span>", 
"<span class=\"comment\"> * mempolicy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#alloc_lock\">alloc_lock</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_HARDIRQS\">CONFIG_GENERIC_HARDIRQS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* IRQ handler threads */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#irqaction\">irqaction</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Protection of the PI data structures: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> <a class=\"id\" href=\"#pi_lock\">pi_lock</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_MUTEXES\">CONFIG_RT_MUTEXES</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* PI waiters blocked on a rt_mutex held by this task */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a> <a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Deadlock detection and priority inheritance handling */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_MUTEXES\">CONFIG_DEBUG_MUTEXES</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* mutex deadlock detection */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex_waiter\">mutex_waiter</a> *<a class=\"id\" href=\"#blocked_on\">blocked_on</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACE_IRQFLAGS\">CONFIG_TRACE_IRQFLAGS</a>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#irq_events\">irq_events</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hardirq_enable_ip\">hardirq_enable_ip</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hardirq_disable_ip\">hardirq_disable_ip</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hardirq_enable_event\">hardirq_enable_event</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hardirq_disable_event\">hardirq_disable_event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hardirqs_enabled\">hardirqs_enabled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hardirq_context\">hardirq_context</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#softirq_disable_ip\">softirq_disable_ip</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#softirq_enable_ip\">softirq_enable_ip</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#softirq_disable_event\">softirq_disable_event</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#softirq_enable_event\">softirq_enable_event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#softirqs_enabled\">softirqs_enabled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#softirq_context\">softirq_context</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_LOCK_DEPTH\">MAX_LOCK_DEPTH</a> 48UL", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#curr_chain_key\">curr_chain_key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lockdep_depth\">lockdep_depth</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lockdep_recursion\">lockdep_recursion</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#held_lock\">held_lock</a> <a class=\"id\" href=\"#held_locks\">held_locks</a>[<a class=\"id\" href=\"#MAX_LOCK_DEPTH\">MAX_LOCK_DEPTH</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#lockdep_reclaim_gfp\">lockdep_reclaim_gfp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* journalling filesystem info */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#journal_info\">journal_info</a>;", 
"", 
"<span class=\"comment\">/* stacked block device info */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_list\">bio_list</a> *<a class=\"id\" href=\"#bio_list\">bio_list</a>;", 
"", 
"<span class=\"comment\">/* VM state */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> *<a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#io_context\">io_context</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ptrace_message\">ptrace_message</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#last_siginfo\">last_siginfo</a>; <span class=\"comment\">/* For ptrace use.  */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_io_accounting\">task_io_accounting</a> <a class=\"id\" href=\"#ioac\">ioac</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TASK_XACCT\">CONFIG_TASK_XACCT</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#acct_rss_mem1\">acct_rss_mem1</a>;<span class=\"ts\"/><span class=\"comment\">/* accumulated rss usage */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#acct_vm_mem1\">acct_vm_mem1</a>;<span class=\"ts\"/><span class=\"comment\">/* accumulated virtual memory usage */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#acct_timexpd\">acct_timexpd</a>;<span class=\"ts\"/><span class=\"comment\">/* stime + utime since last update */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPUSETS\">CONFIG_CPUSETS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>;<span class=\"ts\"/><span class=\"comment\">/* Protected by alloc_lock */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mems_allowed_change_disable\">mems_allowed_change_disable</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpuset_mem_spread_rotor\">cpuset_mem_spread_rotor</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpuset_slab_spread_rotor\">cpuset_slab_spread_rotor</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUPS\">CONFIG_CGROUPS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Control Group info protected by css_set_lock */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cgroups\">cgroups</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* cg_list protected by css_set_lock and tsk-&gt;alloc_lock */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cg_list\">cg_list</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUTEX\">CONFIG_FUTEX</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#robust_list_head\">robust_list_head</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#robust_list\">robust_list</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compat_robust_list_head\">compat_robust_list_head</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#compat_robust_list\">compat_robust_list</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#pi_state_list\">pi_state_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#perf_event_list\">perf_event_list</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mempolicy\">mempolicy</a>;<span class=\"ts\"/><span class=\"comment\">/* Protected by alloc_lock */</span>", 
"<span class=\"ts\"/>short <a class=\"id\" href=\"#il_next\">il_next</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#fs_excl\">fs_excl</a>;<span class=\"ts\"/><span class=\"comment\">/* holding fs exclusive resources */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cache last used pipe for splice</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#splice_pipe\">splice_pipe</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_TASK_DELAY_ACCT\">CONFIG_TASK_DELAY_ACCT</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_delay_info\">task_delay_info</a> *<a class=\"id\" href=\"#delays\">delays</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAULT_INJECTION\">CONFIG_FAULT_INJECTION</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#make_it_fail\">make_it_fail</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prop_local_single\">prop_local_single</a> <a class=\"id\" href=\"#dirties\">dirties</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LATENCYTOP\">CONFIG_LATENCYTOP</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#latency_record_count\">latency_record_count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#latency_record\">latency_record</a> <a class=\"id\" href=\"#latency_record\">latency_record</a>[<a class=\"id\" href=\"#LT_SAVECOUNT\">LT_SAVECOUNT</a>];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time slack values; these are used to round up poll() and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * select() etc timeout values. These are in nanoseconds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timer_slack_ns\">timer_slack_ns</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#default_timer_slack_ns\">default_timer_slack_ns</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#scm_work_list\">scm_work_list</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Index of current stored address in ret_stack */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Stack of return addresses for return function tracing */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_ret_stack\">ftrace_ret_stack</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ret_stack\">ret_stack</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* time stamp for last schedule */</span>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#ftrace_timestamp\">ftrace_timestamp</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Number of functions that haven't been traced</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because of depth overrun.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#trace_overrun\">trace_overrun</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Pause for the tracing */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#tracing_graph_pause\">tracing_graph_pause</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* state flags for use by tracers */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* bitmask of trace recursion */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#trace_recursion\">trace_recursion</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_TRACING */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR\">CONFIG_CGROUP_MEM_RES_CTLR</a> <span class=\"comment\">/* memcg uses this to do batch job */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memcg_batch_info\">memcg_batch_info</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#do_batch\">do_batch</a>;<span class=\"ts\"/><span class=\"comment\">/* incremented when batch uncharge started */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>; <span class=\"comment\">/* target memcg of uncharge */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bytes\">bytes</a>; <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* uncharged usage */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#memsw_bytes\">memsw_bytes</a>; <span class=\"comment\">/* uncharged mem+swap usage */</span>", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/* Future-safe accessor for struct task_struct's cpus_allowed. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tsk_cpus_allowed\">tsk_cpus_allowed</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) (&amp;(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Priority of a process goes from 0..MAX_PRIO-1, valid RT</span>", 
"<span class=\"comment\"> * priority is 0..MAX_RT_PRIO-1, and SCHED_NORMAL/SCHED_BATCH</span>", 
"<span class=\"comment\"> * tasks are in the range MAX_RT_PRIO..MAX_PRIO-1. Priority</span>", 
"<span class=\"comment\"> * values are inverted: lower p-&gt;prio value means higher priority.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The MAX_USER_RT_PRIO value allows the actual maximum</span>", 
"<span class=\"comment\"> * RT priority to be separate from the value exported to</span>", 
"<span class=\"comment\"> * user-space.  This allows kernel threads to set their</span>", 
"<span class=\"comment\"> * priority to a value higher than any user task. Note:</span>", 
"<span class=\"comment\"> * MAX_RT_PRIO must not be smaller than MAX_USER_RT_PRIO.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_USER_RT_PRIO\">MAX_USER_RT_PRIO</a><span class=\"ts\"/>100", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_USER_RT_PRIO\">MAX_USER_RT_PRIO</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_PRIO\">MAX_PRIO</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a> + 40)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_PRIO\">DEFAULT_PRIO</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a> + 20)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rt_prio\">rt_prio</a>(int <a class=\"id\" href=\"#prio\">prio</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rt_task\">rt_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rt_prio\">rt_prio</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#task_pid\">task_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>].<a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#task_tgid\">task_tgid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>].<a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Without tasklist or rcu lock it is not safe to dereference</span>", 
"<span class=\"comment\"> * the result of task_pgrp/task_session even if task == current,</span>", 
"<span class=\"comment\"> * we can race with another thread doing sys_setsid/sys_setpgid.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#task_pgrp\">task_pgrp</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>].<a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#task_session\">task_session</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#PIDTYPE_SID\">PIDTYPE_SID</a>].<a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the helpers to get the task's different pids as they are seen</span>", 
"<span class=\"comment\"> * from various namespaces</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * task_xid_nr()     : global id, i.e. the id seen from the init namespace;</span>", 
"<span class=\"comment\"> * task_xid_vnr()    : virtual id, i.e. the id seen from the pid namespace of</span>", 
"<span class=\"comment\"> *                     current.</span>", 
"<span class=\"comment\"> * task_xid_nr_ns()  : id seen from the ns specified;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * set_task_vxid()   : assigns a virtual id to a task;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * see also pid_nr() etc in include/linux/pid.h</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#__task_pid_nr_ns\">__task_pid_nr_ns</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_pid_nr_ns\">task_pid_nr_ns</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__task_pid_nr_ns\">__task_pid_nr_ns</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, <a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__task_pid_nr_ns\">__task_pid_nr_ns</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_tgid_nr\">task_tgid_nr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_tgid_nr_ns\">task_tgid_nr_ns</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>(<a class=\"id\" href=\"#task_tgid\">task_tgid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>));", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_pgrp_nr_ns\">task_pgrp_nr_ns</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__task_pid_nr_ns\">__task_pid_nr_ns</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_pgrp_vnr\">task_pgrp_vnr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__task_pid_nr_ns\">__task_pid_nr_ns</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_session_nr_ns\">task_session_nr_ns</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__task_pid_nr_ns\">__task_pid_nr_ns</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_SID\">PIDTYPE_SID</a>, <a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_session_vnr\">task_session_vnr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__task_pid_nr_ns\">__task_pid_nr_ns</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_SID\">PIDTYPE_SID</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/* obsolete, do not use */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_pgrp_nr\">task_pgrp_nr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_pgrp_nr_ns\">task_pgrp_nr_ns</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pid_alive - check that a task structure is not stale</span>", 
"<span class=\"comment\"> * @p: Task structure to be checked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test if a process is not yet dead (at most zombie state)</span>", 
"<span class=\"comment\"> * If pid_alive fails, then pointers within the task structure</span>", 
"<span class=\"comment\"> * can be stale and must not be dereferenced.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pid_alive\">pid_alive</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>].<a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_global_init - check if a task structure is init</span>", 
"<span class=\"comment\"> * @tsk: Task structure to be checked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check if a task structure is the first user space task the kernel created.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_global_init\">is_global_init</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a> == 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * is_container_init:</span>", 
"<span class=\"comment\"> * check whether in the task is init in its own pid namespace.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#is_container_init\">is_container_init</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#cad_pid\">cad_pid</a>;", 
"", 
"extern void <a class=\"id\" href=\"#free_task\">free_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) do { <a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#usage\">usage</a>); } while(0)", 
"", 
"extern void <a class=\"id\" href=\"#__put_task_struct\">__put_task_struct</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#usage\">usage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_task_struct\">__put_task_struct</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#task_times\">task_times</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#ut\">ut</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#st\">st</a>);", 
"extern void <a class=\"id\" href=\"#thread_group_times\">thread_group_times</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#ut\">ut</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#st\">st</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Per process flags</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_ALIGNWARN\">PF_ALIGNWARN</a><span class=\"ts\"/>0x00000001<span class=\"ts\"/><span class=\"comment\">/* Print alignment warning msgs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not implemented yet, only for 486*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_STARTING\">PF_STARTING</a><span class=\"ts\"/>0x00000002<span class=\"ts\"/><span class=\"comment\">/* being created */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a><span class=\"ts\"/>0x00000004<span class=\"ts\"/><span class=\"comment\">/* getting shut down */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_EXITPIDONE\">PF_EXITPIDONE</a><span class=\"ts\"/>0x00000008<span class=\"ts\"/><span class=\"comment\">/* pi exit done on shut down */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_VCPU\">PF_VCPU</a><span class=\"ts\"/><span class=\"ts\"/>0x00000010<span class=\"ts\"/><span class=\"comment\">/* I'm a virtual CPU */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_WQ_WORKER\">PF_WQ_WORKER</a><span class=\"ts\"/>0x00000020<span class=\"ts\"/><span class=\"comment\">/* I'm a workqueue worker */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_FORKNOEXEC\">PF_FORKNOEXEC</a><span class=\"ts\"/>0x00000040<span class=\"ts\"/><span class=\"comment\">/* forked but didn't exec */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_MCE_PROCESS\">PF_MCE_PROCESS</a>  0x00000080      <span class=\"comment\">/* process policy on mce errors */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_SUPERPRIV\">PF_SUPERPRIV</a><span class=\"ts\"/>0x00000100<span class=\"ts\"/><span class=\"comment\">/* used super-user privileges */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_DUMPCORE\">PF_DUMPCORE</a><span class=\"ts\"/>0x00000200<span class=\"ts\"/><span class=\"comment\">/* dumped core */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_SIGNALED\">PF_SIGNALED</a><span class=\"ts\"/>0x00000400<span class=\"ts\"/><span class=\"comment\">/* killed by a signal */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a><span class=\"ts\"/>0x00000800<span class=\"ts\"/><span class=\"comment\">/* Allocating memory */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_FLUSHER\">PF_FLUSHER</a><span class=\"ts\"/>0x00001000<span class=\"ts\"/><span class=\"comment\">/* responsible for disk writeback */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_USED_MATH\">PF_USED_MATH</a><span class=\"ts\"/>0x00002000<span class=\"ts\"/><span class=\"comment\">/* if unset the fpu must be initialized before use */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_FREEZING\">PF_FREEZING</a><span class=\"ts\"/>0x00004000<span class=\"ts\"/><span class=\"comment\">/* freeze in progress. do not account to load */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_NOFREEZE\">PF_NOFREEZE</a><span class=\"ts\"/>0x00008000<span class=\"ts\"/><span class=\"comment\">/* this thread should not be frozen */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_FROZEN\">PF_FROZEN</a><span class=\"ts\"/>0x00010000<span class=\"ts\"/><span class=\"comment\">/* frozen for system suspend */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_FSTRANS\">PF_FSTRANS</a><span class=\"ts\"/>0x00020000<span class=\"ts\"/><span class=\"comment\">/* inside a filesystem transaction */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_KSWAPD\">PF_KSWAPD</a><span class=\"ts\"/>0x00040000<span class=\"ts\"/><span class=\"comment\">/* I am kswapd */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_OOM_ORIGIN\">PF_OOM_ORIGIN</a><span class=\"ts\"/>0x00080000<span class=\"ts\"/><span class=\"comment\">/* Allocating much memory to others */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_LESS_THROTTLE\">PF_LESS_THROTTLE</a> 0x00100000<span class=\"ts\"/><span class=\"comment\">/* Throttle me less: I clean memory */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_KTHREAD\">PF_KTHREAD</a><span class=\"ts\"/>0x00200000<span class=\"ts\"/><span class=\"comment\">/* I am a kernel thread */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_RANDOMIZE\">PF_RANDOMIZE</a><span class=\"ts\"/>0x00400000<span class=\"ts\"/><span class=\"comment\">/* randomize virtual address space */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a><span class=\"ts\"/>0x00800000<span class=\"ts\"/><span class=\"comment\">/* Allowed to write to swap */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_SPREAD_PAGE\">PF_SPREAD_PAGE</a><span class=\"ts\"/>0x01000000<span class=\"ts\"/><span class=\"comment\">/* Spread page cache over cpuset */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_SPREAD_SLAB\">PF_SPREAD_SLAB</a><span class=\"ts\"/>0x02000000<span class=\"ts\"/><span class=\"comment\">/* Spread some slab caches over cpuset */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_THREAD_BOUND\">PF_THREAD_BOUND</a><span class=\"ts\"/>0x04000000<span class=\"ts\"/><span class=\"comment\">/* Thread bound to specific cpu */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_MCE_EARLY\">PF_MCE_EARLY</a>    0x08000000      <span class=\"comment\">/* Early kill for mce process policy */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_MEMPOLICY\">PF_MEMPOLICY</a><span class=\"ts\"/>0x10000000<span class=\"ts\"/><span class=\"comment\">/* Non-default NUMA mempolicy */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_MUTEX_TESTER\">PF_MUTEX_TESTER</a><span class=\"ts\"/>0x20000000<span class=\"ts\"/><span class=\"comment\">/* Thread belongs to the rt mutex tester */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_FREEZER_SKIP\">PF_FREEZER_SKIP</a><span class=\"ts\"/>0x40000000<span class=\"ts\"/><span class=\"comment\">/* Freezer should not count it as freezeable */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_FREEZER_NOSIG\">PF_FREEZER_NOSIG</a> 0x80000000<span class=\"ts\"/><span class=\"comment\">/* Freezer won't send signals to it */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Only the _current_ task can read/write to tsk-&gt;flags, but other</span>", 
"<span class=\"comment\"> * tasks can access tsk-&gt;flags in readonly mode for example</span>", 
"<span class=\"comment\"> * with tsk_used_math (like during threaded core dumping).</span>", 
"<span class=\"comment\"> * There is however an exception to this rule during ptrace</span>", 
"<span class=\"comment\"> * or during fork: the ptracer task is allowed to write to the</span>", 
"<span class=\"comment\"> * child-&gt;flags of its traced child (same goes for fork, the parent</span>", 
"<span class=\"comment\"> * can write to the child-&gt;flags), because we're guaranteed the</span>", 
"<span class=\"comment\"> * child is not running and in turn not changing child-&gt;flags</span>", 
"<span class=\"comment\"> * at the same time the parent does it.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clear_stopped_child_used_math\">clear_stopped_child_used_math</a>(<a class=\"id\" href=\"#child\">child</a>) do { (<a class=\"id\" href=\"#child\">child</a>)-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_USED_MATH\">PF_USED_MATH</a>; } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_stopped_child_used_math\">set_stopped_child_used_math</a>(<a class=\"id\" href=\"#child\">child</a>) do { (<a class=\"id\" href=\"#child\">child</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_USED_MATH\">PF_USED_MATH</a>; } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clear_used_math\">clear_used_math</a>() <a class=\"id\" href=\"#clear_stopped_child_used_math\">clear_stopped_child_used_math</a>(<a class=\"id\" href=\"#current\">current</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_used_math\">set_used_math</a>() <a class=\"id\" href=\"#set_stopped_child_used_math\">set_stopped_child_used_math</a>(<a class=\"id\" href=\"#current\">current</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#conditional_stopped_child_used_math\">conditional_stopped_child_used_math</a>(<a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#child\">child</a>) \\", 
"<span class=\"ts\"/>do { (<a class=\"id\" href=\"#child\">child</a>)-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_USED_MATH\">PF_USED_MATH</a>, (<a class=\"id\" href=\"#child\">child</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= (<a class=\"id\" href=\"#condition\">condition</a>) ? <a class=\"id\" href=\"#PF_USED_MATH\">PF_USED_MATH</a> : 0; } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#conditional_used_math\">conditional_used_math</a>(<a class=\"id\" href=\"#condition\">condition</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conditional_stopped_child_used_math\">conditional_stopped_child_used_math</a>(<a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#current\">current</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#copy_to_stopped_child_used_math\">copy_to_stopped_child_used_math</a>(<a class=\"id\" href=\"#child\">child</a>) \\", 
"<span class=\"ts\"/>do { (<a class=\"id\" href=\"#child\">child</a>)-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_USED_MATH\">PF_USED_MATH</a>, (<a class=\"id\" href=\"#child\">child</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_USED_MATH\">PF_USED_MATH</a>; } while (0)", 
"<span class=\"comment\">/* NOTE: this will return 0 or PF_USED_MATH, it will never return 1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tsk_used_math\">tsk_used_math</a>(<a class=\"id\" href=\"#p\">p</a>) ((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_USED_MATH\">PF_USED_MATH</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#used_math\">used_math</a>() <a class=\"id\" href=\"#tsk_used_math\">tsk_used_math</a>(<a class=\"id\" href=\"#current\">current</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TREE_PREEMPT_RCU\">CONFIG_TREE_PREEMPT_RCU</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_READ_UNLOCK_BLOCKED\">RCU_READ_UNLOCK_BLOCKED</a> (1 << 0) <span class=\"comment\">/* blocked while in RCU read-side. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_READ_UNLOCK_NEED_QS\">RCU_READ_UNLOCK_NEED_QS</a> (1 << 1) <span class=\"comment\">/* RCU core needs CPU response. */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rcu_copy_process\">rcu_copy_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rcu_read_lock_nesting\">rcu_read_lock_nesting</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rcu_read_unlock_special\">rcu_read_unlock_special</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rcu_blocked_node\">rcu_blocked_node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rcu_node_entry\">rcu_node_entry</a>);", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rcu_copy_process\">rcu_copy_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"extern int <a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#new_mask\">new_mask</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(0, <a class=\"id\" href=\"#new_mask\">new_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_CPUMASK_OFFSTACK\">CONFIG_CPUMASK_OFFSTACK</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#set_cpus_allowed\">set_cpus_allowed</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> <a class=\"id\" href=\"#new_mask\">new_mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do not use outside of architecture code which knows its limitations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * sched_clock() has no promise of monotonicity or bounded drift between</span>", 
"<span class=\"comment\"> * CPUs, use (which you should not) requires disabling IRQs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please use one of the three interfaces below.</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned long long <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#sched_clock\">sched_clock</a>(void);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * See the comment in kernel/sched_clock.c</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cpu_clock\">cpu_clock</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#local_clock\">local_clock</a>(void);", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sched_clock_cpu\">sched_clock_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"", 
"extern void <a class=\"id\" href=\"#sched_clock_init\">sched_clock_init</a>(void);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_HAVE_UNSTABLE_SCHED_CLOCK\">CONFIG_HAVE_UNSTABLE_SCHED_CLOCK</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sched_clock_tick\">sched_clock_tick</a>(void)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sched_clock_idle_sleep_event\">sched_clock_idle_sleep_event</a>(void)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sched_clock_idle_wakeup_event\">sched_clock_idle_wakeup_event</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta_ns\">delta_ns</a>)", 
"{", 
"}", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Architectures can set this to 1 if they have specified</span>", 
"<span class=\"comment\"> * CONFIG_HAVE_UNSTABLE_SCHED_CLOCK in their arch Kconfig,</span>", 
"<span class=\"comment\"> * but then during bootup it turns out that sched_clock()</span>", 
"<span class=\"comment\"> * is reliable after all:</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#sched_clock_stable\">sched_clock_stable</a>;", 
"", 
"extern void <a class=\"id\" href=\"#sched_clock_tick\">sched_clock_tick</a>(void);", 
"extern void <a class=\"id\" href=\"#sched_clock_idle_sleep_event\">sched_clock_idle_sleep_event</a>(void);", 
"extern void <a class=\"id\" href=\"#sched_clock_idle_wakeup_event\">sched_clock_idle_wakeup_event</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta_ns\">delta_ns</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern unsigned long long", 
"<a class=\"id\" href=\"#task_sched_runtime\">task_sched_runtime</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"extern unsigned long long <a class=\"id\" href=\"#thread_group_sched_runtime\">thread_group_sched_runtime</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"comment\">/* sched_exec is called by processes performing an exec */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"extern void <a class=\"id\" href=\"#sched_exec\">sched_exec</a>(void);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sched_exec\">sched_exec</a>()   {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#sched_clock_idle_sleep_event\">sched_clock_idle_sleep_event</a>(void);", 
"extern void <a class=\"id\" href=\"#sched_clock_idle_wakeup_event\">sched_clock_idle_wakeup_event</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta_ns\">delta_ns</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"extern void <a class=\"id\" href=\"#move_task_off_dead_cpu\">move_task_off_dead_cpu</a>(int <a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern void <a class=\"id\" href=\"#idle_task_exit\">idle_task_exit</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#idle_task_exit\">idle_task_exit</a>(void) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#sched_idle_next\">sched_idle_next</a>(void);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>)", 
"extern void <a class=\"id\" href=\"#wake_up_idle_cpu\">wake_up_idle_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#wake_up_idle_cpu\">wake_up_idle_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_latency\">sysctl_sched_latency</a>;", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_min_granularity\">sysctl_sched_min_granularity</a>;", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_wakeup_granularity\">sysctl_sched_wakeup_granularity</a>;", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_shares_ratelimit\">sysctl_sched_shares_ratelimit</a>;", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_shares_thresh\">sysctl_sched_shares_thresh</a>;", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_child_runs_first\">sysctl_sched_child_runs_first</a>;", 
"", 
"enum <a class=\"id\" href=\"#sched_tunable_scaling\">sched_tunable_scaling</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCHED_TUNABLESCALING_NONE\">SCHED_TUNABLESCALING_NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCHED_TUNABLESCALING_LOG\">SCHED_TUNABLESCALING_LOG</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCHED_TUNABLESCALING_LINEAR\">SCHED_TUNABLESCALING_LINEAR</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCHED_TUNABLESCALING_END\">SCHED_TUNABLESCALING_END</a>,", 
"};", 
"extern enum <a class=\"id\" href=\"#sched_tunable_scaling\">sched_tunable_scaling</a> <a class=\"id\" href=\"#sysctl_sched_tunable_scaling\">sysctl_sched_tunable_scaling</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_migration_cost\">sysctl_sched_migration_cost</a>;", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_nr_migrate\">sysctl_sched_nr_migrate</a>;", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_time_avg\">sysctl_sched_time_avg</a>;", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_timer_migration\">sysctl_timer_migration</a>;", 
"", 
"int <a class=\"id\" href=\"#sched_proc_update_handler\">sched_proc_update_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#get_sysctl_timer_migration\">get_sysctl_timer_migration</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysctl_timer_migration\">sysctl_timer_migration</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#get_sysctl_timer_migration\">get_sysctl_timer_migration</a>(void)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_rt_period\">sysctl_sched_rt_period</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_sched_rt_runtime\">sysctl_sched_rt_runtime</a>;", 
"", 
"int <a class=\"id\" href=\"#sched_rt_handler\">sched_rt_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#sysctl_sched_compat_yield\">sysctl_sched_compat_yield</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_MUTEXES\">CONFIG_RT_MUTEXES</a>", 
"extern int <a class=\"id\" href=\"#rt_mutex_getprio\">rt_mutex_getprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern void <a class=\"id\" href=\"#rt_mutex_setprio\">rt_mutex_setprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#prio\">prio</a>);", 
"extern void <a class=\"id\" href=\"#rt_mutex_adjust_pi\">rt_mutex_adjust_pi</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rt_mutex_getprio\">rt_mutex_getprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#normal_prio\">normal_prio</a>;", 
"}", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rt_mutex_adjust_pi\">rt_mutex_adjust_pi</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, long <a class=\"id\" href=\"#nice\">nice</a>);", 
"extern int <a class=\"id\" href=\"#task_prio\">task_prio</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern int <a class=\"id\" href=\"#task_nice\">task_nice</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern int <a class=\"id\" href=\"#can_nice\">can_nice</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, const int <a class=\"id\" href=\"#nice\">nice</a>);", 
"extern int <a class=\"id\" href=\"#task_curr\">task_curr</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern int <a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern int <a class=\"id\" href=\"#sched_setscheduler\">sched_setscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, int, struct <a class=\"id\" href=\"#sched_param\">sched_param</a> *);", 
"extern int <a class=\"id\" href=\"#sched_setscheduler_nocheck\">sched_setscheduler_nocheck</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#sched_param\">sched_param</a> *);", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#idle_task\">idle_task</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr_task\">curr_task</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern void <a class=\"id\" href=\"#set_curr_task\">set_curr_task</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"void <a class=\"id\" href=\"#yield\">yield</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The default (Linux) execution domain.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#exec_domain\">exec_domain</a><span class=\"ts\"/><a class=\"id\" href=\"#default_exec_domain\">default_exec_domain</a>;", 
"", 
"union <a class=\"id\" href=\"#thread_union\">thread_union</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> <a class=\"id\" href=\"#thread_info\">thread_info</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>/sizeof(long)];", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_KSTACK_END\">__HAVE_ARCH_KSTACK_END</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#kstack_end\">kstack_end</a>(void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Reliable end of stack detection:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some APM bios versions misalign the stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return !(((unsigned long)<a class=\"id\" href=\"#addr\">addr</a>+sizeof(void*)-1) &amp; (<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>-sizeof(void*)));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern union <a class=\"id\" href=\"#thread_union\">thread_union</a> <a class=\"id\" href=\"#init_thread_union\">init_thread_union</a>;", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a> <a class=\"id\" href=\"#init_task\">init_task</a>;", 
"", 
"extern struct   <a class=\"id\" href=\"#mm_struct\">mm_struct</a> <a class=\"id\" href=\"#init_mm\">init_mm</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> <a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find a task by one of its numerical ids</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * find_task_by_pid_ns():</span>", 
"<span class=\"comment\"> *      finds a task by its pid in the specified namespace</span>", 
"<span class=\"comment\"> * find_task_by_vpid():</span>", 
"<span class=\"comment\"> *      finds a task by its virtual pid</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * see also find_vpid() etc in include/linux/pid.h</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#nr\">nr</a>);", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#find_task_by_pid_ns\">find_task_by_pid_ns</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"extern void <a class=\"id\" href=\"#__set_special_pids\">__set_special_pids</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"<span class=\"comment\">/* per-UID process charging. */</span>", 
"extern struct <a class=\"id\" href=\"#user_struct\">user_struct</a> * <a class=\"id\" href=\"#alloc_uid\">alloc_uid</a>(struct <a class=\"id\" href=\"#user_namespace\">user_namespace</a> *, <a class=\"id\" href=\"#uid_t\">uid_t</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#get_uid\">get_uid</a>(struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#u\">u</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#__count\">__count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#u\">u</a>;", 
"}", 
"extern void <a class=\"id\" href=\"#free_uid\">free_uid</a>(struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *);", 
"extern void <a class=\"id\" href=\"#release_uids\">release_uids</a>(struct <a class=\"id\" href=\"#user_namespace\">user_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#current\">current</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern void <a class=\"id\" href=\"#do_timer\">do_timer</a>(unsigned long <a class=\"id\" href=\"#ticks\">ticks</a>);", 
"", 
"extern int <a class=\"id\" href=\"#wake_up_state\">wake_up_state</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, unsigned int <a class=\"id\" href=\"#state\">state</a>);", 
"extern int <a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"extern void <a class=\"id\" href=\"#wake_up_new_task\">wake_up_new_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
" extern void <a class=\"id\" href=\"#kick_process\">kick_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"#else", 
" static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#kick_process\">kick_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"extern void <a class=\"id\" href=\"#sched_fork\">sched_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#clone_flags\">clone_flags</a>);", 
"extern void <a class=\"id\" href=\"#sched_dead\">sched_dead</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"extern void <a class=\"id\" href=\"#proc_caches_init\">proc_caches_init</a>(void);", 
"extern void <a class=\"id\" href=\"#flush_signals\">flush_signals</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern void <a class=\"id\" href=\"#__flush_signals\">__flush_signals</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern void <a class=\"id\" href=\"#ignore_signals\">ignore_signals</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern void <a class=\"id\" href=\"#flush_signal_handlers\">flush_signal_handlers</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, int <a class=\"id\" href=\"#force_default\">force_default</a>);", 
"extern int <a class=\"id\" href=\"#dequeue_signal\">dequeue_signal</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dequeue_signal_lock\">dequeue_signal_lock</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dequeue_signal\">dequeue_signal</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}<span class=\"ts\"/>", 
"", 
"extern void <a class=\"id\" href=\"#block_all_signals\">block_all_signals</a>(int (*<a class=\"id\" href=\"#notifier\">notifier</a>)(void *<a class=\"id\" href=\"#priv\">priv</a>), void *<a class=\"id\" href=\"#priv\">priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#mask\">mask</a>);", 
"extern void <a class=\"id\" href=\"#unblock_all_signals\">unblock_all_signals</a>(void);", 
"extern void <a class=\"id\" href=\"#release_task\">release_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * <a class=\"id\" href=\"#p\">p</a>);", 
"extern int <a class=\"id\" href=\"#send_sig_info\">send_sig_info</a>(int, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern int <a class=\"id\" href=\"#force_sigsegv\">force_sigsegv</a>(int, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern int <a class=\"id\" href=\"#force_sig_info\">force_sig_info</a>(int, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern int <a class=\"id\" href=\"#__kill_pgrp_info\">__kill_pgrp_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pgrp\">pgrp</a>);", 
"extern int <a class=\"id\" href=\"#kill_pid_info\">kill_pid_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>);", 
"extern int <a class=\"id\" href=\"#kill_pid_info_as_uid\">kill_pid_info_as_uid</a>(int, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *, struct <a class=\"id\" href=\"#pid\">pid</a> *, <a class=\"id\" href=\"#uid_t\">uid_t</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a>, <a class=\"id\" href=\"#u32\">u32</a>);", 
"extern int <a class=\"id\" href=\"#kill_pgrp\">kill_pgrp</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#sig\">sig</a>, int <a class=\"id\" href=\"#priv\">priv</a>);", 
"extern int <a class=\"id\" href=\"#kill_pid\">kill_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#sig\">sig</a>, int <a class=\"id\" href=\"#priv\">priv</a>);", 
"extern int <a class=\"id\" href=\"#kill_proc_info\">kill_proc_info</a>(int, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *, <a class=\"id\" href=\"#pid_t\">pid_t</a>);", 
"extern int <a class=\"id\" href=\"#do_notify_parent\">do_notify_parent</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, int);", 
"extern void <a class=\"id\" href=\"#__wake_up_parent\">__wake_up_parent</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"extern void <a class=\"id\" href=\"#force_sig\">force_sig</a>(int, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern int <a class=\"id\" href=\"#send_sig\">send_sig</a>(int, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, int);", 
"extern int <a class=\"id\" href=\"#zap_other_threads\">zap_other_threads</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#sigqueue_alloc\">sigqueue_alloc</a>(void);", 
"extern void <a class=\"id\" href=\"#sigqueue_free\">sigqueue_free</a>(struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *);", 
"extern int <a class=\"id\" href=\"#send_sigqueue\">send_sigqueue</a>(struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *,  struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, int <a class=\"id\" href=\"#group\">group</a>);", 
"extern int <a class=\"id\" href=\"#do_sigaction\">do_sigaction</a>(int, struct <a class=\"id\" href=\"#k_sigaction\">k_sigaction</a> *, struct <a class=\"id\" href=\"#k_sigaction\">k_sigaction</a> *);", 
"extern int <a class=\"id\" href=\"#do_sigaltstack\">do_sigaltstack</a>(const <a class=\"id\" href=\"#stack_t\">stack_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#stack_t\">stack_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, unsigned long);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#kill_cad_pid\">kill_cad_pid</a>(int <a class=\"id\" href=\"#sig\">sig</a>, int <a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kill_pid\">kill_pid</a>(<a class=\"id\" href=\"#cad_pid\">cad_pid</a>, <a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#priv\">priv</a>);", 
"}", 
"", 
"<span class=\"comment\">/* These can be the second arg to send_sig_info/send_group_sig_info.  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEND_SIG_NOINFO\">SEND_SIG_NOINFO</a> ((struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *) 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *) 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEND_SIG_FORCED\">SEND_SIG_FORCED</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *) 2)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * True if we are on the alternate signal stack.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#on_sig_stack\">on_sig_stack</a>(unsigned long <a class=\"id\" href=\"#sp\">sp</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sp\">sp</a> >= <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sas_ss_sp\">sas_ss_sp</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> - <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sas_ss_sp\">sas_ss_sp</a> &lt; <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sas_ss_size\">sas_ss_size</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sp\">sp</a> &gt; <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sas_ss_sp\">sas_ss_sp</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> - <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sas_ss_sp\">sas_ss_sp</a> <= <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sas_ss_size\">sas_ss_size</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sas_ss_flags\">sas_ss_flags</a>(unsigned long <a class=\"id\" href=\"#sp\">sp</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sas_ss_size\">sas_ss_size</a> == 0 ? <a class=\"id\" href=\"#SS_DISABLE\">SS_DISABLE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>: <a class=\"id\" href=\"#on_sig_stack\">on_sig_stack</a>(<a class=\"id\" href=\"#sp\">sp</a>) ? <a class=\"id\" href=\"#SS_ONSTACK\">SS_ONSTACK</a> : 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Routines for handling mm_structs</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm_alloc\">mm_alloc</a>(void);", 
"", 
"<span class=\"comment\">/* mmdrop drops the mm and the page tables */</span>", 
"extern void <a class=\"id\" href=\"#__mmdrop\">__mmdrop</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmdrop\">mmdrop</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mmdrop\">__mmdrop</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"", 
"<span class=\"comment\">/* mmput gets rid of the mappings and all user-space */</span>", 
"extern void <a class=\"id\" href=\"#mmput\">mmput</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *);", 
"<span class=\"comment\">/* Grab a reference to a task's mm, if it is not already going away */</span>", 
"extern struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"comment\">/* Remove the current tasks stale references to the old mm_struct */</span>", 
"extern void <a class=\"id\" href=\"#mm_release\">mm_release</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *);", 
"<span class=\"comment\">/* Allocate a new mm structure and copy contents from tsk-&gt;mm */</span>", 
"extern struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#dup_mm\">dup_mm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"extern int <a class=\"id\" href=\"#copy_thread\">copy_thread</a>(unsigned long, unsigned long, unsigned long,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"extern void <a class=\"id\" href=\"#flush_thread\">flush_thread</a>(void);", 
"extern void <a class=\"id\" href=\"#exit_thread\">exit_thread</a>(void);", 
"", 
"extern void <a class=\"id\" href=\"#exit_files\">exit_files</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern void <a class=\"id\" href=\"#__cleanup_sighand\">__cleanup_sighand</a>(struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *);", 
"", 
"extern void <a class=\"id\" href=\"#exit_itimers\">exit_itimers</a>(struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *);", 
"extern void <a class=\"id\" href=\"#flush_itimer_signals\">flush_itimer_signals</a>(void);", 
"", 
"extern <a class=\"id\" href=\"#NORET_TYPE\">NORET_TYPE</a> void <a class=\"id\" href=\"#do_group_exit\">do_group_exit</a>(int);", 
"", 
"extern void <a class=\"id\" href=\"#daemonize\">daemonize</a>(const char *, ...);", 
"extern int <a class=\"id\" href=\"#allow_signal\">allow_signal</a>(int);", 
"extern int <a class=\"id\" href=\"#disallow_signal\">disallow_signal</a>(int);", 
"", 
"extern int <a class=\"id\" href=\"#do_execve\">do_execve</a>(const char *,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char <a class=\"id\" href=\"#__user\">__user</a> * const <a class=\"id\" href=\"#__user\">__user</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char <a class=\"id\" href=\"#__user\">__user</a> * const <a class=\"id\" href=\"#__user\">__user</a> *, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"extern long <a class=\"id\" href=\"#do_fork\">do_fork</a>(unsigned long, unsigned long, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *, unsigned long, int <a class=\"id\" href=\"#__user\">__user</a> *, int <a class=\"id\" href=\"#__user\">__user</a> *);", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#fork_idle\">fork_idle</a>(int);", 
"", 
"extern void <a class=\"id\" href=\"#set_task_comm\">set_task_comm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, char *<a class=\"id\" href=\"#from\">from</a>);", 
"extern char *<a class=\"id\" href=\"#get_task_comm\">get_task_comm</a>(char *<a class=\"id\" href=\"#to\">to</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"extern unsigned long <a class=\"id\" href=\"#wait_task_inactive\">wait_task_inactive</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, long <a class=\"id\" href=\"#match_state\">match_state</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#wait_task_inactive\">wait_task_inactive</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       long <a class=\"id\" href=\"#match_state\">match_state</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#next_task\">next_task</a>(<a class=\"id\" href=\"#p\">p</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_entry_rcu\">list_entry_rcu</a>((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#tasks\">tasks</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#tasks\">tasks</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_process\">for_each_process</a>(<a class=\"id\" href=\"#p\">p</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#init_task\">init_task</a> ; (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next_task\">next_task</a>(<a class=\"id\" href=\"#p\">p</a>)) != &amp;<a class=\"id\" href=\"#init_task\">init_task</a> ; )", 
"", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#current_is_single_threaded\">current_is_single_threaded</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Careful: do_each_thread/while_each_thread is a double loop so</span>", 
"<span class=\"comment\"> *          'break' will not work as expected - use goto instead.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#t\">t</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#g\">g</a> = <a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#init_task\">init_task</a> ; (<a class=\"id\" href=\"#g\">g</a> = <a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#next_task\">next_task</a>(<a class=\"id\" href=\"#g\">g</a>)) != &amp;<a class=\"id\" href=\"#init_task\">init_task</a> ; ) do", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#t\">t</a>) \\", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#next_thread\">next_thread</a>(<a class=\"id\" href=\"#t\">t</a>)) != <a class=\"id\" href=\"#g\">g</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_nr_threads\">get_nr_threads</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#nr_threads\">nr_threads</a>;", 
"}", 
"", 
"<span class=\"comment\">/* de_thread depends on thread_group_leader not being a pid based check */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>)", 
"", 
"<span class=\"comment\">/* Do to the insanities of de_thread it is possible for a process</span>", 
"<span class=\"comment\"> * to have the pid of the thread group leader without actually being</span>", 
"<span class=\"comment\"> * the thread group leader.  For iteration through the pids in proc</span>", 
"<span class=\"comment\"> * all we care about is that we have a task with the appropriate</span>", 
"<span class=\"comment\"> * pid, we don't actually care if we have the right task.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#has_group_leader_pid\">has_group_leader_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pid\">pid</a> == <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#same_thread_group\">same_thread_group</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p1\">p1</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#tgid\">tgid</a> == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next_thread\">next_thread</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_entry_rcu\">list_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#thread_group\">thread_group</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#delay_group_leader\">delay_group_leader</a>(<a class=\"id\" href=\"#p\">p</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#p\">p</a>) && !<a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_detached\">task_detached</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a> == -1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Protects -&gt;fs, -&gt;files, -&gt;mm, -&gt;group_info, -&gt;comm, keyring</span>", 
"<span class=\"comment\"> * subscriptions and synchronises with wait4().  Also used in procfs.  Also</span>", 
"<span class=\"comment\"> * pins the final release of task.io_context.  Also protects -&gt;cpuset and</span>", 
"<span class=\"comment\"> * -&gt;cgroup.subsys[].</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Nests both inside and outside of read_lock(&amp;tasklist_lock).</span>", 
"<span class=\"comment\"> * It must not be nested with write_lock_irq(&amp;tasklist_lock),</span>", 
"<span class=\"comment\"> * neither inside nor outside.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#task_lock\">task_lock</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#alloc_lock\">alloc_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#task_unlock\">task_unlock</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#alloc_lock\">alloc_lock</a>);", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#lock_task_sighand\">lock_task_sighand</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unlock_task_sighand\">unlock_task_sighand</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_THREAD_FUNCTIONS\">__HAVE_THREAD_FUNCTIONS</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/>((struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *)(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#stack\">stack</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_stack_page\">task_stack_page</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#stack\">stack</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#setup_thread_stack\">setup_thread_stack</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#org\">org</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>) = *<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#org\">org</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long *<a class=\"id\" href=\"#end_of_stack\">end_of_stack</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long *)(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>) + 1);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#object_is_on_stack\">object_is_on_stack</a>(void *<a class=\"id\" href=\"#obj\">obj</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#stack\">stack</a> = <a class=\"id\" href=\"#task_stack_page\">task_stack_page</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#obj\">obj</a> >= <a class=\"id\" href=\"#stack\">stack</a>) && (<a class=\"id\" href=\"#obj\">obj</a> &lt; (<a class=\"id\" href=\"#stack\">stack</a> + <a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>));", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#thread_info_cache_init\">thread_info_cache_init</a>(void);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_STACK_USAGE\">CONFIG_DEBUG_STACK_USAGE</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#stack_not_used\">stack_not_used</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#end_of_stack\">end_of_stack</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>do { <span class=\"ts\"/><span class=\"comment\">/* Skip over canary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>++;", 
"<span class=\"ts\"/>} while (!*<a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#n\">n</a> - (unsigned long)<a class=\"id\" href=\"#end_of_stack\">end_of_stack</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* set thread flags in other task's structures</span>", 
"<span class=\"comment\"> * - see asm/thread_info.h for TIF_xxxx flags available</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_ti_thread_flag\">set_ti_thread_flag</a>(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#flag\">flag</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_ti_thread_flag\">clear_ti_thread_flag</a>(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#flag\">flag</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_and_set_tsk_thread_flag\">test_and_set_tsk_thread_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_and_set_ti_thread_flag\">test_and_set_ti_thread_flag</a>(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#flag\">flag</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_and_clear_tsk_thread_flag\">test_and_clear_tsk_thread_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_and_clear_ti_thread_flag\">test_and_clear_ti_thread_flag</a>(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#flag\">flag</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_ti_thread_flag\">test_ti_thread_flag</a>(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#flag\">flag</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_tsk_need_resched\">set_tsk_need_resched</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#tsk\">tsk</a>,<a class=\"id\" href=\"#TIF_NEED_RESCHED\">TIF_NEED_RESCHED</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_tsk_need_resched\">clear_tsk_need_resched</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#tsk\">tsk</a>,<a class=\"id\" href=\"#TIF_NEED_RESCHED\">TIF_NEED_RESCHED</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_tsk_need_resched\">test_tsk_need_resched</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#tsk\">tsk</a>,<a class=\"id\" href=\"#TIF_NEED_RESCHED\">TIF_NEED_RESCHED</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#restart_syscall\">restart_syscall</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ERESTARTNOINTR\">ERESTARTNOINTR</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#signal_pending\">signal_pending</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>,<a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__fatal_signal_pending\">__fatal_signal_pending</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pending\">pending</a>.<a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#__fatal_signal_pending\">__fatal_signal_pending</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#signal_pending_state\">signal_pending_state</a>(long <a class=\"id\" href=\"#state\">state</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#state\">state</a> &amp; (<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a> | <a class=\"id\" href=\"#TASK_WAKEKILL\">TASK_WAKEKILL</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>) || <a class=\"id\" href=\"#__fatal_signal_pending\">__fatal_signal_pending</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#need_resched\">need_resched</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_NEED_RESCHED\">TIF_NEED_RESCHED</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cond_resched() and cond_resched_lock(): latency reduction via</span>", 
"<span class=\"comment\"> * explicit rescheduling in places that are safe. The return</span>", 
"<span class=\"comment\"> * value indicates whether a reschedule was done in fact.</span>", 
"<span class=\"comment\"> * cond_resched_lock() will drop the spinlock before scheduling,</span>", 
"<span class=\"comment\"> * cond_resched_softirq() will enable bhs before scheduling.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#_cond_resched\">_cond_resched</a>(void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cond_resched\">cond_resched</a>() ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__might_sleep\">__might_sleep</a>(<a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, 0);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_cond_resched\">_cond_resched</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"extern int <a class=\"id\" href=\"#__cond_resched_lock\">__cond_resched_lock</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREEMPT_LOCK_OFFSET\">PREEMPT_LOCK_OFFSET</a><span class=\"ts\"/><a class=\"id\" href=\"#PREEMPT_OFFSET\">PREEMPT_OFFSET</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREEMPT_LOCK_OFFSET\">PREEMPT_LOCK_OFFSET</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cond_resched_lock\">cond_resched_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__might_sleep\">__might_sleep</a>(<a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, <a class=\"id\" href=\"#PREEMPT_LOCK_OFFSET\">PREEMPT_LOCK_OFFSET</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cond_resched_lock\">__cond_resched_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"extern int <a class=\"id\" href=\"#__cond_resched_softirq\">__cond_resched_softirq</a>(void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cond_resched_softirq\">cond_resched_softirq</a>() ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__might_sleep\">__might_sleep</a>(<a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, <a class=\"id\" href=\"#SOFTIRQ_OFFSET\">SOFTIRQ_OFFSET</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cond_resched_softirq\">__cond_resched_softirq</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Does a critical section need to be broken due to another</span>", 
"<span class=\"comment\"> * task waiting?: (technically does not depend on CONFIG_PREEMPT,</span>", 
"<span class=\"comment\"> * but a general need for low latency)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#spin_needbreak\">spin_needbreak</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#spin_is_contended\">spin_is_contended</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Thread group CPU time accounting.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#thread_group_cputime\">thread_group_cputime</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#times\">times</a>);", 
"void <a class=\"id\" href=\"#thread_group_cputimer\">thread_group_cputimer</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#times\">times</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#thread_group_cputime_init\">thread_group_cputime_init</a>(struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputimer\">cputimer</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reevaluate whether the task has signals pending delivery.</span>", 
"<span class=\"comment\"> * Wake the task if so.</span>", 
"<span class=\"comment\"> * This is required every time the blocked sigset_t changes.</span>", 
"<span class=\"comment\"> * callers must hold sighand-&gt;siglock.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#recalc_sigpending_and_wake\">recalc_sigpending_and_wake</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"extern void <a class=\"id\" href=\"#recalc_sigpending\">recalc_sigpending</a>(void);", 
"", 
"extern void <a class=\"id\" href=\"#signal_wake_up\">signal_wake_up</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#resume_stopped\">resume_stopped</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wrappers for p-&gt;thread_info-&gt;cpu access. No-op on UP.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"extern long <a class=\"id\" href=\"#sched_setaffinity\">sched_setaffinity</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"extern long <a class=\"id\" href=\"#sched_getaffinity\">sched_getaffinity</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"extern void <a class=\"id\" href=\"#normalize_rt_tasks\">normalize_rt_tasks</a>(void);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_SCHED\">CONFIG_CGROUP_SCHED</a>", 
"", 
"extern struct <a class=\"id\" href=\"#task_group\">task_group</a> <a class=\"id\" href=\"#init_task_group\">init_task_group</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#sched_create_group\">sched_create_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"extern void <a class=\"id\" href=\"#sched_destroy_group\">sched_destroy_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>);", 
"extern void <a class=\"id\" href=\"#sched_move_task\">sched_move_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"extern int <a class=\"id\" href=\"#sched_group_set_shares\">sched_group_set_shares</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, unsigned long <a class=\"id\" href=\"#shares\">shares</a>);", 
"extern unsigned long <a class=\"id\" href=\"#sched_group_shares\">sched_group_shares</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"extern int <a class=\"id\" href=\"#sched_group_set_rt_runtime\">sched_group_set_rt_runtime</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      long <a class=\"id\" href=\"#rt_runtime_us\">rt_runtime_us</a>);", 
"extern long <a class=\"id\" href=\"#sched_group_rt_runtime\">sched_group_rt_runtime</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>);", 
"extern int <a class=\"id\" href=\"#sched_group_set_rt_period\">sched_group_set_rt_period</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      long <a class=\"id\" href=\"#rt_period_us\">rt_period_us</a>);", 
"extern long <a class=\"id\" href=\"#sched_group_rt_period\">sched_group_rt_period</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>);", 
"extern int <a class=\"id\" href=\"#sched_rt_can_attach\">sched_rt_can_attach</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#task_can_switch_user\">task_can_switch_user</a>(struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#up\">up</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TASK_XACCT\">CONFIG_TASK_XACCT</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_rchar\">add_rchar</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#amt\">amt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#ioac\">ioac</a>.<a class=\"id\" href=\"#rchar\">rchar</a> += <a class=\"id\" href=\"#amt\">amt</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_wchar\">add_wchar</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#amt\">amt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#ioac\">ioac</a>.<a class=\"id\" href=\"#wchar\">wchar</a> += <a class=\"id\" href=\"#amt\">amt</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_syscr\">inc_syscr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#ioac\">ioac</a>.<a class=\"id\" href=\"#syscr\">syscr</a>++;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_syscw\">inc_syscw</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#ioac\">ioac</a>.<a class=\"id\" href=\"#syscw\">syscw</a>++;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_rchar\">add_rchar</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#amt\">amt</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_wchar\">add_wchar</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#amt\">amt</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_syscr\">inc_syscr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_syscw\">inc_syscw</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#TASK_SIZE_OF\">TASK_SIZE_OF</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_SIZE_OF\">TASK_SIZE_OF</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/><a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call the function if the target task is executing on a CPU right now:</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#task_oncpu_function_call\">task_oncpu_function_call</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void (*<a class=\"id\" href=\"#func\">func</a>) (void *<a class=\"id\" href=\"#info\">info</a>), void *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MM_OWNER\">CONFIG_MM_OWNER</a>", 
"extern void <a class=\"id\" href=\"#mm_update_next_owner\">mm_update_next_owner</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"extern void <a class=\"id\" href=\"#mm_init_owner\">mm_init_owner</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mm_update_next_owner\">mm_update_next_owner</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mm_init_owner\">mm_init_owner</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MM_OWNER */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#task_rlimit\">task_rlimit</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#limit\">limit</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#task_rlimit_max\">task_rlimit_max</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#limit\">limit</a>].<a class=\"id\" href=\"#rlim_max\">rlim_max</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#rlimit\">rlimit</a>(unsigned int <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_rlimit\">task_rlimit</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#rlimit_max\">rlimit_max</a>(unsigned int <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_rlimit_max\">task_rlimit_max</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/ce/365a9f32a88f7ed383e635b2da36b84e824c4b.xr', __xr_tmp);
