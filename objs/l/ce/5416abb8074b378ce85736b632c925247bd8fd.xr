var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * transport_class.c - implementation of generic transport classes</span>", 
"<span class=\"comment\"> *                     using attribute_containers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2005 - James Bottomley &lt;James.Bottomley@steeleye.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is licensed under GPLv2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The basic idea here is to allow any \"device controller\" (which</span>", 
"<span class=\"comment\"> * would most often be a Host Bus Adapter to use the services of one</span>", 
"<span class=\"comment\"> * or more tranport classes for performing transport specific</span>", 
"<span class=\"comment\"> * services.  Transport specific services are things that the generic</span>", 
"<span class=\"comment\"> * command layer doesn't want to know about (speed settings, line</span>", 
"<span class=\"comment\"> * condidtioning, etc), but which the user might be interested in.</span>", 
"<span class=\"comment\"> * Thus, the HBA's use the routines exported by the transport classes</span>", 
"<span class=\"comment\"> * to perform these functions.  The transport classes export certain</span>", 
"<span class=\"comment\"> * values to the user via sysfs using attribute containers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: because not every HBA will care about every transport</span>", 
"<span class=\"comment\"> * attribute, there's a many to one relationship that goes like this:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * transport class&lt;-----attribute container&lt;----class device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Usually the attribute container is per-HBA, but the design doesn't</span>", 
"<span class=\"comment\"> * mandate that.  Although most of the services will be specific to</span>", 
"<span class=\"comment\"> * the actual external storage connection used by the HBA, the generic</span>", 
"<span class=\"comment\"> * transport class is framed entirely in terms of generic devices to</span>", 
"<span class=\"comment\"> * allow it to be used by any physical HBA in the system.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#attribute_container\">attribute_container</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#transport_class\">transport_class</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * transport_class_register - register an initial transport class</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @tclass:<span class=\"ts\"/>a pointer to the transport class structure to be initialised</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The transport class contains an embedded class which is used to</span>", 
"<span class=\"comment\"> * identify it.  The caller should initialise this structure with</span>", 
"<span class=\"comment\"> * zeros and then generic class must have been initialised with the</span>", 
"<span class=\"comment\"> * actual transport class unique name.  There's a macro</span>", 
"<span class=\"comment\"> * DECLARE_TRANSPORT_CLASS() to do this (declared classes still must</span>", 
"<span class=\"comment\"> * be registered).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or error on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#transport_class_register\">transport_class_register</a>(struct <a class=\"id\" href=\"#transport_class\">transport_class</a> *<a class=\"id\" href=\"#tclass\">tclass</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#class_register\">class_register</a>(&amp;<a class=\"id\" href=\"#tclass\">tclass</a>-><a class=\"id\" href=\"#class\">class</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#transport_class_register\">transport_class_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * transport_class_unregister - unregister a previously registered class</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @tclass: The transport class to unregister</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called prior to deallocating the memory for the transport</span>", 
"<span class=\"comment\"> * class.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#transport_class_unregister\">transport_class_unregister</a>(struct <a class=\"id\" href=\"#transport_class\">transport_class</a> *<a class=\"id\" href=\"#tclass\">tclass</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_unregister\">class_unregister</a>(&amp;<a class=\"id\" href=\"#tclass\">tclass</a>-><a class=\"id\" href=\"#class\">class</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#transport_class_unregister\">transport_class_unregister</a>);", 
"", 
"static int <a class=\"id\" href=\"#anon_transport_dummy_function\">anon_transport_dummy_function</a>(struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tc\">tc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* do nothing */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * anon_transport_class_register - register an anonymous class</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @atc: The anon transport class to register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The anonymous transport class contains both a transport class and a</span>", 
"<span class=\"comment\"> * container.  The idea of an anonymous class is that it never</span>", 
"<span class=\"comment\"> * actually has any device attributes associated with it (and thus</span>", 
"<span class=\"comment\"> * saves on container storage).  So it can only be used for triggering</span>", 
"<span class=\"comment\"> * events.  Use prezero and then use DECLARE_ANON_TRANSPORT_CLASS() to</span>", 
"<span class=\"comment\"> * initialise the anon transport class storage.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#anon_transport_class_register\">anon_transport_class_register</a>(struct <a class=\"id\" href=\"#anon_transport_class\">anon_transport_class</a> *<a class=\"id\" href=\"#atc\">atc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atc\">atc</a>-><a class=\"id\" href=\"#container\">container</a>.<a class=\"id\" href=\"#class\">class</a> = &amp;<a class=\"id\" href=\"#atc\">atc</a>-><a class=\"id\" href=\"#tclass\">tclass</a>.<a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_set_no_classdevs\">attribute_container_set_no_classdevs</a>(&amp;<a class=\"id\" href=\"#atc\">atc</a>-><a class=\"id\" href=\"#container\">container</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#attribute_container_register\">attribute_container_register</a>(&amp;<a class=\"id\" href=\"#atc\">atc</a>-><a class=\"id\" href=\"#container\">container</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atc\">atc</a>-><a class=\"id\" href=\"#tclass\">tclass</a>.<a class=\"id\" href=\"#setup\">setup</a> = <a class=\"id\" href=\"#anon_transport_dummy_function\">anon_transport_dummy_function</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atc\">atc</a>-><a class=\"id\" href=\"#tclass\">tclass</a>.<a class=\"id\" href=\"#remove\">remove</a> = <a class=\"id\" href=\"#anon_transport_dummy_function\">anon_transport_dummy_function</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#anon_transport_class_register\">anon_transport_class_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * anon_transport_class_unregister - unregister an anon class</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @atc: Pointer to the anon transport class to unregister</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called prior to deallocating the memory for the anon</span>", 
"<span class=\"comment\"> * transport class.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#anon_transport_class_unregister\">anon_transport_class_unregister</a>(struct <a class=\"id\" href=\"#anon_transport_class\">anon_transport_class</a> *<a class=\"id\" href=\"#atc\">atc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#attribute_container_unregister\">attribute_container_unregister</a>(&amp;<a class=\"id\" href=\"#atc\">atc</a>-><a class=\"id\" href=\"#container\">container</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#anon_transport_class_unregister\">anon_transport_class_unregister</a>);", 
"", 
"static int <a class=\"id\" href=\"#transport_setup_classdev\">transport_setup_classdev</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#transport_class\">transport_class</a> *<a class=\"id\" href=\"#tclass\">tclass</a> = <a class=\"id\" href=\"#class_to_transport_class\">class_to_transport_class</a>(<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#class\">class</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tcont\">tcont</a> = <a class=\"id\" href=\"#attribute_container_to_transport_container\">attribute_container_to_transport_container</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tclass\">tclass</a>-><a class=\"id\" href=\"#setup\">setup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tclass\">tclass</a>-><a class=\"id\" href=\"#setup\">setup</a>(<a class=\"id\" href=\"#tcont\">tcont</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#classdev\">classdev</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * transport_setup_device - declare a new dev for transport class association but don't make it visible yet.</span>", 
"<span class=\"comment\"> * @dev: the generic device representing the entity being added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Usually, dev represents some component in the HBA system (either</span>", 
"<span class=\"comment\"> * the HBA itself or a device remote across the HBA bus).  This</span>", 
"<span class=\"comment\"> * routine is simply a trigger point to see if any set of transport</span>", 
"<span class=\"comment\"> * classes wishes to associate with the added device.  This allocates</span>", 
"<span class=\"comment\"> * storage for the class device and initialises it, but does not yet</span>", 
"<span class=\"comment\"> * add it to the system or add attributes to it (you do this with</span>", 
"<span class=\"comment\"> * transport_add_device).  If you have no need for a separate setup</span>", 
"<span class=\"comment\"> * and add operations, use transport_register_device (see</span>", 
"<span class=\"comment\"> * transport_class.h).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#transport_setup_device\">transport_setup_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_add_device\">attribute_container_add_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#transport_setup_classdev\">transport_setup_classdev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#transport_setup_device\">transport_setup_device</a>);", 
"", 
"static int <a class=\"id\" href=\"#transport_add_class_device\">transport_add_class_device</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#attribute_container_add_class_device\">attribute_container_add_class_device</a>(<a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tcont\">tcont</a> = ", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_to_transport_container\">attribute_container_to_transport_container</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a> && <a class=\"id\" href=\"#tcont\">tcont</a>-><a class=\"id\" href=\"#statistics\">statistics</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_create_group\">sysfs_create_group</a>(&amp;<a class=\"id\" href=\"#classdev\">classdev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#tcont\">tcont</a>-><a class=\"id\" href=\"#statistics\">statistics</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * transport_add_device - declare a new dev for transport class association</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: the generic device representing the entity being added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Usually, dev represents some component in the HBA system (either</span>", 
"<span class=\"comment\"> * the HBA itself or a device remote across the HBA bus).  This</span>", 
"<span class=\"comment\"> * routine is simply a trigger point used to add the device to the</span>", 
"<span class=\"comment\"> * system and register attributes for it.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#transport_add_device\">transport_add_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_device_trigger\">attribute_container_device_trigger</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#transport_add_class_device\">transport_add_class_device</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#transport_add_device\">transport_add_device</a>);", 
"", 
"static int <a class=\"id\" href=\"#transport_configure\">transport_configure</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#transport_class\">transport_class</a> *<a class=\"id\" href=\"#tclass\">tclass</a> = <a class=\"id\" href=\"#class_to_transport_class\">class_to_transport_class</a>(<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#class\">class</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tcont\">tcont</a> = <a class=\"id\" href=\"#attribute_container_to_transport_container\">attribute_container_to_transport_container</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tclass\">tclass</a>-><a class=\"id\" href=\"#configure\">configure</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tclass\">tclass</a>-><a class=\"id\" href=\"#configure\">configure</a>(<a class=\"id\" href=\"#tcont\">tcont</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#cdev\">cdev</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * transport_configure_device - configure an already set up device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: generic device representing device to be configured</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The idea of configure is simply to provide a point within the setup</span>", 
"<span class=\"comment\"> * process to allow the transport class to extract information from a</span>", 
"<span class=\"comment\"> * device after it has been setup.  This is used in SCSI because we</span>", 
"<span class=\"comment\"> * have to have a setup device to begin using the HBA, but after we</span>", 
"<span class=\"comment\"> * send the initial inquiry, we use configure to extract the device</span>", 
"<span class=\"comment\"> * parameters.  The device need not have been added to be configured.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#transport_configure_device\">transport_configure_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_device_trigger\">attribute_container_device_trigger</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#transport_configure\">transport_configure</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#transport_configure_device\">transport_configure_device</a>);", 
"", 
"static int <a class=\"id\" href=\"#transport_remove_classdev\">transport_remove_classdev</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tcont\">tcont</a> = ", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_to_transport_container\">attribute_container_to_transport_container</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#transport_class\">transport_class</a> *<a class=\"id\" href=\"#tclass\">tclass</a> = <a class=\"id\" href=\"#class_to_transport_class\">class_to_transport_class</a>(<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#class\">class</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tclass\">tclass</a>-><a class=\"id\" href=\"#remove\">remove</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tclass\">tclass</a>-><a class=\"id\" href=\"#remove\">remove</a>(<a class=\"id\" href=\"#tcont\">tcont</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#classdev\">classdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tclass\">tclass</a>-><a class=\"id\" href=\"#remove\">remove</a> != <a class=\"id\" href=\"#anon_transport_dummy_function\">anon_transport_dummy_function</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcont\">tcont</a>-><a class=\"id\" href=\"#statistics\">statistics</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_group\">sysfs_remove_group</a>(&amp;<a class=\"id\" href=\"#classdev\">classdev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#tcont\">tcont</a>-><a class=\"id\" href=\"#statistics\">statistics</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_class_device_del\">attribute_container_class_device_del</a>(<a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * transport_remove_device - remove the visibility of a device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: generic device to remove</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call removes the visibility of the device (to the user from</span>", 
"<span class=\"comment\"> * sysfs), but does not destroy it.  To eliminate a device entirely</span>", 
"<span class=\"comment\"> * you must also call transport_destroy_device.  If you don't need to</span>", 
"<span class=\"comment\"> * do remove and destroy as separate operations, use</span>", 
"<span class=\"comment\"> * transport_unregister_device() (see transport_class.h) which will</span>", 
"<span class=\"comment\"> * perform both calls for you.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#transport_remove_device\">transport_remove_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_device_trigger\">attribute_container_device_trigger</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#transport_remove_classdev\">transport_remove_classdev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#transport_remove_device\">transport_remove_device</a>);", 
"", 
"static void <a class=\"id\" href=\"#transport_destroy_classdev\">transport_destroy_classdev</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
];
xr_frag_insert('l/ce/5416abb8074b378ce85736b632c925247bd8fd.xr', __xr_tmp);
