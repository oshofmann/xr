var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/mm/swap_state.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds</span>", 
"<span class=\"comment\"> *  Swap reorganised 29.12.95, Stephen Tweedie</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Rewritten to use page cache, (C) 1998 Stephen Tweedie</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swapops\">swapops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagevec\">pagevec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#migrate\">migrate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page_cgroup\">page_cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * swapper_space is a fiction, retained to simplify the path through</span>", 
"<span class=\"comment\"> * vmscan's shrink_page_list, to make sync_page look nicer, and to allow</span>", 
"<span class=\"comment\"> * future use of radix_tree tags in the swap cache.</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#swap_aops\">swap_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/>= <a class=\"id\" href=\"#swap_writepage\">swap_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a><span class=\"ts\"/>= <a class=\"id\" href=\"#__set_page_dirty_nobuffers\">__set_page_dirty_nobuffers</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#migratepage\">migratepage</a><span class=\"ts\"/>= <a class=\"id\" href=\"#migrate_page\">migrate_page</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> <a class=\"id\" href=\"#swap_backing_dev_info\">swap_backing_dev_info</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"swap\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#capabilities\">capabilities</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BDI_CAP_NO_ACCT_AND_WRITEBACK\">BDI_CAP_NO_ACCT_AND_WRITEBACK</a> | <a class=\"id\" href=\"#BDI_CAP_SWAP_BACKED\">BDI_CAP_SWAP_BACKED</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unplug_io_fn\">unplug_io_fn</a><span class=\"ts\"/>= <a class=\"id\" href=\"#swap_unplug_io_fn\">swap_unplug_io_fn</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#address_space\">address_space</a> <a class=\"id\" href=\"#swapper_space\">swapper_space</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#page_tree\">page_tree</a><span class=\"ts\"/>= <a class=\"id\" href=\"#RADIX_TREE_INIT\">RADIX_TREE_INIT</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>|<a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tree_lock\">tree_lock</a><span class=\"ts\"/>= <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#swapper_space\">swapper_space</a>.<a class=\"id\" href=\"#tree_lock\">tree_lock</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#a_ops\">a_ops</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#swap_aops\">swap_aops</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#i_mmap_nonlinear\">i_mmap_nonlinear</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#swapper_space\">swapper_space</a>.<a class=\"id\" href=\"#i_mmap_nonlinear\">i_mmap_nonlinear</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> = &amp;<a class=\"id\" href=\"#swap_backing_dev_info\">swap_backing_dev_info</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INC_CACHE_INFO\">INC_CACHE_INFO</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { <a class=\"id\" href=\"#swap_cache_info\">swap_cache_info</a>.<a class=\"id\" href=\"#x\">x</a>++; } while (0)", 
"", 
"static struct {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#add_total\">add_total</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#del_total\">del_total</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#find_success\">find_success</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#find_total\">find_total</a>;", 
"} <a class=\"id\" href=\"#swap_cache_info\">swap_cache_info</a>;", 
"", 
"void <a class=\"id\" href=\"#show_swap_cache_info\">show_swap_cache_info</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%lu pages in swap cache\\n\", <a class=\"id\" href=\"#total_swapcache_pages\">total_swapcache_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Swap cache stats: add %lu, delete %lu, find %lu/%lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_cache_info\">swap_cache_info</a>.<a class=\"id\" href=\"#add_total\">add_total</a>, <a class=\"id\" href=\"#swap_cache_info\">swap_cache_info</a>.<a class=\"id\" href=\"#del_total\">del_total</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_cache_info\">swap_cache_info</a>.<a class=\"id\" href=\"#find_success\">find_success</a>, <a class=\"id\" href=\"#swap_cache_info\">swap_cache_info</a>.<a class=\"id\" href=\"#find_total\">find_total</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Free swap  = %ldkB\\n\", <a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Total swap = %lukB\\n\", <a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a> << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __add_to_swap_cache resembles add_to_page_cache_locked on swapper_space,</span>", 
"<span class=\"comment\"> * but sets SwapCache flag and private instead of mapping and index.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__add_to_swap_cache\">__add_to_swap_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageSwapBacked\">PageSwapBacked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageSwapCache\">SetPageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>.<a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#radix_tree_insert\">radix_tree_insert</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>.<a class=\"id\" href=\"#page_tree\">page_tree</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_swapcache_pages\">total_swapcache_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_FILE_PAGES\">NR_FILE_PAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INC_CACHE_INFO\">INC_CACHE_INFO</a>(<a class=\"id\" href=\"#add_total\">add_total</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>.<a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only the context which have set SWAP_HAS_CACHE flag</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * would call add_to_swap_cache().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So add_to_swap_cache() doesn't returns -EEXIST.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, 0UL);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageSwapCache\">ClearPageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"", 
"int <a class=\"id\" href=\"#add_to_swap_cache\">add_to_swap_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__add_to_swap_cache\">__add_to_swap_cache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This must be called only on pages that have</span>", 
"<span class=\"comment\"> * been verified to be in the swap cache.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__delete_from_swap_cache\">__delete_from_swap_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>.<a class=\"id\" href=\"#page_tree\">page_tree</a>, <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageSwapCache\">ClearPageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_swapcache_pages\">total_swapcache_pages</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_FILE_PAGES\">NR_FILE_PAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INC_CACHE_INFO\">INC_CACHE_INFO</a>(<a class=\"id\" href=\"#del_total\">del_total</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * add_to_swap - allocate swap space for a page</span>", 
"<span class=\"comment\"> * @page: page we want to move to swap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate swap space for the page and add the page to the</span>", 
"<span class=\"comment\"> * swap cache.  Caller needs to hold the page lock. </span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#add_to_swap\">add_to_swap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#get_swap_page\">get_swap_page</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Radix-tree node allocations from PF_MEMALLOC contexts could</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completely exhaust the page allocator. __GFP_NOMEMALLOC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stops emergency reserves from being allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: this could cause a theoretical memory reclaim</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * deadlock in the swap out path.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Add it to the swap cache and mark it dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_to_swap_cache\">add_to_swap_cache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>|<a class=\"id\" href=\"#__GFP_NOMEMALLOC\">__GFP_NOMEMALLOC</a>|<a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {<span class=\"ts\"/><span class=\"comment\">/* Success */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageDirty\">SetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"comment\">/* -ENOMEM radix-tree allocation failure */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * add_to_swap_cache() doesn't return -EEXIST, so we can safely</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * clear SWAP_HAS_CACHE flag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swapcache_free\">swapcache_free</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This must be called only on pages that have</span>", 
"<span class=\"comment\"> * been verified to be in the swap cache and locked.</span>", 
"<span class=\"comment\"> * It will never put the page into the free list,</span>", 
"<span class=\"comment\"> * the caller has a reference on the page.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#delete_from_swap_cache\">delete_from_swap_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>.<a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__delete_from_swap_cache\">__delete_from_swap_cache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>.<a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swapcache_free\">swapcache_free</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * If we are the only user, then try to free up the swap cache. </span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Its ok to check for PageSwapCache without the page lock</span>", 
"<span class=\"comment\"> * here because we are going to recheck again inside</span>", 
"<span class=\"comment\"> * try_to_free_swap() _with_ the lock.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- Marcelo</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_swap_cache\">free_swap_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>) && !<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_free_swap\">try_to_free_swap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * Perform a free_page(), also freeing any swap cache associated with</span>", 
"<span class=\"comment\"> * this page if it is the last user of the page.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_page_and_swap_cache\">free_page_and_swap_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_swap_cache\">free_swap_cache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Passed an array of pages, drop them all from swapcache and then release</span>", 
"<span class=\"comment\"> * them.  They are removed from the LRU and freed if this is their last use.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_pages_and_swap_cache\">free_pages_and_swap_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#pages\">pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#todo\">todo</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#PAGEVEC_SIZE\">PAGEVEC_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#todo\">todo</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_swap_cache\">free_swap_cache</a>(<a class=\"id\" href=\"#pagep\">pagep</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_pages\">release_pages</a>(<a class=\"id\" href=\"#pagep\">pagep</a>, <a class=\"id\" href=\"#todo\">todo</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagep\">pagep</a> += <a class=\"id\" href=\"#todo\">todo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> -= <a class=\"id\" href=\"#todo\">todo</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lookup a swap entry in the swap cache. A found page will be returned</span>", 
"<span class=\"comment\"> * unlocked and with its refcount incremented - we rely on the kernel</span>", 
"<span class=\"comment\"> * lock getting page table operations atomic even if we drop the page</span>", 
"<span class=\"comment\"> * lock before returning.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#lookup_swap_cache\">lookup_swap_cache</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INC_CACHE_INFO\">INC_CACHE_INFO</a>(<a class=\"id\" href=\"#find_success\">find_success</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INC_CACHE_INFO\">INC_CACHE_INFO</a>(<a class=\"id\" href=\"#find_total\">find_total</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * Locate a page of swap in physical memory, reserving swap cache space</span>", 
"<span class=\"comment\"> * and reading the disk if it is not already cached.</span>", 
"<span class=\"comment\"> * A failure return means that either the page allocation failed or that</span>", 
"<span class=\"comment\"> * the swap entry is no longer in use.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#read_swap_cache_async\">read_swap_cache_async</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#found_page\">found_page</a>, *<a class=\"id\" href=\"#new_page\">new_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * First check the swap cache.  Since this is normally</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * called after lookup_swap_cache() failed, re-calling</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that would confuse statistics.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found_page\">found_page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found_page\">found_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get a new page to read into from swap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_page\">new_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_page\">new_page</a> = <a class=\"id\" href=\"#alloc_page_vma\">alloc_page_vma</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_page\">new_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Out of memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * call radix_tree_preload() while we can wait.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Swap entry may have been freed since our caller observed it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#swapcache_prepare\">swapcache_prepare</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>) {<span class=\"ts\"/><span class=\"comment\">/* seems racy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* swp entry is obsolete ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* May fail (-ENOMEM) if radix-tree node allocation failed. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_page_locked\">__set_page_locked</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageSwapBacked\">SetPageSwapBacked</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__add_to_swap_cache\">__add_to_swap_cache</a>(<a class=\"id\" href=\"#new_page\">new_page</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#err\">err</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Initiate read into locked page and return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_cache_add_anon\">lru_cache_add_anon</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_readpage\">swap_readpage</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#new_page\">new_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageSwapBacked\">ClearPageSwapBacked</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_page_locked\">__clear_page_locked</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * add_to_swap_cache() doesn't return -EEXIST, so we can safely</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * clear SWAP_HAS_CACHE flag.</span>", 
];
xr_frag_insert('l/ce/7cf937f48905235dc717bf33d194ffccdf975f.xr', __xr_tmp);
