var __xr_tmp = [
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#can_probe\">can_probe</a>(unsigned long <a class=\"id\" href=\"#paddr\">paddr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn\">insn</a> <a class=\"id\" href=\"#insn\">insn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#MAX_INSN_SIZE\">MAX_INSN_SIZE</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#__dummy_buf\">__dummy_buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Decode instructions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#paddr\">paddr</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#paddr\">paddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_insn_init\">kernel_insn_init</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>, (void *)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_opcode\">insn_get_opcode</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check if the instruction has been modified by another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kprobe, in which case we replace the breakpoint by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * original instruction in our buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0] == <a class=\"id\" href=\"#BREAKPOINT_INSTRUCTION\">BREAKPOINT_INSTRUCTION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#recover_probed_instruction\">recover_probed_instruction</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Another debugging subsystem might insert</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this breakpoint. In that case, we can't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * recover it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_insn_init\">kernel_insn_init</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_length\">insn_get_length</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#paddr\">paddr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns non-zero if opcode modifies the interrupt flag.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#is_IF_modifier\">is_IF_modifier</a>(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip prefixes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a> = <a class=\"id\" href=\"#skip_prefixes\">skip_prefixes</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"", 
"<span class=\"ts\"/>switch (*<a class=\"id\" href=\"#insn\">insn</a>) {", 
"<span class=\"ts\"/>case 0xfa:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cli */</span>", 
"<span class=\"ts\"/>case 0xfb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sti */</span>", 
"<span class=\"ts\"/>case 0xcf:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* iret/iretd */</span>", 
"<span class=\"ts\"/>case 0x9d:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* popf/popfd */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy an instruction and adjust the displacement if the instruction</span>", 
"<span class=\"comment\"> * uses the %rip-relative addressing mode.</span>", 
"<span class=\"comment\"> * If it does, Return the address of the 32-bit displacement word.</span>", 
"<span class=\"comment\"> * If not, return null.</span>", 
"<span class=\"comment\"> * Only applicable to 64-bit x86.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__copy_instruction\">__copy_instruction</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#recover\">recover</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn\">insn</a> <a class=\"id\" href=\"#insn\">insn</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#MAX_INSN_SIZE\">MAX_INSN_SIZE</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_insn_init\">kernel_insn_init</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#recover\">recover</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_opcode\">insn_get_opcode</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0] == <a class=\"id\" href=\"#BREAKPOINT_INSTRUCTION\">BREAKPOINT_INSTRUCTION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#recover_probed_instruction\">recover_probed_instruction</a>(<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long)<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_insn_init\">kernel_insn_init</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_get_length\">insn_get_length</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#kaddr\">kaddr</a>, <a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn_rip_relative\">insn_rip_relative</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#newdisp\">newdisp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#disp\">disp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_insn_init\">kernel_insn_init</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#dest\">dest</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_displacement\">insn_get_displacement</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The copied instruction uses the %rip-relative addressing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mode.  Adjust the displacement for the difference between</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the original location of this instruction and the location</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the copy that will actually be run.  The tricky bit here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is making sure that the sign extension happens correctly in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this calculation, since we need a signed 32-bit result to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be sign-extended to 64 bits when it's added to the %rip</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * value and yield the same 64-bit result that the sign-</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * extension of the original signed 32-bit displacement would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have given.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newdisp\">newdisp</a> = (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#src\">src</a> + (<a class=\"id\" href=\"#s64\">s64</a>) <a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#value\">value</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#s64\">s64</a>) (<a class=\"id\" href=\"#s32\">s32</a>) <a class=\"id\" href=\"#newdisp\">newdisp</a> != <a class=\"id\" href=\"#newdisp\">newdisp</a>); <span class=\"comment\">/* Sanity check.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disp\">disp</a> = (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#dest\">dest</a> + <a class=\"id\" href=\"#insn_offset_displacement\">insn_offset_displacement</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#s32\">s32</a> *) <a class=\"id\" href=\"#disp\">disp</a> = (<a class=\"id\" href=\"#s32\">s32</a>) <a class=\"id\" href=\"#newdisp\">newdisp</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_copy_kprobe\">arch_copy_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Copy an instruction without recovering int3, because it will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * put by another subsystem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__copy_instruction\">__copy_instruction</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#can_boost\">can_boost</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#boostable\">boostable</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#boostable\">boostable</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#opcode\">opcode</a> = *<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_prepare_kprobe\">arch_prepare_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alternatives_text_reserved\">alternatives_text_reserved</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#can_probe\">can_probe</a>((unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EILSEQ\">EILSEQ</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* insn: must be on special executable page on x86. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a> = <a class=\"id\" href=\"#get_insn_slot\">get_insn_slot</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_copy_kprobe\">arch_copy_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_arm_kprobe\">arch_arm_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#text_poke\">text_poke</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, ((unsigned char []){<a class=\"id\" href=\"#BREAKPOINT_INSTRUCTION\">BREAKPOINT_INSTRUCTION</a>}), 1);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_disarm_kprobe\">arch_disarm_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#text_poke\">text_poke</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#opcode\">opcode</a>, 1);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_remove_kprobe\">arch_remove_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_insn_slot\">free_insn_slot</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a>, (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#boostable\">boostable</a> == 1));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#save_previous_kprobe\">save_previous_kprobe</a>(struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#prev_kprobe\">prev_kprobe</a>.<a class=\"id\" href=\"#kp\">kp</a> = <a class=\"id\" href=\"#kprobe_running\">kprobe_running</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#prev_kprobe\">prev_kprobe</a>.<a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#prev_kprobe\">prev_kprobe</a>.<a class=\"id\" href=\"#old_flags\">old_flags</a> = <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_old_flags\">kprobe_old_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#prev_kprobe\">prev_kprobe</a>.<a class=\"id\" href=\"#saved_flags\">saved_flags</a> = <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_saved_flags\">kprobe_saved_flags</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#restore_previous_kprobe\">restore_previous_kprobe</a>(struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#current_kprobe\">current_kprobe</a>) = <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#prev_kprobe\">prev_kprobe</a>.<a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> = <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#prev_kprobe\">prev_kprobe</a>.<a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_old_flags\">kprobe_old_flags</a> = <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#prev_kprobe\">prev_kprobe</a>.<a class=\"id\" href=\"#old_flags\">old_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_saved_flags\">kprobe_saved_flags</a> = <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#prev_kprobe\">prev_kprobe</a>.<a class=\"id\" href=\"#saved_flags\">saved_flags</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#set_current_kprobe\">set_current_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#current_kprobe\">current_kprobe</a>) = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_saved_flags\">kprobe_saved_flags</a> = <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_old_flags\">kprobe_old_flags</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a> | <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_IF_modifier\">is_IF_modifier</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_saved_flags\">kprobe_saved_flags</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#clear_btf\">clear_btf</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debugctl\">debugctl</a> = <a class=\"id\" href=\"#get_debugctlmsr\">get_debugctlmsr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugctl\">debugctl</a> &= ~<a class=\"id\" href=\"#DEBUGCTLMSR_BTF\">DEBUGCTLMSR_BTF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_debugctlmsr\">update_debugctlmsr</a>(<a class=\"id\" href=\"#debugctl\">debugctl</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#restore_btf\">restore_btf</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debugctl\">debugctl</a> = <a class=\"id\" href=\"#get_debugctlmsr\">get_debugctlmsr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugctl\">debugctl</a> |= <a class=\"id\" href=\"#DEBUGCTLMSR_BTF\">DEBUGCTLMSR_BTF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_debugctlmsr\">update_debugctlmsr</a>(<a class=\"id\" href=\"#debugctl\">debugctl</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_prepare_kretprobe\">arch_prepare_kretprobe</a>(struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#sara\">sara</a> = <a class=\"id\" href=\"#stack_addr\">stack_addr</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#ret_addr\">ret_addr</a> = (<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *) *<a class=\"id\" href=\"#sara\">sara</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Replace the return addr with trampoline addr */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#sara\">sara</a> = (unsigned long) &amp;<a class=\"id\" href=\"#kretprobe_trampoline\">kretprobe_trampoline</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_OPTPROBES\">CONFIG_OPTPROBES</a>", 
"static int  <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#setup_detour_execution\">setup_detour_execution</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#reenter\">reenter</a>);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#setup_detour_execution\">setup_detour_execution</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#reenter\">reenter</a>) (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#setup_singlestep\">setup_singlestep</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a>, int <a class=\"id\" href=\"#reenter\">reenter</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_detour_execution\">setup_detour_execution</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#reenter\">reenter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#boostable\">boostable</a> == 1 && !<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Boost up -- we can execute copied instructions directly */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#reenter\">reenter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_current_kprobe\">reset_current_kprobe</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Reentering boosted probe doesn't reset current_kprobe,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nor set current_kprobe, because it doesn't use single</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * stepping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reenter\">reenter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_previous_kprobe\">save_previous_kprobe</a>(<a class=\"id\" href=\"#kcb\">kcb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_kprobe\">set_current_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#kcb\">kcb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> = <a class=\"id\" href=\"#KPROBE_REENTER\">KPROBE_REENTER</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> = <a class=\"id\" href=\"#KPROBE_HIT_SS\">KPROBE_HIT_SS</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Prepare real single stepping */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_btf\">clear_btf</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* single step inline if the instruction is an int3 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#opcode\">opcode</a> == <a class=\"id\" href=\"#BREAKPOINT_INSTRUCTION\">BREAKPOINT_INSTRUCTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We have reentered the kprobe_handler(), since another probe was hit while</span>", 
"<span class=\"comment\"> * within the handler. We save the original kprobes variables and just single</span>", 
"<span class=\"comment\"> * step on the instruction of the new probe without calling any user handlers.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#reenter_kprobe\">reenter_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KPROBE_HIT_SSDONE\">KPROBE_HIT_SSDONE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KPROBE_HIT_ACTIVE\">KPROBE_HIT_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobes_inc_nmissed_count\">kprobes_inc_nmissed_count</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_singlestep\">setup_singlestep</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#kcb\">kcb</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KPROBE_HIT_SS\">KPROBE_HIT_SS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A probe has been hit in the codepath leading up to, or just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * after, single-stepping of a probed instruction. This entire</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * codepath should strictly reside in .kprobes.text section.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Raise a BUG or we'll continue in an endless reentering loop</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and eventually a stack overflow.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Unrecoverable kprobe detected at %p.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_kprobe\">dump_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* impossible cases */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interrupts are disabled on entry as trap3 is an interrupt gate and they</span>", 
"<span class=\"comment\"> * remain disabled throughout this function.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kprobe_handler\">kprobe_handler</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#addr\">addr</a>;", 
];
xr_frag_insert('l/ce/8a2cf22aa83f94e56f76647b80cc58bb42d93c.xr', __xr_tmp);
