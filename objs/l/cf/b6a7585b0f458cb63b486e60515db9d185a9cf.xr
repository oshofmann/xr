var __xr_tmp = [
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"int <a class=\"id\" href=\"#sysctl_min_unmapped_ratio_sysctl_handler\">sysctl_min_unmapped_ratio_sysctl_handler</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone\">for_each_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#min_unmapped_pages\">min_unmapped_pages</a> = (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_min_unmapped_ratio\">sysctl_min_unmapped_ratio</a>) / 100;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#sysctl_min_slab_ratio_sysctl_handler\">sysctl_min_slab_ratio_sysctl_handler</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone\">for_each_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#min_slab_pages\">min_slab_pages</a> = (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_min_slab_ratio\">sysctl_min_slab_ratio</a>) / 100;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lowmem_reserve_ratio_sysctl_handler - just a wrapper around</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>proc_dointvec() so that we can call setup_per_zone_lowmem_reserve()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>whenever sysctl_lowmem_reserve_ratio changes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The reserve ratio obviously has absolutely no relation with the</span>", 
"<span class=\"comment\"> * minimum watermarks. The lowmem reserve ratio can only make sense</span>", 
"<span class=\"comment\"> * if in function of the boot time zone sizes.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#lowmem_reserve_ratio_sysctl_handler\">lowmem_reserve_ratio_sysctl_handler</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_per_zone_lowmem_reserve\">setup_per_zone_lowmem_reserve</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * percpu_pagelist_fraction - changes the pcp-&gt;high for each zone on each</span>", 
"<span class=\"comment\"> * cpu.  It is the fraction of total pages in each zone that a hot per cpu pagelist</span>", 
"<span class=\"comment\"> * can have before it gets flushed back to buddy allocator.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#percpu_pagelist_fraction_sysctl_handler\">percpu_pagelist_fraction_sysctl_handler</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#write\">write</a> || (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long  <a class=\"id\" href=\"#high\">high</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#high\">high</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a> / <a class=\"id\" href=\"#percpu_pagelist_fraction\">percpu_pagelist_fraction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_pagelist_highmark\">setup_pagelist_highmark</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>, <a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#high\">high</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#hashdist\">hashdist</a> = <a class=\"id\" href=\"#HASHDIST_DEFAULT\">HASHDIST_DEFAULT</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_hashdist\">set_hashdist</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hashdist\">hashdist</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#str\">str</a>, 0);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"hashdist=\", <a class=\"id\" href=\"#set_hashdist\">set_hashdist</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * allocate a large system hash table from bootmem</span>", 
"<span class=\"comment\"> * - it is assumed that the hash table must contain an exact power-of-2</span>", 
"<span class=\"comment\"> *   quantity of entries</span>", 
"<span class=\"comment\"> * - limit is the number of hash buckets, not the total allocation size</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#alloc_large_system_hash\">alloc_large_system_hash</a>(const char *<a class=\"id\" href=\"#tablename\">tablename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#bucketsize\">bucketsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#numentries\">numentries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#scale\">scale</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int *<a class=\"id\" href=\"#_hash_shift\">_hash_shift</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int *<a class=\"id\" href=\"#_hash_mask\">_hash_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#log2qty\">log2qty</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allow the kernel cmdline to have a say */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#numentries\">numentries</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* round applicable memory size up to nearest megabyte */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> = <a class=\"id\" href=\"#nr_kernel_pages\">nr_kernel_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> += (1UL << (20 - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> >>= 20 - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> <<= 20 - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* limit to 1 bucket per 2^scale bytes of low memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scale\">scale</a> &gt; <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> >>= (<a class=\"id\" href=\"#scale\">scale</a> - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> <<= (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - <a class=\"id\" href=\"#scale\">scale</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure we've got at least a 0-order allocation.. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#HASH_SMALL\">HASH_SMALL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Makes no sense without HASH_EARLY */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#HASH_EARLY\">HASH_EARLY</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#numentries\">numentries</a> >> *<a class=\"id\" href=\"#_hash_shift\">_hash_shift</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> = 1UL << *<a class=\"id\" href=\"#_hash_shift\">_hash_shift</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#numentries\">numentries</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#numentries\">numentries</a> * <a class=\"id\" href=\"#bucketsize\">bucketsize</a>) &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / <a class=\"id\" href=\"#bucketsize\">bucketsize</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> = <a class=\"id\" href=\"#roundup_pow_of_two\">roundup_pow_of_two</a>(<a class=\"id\" href=\"#numentries\">numentries</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* limit allocation size to 1/16 total memory by default */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = ((unsigned long long)<a class=\"id\" href=\"#nr_all_pages\">nr_all_pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) >> 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#bucketsize\">bucketsize</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#numentries\">numentries</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numentries\">numentries</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#log2qty\">log2qty</a> = <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#numentries\">numentries</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#bucketsize\">bucketsize</a> << <a class=\"id\" href=\"#log2qty\">log2qty</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#HASH_EARLY\">HASH_EARLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#alloc_bootmem_nopanic\">alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#hashdist\">hashdist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#__vmalloc\">__vmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If bucketsize is not a power-of-two, we may free</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * some pages at the end of hash table which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * alloc_pages_exact() automatically does</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>) &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#alloc_pages_exact\">alloc_pages_exact</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_alloc\">kmemleak_alloc</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#table\">table</a> && <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> && --<a class=\"id\" href=\"#log2qty\">log2qty</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table\">table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Failed to allocate %s hash table\\n\", <a class=\"id\" href=\"#tablename\">tablename</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s hash table entries: %ld (order: %d, %lu bytes)\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#tablename\">tablename</a>,", 
"<span class=\"ts\"/>       (1UL << <a class=\"id\" href=\"#log2qty\">log2qty</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#size\">size</a>) - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#_hash_shift\">_hash_shift</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#_hash_shift\">_hash_shift</a> = <a class=\"id\" href=\"#log2qty\">log2qty</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#_hash_mask\">_hash_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#_hash_mask\">_hash_mask</a> = (1 << <a class=\"id\" href=\"#log2qty\">log2qty</a>) - 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#table\">table</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Return a pointer to the bitmap storing bits affecting a block of pages */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long *<a class=\"id\" href=\"#get_pageblock_bitmap\">get_pageblock_bitmap</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pfn_to_section\">__pfn_to_section</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)-><a class=\"id\" href=\"#pageblock_flags\">pageblock_flags</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageblock_flags\">pageblock_flags</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SPARSEMEM */</span>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pfn_to_bitidx\">pfn_to_bitidx</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> &= (<a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>-1);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#pfn\">pfn</a> >> <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>) * <a class=\"id\" href=\"#NR_PAGEBLOCK_BITS\">NR_PAGEBLOCK_BITS</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a> - <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#pfn\">pfn</a> >> <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>) * <a class=\"id\" href=\"#NR_PAGEBLOCK_BITS\">NR_PAGEBLOCK_BITS</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SPARSEMEM */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_pageblock_flags_group - Return the requested group of flags for the pageblock_nr_pages block of pages</span>", 
"<span class=\"comment\"> * @page: The page within the block of interest</span>", 
"<span class=\"comment\"> * @start_bitidx: The first bit of interest to retrieve</span>", 
"<span class=\"comment\"> * @end_bitidx: The last bit of interest</span>", 
"<span class=\"comment\"> * returns pageblock_bits flags</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#get_pageblock_flags_group\">get_pageblock_flags_group</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#start_bitidx\">start_bitidx</a>, int <a class=\"id\" href=\"#end_bitidx\">end_bitidx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#bitidx\">bitidx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#value\">value</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#get_pageblock_bitmap\">get_pageblock_bitmap</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitidx\">bitidx</a> = <a class=\"id\" href=\"#pfn_to_bitidx\">pfn_to_bitidx</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#start_bitidx\">start_bitidx</a> <= <a class=\"id\" href=\"#end_bitidx\">end_bitidx</a>; <a class=\"id\" href=\"#start_bitidx\">start_bitidx</a>++, <a class=\"id\" href=\"#value\">value</a> <<= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#bitidx\">bitidx</a> + <a class=\"id\" href=\"#start_bitidx\">start_bitidx</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#flags\">flags</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_pageblock_flags_group - Set the requested group of flags for a pageblock_nr_pages block of pages</span>", 
"<span class=\"comment\"> * @page: The page within the block of interest</span>", 
"<span class=\"comment\"> * @start_bitidx: The first bit of interest</span>", 
"<span class=\"comment\"> * @end_bitidx: The last bit of interest</span>", 
"<span class=\"comment\"> * @flags: The flags to set</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#set_pageblock_flags_group\">set_pageblock_flags_group</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#start_bitidx\">start_bitidx</a>, int <a class=\"id\" href=\"#end_bitidx\">end_bitidx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#bitidx\">bitidx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#value\">value</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#get_pageblock_bitmap\">get_pageblock_bitmap</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitidx\">bitidx</a> = <a class=\"id\" href=\"#pfn_to_bitidx\">pfn_to_bitidx</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>);", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#start_bitidx\">start_bitidx</a> <= <a class=\"id\" href=\"#end_bitidx\">end_bitidx</a>; <a class=\"id\" href=\"#start_bitidx\">start_bitidx</a>++, <a class=\"id\" href=\"#value\">value</a> <<= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#bitidx\">bitidx</a> + <a class=\"id\" href=\"#start_bitidx\">start_bitidx</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#bitidx\">bitidx</a> + <a class=\"id\" href=\"#start_bitidx\">start_bitidx</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is designed as sub function...plz see page_isolation.c also.</span>", 
"<span class=\"comment\"> * set/clear page block's type to be ISOLATE.</span>", 
"<span class=\"comment\"> * page allocater never alloc memory from ISOLATE block.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#set_migratetype_isolate\">set_migratetype_isolate</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#curr_page\">curr_page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#immobile\">immobile</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_isolate_notify\">memory_isolate_notify</a> <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#notifier_ret\">notifier_ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zone_idx\">zone_idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_idx\">zone_idx</a> = <a class=\"id\" href=\"#zone_idx\">zone_idx</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_pageblock_migratetype\">get_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>) == <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#zone_idx\">zone_idx</a> == <a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#pages_found\">pages_found</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It may be possible to isolate a pageblock even if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * migratetype is not MIGRATE_MOVABLE. The memory isolation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * notifier chain is used by balloon drivers to return the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * number of pages in a range that are held by the balloon</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * driver to shrink memory. If all the pages are accounted for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by balloons, are free, or on the LRU, isolation can continue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Later, for example, when memory hotplug notifier runs, these</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages reported as \"can be isolated\" should be isolated(freed)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by the balloon driver through the memory notifier chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notifier_ret\">notifier_ret</a> = <a class=\"id\" href=\"#memory_isolate_notify\">memory_isolate_notify</a>(<a class=\"id\" href=\"#MEM_ISOLATE_COUNT\">MEM_ISOLATE_COUNT</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notifier_ret\">notifier_ret</a> = <a class=\"id\" href=\"#notifier_to_errno\">notifier_to_errno</a>(<a class=\"id\" href=\"#notifier_ret\">notifier_ret</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notifier_ret\">notifier_ret</a> || !<a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#pages_found\">pages_found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#pfn\">pfn</a>; <a class=\"id\" href=\"#iter\">iter</a> &lt; (<a class=\"id\" href=\"#pfn\">pfn</a> + <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>); <a class=\"id\" href=\"#iter\">iter</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_page\">curr_page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#curr_page\">curr_page</a>) || <a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#curr_page\">curr_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#immobile\">immobile</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#pages_found\">pages_found</a> == <a class=\"id\" href=\"#immobile\">immobile</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pageblock_migratetype\">set_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIGRATE_ISOLATE\">MIGRATE_ISOLATE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_freepages_block\">move_freepages_block</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIGRATE_ISOLATE\">MIGRATE_ISOLATE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_all_pages\">drain_all_pages</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#unset_migratetype_isolate\">unset_migratetype_isolate</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_pageblock_migratetype\">get_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#MIGRATE_ISOLATE\">MIGRATE_ISOLATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pageblock_migratetype\">set_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#move_freepages_block\">move_freepages_block</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTREMOVE\">CONFIG_MEMORY_HOTREMOVE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * All pages in the range must be isolated before calling this.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#__offline_isolated_pages\">__offline_isolated_pages</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* find the first valid pfn */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> == <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageBuddy\">PageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_VM\">CONFIG_DEBUG_VM</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"remove from free list %lx %d %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pfn\">pfn</a>, 1 << <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmv_page_order\">rmv_page_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#nr_free\">nr_free</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      - (1UL << <a class=\"id\" href=\"#order\">order</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (1 << <a class=\"id\" href=\"#order\">order</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageReserved\">SetPageReserved</a>((<a class=\"id\" href=\"#page\">page</a>+<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> += (1 << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_free_buddy_page\">is_free_buddy_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#order\">order</a> = 0; <a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>; <a class=\"id\" href=\"#order\">order</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page_head\">page_head</a> = <a class=\"id\" href=\"#page\">page</a> - (<a class=\"id\" href=\"#pfn\">pfn</a> &amp; ((1 << <a class=\"id\" href=\"#order\">order</a>) - 1));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageBuddy\">PageBuddy</a>(<a class=\"id\" href=\"#page_head\">page_head</a>) && <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#page_head\">page_head</a>) >= <a class=\"id\" href=\"#order\">order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static struct <a class=\"id\" href=\"#trace_print_flags\">trace_print_flags</a> <a class=\"id\" href=\"#pageflag_names\">pageflag_names</a>[] = {", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_locked\">PG_locked</a>,<span class=\"ts\"/><span class=\"ts\"/>\"locked\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_error\">PG_error</a>,<span class=\"ts\"/><span class=\"ts\"/>\"error\"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_referenced\">PG_referenced</a>,<span class=\"ts\"/><span class=\"ts\"/>\"referenced\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_uptodate\">PG_uptodate</a>,<span class=\"ts\"/><span class=\"ts\"/>\"uptodate\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_dirty\">PG_dirty</a>,<span class=\"ts\"/><span class=\"ts\"/>\"dirty\"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_lru\">PG_lru</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"lru\"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_active\">PG_active</a>,<span class=\"ts\"/><span class=\"ts\"/>\"active\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_slab\">PG_slab</a>,<span class=\"ts\"/><span class=\"ts\"/>\"slab\"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_owner_priv_1\">PG_owner_priv_1</a>,<span class=\"ts\"/>\"owner_priv_1\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_arch_1\">PG_arch_1</a>,<span class=\"ts\"/><span class=\"ts\"/>\"arch_1\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_reserved\">PG_reserved</a>,<span class=\"ts\"/><span class=\"ts\"/>\"reserved\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_private\">PG_private</a>,<span class=\"ts\"/><span class=\"ts\"/>\"private\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_private_2\">PG_private_2</a>,<span class=\"ts\"/><span class=\"ts\"/>\"private_2\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_writeback\">PG_writeback</a>,<span class=\"ts\"/><span class=\"ts\"/>\"writeback\"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PAGEFLAGS_EXTENDED\">CONFIG_PAGEFLAGS_EXTENDED</a>", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_head\">PG_head</a>,<span class=\"ts\"/><span class=\"ts\"/>\"head\"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_tail\">PG_tail</a>,<span class=\"ts\"/><span class=\"ts\"/>\"tail\"<span class=\"ts\"/><span class=\"ts\"/>},", 
"#else", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_compound\">PG_compound</a>,<span class=\"ts\"/><span class=\"ts\"/>\"compound\"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_swapcache\">PG_swapcache</a>,<span class=\"ts\"/><span class=\"ts\"/>\"swapcache\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_mappedtodisk\">PG_mappedtodisk</a>,<span class=\"ts\"/>\"mappedtodisk\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_reclaim\">PG_reclaim</a>,<span class=\"ts\"/><span class=\"ts\"/>\"reclaim\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_buddy\">PG_buddy</a>,<span class=\"ts\"/><span class=\"ts\"/>\"buddy\"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_swapbacked\">PG_swapbacked</a>,<span class=\"ts\"/><span class=\"ts\"/>\"swapbacked\"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_unevictable\">PG_unevictable</a>,<span class=\"ts\"/><span class=\"ts\"/>\"unevictable\"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_mlocked\">PG_mlocked</a>,<span class=\"ts\"/><span class=\"ts\"/>\"mlocked\"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_USES_PG_UNCACHED\">CONFIG_ARCH_USES_PG_UNCACHED</a>", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_uncached\">PG_uncached</a>,<span class=\"ts\"/><span class=\"ts\"/>\"uncached\"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"<span class=\"ts\"/>{1UL << <a class=\"id\" href=\"#PG_hwpoison\">PG_hwpoison</a>,<span class=\"ts\"/><span class=\"ts\"/>\"hwpoison\"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>{-1UL,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a><span class=\"ts\"/><span class=\"ts\"/>},", 
"};", 
"", 
"static void <a class=\"id\" href=\"#dump_page_flags\">dump_page_flags</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#delim\">delim</a> = \"\";", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"page flags: %#lx(\", <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* remove zone id */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= (1UL << <a class=\"id\" href=\"#NR_PAGEFLAGS\">NR_PAGEFLAGS</a>) - 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#pageflag_names\">pageflag_names</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a> && <a class=\"id\" href=\"#flags\">flags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#pageflag_names\">pageflag_names</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) != <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%s\", <a class=\"id\" href=\"#delim\">delim</a>, <a class=\"id\" href=\"#pageflag_names\">pageflag_names</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delim\">delim</a> = \"|\";", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check for left over flags */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%#lx\", <a class=\"id\" href=\"#delim\">delim</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\")\\n\");", 
"}", 
"", 
"void <a class=\"id\" href=\"#dump_page\">dump_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a>", 
"<span class=\"ts\"/>       \"page:%p count:%d mapcount:%d mapping:%p index:%#lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_page_flags\">dump_page_flags</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
];
xr_frag_insert('l/cf/b6a7585b0f458cb63b486e60515db9d185a9cf.xr', __xr_tmp);
