var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * drivers/base/memory.c - basic Memory class support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by Matt Tolentino &lt;matthew.e.tolentino@intel.com&gt;</span>", 
"<span class=\"comment\"> *            Dave Hansen &lt;haveblue@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file provides the necessary infrastructure to represent</span>", 
"<span class=\"comment\"> * a SPARSEMEM-memory-model system's physical memory in /sysfs.</span>", 
"<span class=\"comment\"> * All arch-independent code that assumes MEMORY_HOTPLUG requires</span>", 
"<span class=\"comment\"> * SPARSEMEM should be contained here, or in mm/memory_hotplug.c.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory\">memory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory_hotplug\">memory_hotplug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEMORY_CLASS_NAME\">MEMORY_CLASS_NAME</a><span class=\"ts\"/>\"memory\"", 
"", 
"static struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> <a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#MEMORY_CLASS_NAME\">MEMORY_CLASS_NAME</a>,", 
"};", 
"", 
"static const char *<a class=\"id\" href=\"#memory_uevent_name\">memory_uevent_name</a>(struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#kset\">kset</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#MEMORY_CLASS_NAME\">MEMORY_CLASS_NAME</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#memory_uevent\">memory_uevent</a>(struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#kset\">kset</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#obj\">obj</a>, struct <a class=\"id\" href=\"#kobj_uevent_env\">kobj_uevent_env</a> *<a class=\"id\" href=\"#env\">env</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#kset_uevent_ops\">kset_uevent_ops</a> <a class=\"id\" href=\"#memory_uevent_ops\">memory_uevent_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#memory_uevent_name\">memory_uevent_name</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#uevent\">uevent</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#memory_uevent\">memory_uevent</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#BLOCKING_NOTIFIER_HEAD\">BLOCKING_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#memory_chain\">memory_chain</a>);", 
"", 
"int <a class=\"id\" href=\"#register_memory_notifier\">register_memory_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"        return <a class=\"id\" href=\"#blocking_notifier_chain_register\">blocking_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#memory_chain\">memory_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_memory_notifier\">register_memory_notifier</a>);", 
"", 
"void <a class=\"id\" href=\"#unregister_memory_notifier\">unregister_memory_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"        <a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#memory_chain\">memory_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_memory_notifier\">unregister_memory_notifier</a>);", 
"", 
"static <a class=\"id\" href=\"#ATOMIC_NOTIFIER_HEAD\">ATOMIC_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#memory_isolate_chain\">memory_isolate_chain</a>);", 
"", 
"int <a class=\"id\" href=\"#register_memory_isolate_notifier\">register_memory_isolate_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#memory_isolate_chain\">memory_isolate_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_memory_isolate_notifier\">register_memory_isolate_notifier</a>);", 
"", 
"void <a class=\"id\" href=\"#unregister_memory_isolate_notifier\">unregister_memory_isolate_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_chain_unregister\">atomic_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#memory_isolate_chain\">memory_isolate_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_memory_isolate_notifier\">unregister_memory_isolate_notifier</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * register_memory - Setup a sysfs device for a memory block</span>", 
"<span class=\"comment\"> */</span>", 
"static", 
"int <a class=\"id\" href=\"#register_memory\">register_memory</a>(struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#memory\">memory</a>, struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory\">memory</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#cls\">cls</a> = &amp;<a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory\">memory</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#__section_nr\">__section_nr</a>(<a class=\"id\" href=\"#section\">section</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_register\">sysdev_register</a>(&amp;<a class=\"id\" href=\"#memory\">memory</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#unregister_memory\">unregister_memory</a>(struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#memory\">memory</a>, struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#memory\">memory</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#cls\">cls</a> != &amp;<a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#memory\">memory</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#id\">id</a> != <a class=\"id\" href=\"#__section_nr\">__section_nr</a>(<a class=\"id\" href=\"#section\">section</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* drop the ref. we got in remove_memory_block() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#memory\">memory</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev_unregister\">sysdev_unregister</a>(&amp;<a class=\"id\" href=\"#memory\">memory</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * use this as the physical section index that this memsection</span>", 
"<span class=\"comment\"> * uses.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_mem_phys_index\">show_mem_phys_index</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sysdev_attribute\">sysdev_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#memory_block\">memory_block</a>, <a class=\"id\" href=\"#sysdev\">sysdev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%08lx\\n\", <a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#phys_index\">phys_index</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Show whether the section of memory is likely to be hot-removable</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_mem_removable\">show_mem_removable</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sysdev_attribute\">sysdev_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#memory_block\">memory_block</a>, <a class=\"id\" href=\"#sysdev\">sysdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#section_nr_to_pfn\">section_nr_to_pfn</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#phys_index\">phys_index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#is_mem_section_removable\">is_mem_section_removable</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * online, offline, going offline, etc.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_mem_state\">show_mem_state</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sysdev_attribute\">sysdev_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#memory_block\">memory_block</a>, <a class=\"id\" href=\"#sysdev\">sysdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#len\">len</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can probably put these states in a nice little array</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that they're not open-coded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"online\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_OFFLINE\">MEM_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"offline\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_GOING_OFFLINE\">MEM_GOING_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"going-offline\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"ERROR-UNKNOWN-%ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#memory_notify\">memory_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#memory_chain\">memory_chain</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#memory_isolate_notify\">memory_isolate_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#memory_isolate_chain\">memory_isolate_chain</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * MEMORY_HOTPLUG depends on SPARSEMEM in mm/Kconfig, so it is</span>", 
"<span class=\"comment\"> * OK to have direct references to sparsemem variables in here.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#memory_block_action\">memory_block_action</a>(struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#psection\">psection</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#start_paddr\">start_paddr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#first_page\">first_page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_state\">old_state</a> = <a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psection\">psection</a> = <a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#phys_index\">phys_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_page\">first_page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#psection\">psection</a> << <a class=\"id\" href=\"#PFN_SECTION_SHIFT\">PFN_SECTION_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The probe routines leave the pages reserved, just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as the bootmem code does.  Make sure they're still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#first_page\">first_page</a>+<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"section number %ld page number %d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"not reserved, was it already online? \\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psection\">psection</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#first_page\">first_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#online_pages\">online_pages</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_OFFLINE\">MEM_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#MEM_GOING_OFFLINE\">MEM_GOING_OFFLINE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_paddr\">start_paddr</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#first_page\">first_page</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#remove_memory\">remove_memory</a>(<a class=\"id\" href=\"#start_paddr\">start_paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#old_state\">old_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s(%p, %ld) unknown action: %ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#action\">action</a>, <a class=\"id\" href=\"#action\">action</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#memory_block_change_state\">memory_block_change_state</a>(struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#to_state\">to_state</a>, unsigned long <a class=\"id\" href=\"#from_state_req\">from_state_req</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state_mutex\">state_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#from_state_req\">from_state_req</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#memory_block_action\">memory_block_action</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#to_state\">to_state</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#to_state\">to_state</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state_mutex\">state_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#store_mem_state\">store_mem_state</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sysdev_attribute\">sysdev_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#phys_section_nr\">phys_section_nr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#memory_block\">memory_block</a>, <a class=\"id\" href=\"#sysdev\">sysdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_section_nr\">phys_section_nr</a> = <a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#phys_index\">phys_index</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#phys_section_nr\">phys_section_nr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"online\", <a class=\"id\" href=\"#min\">min</a>((int)<a class=\"id\" href=\"#count\">count</a>, 6)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#memory_block_change_state\">memory_block_change_state</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>, <a class=\"id\" href=\"#MEM_OFFLINE\">MEM_OFFLINE</a>);", 
"<span class=\"ts\"/>else if(!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"offline\", <a class=\"id\" href=\"#min\">min</a>((int)<a class=\"id\" href=\"#count\">count</a>, 7)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#memory_block_change_state\">memory_block_change_state</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_OFFLINE\">MEM_OFFLINE</a>, <a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * phys_device is a bad name for this.  What I really want</span>", 
"<span class=\"comment\"> * is a way to differentiate between memory ranges that</span>", 
"<span class=\"comment\"> * are part of physical devices that constitute</span>", 
"<span class=\"comment\"> * a complete removable unit or fru.</span>", 
"<span class=\"comment\"> * i.e. do these ranges belong to the same physical device,</span>", 
"<span class=\"comment\"> * s.t. if I offline all of these sections I can then</span>", 
"<span class=\"comment\"> * remove the physical device?</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_phys_device\">show_phys_device</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sysdev_attribute\">sysdev_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#memory_block\">memory_block</a>, <a class=\"id\" href=\"#sysdev\">sysdev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#phys_device\">phys_device</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#SYSDEV_ATTR\">SYSDEV_ATTR</a>(<a class=\"id\" href=\"#phys_index\">phys_index</a>, 0444, <a class=\"id\" href=\"#show_mem_phys_index\">show_mem_phys_index</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#SYSDEV_ATTR\">SYSDEV_ATTR</a>(<a class=\"id\" href=\"#state\">state</a>, 0644, <a class=\"id\" href=\"#show_mem_state\">show_mem_state</a>, <a class=\"id\" href=\"#store_mem_state\">store_mem_state</a>);", 
"static <a class=\"id\" href=\"#SYSDEV_ATTR\">SYSDEV_ATTR</a>(<a class=\"id\" href=\"#phys_device\">phys_device</a>, 0444, <a class=\"id\" href=\"#show_phys_device\">show_phys_device</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#SYSDEV_ATTR\">SYSDEV_ATTR</a>(<a class=\"id\" href=\"#removable\">removable</a>, 0444, <a class=\"id\" href=\"#show_mem_removable\">show_mem_removable</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mem_create_simple_file\">mem_create_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#attr_name\">attr_name</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev_create_file\">sysdev_create_file</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>, &amp;<a class=\"id\" href=\"#attr_\">attr_</a>##<a class=\"id\" href=\"#attr_name\">attr_name</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mem_remove_simple_file\">mem_remove_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#attr_name\">attr_name</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev_remove_file\">sysdev_remove_file</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>, &amp;<a class=\"id\" href=\"#attr_\">attr_</a>##<a class=\"id\" href=\"#attr_name\">attr_name</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Block size attribute stuff</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#print_block_size\">print_block_size</a>(struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> *<a class=\"id\" href=\"#class\">class</a>, struct <a class=\"id\" href=\"#sysdev_class_attribute\">sysdev_class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lx\\n\", (unsigned long)<a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#SYSDEV_CLASS_ATTR\">SYSDEV_CLASS_ATTR</a>(<a class=\"id\" href=\"#block_size_bytes\">block_size_bytes</a>, 0444, <a class=\"id\" href=\"#print_block_size\">print_block_size</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"static int <a class=\"id\" href=\"#block_size_init\">block_size_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(&amp;<a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a>.<a class=\"id\" href=\"#kset\">kset</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#attr_block_size_bytes\">attr_block_size_bytes</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some architectures will have custom drivers to do this, and</span>", 
"<span class=\"comment\"> * will not need to do it from userspace.  The fake hot-add code</span>", 
"<span class=\"comment\"> * as well as ppc64 will do all of their discovery in userspace</span>", 
"<span class=\"comment\"> * and will require this interface.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_MEMORY_PROBE\">CONFIG_ARCH_MEMORY_PROBE</a>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#memory_probe_store\">memory_probe_store</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class\">class</a>, struct <a class=\"id\" href=\"#class_attribute\">class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> = <a class=\"id\" href=\"#simple_strtoull\">simple_strtoull</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#memory_add_physaddr_to_nid\">memory_add_physaddr_to_nid</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#add_memory\">add_memory</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"static <a class=\"id\" href=\"#CLASS_ATTR\">CLASS_ATTR</a>(<a class=\"id\" href=\"#probe\">probe</a>, <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#memory_probe_store\">memory_probe_store</a>);", 
"", 
"static int <a class=\"id\" href=\"#memory_probe_init\">memory_probe_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(&amp;<a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a>.<a class=\"id\" href=\"#kset\">kset</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#class_attr_probe\">class_attr_probe</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#memory_probe_init\">memory_probe_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Support for offlining pages of memory</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Soft offline a page */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#store_soft_offline_page\">store_soft_offline_page</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class\">class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#class_attribute\">class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strict_strtoull\">strict_strtoull</a>(<a class=\"id\" href=\"#buf\">buf</a>, 0, &amp;<a class=\"id\" href=\"#pfn\">pfn</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> >>= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#soft_offline_page\">soft_offline_page</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>), 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> == 0 ? <a class=\"id\" href=\"#count\">count</a> : <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Forcibly offline a page, including killing processes. */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#store_hard_offline_page\">store_hard_offline_page</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class\">class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#class_attribute\">class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strict_strtoull\">strict_strtoull</a>(<a class=\"id\" href=\"#buf\">buf</a>, 0, &amp;<a class=\"id\" href=\"#pfn\">pfn</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> >>= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__memory_failure\">__memory_failure</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, 0, 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#CLASS_ATTR\">CLASS_ATTR</a>(<a class=\"id\" href=\"#soft_offline_page\">soft_offline_page</a>, 0644, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#store_soft_offline_page\">store_soft_offline_page</a>);", 
"static <a class=\"id\" href=\"#CLASS_ATTR\">CLASS_ATTR</a>(<a class=\"id\" href=\"#hard_offline_page\">hard_offline_page</a>, 0644, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#store_hard_offline_page\">store_hard_offline_page</a>);", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#memory_fail_init\">memory_fail_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(&amp;<a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a>.<a class=\"id\" href=\"#kset\">kset</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#class_attr_soft_offline_page\">class_attr_soft_offline_page</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(&amp;<a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a>.<a class=\"id\" href=\"#kset\">kset</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#class_attr_hard_offline_page\">class_attr_hard_offline_page</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#memory_fail_init\">memory_fail_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that phys_device is optional.  It is here to allow for</span>", 
"<span class=\"comment\"> * differentiation between which *physical* devices each</span>", 
"<span class=\"comment\"> * section belongs to...</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_get_memory_phys_device\">arch_get_memory_phys_device</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#add_memory_block\">add_memory_block</a>(int <a class=\"id\" href=\"#nid\">nid</a>, struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#state\">state</a>, enum <a class=\"id\" href=\"#mem_add_context\">mem_add_context</a> <a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#mem\">mem</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#phys_index\">phys_index</a> = <a class=\"id\" href=\"#__section_nr\">__section_nr</a>(<a class=\"id\" href=\"#section\">section</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#state_mutex\">state_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#section_nr_to_pfn\">section_nr_to_pfn</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#phys_index\">phys_index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#phys_device\">phys_device</a> = <a class=\"id\" href=\"#arch_get_memory_phys_device\">arch_get_memory_phys_device</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_memory\">register_memory</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#section\">section</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_create_simple_file\">mem_create_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#phys_index\">phys_index</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_create_simple_file\">mem_create_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_create_simple_file\">mem_create_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#phys_device\">phys_device</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_create_simple_file\">mem_create_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#removable\">removable</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#context\">context</a> == <a class=\"id\" href=\"#HOTPLUG\">HOTPLUG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_mem_sect_under_node\">register_mem_sect_under_node</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For now, we have a linear search to go find the appropriate</span>", 
"<span class=\"comment\"> * memory_block corresponding to a particular phys_index. If</span>", 
"<span class=\"comment\"> * this gets to be a real problem, we can always use a radix</span>", 
"<span class=\"comment\"> * tree or something here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This could be made generic for all sysdev classes.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#find_memory_block\">find_memory_block</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#sysdev\">sysdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[sizeof(<a class=\"id\" href=\"#MEMORY_CLASS_NAME\">MEMORY_CLASS_NAME</a>) + 9 + 1];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This only works because we know that section == sysdev-&gt;id</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slightly redundant with sysdev_register()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(&amp;<a class=\"id\" href=\"#name\">name</a>[0], \"%s%d\", <a class=\"id\" href=\"#MEMORY_CLASS_NAME\">MEMORY_CLASS_NAME</a>, <a class=\"id\" href=\"#__section_nr\">__section_nr</a>(<a class=\"id\" href=\"#section\">section</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kset_find_obj\">kset_find_obj</a>(&amp;<a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a>.<a class=\"id\" href=\"#kset\">kset</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev\">sysdev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#sys_device\">sys_device</a>, <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#sysdev\">sysdev</a>, struct <a class=\"id\" href=\"#memory_block\">memory_block</a>, <a class=\"id\" href=\"#sysdev\">sysdev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#remove_memory_block\">remove_memory_block</a>(unsigned long <a class=\"id\" href=\"#node_id\">node_id</a>, struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#phys_device\">phys_device</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#find_memory_block\">find_memory_block</a>(<a class=\"id\" href=\"#section\">section</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_mem_sect_under_nodes\">unregister_mem_sect_under_nodes</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_remove_simple_file\">mem_remove_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#phys_index\">phys_index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_remove_simple_file\">mem_remove_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_remove_simple_file\">mem_remove_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#phys_device\">phys_device</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_remove_simple_file\">mem_remove_simple_file</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#removable\">removable</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_memory\">unregister_memory</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#section\">section</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * need an interface for the VM to add new memory regions,</span>", 
"<span class=\"comment\"> * but without onlining it.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_new_memory\">register_new_memory</a>(int <a class=\"id\" href=\"#nid\">nid</a>, struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#add_memory_block\">add_memory_block</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#section\">section</a>, <a class=\"id\" href=\"#MEM_OFFLINE\">MEM_OFFLINE</a>, <a class=\"id\" href=\"#HOTPLUG\">HOTPLUG</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#unregister_memory_section\">unregister_memory_section</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section\">present_section</a>(<a class=\"id\" href=\"#section\">section</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#remove_memory_block\">remove_memory_block</a>(0, <a class=\"id\" href=\"#section\">section</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize the sysfs support for memory devices...</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#memory_dev_init\">memory_dev_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a>.<a class=\"id\" href=\"#kset\">kset</a>.<a class=\"id\" href=\"#uevent_ops\">uevent_ops</a> = &amp;<a class=\"id\" href=\"#memory_uevent_ops\">memory_uevent_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sysdev_class_register\">sysdev_class_register</a>(&amp;<a class=\"id\" href=\"#memory_sysdev_class\">memory_sysdev_class</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Create entries for memory sections that were found</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * during boot and have been initialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_memory_block\">add_memory_block</a>(0, <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#BOOT\">BOOT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#memory_probe_init\">memory_probe_init</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#memory_fail_init\">memory_fail_init</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#block_size_init\">block_size_init</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s() failed: %d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
];
xr_frag_insert('l/d0/5d294bde2b13ef8ccf1a1e814db2ca584e40c8.xr', __xr_tmp);
