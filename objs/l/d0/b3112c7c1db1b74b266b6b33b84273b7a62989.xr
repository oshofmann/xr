var __xr_tmp = [
"<span class=\"comment\">/* -*- linux-c -*- --------------------------------------------------------- *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * linux/fs/devpts/inode.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright 1998-2004 H. Peter Anvin -- All Rights Reserved</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is part of the Linux kernel and is made available under</span>", 
"<span class=\"comment\"> * the terms of the GNU General Public License, version 2, or at your</span>", 
"<span class=\"comment\"> * option, any later version, incorporated herein by reference.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ------------------------------------------------------------------------- */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#devpts_fs\">devpts_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#parser\">parser</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify\">fsnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEVPTS_DEFAULT_MODE\">DEVPTS_DEFAULT_MODE</a> 0600", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ptmx is a new node in /dev/pts and will be unused in legacy (single-</span>", 
"<span class=\"comment\"> * instance) mode. To prevent surprises in user space, set permissions of</span>", 
"<span class=\"comment\"> * ptmx to 0. Use 'chmod' or remount with '-o ptmxmode' to set meaningful</span>", 
"<span class=\"comment\"> * permissions.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEVPTS_DEFAULT_PTMX_MODE\">DEVPTS_DEFAULT_PTMX_MODE</a> 0000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTMX_MINOR\">PTMX_MINOR</a><span class=\"ts\"/>2", 
"", 
"extern int <a class=\"id\" href=\"#pty_limit\">pty_limit</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Config limit on Unix98 ptys */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#allocated_ptys_lock\">allocated_ptys_lock</a>);", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#devpts_mnt\">devpts_mnt</a>;", 
"", 
"struct <a class=\"id\" href=\"#pts_mount_opts\">pts_mount_opts</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#setuid\">setuid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#setgid\">setgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a>   <a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a>   <a class=\"id\" href=\"#gid\">gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#umode_t\">umode_t</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#umode_t\">umode_t</a> <a class=\"id\" href=\"#ptmxmode\">ptmxmode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#newinstance\">newinstance</a>;", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Opt_uid\">Opt_uid</a>, <a class=\"id\" href=\"#Opt_gid\">Opt_gid</a>, <a class=\"id\" href=\"#Opt_mode\">Opt_mode</a>, <a class=\"id\" href=\"#Opt_ptmxmode\">Opt_ptmxmode</a>, <a class=\"id\" href=\"#Opt_newinstance\">Opt_newinstance</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Opt_err\">Opt_err</a>", 
"};", 
"", 
"static const <a class=\"id\" href=\"#match_table_t\">match_table_t</a> <a class=\"id\" href=\"#tokens\">tokens</a> = {", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#Opt_uid\">Opt_uid</a>, \"uid=%u\"},", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#Opt_gid\">Opt_gid</a>, \"gid=%u\"},", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#Opt_mode\">Opt_mode</a>, \"mode=%o\"},", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEVPTS_MULTIPLE_INSTANCES\">CONFIG_DEVPTS_MULTIPLE_INSTANCES</a>", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#Opt_ptmxmode\">Opt_ptmxmode</a>, \"ptmxmode=%o\"},", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#Opt_newinstance\">Opt_newinstance</a>, \"newinstance\"},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#Opt_err\">Opt_err</a>, <a class=\"id\" href=\"#NULL\">NULL</a>}", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ida\">ida</a> <a class=\"id\" href=\"#allocated_ptys\">allocated_ptys</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_mount_opts\">pts_mount_opts</a> <a class=\"id\" href=\"#mount_opts\">mount_opts</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#ptmx_dentry\">ptmx_dentry</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#DEVPTS_SB\">DEVPTS_SB</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#pts_sb_from_inode\">pts_sb_from_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEVPTS_MULTIPLE_INSTANCES\">CONFIG_DEVPTS_MULTIPLE_INSTANCES</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_magic\">s_magic</a> == <a class=\"id\" href=\"#DEVPTS_SUPER_MAGIC\">DEVPTS_SUPER_MAGIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#devpts_mnt\">devpts_mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PARSE_MOUNT\">PARSE_MOUNT</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PARSE_REMOUNT\">PARSE_REMOUNT</a><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * parse_mount_options():</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Set @opts to mount options specified in @data. If an option is not</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>specified in @data, set it to its default value. The exception is</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>'newinstance' option which can only be set/cleared on a mount (i.e.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>cannot be changed during remount).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: @data may be NULL (in which case all options are set to default).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#parse_mount_options\">parse_mount_options</a>(char *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#op\">op</a>, struct <a class=\"id\" href=\"#pts_mount_opts\">pts_mount_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#setuid\">setuid</a>  = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#setgid\">setgid</a>  = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#uid\">uid</a>     = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#gid\">gid</a>     = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#mode\">mode</a>    = <a class=\"id\" href=\"#DEVPTS_DEFAULT_MODE\">DEVPTS_DEFAULT_MODE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#ptmxmode\">ptmxmode</a> = <a class=\"id\" href=\"#DEVPTS_DEFAULT_PTMX_MODE\">DEVPTS_DEFAULT_PTMX_MODE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* newinstance makes sense only on initial mount */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> == <a class=\"id\" href=\"#PARSE_MOUNT\">PARSE_MOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#newinstance\">newinstance</a> = 0;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#data\">data</a>, \",\")) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#substring_t\">substring_t</a> <a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#MAX_OPT_ARGS\">MAX_OPT_ARGS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#token\">token</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#option\">option</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#token\">token</a> = <a class=\"id\" href=\"#match_token\">match_token</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#tokens\">tokens</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#token\">token</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#Opt_uid\">Opt_uid</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_int\">match_int</a>(&amp;<a class=\"id\" href=\"#args\">args</a>[0], &amp;<a class=\"id\" href=\"#option\">option</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#option\">option</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#setuid\">setuid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#Opt_gid\">Opt_gid</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_int\">match_int</a>(&amp;<a class=\"id\" href=\"#args\">args</a>[0], &amp;<a class=\"id\" href=\"#option\">option</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#gid\">gid</a> = <a class=\"id\" href=\"#option\">option</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#setgid\">setgid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#Opt_mode\">Opt_mode</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_octal\">match_octal</a>(&amp;<a class=\"id\" href=\"#args\">args</a>[0], &amp;<a class=\"id\" href=\"#option\">option</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#option\">option</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEVPTS_MULTIPLE_INSTANCES\">CONFIG_DEVPTS_MULTIPLE_INSTANCES</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#Opt_ptmxmode\">Opt_ptmxmode</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_octal\">match_octal</a>(&amp;<a class=\"id\" href=\"#args\">args</a>[0], &amp;<a class=\"id\" href=\"#option\">option</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#ptmxmode\">ptmxmode</a> = <a class=\"id\" href=\"#option\">option</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#Opt_newinstance\">Opt_newinstance</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* newinstance makes sense only on initial mount */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> == <a class=\"id\" href=\"#PARSE_MOUNT\">PARSE_MOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#newinstance\">newinstance</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"devpts: called with bogus options\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEVPTS_MULTIPLE_INSTANCES\">CONFIG_DEVPTS_MULTIPLE_INSTANCES</a>", 
"static int <a class=\"id\" href=\"#mknod_ptmx\">mknod_ptmx</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a> = <a class=\"id\" href=\"#DEVPTS_SB\">DEVPTS_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_mount_opts\">pts_mount_opts</a> *<a class=\"id\" href=\"#opts\">opts</a> = &amp;<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#mount_opts\">mount_opts</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we have already created ptmx node, return */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#ptmx_dentry\">ptmx_dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_alloc_name\">d_alloc_name</a>(<a class=\"id\" href=\"#root\">root</a>, \"ptmx\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"Unable to alloc dentry for ptmx node\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Create a new 'ptmx' node in this mount of devpts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Unable to alloc inode for ptmx node\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> = 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#S_IFCHR\">S_IFCHR</a>|<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#ptmxmode\">ptmxmode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#TTYAUX_MAJOR\">TTYAUX_MAJOR</a>, 2));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_add\">d_add</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#ptmx_dentry\">ptmx_dentry</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_ptmx_mode\">update_ptmx_mode</a>(struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#ptmx_dentry\">ptmx_dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#ptmx_dentry\">ptmx_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#S_IFCHR\">S_IFCHR</a>|<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#mount_opts\">mount_opts</a>.<a class=\"id\" href=\"#ptmxmode\">ptmxmode</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_ptmx_mode\">update_ptmx_mode</a>(struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a>)", 
"{", 
"       return;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#devpts_remount\">devpts_remount</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int *<a class=\"id\" href=\"#flags\">flags</a>, char *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a> = <a class=\"id\" href=\"#DEVPTS_SB\">DEVPTS_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_mount_opts\">pts_mount_opts</a> *<a class=\"id\" href=\"#opts\">opts</a> = &amp;<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#mount_opts\">mount_opts</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#parse_mount_options\">parse_mount_options</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#PARSE_REMOUNT\">PARSE_REMOUNT</a>, <a class=\"id\" href=\"#opts\">opts</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parse_mount_options() restores options to default values</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before parsing and may have changed ptmxmode. So, update the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mode in the inode too. Bogus options don't fail the remount,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so do this even on error return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_ptmx_mode\">update_ptmx_mode</a>(<a class=\"id\" href=\"#fsi\">fsi</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#devpts_show_options\">devpts_show_options</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#vfs\">vfs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a> = <a class=\"id\" href=\"#DEVPTS_SB\">DEVPTS_SB</a>(<a class=\"id\" href=\"#vfs\">vfs</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_mount_opts\">pts_mount_opts</a> *<a class=\"id\" href=\"#opts\">opts</a> = &amp;<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#mount_opts\">mount_opts</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#setuid\">setuid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \",uid=%u\", <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#uid\">uid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#setgid\">setgid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \",gid=%u\", <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#gid\">gid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \",mode=%03o\", <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#mode\">mode</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEVPTS_MULTIPLE_INSTANCES\">CONFIG_DEVPTS_MULTIPLE_INSTANCES</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \",ptmxmode=%03o\", <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#ptmxmode\">ptmxmode</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> <a class=\"id\" href=\"#devpts_sops\">devpts_sops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#statfs\">statfs</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#simple_statfs\">simple_statfs</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#remount_fs\">remount_fs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#devpts_remount\">devpts_remount</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show_options\">show_options</a><span class=\"ts\"/>= <a class=\"id\" href=\"#devpts_show_options\">devpts_show_options</a>,", 
"};", 
"", 
"static void *<a class=\"id\" href=\"#new_pts_fs_info\">new_pts_fs_info</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsi\">fsi</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fsi\">fsi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_init\">ida_init</a>(&amp;<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#allocated_ptys\">allocated_ptys</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#mount_opts\">mount_opts</a>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#DEVPTS_DEFAULT_MODE\">DEVPTS_DEFAULT_MODE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#mount_opts\">mount_opts</a>.<a class=\"id\" href=\"#ptmxmode\">ptmxmode</a> = <a class=\"id\" href=\"#DEVPTS_DEFAULT_PTMX_MODE\">DEVPTS_DEFAULT_PTMX_MODE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fsi\">fsi</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#devpts_fill_super\">devpts_fill_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#silent\">silent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> = 1024;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> = 10;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_magic\">s_magic</a> = <a class=\"id\" href=\"#DEVPTS_SUPER_MAGIC\">DEVPTS_SUPER_MAGIC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_op\">s_op</a> = &amp;<a class=\"id\" href=\"#devpts_sops\">devpts_sops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_time_gran\">s_time_gran</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a> = <a class=\"id\" href=\"#new_pts_fs_info\">new_pts_fs_info</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_fsi\">free_fsi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a> | <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#simple_dir_inode_operations\">simple_dir_inode_operations</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#simple_dir_operations\">simple_dir_operations</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> = 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_root\">s_root</a> = <a class=\"id\" href=\"#d_alloc_root\">d_alloc_root</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_root\">s_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"devpts: get root dentry failed\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<a class=\"id\" href=\"#free_fsi\">free_fsi</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>);", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEVPTS_MULTIPLE_INSTANCES\">CONFIG_DEVPTS_MULTIPLE_INSTANCES</a>", 
"static int <a class=\"id\" href=\"#compare_init_pts_sb\">compare_init_pts_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#devpts_mnt\">devpts_mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#devpts_mnt\">devpts_mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a> == <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * devpts_get_sb()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     If the '-o newinstance' mount option was specified, mount a new</span>", 
"<span class=\"comment\"> *     (private) instance of devpts.  PTYs created in this instance are</span>", 
"<span class=\"comment\"> *     independent of the PTYs in other devpts instances.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     If the '-o newinstance' option was not specified, mount/remount the</span>", 
"<span class=\"comment\"> *     initial kernel mount of devpts.  This type of mount gives the</span>", 
"<span class=\"comment\"> *     legacy, single-instance semantics.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     The 'newinstance' option is needed to support multiple namespace</span>", 
"<span class=\"comment\"> *     semantics in devpts while preserving backward compatibility of the</span>", 
"<span class=\"comment\"> *     current 'single-namespace' semantics. i.e all mounts of devpts</span>", 
"<span class=\"comment\"> *     without the 'newinstance' mount option should bind to the initial</span>", 
"<span class=\"comment\"> *     kernel mount, like get_sb_single().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Mounts with 'newinstance' option create a new, private namespace.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     NOTE:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     For single-mount semantics, devpts cannot use get_sb_single(),</span>", 
"<span class=\"comment\"> *     because get_sb_single()/sget() find and use the super-block from</span>", 
"<span class=\"comment\"> *     the most recent mount of devpts. But that recent mount may be a</span>", 
"<span class=\"comment\"> *     'newinstance' mount and get_sb_single() would pick the newinstance</span>", 
"<span class=\"comment\"> *     super-block instead of the initial super-block.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#devpts_get_sb\">devpts_get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, void *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_mount_opts\">pts_mount_opts</a> <a class=\"id\" href=\"#opts\">opts</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#parse_mount_options\">parse_mount_options</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#PARSE_MOUNT\">PARSE_MOUNT</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#newinstance\">newinstance</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#sget\">sget</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#set_anon_super\">set_anon_super</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#sget\">sget</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#compare_init_pts_sb\">compare_init_pts_sb</a>, <a class=\"id\" href=\"#set_anon_super\">set_anon_super</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#s\">s</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_root\">s_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#devpts_fill_super\">devpts_fill_super</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_SILENT\">MS_SILENT</a> ? 1 : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_undo_sget\">out_undo_sget</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> |= <a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;(<a class=\"id\" href=\"#DEVPTS_SB\">DEVPTS_SB</a>(<a class=\"id\" href=\"#s\">s</a>))-><a class=\"id\" href=\"#mount_opts\">mount_opts</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>, sizeof(<a class=\"id\" href=\"#opts\">opts</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mknod_ptmx\">mknod_ptmx</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_undo_sget\">out_undo_sget</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_set_mnt\">simple_set_mnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_undo_sget\">out_undo_sget</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This supports only the legacy single-instance semantics (no</span>", 
"<span class=\"comment\"> * multiple-instance semantics)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#devpts_get_sb\">devpts_get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, void *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_sb_single\">get_sb_single</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#devpts_fill_super\">devpts_fill_super</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#devpts_kill_sb\">devpts_kill_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a> = <a class=\"id\" href=\"#DEVPTS_SB\">DEVPTS_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fsi\">fsi</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kill_litter_super\">kill_litter_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> <a class=\"id\" href=\"#devpts_fs_type\">devpts_fs_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"devpts\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sb\">get_sb</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#devpts_get_sb\">devpts_get_sb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kill_sb\">kill_sb</a><span class=\"ts\"/>= <a class=\"id\" href=\"#devpts_kill_sb\">devpts_kill_sb</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The normal naming convention is simply /dev/pts/&lt;number&gt;; this conforms</span>", 
"<span class=\"comment\"> * to the System V naming convention</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#devpts_new_index\">devpts_new_index</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ptmx_inode\">ptmx_inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#pts_sb_from_inode\">pts_sb_from_inode</a>(<a class=\"id\" href=\"#ptmx_inode\">ptmx_inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a> = <a class=\"id\" href=\"#DEVPTS_SB\">DEVPTS_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ida_ret\">ida_ret</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#allocated_ptys\">allocated_ptys</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#allocated_ptys_lock\">allocated_ptys_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_ret\">ida_ret</a> = <a class=\"id\" href=\"#ida_get_new\">ida_get_new</a>(&amp;<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#allocated_ptys\">allocated_ptys</a>, &amp;<a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ida_ret\">ida_ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#allocated_ptys_lock\">allocated_ptys_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ida_ret\">ida_ret</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#pty_limit\">pty_limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#allocated_ptys\">allocated_ptys</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#allocated_ptys_lock\">allocated_ptys_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#allocated_ptys_lock\">allocated_ptys_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#devpts_kill_index\">devpts_kill_index</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ptmx_inode\">ptmx_inode</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#pts_sb_from_inode\">pts_sb_from_inode</a>(<a class=\"id\" href=\"#ptmx_inode\">ptmx_inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a> = <a class=\"id\" href=\"#DEVPTS_SB\">DEVPTS_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#allocated_ptys_lock\">allocated_ptys_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#allocated_ptys\">allocated_ptys</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#allocated_ptys_lock\">allocated_ptys_lock</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#devpts_pty_new\">devpts_pty_new</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ptmx_inode\">ptmx_inode</a>, struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* tty layer puts index from devpts_new_index() in here */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#number\">number</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_driver\">tty_driver</a> *<a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#minor_start\">minor_start</a>+<a class=\"id\" href=\"#number\">number</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#pts_sb_from_inode\">pts_sb_from_inode</a>(<a class=\"id\" href=\"#ptmx_inode\">ptmx_inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_fs_info\">pts_fs_info</a> *<a class=\"id\" href=\"#fsi\">fsi</a> = <a class=\"id\" href=\"#DEVPTS_SB\">DEVPTS_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pts_mount_opts\">pts_mount_opts</a> *<a class=\"id\" href=\"#opts\">opts</a> = &amp;<a class=\"id\" href=\"#fsi\">fsi</a>-><a class=\"id\" href=\"#mount_opts\">mount_opts</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#s\">s</a>[12];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We're supposed to be given the slave end of a pty */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#TTY_DRIVER_TYPE_PTY\">TTY_DRIVER_TYPE_PTY</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#subtype\">subtype</a> != <a class=\"id\" href=\"#PTY_TYPE_SLAVE\">PTY_TYPE_SLAVE</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> = <a class=\"id\" href=\"#number\">number</a> + 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#setuid\">setuid</a> ? <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#uid\">uid</a> : <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#setgid\">setgid</a> ? <a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#gid\">gid</a> : <a class=\"id\" href=\"#current_fsgid\">current_fsgid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#S_IFCHR\">S_IFCHR</a>|<a class=\"id\" href=\"#opts\">opts</a>-><a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a> = <a class=\"id\" href=\"#tty\">tty</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%d\", <a class=\"id\" href=\"#number\">number</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_alloc_name\">d_alloc_name</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_add\">d_add</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_create\">fsnotify_create</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#devpts_get_tty\">devpts_get_tty</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#pts_inode\">pts_inode</a>, int <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pts_inode\">pts_inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a> == <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#TTYAUX_MAJOR\">TTYAUX_MAJOR</a>, <a class=\"id\" href=\"#PTMX_MINOR\">PTMX_MINOR</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure dentry has not been deleted by devpts_pty_kill() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_find_alias\">d_find_alias</a>(<a class=\"id\" href=\"#pts_inode\">pts_inode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pts_inode\">pts_inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_magic\">s_magic</a> == <a class=\"id\" href=\"#DEVPTS_SUPER_MAGIC\">DEVPTS_SUPER_MAGIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a> = (struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *)<a class=\"id\" href=\"#pts_inode\">pts_inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tty\">tty</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#devpts_pty_kill\">devpts_pty_kill</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#pts_sb_from_inode\">pts_sb_from_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a> == <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#TTYAUX_MAJOR\">TTYAUX_MAJOR</a>, <a class=\"id\" href=\"#PTMX_MINOR\">PTMX_MINOR</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_find_alias\">d_find_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_delete\">d_delete</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);<span class=\"ts\"/><span class=\"comment\">/* d_alloc_name() in devpts_pty_new() */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* d_find_alias above */</span>", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_devpts_fs\">init_devpts_fs</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(&amp;<a class=\"id\" href=\"#devpts_fs_type\">devpts_fs_type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devpts_mnt\">devpts_mnt</a> = <a class=\"id\" href=\"#kern_mount\">kern_mount</a>(&amp;<a class=\"id\" href=\"#devpts_fs_type\">devpts_fs_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#devpts_mnt\">devpts_mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#devpts_mnt\">devpts_mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_filesystem\">unregister_filesystem</a>(&amp;<a class=\"id\" href=\"#devpts_fs_type\">devpts_fs_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#init_devpts_fs\">init_devpts_fs</a>)", 
];
xr_frag_insert('l/d0/b3112c7c1db1b74b266b6b33b84273b7a62989.xr', __xr_tmp);
