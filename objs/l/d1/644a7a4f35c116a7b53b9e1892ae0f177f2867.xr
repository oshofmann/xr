var __xr_tmp = [
"<span class=\"comment\">/* file-mmu.c: ramfs MMU-based file operations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Resizable simple ram filesystem for Linux.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 Linus Torvalds.</span>", 
"<span class=\"comment\"> *               2000 Transmeta Corp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Usage limits added by David Gibson, Linuxcare Australia.</span>", 
"<span class=\"comment\"> * This file is released under the GPL.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE! This filesystem is probably most useful</span>", 
"<span class=\"comment\"> * not as a real filesystem, but as an example of</span>", 
"<span class=\"comment\"> * how virtual filesystems can be written.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It doesn't get much simpler than this. Consider</span>", 
"<span class=\"comment\"> * that this file implements the full semantics of</span>", 
"<span class=\"comment\"> * a POSIX-compliant read-write filesystem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note in particular how the filesystem does not</span>", 
"<span class=\"comment\"> * need to implement any data structures of its own</span>", 
"<span class=\"comment\"> * to keep track of the virtual data: using the VFS</span>", 
"<span class=\"comment\"> * caches is sufficient.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ramfs\">ramfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ramfs_aops\">ramfs_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/>= <a class=\"id\" href=\"#simple_readpage\">simple_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/>= <a class=\"id\" href=\"#simple_write_begin\">simple_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/>= <a class=\"id\" href=\"#simple_write_end\">simple_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a> = <a class=\"id\" href=\"#__set_page_dirty_no_writeback\">__set_page_dirty_no_writeback</a>,", 
"};", 
"", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ramfs_file_operations\">ramfs_file_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#do_sync_read\">do_sync_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#aio_read\">aio_read</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_aio_read\">generic_file_aio_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#do_sync_write\">do_sync_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#aio_write\">aio_write</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_aio_write\">generic_file_aio_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mmap\">mmap</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_mmap\">generic_file_mmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fsync\">fsync</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#noop_fsync\">noop_fsync</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#splice_read\">splice_read</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_splice_read\">generic_file_splice_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#splice_write\">splice_write</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_splice_write\">generic_file_splice_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_llseek\">generic_file_llseek</a>,", 
"};", 
"", 
"const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#ramfs_file_inode_operations\">ramfs_file_inode_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#setattr\">setattr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#simple_setattr\">simple_setattr</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#getattr\">getattr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#simple_getattr\">simple_getattr</a>,", 
"};", 
];
xr_frag_insert('l/d1/644a7a4f35c116a7b53b9e1892ae0f177f2867.xr', __xr_tmp);
