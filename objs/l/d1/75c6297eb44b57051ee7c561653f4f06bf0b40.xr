var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2001-2003 Sistina Software (UK) Limited.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPL.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>-<a class=\"id\" href=\"#mapper\">mapper</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#log2\">log2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \"striped\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_IO_ERROR_THRESHOLD\">DM_IO_ERROR_THRESHOLD</a> 15", 
"", 
"struct <a class=\"id\" href=\"#stripe\">stripe</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#physical_start\">physical_start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#error_count\">error_count</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#stripes\">stripes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#stripes_shift\">stripes_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#stripes_mask\">stripes_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The size of this target / num. stripes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#stripe_width\">stripe_width</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* stripe chunk size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#chunk_shift\">chunk_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#chunk_mask\">chunk_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Needed for handling events */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Work struct used for triggering events*/</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#kstriped_ws\">kstriped_ws</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stripe\">stripe</a> <a class=\"id\" href=\"#stripe\">stripe</a>[0];", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#kstriped\">kstriped</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An event is triggered whenever a drive</span>", 
"<span class=\"comment\"> * drops out of a stripe volume.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#trigger_event\">trigger_event</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a>, <a class=\"id\" href=\"#kstriped_ws\">kstriped_ws</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_event\">dm_table_event</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>);", 
"", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#alloc_context\">alloc_context</a>(unsigned int <a class=\"id\" href=\"#stripes\">stripes</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_array_too_big\">dm_array_too_big</a>(sizeof(struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a>), sizeof(struct <a class=\"id\" href=\"#stripe\">stripe</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#stripes\">stripes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = sizeof(struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a>) + (sizeof(struct <a class=\"id\" href=\"#stripe\">stripe</a>) * <a class=\"id\" href=\"#stripes\">stripes</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Parse a single &lt;dev&gt; &lt;sector&gt; pair</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_stripe\">get_stripe</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#stripe\">stripe</a>, char **<a class=\"id\" href=\"#argv\">argv</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#argv\">argv</a>[1], \"%llu\", &amp;<a class=\"id\" href=\"#start\">start</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_get_device\">dm_get_device</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#argv\">argv</a>[0], <a class=\"id\" href=\"#dm_table_get_mode\">dm_table_get_mode</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#stripe\">stripe</a>].<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#stripe\">stripe</a>].<a class=\"id\" href=\"#physical_start\">physical_start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Construct a striped mapping.</span>", 
"<span class=\"comment\"> * &lt;number of stripes&gt; &lt;chunk size (2^^n)&gt; [&lt;dev_path&gt; &lt;offset&gt;]+</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#stripe_ctr\">stripe_ctr</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, unsigned int <a class=\"id\" href=\"#argc\">argc</a>, char **<a class=\"id\" href=\"#argv\">argv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#width\">width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#stripes\">stripes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#chunk_size\">chunk_size</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argc\">argc</a> &lt; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Not enough arguments\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stripes\">stripes</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#argv\">argv</a>[0], &amp;<a class=\"id\" href=\"#end\">end</a>, 10);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#stripes\">stripes</a> || *<a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Invalid stripe count\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk_size\">chunk_size</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#argv\">argv</a>[1], &amp;<a class=\"id\" href=\"#end\">end</a>, 10);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Invalid chunk_size\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chunk_size is a power of two</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_power_of_2\">is_power_of_2</a>(<a class=\"id\" href=\"#chunk_size\">chunk_size</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#chunk_size\">chunk_size</a> &lt; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Invalid chunk size\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#len\">len</a> &amp; (<a class=\"id\" href=\"#chunk_size\">chunk_size</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Target length not divisible by \"", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"chunk size\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_div\">sector_div</a>(<a class=\"id\" href=\"#width\">width</a>, <a class=\"id\" href=\"#stripes\">stripes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Target length not divisible by \"", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"number of stripes\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do we have enough arguments for that many stripes ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argc\">argc</a> != (2 + 2 * <a class=\"id\" href=\"#stripes\">stripes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Not enough destinations \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"specified\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#alloc_context\">alloc_context</a>(<a class=\"id\" href=\"#stripes\">stripes</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sc\">sc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Memory allocation for striped context \"", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"failed\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#kstriped_ws\">kstriped_ws</a>, <a class=\"id\" href=\"#trigger_event\">trigger_event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set pointer to dm target; used in trigger_event */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a> = <a class=\"id\" href=\"#stripes\">stripes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe_width\">stripe_width</a> = <a class=\"id\" href=\"#width\">width</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stripes\">stripes</a> &amp; (<a class=\"id\" href=\"#stripes\">stripes</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes_shift\">stripes_shift</a> = -1;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes_shift\">stripes_shift</a> = <a class=\"id\" href=\"#ffs\">ffs</a>(<a class=\"id\" href=\"#stripes\">stripes</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes_mask\">stripes_mask</a> = ((<a class=\"id\" href=\"#sector_t\">sector_t</a>) <a class=\"id\" href=\"#stripes\">stripes</a>) - 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#split_io\">split_io</a> = <a class=\"id\" href=\"#chunk_size\">chunk_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#num_flush_requests\">num_flush_requests</a> = <a class=\"id\" href=\"#stripes\">stripes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#num_discard_requests\">num_discard_requests</a> = <a class=\"id\" href=\"#stripes\">stripes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#chunk_shift\">chunk_shift</a> = <a class=\"id\" href=\"#ffs\">ffs</a>(<a class=\"id\" href=\"#chunk_size\">chunk_size</a>) - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#chunk_mask\">chunk_mask</a> = ((<a class=\"id\" href=\"#sector_t\">sector_t</a>) <a class=\"id\" href=\"#chunk_size\">chunk_size</a>) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the stripe destinations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#stripes\">stripes</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a> += 2;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#get_stripe\">get_stripe</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#argv\">argv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Couldn't parse stripe destination\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_put_device\">dm_put_device</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#error_count\">error_count</a>), 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#sc\">sc</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#stripe_dtr\">stripe_dtr</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a> = (struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *) <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_put_device\">dm_put_device</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_workqueue\">flush_workqueue</a>(<a class=\"id\" href=\"#kstriped\">kstriped</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sc\">sc</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#stripe_map_sector\">stripe_map_sector</a>(struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#uint32_t\">uint32_t</a> *<a class=\"id\" href=\"#stripe\">stripe</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#dm_target_offset\">dm_target_offset</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#chunk_shift\">chunk_shift</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes_shift\">stripes_shift</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#stripe\">stripe</a> = <a class=\"id\" href=\"#sector_div\">sector_div</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#stripe\">stripe</a> = <a class=\"id\" href=\"#chunk\">chunk</a> &amp; <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes_mask\">stripes_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> >>= <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes_shift\">stripes_shift</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = (<a class=\"id\" href=\"#chunk\">chunk</a> << <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#chunk_shift\">chunk_shift</a>) | (<a class=\"id\" href=\"#offset\">offset</a> &amp; <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#chunk_mask\">chunk_mask</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#stripe_map_range_sector\">stripe_map_range_sector</a>(struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#target_stripe\">target_stripe</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#stripe\">stripe</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stripe_map_sector\">stripe_map_sector</a>(<a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#sector\">sector</a>, &amp;<a class=\"id\" href=\"#stripe\">stripe</a>, <a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stripe\">stripe</a> == <a class=\"id\" href=\"#target_stripe\">target_stripe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> &= ~<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#chunk_mask\">chunk_mask</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* round down */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#target_stripe\">target_stripe</a> &lt; <a class=\"id\" href=\"#stripe\">stripe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#chunk_mask\">chunk_mask</a> + 1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* next chunk */</span>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#stripe_map_discard\">stripe_map_discard</a>(struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#target_stripe\">target_stripe</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#begin\">begin</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stripe_map_range_sector\">stripe_map_range_sector</a>(<a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>, <a class=\"id\" href=\"#target_stripe\">target_stripe</a>, &amp;<a class=\"id\" href=\"#begin\">begin</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stripe_map_range_sector\">stripe_map_range_sector</a>(<a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> + <a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target_stripe\">target_stripe</a>, &amp;<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#begin\">begin</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#target_stripe\">target_stripe</a>].<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#begin\">begin</a> + <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#target_stripe\">target_stripe</a>].<a class=\"id\" href=\"#physical_start\">physical_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> = <a class=\"id\" href=\"#to_bytes\">to_bytes</a>(<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#begin\">begin</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DM_MAPIO_REMAPPED\">DM_MAPIO_REMAPPED</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The range doesn't map to the target stripe */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_endio\">bio_endio</a>(<a class=\"id\" href=\"#bio\">bio</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DM_MAPIO_SUBMITTED\">DM_MAPIO_SUBMITTED</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#stripe_map\">stripe_map</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#map_info\">map_info</a> *<a class=\"id\" href=\"#map_context\">map_context</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#stripe\">stripe</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#target_request_nr\">target_request_nr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bio_empty_barrier\">bio_empty_barrier</a>(<a class=\"id\" href=\"#bio\">bio</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target_request_nr\">target_request_nr</a> = <a class=\"id\" href=\"#map_context\">map_context</a>-><a class=\"id\" href=\"#target_request_nr\">target_request_nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#target_request_nr\">target_request_nr</a> >= <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#target_request_nr\">target_request_nr</a>].<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DM_MAPIO_REMAPPED\">DM_MAPIO_REMAPPED</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target_request_nr\">target_request_nr</a> = <a class=\"id\" href=\"#map_context\">map_context</a>-><a class=\"id\" href=\"#target_request_nr\">target_request_nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#target_request_nr\">target_request_nr</a> >= <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#stripe_map_discard\">stripe_map_discard</a>(<a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#target_request_nr\">target_request_nr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stripe_map_sector\">stripe_map_sector</a>(<a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>, &amp;<a class=\"id\" href=\"#stripe\">stripe</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> += <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#stripe\">stripe</a>].<a class=\"id\" href=\"#physical_start\">physical_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#stripe\">stripe</a>].<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#DM_MAPIO_REMAPPED\">DM_MAPIO_REMAPPED</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Stripe status:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * INFO</span>", 
"<span class=\"comment\"> * #stripes [stripe_name &lt;stripe_name&gt;] [group word count]</span>", 
"<span class=\"comment\"> * [error count 'A|D' &lt;error count 'A|D'&gt;]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TABLE</span>", 
"<span class=\"comment\"> * #stripes [stripe chunk size]</span>", 
"<span class=\"comment\"> * [stripe_name physical_start &lt;stripe_name physical_start&gt;]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#stripe_status\">stripe_status</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#status_type_t\">status_type_t</a> <a class=\"id\" href=\"#type\">type</a>, char *<a class=\"id\" href=\"#result\">result</a>, unsigned int <a class=\"id\" href=\"#maxlen\">maxlen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a> = (struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *) <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a> + 1];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sz\">sz</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#STATUSTYPE_INFO\">STATUSTYPE_INFO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMEMIT\">DMEMIT</a>(\"%d \", <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>; <a class=\"id\" href=\"#i\">i</a>++)  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMEMIT\">DMEMIT</a>(\"%s \", <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#error_count\">error_count</a>)) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'D' : 'A';", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#i\">i</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMEMIT\">DMEMIT</a>(\"1 %s\", <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#STATUSTYPE_TABLE\">STATUSTYPE_TABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMEMIT\">DMEMIT</a>(\"%d %llu\", <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#chunk_mask\">chunk_mask</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMEMIT\">DMEMIT</a>(\" %s %llu\", <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (unsigned long long)<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#physical_start\">physical_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#stripe_end_io\">stripe_end_io</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#error\">error</a>, union <a class=\"id\" href=\"#map_info\">map_info</a> *<a class=\"id\" href=\"#map_context\">map_context</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#major_minor\">major_minor</a>[16];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0; <span class=\"comment\">/* I/O complete */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EWOULDBLOCK\">EWOULDBLOCK</a>) && (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_RAHEAD\">REQ_RAHEAD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#major_minor\">major_minor</a>, 0, sizeof(<a class=\"id\" href=\"#major_minor\">major_minor</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#major_minor\">major_minor</a>, \"%d:%d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#disk_devt\">disk_devt</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#disk_devt\">disk_devt</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Test to see which stripe drive triggered the event</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and increment error count for all stripes on that device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the error count for a given device exceeds the threshold</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value we will no longer trigger any further events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#major_minor\">major_minor</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#error_count\">error_count</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#error_count\">error_count</a>)) &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#DM_IO_ERROR_THRESHOLD\">DM_IO_ERROR_THRESHOLD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#kstriped\">kstriped</a>, &amp;<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#kstriped_ws\">kstriped_ws</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#stripe_iterate_devices\">stripe_iterate_devices</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#iterate_devices_callout_fn\">iterate_devices_callout_fn</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe\">stripe</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#physical_start\">physical_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripe_width\">stripe_width</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#ret\">ret</a> && ++<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#stripe_io_hints\">stripe_io_hints</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#limits\">limits</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stripe_c\">stripe_c</a> *<a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#chunk_size\">chunk_size</a> = (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#chunk_mask\">chunk_mask</a> + 1) << 9;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_limits_io_min\">blk_limits_io_min</a>(<a class=\"id\" href=\"#limits\">limits</a>, <a class=\"id\" href=\"#chunk_size\">chunk_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_limits_io_opt\">blk_limits_io_opt</a>(<a class=\"id\" href=\"#limits\">limits</a>, <a class=\"id\" href=\"#chunk_size\">chunk_size</a> * <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#stripes\">stripes</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#target_type\">target_type</a> <a class=\"id\" href=\"#stripe_target\">stripe_target</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a>   = \"striped\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#version\">version</a> = {1, 3, 0},", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#module\">module</a> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ctr\">ctr</a>    = <a class=\"id\" href=\"#stripe_ctr\">stripe_ctr</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dtr\">dtr</a>    = <a class=\"id\" href=\"#stripe_dtr\">stripe_dtr</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map\">map</a>    = <a class=\"id\" href=\"#stripe_map\">stripe_map</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#end_io\">end_io</a> = <a class=\"id\" href=\"#stripe_end_io\">stripe_end_io</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#stripe_status\">stripe_status</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#iterate_devices\">iterate_devices</a> = <a class=\"id\" href=\"#stripe_iterate_devices\">stripe_iterate_devices</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#io_hints\">io_hints</a> = <a class=\"id\" href=\"#stripe_io_hints\">stripe_io_hints</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dm_stripe_init\">dm_stripe_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dm_register_target\">dm_register_target</a>(&amp;<a class=\"id\" href=\"#stripe_target\">stripe_target</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"target registration failed\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kstriped\">kstriped</a> = <a class=\"id\" href=\"#create_singlethread_workqueue\">create_singlethread_workqueue</a>(\"kstriped\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kstriped\">kstriped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"failed to create workqueue kstriped\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_unregister_target\">dm_unregister_target</a>(&amp;<a class=\"id\" href=\"#stripe_target\">stripe_target</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_stripe_exit\">dm_stripe_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_unregister_target\">dm_unregister_target</a>(&amp;<a class=\"id\" href=\"#stripe_target\">stripe_target</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_workqueue\">destroy_workqueue</a>(<a class=\"id\" href=\"#kstriped\">kstriped</a>);", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
];
xr_frag_insert('l/d1/75c6297eb44b57051ee7c561653f4f06bf0b40.xr', __xr_tmp);
