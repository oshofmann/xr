var __xr_tmp = [
"<span class=\"comment\">/* const.h: Macros for dealing with constants.  */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_CONST_H\">_LINUX_CONST_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_CONST_H\">_LINUX_CONST_H</a>", 
"", 
"<span class=\"comment\">/* Some constant macros are used in both assembler and</span>", 
"<span class=\"comment\"> * C code.  Therefore we cannot annotate them always with</span>", 
"<span class=\"comment\"> * 'UL' and other type specifiers unilaterally.  We</span>", 
"<span class=\"comment\"> * use the following macros to deal with this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similarly, _AT() will cast an expression with a type in C, but</span>", 
"<span class=\"comment\"> * leave it unchanged in asm.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_AC\">_AC</a>(<a class=\"id\" href=\"#X\">X</a>,<a class=\"id\" href=\"#Y\">Y</a>)<span class=\"ts\"/><a class=\"id\" href=\"#X\">X</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_AT\">_AT</a>(<a class=\"id\" href=\"#T\">T</a>,<a class=\"id\" href=\"#X\">X</a>)<span class=\"ts\"/><a class=\"id\" href=\"#X\">X</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__AC\">__AC</a>(<a class=\"id\" href=\"#X\">X</a>,<a class=\"id\" href=\"#Y\">Y</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#X\">X</a>##<a class=\"id\" href=\"#Y\">Y</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_AC\">_AC</a>(<a class=\"id\" href=\"#X\">X</a>,<a class=\"id\" href=\"#Y\">Y</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__AC\">__AC</a>(<a class=\"id\" href=\"#X\">X</a>,<a class=\"id\" href=\"#Y\">Y</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_AT\">_AT</a>(<a class=\"id\" href=\"#T\">T</a>,<a class=\"id\" href=\"#X\">X</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#T\">T</a>)(<a class=\"id\" href=\"#X\">X</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !(_LINUX_CONST_H) */</span>", 
];
xr_frag_insert('l/d1/7b57027097bc0de0960753d1b92bfe544745cf.xr', __xr_tmp);
