var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Runtime locking correctness validator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2006,2007 Red Hat, Inc., Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007 Red Hat, Inc., Peter Zijlstra &lt;pzijlstr@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * see Documentation/lockdep-design.txt for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_LOCKDEP_H\">__LINUX_LOCKDEP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_LOCKDEP_H\">__LINUX_LOCKDEP_H</a>", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>;", 
"", 
"<span class=\"comment\">/* for sysctl */</span>", 
"extern int <a class=\"id\" href=\"#prove_locking\">prove_locking</a>;", 
"extern int <a class=\"id\" href=\"#lock_stat\">lock_stat</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debug_locks\">debug_locks</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stacktrace\">stacktrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We'd rather not expose kernel/lockdep_states.h this wide, but we do need</span>", 
"<span class=\"comment\"> * the total number of states... :-(</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XXX_LOCK_USAGE_STATES\">XXX_LOCK_USAGE_STATES</a><span class=\"ts\"/><span class=\"ts\"/>(1+3*4)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_LOCKDEP_SUBCLASSES\">MAX_LOCKDEP_SUBCLASSES</a><span class=\"ts\"/><span class=\"ts\"/>8UL", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lock-classes are keyed via unique addresses, by embedding the</span>", 
"<span class=\"comment\"> * lockclass-key into the kernel (or module) .data section. (For</span>", 
"<span class=\"comment\"> * static locks we use the lock address itself as the key.)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#lockdep_subclass_key\">lockdep_subclass_key</a> {", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#__one_byte\">__one_byte</a>;", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#__packed__\">__packed__</a>));", 
"", 
"struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_subclass_key\">lockdep_subclass_key</a><span class=\"ts\"/><a class=\"id\" href=\"#subkeys\">subkeys</a>[<a class=\"id\" href=\"#MAX_LOCKDEP_SUBCLASSES\">MAX_LOCKDEP_SUBCLASSES</a>];", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#__lockdep_no_validate__\">__lockdep_no_validate__</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCKSTAT_POINTS\">LOCKSTAT_POINTS</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The lock-class itself:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#lock_class\">lock_class</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * class-hash:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash_entry\">hash_entry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * global list of all lock-classes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_entry\">lock_entry</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_subclass_key\">lockdep_subclass_key</a><span class=\"ts\"/>*<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subclass\">subclass</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dep_gen_id\">dep_gen_id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IRQ/softirq usage tracking bits:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usage_mask\">usage_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_trace\">stack_trace</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usage_traces\">usage_traces</a>[<a class=\"id\" href=\"#XXX_LOCK_USAGE_STATES\">XXX_LOCK_USAGE_STATES</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These fields represent a directed graph of lock dependencies,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to every node we attach a list of \"forward\" and a list of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"backward\" graph nodes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_after\">locks_after</a>, <a class=\"id\" href=\"#locks_before\">locks_before</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Generation counter, when doing certain classes of graph walking,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to ensure that we check one node only once:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#version\">version</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Statistics counter:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name_version\">name_version</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCK_STAT\">CONFIG_LOCK_STAT</a>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#contention_point\">contention_point</a>[<a class=\"id\" href=\"#LOCKSTAT_POINTS\">LOCKSTAT_POINTS</a>];", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#contending_point\">contending_point</a>[<a class=\"id\" href=\"#LOCKSTAT_POINTS\">LOCKSTAT_POINTS</a>];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCK_STAT\">CONFIG_LOCK_STAT</a>", 
"struct <a class=\"id\" href=\"#lock_time\">lock_time</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>;", 
"};", 
"", 
"enum <a class=\"id\" href=\"#bounce_type\">bounce_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bounce_acquired_write\">bounce_acquired_write</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bounce_acquired_read\">bounce_acquired_read</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bounce_contended_write\">bounce_contended_write</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bounce_contended_read\">bounce_contended_read</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_bounce_types\">nr_bounce_types</a>,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bounce_acquired\">bounce_acquired</a> = <a class=\"id\" href=\"#bounce_acquired_write\">bounce_acquired_write</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bounce_contended\">bounce_contended</a> = <a class=\"id\" href=\"#bounce_contended_write\">bounce_contended_write</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#lock_class_stats\">lock_class_stats</a> {", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#contention_point\">contention_point</a>[4];", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#contending_point\">contending_point</a>[4];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_time\">lock_time</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_waittime\">read_waittime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_time\">lock_time</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_waittime\">write_waittime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_time\">lock_time</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_holdtime\">read_holdtime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_time\">lock_time</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_holdtime\">write_holdtime</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bounces\">bounces</a>[<a class=\"id\" href=\"#nr_bounce_types\">nr_bounce_types</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#lock_class_stats\">lock_class_stats</a> <a class=\"id\" href=\"#lock_stats\">lock_stats</a>(struct <a class=\"id\" href=\"#lock_class\">lock_class</a> *<a class=\"id\" href=\"#class\">class</a>);", 
"void <a class=\"id\" href=\"#clear_lock_stats\">clear_lock_stats</a>(struct <a class=\"id\" href=\"#lock_class\">lock_class</a> *<a class=\"id\" href=\"#class\">class</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map the lock object (the lock instance) to the lock-class object.</span>", 
"<span class=\"comment\"> * This is embedded into specific lock instances:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class\">lock_class</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#class_cache\">class_cache</a>;", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCK_STAT\">CONFIG_LOCK_STAT</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Every lock has a list of other locks that were taken after it.</span>", 
"<span class=\"comment\"> * We only grow the list, never remove from it:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#lock_list\">lock_list</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class\">lock_class</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_trace\">stack_trace</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#distance\">distance</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The parent field is used to implement breadth-first search, and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bit 0 is reused to indicate if the lock has been accessed in BFS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_list\">lock_list</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#parent\">parent</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We record lock dependency chains, so that we can cache them:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#lock_chain\">lock_chain</a> {", 
];
xr_frag_insert('l/d1/7bf95b3a52daae4c25b35e2ced5f8076e1aea5.xr', __xr_tmp);
