var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Public API and common code for kernel-&gt;userspace relay file support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See Documentation/filesystems/relay.txt for an overview.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002-2005 - Tom Zanussi (zanussi@us.ibm.com), IBM Corp</span>", 
"<span class=\"comment\"> * Copyright (C) 1999-2005 - Karim Yaghmour (karim@opersys.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Moved to kernel/relay.c by Paul Mundt, 2006.</span>", 
"<span class=\"comment\"> * November 2006 - CPU hotplug support by Mathieu Desnoyers</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>(mathieu.desnoyers@polymtl.ca)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPL.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#relay\">relay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#splice\">splice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* list of open channels, for cpu hotplug */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#relay_channels_mutex\">relay_channels_mutex</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#relay_channels\">relay_channels</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * close() vm_op implementation for relay file mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#relay_file_mmap_close\">relay_file_mmap_close</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_private_data\">vm_private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#buf_unmapped\">buf_unmapped</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fault() vm_op implementation for relay file mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#relay_buf_fault\">relay_buf_fault</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> *<a class=\"id\" href=\"#vmf\">vmf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_private_data\">vm_private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#start\">start</a> + (<a class=\"id\" href=\"#pgoff\">pgoff</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vm_ops for relay file mappings.</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#vm_operations_struct\">vm_operations_struct</a> <a class=\"id\" href=\"#relay_file_mmap_ops\">relay_file_mmap_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fault\">fault</a> = <a class=\"id\" href=\"#relay_buf_fault\">relay_buf_fault</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#close\">close</a> = <a class=\"id\" href=\"#relay_file_mmap_close\">relay_file_mmap_close</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * allocate an array of pointers of struct page</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#relay_alloc_page_array\">relay_alloc_page_array</a>(unsigned int <a class=\"id\" href=\"#n_pages\">n_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#array\">array</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#pa_size\">pa_size</a> = <a class=\"id\" href=\"#n_pages\">n_pages</a> * sizeof(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pa_size\">pa_size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#pa_size\">pa_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#array\">array</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#array\">array</a>, 0, <a class=\"id\" href=\"#pa_size\">pa_size</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#pa_size\">pa_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#array\">array</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * free an array of pointers of struct page</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#relay_free_page_array\">relay_free_page_array</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#array\">array</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vmalloc_addr\">is_vmalloc_addr</a>(<a class=\"id\" href=\"#array\">array</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#array\">array</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#array\">array</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_mmap_buf: - mmap channel buffer to process address space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: relay channel buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@vma: vm_area_struct describing memory to be mapped</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 if ok, negative on error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Caller should already have grabbed mmap_sem.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#relay_mmap_buf\">relay_mmap_buf</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> != (unsigned long)<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#alloc_size\">alloc_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> = &amp;<a class=\"id\" href=\"#relay_file_mmap_ops\">relay_file_mmap_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_DONTEXPAND\">VM_DONTEXPAND</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_private_data\">vm_private_data</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#buf_mapped\">buf_mapped</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#filp\">filp</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_alloc_buf - allocate a channel buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: the buffer struct</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: total size of the buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns a pointer to the resulting buffer, %NULL if unsuccessful. The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>passed in size will get page aligned, if it isn't already.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#relay_alloc_buf\">relay_alloc_buf</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#n_pages\">n_pages</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(*<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n_pages\">n_pages</a> = *<a class=\"id\" href=\"#size\">size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a> = <a class=\"id\" href=\"#relay_alloc_page_array\">relay_alloc_page_array</a>(<a class=\"id\" href=\"#n_pages\">n_pages</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n_pages\">n_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#depopulate\">depopulate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a>[<a class=\"id\" href=\"#i\">i</a>], (unsigned long)<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#vmap\">vmap</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a>, <a class=\"id\" href=\"#n_pages\">n_pages</a>, <a class=\"id\" href=\"#VM_MAP\">VM_MAP</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#depopulate\">depopulate</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#mem\">mem</a>, 0, *<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_count\">page_count</a> = <a class=\"id\" href=\"#n_pages\">n_pages</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<a class=\"id\" href=\"#depopulate\">depopulate</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a>[<a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#relay_free_page_array\">relay_free_page_array</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_create_buf - allocate and initialize a channel buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chan: the relay channel</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns channel buffer if successful, %NULL otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#relay_create_buf\">relay_create_buf</a>(struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#padding\">padding</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#n_subbufs\">n_subbufs</a> * sizeof(<a class=\"id\" href=\"#size_t\">size_t</a> *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#padding\">padding</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_buf\">free_buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#relay_alloc_buf\">relay_alloc_buf</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#alloc_size\">alloc_size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_buf\">free_buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_get\">kref_get</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<a class=\"id\" href=\"#free_buf\">free_buf</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#padding\">padding</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_destroy_channel - free the channel struct</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@kref: target kernel reference that contains the relay channel</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Should only be called from kref_put().</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#relay_destroy_channel\">relay_destroy_channel</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kref\">kref</a>, struct <a class=\"id\" href=\"#rchan\">rchan</a>, <a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_destroy_buf - destroy an rchan_buf struct and associated buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: the buffer struct</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#relay_destroy_buf\">relay_destroy_buf</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#start\">start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vunmap\">vunmap</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_count\">page_count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#relay_free_page_array\">relay_free_page_array</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page_array\">page_array</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#padding\">padding</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#kref\">kref</a>, <a class=\"id\" href=\"#relay_destroy_channel\">relay_destroy_channel</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_remove_buf - remove a channel buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@kref: target kernel reference that contains the relay buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Removes the file from the fileystem, which also frees the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rchan_buf_struct and the channel buffer.  Should only be called from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kref_put().</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#relay_remove_buf\">relay_remove_buf</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kref\">kref</a>, struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a>, <a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#remove_buf_file\">remove_buf_file</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#relay_destroy_buf\">relay_destroy_buf</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_buf_empty - boolean, is the channel buffer empty?</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: channel buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 1 if the buffer is empty, 0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#relay_buf_empty\">relay_buf_empty</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#subbufs_produced\">subbufs_produced</a> - <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#subbufs_consumed\">subbufs_consumed</a>) ? 0 : 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_buf_full - boolean, is the channel buffer full?</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: channel buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 1 if the buffer is full, 0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#relay_buf_full\">relay_buf_full</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ready\">ready</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#subbufs_produced\">subbufs_produced</a> - <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#subbufs_consumed\">subbufs_consumed</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ready\">ready</a> >= <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#n_subbufs\">n_subbufs</a>) ? 1 : 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#relay_buf_full\">relay_buf_full</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * High-level relay kernel API and associated functions.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rchan_callback implementations defining default channel behavior.  Used</span>", 
"<span class=\"comment\"> * in place of corresponding NULL values in client callback struct.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * subbuf_start() default callback.  Does nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#subbuf_start_default_callback\">subbuf_start_default_callback</a> (struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#subbuf\">subbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#prev_subbuf\">prev_subbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#prev_padding\">prev_padding</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#relay_buf_full\">relay_buf_full</a>(<a class=\"id\" href=\"#buf\">buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * buf_mapped() default callback.  Does nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#buf_mapped_default_callback\">buf_mapped_default_callback</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * buf_unmapped() default callback.  Does nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#buf_unmapped_default_callback\">buf_unmapped_default_callback</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * create_buf_file_create() default callback.  Does nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#create_buf_file_default_callback\">create_buf_file_default_callback</a>(const char *<a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int *<a class=\"id\" href=\"#is_global\">is_global</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * remove_buf_file() default callback.  Does nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#remove_buf_file_default_callback\">remove_buf_file_default_callback</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* relay channel default callbacks */</span>", 
"static struct <a class=\"id\" href=\"#rchan_callbacks\">rchan_callbacks</a> <a class=\"id\" href=\"#default_channel_callbacks\">default_channel_callbacks</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#subbuf_start\">subbuf_start</a> = <a class=\"id\" href=\"#subbuf_start_default_callback\">subbuf_start_default_callback</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#buf_mapped\">buf_mapped</a> = <a class=\"id\" href=\"#buf_mapped_default_callback\">buf_mapped_default_callback</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#buf_unmapped\">buf_unmapped</a> = <a class=\"id\" href=\"#buf_unmapped_default_callback\">buf_unmapped_default_callback</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#create_buf_file\">create_buf_file</a> = <a class=\"id\" href=\"#create_buf_file_default_callback\">create_buf_file_default_callback</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#remove_buf_file\">remove_buf_file</a> = <a class=\"id\" href=\"#remove_buf_file_default_callback\">remove_buf_file_default_callback</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>wakeup_readers - wake up readers waiting on a channel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data: contains the channel buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is the timer function used to defer reader waking.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#wakeup_readers\">wakeup_readers</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a> = (struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#read_wait\">read_wait</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__relay_reset - reset a channel buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: the channel buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@init: 1 if this is a first-time initialization</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>See relay_reset() for description of effect.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__relay_reset\">__relay_reset</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#init\">init</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
];
xr_frag_insert('l/d1/86c931c99524bf304c824b71cddd6817b45989.xr', __xr_tmp);
