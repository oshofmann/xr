var __xr_tmp = [
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_sigaction\">k_sigaction</a> *<a class=\"id\" href=\"#action\">action</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#sig\">sig</a>-1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ignored\">ignored</a> = <a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> == <a class=\"id\" href=\"#SIG_IGN\">SIG_IGN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocked\">blocked</a> = <a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blocked\">blocked</a> || <a class=\"id\" href=\"#ignored\">ignored</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> = <a class=\"id\" href=\"#SIG_DFL\">SIG_DFL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blocked\">blocked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigdelset\">sigdelset</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recalc_sigpending_and_wake\">recalc_sigpending_and_wake</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> == <a class=\"id\" href=\"#SIG_DFL\">SIG_DFL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#SIGNAL_UNKILLABLE\">SIGNAL_UNKILLABLE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#specific_send_sig_info\">specific_send_sig_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Nuke all other threads in the group.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#zap_other_threads\">zap_other_threads</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#t\">t</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't bother with already dead threads */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigaddset\">sigaddset</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pending\">pending</a>.<a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal_wake_up\">signal_wake_up</a>(<a class=\"id\" href=\"#t\">t</a>, 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#lock_task_sighand\">lock_task_sighand</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#sighand\">sighand</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sighand\">sighand</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sighand\">sighand</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#sighand\">sighand</a> == <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sighand\">sighand</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * send signal info to all the members of a group</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#group_send_sig_info\">group_send_sig_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#check_kill_permission\">check_kill_permission</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#sig\">sig</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_send_sig_info\">do_send_sig_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __kill_pgrp_info() sends a signal to a process group: this is what the tty</span>", 
"<span class=\"comment\"> * control characters do (^C, ^Z etc)</span>", 
"<span class=\"comment\"> * - the caller must hold at least a readlock on tasklist_lock</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__kill_pgrp_info\">__kill_pgrp_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pgrp\">pgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#success\">success</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#success\">success</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_pid_task\">do_each_pid_task</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#group_send_sig_info\">group_send_sig_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#success\">success</a> |= !<a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_pid_task\">while_each_pid_task</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#success\">success</a> ? 0 : <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#kill_pid_info\">kill_pid_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pid_task\">pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#group_send_sig_info\">group_send_sig_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The task was unhashed in between, try again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If it is dead, pid_task() will return NULL,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if we race with de_thread() it will find the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * new leader.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"int", 
"<a class=\"id\" href=\"#kill_proc_info\">kill_proc_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kill_pid_info\">kill_pid_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#find_vpid\">find_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/* like kill_pid_info(), but doesn't use uid/euid of \"current\" */</span>", 
"int <a class=\"id\" href=\"#kill_pid_info_as_uid\">kill_pid_info_as_uid</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#euid\">euid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#pcred\">pcred</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#valid_signal\">valid_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pid_task\">pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcred\">pcred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#si_fromuser\">si_fromuser</a>(<a class=\"id\" href=\"#info\">info</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#pcred\">pcred</a>-><a class=\"id\" href=\"#suid\">suid</a> && <a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#pcred\">pcred</a>-><a class=\"id\" href=\"#uid\">uid</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#uid\">uid</a>  != <a class=\"id\" href=\"#pcred\">pcred</a>-><a class=\"id\" href=\"#suid\">suid</a> && <a class=\"id\" href=\"#uid\">uid</a>  != <a class=\"id\" href=\"#pcred\">pcred</a>-><a class=\"id\" href=\"#uid\">uid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_task_kill\">security_task_kill</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sig\">sig</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lock_task_sighand\">lock_task_sighand</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__send_signal\">__send_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#p\">p</a>, 1, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_task_sighand\">unlock_task_sighand</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kill_pid_info_as_uid\">kill_pid_info_as_uid</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kill_something_info() interprets pid in interesting ways just like kill(2).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * POSIX specifies that kill(-1,sig) is unspecified, but what we have</span>", 
"<span class=\"comment\"> * is probably wrong.  Should make it like BSD or SYSV.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#kill_something_info\">kill_something_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kill_pid_info\">kill_pid_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#find_vpid\">find_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__kill_pgrp_info\">__kill_pgrp_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> ? <a class=\"id\" href=\"#find_vpid\">find_vpid</a>(-<a class=\"id\" href=\"#pid\">pid</a>) : <a class=\"id\" href=\"#task_pgrp\">task_pgrp</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0, <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_process\">for_each_process</a>(<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#p\">p</a>) &gt; 1 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#same_thread_group\">same_thread_group</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#group_send_sig_info\">group_send_sig_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EPERM\">EPERM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#count\">count</a> ? <a class=\"id\" href=\"#retval\">retval</a> : -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are for backward compatibility with the rest of the kernel source.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int", 
"<a class=\"id\" href=\"#send_sig_info\">send_sig_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure legacy kernel users don't send in bad values</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (normal paths check this in check_kill_permission).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#valid_signal\">valid_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_send_sig_info\">do_send_sig_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__si_special\">__si_special</a>(<a class=\"id\" href=\"#priv\">priv</a>) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#priv\">priv</a>) ? <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a> : <a class=\"id\" href=\"#SEND_SIG_NOINFO\">SEND_SIG_NOINFO</a>)", 
"", 
"int", 
"<a class=\"id\" href=\"#send_sig\">send_sig</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#send_sig_info\">send_sig_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#__si_special\">__si_special</a>(<a class=\"id\" href=\"#priv\">priv</a>), <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#force_sig\">force_sig</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_sig_info\">force_sig_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When things go south during signal handling, we</span>", 
"<span class=\"comment\"> * will force a SIGSEGV. And if the signal that caused</span>", 
"<span class=\"comment\"> * the problem was already a SIGSEGV, we'll want to</span>", 
"<span class=\"comment\"> * make sure we don't even try to deliver the signal..</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#force_sigsegv\">force_sigsegv</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sig\">sig</a> == <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#sig\">sig</a> - 1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> = <a class=\"id\" href=\"#SIG_DFL\">SIG_DFL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#kill_pgrp\">kill_pgrp</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#sig\">sig</a>, int <a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__kill_pgrp_info\">__kill_pgrp_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#__si_special\">__si_special</a>(<a class=\"id\" href=\"#priv\">priv</a>), <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kill_pgrp\">kill_pgrp</a>);", 
"", 
"int <a class=\"id\" href=\"#kill_pid\">kill_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#sig\">sig</a>, int <a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kill_pid_info\">kill_pid_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#__si_special\">__si_special</a>(<a class=\"id\" href=\"#priv\">priv</a>), <a class=\"id\" href=\"#pid\">pid</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kill_pid\">kill_pid</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These functions support sending signals using preallocated sigqueue</span>", 
"<span class=\"comment\"> * structures.  This is needed \"because realtime applications cannot</span>", 
"<span class=\"comment\"> * afford to lose notifications of asynchronous events, like timer</span>", 
"<span class=\"comment\"> * expirations or I/O completions\".  In the case of Posix Timers</span>", 
"<span class=\"comment\"> * we allocate the sigqueue structure from the timer_create.  If this</span>", 
"<span class=\"comment\"> * allocation fails we are able to report the failure to the application</span>", 
"<span class=\"comment\"> * with an EAGAIN error.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#sigqueue_alloc\">sigqueue_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#__sigqueue_alloc\">__sigqueue_alloc</a>(-1, <a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SIGQUEUE_PREALLOC\">SIGQUEUE_PREALLOC</a>;", 
"", 
];
xr_frag_insert('l/d1/93ffc0cf9854f784a1f06ae13bbcd2fefd7109.xr', __xr_tmp);
