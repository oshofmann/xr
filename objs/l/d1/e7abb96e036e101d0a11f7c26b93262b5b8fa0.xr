var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NET3:<span class=\"ts\"/>Implementation of the ICMP protocol layer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox, &lt;alan@lxorguk.ukuu.org.uk&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Some of the function names and the icmp unreach table for this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>module were derived from [icmp.c 1.0.11 06/02/93] by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ross Biro, Fred N. van Kempen, Mark Evans, Alan Cox, Gerhard Koerting.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Other than that this module is a complete rewrite.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Fixes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clemens Fruhwirth<span class=\"ts\"/>:<span class=\"ts\"/>introduce global icmp rate limiting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>with icmp type masking ability instead</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>of broken per type icmp timeouts.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Mike Shaver<span class=\"ts\"/>:<span class=\"ts\"/>RFC1122 checks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Multicast ping reply as self.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Fix atomicity lockup in ip_build_xmit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>call.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Added 216,128 byte paths to the MTU</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>code.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Martin Mares<span class=\"ts\"/>:<span class=\"ts\"/>RFC1812 checks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Martin Mares<span class=\"ts\"/>:<span class=\"ts\"/>Can be configured to follow redirects</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if acting as a router _without_ a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>routing protocol (RFC 1812).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Martin Mares<span class=\"ts\"/>:<span class=\"ts\"/>Echo requests may be configured to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>be ignored (RFC 1812).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Martin Mares<span class=\"ts\"/>:<span class=\"ts\"/>Limitation of ICMP error message</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>transmit rate (RFC 1812).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Martin Mares<span class=\"ts\"/>:<span class=\"ts\"/>TOS and Precedence set correctly</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(RFC 1812).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Martin Mares<span class=\"ts\"/>:<span class=\"ts\"/>Now copying as much data from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>original packet as we can without</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>exceeding 576 bytes (RFC 1812).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Willy Konynenberg<span class=\"ts\"/>:<span class=\"ts\"/>Transparent proxying support.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Keith Owens<span class=\"ts\"/>:<span class=\"ts\"/>RFC1191 correction for 4.2BSD based</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>path MTU bug.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Thomas Quinot<span class=\"ts\"/>:<span class=\"ts\"/>ICMP Dest Unreach codes up to 15 are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>valid (RFC 1812).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen<span class=\"ts\"/>:<span class=\"ts\"/>Check all packet lengths properly</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>and moved all kfree_skb() up to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>icmp_rcv.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen<span class=\"ts\"/>:<span class=\"ts\"/>Move the rate limit bookkeeping</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>into the dest entry and use a token</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>bucket filter (thanks to ANK). Make</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the rates sysctl configurable.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Yu Tianli<span class=\"ts\"/>:<span class=\"ts\"/>Fixed two ugly bugs in icmp_send</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- IP option length was accounted wrongly</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- ICMP header length was not accounted</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  at all.</span>", 
"<span class=\"comment\"> *              Tristan Greaves :       Added sysctl option to ignore bogus</span>", 
"<span class=\"comment\"> *              <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>broadcast responses from broken routers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To Fix:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Should use skb_pull() instead of all the manual checking.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  This would also greatly simply some upper layer error handlers. --AK</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inetdevice\">inetdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netfilter_ipv4\">netfilter_ipv4</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#snmp\">snmp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#route\">route</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#protocol\">protocol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#icmp\">icmp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#udp\">udp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#raw\">raw</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#xfrm\">xfrm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#inet_common\">inet_common</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Build xmit assembly blocks</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#icmp_bxm\">icmp_bxm</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#data_len\">data_len</a>;", 
"", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#icmphdr\">icmphdr</a> <a class=\"id\" href=\"#icmph\">icmph</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/>       <a class=\"id\" href=\"#times\">times</a>[3];", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#head_len\">head_len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_options\">ip_options</a> <a class=\"id\" href=\"#replyopts\">replyopts</a>;", 
"<span class=\"ts\"/>unsigned char  <a class=\"id\" href=\"#optbuf\">optbuf</a>[40];", 
"};", 
"", 
"<span class=\"comment\">/* An array of errno for error messages from dest unreach. */</span>", 
"<span class=\"comment\">/* RFC 1122: 3.2.2.1 States that NET_UNREACH, HOST_UNREACH and SR_FAILED MUST be considered 'transient errs'. */</span>", 
"", 
"const struct <a class=\"id\" href=\"#icmp_err\">icmp_err</a> <a class=\"id\" href=\"#icmp_err_convert\">icmp_err_convert</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#ENETUNREACH\">ENETUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_NET_UNREACH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 0,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#EHOSTUNREACH\">EHOSTUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_HOST_UNREACH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 0,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#ENOPROTOOPT\">ENOPROTOOPT</a><span class=\"ts\"/><span class=\"comment\">/* ICMP_PROT_UNREACH */</span>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#ECONNREFUSED\">ECONNREFUSED</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_PORT_UNREACH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#EMSGSIZE\">EMSGSIZE</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_FRAG_NEEDED */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 0,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_SR_FAILED */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 0,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#ENETUNREACH\">ENETUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_NET_UNKNOWN */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#EHOSTDOWN\">EHOSTDOWN</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_HOST_UNKNOWN */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#ENONET\">ENONET</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_HOST_ISOLATED */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#ENETUNREACH\">ENETUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_NET_ANO<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#EHOSTUNREACH\">EHOSTUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_HOST_ANO */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#ENETUNREACH\">ENETUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_NET_UNR_TOS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 0,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#EHOSTUNREACH\">EHOSTUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_HOST_UNR_TOS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 0,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#EHOSTUNREACH\">EHOSTUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_PKT_FILTERED */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#EHOSTUNREACH\">EHOSTUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_PREC_VIOLATION */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#errno\">errno</a> = <a class=\"id\" href=\"#EHOSTUNREACH\">EHOSTUNREACH</a>,<span class=\"ts\"/><span class=\"comment\">/* ICMP_PREC_CUTOFF */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fatal\">fatal</a> = 1,", 
"<span class=\"ts\"/>},", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#icmp_err_convert\">icmp_err_convert</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ICMP control array. This specifies what to do with each ICMP.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#icmp_control\">icmp_control</a> {", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>short   <a class=\"id\" href=\"#error\">error</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This ICMP is classed as an error message */</span>", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#icmp_control\">icmp_control</a> <a class=\"id\" href=\"#icmp_pointers\">icmp_pointers</a>[<a class=\"id\" href=\"#NR_ICMP_TYPES\">NR_ICMP_TYPES</a>+1];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The ICMP socket(s). This is the most convenient way to flow control</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>our ICMP output as well as maintain a clean interface throughout</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>all layers. All Socketless IP sends will soon be gone.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On SMP we have one ICMP socket per-cpu.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#icmp_xmit_lock\">icmp_xmit_lock</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_disable\">local_bh_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#icmp_sk\">icmp_sk</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#spin_trylock\">spin_trylock</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This can happen if the output path signals a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * dst_link_failure() for an outgoing ICMP packet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_bh_enable\">local_bh_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#icmp_xmit_unlock\">icmp_xmit_unlock</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Send an ICMP frame.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check transmit rate limitation for given message.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The rate information is held in the destination cache now.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is generic and could be used for other purposes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>too. It uses a Token bucket filter as suggested by Alexey Kuznetsov.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that the same dst_entry fields are modified by functions in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>route.c too, but these work for packet destinations while xrlim_allow</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>works for icmp destinations. This means the rate limiting information</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for one \"ip object\" is shared - and these ICMPs are twice limited:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by source and by destination.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RFC 1812: 4.3.2.8 SHOULD be able to limit error message rate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  SHOULD allow setting of rate limits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Shared between ICMPv4 and ICMPv6.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XRLIM_BURST_FACTOR\">XRLIM_BURST_FACTOR</a> 6", 
"int <a class=\"id\" href=\"#xrlim_allow\">xrlim_allow</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#token\">token</a> = <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#rate_tokens\">rate_tokens</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#token\">token</a> += <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#rate_last\">rate_last</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#rate_last\">rate_last</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#token\">token</a> &gt; <a class=\"id\" href=\"#XRLIM_BURST_FACTOR\">XRLIM_BURST_FACTOR</a> * <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#token\">token</a> = <a class=\"id\" href=\"#XRLIM_BURST_FACTOR\">XRLIM_BURST_FACTOR</a> * <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#token\">token</a> >= <a class=\"id\" href=\"#timeout\">timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#token\">token</a> -= <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#rate_tokens\">rate_tokens</a> = <a class=\"id\" href=\"#token\">token</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#xrlim_allow\">xrlim_allow</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#icmpv4_xrlim_allow\">icmpv4_xrlim_allow</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt\">rt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#code\">code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a> = &amp;<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#NR_ICMP_TYPES\">NR_ICMP_TYPES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't limit PMTU discovery. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ICMP_DEST_UNREACH\">ICMP_DEST_UNREACH</a> && <a class=\"id\" href=\"#code\">code</a> == <a class=\"id\" href=\"#ICMP_FRAG_NEEDED\">ICMP_FRAG_NEEDED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No rate limit on loopback */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#dev\">dev</a> && (<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a>&amp;<a class=\"id\" href=\"#IFF_LOOPBACK\">IFF_LOOPBACK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Limit if icmp type is enabled in ratemask. */</span>", 
"<span class=\"ts\"/>if ((1 << <a class=\"id\" href=\"#type\">type</a>) &amp; <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_ratemask\">sysctl_icmp_ratemask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#xrlim_allow\">xrlim_allow</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_ratelimit\">sysctl_icmp_ratelimit</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Maintain the counters used in the SNMP statistics for outgoing ICMP</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#icmp_out_count\">icmp_out_count</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned char <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ICMPMSGOUT_INC_STATS\">ICMPMSGOUT_INC_STATS</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ICMP_INC_STATS\">ICMP_INC_STATS</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ICMP_MIB_OUTMSGS\">ICMP_MIB_OUTMSGS</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Checksum each fragment, and on the first include the headers and final</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>checksum.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#icmp_glue_bits\">icmp_glue_bits</a>(void *<a class=\"id\" href=\"#from\">from</a>, char *<a class=\"id\" href=\"#to\">to</a>, int <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#odd\">odd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#icmp_bxm\">icmp_bxm</a> *<a class=\"id\" href=\"#icmp_param\">icmp_param</a> = (struct <a class=\"id\" href=\"#icmp_bxm\">icmp_bxm</a> *)<a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#skb_copy_and_csum_bits\">skb_copy_and_csum_bits</a>(<a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#len\">len</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_block_add\">csum_block_add</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#odd\">odd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icmp_pointers\">icmp_pointers</a>[<a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#icmph\">icmph</a>.<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nf_ct_attach\">nf_ct_attach</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#icmp_push_reply\">icmp_push_reply</a>(struct <a class=\"id\" href=\"#icmp_bxm\">icmp_bxm</a> *<a class=\"id\" href=\"#icmp_param\">icmp_param</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ipcm_cookie\">ipcm_cookie</a> *<a class=\"id\" href=\"#ipc\">ipc</a>, struct <a class=\"id\" href=\"#rtable\">rtable</a> **<a class=\"id\" href=\"#rt\">rt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#icmp_sk\">icmp_sk</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>((*<a class=\"id\" href=\"#rt\">rt</a>)-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ip_append_data\">ip_append_data</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#icmp_glue_bits\">icmp_glue_bits</a>, <a class=\"id\" href=\"#icmp_param\">icmp_param</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#data_len\">data_len</a>+<a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#head_len\">head_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#head_len\">head_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ipc\">ipc</a>, <a class=\"id\" href=\"#rt\">rt</a>, <a class=\"id\" href=\"#MSG_DONTWAIT\">MSG_DONTWAIT</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ICMP_INC_STATS_BH\">ICMP_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#ICMP_MIB_OUTERRORS\">ICMP_MIB_OUTERRORS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_flush_pending_frames\">ip_flush_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_peek\">skb_peek</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#icmphdr\">icmphdr</a> *<a class=\"id\" href=\"#icmph\">icmph</a> = <a class=\"id\" href=\"#icmp_hdr\">icmp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb1\">skb1</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk\">skb_queue_walk</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb1\">skb1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_add\">csum_add</a>(<a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#skb1\">skb1</a>-><a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_partial_copy_nocheck\">csum_partial_copy_nocheck</a>((void *)&amp;<a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (char *)<a class=\"id\" href=\"#icmph\">icmph</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#head_len\">head_len</a>, <a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#checksum\">checksum</a> = <a class=\"id\" href=\"#csum_fold\">csum_fold</a>(<a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_push_pending_frames\">ip_push_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Driving logic for building and sending ICMP messages.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#icmp_reply\">icmp_reply</a>(struct <a class=\"id\" href=\"#icmp_bxm\">icmp_bxm</a> *<a class=\"id\" href=\"#icmp_param\">icmp_param</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipcm_cookie\">ipcm_cookie</a> <a class=\"id\" href=\"#ipc\">ipc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt\">rt</a> = <a class=\"id\" href=\"#skb_rtable\">skb_rtable</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ip_options_echo\">ip_options_echo</a>(&amp;<a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#replyopts\">replyopts</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#icmp_xmit_lock\">icmp_xmit_lock</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#icmph\">icmph</a>.<a class=\"id\" href=\"#checksum\">checksum</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#tos\">tos</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#tos\">tos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_src\">rt_src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#shtx\">shtx</a>.<a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#replyopts\">replyopts</a>.<a class=\"id\" href=\"#optlen\">optlen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a> = &amp;<a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#replyopts\">replyopts</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#srr\">srr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#replyopts\">replyopts</a>.<a class=\"id\" href=\"#faddr\">faddr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#flowi\">flowi</a> <a class=\"id\" href=\"#fl\">fl</a> = { .<a class=\"id\" href=\"#nl_u\">nl_u</a> = { .<a class=\"id\" href=\"#ip4_u\">ip4_u</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      { .<a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#saddr\">saddr</a> = <a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_spec_dst\">rt_spec_dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tos\">tos</a> = <a class=\"id\" href=\"#RT_TOS\">RT_TOS</a>(<a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#tos\">tos</a>) } },", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#IPPROTO_ICMP\">IPPROTO_ICMP</a> };", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_skb_classify_flow\">security_skb_classify_flow</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ip_route_output_key\">ip_route_output_key</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#rt\">rt</a>, &amp;<a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icmpv4_xrlim_allow\">icmpv4_xrlim_allow</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#rt\">rt</a>, <a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#icmph\">icmph</a>.<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#icmp_param\">icmp_param</a>-><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#icmph\">icmph</a>.<a class=\"id\" href=\"#code\">code</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmp_push_reply\">icmp_push_reply</a>(<a class=\"id\" href=\"#icmp_param\">icmp_param</a>, &amp;<a class=\"id\" href=\"#ipc\">ipc</a>, &amp;<a class=\"id\" href=\"#rt\">rt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip_rt_put\">ip_rt_put</a>(<a class=\"id\" href=\"#rt\">rt</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_xmit_unlock\">icmp_xmit_unlock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Send an ICMP message in response to a situation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RFC 1122: 3.2.2<span class=\"ts\"/>MUST send at least the IP header and 8 bytes of header.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  MAY send more (we do).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>MUST NOT change this header information.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>MUST NOT reply to a multicast/broadcast IP address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>MUST NOT reply to a multicast/broadcast MAC address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>MUST reply to only the first fragment.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#icmp_send\">icmp_send</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_in\">skb_in</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#room\">room</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#icmp_bxm\">icmp_bxm</a> <a class=\"id\" href=\"#icmp_param\">icmp_param</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt\">rt</a> = <a class=\"id\" href=\"#skb_rtable\">skb_rtable</a>(<a class=\"id\" href=\"#skb_in\">skb_in</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipcm_cookie\">ipcm_cookie</a> <a class=\"id\" href=\"#ipc\">ipc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#tos\">tos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt\">rt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Find the original header. It is expected to be valid, of course.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Check this, icmp_send is called from the most obscure devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>sometimes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb_in\">skb_in</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#iph\">iph</a> &lt; <a class=\"id\" href=\"#skb_in\">skb_in</a>-><a class=\"id\" href=\"#head\">head</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#skb_in\">skb_in</a>-><a class=\"id\" href=\"#network_header\">network_header</a> + sizeof(*<a class=\"id\" href=\"#iph\">iph</a>)) &gt; <a class=\"id\" href=\"#skb_in\">skb_in</a>-><a class=\"id\" href=\"#tail\">tail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>No replies to physical multicast/broadcast</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_in\">skb_in</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> != <a class=\"id\" href=\"#PACKET_HOST\">PACKET_HOST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Now check at the protocol level</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_flags\">rt_flags</a> &amp; (<a class=\"id\" href=\"#RTCF_BROADCAST\">RTCF_BROADCAST</a> | <a class=\"id\" href=\"#RTCF_MULTICAST\">RTCF_MULTICAST</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Only reply to fragment 0. We byte re-order the constant</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>mask for efficiency.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#frag_off\">frag_off</a> &amp; <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#IP_OFFSET\">IP_OFFSET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>If we send an ICMP error to an ICMP error a mess would result..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icmp_pointers\">icmp_pointers</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>We are an error, check if we are replying to an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>ICMP error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#IPPROTO_ICMP\">IPPROTO_ICMP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#_inner_type\">_inner_type</a>, *<a class=\"id\" href=\"#itp\">itp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#itp\">itp</a> = <a class=\"id\" href=\"#skb_header_pointer\">skb_header_pointer</a>(<a class=\"id\" href=\"#skb_in\">skb_in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#skb_in\">skb_in</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#ihl\">ihl</a> << 2) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#icmphdr\">icmphdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#type\">type</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#skb_in\">skb_in</a>-><a class=\"id\" href=\"#data\">data</a>,", 
];
xr_frag_insert('l/d1/e7abb96e036e101d0a11f7c26b93262b5b8fa0.xr', __xr_tmp);
