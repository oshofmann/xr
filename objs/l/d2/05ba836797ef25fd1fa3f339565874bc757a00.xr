var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/kernel/signal.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  1997-11-02  Modified for POSIX.1b signals by Richard Henderson</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  2003-06-02  Jim Houston - Concurrent Computer Corp.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Changes to use preallocated sigqueue structures</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>to allow signals to be sent reliably.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#binfmts\">binfmts</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signalfd\">signalfd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ratelimit\">ratelimit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tracehook\">tracehook</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_TRACE_POINTS\">CREATE_TRACE_POINTS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#param\">param</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#siginfo\">siginfo</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"audit.h\"<span class=\"ts\"/><span class=\"comment\">/* audit_signal_info() */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SLAB caches for signal bits.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#sigqueue_cachep\">sigqueue_cachep</a>;", 
"", 
"int <a class=\"id\" href=\"#print_fatal_signals\">print_fatal_signals</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#sig_handler\">sig_handler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#sig\">sig</a> - 1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sig_handler_ignored\">sig_handler_ignored</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#handler\">handler</a>, int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Is it explicitly or implicitly ignored? */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#handler\">handler</a> == <a class=\"id\" href=\"#SIG_IGN\">SIG_IGN</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#handler\">handler</a> == <a class=\"id\" href=\"#SIG_DFL\">SIG_DFL</a> && <a class=\"id\" href=\"#sig_kernel_ignore\">sig_kernel_ignore</a>(<a class=\"id\" href=\"#sig\">sig</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sig_task_ignored\">sig_task_ignored</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#sig\">sig</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#handler\">handler</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#sig_handler\">sig_handler</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGNAL_UNKILLABLE\">SIGNAL_UNKILLABLE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a> == <a class=\"id\" href=\"#SIG_DFL\">SIG_DFL</a> && !<a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sig_handler_ignored\">sig_handler_ignored</a>(<a class=\"id\" href=\"#handler\">handler</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sig_ignored\">sig_ignored</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#sig\">sig</a>, int <a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Blocked signals are never ignored, since the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * signal handler may change by the time it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unblocked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#sig\">sig</a>) || <a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#real_blocked\">real_blocked</a>, <a class=\"id\" href=\"#sig\">sig</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sig_task_ignored\">sig_task_ignored</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tracers may want to know about even ignored signals.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#tracehook_consider_ignored_signal\">tracehook_consider_ignored_signal</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Re-calculate pending state from the set of locally pending</span>", 
"<span class=\"comment\"> * signals, globally pending signals, and blocked signals.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#has_pending_signals\">has_pending_signals</a>(<a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#blocked\">blocked</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ready\">ready</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#_NSIG_WORDS\">_NSIG_WORDS</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#_NSIG_WORDS\">_NSIG_WORDS</a>, <a class=\"id\" href=\"#ready\">ready</a> = 0; --<a class=\"id\" href=\"#i\">i</a> >= 0 ;)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ready\">ready</a> |= <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#sig\">sig</a>[<a class=\"id\" href=\"#i\">i</a>] &amp;~ <a class=\"id\" href=\"#blocked\">blocked</a>-><a class=\"id\" href=\"#sig\">sig</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 4: <a class=\"id\" href=\"#ready\">ready</a>  = <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#sig\">sig</a>[3] &amp;~ <a class=\"id\" href=\"#blocked\">blocked</a>-><a class=\"id\" href=\"#sig\">sig</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ready\">ready</a> |= <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#sig\">sig</a>[2] &amp;~ <a class=\"id\" href=\"#blocked\">blocked</a>-><a class=\"id\" href=\"#sig\">sig</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ready\">ready</a> |= <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#sig\">sig</a>[1] &amp;~ <a class=\"id\" href=\"#blocked\">blocked</a>-><a class=\"id\" href=\"#sig\">sig</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ready\">ready</a> |= <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#sig\">sig</a>[0] &amp;~ <a class=\"id\" href=\"#blocked\">blocked</a>-><a class=\"id\" href=\"#sig\">sig</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 2: <a class=\"id\" href=\"#ready\">ready</a>  = <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#sig\">sig</a>[1] &amp;~ <a class=\"id\" href=\"#blocked\">blocked</a>-><a class=\"id\" href=\"#sig\">sig</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ready\">ready</a> |= <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#sig\">sig</a>[0] &amp;~ <a class=\"id\" href=\"#blocked\">blocked</a>-><a class=\"id\" href=\"#sig\">sig</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 1: <a class=\"id\" href=\"#ready\">ready</a>  = <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#sig\">sig</a>[0] &amp;~ <a class=\"id\" href=\"#blocked\">blocked</a>-><a class=\"id\" href=\"#sig\">sig</a>[0];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ready\">ready</a> !=<span class=\"ts\"/>0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PENDING\">PENDING</a>(<a class=\"id\" href=\"#p\">p</a>,<a class=\"id\" href=\"#b\">b</a>) <a class=\"id\" href=\"#has_pending_signals\">has_pending_signals</a>(&amp;(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#signal\">signal</a>, (<a class=\"id\" href=\"#b\">b</a>))", 
"", 
"static int <a class=\"id\" href=\"#recalc_sigpending_tsk\">recalc_sigpending_tsk</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a> &gt; 0 ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#PENDING\">PENDING</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pending\">pending</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#blocked\">blocked</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#PENDING\">PENDING</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#blocked\">blocked</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must never clear the flag in another thread, or in current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when it's possible the current syscall is returning -ERESTART*.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So we don't clear it here, and only callers who know they should do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * After recalculating TIF_SIGPENDING, we need to make sure the task wakes up.</span>", 
"<span class=\"comment\"> * This is superfluous when called on current, the wakeup is a harmless no-op.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#recalc_sigpending_and_wake\">recalc_sigpending_and_wake</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#recalc_sigpending_tsk\">recalc_sigpending_tsk</a>(<a class=\"id\" href=\"#t\">t</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal_wake_up\">signal_wake_up</a>(<a class=\"id\" href=\"#t\">t</a>, 0);", 
"}", 
"", 
"void <a class=\"id\" href=\"#recalc_sigpending\">recalc_sigpending</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tracehook_force_sigpending\">tracehook_force_sigpending</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#recalc_sigpending_tsk\">recalc_sigpending_tsk</a>(<a class=\"id\" href=\"#current\">current</a>) && !<a class=\"id\" href=\"#freezing\">freezing</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_thread_flag\">clear_thread_flag</a>(<a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"", 
"}", 
"", 
"<span class=\"comment\">/* Given the mask, find the first available signal that should be serviced. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SYNCHRONOUS_MASK\">SYNCHRONOUS_MASK</a> \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>) | <a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>) | <a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGILL\">SIGILL</a>) | \\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>) | <a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGFPE\">SIGFPE</a>))", 
"", 
"int <a class=\"id\" href=\"#next_signal\">next_signal</a>(struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#pending\">pending</a>, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, *<a class=\"id\" href=\"#s\">s</a>, *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sig\">sig</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#pending\">pending</a>-><a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#sig\">sig</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#sig\">sig</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Handle the first word specially: it contains the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synchronous signals that need to be dequeued first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = *<a class=\"id\" href=\"#s\">s</a> &amp;~ *<a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a> &amp; <a class=\"id\" href=\"#SYNCHRONOUS_MASK\">SYNCHRONOUS_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> &= <a class=\"id\" href=\"#SYNCHRONOUS_MASK\">SYNCHRONOUS_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#ffz\">ffz</a>(~<a class=\"id\" href=\"#x\">x</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sig\">sig</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#_NSIG_WORDS\">_NSIG_WORDS</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#_NSIG_WORDS\">_NSIG_WORDS</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = *++<a class=\"id\" href=\"#s\">s</a> &amp;~ *++<a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#x\">x</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#ffz\">ffz</a>(~<a class=\"id\" href=\"#x\">x</a>) + <a class=\"id\" href=\"#i\">i</a>*<a class=\"id\" href=\"#_NSIG_BPW\">_NSIG_BPW</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#s\">s</a>[1] &amp;~ <a class=\"id\" href=\"#m\">m</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#x\">x</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#ffz\">ffz</a>(~<a class=\"id\" href=\"#x\">x</a>) + <a class=\"id\" href=\"#_NSIG_BPW\">_NSIG_BPW</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nothing to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sig\">sig</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#print_dropped_signal\">print_dropped_signal</a>(int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_RATELIMIT_STATE\">DEFINE_RATELIMIT_STATE</a>(<a class=\"id\" href=\"#ratelimit_state\">ratelimit_state</a>, 5 * <a class=\"id\" href=\"#HZ\">HZ</a>, 10);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#print_fatal_signals\">print_fatal_signals</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__ratelimit\">__ratelimit</a>(&amp;<a class=\"id\" href=\"#ratelimit_state\">ratelimit_state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s/%d: reached RLIMIT_SIGPENDING, dropped signal %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * allocate a new signal queue record</span>", 
"<span class=\"comment\"> * - this may be called without locks if and only if t == current, otherwise an</span>", 
"<span class=\"comment\"> *   appopriate lock must be held to stop the target task from exiting</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *", 
"<a class=\"id\" href=\"#__sigqueue_alloc\">__sigqueue_alloc</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#override_rlimit\">override_rlimit</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#user\">user</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protect access to @t credentials. This can go away when all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * callers hold rcu read lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#get_uid\">get_uid</a>(<a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#sigpending\">sigpending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#override_rlimit\">override_rlimit</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#sigpending\">sigpending</a>) <=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_rlimit\">task_rlimit</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#RLIMIT_SIGPENDING\">RLIMIT_SIGPENDING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#sigqueue_cachep\">sigqueue_cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_dropped_signal\">print_dropped_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#q\">q</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#sigpending\">sigpending</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_uid\">free_uid</a>(<a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__sigqueue_free\">__sigqueue_free</a>(struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGQUEUE_PREALLOC\">SIGQUEUE_PREALLOC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#sigpending\">sigpending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_uid\">free_uid</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sigqueue_cachep\">sigqueue_cachep</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#flush_sigqueue\">flush_sigqueue</a>(struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#queue\">queue</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigemptyset\">sigemptyset</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#signal\">signal</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> , <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sigqueue_free\">__sigqueue_free</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flush all pending signals for a task.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__flush_signals\">__flush_signals</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_sigqueue\">flush_sigqueue</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pending\">pending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_sigqueue\">flush_sigqueue</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#flush_signals\">flush_signals</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_signals\">__flush_signals</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__flush_itimer_signals\">__flush_itimer_signals</a>(struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#pending\">pending</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#retain\">retain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a> = <a class=\"id\" href=\"#pending\">pending</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigemptyset\">sigemptyset</a>(&amp;<a class=\"id\" href=\"#retain\">retain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#pending\">pending</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> != <a class=\"id\" href=\"#SI_TIMER\">SI_TIMER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigaddset\">sigaddset</a>(&amp;<a class=\"id\" href=\"#retain\">retain</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigdelset\">sigdelset</a>(&amp;<a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sigqueue_free\">__sigqueue_free</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigorsets\">sigorsets</a>(&amp;<a class=\"id\" href=\"#pending\">pending</a>-><a class=\"id\" href=\"#signal\">signal</a>, &amp;<a class=\"id\" href=\"#signal\">signal</a>, &amp;<a class=\"id\" href=\"#retain\">retain</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#flush_itimer_signals\">flush_itimer_signals</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_itimer_signals\">__flush_itimer_signals</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pending\">pending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_itimer_signals\">__flush_itimer_signals</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ignore_signals\">ignore_signals</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#_NSIG\">_NSIG</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> = <a class=\"id\" href=\"#SIG_IGN\">SIG_IGN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_signals\">flush_signals</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flush all handlers for a task.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#flush_signal_handlers\">flush_signal_handlers</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#force_default\">force_default</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_sigaction\">k_sigaction</a> *<a class=\"id\" href=\"#ka\">ka</a> = &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[0];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#_NSIG\">_NSIG</a> ; <a class=\"id\" href=\"#i\">i</a> != 0 ; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#force_default\">force_default</a> || <a class=\"id\" href=\"#ka\">ka</a>-><a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> != <a class=\"id\" href=\"#SIG_IGN\">SIG_IGN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ka\">ka</a>-><a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> = <a class=\"id\" href=\"#SIG_DFL\">SIG_DFL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ka\">ka</a>-><a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_flags\">sa_flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigemptyset\">sigemptyset</a>(&amp;<a class=\"id\" href=\"#ka\">ka</a>-><a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_mask\">sa_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ka\">ka</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#unhandled_signal\">unhandled_signal</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#sig\">sig</a>-1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_global_init\">is_global_init</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a> != <a class=\"id\" href=\"#SIG_IGN\">SIG_IGN</a> && <a class=\"id\" href=\"#handler\">handler</a> != <a class=\"id\" href=\"#SIG_DFL\">SIG_DFL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#tracehook_consider_fatal_signal\">tracehook_consider_fatal_signal</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Notify the system that a driver wants to block all signals for this</span>", 
"<span class=\"comment\"> * process, and wants to be notified if any signals at all were to be</span>", 
"<span class=\"comment\"> * sent/acted upon.  If the notifier routine returns non-zero, then the</span>", 
"<span class=\"comment\"> * signal will be acted upon after all.  If the notifier routine returns 0,</span>", 
"<span class=\"comment\"> * then then signal will be blocked.  Only one block per process is</span>", 
"<span class=\"comment\"> * allowed.  priv is a pointer to private data that the notifier routine</span>", 
"<span class=\"comment\"> * can use to determine if the signal should be blocked or not.  */</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#block_all_signals\">block_all_signals</a>(int (*<a class=\"id\" href=\"#notifier\">notifier</a>)(void *<a class=\"id\" href=\"#priv\">priv</a>), void *<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#notifier_mask\">notifier_mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#notifier_data\">notifier_data</a> = <a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#notifier\">notifier</a> = <a class=\"id\" href=\"#notifier\">notifier</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Notify the system that blocking has ended. */</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#unblock_all_signals\">unblock_all_signals</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#notifier\">notifier</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#notifier_data\">notifier_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#recalc_sigpending\">recalc_sigpending</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#collect_signal\">collect_signal</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Collect the siginfo appropriate to this signal.  Check if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there is another siginfo for the same signal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> == <a class=\"id\" href=\"#sig\">sig</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#still_pending\">still_pending</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigdelset\">sigdelset</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>) {", 
"<a class=\"id\" href=\"#still_pending\">still_pending</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_siginfo\">copy_siginfo</a>(<a class=\"id\" href=\"#info\">info</a>, &amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sigqueue_free\">__sigqueue_free</a>(<a class=\"id\" href=\"#first\">first</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ok, it wasn't in the queue.  This must be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   a fast-pathed signal or we must have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   out of queue space.  So zero out the info.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#sig\">sig</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#SI_USER\">SI_USER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_pid\">si_pid</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_uid\">si_uid</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__dequeue_signal\">__dequeue_signal</a>(struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#pending\">pending</a>, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#next_signal\">next_signal</a>(<a class=\"id\" href=\"#pending\">pending</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sig\">sig</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#notifier\">notifier</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sigismember\">sigismember</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#notifier_mask\">notifier_mask</a>, <a class=\"id\" href=\"#sig\">sig</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#notifier\">notifier</a>)(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#notifier_data\">notifier_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_thread_flag\">clear_thread_flag</a>(<a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#collect_signal\">collect_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#pending\">pending</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sig\">sig</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dequeue a signal and return the element to the caller, which is </span>", 
"<span class=\"comment\"> * expected to free it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All callers have to hold the siglock.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dequeue_signal\">dequeue_signal</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#signr\">signr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We only dequeue private signals from ourselves, we don't let</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * signalfd steal them</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#signr\">signr</a> = <a class=\"id\" href=\"#__dequeue_signal\">__dequeue_signal</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pending\">pending</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#signr\">signr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signr\">signr</a> = <a class=\"id\" href=\"#__dequeue_signal\">__dequeue_signal</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * itimer signal ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * itimers are process shared and we restart periodic</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * itimers in the signal delivery path to prevent DoS</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * attacks in the high resolution timer case. This is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * compliant with the old way of self restarting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * itimers, as the SIGALRM is a legacy signal and only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * queued once. Changing the restart behaviour to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * restart the timer in the signal dequeue path is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reducing the timer noise on heavy loaded !highres</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * systems too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#signr\">signr</a> == <a class=\"id\" href=\"#SIGALRM\">SIGALRM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#tmr\">tmr</a> = &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#real_timer\">real_timer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hrtimer_is_queued\">hrtimer_is_queued</a>(<a class=\"id\" href=\"#tmr\">tmr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#it_real_incr\">it_real_incr</a>.<a class=\"id\" href=\"#tv64\">tv64</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_forward\">hrtimer_forward</a>(<a class=\"id\" href=\"#tmr\">tmr</a>, <a class=\"id\" href=\"#tmr\">tmr</a>-><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#get_time\">get_time</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#it_real_incr\">it_real_incr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a>(<a class=\"id\" href=\"#tmr\">tmr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#recalc_sigpending\">recalc_sigpending</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#signr\">signr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sig_kernel_stop\">sig_kernel_stop</a>(<a class=\"id\" href=\"#signr\">signr</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Set a marker that we have dequeued a stop signal.  Our</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * caller might release the siglock and then the pending</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * stop signal it is about to process is no longer in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pending bitmasks, but must still be cleared by a SIGCONT</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (and overruled by a SIGKILL).  So those cases clear this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * shared flag after we've set it.  Note that this flag may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * remain set after the signal we return is ignored or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handled.  That doesn't matter because its only purpose</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is to alert stop-signal processing code when another</span>", 
];
xr_frag_insert('l/d2/05ba836797ef25fd1fa3f339565874bc757a00.xr', __xr_tmp);
