var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This could handle the cross boundary reservation window</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>request.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>basically we search from the given range, rather than the whole</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reservation double linked list, (start_block, last_block)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to find a free region that is of my size and has not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>been reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_next_reservable_window\">find_next_reservable_window</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#search_head\">search_head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#start_block\">start_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#last_block\">last_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* TODO: make the start of the reservation window byte-aligned */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* cur = *start_block &amp; ~7;*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#start_block\">start_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#search_head\">search_head</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv\">rsv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> <= <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in the case we could not find a reservable space</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that is what is expected, during the re-search, we could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * remember what's the largest reservable space we could have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and return that one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For now it will fail if we could not find the reservable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * space with expected-size (or more)...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> &gt; <a class=\"id\" href=\"#last_block\">last_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fail */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#next\">next</a>,struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a>,<a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Reached the last reservation, we can just append to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * previous one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> + <a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Found a reserveable space big enough.  We could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * have a reservation across the group boundary here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we come here either :</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when we reach the end of the whole list,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and there is empty reservable space after last entry in the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * append it to the end of the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or we found one reservable space in the middle of the list,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return the reservation window that we could append to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * succeed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#my_rsv\">my_rsv</a>) && (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Let's book the whole avaliable window for now.  We will check the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disk bitmap later and then, if there are free blocks then we adjust</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the window size if it's larger than requested.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, we will remove this node from the tree next time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call find_next_reservable_window.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> = <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> = <a class=\"id\" href=\"#cur\">cur</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#my_rsv\">my_rsv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_rsv_window_add\">ext3_rsv_window_add</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>alloc_new_reservation()--allocate a new reservation window</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>To make a new reservation, we search part of the filesystem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>reservation list (the list that inside the group). We try to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>allocate a new reservation window near the allocation goal,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>or the beginning of the group, if there is no goal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>We first find a reservable space after the goal, then from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>there, we check the bitmap for the first free block after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>it. If there is no free block until the end of group, then the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>whole group is full, we failed. Otherwise, check if the free</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>block is inside the expected reservable space, if so, we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>succeed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>If the first free block is outside the reservable space, then</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>start from the first free block, we search for next available</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>space, and go on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on succeed, a new reservation will be found and inserted into the list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It contains at least one free block, and it does not overlap with other</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reservation windows.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>failed: we failed to find a reservation window in this group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rsv: the reservation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@grp_goal: The goal (group-relative).  It is where the search for a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>free reservable space should start from.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>if we have a grp_goal(grp_goal &gt;0 ), then start from there,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>no grp_goal(grp_goal = -1), we start from the first block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>of the group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: the super block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@group: the group we are trying to allocate in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bitmap_bh: the block group block bitmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#alloc_new_reservation\">alloc_new_reservation</a>(struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#grp_goal\">grp_goal</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#search_head\">search_head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>, <a class=\"id\" href=\"#group_end_block\">group_end_block</a>, <a class=\"id\" href=\"#start_block\">start_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#first_free_block\">first_free_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#fs_rsv_root\">fs_rsv_root</a> = &amp;<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_root\">s_rsv_window_root</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a> = &amp;<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_lock\">s_rsv_window_lock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext3_group_first_block_no\">ext3_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_end_block\">group_end_block</a> = <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + (<a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_block\">start_block</a> = <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_block\">start_block</a> = <a class=\"id\" href=\"#grp_goal\">grp_goal</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if the old reservation is cross group boundary</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and if the goal is inside the old reservation window,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we will come here when we just failed to allocate from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the first part of the window. We still have another part</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that belongs to the next group. In this case, there is no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * point to discard our window and try to allocate a new one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in this group(which will fail). we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * keep the reservation window, just simply move on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Maybe we could shift the start block of the reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * window to the first block of next group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> <= <a class=\"id\" href=\"#group_end_block\">group_end_block</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> &gt; <a class=\"id\" href=\"#group_end_block\">group_end_block</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#start_block\">start_block</a> >= <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> - <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> + 1) / 2)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if the previously allocation hit ratio is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * greater than 1/2, then we double the size of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the reservation window the next time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * otherwise we keep the same size window</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a> * 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#EXT3_MAX_RESERVE_BLOCKS\">EXT3_MAX_RESERVE_BLOCKS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#EXT3_MAX_RESERVE_BLOCKS\">EXT3_MAX_RESERVE_BLOCKS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a>= <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * shift the search start to the window near the goal block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#search_head\">search_head</a> = <a class=\"id\" href=\"#search_reserve_window\">search_reserve_window</a>(<a class=\"id\" href=\"#fs_rsv_root\">fs_rsv_root</a>, <a class=\"id\" href=\"#start_block\">start_block</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * find_next_reservable_window() simply finds a reservable window</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inside the given range(start_block, group_end_block).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To make sure the reservation window has a free bit inside it, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to check the bitmap after we found a reservable window.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#find_next_reservable_window\">find_next_reservable_window</a>(<a class=\"id\" href=\"#search_head\">search_head</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>, <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_block\">start_block</a>, <a class=\"id\" href=\"#group_end_block\">group_end_block</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On success, find_next_reservable_window() returns the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reservation window where there is a reservable space after it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Before we reserve this reservable space, we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to make sure there is at least a free block inside this region.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * searching the first free bit on the block bitmap and copy of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * last committed bitmap alternatively, until we found a allocatable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block. Search start from the start block of the reservable space</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we just found.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_free_block\">first_free_block</a> = <a class=\"id\" href=\"#bitmap_search_next_usable_block\">bitmap_search_next_usable_block</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#group_end_block\">group_end_block</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first_free_block\">first_free_block</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no free block left on the bitmap, no point</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to reserve the space. return failed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* failed */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_block\">start_block</a> = <a class=\"id\" href=\"#first_free_block\">first_free_block</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check if the first free block is within the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * free space we just reserved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_block\">start_block</a> >= <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> && <a class=\"id\" href=\"#start_block\">start_block</a> <= <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* success */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the first free bit we found is out of the reservable space</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * continue search for next reservable space,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start from where the free block is,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we also shift the list head to where we stopped last time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#search_head\">search_head</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * try_to_extend_reservation()</span>", 
"<span class=\"comment\"> * @my_rsv:<span class=\"ts\"/><span class=\"ts\"/>given reservation window</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/><span class=\"ts\"/>the delta to extend</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempt to expand the reservation window large enough to have</span>", 
"<span class=\"comment\"> * required number of free blocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since ext3_try_to_allocate() will always allocate blocks within</span>", 
"<span class=\"comment\"> * the reservation window range, if the window size is too small,</span>", 
"<span class=\"comment\"> * multiple blocks allocation has to stop at the end of the reservation</span>", 
"<span class=\"comment\"> * window. To make this more efficient, given the total number of</span>", 
"<span class=\"comment\"> * blocks needed and the current size of the window, we try to</span>", 
"<span class=\"comment\"> * expand the reservation window size if necessary on a best-effort</span>", 
"<span class=\"comment\"> * basis before ext3_new_blocks() tries to allocate blocks,</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#try_to_extend_reservation\">try_to_extend_reservation</a>(struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#next_rsv\">next_rsv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a> = &amp;<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_lock\">s_rsv_window_lock</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spin_trylock\">spin_trylock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_rsv\">next_rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#next_rsv\">next_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> - <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> - 1) >= <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> = <a class=\"id\" href=\"#next_rsv\">next_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> - 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_try_to_allocate_with_rsv()</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>superblock</span>", 
"<span class=\"comment\"> * @handle:<span class=\"ts\"/><span class=\"ts\"/>handle to this transaction</span>", 
"<span class=\"comment\"> * @group:<span class=\"ts\"/><span class=\"ts\"/>given allocation block group</span>", 
"<span class=\"comment\"> * @bitmap_bh:<span class=\"ts\"/><span class=\"ts\"/>bufferhead holds the block bitmap</span>", 
"<span class=\"comment\"> * @grp_goal:<span class=\"ts\"/><span class=\"ts\"/>given target block within the group</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/><span class=\"ts\"/>target number of blocks to allocate</span>", 
"<span class=\"comment\"> * @my_rsv:<span class=\"ts\"/><span class=\"ts\"/>reservation window</span>", 
"<span class=\"comment\"> * @errp:<span class=\"ts\"/><span class=\"ts\"/>pointer to store the error code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the main function used to allocate a new block and its reservation</span>", 
"<span class=\"comment\"> * window.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each time when a new block allocation is need, first try to allocate from</span>", 
"<span class=\"comment\"> * its own reservation.  If it does not have a reservation window, instead of</span>", 
"<span class=\"comment\"> * looking for a free bit on bitmap first, then look up the reservation list to</span>", 
"<span class=\"comment\"> * see if it is inside somebody else's reservation window, we try to allocate a</span>", 
"<span class=\"comment\"> * reservation window for it starting from the goal first. Then do the block</span>", 
"<span class=\"comment\"> * allocation within the reservation window.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will avoid keeping on searching the reservation list again and</span>", 
"<span class=\"comment\"> * again when somebody is looking for a free block (without</span>", 
"<span class=\"comment\"> * reservation), and there are lots of free blocks, but they are all</span>", 
"<span class=\"comment\"> * being reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use a red-black tree for the per-filesystem reservation list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a>", 
"<a class=\"id\" href=\"#ext3_try_to_allocate_with_rsv\">ext3_try_to_allocate_with_rsv</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#grp_goal\">grp_goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> * <a class=\"id\" href=\"#my_rsv\">my_rsv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#count\">count</a>, int *<a class=\"id\" href=\"#errp\">errp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>, <a class=\"id\" href=\"#group_last_block\">group_last_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fatal\">fatal</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num\">num</a> = *<a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we use undo access for the bitmap, because it is critical</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that we do the frozen_data COW on bitmap buffers in all cases even</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the buffer is in BJ_Forget state in the committing transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"get undo access for new block\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#ext3_journal_get_undo_access\">ext3_journal_get_undo_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#fatal\">fatal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we don't deal with reservation when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystem is mounted without reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or the file is not a regular file</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or last attempt to allocate a block with reservation turned on failed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_try_to_allocate\">ext3_try_to_allocate</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grp_goal is a group relative block number (if there is a goal)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 0 &lt;= grp_goal &lt; EXT3_BLOCKS_PER_GROUP(sb)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first block is a filesystem wide block number</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first block is the block number of the first block in this group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext3_group_first_block_no\">ext3_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_last_block\">group_last_block</a> = <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + (<a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Basically we will allocate a new block from inode's reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * window.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to allocate a new reservation window, if:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a) inode does not have a reservation window; or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * b) last attempt to allocate a block from existing reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    failed; or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * c) we come here with a goal and with a reservation window</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We do not need to allocate a new reservation window if we come here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at the beginning with a goal and the goal is inside the window, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we don't have a goal but already have a reservation window.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we could go to allocate from the reservation window directly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>) || (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#goal_in_my_reservation\">goal_in_my_reservation</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a> &lt; *<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a> = *<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#alloc_new_reservation\">alloc_new_reservation</a>(<a class=\"id\" href=\"#my_rsv\">my_rsv</a>, <a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* failed */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#goal_in_my_reservation\">goal_in_my_reservation</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#grp_goal\">grp_goal</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a>) + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curr\">curr</a> &lt; *<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_extend_reservation\">try_to_extend_reservation</a>(<a class=\"id\" href=\"#my_rsv\">my_rsv</a>, <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> - <a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> &gt; <a class=\"id\" href=\"#group_last_block\">group_last_block</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> &lt; <a class=\"id\" href=\"#group_first_block\">group_first_block</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_dump\">rsv_window_dump</a>(&amp;<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_root\">s_rsv_window_root</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_try_to_allocate\">ext3_try_to_allocate</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#grp_goal\">grp_goal</a>, &amp;<a class=\"id\" href=\"#num\">num</a>, &amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> += <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* succeed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = *<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"journal_dirty_metadata for \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"bitmap block\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#fatal\">fatal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"journal_release_buffer\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_release_buffer\">ext3_journal_release_buffer</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_has_free_blocks()</span>", 
"<span class=\"comment\"> * @sbi:<span class=\"ts\"/><span class=\"ts\"/>in-core super block structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check if filesystem has at least 1 free block available for allocation.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_has_free_blocks\">ext3_has_free_blocks</a>(struct <a class=\"id\" href=\"#ext3_sb_info\">ext3_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#free_blocks\">free_blocks</a>, <a class=\"id\" href=\"#root_blocks\">root_blocks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_blocks\">free_blocks</a> = <a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeblocks_counter\">s_freeblocks_counter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_blocks\">root_blocks</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_es\">s_es</a>-><a class=\"id\" href=\"#s_r_blocks_count\">s_r_blocks_count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> &lt; <a class=\"id\" href=\"#root_blocks\">root_blocks</a> + 1 && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RESOURCE\">CAP_SYS_RESOURCE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_resuid\">s_resuid</a> != <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>() &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_resgid\">s_resgid</a> == 0 || !<a class=\"id\" href=\"#in_group_p\">in_group_p</a> (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_resgid\">s_resgid</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_should_retry_alloc()</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @retries<span class=\"ts\"/><span class=\"ts\"/>number of attemps has been made</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ext3_should_retry_alloc() is called when ENOSPC is returned, and if</span>", 
"<span class=\"comment\"> * it is profitable to retry the operation, this function will wait</span>", 
"<span class=\"comment\"> * for the current or commiting transaction to complete, and then</span>", 
"<span class=\"comment\"> * return TRUE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * if the total number of retries exceed three times, return FALSE.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext3_should_retry_alloc\">ext3_should_retry_alloc</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int *<a class=\"id\" href=\"#retries\">retries</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_has_free_blocks\">ext3_has_free_blocks</a>(<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)) || (*<a class=\"id\" href=\"#retries\">retries</a>)++ &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(1, \"%s: retrying operation after ENOSPC\\n\", <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#journal_force_commit_nested\">journal_force_commit_nested</a>(<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_journal\">s_journal</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_new_blocks() -- core block(s) allocation function</span>", 
"<span class=\"comment\"> * @handle:<span class=\"ts\"/><span class=\"ts\"/>handle to this transaction</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/><span class=\"ts\"/>file inode</span>", 
"<span class=\"comment\"> * @goal:<span class=\"ts\"/><span class=\"ts\"/>given target block(filesystem wide)</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/><span class=\"ts\"/>target number of blocks to allocate</span>", 
"<span class=\"comment\"> * @errp:<span class=\"ts\"/><span class=\"ts\"/>error code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ext3_new_blocks uses a goal block to assist allocation.  It tries to</span>", 
"<span class=\"comment\"> * allocate block(s) from the block group contains the goal block first. If that</span>", 
"<span class=\"comment\"> * fails, it will try to allocate block(s) from other block groups without</span>", 
"<span class=\"comment\"> * any specific goal block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#ext3_new_blocks\">ext3_new_blocks</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>, unsigned long *<a class=\"id\" href=\"#count\">count</a>, int *<a class=\"id\" href=\"#errp\">errp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group_no\">group_no</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#goal_group\">goal_group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#grp_target_blk\">grp_target_blk</a>;<span class=\"ts\"/><span class=\"comment\">/* blockgroup relative goal block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a>;<span class=\"ts\"/><span class=\"comment\">/* blockgroup-relative allocated block*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#ret_block\">ret_block</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* filesyetem-wide allocated block */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bgi\">bgi</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* blockgroup iteration index */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fatal\">fatal</a> = 0, <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#performed_allocation\">performed_allocation</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#free_blocks\">free_blocks</a>;<span class=\"ts\"/><span class=\"comment\">/* number of free blocks in a group */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> *<a class=\"id\" href=\"#gdp\">gdp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_super_block\">ext3_super_block</a> *<a class=\"id\" href=\"#es\">es</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_sb_info\">ext3_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_block_alloc_info\">ext3_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#windowsz\">windowsz</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#EXT3FS_DEBUG\">EXT3FS_DEBUG</a>", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#goal_hits\">goal_hits</a>, <a class=\"id\" href=\"#goal_attempts\">goal_attempts</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num\">num</a> = *<a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb\">sb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"ext3_new_block: nonexistent device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check quota for allocation of this block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dquot_alloc_block\">dquot_alloc_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_debug\">ext3_debug</a>(\"goal=%lu.\\n\", <a class=\"id\" href=\"#goal\">goal</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate a block from reservation only when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystem is mounted with reservation(default,-o reservation), and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's a regular file, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the desired window size is greater than 0 (One could use ioctl</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * command EXT3_IOC_SETRSVSZ to set the window size to 0 to turn off</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reservation on that particular file)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_i\">block_i</a> && ((<a class=\"id\" href=\"#windowsz\">windowsz</a> = <a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#rsv_window_node\">rsv_window_node</a>.<a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a>) &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a> = &amp;<a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#rsv_window_node\">rsv_window_node</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_has_free_blocks\">ext3_has_free_blocks</a>(<a class=\"id\" href=\"#sbi\">sbi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First, test whether the goal block is free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> &lt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#goal\">goal</a> >= <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_blocks_count\">s_blocks_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a> = (<a class=\"id\" href=\"#goal\">goal</a> - <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>)) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal_group\">goal_group</a> = <a class=\"id\" href=\"#group_no\">group_no</a>;", 
"<a class=\"id\" href=\"#retry_alloc\">retry_alloc</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext3_get_group_desc\">ext3_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>, &amp;<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gdp\">gdp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_blocks\">free_blocks</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if there is not enough free blocks to make a new resevation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * turn off reservation for this allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a> && (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> &lt; <a class=\"id\" href=\"#windowsz\">windowsz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>&& (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>&& (<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_target_blk\">grp_target_blk</a> = ((<a class=\"id\" href=\"#goal\">goal</a> - <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>)) %", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_block_bitmap\">read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> = <a class=\"id\" href=\"#ext3_try_to_allocate_with_rsv\">ext3_try_to_allocate_with_rsv</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#grp_target_blk\">grp_target_blk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>,<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#num\">num</a>, &amp;<a class=\"id\" href=\"#fatal\">fatal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#allocated\">allocated</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now search the rest of the groups.  We assume that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group_no and gdp correctly point to the last group visited.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#bgi\">bgi</a> = 0; <a class=\"id\" href=\"#bgi\">bgi</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#bgi\">bgi</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_no\">group_no</a> >= <a class=\"id\" href=\"#ngroups\">ngroups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext3_get_group_desc\">ext3_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>, &amp;<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gdp\">gdp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_blocks\">free_blocks</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * skip this group (and avoid loading bitmap) if there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are no free blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#free_blocks\">free_blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * skip this group if the number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * free blocks is less than half of the reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * window size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a> && (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> <= (<a class=\"id\" href=\"#windowsz\">windowsz</a>/2)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_block_bitmap\">read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * try to allocate block(s) from this group, without a goal(-1).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> = <a class=\"id\" href=\"#ext3_try_to_allocate_with_rsv\">ext3_try_to_allocate_with_rsv</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, -1, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#num\">num</a>, &amp;<a class=\"id\" href=\"#fatal\">fatal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#allocated\">allocated</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We may end up a bogus ealier ENOSPC error due to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystem is \"full\" of reservations, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there maybe indeed free blocks avaliable on disk</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In this case, we just forget about the reservations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just do block allocation as without reservations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#windowsz\">windowsz</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a> = <a class=\"id\" href=\"#goal_group\">goal_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_alloc\">retry_alloc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* No space left on the device */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#allocated\">allocated</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_debug\">ext3_debug</a>(\"using block group %d(%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a>, <a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_block\">ret_block</a> = <a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> + <a class=\"id\" href=\"#ext3_group_first_block_no\">ext3_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>), <a class=\"id\" href=\"#ret_block\">ret_block</a>, <a class=\"id\" href=\"#num\">num</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>), <a class=\"id\" href=\"#ret_block\">ret_block</a>, <a class=\"id\" href=\"#num\">num</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#ret_block\">ret_block</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#ret_block\">ret_block</a> + <a class=\"id\" href=\"#num\">num</a> - 1, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"ext3_new_block\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Allocating block in system zone - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"blocks from \"<a class=\"id\" href=\"#E3FSBLK\">E3FSBLK</a>\", length %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ret_block\">ret_block</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * claim_block() marked the blocks we allocated as in use. So we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * may want to selectively mark some of the blocks as free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_alloc\">retry_alloc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#performed_allocation\">performed_allocation</a> = 1;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_JBD_DEBUG\">CONFIG_JBD_DEBUG</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#debug_bh\">debug_bh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Record bitmap buffer state in the newly allocated block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_bh\">debug_bh</a> = <a class=\"id\" href=\"#sb_find_get_block\">sb_find_get_block</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ret_block\">ret_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#debug_bh\">debug_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#debug_bh\">debug_bh</a>, \"state when allocated\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE2\">BUFFER_TRACE2</a>(<a class=\"id\" href=\"#debug_bh\">debug_bh</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"bitmap state\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#debug_bh\">debug_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#group_no\">group_no</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>) && <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_test_bit\">ext3_test_bit</a>(<a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a>+<a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: block was unexpectedly set in \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"b_committed_data\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_debug\">ext3_debug</a>(\"found bit %d\\n\", <a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#group_no\">group_no</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_block\">ret_block</a> + <a class=\"id\" href=\"#num\">num</a> - 1 >= <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_blocks_count\">s_blocks_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"ext3_new_block\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block(\"<a class=\"id\" href=\"#E3FSBLK\">E3FSBLK</a>\") >= blocks count(%d) - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, es == %p \", <a class=\"id\" href=\"#ret_block\">ret_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_blocks_count\">s_blocks_count</a>), <a class=\"id\" href=\"#group_no\">group_no</a>, <a class=\"id\" href=\"#es\">es</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is up to the caller to add the new buffer to a journal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list of some description.  We don't know in advance whether</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the caller wants to use it as metadata or data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_debug\">ext3_debug</a>(\"allocating block %lu. Goal hits %d of %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_block\">ret_block</a>, <a class=\"id\" href=\"#goal_hits\">goal_hits</a>, <a class=\"id\" href=\"#goal_attempts\">goal_attempts</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#group_no\">group_no</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#le16_add_cpu\">le16_add_cpu</a>(&amp;<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>, -<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#group_no\">group_no</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_sub\">percpu_counter_sub</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeblocks_counter\">s_freeblocks_counter</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>, \"journal_dirty_metadata for group descriptor\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fatal\">fatal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot_free_block\">dquot_free_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, *<a class=\"id\" href=\"#count\">count</a>-<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret_block\">ret_block</a>;", 
"", 
"<a class=\"id\" href=\"#io_error\">io_error</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#fatal\">fatal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_std_error\">ext3_std_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#fatal\">fatal</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Undo the block allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#performed_allocation\">performed_allocation</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_free_block\">dquot_free_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, *<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#ext3_new_block\">ext3_new_block</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>, int *<a class=\"id\" href=\"#errp\">errp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 1;", 
"", 
];
xr_frag_insert('l/d2/2841c5917ed07aa8083962ddd1808cfdfe1c8f.xr', __xr_tmp);
