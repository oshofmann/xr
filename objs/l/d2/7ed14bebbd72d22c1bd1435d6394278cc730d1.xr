var __xr_tmp = [
"<span class=\"comment\"> * Returns the total data length of the skb.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nla_nest_end\">nla_nest_end</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#nla_len\">nla_len</a> = <a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>) - (unsigned char *)<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_nest_cancel - Cancel nesting of attributes</span>", 
"<span class=\"comment\"> * @skb: socket buffer the message is stored in</span>", 
"<span class=\"comment\"> * @start: container attribute</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Removes the container attribute and including all nested</span>", 
"<span class=\"comment\"> * attributes. Returns -EMSGSIZE</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nla_nest_cancel\">nla_nest_cancel</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlmsg_trim\">nlmsg_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_validate_nested - Validate a stream of nested attributes</span>", 
"<span class=\"comment\"> * @start: container attribute</span>", 
"<span class=\"comment\"> * @maxtype: maximum attribute type to be expected</span>", 
"<span class=\"comment\"> * @policy: validation policy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Validates all attributes in the nested attribute stream against the</span>", 
"<span class=\"comment\"> * specified policy. Attributes with a type exceeding maxtype will be</span>", 
"<span class=\"comment\"> * ignored. See documenation of struct nla_policy for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nla_validate_nested\">nla_validate_nested</a>(struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#maxtype\">maxtype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#nla_policy\">nla_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nla_validate\">nla_validate</a>(<a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#start\">start</a>), <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#start\">start</a>), <a class=\"id\" href=\"#maxtype\">maxtype</a>, <a class=\"id\" href=\"#policy\">policy</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_for_each_attr - iterate over a stream of attributes</span>", 
"<span class=\"comment\"> * @pos: loop counter, set to current attribute</span>", 
"<span class=\"comment\"> * @head: head of attribute stream</span>", 
"<span class=\"comment\"> * @len: length of attribute stream</span>", 
"<span class=\"comment\"> * @rem: initialized to len, holds bytes currently remaining in stream</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nla_for_each_attr\">nla_for_each_attr</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#rem\">rem</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#rem\">rem</a> = <a class=\"id\" href=\"#len\">len</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#nla_ok\">nla_ok</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#rem\">rem</a>); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#nla_next\">nla_next</a>(<a class=\"id\" href=\"#pos\">pos</a>, &amp;(<a class=\"id\" href=\"#rem\">rem</a>)))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_for_each_nested - iterate over nested attributes</span>", 
"<span class=\"comment\"> * @pos: loop counter, set to current attribute</span>", 
"<span class=\"comment\"> * @nla: attribute containing the nested attributes</span>", 
"<span class=\"comment\"> * @rem: initialized to len, holds bytes currently remaining in stream</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nla_for_each_nested\">nla_for_each_nested</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#nla\">nla</a>, <a class=\"id\" href=\"#rem\">rem</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla_for_each_attr\">nla_for_each_attr</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#nla\">nla</a>), <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#nla\">nla</a>), <a class=\"id\" href=\"#rem\">rem</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/d2/7ed14bebbd72d22c1bd1435d6394278cc730d1.xr', __xr_tmp);
