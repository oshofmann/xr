var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>linux/mm/mlock.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (C) Copyright 1995 Linus Torvalds</span>", 
"<span class=\"comment\"> *  (C) Copyright 2002 Christoph Hellwig</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swapops\">swapops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"int <a class=\"id\" href=\"#can_do_mlock\">can_do_mlock</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_IPC_LOCK\">CAP_IPC_LOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_MEMLOCK\">RLIMIT_MEMLOCK</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#can_do_mlock\">can_do_mlock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mlocked pages are marked with PageMlocked() flag for efficient testing</span>", 
"<span class=\"comment\"> * in vmscan and, possibly, the fault path; and to support semi-accurate</span>", 
"<span class=\"comment\"> * statistics.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An mlocked page [PageMlocked(page)] is unevictable.  As such, it will</span>", 
"<span class=\"comment\"> * be placed on the LRU \"unevictable\" list, rather than the [in]active lists.</span>", 
"<span class=\"comment\"> * The unevictable list is an LRU sibling list to the [in]active lists.</span>", 
"<span class=\"comment\"> * PageUnevictable is set to indicate the unevictable state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When lazy mlocking via vmscan, it is important to ensure that the</span>", 
"<span class=\"comment\"> * vma's VM_LOCKED status is not concurrently being modified, otherwise we</span>", 
"<span class=\"comment\"> * may have mlocked a page that is being munlocked. So lazy mlock must take</span>", 
"<span class=\"comment\"> * the mmap_sem for read, and verify that the vma really is locked</span>", 
"<span class=\"comment\"> * (see mm/rmap.c).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  LRU accounting for clear_page_mlock()</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__clear_page_mlock\">__clear_page_mlock</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>) {<span class=\"ts\"/><span class=\"comment\">/* truncated ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_zone_page_state\">dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_MLOCK\">NR_MLOCK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGCLEARED\">UNEVICTABLE_PGCLEARED</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We lost the race. the page already moved to evictable list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUnevictable\">PageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGSTRANDED\">UNEVICTABLE_PGSTRANDED</a>);", 
"<span class=\"ts\"/>}", 
];
xr_frag_insert('l/d2/a260a1ed332e92074932494ff40425bc6b0145.xr', __xr_tmp);
