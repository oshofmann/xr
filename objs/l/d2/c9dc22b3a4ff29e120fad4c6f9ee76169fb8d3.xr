var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/include/linux/relay.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002, 2003 - Tom Zanussi (zanussi@us.ibm.com), IBM Corp</span>", 
"<span class=\"comment\"> * Copyright (C) 1999, 2000, 2001, 2002 - Karim Yaghmour (karim@opersys.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONFIG_RELAY definitions and declarations</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_RELAY_H\">_LINUX_RELAY_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_RELAY_H\">_LINUX_RELAY_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kref\">kref</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Needs a _much_ better name... */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIX_SIZE\">FIX_SIZE</a>(<a class=\"id\" href=\"#x\">x</a>) ((((<a class=\"id\" href=\"#x\">x</a>) - 1) &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tracks changes to rchan/rchan_buf structs</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RELAYFS_CHANNEL_VERSION\">RELAYFS_CHANNEL_VERSION</a><span class=\"ts\"/><span class=\"ts\"/>7", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Per-cpu relay channel buffer</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a>", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#start\">start</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* start of channel buffer */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* start of current sub-buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#offset\">offset</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* current offset into sub-buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#subbufs_produced\">subbufs_produced</a>;<span class=\"ts\"/><span class=\"comment\">/* count of sub-buffers produced */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#subbufs_consumed\">subbufs_consumed</a>;<span class=\"ts\"/><span class=\"comment\">/* count of sub-buffers consumed */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* associated channel */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#read_wait\">read_wait</a>;<span class=\"ts\"/><span class=\"comment\">/* reader wait queue */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> <a class=\"id\" href=\"#timer\">timer</a>; <span class=\"ts\"/><span class=\"comment\">/* reader wake-up timer */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* channel file dentry */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a> <a class=\"id\" href=\"#kref\">kref</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* channel buffer refcount */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#page_array\">page_array</a>;<span class=\"ts\"/><span class=\"comment\">/* array of current buffer pages */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#page_count\">page_count</a>;<span class=\"ts\"/><span class=\"comment\">/* number of current buffer pages */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#finalized\">finalized</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* buffer has been finalized */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#padding\">padding</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* padding counts per sub-buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#prev_padding\">prev_padding</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* temporary variable */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#bytes_consumed\">bytes_consumed</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bytes consumed in cur read subbuf */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#early_bytes\">early_bytes</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bytes consumed before VFS inited */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this buf's cpu */</span>", 
"} <a class=\"id\" href=\"#____cacheline_aligned\">____cacheline_aligned</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Relay channel data structure</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rchan\">rchan</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#version\">version</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the version of this struct */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#subbuf_size\">subbuf_size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sub-buffer size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n_subbufs\">n_subbufs</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of sub-buffers per buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* total buffer size allocated */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_callbacks\">rchan_callbacks</a> *<a class=\"id\" href=\"#cb\">cb</a>;<span class=\"ts\"/><span class=\"comment\">/* client callbacks */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a> <a class=\"id\" href=\"#kref\">kref</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* channel refcount */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private_data\">private_data</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for user-defined data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#last_toobig\">last_toobig</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* tried to log event &gt; subbuf size */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>]; <span class=\"comment\">/* per-cpu channel buffers */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_global\">is_global</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* One global buffer ? */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for channel list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* parent dentry passed to open */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#has_base_filename\">has_base_filename</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* has a filename associated? */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#base_filename\">base_filename</a>[<a class=\"id\" href=\"#NAME_MAX\">NAME_MAX</a>];<span class=\"ts\"/><span class=\"comment\">/* saved base filename */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Relay channel client callbacks</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rchan_callbacks\">rchan_callbacks</a>", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * subbuf_start - called on buffer-switch to a new sub-buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @buf: the channel buffer containing the new sub-buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @subbuf: the start of the new sub-buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @prev_subbuf: the start of the previous sub-buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @prev_padding: unused space at the end of previous sub-buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The client should return 1 to continue logging, 0 to stop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * logging.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: subbuf_start will also be invoked when the buffer is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       created, so that the first sub-buffer can be initialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       if necessary.  In this case, prev_subbuf will be NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: the client can reserve bytes at the beginning of the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       sub-buffer by calling subbuf_start_reserve() in this callback.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#subbuf_start\">subbuf_start</a>) (struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#subbuf\">subbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#prev_subbuf\">prev_subbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#prev_padding\">prev_padding</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buf_mapped - relay buffer mmap notification</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @buf: the channel buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @filp: relay file pointer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Called when a relay file is successfully mmapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"        void (*<a class=\"id\" href=\"#buf_mapped\">buf_mapped</a>)(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buf_unmapped - relay buffer unmap notification</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @buf: the channel buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @filp: relay file pointer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Called when a relay file is successfully unmapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"        void (*<a class=\"id\" href=\"#buf_unmapped\">buf_unmapped</a>)(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * create_buf_file - create file to represent a relay channel buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @filename: the name of the file to create</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @parent: the parent of the file to create</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @mode: the mode of the file to create</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @buf: the channel buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @is_global: outparam - set non-zero if the buffer should be global</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Called during relay_open(), once for each per-cpu buffer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to allow the client to create a file to be used to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * represent the corresponding channel buffer.  If the file is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * created outside of relay, the parent must also exist in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that filesystem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The callback should return the dentry of the file created</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to represent the relay buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Setting the is_global outparam to a non-zero value will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cause relay_open() to create a single global buffer rather</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than the default set of per-cpu buffers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See Documentation/filesystems/relay.txt for more info.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *(*<a class=\"id\" href=\"#create_buf_file\">create_buf_file</a>)(const char *<a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int *<a class=\"id\" href=\"#is_global\">is_global</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * remove_buf_file - remove file representing a relay channel buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @dentry: the dentry of the file to remove</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Called during relay_close(), once for each per-cpu buffer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to allow the client to remove a file used to represent a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * channel buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The callback should return 0 if successful, negative if not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#remove_buf_file\">remove_buf_file</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CONFIG_RELAY kernel API, kernel/relay.c</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#relay_open\">relay_open</a>(const char *<a class=\"id\" href=\"#base_filename\">base_filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#subbuf_size\">subbuf_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n_subbufs\">n_subbufs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#rchan_callbacks\">rchan_callbacks</a> *<a class=\"id\" href=\"#cb\">cb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#private_data\">private_data</a>);", 
"extern int <a class=\"id\" href=\"#relay_late_setup_files\">relay_late_setup_files</a>(struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#base_filename\">base_filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"extern void <a class=\"id\" href=\"#relay_close\">relay_close</a>(struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>);", 
"extern void <a class=\"id\" href=\"#relay_flush\">relay_flush</a>(struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>);", 
"extern void <a class=\"id\" href=\"#relay_subbufs_consumed\">relay_subbufs_consumed</a>(struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#consumed\">consumed</a>);", 
"extern void <a class=\"id\" href=\"#relay_reset\">relay_reset</a>(struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>);", 
"extern int <a class=\"id\" href=\"#relay_buf_full\">relay_buf_full</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"extern <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#relay_switch_subbuf\">relay_switch_subbuf</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_write - write data into the channel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chan: relay channel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data: data to be written</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@length: number of bytes to write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Writes data into the current cpu's channel buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Protects the buffer by disabling interrupts.  Use this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if you might be logging from interrupt context.  Try</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__relay_write() if you know you<span class=\"ts\"/>won't be logging from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupt context.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#relay_write\">relay_write</a>(struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#subbuf_size\">subbuf_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#relay_switch_subbuf\">relay_switch_subbuf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__relay_write - write data into the channel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chan: relay channel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data: data to be written</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@length: number of bytes to write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Writes data into the current cpu's channel buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Protects the buffer by disabling preemption.  Use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_write() if you might be logging from interrupt</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>context.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__relay_write\">__relay_write</a>(struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#get_cpu\">get_cpu</a>()];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#subbuf_size\">subbuf_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#relay_switch_subbuf\">relay_switch_subbuf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relay_reserve - reserve slot in channel buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chan: relay channel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@length: number of bytes to reserve</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns pointer to reserved slot, NULL if full.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Reserves a slot in the current cpu's channel buffer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Does not protect the buffer at all - caller must provide</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appropriate synchronization.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#relay_reserve\">relay_reserve</a>(struct <a class=\"id\" href=\"#rchan\">rchan</a> *<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#reserved\">reserved</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#subbuf_size\">subbuf_size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#relay_switch_subbuf\">relay_switch_subbuf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserved\">reserved</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#reserved\">reserved</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>subbuf_start_reserve - reserve bytes at the start of a sub-buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: relay channel buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@length: number of bytes to reserve</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Helper function used to reserve bytes at the beginning of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a sub-buffer in the subbuf_start() callback.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#subbuf_start_reserve\">subbuf_start_reserve</a>(struct <a class=\"id\" href=\"#rchan_buf\">rchan_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#length\">length</a> >= <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#subbuf_size\">subbuf_size</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#length\">length</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * exported relay file operations, kernel/relay.c</span>", 
"<span class=\"comment\"> */</span>", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#relay_file_operations\">relay_file_operations</a>;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_RELAY_H */</span>", 
"", 
];
xr_frag_insert('l/d2/c9dc22b3a4ff29e120fad4c6f9ee76169fb8d3.xr', __xr_tmp);
