var __xr_tmp = [
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Name: hwsleep.c - ACPI Hardware Sleep/Wake Interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"actables.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tboot\">tboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_HARDWARE\">ACPI_HARDWARE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"hwsleep\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_set_firmware_waking_vector</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  physical_address    - 32-bit physical address of ACPI real mode</span>", 
"<span class=\"comment\"> *                                    entry point.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Sets the 32-bit firmware_waking_vector field of the FACS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_set_firmware_waking_vector\">acpi_set_firmware_waking_vector</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#physical_address\">physical_address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_set_firmware_waking_vector\">acpi_set_firmware_waking_vector</a>);", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * According to the ACPI specification 2.0c and later, the 64-bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * waking vector should be cleared and the 32-bit waking vector should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be used, unless we want the wake-up code to be called by the BIOS in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protected Mode.  Some systems (for example HP dv5-1004nr) are known</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to fail to resume if the 64-bit vector is used.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the 32-bit vector */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>-><a class=\"id\" href=\"#firmware_waking_vector\">firmware_waking_vector</a> = <a class=\"id\" href=\"#physical_address\">physical_address</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the 64-bit vector if it exists */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>-><a class=\"id\" href=\"#length\">length</a> &gt; 32) && (<a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>-><a class=\"id\" href=\"#version\">version</a> >= 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>-><a class=\"id\" href=\"#xfirmware_waking_vector\">xfirmware_waking_vector</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_set_firmware_waking_vector\">acpi_set_firmware_waking_vector</a>)", 
"", 
"#if <a class=\"id\" href=\"#ACPI_MACHINE_WIDTH\">ACPI_MACHINE_WIDTH</a> == 64", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_set_firmware_waking_vector64</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  physical_address    - 64-bit physical address of ACPI protected</span>", 
"<span class=\"comment\"> *                                    mode entry point.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Sets the 64-bit X_firmware_waking_vector field of the FACS, if</span>", 
"<span class=\"comment\"> *              it exists in the table. This function is intended for use with</span>", 
"<span class=\"comment\"> *              64-bit host operating systems.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_set_firmware_waking_vector64\">acpi_set_firmware_waking_vector64</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#physical_address\">physical_address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_set_firmware_waking_vector64\">acpi_set_firmware_waking_vector64</a>);", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Determine if the 64-bit vector actually exists */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>-><a class=\"id\" href=\"#length\">length</a> <= 32) || (<a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>-><a class=\"id\" href=\"#version\">version</a> &lt; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_EXIST\">AE_NOT_EXIST</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear 32-bit vector, set the 64-bit X_ vector */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>-><a class=\"id\" href=\"#firmware_waking_vector\">firmware_waking_vector</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>-><a class=\"id\" href=\"#xfirmware_waking_vector\">xfirmware_waking_vector</a> = <a class=\"id\" href=\"#physical_address\">physical_address</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_set_firmware_waking_vector64\">acpi_set_firmware_waking_vector64</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_enter_sleep_state_prep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  sleep_state         - Which sleep state to enter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Prepare to enter a system sleep state (see ACPI 2.0 spec p 231)</span>", 
"<span class=\"comment\"> *              This function must execute with interrupts enabled.</span>", 
"<span class=\"comment\"> *              We break sleeping into 2 stages so that OSPM can handle</span>", 
"<span class=\"comment\"> *              various OS-specific tasks between the two steps.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_enter_sleep_state_prep\">acpi_enter_sleep_state_prep</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sleep_state\">sleep_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_object_list\">acpi_object_list</a> <a class=\"id\" href=\"#arg_list\">arg_list</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> <a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_enter_sleep_state_prep\">acpi_enter_sleep_state_prep</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* _PSW methods could be run here to enable wake-on keyboard, LAN, etc. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_sleep_type_data\">acpi_get_sleep_type_data</a>(<a class=\"id\" href=\"#sleep_state\">sleep_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#acpi_gbl_sleep_type_a\">acpi_gbl_sleep_type_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#acpi_gbl_sleep_type_b\">acpi_gbl_sleep_type_b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup parameter object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_list\">arg_list</a>.<a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_list\">arg_list</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = &amp;<a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#sleep_state\">sleep_state</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Run the _PTS method */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#METHOD_NAME__PTS\">METHOD_NAME__PTS</a>, &amp;<a class=\"id\" href=\"#arg_list\">arg_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup the argument to _SST */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sleep_state\">sleep_state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#ACPI_SST_WORKING\">ACPI_SST_WORKING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_S1\">ACPI_STATE_S1</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_S2\">ACPI_STATE_S2</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_S3\">ACPI_STATE_S3</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#ACPI_SST_SLEEPING\">ACPI_SST_SLEEPING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#ACPI_SST_SLEEP_CONTEXT\">ACPI_SST_SLEEP_CONTEXT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#ACPI_SST_INDICATOR_OFF\">ACPI_SST_INDICATOR_OFF</a>;<span class=\"ts\"/><span class=\"comment\">/* Default is off */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the system indicators to show the desired sleep state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * _SST is an optional method (return no error if not found)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#METHOD_NAME__SST\">METHOD_NAME__SST</a>, &amp;<a class=\"id\" href=\"#arg_list\">arg_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"While executing method _SST\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_enter_sleep_state_prep\">acpi_enter_sleep_state_prep</a>)", 
"", 
"static unsigned int <a class=\"id\" href=\"#gts\">gts</a>, <a class=\"id\" href=\"#bfs\">bfs</a>;", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#gts\">gts</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0644);", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#bfs\">bfs</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0644);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#gts\">gts</a>, \"Enable evaluation of _GTS on suspend.\");", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#bfs\">bfs</a>, \"Enable evaluation of _BFS on resume\".);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_enter_sleep_state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  sleep_state         - Which sleep state to enter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Enter a system sleep state (see ACPI 2.0 spec p 231)</span>", 
"<span class=\"comment\"> *              THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> <a class=\"id\" href=\"#acpi_enter_sleep_state\">acpi_enter_sleep_state</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sleep_state\">sleep_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pm1b_control\">pm1b_control</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_bit_register_info\">acpi_bit_register_info</a> *<a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_bit_register_info\">acpi_bit_register_info</a> *<a class=\"id\" href=\"#sleep_enable_reg_info\">sleep_enable_reg_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#in_value\">in_value</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_object_list\">acpi_object_list</a> <a class=\"id\" href=\"#arg_list\">arg_list</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_enter_sleep_state\">acpi_enter_sleep_state</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#acpi_gbl_sleep_type_a\">acpi_gbl_sleep_type_a</a> &gt; <a class=\"id\" href=\"#ACPI_SLEEP_TYPE_MAX\">ACPI_SLEEP_TYPE_MAX</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#acpi_gbl_sleep_type_b\">acpi_gbl_sleep_type_b</a> &gt; <a class=\"id\" href=\"#ACPI_SLEEP_TYPE_MAX\">ACPI_SLEEP_TYPE_MAX</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Sleep values out of range: A=0x%X B=0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_gbl_sleep_type_a\">acpi_gbl_sleep_type_a</a>, <a class=\"id\" href=\"#acpi_gbl_sleep_type_b\">acpi_gbl_sleep_type_b</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_OPERAND_VALUE\">AE_AML_OPERAND_VALUE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_get_bit_register_info\">acpi_hw_get_bit_register_info</a>(<a class=\"id\" href=\"#ACPI_BITREG_SLEEP_TYPE\">ACPI_BITREG_SLEEP_TYPE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sleep_enable_reg_info\">sleep_enable_reg_info</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_get_bit_register_info\">acpi_hw_get_bit_register_info</a>(<a class=\"id\" href=\"#ACPI_BITREG_SLEEP_ENABLE\">ACPI_BITREG_SLEEP_ENABLE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear wake status */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_WAKE_STATUS\">ACPI_BITREG_WAKE_STATUS</a>, <a class=\"id\" href=\"#ACPI_CLEAR_STATUS\">ACPI_CLEAR_STATUS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear all fixed and general purpose status bits */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_clear_acpi_status\">acpi_hw_clear_acpi_status</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Disable/Clear all GPEs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Enable all wakeup GPEs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_disable_all_gpes\">acpi_hw_disable_all_gpes</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_system_awake_and_running\">acpi_gbl_system_awake_and_running</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_enable_all_wakeup_gpes\">acpi_hw_enable_all_wakeup_gpes</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gts\">gts</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Execute the _GTS method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg_list\">arg_list</a>.<a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg_list\">arg_list</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = &amp;<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#sleep_state\">sleep_state</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#METHOD_NAME__GTS\">METHOD_NAME__GTS</a>, &amp;<a class=\"id\" href=\"#arg_list\">arg_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get current value of PM1A control */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_register_read\">acpi_hw_register_read</a>(<a class=\"id\" href=\"#ACPI_REGISTER_PM1_CONTROL\">ACPI_REGISTER_PM1_CONTROL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INIT\">ACPI_DB_INIT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Entering sleep state [S%u]\\n\", <a class=\"id\" href=\"#sleep_state\">sleep_state</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the SLP_EN and SLP_TYP fields */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm1a_control\">pm1a_control</a> &= ~(<a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a>-><a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sleep_enable_reg_info\">sleep_enable_reg_info</a>-><a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm1b_control\">pm1b_control</a> = <a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Insert the SLP_TYP bits */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm1a_control\">pm1a_control</a> |=", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#acpi_gbl_sleep_type_a\">acpi_gbl_sleep_type_a</a> << <a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a>-><a class=\"id\" href=\"#bit_position\">bit_position</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm1b_control\">pm1b_control</a> |=", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#acpi_gbl_sleep_type_b\">acpi_gbl_sleep_type_b</a> << <a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a>-><a class=\"id\" href=\"#bit_position\">bit_position</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We split the writes of SLP_TYP and SLP_EN to workaround</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * poorly implemented hardware.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Write #1: write the SLP_TYP data to the PM1 Control registers */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write_pm1_control\">acpi_hw_write_pm1_control</a>(<a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>, <a class=\"id\" href=\"#pm1b_control\">pm1b_control</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Insert the sleep enable (SLP_EN) bit */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm1a_control\">pm1a_control</a> |= <a class=\"id\" href=\"#sleep_enable_reg_info\">sleep_enable_reg_info</a>-><a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm1b_control\">pm1b_control</a> |= <a class=\"id\" href=\"#sleep_enable_reg_info\">sleep_enable_reg_info</a>-><a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flush caches, as per ACPI specification */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FLUSH_CPU_CACHE\">ACPI_FLUSH_CPU_CACHE</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tboot_sleep\">tboot_sleep</a>(<a class=\"id\" href=\"#sleep_state\">sleep_state</a>, <a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>, <a class=\"id\" href=\"#pm1b_control\">pm1b_control</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Write #2: Write both SLP_TYP + SLP_EN */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write_pm1_control\">acpi_hw_write_pm1_control</a>(<a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>, <a class=\"id\" href=\"#pm1b_control\">pm1b_control</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sleep_state\">sleep_state</a> &gt; <a class=\"id\" href=\"#ACPI_STATE_S3\">ACPI_STATE_S3</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We wanted to sleep &gt; S3, but it didn't happen (by virtue of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fact that we are still executing!)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wait ten seconds, then try again. This is to get S4/S5 to work on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * all machines.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We wait so long to allow chipsets that poll this reg very slowly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to still read the right value. Ideally, this block would go</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * away entirely.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_stall\">acpi_os_stall</a>(10000000);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_register_write\">acpi_hw_register_write</a>(<a class=\"id\" href=\"#ACPI_REGISTER_PM1_CONTROL\">ACPI_REGISTER_PM1_CONTROL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sleep_enable_reg_info\">sleep_enable_reg_info</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait until we enter sleep state */</span>", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_read_bit_register\">acpi_read_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_WAKE_STATUS\">ACPI_BITREG_WAKE_STATUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#in_value\">in_value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Spin until we wake */</span>", 
"", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#in_value\">in_value</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_enter_sleep_state\">acpi_enter_sleep_state</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_enter_sleep_state_s4bios</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Perform a S4 bios request.</span>", 
"<span class=\"comment\"> *              THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> <a class=\"id\" href=\"#acpi_enter_sleep_state_s4bios\">acpi_enter_sleep_state_s4bios</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#in_value\">in_value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_enter_sleep_state_s4bios\">acpi_enter_sleep_state_s4bios</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the wake status bit (PM1) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_WAKE_STATUS\">ACPI_BITREG_WAKE_STATUS</a>, <a class=\"id\" href=\"#ACPI_CLEAR_STATUS\">ACPI_CLEAR_STATUS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_clear_acpi_status\">acpi_hw_clear_acpi_status</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Disable/Clear all GPEs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Enable all wakeup GPEs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_disable_all_gpes\">acpi_hw_disable_all_gpes</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_system_awake_and_running\">acpi_gbl_system_awake_and_running</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_enable_all_wakeup_gpes\">acpi_hw_enable_all_wakeup_gpes</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FLUSH_CPU_CACHE\">ACPI_FLUSH_CPU_CACHE</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write_port\">acpi_hw_write_port</a>(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#smi_command\">smi_command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#S4bios_request\">S4bios_request</a>, 8);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_stall\">acpi_os_stall</a>(1000);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_read_bit_register\">acpi_read_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_WAKE_STATUS\">ACPI_BITREG_WAKE_STATUS</a>, &amp;<a class=\"id\" href=\"#in_value\">in_value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#in_value\">in_value</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_enter_sleep_state_s4bios\">acpi_enter_sleep_state_s4bios</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_leave_sleep_state_prep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  sleep_state         - Which sleep state we are exiting</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Perform the first state of OS-independent ACPI cleanup after a</span>", 
"<span class=\"comment\"> *              sleep.</span>", 
"<span class=\"comment\"> *              Called with interrupts DISABLED.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_leave_sleep_state_prep\">acpi_leave_sleep_state_prep</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sleep_state\">sleep_state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_object_list\">acpi_object_list</a> <a class=\"id\" href=\"#arg_list\">arg_list</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_bit_register_info\">acpi_bit_register_info</a> *<a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_bit_register_info\">acpi_bit_register_info</a> *<a class=\"id\" href=\"#sleep_enable_reg_info\">sleep_enable_reg_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pm1b_control\">pm1b_control</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_leave_sleep_state_prep\">acpi_leave_sleep_state_prep</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set SLP_TYPE and SLP_EN to state S0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is unclear from the ACPI Spec, but it is required</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by some machines.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_sleep_type_data\">acpi_get_sleep_type_data</a>(<a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#acpi_gbl_sleep_type_a\">acpi_gbl_sleep_type_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#acpi_gbl_sleep_type_b\">acpi_gbl_sleep_type_b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_get_bit_register_info\">acpi_hw_get_bit_register_info</a>(<a class=\"id\" href=\"#ACPI_BITREG_SLEEP_TYPE\">ACPI_BITREG_SLEEP_TYPE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sleep_enable_reg_info\">sleep_enable_reg_info</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_get_bit_register_info\">acpi_hw_get_bit_register_info</a>(<a class=\"id\" href=\"#ACPI_BITREG_SLEEP_ENABLE\">ACPI_BITREG_SLEEP_ENABLE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get current value of PM1A control */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_register_read\">acpi_hw_register_read</a>(<a class=\"id\" href=\"#ACPI_REGISTER_PM1_CONTROL\">ACPI_REGISTER_PM1_CONTROL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear the SLP_EN and SLP_TYP fields */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm1a_control\">pm1a_control</a> &= ~(<a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a>-><a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sleep_enable_reg_info\">sleep_enable_reg_info</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm1b_control\">pm1b_control</a> = <a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Insert the SLP_TYP bits */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm1a_control\">pm1a_control</a> |= (<a class=\"id\" href=\"#acpi_gbl_sleep_type_a\">acpi_gbl_sleep_type_a</a> <<", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a>-><a class=\"id\" href=\"#bit_position\">bit_position</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm1b_control\">pm1b_control</a> |= (<a class=\"id\" href=\"#acpi_gbl_sleep_type_b\">acpi_gbl_sleep_type_b</a> <<", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sleep_type_reg_info\">sleep_type_reg_info</a>-><a class=\"id\" href=\"#bit_position\">bit_position</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write the control registers and ignore any errors */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_hw_write_pm1_control\">acpi_hw_write_pm1_control</a>(<a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm1b_control\">pm1b_control</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bfs\">bfs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Execute the _BFS method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg_list\">arg_list</a>.<a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg_list\">arg_list</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = &amp;<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#sleep_state\">sleep_state</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#METHOD_NAME__BFS\">METHOD_NAME__BFS</a>, &amp;<a class=\"id\" href=\"#arg_list\">arg_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>, \"During Method _BFS\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_leave_sleep_state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  sleep_state         - Which sleep state we just exited</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Perform OS-independent ACPI cleanup after a sleep</span>", 
"<span class=\"comment\"> *              Called with interrupts ENABLED.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_leave_sleep_state\">acpi_leave_sleep_state</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sleep_state\">sleep_state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_object_list\">acpi_object_list</a> <a class=\"id\" href=\"#arg_list\">arg_list</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_leave_sleep_state\">acpi_leave_sleep_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure enter_sleep_state_prep -&gt; enter_sleep_state ordering */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_sleep_type_a\">acpi_gbl_sleep_type_a</a> = <a class=\"id\" href=\"#ACPI_SLEEP_TYPE_INVALID\">ACPI_SLEEP_TYPE_INVALID</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup parameter object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_list\">arg_list</a>.<a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_list\">arg_list</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = &amp;<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ignore any errors from these methods */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#ACPI_SST_WAKING\">ACPI_SST_WAKING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#METHOD_NAME__SST\">METHOD_NAME__SST</a>, &amp;<a class=\"id\" href=\"#arg_list\">arg_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>, \"During Method _SST\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * GPEs must be enabled before _WAK is called as GPEs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might get fired there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Restore the GPEs:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Disable/Clear all GPEs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Enable all runtime GPEs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_disable_all_gpes\">acpi_hw_disable_all_gpes</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_enable_all_runtime_gpes\">acpi_hw_enable_all_runtime_gpes</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#sleep_state\">sleep_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#METHOD_NAME__WAK\">METHOD_NAME__WAK</a>, &amp;<a class=\"id\" href=\"#arg_list\">arg_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>, \"During Method _WAK\"));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* TBD: _WAK \"sometimes\" returns stuff - do we want to look at it? */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some BIOSes assume that WAK_STS will be cleared on resume and use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it to determine whether the system is rebooting or resuming. Clear</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it for compatibility.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_WAKE_STATUS\">ACPI_BITREG_WAKE_STATUS</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_system_awake_and_running\">acpi_gbl_system_awake_and_running</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enable power button */</span>", 
"", 
"<span class=\"ts\"/>(void)", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#acpi_gbl_fixed_event_info\">acpi_gbl_fixed_event_info</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      [<a class=\"id\" href=\"#ACPI_EVENT_POWER_BUTTON\">ACPI_EVENT_POWER_BUTTON</a>].", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#enable_register_id\">enable_register_id</a>, <a class=\"id\" href=\"#ACPI_ENABLE_EVENT\">ACPI_ENABLE_EVENT</a>);", 
"", 
"<span class=\"ts\"/>(void)", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#acpi_gbl_fixed_event_info\">acpi_gbl_fixed_event_info</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      [<a class=\"id\" href=\"#ACPI_EVENT_POWER_BUTTON\">ACPI_EVENT_POWER_BUTTON</a>].", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#status_register_id\">status_register_id</a>, <a class=\"id\" href=\"#ACPI_CLEAR_STATUS\">ACPI_CLEAR_STATUS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#ACPI_SST_WORKING\">ACPI_SST_WORKING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#METHOD_NAME__SST\">METHOD_NAME__SST</a>, &amp;<a class=\"id\" href=\"#arg_list\">arg_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>, \"During Method _SST\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_leave_sleep_state\">acpi_leave_sleep_state</a>)", 
];
xr_frag_insert('l/d3/0d3d1784cf3b9fa091f108a58cdbe824327ac7.xr', __xr_tmp);
