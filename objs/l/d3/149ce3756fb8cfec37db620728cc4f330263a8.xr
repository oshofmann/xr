var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * INET<span class=\"ts\"/><span class=\"ts\"/>An implementation of the TCP/IP protocol suite for the LINUX</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>operating system.  INET is implemented using the BSD Socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface as the means of communication with the user level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Lotsa people, from code originally in tcp</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *      modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *      as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *      2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_INET_HASHTABLES_H\">_INET_HASHTABLES_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_INET_HASHTABLES_H\">_INET_HASHTABLES_H</a>", 
"", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#inet_sock\">inet_sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#route\">route</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#tcp_states\">tcp_states</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* This is for all connections with a full identity, no wildcards.</span>", 
"<span class=\"comment\"> * One chain is dedicated to TIME_WAIT sockets.</span>", 
"<span class=\"comment\"> * I'll experiment with dynamic table growth later.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inet_ehash_bucket\">inet_ehash_bucket</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_head\">hlist_nulls_head</a> <a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_head\">hlist_nulls_head</a> <a class=\"id\" href=\"#twchain\">twchain</a>;", 
"};", 
"", 
"<span class=\"comment\">/* There are a few simple rules, which allow for local port reuse by</span>", 
"<span class=\"comment\"> * an application.  In essence:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1) Sockets bound to different interfaces may share a local port.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   Failing that, goto test 2.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2) If all sockets have sk-&gt;sk_reuse set, and none of them are in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   TCP_LISTEN state, the port may be shared.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   Failing that, goto test 3.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>3) If all sockets are bound to a specific inet_sk(sk)-&gt;rcv_saddr local</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   address, and none of them are the same, the port may be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   shared.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   Failing this, the port cannot be shared.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The interesting point, is test #2.  This is what an FTP server does</span>", 
"<span class=\"comment\"> * all day.  To optimize this case we use a specific flag bit defined</span>", 
"<span class=\"comment\"> * below.  As we add sockets to a bind bucket list, we perform a</span>", 
"<span class=\"comment\"> * check of: (newsk-&gt;sk_reuse &amp;&amp; (newsk-&gt;sk_state != TCP_LISTEN))</span>", 
"<span class=\"comment\"> * As long as all sockets added to a bind bucket pass this test,</span>", 
"<span class=\"comment\"> * the flag bit will be set.</span>", 
"<span class=\"comment\"> * The resulting situation is that tcp_v[46]_verify_bind() can just check</span>", 
"<span class=\"comment\"> * for this flag bit, if it is set and the socket trying to bind has</span>", 
"<span class=\"comment\"> * sk-&gt;sk_reuse set, we don't even have to walk the owners list at all,</span>", 
"<span class=\"comment\"> * we return that it is ok to bind this socket to the requested local port.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sounds like a lot of work, but it is worth it.  In a more naive</span>", 
"<span class=\"comment\"> * implementation (ie. current FreeBSD etc.) the entire list of ports</span>", 
"<span class=\"comment\"> * must be walked for each data port opened by an ftp server.  Needless</span>", 
"<span class=\"comment\"> * to say, this does not scale at all.  With a couple thousand FTP</span>", 
"<span class=\"comment\"> * users logged onto your box, isn't it nice to know that new data</span>", 
"<span class=\"comment\"> * ports are created in O(1) time?  I thought so. ;-)<span class=\"ts\"/>-DaveM</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inet_bind_bucket\">inet_bind_bucket</a> {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ib_net\">ib_net</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>signed short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fastreuse\">fastreuse</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_owners\">num_owners</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#owners\">owners</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#ib_net\">ib_net</a>(struct <a class=\"id\" href=\"#inet_bind_bucket\">inet_bind_bucket</a> *<a class=\"id\" href=\"#ib\">ib</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_pnet\">read_pnet</a>(&amp;<a class=\"id\" href=\"#ib\">ib</a>-><a class=\"id\" href=\"#ib_net\">ib_net</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#inet_bind_bucket_for_each\">inet_bind_bucket_for_each</a>(<a class=\"id\" href=\"#tb\">tb</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#tb\">tb</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#node\">node</a>)", 
"", 
"struct <a class=\"id\" href=\"#inet_bind_hashbucket\">inet_bind_hashbucket</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#chain\">chain</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sockets can be hashed in established or listening table</span>", 
"<span class=\"comment\"> * We must use different 'nulls' end-of-chain value for listening</span>", 
"<span class=\"comment\"> * hash table, or we might find a socket that was closed and</span>", 
"<span class=\"comment\"> * reallocated/inserted into established hash table</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LISTENING_NULLS_BASE\">LISTENING_NULLS_BASE</a> (1U << 29)", 
"struct <a class=\"id\" href=\"#inet_listen_hashbucket\">inet_listen_hashbucket</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_head\">hlist_nulls_head</a><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>;", 
"};", 
"", 
"<span class=\"comment\">/* This is for listening sockets, thus all sockets which possess wildcards. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_LHTABLE_SIZE\">INET_LHTABLE_SIZE</a><span class=\"ts\"/>32<span class=\"ts\"/><span class=\"comment\">/* Yes, really, this is all you need. */</span>", 
"", 
"struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* This is for sockets with full identity only.  Sockets here will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * always be without wildcards and will have the following invariant:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *          TCP_ESTABLISHED &lt;= sk-&gt;sk_state &lt; TCP_CLOSE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TIME_WAIT sockets use a separate chain (twchain).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_ehash_bucket\">inet_ehash_bucket</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ehash\">ehash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ehash_locks\">ehash_locks</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehash_mask\">ehash_mask</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehash_locks_mask\">ehash_locks_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, let's try this, I give up, we do need a local binding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TCP hash as well as the others for fast bind/connect.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_bind_hashbucket\">inet_bind_hashbucket</a><span class=\"ts\"/>*<a class=\"id\" href=\"#bhash\">bhash</a>;", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bhash_size\">bhash_size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* 4 bytes hole on 64 bit */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bind_bucket_cachep\">bind_bucket_cachep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All the above members are written once at bootup and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * never written again _or_ are predominantly read-access.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now align to a new cache line as all the following members</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might be often dirty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* All sockets in TCP_LISTEN state will be in here.  This is the only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * table where wildcard'd TCP sockets can exist.  Hash function here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is just local port number.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_listen_hashbucket\">inet_listen_hashbucket</a><span class=\"ts\"/><a class=\"id\" href=\"#listening_hash\">listening_hash</a>[<a class=\"id\" href=\"#INET_LHTABLE_SIZE\">INET_LHTABLE_SIZE</a>]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bsockets\">bsockets</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#inet_ehash_bucket\">inet_ehash_bucket</a> *<a class=\"id\" href=\"#inet_ehash_bucket\">inet_ehash_bucket</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash\">ehash</a>[<a class=\"id\" href=\"#hash\">hash</a> &amp; <a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_mask\">ehash_mask</a>];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#inet_ehash_lockp\">inet_ehash_lockp</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks\">ehash_locks</a>[<a class=\"id\" href=\"#hash\">hash</a> &amp; <a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks_mask\">ehash_locks_mask</a>];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#inet_ehash_locks_alloc\">inet_ehash_locks_alloc</a>(struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#size\">size</a> = 256;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>)", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pcpus\">nr_pcpus</a> = 2;", 
"#else", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pcpus\">nr_pcpus</a> = <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pcpus\">nr_pcpus</a> >= 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 512;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pcpus\">nr_pcpus</a> >= 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 1024;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pcpus\">nr_pcpus</a> >= 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 2048;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pcpus\">nr_pcpus</a> >= 32)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 4096;", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a>) != 0) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> * sizeof(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a>) &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks\">ehash_locks</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#size\">size</a> * sizeof(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks\">ehash_locks</a> =<span class=\"ts\"/><a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a> * sizeof(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks\">ehash_locks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks\">ehash_locks</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks_mask\">ehash_locks_mask</a> = <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inet_ehash_locks_free\">inet_ehash_locks_free</a>(struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks\">ehash_locks</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks_mask\">ehash_locks_mask</a> + 1) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks\">ehash_locks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks\">ehash_locks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hashinfo\">hashinfo</a>-><a class=\"id\" href=\"#ehash_locks\">ehash_locks</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#inet_bind_bucket\">inet_bind_bucket</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#inet_bind_bucket_create\">inet_bind_bucket_create</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#inet_bind_hashbucket\">inet_bind_hashbucket</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const unsigned short <a class=\"id\" href=\"#snum\">snum</a>);", 
"extern void <a class=\"id\" href=\"#inet_bind_bucket_destroy\">inet_bind_bucket_destroy</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#inet_bind_bucket\">inet_bind_bucket</a> *<a class=\"id\" href=\"#tb\">tb</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#inet_bhashfn\">inet_bhashfn</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#lport\">lport</a>, const int <a class=\"id\" href=\"#bhash_size\">bhash_size</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#lport\">lport</a> + <a class=\"id\" href=\"#net_hash_mix\">net_hash_mix</a>(<a class=\"id\" href=\"#net\">net</a>)) &amp; (<a class=\"id\" href=\"#bhash_size\">bhash_size</a> - 1);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#inet_bind_hash\">inet_bind_hash</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#inet_bind_bucket\">inet_bind_bucket</a> *<a class=\"id\" href=\"#tb\">tb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const unsigned short <a class=\"id\" href=\"#snum\">snum</a>);", 
"", 
"<span class=\"comment\">/* These can have wildcards, don't try too hard. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#inet_lhashfn\">inet_lhashfn</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const unsigned short <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#num\">num</a> + <a class=\"id\" href=\"#net_hash_mix\">net_hash_mix</a>(<a class=\"id\" href=\"#net\">net</a>)) &amp; (<a class=\"id\" href=\"#INET_LHTABLE_SIZE\">INET_LHTABLE_SIZE</a> - 1);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#inet_sk_listen_hashfn\">inet_sk_listen_hashfn</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inet_lhashfn\">inet_lhashfn</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#inet_num\">inet_num</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Caller must disable local BH processing. */</span>", 
"extern void <a class=\"id\" href=\"#__inet_inherit_port\">__inet_inherit_port</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#child\">child</a>);", 
"", 
"extern void <a class=\"id\" href=\"#inet_put_port\">inet_put_port</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"void <a class=\"id\" href=\"#inet_hashinfo_init\">inet_hashinfo_init</a>(struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#h\">h</a>);", 
"", 
"extern int <a class=\"id\" href=\"#__inet_hash_nolisten\">__inet_hash_nolisten</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#inet_timewait_sock\">inet_timewait_sock</a> *<a class=\"id\" href=\"#tw\">tw</a>);", 
"extern void <a class=\"id\" href=\"#inet_hash\">inet_hash</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"extern void <a class=\"id\" href=\"#inet_unhash\">inet_unhash</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#__inet_lookup_listener\">__inet_lookup_listener</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const unsigned short <a class=\"id\" href=\"#hnum\">hnum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const int <a class=\"id\" href=\"#dif\">dif</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#inet_lookup_listener\">inet_lookup_listener</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>, int <a class=\"id\" href=\"#dif\">dif</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__inet_lookup_listener\">__inet_lookup_listener</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#hashinfo\">hashinfo</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#dport\">dport</a>), <a class=\"id\" href=\"#dif\">dif</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Socket demux engine toys. */</span>", 
"<span class=\"comment\">/* What happens here is ugly; there's a pair of adjacent fields in</span>", 
"<span class=\"comment\">   struct inet_sock; __be16 dport followed by __u16 num.  We want to</span>", 
"<span class=\"comment\">   search by pair, so we combine the keys into a single 32bit value</span>", 
"<span class=\"comment\">   and compare with 32bit value read from &amp;...-&gt;dport.  Let's at least</span>", 
"<span class=\"comment\">   make sure that it's not mixed with anything else...</span>", 
"<span class=\"comment\">   On 64bit targets we combine comparisons with pair of adjacent __be32</span>", 
"<span class=\"comment\">   fields in the same way.</span>", 
"<span class=\"comment\">*/</span>", 
"typedef <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#__bitwise\">__bitwise</a> <a class=\"id\" href=\"#__portpair\">__portpair</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__BIG_ENDIAN\">__BIG_ENDIAN</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_COMBINED_PORTS\">INET_COMBINED_PORTS</a>(<a class=\"id\" href=\"#__sport\">__sport</a>, <a class=\"id\" href=\"#__dport\">__dport</a>) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__portpair\">__portpair</a>)(((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u32\">__u32</a>)(<a class=\"id\" href=\"#__be16\">__be16</a>)(<a class=\"id\" href=\"#__sport\">__sport</a>) << 16) | (<a class=\"id\" href=\"#__u32\">__u32</a>)(<a class=\"id\" href=\"#__dport\">__dport</a>)))", 
"#else <span class=\"comment\">/* __LITTLE_ENDIAN */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_COMBINED_PORTS\">INET_COMBINED_PORTS</a>(<a class=\"id\" href=\"#__sport\">__sport</a>, <a class=\"id\" href=\"#__dport\">__dport</a>) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__portpair\">__portpair</a>)(((<a class=\"id\" href=\"#__u32\">__u32</a>)(<a class=\"id\" href=\"#__dport\">__dport</a>) << 16) | (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u32\">__u32</a>)(<a class=\"id\" href=\"#__be16\">__be16</a>)(<a class=\"id\" href=\"#__sport\">__sport</a>)))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64)", 
"typedef <a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#__bitwise\">__bitwise</a> <a class=\"id\" href=\"#__addrpair\">__addrpair</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__BIG_ENDIAN\">__BIG_ENDIAN</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_ADDR_COOKIE\">INET_ADDR_COOKIE</a>(<a class=\"id\" href=\"#__name\">__name</a>, <a class=\"id\" href=\"#__saddr\">__saddr</a>, <a class=\"id\" href=\"#__daddr\">__daddr</a>) \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#__addrpair\">__addrpair</a> <a class=\"id\" href=\"#__name\">__name</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__addrpair\">__addrpair</a>) ( \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u64\">__u64</a>)(<a class=\"id\" href=\"#__be32\">__be32</a>)(<a class=\"id\" href=\"#__saddr\">__saddr</a>)) << 32) | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u64\">__u64</a>)(<a class=\"id\" href=\"#__be32\">__be32</a>)(<a class=\"id\" href=\"#__daddr\">__daddr</a>)));", 
"#else <span class=\"comment\">/* __LITTLE_ENDIAN */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_ADDR_COOKIE\">INET_ADDR_COOKIE</a>(<a class=\"id\" href=\"#__name\">__name</a>, <a class=\"id\" href=\"#__saddr\">__saddr</a>, <a class=\"id\" href=\"#__daddr\">__daddr</a>) \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#__addrpair\">__addrpair</a> <a class=\"id\" href=\"#__name\">__name</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__addrpair\">__addrpair</a>) ( \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u64\">__u64</a>)(<a class=\"id\" href=\"#__be32\">__be32</a>)(<a class=\"id\" href=\"#__daddr\">__daddr</a>)) << 32) | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u64\">__u64</a>)(<a class=\"id\" href=\"#__be32\">__be32</a>)(<a class=\"id\" href=\"#__saddr\">__saddr</a>)));", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __BIG_ENDIAN */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_MATCH\">INET_MATCH</a>(<a class=\"id\" href=\"#__sk\">__sk</a>, <a class=\"id\" href=\"#__net\">__net</a>, <a class=\"id\" href=\"#__hash\">__hash</a>, <a class=\"id\" href=\"#__cookie\">__cookie</a>, <a class=\"id\" href=\"#__saddr\">__saddr</a>, <a class=\"id\" href=\"#__daddr\">__daddr</a>, <a class=\"id\" href=\"#__ports\">__ports</a>, <a class=\"id\" href=\"#__dif\">__dif</a>)\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_hash\">sk_hash</a> == (<a class=\"id\" href=\"#__hash\">__hash</a>)) && <a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#__sk\">__sk</a>), (<a class=\"id\" href=\"#__net\">__net</a>)) &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ((*((<a class=\"id\" href=\"#__addrpair\">__addrpair</a> *)&amp;(<a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a>))) == (<a class=\"id\" href=\"#__cookie\">__cookie</a>))  &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ((*((<a class=\"id\" href=\"#__portpair\">__portpair</a> *)&amp;(<a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#inet_dport\">inet_dport</a>))) == (<a class=\"id\" href=\"#__ports\">__ports</a>))   &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (!((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a>) || ((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> == (<a class=\"id\" href=\"#__dif\">__dif</a>))))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_TW_MATCH\">INET_TW_MATCH</a>(<a class=\"id\" href=\"#__sk\">__sk</a>, <a class=\"id\" href=\"#__net\">__net</a>, <a class=\"id\" href=\"#__hash\">__hash</a>, <a class=\"id\" href=\"#__cookie\">__cookie</a>, <a class=\"id\" href=\"#__saddr\">__saddr</a>, <a class=\"id\" href=\"#__daddr\">__daddr</a>, <a class=\"id\" href=\"#__ports\">__ports</a>, <a class=\"id\" href=\"#__dif\">__dif</a>)\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_hash\">sk_hash</a> == (<a class=\"id\" href=\"#__hash\">__hash</a>)) && <a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#__sk\">__sk</a>), (<a class=\"id\" href=\"#__net\">__net</a>)) &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ((*((<a class=\"id\" href=\"#__addrpair\">__addrpair</a> *)&amp;(<a class=\"id\" href=\"#inet_twsk\">inet_twsk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#tw_daddr\">tw_daddr</a>))) == (<a class=\"id\" href=\"#__cookie\">__cookie</a>)) &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ((*((<a class=\"id\" href=\"#__portpair\">__portpair</a> *)&amp;(<a class=\"id\" href=\"#inet_twsk\">inet_twsk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#tw_dport\">tw_dport</a>))) == (<a class=\"id\" href=\"#__ports\">__ports</a>)) &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (!((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a>) || ((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> == (<a class=\"id\" href=\"#__dif\">__dif</a>))))", 
"#else <span class=\"comment\">/* 32-bit arch */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_ADDR_COOKIE\">INET_ADDR_COOKIE</a>(<a class=\"id\" href=\"#__name\">__name</a>, <a class=\"id\" href=\"#__saddr\">__saddr</a>, <a class=\"id\" href=\"#__daddr\">__daddr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_MATCH\">INET_MATCH</a>(<a class=\"id\" href=\"#__sk\">__sk</a>, <a class=\"id\" href=\"#__net\">__net</a>, <a class=\"id\" href=\"#__hash\">__hash</a>, <a class=\"id\" href=\"#__cookie\">__cookie</a>, <a class=\"id\" href=\"#__saddr\">__saddr</a>, <a class=\"id\" href=\"#__daddr\">__daddr</a>, <a class=\"id\" href=\"#__ports\">__ports</a>, <a class=\"id\" href=\"#__dif\">__dif</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_hash\">sk_hash</a> == (<a class=\"id\" href=\"#__hash\">__hash</a>)) && <a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#__sk\">__sk</a>), (<a class=\"id\" href=\"#__net\">__net</a>))<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a><span class=\"ts\"/>== (<a class=\"id\" href=\"#__saddr\">__saddr</a>))<span class=\"ts\"/><span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a><span class=\"ts\"/>== (<a class=\"id\" href=\"#__daddr\">__daddr</a>))<span class=\"ts\"/><span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ((*((<a class=\"id\" href=\"#__portpair\">__portpair</a> *)&amp;(<a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#inet_dport\">inet_dport</a>))) == (<a class=\"id\" href=\"#__ports\">__ports</a>))<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (!((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a>) || ((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> == (<a class=\"id\" href=\"#__dif\">__dif</a>))))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INET_TW_MATCH\">INET_TW_MATCH</a>(<a class=\"id\" href=\"#__sk\">__sk</a>, <a class=\"id\" href=\"#__net\">__net</a>, <a class=\"id\" href=\"#__hash\">__hash</a>,<a class=\"id\" href=\"#__cookie\">__cookie</a>, <a class=\"id\" href=\"#__saddr\">__saddr</a>, <a class=\"id\" href=\"#__daddr\">__daddr</a>, <a class=\"id\" href=\"#__ports\">__ports</a>, <a class=\"id\" href=\"#__dif\">__dif</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_hash\">sk_hash</a> == (<a class=\"id\" href=\"#__hash\">__hash</a>)) && <a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#__sk\">__sk</a>), (<a class=\"id\" href=\"#__net\">__net</a>))<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#inet_twsk\">inet_twsk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#tw_daddr\">tw_daddr</a><span class=\"ts\"/>== (<a class=\"id\" href=\"#__saddr\">__saddr</a>))<span class=\"ts\"/><span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#inet_twsk\">inet_twsk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#tw_rcv_saddr\">tw_rcv_saddr</a><span class=\"ts\"/>== (<a class=\"id\" href=\"#__daddr\">__daddr</a>))<span class=\"ts\"/><span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ((*((<a class=\"id\" href=\"#__portpair\">__portpair</a> *)&amp;(<a class=\"id\" href=\"#inet_twsk\">inet_twsk</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#tw_dport\">tw_dport</a>))) == (<a class=\"id\" href=\"#__ports\">__ports</a>)) &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (!((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a>) || ((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> == (<a class=\"id\" href=\"#__dif\">__dif</a>))))", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* 64-bit arch */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sockets in TCP_CLOSE state are _always_ taken out of the hash, so we need</span>", 
"<span class=\"comment\"> * not check it for lookups anymore, thanks Alexey. -DaveM</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Local BH must be disabled here.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#sock\">sock</a> * <a class=\"id\" href=\"#__inet_lookup_established\">__inet_lookup_established</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, const <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, const <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#hnum\">hnum</a>, const int <a class=\"id\" href=\"#dif\">dif</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock\">sock</a> *", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_lookup_established\">inet_lookup_established</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, const <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, const <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#dif\">dif</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__inet_lookup_established\">__inet_lookup_established</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#hashinfo\">hashinfo</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#dport\">dport</a>), <a class=\"id\" href=\"#dif\">dif</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#__inet_lookup\">__inet_lookup</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, const <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, const <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const int <a class=\"id\" href=\"#dif\">dif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#hnum\">hnum</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#dport\">dport</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#__inet_lookup_established\">__inet_lookup_established</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#hnum\">hnum</a>, <a class=\"id\" href=\"#dif\">dif</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a> ? : <a class=\"id\" href=\"#__inet_lookup_listener\">__inet_lookup_listener</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#hashinfo\">hashinfo</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#hnum\">hnum</a>, <a class=\"id\" href=\"#dif\">dif</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#inet_lookup\">inet_lookup</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, const <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, const <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const int <a class=\"id\" href=\"#dif\">dif</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_disable\">local_bh_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#__inet_lookup\">__inet_lookup</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#hashinfo\">hashinfo</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#dport\">dport</a>, <a class=\"id\" href=\"#dif\">dif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_enable\">local_bh_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#__inet_lookup_skb\">__inet_lookup_skb</a>(struct <a class=\"id\" href=\"#inet_hashinfo\">inet_hashinfo</a> *<a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#skb_steal_sock\">skb_steal_sock</a>(<a class=\"id\" href=\"#skb\">skb</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__inet_lookup\">__inet_lookup</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#hashinfo\">hashinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#dport\">dport</a>, <a class=\"id\" href=\"#inet_iif\">inet_iif</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#__inet_hash_connect\">__inet_hash_connect</a>(struct <a class=\"id\" href=\"#inet_timewait_death_row\">inet_timewait_death_row</a> *<a class=\"id\" href=\"#death_row\">death_row</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#port_offset\">port_offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#check_established\">check_established</a>)(struct <a class=\"id\" href=\"#inet_timewait_death_row\">inet_timewait_death_row</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *, <a class=\"id\" href=\"#__u16\">__u16</a>, struct <a class=\"id\" href=\"#inet_timewait_sock\">inet_timewait_sock</a> **),", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#hash\">hash</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#inet_timewait_sock\">inet_timewait_sock</a> *<a class=\"id\" href=\"#twp\">twp</a>));", 
"", 
"extern int <a class=\"id\" href=\"#inet_hash_connect\">inet_hash_connect</a>(struct <a class=\"id\" href=\"#inet_timewait_death_row\">inet_timewait_death_row</a> *<a class=\"id\" href=\"#death_row\">death_row</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _INET_HASHTABLES_H */</span>", 
];
xr_frag_insert('l/d3/149ce3756fb8cfec37db620728cc4f330263a8.xr', __xr_tmp);
