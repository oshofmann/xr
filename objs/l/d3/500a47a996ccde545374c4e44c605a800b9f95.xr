var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#tm\">tm</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#tm\">tm</a>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#tm\">tm</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvtimeo\">sk_rcvtimeo</a> / <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#tm\">tm</a>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> = ((<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvtimeo\">sk_rcvtimeo</a> % <a class=\"id\" href=\"#HZ\">HZ</a>) * 1000000) / <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_SNDTIMEO\">SO_SNDTIMEO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lv\">lv</a> = sizeof(struct <a class=\"id\" href=\"#timeval\">timeval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndtimeo\">sk_sndtimeo</a> == <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#tm\">tm</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#tm\">tm</a>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#tm\">tm</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndtimeo\">sk_sndtimeo</a> / <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#tm\">tm</a>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> = ((<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndtimeo\">sk_sndtimeo</a> % <a class=\"id\" href=\"#HZ\">HZ</a>) * 1000000) / <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_RCVLOWAT\">SO_RCVLOWAT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvlowat\">sk_rcvlowat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_SNDLOWAT\">SO_SNDLOWAT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#val\">val</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_PASSCRED\">SO_PASSCRED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#SOCK_PASSCRED\">SOCK_PASSCRED</a>, &amp;<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#flags\">flags</a>) ? 1 : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_PEERCRED\">SO_PEERCRED</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ucred\">ucred</a> <a class=\"id\" href=\"#peercred\">peercred</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; sizeof(<a class=\"id\" href=\"#peercred\">peercred</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = sizeof(<a class=\"id\" href=\"#peercred\">peercred</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cred_to_ucred\">cred_to_ucred</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_peer_pid\">sk_peer_pid</a>, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_peer_cred\">sk_peer_cred</a>, &amp;<a class=\"id\" href=\"#peercred\">peercred</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#optval\">optval</a>, &amp;<a class=\"id\" href=\"#peercred\">peercred</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#lenout\">lenout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_PEERNAME\">SO_PEERNAME</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#address\">address</a>[128];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#getname\">getname</a>(<a class=\"id\" href=\"#sock\">sock</a>, (struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *)<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#lv\">lv</a>, 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTCONN\">ENOTCONN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lv\">lv</a> &lt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#lenout\">lenout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Dubious BSD thing... Probably nobody even uses it, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the UNIX standard wants it for whatever reason... -DaveM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_ACCEPTCONN\">SO_ACCEPTCONN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> == <a class=\"id\" href=\"#TCP_LISTEN\">TCP_LISTEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_PASSSEC\">SO_PASSSEC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#SOCK_PASSSEC\">SOCK_PASSSEC</a>, &amp;<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#flags\">flags</a>) ? 1 : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_PEERSEC\">SO_PEERSEC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#security_socket_getpeersec_stream\">security_socket_getpeersec_stream</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#optlen\">optlen</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_MARK\">SO_MARK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_mark\">sk_mark</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SO_RXQ_OVFL\">SO_RXQ_OVFL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#val\">val</a> = !!<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_RXQ_OVFL\">SOCK_RXQ_OVFL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOPROTOOPT\">ENOPROTOOPT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#lv\">lv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#lv\">lv</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#optval\">optval</a>, &amp;<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<a class=\"id\" href=\"#lenout\">lenout</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#optlen\">optlen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize an sk_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (We also register the sk_lock with the lock validator.)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sock_lock_init\">sock_lock_init</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_lock_init_class_and_name\">sock_lock_init_class_and_name</a>(<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#af_family_slock_key_strings\">af_family_slock_key_strings</a>[<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#af_family_slock_keys\">af_family_slock_keys</a> + <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#af_family_key_strings\">af_family_key_strings</a>[<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#af_family_keys\">af_family_keys</a> + <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy all fields from osk to nsk but nsk-&gt;sk_refcnt must not change yet,</span>", 
"<span class=\"comment\"> * even temporarly, because of RCU lookups. sk_node should also be left as is.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sock_copy\">sock_copy</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#nsk\">nsk</a>, const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#osk\">osk</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY_NETWORK\">CONFIG_SECURITY_NETWORK</a>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#sptr\">sptr</a> = <a class=\"id\" href=\"#nsk\">nsk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#sk_copy_start\">sk_copy_start</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/>     sizeof(<a class=\"id\" href=\"#osk\">osk</a>-><a class=\"id\" href=\"#sk_node\">sk_node</a>) + sizeof(<a class=\"id\" href=\"#osk\">osk</a>-><a class=\"id\" href=\"#sk_refcnt\">sk_refcnt</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>     sizeof(<a class=\"id\" href=\"#osk\">osk</a>-><a class=\"id\" href=\"#sk_tx_queue_mapping\">sk_tx_queue_mapping</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#nsk\">nsk</a>-><a class=\"id\" href=\"#sk_copy_start\">sk_copy_start</a>, &amp;<a class=\"id\" href=\"#osk\">osk</a>-><a class=\"id\" href=\"#sk_copy_start\">sk_copy_start</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#osk\">osk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#obj_size\">obj_size</a> - <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#sk_copy_start\">sk_copy_start</a>));", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY_NETWORK\">CONFIG_SECURITY_NETWORK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsk\">nsk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a> = <a class=\"id\" href=\"#sptr\">sptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_sk_clone\">security_sk_clone</a>(<a class=\"id\" href=\"#osk\">osk</a>, <a class=\"id\" href=\"#nsk\">nsk</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk_prot_alloc\">sk_prot_alloc</a>(struct <a class=\"id\" href=\"#proto\">proto</a> *<a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#family\">family</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#slab\">slab</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#slab\">slab</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab\">slab</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#priority\">priority</a> &amp; ~<a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk\">sk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priority\">priority</a> &amp; <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * caches using SLAB_DESTROY_BY_RCU should let</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sk_node.next un-modified. Special care is taken</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * when initializing object to zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#sk_node\">sk_node</a>.<a class=\"id\" href=\"#next\">next</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#sk\">sk</a>, 0, <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#sk_node\">sk_node</a>.<a class=\"id\" href=\"#next\">next</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_node\">sk_node</a>.<a class=\"id\" href=\"#pprev\">pprev</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#obj_size\">obj_size</a> - <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sk_node\">sk_node</a>.<a class=\"id\" href=\"#pprev\">pprev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#obj_size\">obj_size</a>, <a class=\"id\" href=\"#priority\">priority</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#security_sk_alloc\">security_sk_alloc</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#family\">family</a>, <a class=\"id\" href=\"#priority\">priority</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_sec\">out_free_sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_tx_queue_clear\">sk_tx_queue_clear</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<a class=\"id\" href=\"#out_free_sec\">out_free_sec</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_sk_free\">security_sk_free</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab\">slab</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sk_prot_free\">sk_prot_free</a>(struct <a class=\"id\" href=\"#proto\">proto</a> *<a class=\"id\" href=\"#prot\">prot</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#slab\">slab</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#slab\">slab</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_sk_free\">security_sk_free</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab\">slab</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUPS\">CONFIG_CGROUPS</a>", 
"void <a class=\"id\" href=\"#sock_update_classid\">sock_update_classid</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#classid\">classid</a> = <a class=\"id\" href=\"#task_cls_classid\">task_cls_classid</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#classid\">classid</a> && <a class=\"id\" href=\"#classid\">classid</a> != <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_classid\">sk_classid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_classid\">sk_classid</a> = <a class=\"id\" href=\"#classid\">classid</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_update_classid\">sock_update_classid</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sk_alloc - All socket objects are allocated here</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@family: protocol family</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@priority: for allocation (%GFP_KERNEL, %GFP_ATOMIC, etc)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prot: struct proto associated with this new sock instance</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk_alloc\">sk_alloc</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#family\">family</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#proto\">proto</a> *<a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sk_prot_alloc\">sk_prot_alloc</a>(<a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#priority\">priority</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, <a class=\"id\" href=\"#family\">family</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> = <a class=\"id\" href=\"#family\">family</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * See comment in struct sock definition to understand</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * why we need sk_prot_creator -acme</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot_creator\">sk_prot_creator</a> = <a class=\"id\" href=\"#prot\">prot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_lock_init\">sock_lock_init</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_net_set\">sock_net_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#get_net\">get_net</a>(<a class=\"id\" href=\"#net\">net</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_update_classid\">sock_update_classid</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sk_alloc\">sk_alloc</a>);", 
"", 
"static void <a class=\"id\" href=\"#__sk_free\">__sk_free</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_filter\">sk_filter</a> *<a class=\"id\" href=\"#filter\">filter</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_destruct\">sk_destruct</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_destruct\">sk_destruct</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filter\">filter</a> = <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_filter\">sk_filter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>) == 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filter\">filter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_filter_uncharge\">sk_filter_uncharge</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#filter\">filter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_filter\">sk_filter</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_disable_timestamp\">sock_disable_timestamp</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMP\">SOCK_TIMESTAMP</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_disable_timestamp\">sock_disable_timestamp</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_RX_SOFTWARE\">SOCK_TIMESTAMPING_RX_SOFTWARE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_omem_alloc\">sk_omem_alloc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%s: optmem leakage (%d bytes) detected.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_omem_alloc\">sk_omem_alloc</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_peer_cred\">sk_peer_cred</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_peer_cred\">sk_peer_cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_peer_pid\">sk_peer_pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_net\">put_net</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_prot_free\">sk_prot_free</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot_creator\">sk_prot_creator</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#sk_free\">sk_free</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We substract one from sk_wmem_alloc and can know if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * some packets are still in some tx queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If not null, sock_wfree() will call __sk_free(sk) later</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sk_free\">__sk_free</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sk_free\">sk_free</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Last sock_put should drop referrence to sk-&gt;sk_net. It has already</span>", 
"<span class=\"comment\"> * been dropped in sk_change_net. Taking referrence to stopping namespace</span>", 
"<span class=\"comment\"> * is not an option.</span>", 
"<span class=\"comment\"> * Take referrence to a socket to remove it from hash _alive_ and after that</span>", 
"<span class=\"comment\"> * destroy it in the context of init_net.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sk_release_kernel\">sk_release_kernel</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_hold\">sock_hold</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_release\">sock_release</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_net\">release_net</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_net_set\">sock_net_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#get_net\">get_net</a>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_put\">sock_put</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sk_release_kernel\">sk_release_kernel</a>);", 
"", 
"struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk_clone\">sk_clone</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#newsk\">newsk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a> = <a class=\"id\" href=\"#sk_prot_alloc\">sk_prot_alloc</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>, <a class=\"id\" href=\"#priority\">priority</a>, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newsk\">newsk</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_filter\">sk_filter</a> *<a class=\"id\" href=\"#filter\">filter</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_copy\">sock_copy</a>(<a class=\"id\" href=\"#newsk\">newsk</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SANITY */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_net\">get_net</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#newsk\">newsk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_node_init\">sk_node_init</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_node\">sk_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_lock_init\">sock_lock_init</a>(<a class=\"id\" href=\"#newsk\">newsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_lock_sock\">bh_lock_sock</a>(<a class=\"id\" href=\"#newsk\">newsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_backlog\">sk_backlog</a>.<a class=\"id\" href=\"#head\">head</a><span class=\"ts\"/>= <a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_backlog\">sk_backlog</a>.<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_backlog\">sk_backlog</a>.<a class=\"id\" href=\"#len\">len</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_rmem_alloc\">sk_rmem_alloc</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sk_wmem_alloc set to one (see sk_free() and sock_wfree())</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_omem_alloc\">sk_omem_alloc</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_DMA\">CONFIG_NET_DMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_async_wait_queue\">sk_async_wait_queue</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_dst_lock\">sk_dst_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rwlock_init\">rwlock_init</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class_and_name\">lockdep_set_class_and_name</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#af_callback_keys\">af_callback_keys</a> + <a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#af_family_clock_key_strings\">af_family_clock_key_strings</a>[<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_dst_cache\">sk_dst_cache</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_wmem_queued\">sk_wmem_queued</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_forward_alloc\">sk_forward_alloc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_userlocks\">sk_userlocks</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_userlocks\">sk_userlocks</a> &amp; ~<a class=\"id\" href=\"#SOCK_BINDPORT_LOCK\">SOCK_BINDPORT_LOCK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_reset_flag\">sock_reset_flag</a>(<a class=\"id\" href=\"#newsk\">newsk</a>, <a class=\"id\" href=\"#SOCK_DONE\">SOCK_DONE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_error_queue\">sk_error_queue</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filter\">filter</a> = <a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_filter\">sk_filter</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filter\">filter</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_filter_charge\">sk_filter_charge</a>(<a class=\"id\" href=\"#newsk\">newsk</a>, <a class=\"id\" href=\"#filter\">filter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#xfrm_sk_clone_policy\">xfrm_sk_clone_policy</a>(<a class=\"id\" href=\"#newsk\">newsk</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It is still raw copy of parent, so invalidate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * destructor and make plain sk_free() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_destruct\">sk_destruct</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_free\">sk_free</a>(<a class=\"id\" href=\"#newsk\">newsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a><span class=\"ts\"/>   = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_priority\">sk_priority</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Before updating sk_refcnt, we must commit prior changes to memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (Documentation/RCU/rculist_nulls.txt for details)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_refcnt\">sk_refcnt</a>, 2);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Increment the counter in the same struct proto as the master</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sock (sk_refcnt_debug_inc uses newsk-&gt;sk_prot-&gt;socks, that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is the same as sk-&gt;sk_prot-&gt;socks, as this field was copied</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with memcpy).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This _changes_ the previous behaviour, where</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tcp_create_openreq_child always was incrementing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * equivalent to tcp_prot-&gt;socks (inet_sock_nr), so this have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to be taken into account in all callers. -acme</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_refcnt_debug_inc\">sk_refcnt_debug_inc</a>(<a class=\"id\" href=\"#newsk\">newsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_set_socket\">sk_set_socket</a>(<a class=\"id\" href=\"#newsk\">newsk</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_wq\">sk_wq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#sockets_allocated\">sockets_allocated</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_inc\">percpu_counter_inc</a>(<a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#sockets_allocated\">sockets_allocated</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#newsk\">newsk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMP\">SOCK_TIMESTAMP</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#newsk\">newsk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_RX_SOFTWARE\">SOCK_TIMESTAMPING_RX_SOFTWARE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_enable_timestamp\">net_enable_timestamp</a>();", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#newsk\">newsk</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sk_clone\">sk_clone</a>);", 
"", 
"void <a class=\"id\" href=\"#sk_setup_caps\">sk_setup_caps</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sk_dst_set\">__sk_dst_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_caps\">sk_route_caps</a> = <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_caps\">sk_route_caps</a> &amp; <a class=\"id\" href=\"#NETIF_F_GSO\">NETIF_F_GSO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_caps\">sk_route_caps</a> |= <a class=\"id\" href=\"#NETIF_F_GSO_SOFTWARE\">NETIF_F_GSO_SOFTWARE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_caps\">sk_route_caps</a> &= ~<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_nocaps\">sk_route_nocaps</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk_can_gso\">sk_can_gso</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#header_len\">header_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_caps\">sk_route_caps</a> &= ~<a class=\"id\" href=\"#NETIF_F_GSO_MASK\">NETIF_F_GSO_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_caps\">sk_route_caps</a> |= <a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a> | <a class=\"id\" href=\"#NETIF_F_HW_CSUM\">NETIF_F_HW_CSUM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_gso_max_size\">sk_gso_max_size</a> = <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gso_max_size\">gso_max_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sk_setup_caps\">sk_setup_caps</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sk_init\">sk_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> <= 4096) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_wmem_max\">sysctl_wmem_max</a> = 32767;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_rmem_max\">sysctl_rmem_max</a> = 32767;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_wmem_default\">sysctl_wmem_default</a> = 32767;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_rmem_default\">sysctl_rmem_default</a> = 32767;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> >= 131072) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_wmem_max\">sysctl_wmem_max</a> = 131071;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_rmem_max\">sysctl_rmem_max</a> = 131071;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Simple resource managers for sockets.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write buffer destructor automatically called from kfree_skb.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sock_wfree\">sock_wfree</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_USE_WRITE_QUEUE\">SOCK_USE_WRITE_QUEUE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Keep a reference on sk_wmem_alloc, this will be released</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * after sk_write_space() call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#len\">len</a> - 1, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_space\">sk_write_space</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if sk_wmem_alloc reaches 0, we must finish what sk_free()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could not do because of in-flight packets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_sub_and_test\">atomic_sub_and_test</a>(<a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sk_free\">__sk_free</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_wfree\">sock_wfree</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read buffer destructor automatically called from kfree_skb.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sock_rfree\">sock_rfree</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rmem_alloc\">sk_rmem_alloc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_uncharge\">sk_mem_uncharge</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_rfree\">sock_rfree</a>);", 
"", 
"", 
"int <a class=\"id\" href=\"#sock_i_uid\">sock_i_uid</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#uid\">uid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock_bh\">read_lock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a> ? <a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>)-><a class=\"id\" href=\"#i_uid\">i_uid</a> : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_bh\">read_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#uid\">uid</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_i_uid\">sock_i_uid</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#sock_i_ino\">sock_i_ino</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ino\">ino</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock_bh\">read_lock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a> ? <a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>)-><a class=\"id\" href=\"#i_ino\">i_ino</a> : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_bh\">read_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ino\">ino</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_i_ino\">sock_i_ino</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a skb from the socket's send buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#sock_wmalloc\">sock_wmalloc</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#force\">force</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#force\">force</a> || <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>) &lt; <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#priority\">priority</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_set_owner_w\">skb_set_owner_w</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_wmalloc\">sock_wmalloc</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a skb from the socket's receive buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#sock_rmalloc\">sock_rmalloc</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#force\">force</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#force\">force</a> || <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rmem_alloc\">sk_rmem_alloc</a>) &lt; <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvbuf\">sk_rcvbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#priority\">priority</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_set_owner_r\">skb_set_owner_r</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a memory block from the socket's option memory buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#sock_kmalloc\">sock_kmalloc</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>)", 
"{", 
"<span class=\"ts\"/>if ((unsigned)<a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#sysctl_optmem_max\">sysctl_optmem_max</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_omem_alloc\">sk_omem_alloc</a>) + <a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#sysctl_optmem_max\">sysctl_optmem_max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* First do the add, to avoid the race if kmalloc</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * might sleep.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_omem_alloc\">sk_omem_alloc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#priority\">priority</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_omem_alloc\">sk_omem_alloc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_kmalloc\">sock_kmalloc</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free an option memory block.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sock_kfree_s\">sock_kfree_s</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, void *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_omem_alloc\">sk_omem_alloc</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_kfree_s\">sock_kfree_s</a>);", 
"", 
"<span class=\"comment\">/* It is almost wait_for_tcp_memory minus release_sock/lock_sock.</span>", 
"<span class=\"comment\">   I think, these locks should be removed for datagram sockets.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#sock_wait_for_wmem\">sock_wait_for_wmem</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, long <a class=\"id\" href=\"#timeo\">timeo</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#SOCK_ASYNC_NOSPACE\">SOCK_ASYNC_NOSPACE</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#timeo\">timeo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#SOCK_NOSPACE\">SOCK_NOSPACE</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#sk_sleep\">sk_sleep</a>(<a class=\"id\" href=\"#sk\">sk</a>), &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>) &lt; <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_shutdown\">sk_shutdown</a> &amp; <a class=\"id\" href=\"#SEND_SHUTDOWN\">SEND_SHUTDOWN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeo\">timeo</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#timeo\">timeo</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#sk_sleep\">sk_sleep</a>(<a class=\"id\" href=\"#sk\">sk</a>), &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#timeo\">timeo</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Generic send/receive buffer handlers</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#sock_alloc_send_pskb\">sock_alloc_send_pskb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned long <a class=\"id\" href=\"#header_len\">header_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#data_len\">data_len</a>, int <a class=\"id\" href=\"#noblock\">noblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int *<a class=\"id\" href=\"#errcode\">errcode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#timeo\">timeo</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_allocation\">sk_allocation</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> |= <a class=\"id\" href=\"#__GFP_REPEAT\">__GFP_REPEAT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeo\">timeo</a> = <a class=\"id\" href=\"#sock_sndtimeo\">sock_sndtimeo</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#noblock\">noblock</a>);", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sock_error\">sock_error</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPIPE\">EPIPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_shutdown\">sk_shutdown</a> &amp; <a class=\"id\" href=\"#SEND_SHUTDOWN\">SEND_SHUTDOWN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>) &lt; <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#header_len\">header_len</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#npages\">npages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No pages, we're done... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#data_len\">data_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#npages\">npages</a> = (<a class=\"id\" href=\"#data_len\">data_len</a> + (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1)) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a> += <a class=\"id\" href=\"#data_len\">data_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#npages\">npages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#npages\">npages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a> *<a class=\"id\" href=\"#frag\">frag</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_allocation\">sk_allocation</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOBUFS\">ENOBUFS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#data_len\">data_len</a> >= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#data_len\">data_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data_len\">data_len</a> -= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Full success... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOBUFS\">ENOBUFS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#SOCK_ASYNC_NOSPACE\">SOCK_ASYNC_NOSPACE</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#SOCK_NOSPACE\">SOCK_NOSPACE</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#timeo\">timeo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#interrupted\">interrupted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeo\">timeo</a> = <a class=\"id\" href=\"#sock_wait_for_wmem\">sock_wait_for_wmem</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#timeo\">timeo</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_set_owner_w\">skb_set_owner_w</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<a class=\"id\" href=\"#interrupted\">interrupted</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sock_intr_errno\">sock_intr_errno</a>(<a class=\"id\" href=\"#timeo\">timeo</a>);", 
"<a class=\"id\" href=\"#failure\">failure</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errcode\">errcode</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_alloc_send_pskb\">sock_alloc_send_pskb</a>);", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#sock_alloc_send_skb\">sock_alloc_send_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#noblock\">noblock</a>, int *<a class=\"id\" href=\"#errcode\">errcode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sock_alloc_send_pskb\">sock_alloc_send_pskb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#size\">size</a>, 0, <a class=\"id\" href=\"#noblock\">noblock</a>, <a class=\"id\" href=\"#errcode\">errcode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_alloc_send_skb\">sock_alloc_send_skb</a>);", 
"", 
"static void <a class=\"id\" href=\"#__lock_sock\">__lock_sock</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait_exclusive\">prepare_to_wait_exclusive</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock_owned_by_user\">sock_owned_by_user</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__release_sock\">__release_sock</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_backlog\">sk_backlog</a>.<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_backlog\">sk_backlog</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_backlog\">sk_backlog</a>.<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_unlock_sock\">bh_unlock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#skb_dst_is_noref\">skb_dst_is_noref</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_backlog_rcv\">sk_backlog_rcv</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We are in process context here with softirqs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * disabled, use cond_resched_softirq() to preempt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is safe to do because we've taken the backlog</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * queue private:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched_softirq\">cond_resched_softirq</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#skb\">skb</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_lock_sock\">bh_lock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_backlog\">sk_backlog</a>.<a class=\"id\" href=\"#head\">head</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Doing the zeroing here guarantee we can not loop forever</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while a wild producer attempts to flood us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_backlog\">sk_backlog</a>.<a class=\"id\" href=\"#len\">len</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sk_wait_data - wait for data to arrive at sk_receive_queue</span>", 
"<span class=\"comment\"> * @sk:    sock to wait on</span>", 
"<span class=\"comment\"> * @timeo: for how long</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Now socket state including sk-&gt;sk_err is changed only under lock,</span>", 
"<span class=\"comment\"> * hence we may omit checks after joining wait queue.</span>", 
"<span class=\"comment\"> * We check receive queue before schedule() only as optimization;</span>", 
"<span class=\"comment\"> * it is very likely that release_sock() added new data.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sk_wait_data\">sk_wait_data</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, long *<a class=\"id\" href=\"#timeo\">timeo</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#sk_sleep\">sk_sleep</a>(<a class=\"id\" href=\"#sk\">sk</a>), &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#SOCK_ASYNC_WAITDATA\">SOCK_ASYNC_WAITDATA</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sk_wait_event\">sk_wait_event</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#timeo\">timeo</a>, !<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#SOCK_ASYNC_WAITDATA\">SOCK_ASYNC_WAITDATA</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#sk_sleep\">sk_sleep</a>(<a class=\"id\" href=\"#sk\">sk</a>), &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sk_wait_data\">sk_wait_data</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__sk_mem_schedule - increase sk_forward_alloc and memory_allocated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sk: socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: memory size to allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@kind: allocation type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If kind is SK_MEM_SEND, it means wmem allocation. Otherwise it means</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rmem allocation. This function assumes that protocols which have</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory_pressure use sk_wmem_queued as write buffer accounting.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sk_mem_schedule\">__sk_mem_schedule</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#kind\">kind</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proto\">proto</a> *<a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#amt\">amt</a> = <a class=\"id\" href=\"#sk_mem_pages\">sk_mem_pages</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#allocated\">allocated</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_forward_alloc\">sk_forward_alloc</a> += <a class=\"id\" href=\"#amt\">amt</a> * <a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allocated\">allocated</a> = <a class=\"id\" href=\"#atomic_add_return\">atomic_add_return</a>(<a class=\"id\" href=\"#amt\">amt</a>, <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#memory_allocated\">memory_allocated</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Under limit. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#allocated\">allocated</a> <= <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#sysctl_mem\">sysctl_mem</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#memory_pressure\">memory_pressure</a> && *<a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#memory_pressure\">memory_pressure</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#memory_pressure\">memory_pressure</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Under pressure. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#allocated\">allocated</a> &gt; <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#sysctl_mem\">sysctl_mem</a>[1])", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#enter_memory_pressure\">enter_memory_pressure</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#enter_memory_pressure\">enter_memory_pressure</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Over hard limit. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#allocated\">allocated</a> &gt; <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#sysctl_mem\">sysctl_mem</a>[2])", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#suppress_allocation\">suppress_allocation</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* guarantee minimum buffer size under pressure */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kind\">kind</a> == <a class=\"id\" href=\"#SK_MEM_RECV\">SK_MEM_RECV</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rmem_alloc\">sk_rmem_alloc</a>) &lt; <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#sysctl_rmem\">sysctl_rmem</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else { <span class=\"comment\">/* SK_MEM_SEND */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_type\">sk_type</a> == <a class=\"id\" href=\"#SOCK_STREAM\">SOCK_STREAM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_queued\">sk_wmem_queued</a> &lt; <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#sysctl_wmem\">sysctl_wmem</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>) &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#sysctl_wmem\">sysctl_wmem</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prot\">prot</a>-><a class=\"id\" href=\"#memory_pressure\">memory_pressure</a>) {", 
];
xr_frag_insert('l/d3/500a47a996ccde545374c4e44c605a800b9f95.xr', __xr_tmp);
