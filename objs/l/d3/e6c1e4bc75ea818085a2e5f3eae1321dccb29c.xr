var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Fault Injection Test harness (FI)</span>", 
"<span class=\"comment\"> *  Copyright (C) Intel Crop.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *  modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *  as published by the Free Software Foundation; either version 2</span>", 
"<span class=\"comment\"> *  of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,</span>", 
"<span class=\"comment\"> *  USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*  Id: pf_in.c,v 1.1.1.1 2002/11/12 05:56:32 brlock Exp</span>", 
"<span class=\"comment\"> *  Copyright by Intel Crop., 2002</span>", 
"<span class=\"comment\"> *  Louis Zhuang (louis.zhuang@intel.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Bjorn Steinbrink (B.Steinbrink@gmx.de), 2007</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* struct pt_regs */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> \"pf_in.h\"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__i386__\">__i386__</a>", 
"<span class=\"comment\">/* IA32 Manual 3, 2-1 */</span>", 
"static unsigned char <a class=\"id\" href=\"#prefix_codes\">prefix_codes</a>[] = {", 
"<span class=\"ts\"/>0xF0, 0xF2, 0xF3, 0x2E, 0x36, 0x3E, 0x26, 0x64,", 
"<span class=\"ts\"/>0x65, 0x66, 0x67", 
"};", 
"<span class=\"comment\">/* IA32 Manual 3, 3-432*/</span>", 
"static unsigned int <a class=\"id\" href=\"#reg_rop\">reg_rop</a>[] = {", 
"<span class=\"ts\"/>0x8A, 0x8B, 0xB60F, 0xB70F, 0xBE0F, 0xBF0F", 
"};", 
"static unsigned int <a class=\"id\" href=\"#reg_wop\">reg_wop</a>[] = { 0x88, 0x89, 0xAA, 0xAB };", 
"static unsigned int <a class=\"id\" href=\"#imm_wop\">imm_wop</a>[] = { 0xC6, 0xC7 };", 
"<span class=\"comment\">/* IA32 Manual 3, 3-432*/</span>", 
"static unsigned int <a class=\"id\" href=\"#rw8\">rw8</a>[] = { 0x88, 0x8A, 0xC6, 0xAA };", 
"static unsigned int <a class=\"id\" href=\"#rw32\">rw32</a>[] = {", 
"<span class=\"ts\"/>0x89, 0x8B, 0xC7, 0xB60F, 0xB70F, 0xBE0F, 0xBF0F, 0xAB", 
"};", 
"static unsigned int <a class=\"id\" href=\"#mw8\">mw8</a>[] = { 0x88, 0x8A, 0xC6, 0xB60F, 0xBE0F, 0xAA };", 
"static unsigned int <a class=\"id\" href=\"#mw16\">mw16</a>[] = { 0xB70F, 0xBF0F };", 
"static unsigned int <a class=\"id\" href=\"#mw32\">mw32</a>[] = { 0x89, 0x8B, 0xC7, 0xAB };", 
"static unsigned int <a class=\"id\" href=\"#mw64\">mw64</a>[] = {};", 
"#else <span class=\"comment\">/* not __i386__ */</span>", 
"static unsigned char <a class=\"id\" href=\"#prefix_codes\">prefix_codes</a>[] = {", 
"<span class=\"ts\"/>0x66, 0x67, 0x2E, 0x3E, 0x26, 0x64, 0x65, 0x36,", 
"<span class=\"ts\"/>0xF0, 0xF3, 0xF2,", 
"<span class=\"ts\"/><span class=\"comment\">/* REX Prefixes */</span>", 
"<span class=\"ts\"/>0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,", 
"<span class=\"ts\"/>0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f", 
"};", 
"<span class=\"comment\">/* AMD64 Manual 3, Appendix A*/</span>", 
"static unsigned int <a class=\"id\" href=\"#reg_rop\">reg_rop</a>[] = {", 
"<span class=\"ts\"/>0x8A, 0x8B, 0xB60F, 0xB70F, 0xBE0F, 0xBF0F", 
"};", 
"static unsigned int <a class=\"id\" href=\"#reg_wop\">reg_wop</a>[] = { 0x88, 0x89, 0xAA, 0xAB };", 
"static unsigned int <a class=\"id\" href=\"#imm_wop\">imm_wop</a>[] = { 0xC6, 0xC7 };", 
"static unsigned int <a class=\"id\" href=\"#rw8\">rw8</a>[] = { 0xC6, 0x88, 0x8A, 0xAA };", 
"static unsigned int <a class=\"id\" href=\"#rw32\">rw32</a>[] = {", 
"<span class=\"ts\"/>0xC7, 0x89, 0x8B, 0xB60F, 0xB70F, 0xBE0F, 0xBF0F, 0xAB", 
"};", 
"<span class=\"comment\">/* 8 bit only */</span>", 
"static unsigned int <a class=\"id\" href=\"#mw8\">mw8</a>[] = { 0xC6, 0x88, 0x8A, 0xB60F, 0xBE0F, 0xAA };", 
"<span class=\"comment\">/* 16 bit only */</span>", 
"static unsigned int <a class=\"id\" href=\"#mw16\">mw16</a>[] = { 0xB70F, 0xBF0F };", 
"<span class=\"comment\">/* 16 or 32 bit */</span>", 
"static unsigned int <a class=\"id\" href=\"#mw32\">mw32</a>[] = { 0xC7 };", 
"<span class=\"comment\">/* 16, 32 or 64 bit */</span>", 
"static unsigned int <a class=\"id\" href=\"#mw64\">mw64</a>[] = { 0x89, 0x8B, 0xAB };", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* not __i386__ */</span>", 
"", 
"struct <a class=\"id\" href=\"#prefix_bits\">prefix_bits</a> {", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#shorted\">shorted</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#enlarged\">enlarged</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#rexr\">rexr</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#rex\">rex</a>:1;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#skip_prefix\">skip_prefix</a>(unsigned char *<a class=\"id\" href=\"#addr\">addr</a>, struct <a class=\"id\" href=\"#prefix_bits\">prefix_bits</a> *<a class=\"id\" href=\"#prf\">prf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prf\">prf</a>-><a class=\"id\" href=\"#shorted\">shorted</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prf\">prf</a>-><a class=\"id\" href=\"#enlarged\">enlarged</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prf\">prf</a>-><a class=\"id\" href=\"#rexr\">rexr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prf\">prf</a>-><a class=\"id\" href=\"#rex\">rex</a> = 0;", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#prefix_codes\">prefix_codes</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#prefix_codes\">prefix_codes</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == 0x66)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prf\">prf</a>-><a class=\"id\" href=\"#shorted\">shorted</a> = 1;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__amd64__\">__amd64__</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#p\">p</a> &amp; 0xf8) == 0x48)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prf\">prf</a>-><a class=\"id\" href=\"#enlarged\">enlarged</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#p\">p</a> &amp; 0xf4) == 0x44)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prf\">prf</a>-><a class=\"id\" href=\"#rexr\">rexr</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#p\">p</a> &amp; 0xf0) == 0x40)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prf\">prf</a>-><a class=\"id\" href=\"#rex\">rex</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_opcode\">get_opcode</a>(unsigned char *<a class=\"id\" href=\"#addr\">addr</a>, unsigned int *<a class=\"id\" href=\"#opcode\">opcode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#addr\">addr</a> == 0x0F) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x0F is extension instruction */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#opcode\">opcode</a> = *(unsigned short *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 2;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#opcode\">opcode</a> = *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHECK_OP_TYPE\">CHECK_OP_TYPE</a>(<a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#type\">type</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#array\">array</a>); <a class=\"id\" href=\"#i\">i</a>++) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#type\">type</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/>} \\", 
"<span class=\"ts\"/>}", 
"", 
"enum <a class=\"id\" href=\"#reason_type\">reason_type</a> <a class=\"id\" href=\"#get_ins_type\">get_ins_type</a>(unsigned long <a class=\"id\" href=\"#ins_addr\">ins_addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prefix_bits\">prefix_bits</a> <a class=\"id\" href=\"#prf\">prf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#reason_type\">reason_type</a> <a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#OTHERS\">OTHERS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (unsigned char *)<a class=\"id\" href=\"#ins_addr\">ins_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#skip_prefix\">skip_prefix</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#prf\">prf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#get_opcode\">get_opcode</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#opcode\">opcode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CHECK_OP_TYPE\">CHECK_OP_TYPE</a>(<a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#reg_rop\">reg_rop</a>, <a class=\"id\" href=\"#REG_READ\">REG_READ</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CHECK_OP_TYPE\">CHECK_OP_TYPE</a>(<a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#reg_wop\">reg_wop</a>, <a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CHECK_OP_TYPE\">CHECK_OP_TYPE</a>(<a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#imm_wop\">imm_wop</a>, <a class=\"id\" href=\"#IMM_WRITE\">IMM_WRITE</a>);", 
"", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"}", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#CHECK_OP_TYPE\">CHECK_OP_TYPE</a>", 
"", 
"static unsigned int <a class=\"id\" href=\"#get_ins_reg_width\">get_ins_reg_width</a>(unsigned long <a class=\"id\" href=\"#ins_addr\">ins_addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prefix_bits\">prefix_bits</a> <a class=\"id\" href=\"#prf\">prf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (unsigned char *)<a class=\"id\" href=\"#ins_addr\">ins_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#skip_prefix\">skip_prefix</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#prf\">prf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#get_opcode\">get_opcode</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#opcode\">opcode</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#rw8\">rw8</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rw8\">rw8</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#rw32\">rw32</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rw32\">rw32</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#prf\">prf</a>.<a class=\"id\" href=\"#shorted\">shorted</a> ? 2 : (<a class=\"id\" href=\"#prf\">prf</a>.<a class=\"id\" href=\"#enlarged\">enlarged</a> ? 8 : 4);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"mmiotrace: Unknown opcode 0x%02x\\n\", <a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"unsigned int <a class=\"id\" href=\"#get_ins_mem_width\">get_ins_mem_width</a>(unsigned long <a class=\"id\" href=\"#ins_addr\">ins_addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prefix_bits\">prefix_bits</a> <a class=\"id\" href=\"#prf\">prf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (unsigned char *)<a class=\"id\" href=\"#ins_addr\">ins_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#skip_prefix\">skip_prefix</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#prf\">prf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#get_opcode\">get_opcode</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#opcode\">opcode</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#mw8\">mw8</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mw8\">mw8</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#mw16\">mw16</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mw16\">mw16</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 2;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#mw32\">mw32</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mw32\">mw32</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#prf\">prf</a>.<a class=\"id\" href=\"#shorted\">shorted</a> ? 2 : 4;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#mw64\">mw64</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mw64\">mw64</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#prf\">prf</a>.<a class=\"id\" href=\"#shorted\">shorted</a> ? 2 : (<a class=\"id\" href=\"#prf\">prf</a>.<a class=\"id\" href=\"#enlarged\">enlarged</a> ? 8 : 4);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"mmiotrace: Unknown opcode 0x%02x\\n\", <a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Define register ident in mod/rm byte.</span>", 
"<span class=\"comment\"> * Note: these are NOT the same as in ptrace-abi.h.</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_AL\">arg_AL</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_CL\">arg_CL</a> = 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_DL\">arg_DL</a> = 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_BL\">arg_BL</a> = 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_AH\">arg_AH</a> = 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_CH\">arg_CH</a> = 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_DH\">arg_DH</a> = 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_BH\">arg_BH</a> = 7,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_AX\">arg_AX</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_CX\">arg_CX</a> = 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_DX\">arg_DX</a> = 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_BX\">arg_BX</a> = 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_SP\">arg_SP</a> = 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_BP\">arg_BP</a> = 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_SI\">arg_SI</a> = 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_DI\">arg_DI</a> = 7,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__amd64__\">__amd64__</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_R8\">arg_R8</a>  = 8,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_R9\">arg_R9</a>  = 9,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_R10\">arg_R10</a> = 10,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_R11\">arg_R11</a> = 11,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_R12\">arg_R12</a> = 12,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_R13\">arg_R13</a> = 13,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_R14\">arg_R14</a> = 14,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg_R15\">arg_R15</a> = 15", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"static unsigned char *<a class=\"id\" href=\"#get_reg_w8\">get_reg_w8</a>(int <a class=\"id\" href=\"#no\">no</a>, int <a class=\"id\" href=\"#rex\">rex</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#no\">no</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_AL\">arg_AL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ax\">ax</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_BL\">arg_BL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bx\">bx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_CL\">arg_CL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cx\">cx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_DL\">arg_DL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#dx\">dx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__amd64__\">__amd64__</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R8\">arg_R8</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r8\">r8</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R9\">arg_R9</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r9\">r9</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R10\">arg_R10</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r10\">r10</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R11\">arg_R11</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r11\">r11</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R12\">arg_R12</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r12\">r12</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R13\">arg_R13</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r13\">r13</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R14\">arg_R14</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r14\">r14</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R15\">arg_R15</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r15\">r15</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rv\">rv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rex\">rex</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If REX prefix exists, access low bytes of SI etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * instead of AH etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#no\">no</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#arg_SI\">arg_SI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#arg_DI\">arg_DI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#di\">di</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#arg_BP\">arg_BP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#arg_SP\">arg_SP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#no\">no</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#arg_AH\">arg_AH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = 1 + (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ax\">ax</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#arg_BH\">arg_BH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = 1 + (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bx\">bx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#arg_CH\">arg_CH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = 1 + (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cx\">cx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#arg_DH\">arg_DH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = 1 + (unsigned char *)&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#dx\">dx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rv\">rv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"mmiotrace: Error reg no# %d\\n\", <a class=\"id\" href=\"#no\">no</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"}", 
"", 
"static unsigned long *<a class=\"id\" href=\"#get_reg_w32\">get_reg_w32</a>(int <a class=\"id\" href=\"#no\">no</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#no\">no</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_AX\">arg_AX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ax\">ax</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_BX\">arg_BX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bx\">bx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_CX\">arg_CX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cx\">cx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_DX\">arg_DX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#dx\">dx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_SP\">arg_SP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_BP\">arg_BP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_SI\">arg_SI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_DI\">arg_DI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#di\">di</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__amd64__\">__amd64__</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R8\">arg_R8</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r8\">r8</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R9\">arg_R9</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r9\">r9</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R10\">arg_R10</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r10\">r10</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R11\">arg_R11</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r11\">r11</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R12\">arg_R12</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r12\">r12</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R13\">arg_R13</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r13\">r13</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R14\">arg_R14</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r14\">r14</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#arg_R15\">arg_R15</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r15\">r15</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"mmiotrace: Error reg no# %d\\n\", <a class=\"id\" href=\"#no\">no</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#get_ins_reg_val\">get_ins_reg_val</a>(unsigned long <a class=\"id\" href=\"#ins_addr\">ins_addr</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reg\">reg</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prefix_bits\">prefix_bits</a> <a class=\"id\" href=\"#prf\">prf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rv\">rv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (unsigned char *)<a class=\"id\" href=\"#ins_addr\">ins_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#skip_prefix\">skip_prefix</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#prf\">prf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#get_opcode\">get_opcode</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#reg_rop\">reg_rop</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg_rop\">reg_rop</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#REG_READ\">REG_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_work\">do_work</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#reg_wop\">reg_wop</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg_wop\">reg_wop</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_work\">do_work</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"mmiotrace: Not a register instruction, opcode \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"0x%02x\\n\", <a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#do_work\">do_work</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* for STOS, source register is fixed */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opcode\">opcode</a> == 0xAA || <a class=\"id\" href=\"#opcode\">opcode</a> == 0xAB) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#arg_AX\">arg_AX</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#mod_rm\">mod_rm</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> = ((<a class=\"id\" href=\"#mod_rm\">mod_rm</a> >> 3) &amp; 0x7) | (<a class=\"id\" href=\"#prf\">prf</a>.<a class=\"id\" href=\"#rexr\">rexr</a> << 3);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#get_ins_reg_width\">get_ins_reg_width</a>(<a class=\"id\" href=\"#ins_addr\">ins_addr</a>)) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/>return *<a class=\"id\" href=\"#get_reg_w8\">get_reg_w8</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#prf\">prf</a>.<a class=\"id\" href=\"#rex\">rex</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/>return *(unsigned short *)<a class=\"id\" href=\"#get_reg_w32\">get_reg_w32</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/>return *(unsigned int *)<a class=\"id\" href=\"#get_reg_w32\">get_reg_w32</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__amd64__\">__amd64__</a>", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/>return *(unsigned long *)<a class=\"id\" href=\"#get_reg_w32\">get_reg_w32</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"mmiotrace: Error width# %d\\n\", <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#get_ins_imm_val\">get_ins_imm_val</a>(unsigned long <a class=\"id\" href=\"#ins_addr\">ins_addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#mod_rm\">mod_rm</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prefix_bits\">prefix_bits</a> <a class=\"id\" href=\"#prf\">prf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rv\">rv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (unsigned char *)<a class=\"id\" href=\"#ins_addr\">ins_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#skip_prefix\">skip_prefix</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#prf\">prf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#get_opcode\">get_opcode</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#imm_wop\">imm_wop</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#imm_wop\">imm_wop</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#opcode\">opcode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#IMM_WRITE\">IMM_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_work\">do_work</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"mmiotrace: Not an immediate instruction, opcode \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"0x%02x\\n\", <a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#do_work\">do_work</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_rm\">mod_rm</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#mod_rm\">mod_rm</a> >> 6;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mod\">mod</a>) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if r/m is 5 we have a 32 disp (IA32 Manual 3, Table 2-2)  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* AMD64: XXX Check for address size prefix? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mod_rm\">mod_rm</a> &amp; 0x7) == 0x5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 3:", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"mmiotrace: not a memory access instruction \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"at 0x%lx, rm_mod=0x%02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ins_addr\">ins_addr</a>, <a class=\"id\" href=\"#mod_rm\">mod_rm</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#get_ins_reg_width\">get_ins_reg_width</a>(<a class=\"id\" href=\"#ins_addr\">ins_addr</a>)) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/>return *(unsigned char *)<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/>return *(unsigned short *)<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/>return *(unsigned int *)<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__amd64__\">__amd64__</a>", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/>return *(unsigned long *)<a class=\"id\" href=\"#p\">p</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"mmiotrace: Error: width.\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/d3/e6c1e4bc75ea818085a2e5f3eae1321dccb29c.xr', __xr_tmp);
