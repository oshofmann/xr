var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Network event notifiers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Authors:</span>", 
"<span class=\"comment\"> *      Tom Tucker             &lt;tom@opengridcomputing.com&gt;</span>", 
"<span class=\"comment\"> *      Steve Wise             &lt;swise@opengridcomputing.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *      modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *      as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *      2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Fixes:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netevent\">netevent</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#ATOMIC_NOTIFIER_HEAD\">ATOMIC_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#netevent_notif_chain\">netevent_notif_chain</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_netevent_notifier - register a netevent notifier block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nb: notifier</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Register a notifier to be called when a netevent occurs.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The notifier passed is linked into the kernel structures and must</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not be reused until it has been unregistered. A negative errno code</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned on a failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_netevent_notifier\">register_netevent_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#netevent_notif_chain\">netevent_notif_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_netevent_notifier\">register_netevent_notifier</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netevent_unregister_notifier - unregister a netevent notifier block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nb: notifier</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unregister a notifier previously registered by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_neigh_notifier(). The notifier is unlinked into the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kernel structures and may then be reused. A negative errno code</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned on a failure.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#unregister_netevent_notifier\">unregister_netevent_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_chain_unregister\">atomic_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#netevent_notif_chain\">netevent_notif_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_netevent_notifier\">unregister_netevent_notifier</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>call_netevent_notifiers - call all netevent notifier blocks</span>", 
"<span class=\"comment\"> *      @val: value passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *      @v:   pointer passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Call all neighbour notifier blocks.  Parameters and return value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are as for notifier_call_chain().</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#call_netevent_notifiers\">call_netevent_notifiers</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#netevent_notif_chain\">netevent_notif_chain</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#call_netevent_notifiers\">call_netevent_notifiers</a>);", 
];
xr_frag_insert('l/d3/f41698ff6af9fcdd3ec7bf1e19c8ccd1c59bf3.xr', __xr_tmp);
