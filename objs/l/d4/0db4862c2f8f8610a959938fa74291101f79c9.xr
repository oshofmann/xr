var __xr_tmp = [
"<span class=\"comment\">/* CPU virtualization extensions handling</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This should carry the code for handling CPU virtualization extensions</span>", 
"<span class=\"comment\"> * that needs to live in the kernel core.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Eduardo Habkost &lt;ehabkost@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2008, Red Hat Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Contains code from KVM, Copyright (C) 2006 Qumranet, Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This work is licensed under the terms of the GNU GPL, version 2.  See</span>", 
"<span class=\"comment\"> * the COPYING file in the top-level directory.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_VIRTEX_H\">_ASM_X86_VIRTEX_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_VIRTEX_H\">_ASM_X86_VIRTEX_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#vmx\">vmx</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#svm\">svm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VMX functions:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpu_has_vmx\">cpu_has_vmx</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ecx\">ecx</a> = <a class=\"id\" href=\"#cpuid_ecx\">cpuid_ecx</a>(1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(5, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>); <span class=\"comment\">/* CPUID.1:ECX.VMX[bit 5] -&gt; VT */</span>", 
"}", 
"", 
"", 
"<span class=\"comment\">/** Disable VMX on the current CPU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vmxoff causes a undefined-opcode exception if vmxon was not run</span>", 
"<span class=\"comment\"> * on the CPU previously. Only call this function if you know VMX</span>", 
"<span class=\"comment\"> * is enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpu_vmxoff\">cpu_vmxoff</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (<a class=\"id\" href=\"#ASM_VMX_VMXOFF\">ASM_VMX_VMXOFF</a> : : : \"cc\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_cr4\">write_cr4</a>(<a class=\"id\" href=\"#read_cr4\">read_cr4</a>() &amp; ~<a class=\"id\" href=\"#X86_CR4_VMXE\">X86_CR4_VMXE</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpu_vmx_enabled\">cpu_vmx_enabled</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_cr4\">read_cr4</a>() &amp; <a class=\"id\" href=\"#X86_CR4_VMXE\">X86_CR4_VMXE</a>;", 
"}", 
"", 
"<span class=\"comment\">/** Disable VMX if it is enabled on the current CPU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You shouldn't call this if cpu_has_vmx() returns 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__cpu_emergency_vmxoff\">__cpu_emergency_vmxoff</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_vmx_enabled\">cpu_vmx_enabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_vmxoff\">cpu_vmxoff</a>();", 
"}", 
"", 
"<span class=\"comment\">/** Disable VMX if it is supported and enabled on the current CPU</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpu_emergency_vmxoff\">cpu_emergency_vmxoff</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_vmx\">cpu_has_vmx</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cpu_emergency_vmxoff\">__cpu_emergency_vmxoff</a>();", 
"}", 
"", 
"", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SVM functions:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/** Check if the CPU has SVM support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You can use the 'msg' arg to get a message describing the problem,</span>", 
"<span class=\"comment\"> * if the function returns zero. Simply pass NULL if you are not interested</span>", 
"<span class=\"comment\"> * on the messages; gcc should take care of not generating code for</span>", 
"<span class=\"comment\"> * the messages on this case.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpu_has_svm\">cpu_has_svm</a>(const char **<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> != <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#msg\">msg</a> = \"not amd\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x80000000, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#eax\">eax</a> &lt; <a class=\"id\" href=\"#SVM_CPUID_FUNC\">SVM_CPUID_FUNC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#msg\">msg</a> = \"can't execute cpuid_8000000a\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x80000001, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ecx\">ecx</a> &amp; (1 << <a class=\"id\" href=\"#SVM_CPUID_FEATURE_SHIFT\">SVM_CPUID_FEATURE_SHIFT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#msg\">msg</a> = \"svm not available\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"", 
"<span class=\"comment\">/** Disable SVM on the current CPU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should call this only if cpu_has_svm() returned true.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpu_svm_disable\">cpu_svm_disable</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#efer\">efer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_VM_HSAVE_PA\">MSR_VM_HSAVE_PA</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_EFER\">MSR_EFER</a>, <a class=\"id\" href=\"#efer\">efer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_EFER\">MSR_EFER</a>, <a class=\"id\" href=\"#efer\">efer</a> &amp; ~<a class=\"id\" href=\"#EFER_SVME\">EFER_SVME</a>);", 
"}", 
"", 
"<span class=\"comment\">/** Makes sure SVM is disabled, if it is supported on the CPU</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpu_emergency_svm_disable\">cpu_emergency_svm_disable</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_svm\">cpu_has_svm</a>(<a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_svm_disable\">cpu_svm_disable</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_VIRTEX_H */</span>", 
];
xr_frag_insert('l/d4/0db4862c2f8f8610a959938fa74291101f79c9.xr', __xr_tmp);
