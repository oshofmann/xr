var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_stack\">show_stack</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#show_state_filter\">show_state_filter</a>(unsigned long <a class=\"id\" href=\"#state_filter\">state_filter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#g\">g</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"  task                PC stack   pid father\\n\");", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"  task                        PC stack   pid father\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reset the NMI-timeout, listing all files on a slow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * console might take alot of time:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#state_filter\">state_filter</a> || (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#state_filter\">state_filter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_show_task\">sched_show_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_all_softlockup_watchdogs\">touch_all_softlockup_watchdogs</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysrq_sched_debug_show\">sysrq_sched_debug_show</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only show locks if all tasks are dumped:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#state_filter\">state_filter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_show_all_locks\">debug_show_all_locks</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_idle_bootup_task\">init_idle_bootup_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#idle\">idle</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> = &amp;<a class=\"id\" href=\"#idle_sched_class\">idle_sched_class</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_idle - set up an idle thread for a given CPU</span>", 
"<span class=\"comment\"> * @idle: task in question</span>", 
"<span class=\"comment\"> * @cpu: cpu the idle task belongs to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: this function does not set the idle thread's NEED_RESCHED</span>", 
"<span class=\"comment\"> * flag, to make booting more robust.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_idle\">init_idle</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#idle\">idle</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sched_fork\">__sched_fork</a>(<a class=\"id\" href=\"#idle\">idle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#exec_start\">exec_start</a> = <a class=\"id\" href=\"#sched_clock\">sched_clock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(&amp;<a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_task_cpu\">__set_task_cpu</a>(<a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a> = <a class=\"id\" href=\"#idle\">idle</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__ARCH_WANT_UNLOCKED_CTXSW\">__ARCH_WANT_UNLOCKED_CTXSW</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the preempt count _outside_ the spinlocks! */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#idle\">idle</a>)-><a class=\"id\" href=\"#preempt_count\">preempt_count</a> = (<a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#lock_depth\">lock_depth</a> >= 0);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#idle\">idle</a>)-><a class=\"id\" href=\"#preempt_count\">preempt_count</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The idle tasks have their own, simple scheduling class:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> = &amp;<a class=\"id\" href=\"#idle_sched_class\">idle_sched_class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_init_task\">ftrace_graph_init_task</a>(<a class=\"id\" href=\"#idle\">idle</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In a system that switches off the HZ timer nohz_cpu_mask</span>", 
"<span class=\"comment\"> * indicates which cpus entered this state. This is used</span>", 
"<span class=\"comment\"> * in the rcu update to wait only for active cpus. For system</span>", 
"<span class=\"comment\"> * which do not switch off the HZ timer nohz_cpu_mask should</span>", 
"<span class=\"comment\"> * always be CPU_BITS_NONE.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#nohz_cpu_mask\">nohz_cpu_mask</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Increase the granularity value when there are more CPUs,</span>", 
"<span class=\"comment\"> * because with more CPUs the 'effective latency' as visible</span>", 
"<span class=\"comment\"> * to users decreases. But the relationship is not linear,</span>", 
"<span class=\"comment\"> * so pick a second-best guess by going with the log2 of the</span>", 
"<span class=\"comment\"> * number of CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This idea comes from the SD scheduler of Con Kolivas:</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_update_sysctl_factor\">get_update_sysctl_factor</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpus\">cpus</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>(), 8);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#factor\">factor</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sysctl_sched_tunable_scaling\">sysctl_sched_tunable_scaling</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_TUNABLESCALING_NONE\">SCHED_TUNABLESCALING_NONE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#factor\">factor</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_TUNABLESCALING_LINEAR\">SCHED_TUNABLESCALING_LINEAR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#factor\">factor</a> = <a class=\"id\" href=\"#cpus\">cpus</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_TUNABLESCALING_LOG\">SCHED_TUNABLESCALING_LOG</a>:", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#factor\">factor</a> = 1 + <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#cpus\">cpus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#factor\">factor</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_sysctl\">update_sysctl</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#factor\">factor</a> = <a class=\"id\" href=\"#get_update_sysctl_factor\">get_update_sysctl_factor</a>();", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_SYSCTL\">SET_SYSCTL</a>(<a class=\"id\" href=\"#name\">name</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#sysctl_\">sysctl_</a>##<a class=\"id\" href=\"#name\">name</a> = (<a class=\"id\" href=\"#factor\">factor</a>) * <a class=\"id\" href=\"#normalized_sysctl_\">normalized_sysctl_</a>##<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_SYSCTL\">SET_SYSCTL</a>(<a class=\"id\" href=\"#sched_min_granularity\">sched_min_granularity</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_SYSCTL\">SET_SYSCTL</a>(<a class=\"id\" href=\"#sched_latency\">sched_latency</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_SYSCTL\">SET_SYSCTL</a>(<a class=\"id\" href=\"#sched_wakeup_granularity\">sched_wakeup_granularity</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_SYSCTL\">SET_SYSCTL</a>(<a class=\"id\" href=\"#sched_shares_ratelimit\">sched_shares_ratelimit</a>);", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SET_SYSCTL\">SET_SYSCTL</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sched_init_granularity\">sched_init_granularity</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_sysctl\">update_sysctl</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is how migration works:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) we invoke migration_cpu_stop() on the target CPU using</span>", 
"<span class=\"comment\"> *    stop_one_cpu().</span>", 
"<span class=\"comment\"> * 2) stopper starts to run (implicitly forcing the migrated thread</span>", 
"<span class=\"comment\"> *    off the CPU)</span>", 
"<span class=\"comment\"> * 3) it checks whether the migrated task is still in the wrong runqueue.</span>", 
"<span class=\"comment\"> * 4) if it's in the wrong runqueue then the migration thread removes</span>", 
"<span class=\"comment\"> *    it and puts it into the right queue.</span>", 
"<span class=\"comment\"> * 5) stopper completes and stop_one_cpu() returns and the migration</span>", 
"<span class=\"comment\"> *    is done.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Change a given task's CPU affinity. Migrate the thread to a</span>", 
"<span class=\"comment\"> * proper CPU and schedule it away if the CPU it's executing on</span>", 
"<span class=\"comment\"> * is removed from the allowed bitmask.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: the caller must have a valid reference to the task, the</span>", 
"<span class=\"comment\"> * task must not exit() &amp; deallocate itself prematurely. The</span>", 
"<span class=\"comment\"> * call is not atomic; no spinlocks may be held.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#new_mask\">new_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Serialize against TASK_WAKING so that ttwu() and wunt() can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drop the rq-&gt;lock and still rely on -&gt;cpus_allowed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#task_is_waking\">task_is_waking</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_is_waking\">task_is_waking</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_intersects\">cpumask_intersects</a>(<a class=\"id\" href=\"#new_mask\">new_mask</a>, <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_THREAD_BOUND\">PF_THREAD_BOUND</a>) && <a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#current\">current</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#new_mask\">new_mask</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#set_cpus_allowed\">set_cpus_allowed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#set_cpus_allowed\">set_cpus_allowed</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> = <a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can the task run on the task's current CPU? If so, we're done */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#new_mask\">new_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> = <a class=\"id\" href=\"#cpumask_any_and\">cpumask_any_and</a>(<a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>, <a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#migrate_task\">migrate_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#migration_arg\">migration_arg</a> <a class=\"id\" href=\"#arg\">arg</a> = { <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> };", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Need help from migration thread: drop lock and wait. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_one_cpu\">stop_one_cpu</a>(<a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#rq\">rq</a>), <a class=\"id\" href=\"#migration_cpu_stop\">migration_cpu_stop</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlb_migrate_finish\">tlb_migrate_finish</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move (not current) task off this cpu, onto dest cpu. We're doing</span>", 
"<span class=\"comment\"> * this because either it can't run here any more (set_cpus_allowed()</span>", 
"<span class=\"comment\"> * away from this CPU, or CPU going down), or because we're</span>", 
"<span class=\"comment\"> * attempting to rebalance this task on exec (sched_exec).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So we race with normal scheduler movements, but that's OK, as long</span>", 
"<span class=\"comment\"> * as the task is no longer on this CPU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns non-zero if task was successfully migrated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__migrate_task\">__migrate_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#src_cpu\">src_cpu</a>, int <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq_dest\">rq_dest</a>, *<a class=\"id\" href=\"#rq_src\">rq_src</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cpu_active\">cpu_active</a>(<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_src\">rq_src</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#src_cpu\">src_cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_dest\">rq_dest</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_rq_lock\">double_rq_lock</a>(<a class=\"id\" href=\"#rq_src\">rq_src</a>, <a class=\"id\" href=\"#rq_dest\">rq_dest</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Already moved. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>) != <a class=\"id\" href=\"#src_cpu\">src_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Affinity changed (again). */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're not on a rq, the next wake-up will ensure we're</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * placed properly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_task\">deactivate_task</a>(<a class=\"id\" href=\"#rq_src\">rq_src</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#activate_task\">activate_task</a>(<a class=\"id\" href=\"#rq_dest\">rq_dest</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(<a class=\"id\" href=\"#rq_dest\">rq_dest</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_rq_unlock\">double_rq_unlock</a>(<a class=\"id\" href=\"#rq_src\">rq_src</a>, <a class=\"id\" href=\"#rq_dest\">rq_dest</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * migration_cpu_stop - this will be executed by a highprio stopper thread</span>", 
"<span class=\"comment\"> * and performs thread migration by bumping thread off CPU then</span>", 
"<span class=\"comment\"> * 'pushing' onto another runqueue.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#migration_cpu_stop\">migration_cpu_stop</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#migration_arg\">migration_arg</a> *<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The original target cpu might have gone down and we might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be on another cpu but it doesn't matter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__migrate_task\">__migrate_task</a>(<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>(), <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Figure out where task on dead CPU should go, use force if necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#move_task_off_dead_cpu\">move_task_off_dead_cpu</a>(int <a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#needs_cpu\">needs_cpu</a>, <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#needs_cpu\">needs_cpu</a> = (<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>) && (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#TASK_WAKING\">TASK_WAKING</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needs_cpu\">needs_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> = <a class=\"id\" href=\"#select_fallback_rq\">select_fallback_rq</a>(<a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It can only fail if we race with set_cpus_allowed(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the racer should migrate the task anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needs_cpu\">needs_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__migrate_task\">__migrate_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>, <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * While a dead CPU has no uninterruptible tasks queued at this point,</span>", 
"<span class=\"comment\"> * it might still have a nonzero -&gt;nr_uninterruptible counter, because</span>", 
"<span class=\"comment\"> * for performance reasons the counter is not stricly tracking tasks to</span>", 
"<span class=\"comment\"> * their home CPUs. So we just add the counter to another CPU's counter,</span>", 
"<span class=\"comment\"> * to keep the global sum constant after CPU-down:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#migrate_nr_uninterruptible\">migrate_nr_uninterruptible</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq_src\">rq_src</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq_dest\">rq_dest</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpumask_any\">cpumask_any</a>(<a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>));", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_rq_lock\">double_rq_lock</a>(<a class=\"id\" href=\"#rq_src\">rq_src</a>, <a class=\"id\" href=\"#rq_dest\">rq_dest</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_dest\">rq_dest</a>-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a> += <a class=\"id\" href=\"#rq_src\">rq_src</a>-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_src\">rq_src</a>-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_rq_unlock\">double_rq_unlock</a>(<a class=\"id\" href=\"#rq_src\">rq_src</a>, <a class=\"id\" href=\"#rq_dest\">rq_dest</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Run through task list and migrate tasks from the dead cpu. */</span>", 
"static void <a class=\"id\" href=\"#migrate_live_tasks\">migrate_live_tasks</a>(int <a class=\"id\" href=\"#src_cpu\">src_cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#src_cpu\">src_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_task_off_dead_cpu\">move_task_off_dead_cpu</a>(<a class=\"id\" href=\"#src_cpu\">src_cpu</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Schedules idle task to be the next runnable task on current CPU.</span>", 
"<span class=\"comment\"> * It does so by boosting its priority to highest possible.</span>", 
"<span class=\"comment\"> * Used by CPU offline code.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sched_idle_next\">sched_idle_next</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cpu has to be offline */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Strictly not necessary since rest of the CPUs are stopped by now</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and interrupts disabled on the current cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__setscheduler\">__setscheduler</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#SCHED_FIFO\">SCHED_FIFO</a>, <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>-1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#activate_task\">activate_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ensures that the idle task is using init_mm right before its cpu goes</span>", 
"<span class=\"comment\"> * offline.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#idle_task_exit\">idle_task_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a> != &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#switch_mm\">switch_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>, &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"", 
"<span class=\"comment\">/* called under rq-&gt;lock with disabled interrupts */</span>", 
"static void <a class=\"id\" href=\"#migrate_dead\">migrate_dead</a>(unsigned int <a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must be exiting, otherwise would be on tasklist. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Cannot have done final schedule yet: would have vanished. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_DEAD\">TASK_DEAD</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drop lock around migration; if someone else moves it,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that's OK. No task can be added to this CPU, so iteration is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#move_task_off_dead_cpu\">move_task_off_dead_cpu</a>(<a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/* release_task() removes task from tasklist, so we won't find dead tasks. */</span>", 
"static void <a class=\"id\" href=\"#migrate_dead_tasks\">migrate_dead_tasks</a>(unsigned int <a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pick_next_task\">pick_next_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#put_prev_task\">put_prev_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_dead\">migrate_dead</a>(<a class=\"id\" href=\"#dead_cpu\">dead_cpu</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * remove the tasks which were accounted by rq from calc_load_tasks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#calc_global_load_remove\">calc_global_load_remove</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_sub\">atomic_long_sub</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#calc_load_active\">calc_load_active</a>, &amp;<a class=\"id\" href=\"#calc_load_tasks\">calc_load_tasks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#calc_load_active\">calc_load_active</a> = 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HOTPLUG_CPU */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>)", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#sd_ctl_dir\">sd_ctl_dir</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"sched_domain\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0555,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{}", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#sd_ctl_root\">sd_ctl_root</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"kernel\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0555,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#child\">child</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_ctl_dir\">sd_ctl_dir</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{}", 
"};", 
];
xr_frag_insert('l/d4/580a11f4b122fb54c2c31f34b8d63aa8eb73fd.xr', __xr_tmp);
