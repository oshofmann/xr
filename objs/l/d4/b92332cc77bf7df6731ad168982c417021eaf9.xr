var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#blocknr\">blocknr</a> = <a class=\"id\" href=\"#blocknr\">blocknr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash_list\">hash_list</a> = &amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a>[<a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#blocknr\">blocknr</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_lock\">j_revoke_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#hash_list\">hash_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_lock\">j_revoke_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#oom\">oom</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#journal_oom_retry\">journal_oom_retry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(1, \"ENOMEM in %s, retrying\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#yield\">yield</a>();", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Find a revoke record in the journal's hash table. */</span>", 
"", 
"static struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *<a class=\"id\" href=\"#find_revoke_record\">find_revoke_record</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#blocknr\">blocknr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#hash_list\">hash_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *<a class=\"id\" href=\"#record\">record</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash_list\">hash_list</a> = &amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a>[<a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#blocknr\">blocknr</a>)];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_lock\">j_revoke_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a> = (struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *) <a class=\"id\" href=\"#hash_list\">hash_list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>while (&amp;(<a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#hash\">hash</a>) != <a class=\"id\" href=\"#hash_list\">hash_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#blocknr\">blocknr</a> == <a class=\"id\" href=\"#blocknr\">blocknr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_lock\">j_revoke_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#record\">record</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a> = (struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *) <a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_lock\">j_revoke_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#journal_destroy_revoke_caches\">journal_destroy_revoke_caches</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#revoke_record_cache\">revoke_record_cache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#revoke_record_cache\">revoke_record_cache</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#revoke_record_cache\">revoke_record_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#revoke_table_cache\">revoke_table_cache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#revoke_table_cache\">revoke_table_cache</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#revoke_table_cache\">revoke_table_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#journal_init_revoke_caches\">journal_init_revoke_caches</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(!<a class=\"id\" href=\"#revoke_record_cache\">revoke_record_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(!<a class=\"id\" href=\"#revoke_table_cache\">revoke_table_cache</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#revoke_record_cache\">revoke_record_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"revoke_record\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_TEMPORARY\">SLAB_TEMPORARY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#revoke_record_cache\">revoke_record_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#record_cache_failure\">record_cache_failure</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#revoke_table_cache\">revoke_table_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"revoke_table\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(struct <a class=\"id\" href=\"#jbd_revoke_table_s\">jbd_revoke_table_s</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   0, <a class=\"id\" href=\"#SLAB_TEMPORARY\">SLAB_TEMPORARY</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#revoke_table_cache\">revoke_table_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#table_cache_failure\">table_cache_failure</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#table_cache_failure\">table_cache_failure</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_destroy_revoke_caches\">journal_destroy_revoke_caches</a>();", 
"<a class=\"id\" href=\"#record_cache_failure\">record_cache_failure</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#jbd_revoke_table_s\">jbd_revoke_table_s</a> *<a class=\"id\" href=\"#journal_init_revoke_table\">journal_init_revoke_table</a>(int <a class=\"id\" href=\"#hash_size\">hash_size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#hash_size\">hash_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd_revoke_table_s\">jbd_revoke_table_s</a> *<a class=\"id\" href=\"#table\">table</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#revoke_table_cache\">revoke_table_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table\">table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>while((<a class=\"id\" href=\"#tmp\">tmp</a> >>= 1UL) != 0UL)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash_size\">hash_size</a> = <a class=\"id\" href=\"#hash_size\">hash_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash_shift\">hash_shift</a> = <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#hash_size\">hash_size</a> * sizeof(struct <a class=\"id\" href=\"#list_head\">list_head</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#revoke_table_cache\">revoke_table_cache</a>, <a class=\"id\" href=\"#table\">table</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = 0; <a class=\"id\" href=\"#tmp\">tmp</a> &lt; <a class=\"id\" href=\"#hash_size\">hash_size</a>; <a class=\"id\" href=\"#tmp\">tmp</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a>[<a class=\"id\" href=\"#tmp\">tmp</a>]);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#table\">table</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#journal_destroy_revoke_table\">journal_destroy_revoke_table</a>(struct <a class=\"id\" href=\"#jbd_revoke_table_s\">jbd_revoke_table_s</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#hash_list\">hash_list</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash_size\">hash_size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash_list\">hash_list</a> = &amp;<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#hash_list\">hash_list</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#revoke_table_cache\">revoke_table_cache</a>, <a class=\"id\" href=\"#table\">table</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Initialise the revoke table for a given journal to a given size. */</span>", 
"int <a class=\"id\" href=\"#journal_init_revoke\">journal_init_revoke</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, int <a class=\"id\" href=\"#hash_size\">hash_size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0] == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#is_power_of_2\">is_power_of_2</a>(<a class=\"id\" href=\"#hash_size\">hash_size</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0] = <a class=\"id\" href=\"#journal_init_revoke_table\">journal_init_revoke_table</a>(<a class=\"id\" href=\"#hash_size\">hash_size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail0\">fail0</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[1] = <a class=\"id\" href=\"#journal_init_revoke_table\">journal_init_revoke_table</a>(<a class=\"id\" href=\"#hash_size\">hash_size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[1])", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail1\">fail1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[1];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_lock\">j_revoke_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail1\">fail1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_destroy_revoke_table\">journal_destroy_revoke_table</a>(<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0]);", 
"<a class=\"id\" href=\"#fail0\">fail0</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Destroy a journal's revoke table.  The table must already be empty! */</span>", 
"void <a class=\"id\" href=\"#journal_destroy_revoke\">journal_destroy_revoke</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_destroy_revoke_table\">journal_destroy_revoke_table</a>(<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[1])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_destroy_revoke_table\">journal_destroy_revoke_table</a>(<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[1]);", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * journal_revoke: revoke a given buffer_head from the journal.  This</span>", 
"<span class=\"comment\"> * prevents the block from being replayed during recovery if we take a</span>", 
"<span class=\"comment\"> * crash after this current transaction commits.  Any subsequent</span>", 
"<span class=\"comment\"> * metadata writes of the buffer in this transaction cancel the</span>", 
"<span class=\"comment\"> * revoke.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this call may block --- it is up to the caller to make</span>", 
"<span class=\"comment\"> * sure that there are no further calls to journal_write_metadata</span>", 
"<span class=\"comment\"> * before the revoke is complete.  In ext3, this implies calling the</span>", 
"<span class=\"comment\"> * revoke before clearing the block bitmap when we are deleting</span>", 
"<span class=\"comment\"> * metadata.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Revoke performs a journal_forget on any buffer_head passed in as a</span>", 
"<span class=\"comment\"> * parameter, but does _not_ forget the buffer_head if the bh was only</span>", 
"<span class=\"comment\"> * found implicitly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * bh_in may not be a journalled buffer - it may have come off</span>", 
"<span class=\"comment\"> * the hash tables without an attached journal_head.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If bh_in is non-zero, journal_revoke() will decrement its b_count</span>", 
"<span class=\"comment\"> * by one.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#journal_revoke\">journal_revoke</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, unsigned int <a class=\"id\" href=\"#blocknr\">blocknr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh_in\">bh_in</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh_in\">bh_in</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh_in\">bh_in</a>, \"enter\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#journal_set_features\">journal_set_features</a>(<a class=\"id\" href=\"#journal\">journal</a>, 0, 0, <a class=\"id\" href=\"#JFS_FEATURE_INCOMPAT_REVOKE\">JFS_FEATURE_INCOMPAT_REVOKE</a>)){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a> (!\"Cannot set revoke feature!\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_fs_dev\">j_fs_dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh_in\">bh_in</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#__find_get_block\">__find_get_block</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#blocknr\">blocknr</a>, <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_blocksize\">j_blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"found on hash\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#JBD_EXPENSIVE_CHECKING\">JBD_EXPENSIVE_CHECKING</a>", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh2\">bh2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If there is a different buffer_head lying around in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * memory anywhere... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh2\">bh2</a> = <a class=\"id\" href=\"#__find_get_block\">__find_get_block</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#blocknr\">blocknr</a>, <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_blocksize\">j_blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh2\">bh2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ... and it has RevokeValid status... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh2\">bh2</a> != <a class=\"id\" href=\"#bh\">bh</a> && <a class=\"id\" href=\"#buffer_revokevalid\">buffer_revokevalid</a>(<a class=\"id\" href=\"#bh2\">bh2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ...then it better be revoked too,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * since it's illegal to create a revoke</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * record against a buffer_head which is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not marked revoked --- that would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * risk missing a subsequent revoke</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cancel. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_BH\">J_ASSERT_BH</a>(<a class=\"id\" href=\"#bh2\">bh2</a>, <a class=\"id\" href=\"#buffer_revoked\">buffer_revoked</a>(<a class=\"id\" href=\"#bh2\">bh2</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh2\">bh2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We really ought not ever to revoke twice in a row without</span>", 
"<span class=\"comment\">           first having the revoke cancelled: it's illegal to free a</span>", 
"<span class=\"comment\">           block twice without allocating it in between! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#J_EXPECT_BH\">J_EXPECT_BH</a>(<a class=\"id\" href=\"#bh\">bh</a>, !<a class=\"id\" href=\"#buffer_revoked\">buffer_revoked</a>(<a class=\"id\" href=\"#bh\">bh</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"inconsistent data on disk\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh_in\">bh_in</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_revoked\">set_buffer_revoked</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_revokevalid\">set_buffer_revokevalid</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh_in\">bh_in</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh_in\">bh_in</a>, \"call journal_forget\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_forget\">journal_forget</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh_in\">bh_in</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call brelse\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(2, \"insert revoke for block %u, bh_in=%p\\n\", <a class=\"id\" href=\"#blocknr\">blocknr</a>, <a class=\"id\" href=\"#bh_in\">bh_in</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#insert_revoke_hash\">insert_revoke_hash</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#blocknr\">blocknr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh_in\">bh_in</a>, \"exit\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cancel an outstanding revoke.  For use only internally by the</span>", 
"<span class=\"comment\"> * journaling code (called from journal_get_write_access).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We trust buffer_revoked() on the buffer if the buffer is already</span>", 
"<span class=\"comment\"> * being journaled: if there is no revoke pending on the buffer, then we</span>", 
"<span class=\"comment\"> * don't do anything here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This would break if it were possible for a buffer to be revoked and</span>", 
"<span class=\"comment\"> * discarded, and then reallocated within the same transaction.  In such</span>", 
"<span class=\"comment\"> * a case we would have lost the revoked bit, but when we arrived here</span>", 
"<span class=\"comment\"> * the second time we would still have a pending revoke to cancel.  So,</span>", 
"<span class=\"comment\"> * do not trust the Revoked bit on buffers unless RevokeValid is also</span>", 
"<span class=\"comment\"> * set.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#journal_cancel_revoke\">journal_cancel_revoke</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *<a class=\"id\" href=\"#record\">record</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_cancel\">need_cancel</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#did_revoke\">did_revoke</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* akpm: debug */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"journal_head %p, cancelling revoke\\n\", <a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is the existing Revoke bit valid?  If so, we trust it, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only perform the full cancel if the revoke bit is set.  If</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not, we can't trust the revoke bit, and we need to do the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * full search for a revoke record. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_set_buffer_revokevalid\">test_set_buffer_revokevalid</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_cancel\">need_cancel</a> = <a class=\"id\" href=\"#test_clear_buffer_revoked\">test_clear_buffer_revoked</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_cancel\">need_cancel</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_revoked\">clear_buffer_revoked</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_cancel\">need_cancel</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a> = <a class=\"id\" href=\"#find_revoke_record\">find_revoke_record</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#record\">record</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"cancelled existing revoke on \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"blocknr %llu\\n\", (unsigned long long)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_lock\">j_revoke_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_lock\">j_revoke_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#revoke_record_cache\">revoke_record_cache</a>, <a class=\"id\" href=\"#record\">record</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#did_revoke\">did_revoke</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#JBD_EXPENSIVE_CHECKING\">JBD_EXPENSIVE_CHECKING</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* There better not be one left behind by now! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a> = <a class=\"id\" href=\"#find_revoke_record\">find_revoke_record</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#record\">record</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally, have we just cleared revoke on an unhashed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffer_head?  If so, we'd better make sure we clear the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * revoked status on any hashed alias too, otherwise the revoke</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state machine will get very upset later on. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_cancel\">need_cancel</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh2\">bh2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh2\">bh2</a> = <a class=\"id\" href=\"#__find_get_block\">__find_get_block</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh2\">bh2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh2\">bh2</a> != <a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_revoked\">clear_buffer_revoked</a>(<a class=\"id\" href=\"#bh2\">bh2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh2\">bh2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#did_revoke\">did_revoke</a>;", 
"}", 
"", 
"<span class=\"comment\">/* journal_switch_revoke table select j_revoke for next transaction</span>", 
"<span class=\"comment\"> * we do not want to suspend any processing until all revokes are</span>", 
"<span class=\"comment\"> * written -bzzz</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#journal_switch_revoke_table\">journal_switch_revoke_table</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[1];", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0];", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a>-><a class=\"id\" href=\"#hash_size\">hash_size</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write revoke records to the journal for all entries in the current</span>", 
"<span class=\"comment\"> * revoke hash, deleting the entries as we go.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#journal_write_revoke_records\">journal_write_revoke_records</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>, int <a class=\"id\" href=\"#write_op\">write_op</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#descriptor\">descriptor</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *<a class=\"id\" href=\"#record\">record</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd_revoke_table_s\">jbd_revoke_table_s</a> *<a class=\"id\" href=\"#revoke\">revoke</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#hash_list\">hash_list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#descriptor\">descriptor</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* select revoke table for committing transaction */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#revoke\">revoke</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0] ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[1] : <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke_table\">j_revoke_table</a>[0];", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#revoke\">revoke</a>-><a class=\"id\" href=\"#hash_size\">hash_size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash_list\">hash_list</a> = &amp;<a class=\"id\" href=\"#revoke\">revoke</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#hash_list\">hash_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a> = (struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash_list\">hash_list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_one_revoke_record\">write_one_revoke_record</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#transaction\">transaction</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#descriptor\">descriptor</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a>, <a class=\"id\" href=\"#write_op\">write_op</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#revoke_record_cache\">revoke_record_cache</a>, <a class=\"id\" href=\"#record\">record</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#descriptor\">descriptor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_descriptor\">flush_descriptor</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#descriptor\">descriptor</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#write_op\">write_op</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(1, \"Wrote %d revoke records\\n\", <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write out one revoke record.  We need to create a new descriptor</span>", 
"<span class=\"comment\"> * block if the old one is full or if we have not already created one.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#write_one_revoke_record\">write_one_revoke_record</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#journal_head\">journal_head</a> **<a class=\"id\" href=\"#descriptorp\">descriptorp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int *<a class=\"id\" href=\"#offsetp\">offsetp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *<a class=\"id\" href=\"#record\">record</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#write_op\">write_op</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#descriptor\">descriptor</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_header_t\">journal_header_t</a> *<a class=\"id\" href=\"#header\">header</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are already aborting, this all becomes a noop.  We</span>", 
"<span class=\"comment\">           still need to go round the loop in</span>", 
"<span class=\"comment\">           journal_write_revoke_records in order to free all of the</span>", 
"<span class=\"comment\">           revoke records: only the IO to the journal is omitted. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_journal_aborted\">is_journal_aborted</a>(<a class=\"id\" href=\"#journal\">journal</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#descriptor\">descriptor</a> = *<a class=\"id\" href=\"#descriptorp\">descriptorp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = *<a class=\"id\" href=\"#offsetp\">offsetp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure we have a descriptor with space left for the record */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#descriptor\">descriptor</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_blocksize\">j_blocksize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_descriptor\">flush_descriptor</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#descriptor\">descriptor</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#write_op\">write_op</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#descriptor\">descriptor</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#descriptor\">descriptor</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#descriptor\">descriptor</a> = <a class=\"id\" href=\"#journal_get_descriptor_buffer\">journal_get_descriptor_buffer</a>(<a class=\"id\" href=\"#journal\">journal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#descriptor\">descriptor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> = (<a class=\"id\" href=\"#journal_header_t\">journal_header_t</a> *) &amp;<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#descriptor\">descriptor</a>)-><a class=\"id\" href=\"#b_data\">b_data</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#h_magic\">h_magic</a>     = <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#JFS_MAGIC_NUMBER\">JFS_MAGIC_NUMBER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#h_blocktype\">h_blocktype</a> = <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#JFS_REVOKE_BLOCK\">JFS_REVOKE_BLOCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#h_sequence\">h_sequence</a>  = <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Record it so that we can wait for IO completion later */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#descriptor\">descriptor</a>, \"file as BJ_LogCtl\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_file_buffer\">journal_file_buffer</a>(<a class=\"id\" href=\"#descriptor\">descriptor</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#BJ_LogCtl\">BJ_LogCtl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = sizeof(<a class=\"id\" href=\"#journal_revoke_header_t\">journal_revoke_header_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#descriptorp\">descriptorp</a> = <a class=\"id\" href=\"#descriptor\">descriptor</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>* ((<a class=\"id\" href=\"#__be32\">__be32</a> *)(&amp;<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#descriptor\">descriptor</a>)-><a class=\"id\" href=\"#b_data\">b_data</a>[<a class=\"id\" href=\"#offset\">offset</a>])) =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#blocknr\">blocknr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += 4;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#offsetp\">offsetp</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flush a revoke descriptor out to the journal.  If we are aborting,</span>", 
"<span class=\"comment\"> * this is a noop; otherwise we are generating a buffer which needs to</span>", 
"<span class=\"comment\"> * be waited for during commit, so it has to go onto the appropriate</span>", 
"<span class=\"comment\"> * journal buffer list.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#flush_descriptor\">flush_descriptor</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#descriptor\">descriptor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#write_op\">write_op</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_revoke_header_t\">journal_revoke_header_t</a> *<a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#descriptor\">descriptor</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_journal_aborted\">is_journal_aborted</a>(<a class=\"id\" href=\"#journal\">journal</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> = (<a class=\"id\" href=\"#journal_revoke_header_t\">journal_revoke_header_t</a> *) <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#descriptor\">descriptor</a>)-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#r_count\">r_count</a> = <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_jwrite\">set_buffer_jwrite</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"write\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_dirty\">set_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_dirty_buffer\">write_dirty_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#write_op\">write_op</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Revoke support for recovery.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Recovery needs to be able to:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  record all revoke records, including the tid of the latest instance</span>", 
"<span class=\"comment\"> *  of each revoke in the journal</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  check whether a given block in a given transaction should be replayed</span>", 
"<span class=\"comment\"> *  (ie. has not been revoked by a revoke record in that or a subsequent</span>", 
"<span class=\"comment\"> *  transaction)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  empty the revoke table after recovery.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * First, setting revoke records.  We create a new revoke record for</span>", 
"<span class=\"comment\"> * every block ever revoked in the log as we scan it for recovery, and</span>", 
"<span class=\"comment\"> * we update the existing records if we find multiple revokes for a</span>", 
"<span class=\"comment\"> * single block.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#journal_set_revoke\">journal_set_revoke</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#blocknr\">blocknr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tid_t\">tid_t</a> <a class=\"id\" href=\"#sequence\">sequence</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *<a class=\"id\" href=\"#record\">record</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a> = <a class=\"id\" href=\"#find_revoke_record\">find_revoke_record</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#blocknr\">blocknr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#record\">record</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we have multiple occurrences, only record the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * latest sequence number in the hashed record */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tid_gt\">tid_gt</a>(<a class=\"id\" href=\"#sequence\">sequence</a>, <a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#sequence\">sequence</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#sequence\">sequence</a> = <a class=\"id\" href=\"#sequence\">sequence</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insert_revoke_hash\">insert_revoke_hash</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#blocknr\">blocknr</a>, <a class=\"id\" href=\"#sequence\">sequence</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test revoke records.  For a given block referenced in the log, has</span>", 
"<span class=\"comment\"> * that block been revoked?  A revoke record with a given transaction</span>", 
"<span class=\"comment\"> * sequence number revokes all blocks in that transaction and earlier</span>", 
"<span class=\"comment\"> * ones, but later transactions still need replayed.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#journal_test_revoke\">journal_test_revoke</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#blocknr\">blocknr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid_t\">tid_t</a> <a class=\"id\" href=\"#sequence\">sequence</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *<a class=\"id\" href=\"#record\">record</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a> = <a class=\"id\" href=\"#find_revoke_record\">find_revoke_record</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#blocknr\">blocknr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#record\">record</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tid_gt\">tid_gt</a>(<a class=\"id\" href=\"#sequence\">sequence</a>, <a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#sequence\">sequence</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Finally, once recovery is over, we need to clear the revoke table so</span>", 
"<span class=\"comment\"> * that it can be reused by the running filesystem.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#journal_clear_revoke\">journal_clear_revoke</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#hash_list\">hash_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a> *<a class=\"id\" href=\"#record\">record</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd_revoke_table_s\">jbd_revoke_table_s</a> *<a class=\"id\" href=\"#revoke\">revoke</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#revoke\">revoke</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_revoke\">j_revoke</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#revoke\">revoke</a>-><a class=\"id\" href=\"#hash_size\">hash_size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash_list\">hash_list</a> = &amp;<a class=\"id\" href=\"#revoke\">revoke</a>-><a class=\"id\" href=\"#hash_table\">hash_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#hash_list\">hash_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#record\">record</a> = (struct <a class=\"id\" href=\"#jbd_revoke_record_s\">jbd_revoke_record_s</a>*) <a class=\"id\" href=\"#hash_list\">hash_list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#record\">record</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#revoke_record_cache\">revoke_record_cache</a>, <a class=\"id\" href=\"#record\">record</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/d4/b92332cc77bf7df6731ad168982c417021eaf9.xr', __xr_tmp);
