var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_XEN_PAGE_H\">_ASM_X86_XEN_PAGE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_XEN_PAGE_H\">_ASM_X86_XEN_PAGE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pfn\">pfn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#xen\">xen</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#features\">features</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Xen machine address */</span>", 
"typedef struct <a class=\"id\" href=\"#xmaddr\">xmaddr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#maddr\">maddr</a>;", 
"} <a class=\"id\" href=\"#xmaddr_t\">xmaddr_t</a>;", 
"", 
"<span class=\"comment\">/* Xen pseudo-physical address */</span>", 
"typedef struct <a class=\"id\" href=\"#xpaddr\">xpaddr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"} <a class=\"id\" href=\"#xpaddr_t\">xpaddr_t</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XMADDR\">XMADDR</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#xmaddr_t\">xmaddr_t</a>) { .<a class=\"id\" href=\"#maddr\">maddr</a> = (<a class=\"id\" href=\"#x\">x</a>) })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XPADDR\">XPADDR</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#xpaddr_t\">xpaddr_t</a>) { .<a class=\"id\" href=\"#paddr\">paddr</a> = (<a class=\"id\" href=\"#x\">x</a>) })", 
"", 
"<span class=\"comment\">/**** MACHINE &lt;-&gt; PHYSICAL CONVERSION MACROS ****/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INVALID_P2M_ENTRY\">INVALID_P2M_ENTRY</a><span class=\"ts\"/>(~0UL)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FOREIGN_FRAME_BIT\">FOREIGN_FRAME_BIT</a><span class=\"ts\"/>(1UL<<31)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FOREIGN_FRAME\">FOREIGN_FRAME</a>(<a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#m\">m</a>) | <a class=\"id\" href=\"#FOREIGN_FRAME_BIT\">FOREIGN_FRAME_BIT</a>)", 
"", 
"<span class=\"comment\">/* Maximum amount of memory we can handle in a domain in pages */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_DOMAIN_PAGES\">MAX_DOMAIN_PAGES</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"    ((unsigned long)((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#CONFIG_XEN_MAX_DOMAIN_MEMORY\">CONFIG_XEN_MAX_DOMAIN_MEMORY</a> * 1024 * 1024 * 1024 / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>))", 
"", 
"", 
"extern unsigned long <a class=\"id\" href=\"#get_phys_to_machine\">get_phys_to_machine</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"extern void <a class=\"id\" href=\"#set_phys_to_machine\">set_phys_to_machine</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#mfn\">mfn</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#pfn_to_mfn\">pfn_to_mfn</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_feature\">xen_feature</a>(<a class=\"id\" href=\"#XENFEAT_auto_translated_physmap\">XENFEAT_auto_translated_physmap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_phys_to_machine\">get_phys_to_machine</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) &amp; ~<a class=\"id\" href=\"#FOREIGN_FRAME_BIT\">FOREIGN_FRAME_BIT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#phys_to_machine_mapping_valid\">phys_to_machine_mapping_valid</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_feature\">xen_feature</a>(<a class=\"id\" href=\"#XENFEAT_auto_translated_physmap\">XENFEAT_auto_translated_physmap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_phys_to_machine\">get_phys_to_machine</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) != <a class=\"id\" href=\"#INVALID_P2M_ENTRY\">INVALID_P2M_ENTRY</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#mfn_to_pfn\">mfn_to_pfn</a>(unsigned long <a class=\"id\" href=\"#mfn\">mfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_feature\">xen_feature</a>(<a class=\"id\" href=\"#XENFEAT_auto_translated_physmap\">XENFEAT_auto_translated_physmap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mfn\">mfn</a>;", 
"", 
"#if 0", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#mfn\">mfn</a> >> <a class=\"id\" href=\"#machine_to_phys_order\">machine_to_phys_order</a>) != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#max_mapnr\">max_mapnr</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The array access can fail (e.g., device space beyond end of RAM).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In such cases it doesn't matter what we return (we return garbage),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but we must handle the fault without crashing!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, &amp;<a class=\"id\" href=\"#machine_to_phys_mapping\">machine_to_phys_mapping</a>[<a class=\"id\" href=\"#mfn\">mfn</a>]);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#xmaddr_t\">xmaddr_t</a> <a class=\"id\" href=\"#phys_to_machine\">phys_to_machine</a>(<a class=\"id\" href=\"#xpaddr_t\">xpaddr_t</a> <a class=\"id\" href=\"#phys\">phys</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#phys\">phys</a>.<a class=\"id\" href=\"#paddr\">paddr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#XMADDR\">XMADDR</a>(<a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#pfn_to_mfn\">pfn_to_mfn</a>(<a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#phys\">phys</a>.<a class=\"id\" href=\"#paddr\">paddr</a>))) | <a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#xpaddr_t\">xpaddr_t</a> <a class=\"id\" href=\"#machine_to_phys\">machine_to_phys</a>(<a class=\"id\" href=\"#xmaddr_t\">xmaddr_t</a> <a class=\"id\" href=\"#machine\">machine</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#machine\">machine</a>.<a class=\"id\" href=\"#maddr\">maddr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#XPADDR\">XPADDR</a>(<a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#mfn_to_pfn\">mfn_to_pfn</a>(<a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#machine\">machine</a>.<a class=\"id\" href=\"#maddr\">maddr</a>))) | <a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We detect special mappings in one of two ways:</span>", 
"<span class=\"comment\"> *  1. If the MFN is an I/O page then Xen will set the m2p entry</span>", 
"<span class=\"comment\"> *     to be outside our maximum possible pseudophys range.</span>", 
"<span class=\"comment\"> *  2. If the MFN belongs to a different domain then we will certainly</span>", 
"<span class=\"comment\"> *     not have MFN in our p2m table. Conversely, if the page is ours,</span>", 
"<span class=\"comment\"> *     then we'll have p2m(m2p(MFN))==MFN.</span>", 
"<span class=\"comment\"> * If we detect a special mapping then it doesn't have a 'struct page'.</span>", 
"<span class=\"comment\"> * We force !pfn_valid() by returning an out-of-range pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NB. These checks require that, for any MFN that is not in our reservation,</span>", 
"<span class=\"comment\"> * there is no PFN such that p2m(PFN) == MFN. Otherwise we can get confused if</span>", 
"<span class=\"comment\"> * we are foreign-mapping the MFN, and the other domain as m2p(MFN) == PFN.</span>", 
"<span class=\"comment\"> * Yikes! Various places must poke in INVALID_P2M_ENTRY for safety.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NB2. When deliberately mapping foreign pages into the p2m table, you *must*</span>", 
"<span class=\"comment\"> *      use FOREIGN_FRAME(). This will cause pte_pfn() to choke on it, as we</span>", 
"<span class=\"comment\"> *      require. In all the cases we care about, the FOREIGN_FRAME bit is</span>", 
"<span class=\"comment\"> *      masked (e.g., pfn_to_mfn()) so behaviour there is correct.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#mfn_to_local_pfn\">mfn_to_local_pfn</a>(unsigned long <a class=\"id\" href=\"#mfn\">mfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#mfn_to_pfn\">mfn_to_pfn</a>(<a class=\"id\" href=\"#mfn\">mfn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_phys_to_machine\">get_phys_to_machine</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) != <a class=\"id\" href=\"#mfn\">mfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1; <span class=\"comment\">/* force !pfn_valid() */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"}", 
"", 
"<span class=\"comment\">/* VIRT &lt;-&gt; MACHINE conversion */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virt_to_machine\">virt_to_machine</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#phys_to_machine\">phys_to_machine</a>(<a class=\"id\" href=\"#XPADDR\">XPADDR</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#v\">v</a>))))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virt_to_pfn\">virt_to_pfn</a>(<a class=\"id\" href=\"#v\">v</a>)          (<a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#v\">v</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virt_to_mfn\">virt_to_mfn</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#pfn_to_mfn\">pfn_to_mfn</a>(<a class=\"id\" href=\"#virt_to_pfn\">virt_to_pfn</a>(<a class=\"id\" href=\"#v\">v</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mfn_to_virt\">mfn_to_virt</a>(<a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#mfn_to_pfn\">mfn_to_pfn</a>(<a class=\"id\" href=\"#m\">m</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#pte_mfn\">pte_mfn</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte\">pte</a> &amp; <a class=\"id\" href=\"#PTE_PFN_MASK\">PTE_PFN_MASK</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#mfn_pte\">mfn_pte</a>(unsigned long <a class=\"id\" href=\"#page_nr\">page_nr</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#pgprot\">pgprot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte\">pte</a> = ((<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a>)<a class=\"id\" href=\"#page_nr\">page_nr</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#massage_pgprot\">massage_pgprot</a>(<a class=\"id\" href=\"#pgprot\">pgprot</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#pte_val_ma\">pte_val_ma</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte\">pte</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#__pte_ma\">__pte_ma</a>(<a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#pte_t\">pte_t</a>) { .<a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#x\">x</a> };", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pmd_val_ma\">pmd_val_ma</a>(<a class=\"id\" href=\"#v\">v</a>) ((<a class=\"id\" href=\"#v\">v</a>).<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__PAGETABLE_PUD_FOLDED\">__PAGETABLE_PUD_FOLDED</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pud_val_ma\">pud_val_ma</a>(<a class=\"id\" href=\"#v\">v</a>) ((<a class=\"id\" href=\"#v\">v</a>).<a class=\"id\" href=\"#pgd\">pgd</a>.<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pud_val_ma\">pud_val_ma</a>(<a class=\"id\" href=\"#v\">v</a>) ((<a class=\"id\" href=\"#v\">v</a>).<a class=\"id\" href=\"#pud\">pud</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__pmd_ma\">__pmd_ma</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#pmd_t\">pmd_t</a>) { (<a class=\"id\" href=\"#x\">x</a>) } )", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pgd_val_ma\">pgd_val_ma</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>).<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"", 
"", 
"<a class=\"id\" href=\"#xmaddr_t\">xmaddr_t</a> <a class=\"id\" href=\"#arbitrary_virt_to_machine\">arbitrary_virt_to_machine</a>(void *<a class=\"id\" href=\"#address\">address</a>);", 
"unsigned long <a class=\"id\" href=\"#arbitrary_virt_to_mfn\">arbitrary_virt_to_mfn</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"void <a class=\"id\" href=\"#make_lowmem_page_readonly\">make_lowmem_page_readonly</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"void <a class=\"id\" href=\"#make_lowmem_page_readwrite\">make_lowmem_page_readwrite</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_XEN_PAGE_H */</span>", 
];
xr_frag_insert('l/d4/c0b8cfd533ebbe55750cc2206e6aca6386165e.xr', __xr_tmp);
