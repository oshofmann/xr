var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#eventcnt\">eventcnt</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ep_send_events\">ep_send_events</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#events\">events</a>, int <a class=\"id\" href=\"#maxevents\">maxevents</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ep_send_events_data\">ep_send_events_data</a> <a class=\"id\" href=\"#esed\">esed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#esed\">esed</a>.<a class=\"id\" href=\"#maxevents\">maxevents</a> = <a class=\"id\" href=\"#maxevents\">maxevents</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#esed\">esed</a>.<a class=\"id\" href=\"#events\">events</a> = <a class=\"id\" href=\"#events\">events</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ep_scan_ready_list\">ep_scan_ready_list</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#ep_send_events_proc\">ep_send_events_proc</a>, &amp;<a class=\"id\" href=\"#esed\">esed</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ep_poll\">ep_poll</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>, struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#events\">events</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#maxevents\">maxevents</a>, long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#eavail\">eavail</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#jtimeout\">jtimeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate the timeout by checking for the \"infinite\" value (-1)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the overflow condition. The passed timeout is in milliseconds,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that why (t * HZ) / 1000.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jtimeout\">jtimeout</a> = (<a class=\"id\" href=\"#timeout\">timeout</a> &lt; 0 || <a class=\"id\" href=\"#timeout\">timeout</a> >= <a class=\"id\" href=\"#EP_MAX_MSTIMEO\">EP_MAX_MSTIMEO</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a> : (<a class=\"id\" href=\"#timeout\">timeout</a> * <a class=\"id\" href=\"#HZ\">HZ</a> + 999) / 1000;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't have any available event to return to the caller.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to sleep here, and we will be wake up by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ep_poll_callback() when events will become available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_entry\">init_waitqueue_entry</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue_exclusive\">__add_wait_queue_exclusive</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We don't want to sleep if the ep_poll_callback() sends us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a wakeup in between. That's why we set the task state</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to TASK_INTERRUPTIBLE before doing the checks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>) || !<a class=\"id\" href=\"#jtimeout\">jtimeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jtimeout\">jtimeout</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#jtimeout\">jtimeout</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Is it worth to try to dig for events ? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eavail\">eavail</a> = !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>) || <a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#ovflist\">ovflist</a> != <a class=\"id\" href=\"#EP_UNACTIVE_PTR\">EP_UNACTIVE_PTR</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to transfer events to user space. In case we get 0 events and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there's still timeout left over, we go trying again in search of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * more luck.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a> && <a class=\"id\" href=\"#eavail\">eavail</a> &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#ep_send_events\">ep_send_events</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#events\">events</a>, <a class=\"id\" href=\"#maxevents\">maxevents</a>)) && <a class=\"id\" href=\"#jtimeout\">jtimeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Open an eventpoll file descriptor.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#epoll_create1\">epoll_create1</a>, int, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the EPOLL_* constant for consistency.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#EPOLL_CLOEXEC\">EPOLL_CLOEXEC</a> != <a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#EPOLL_CLOEXEC\">EPOLL_CLOEXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Create the internal data structure (\"struct eventpoll\").</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ep_alloc\">ep_alloc</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Creates all the items needed to setup an eventpoll file. That is,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a file structure and a free file descriptor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#anon_inode_getfd\">anon_inode_getfd</a>(\"[eventpoll]\", &amp;<a class=\"id\" href=\"#eventpoll_fops\">eventpoll_fops</a>, <a class=\"id\" href=\"#ep\">ep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#O_RDWR\">O_RDWR</a> | (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_free\">ep_free</a>(<a class=\"id\" href=\"#ep\">ep</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#epoll_create\">epoll_create</a>, int, <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_epoll_create1\">sys_epoll_create1</a>(0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following function implements the controller interface for</span>", 
"<span class=\"comment\"> * the eventpoll file that enables the insertion/removal/change of</span>", 
"<span class=\"comment\"> * file descriptors inside the interest set.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE4\">SYSCALL_DEFINE4</a>(<a class=\"id\" href=\"#epoll_ctl\">epoll_ctl</a>, int, <a class=\"id\" href=\"#epfd\">epfd</a>, int, <a class=\"id\" href=\"#op\">op</a>, int, <a class=\"id\" href=\"#fd\">fd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, *<a class=\"id\" href=\"#tfile\">tfile</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> <a class=\"id\" href=\"#epds\">epds</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ep_op_has_event\">ep_op_has_event</a>(<a class=\"id\" href=\"#op\">op</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#epds\">epds</a>, <a class=\"id\" href=\"#event\">event</a>, sizeof(struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the \"struct file *\" for the eventpoll file */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#epfd\">epfd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the \"struct file *\" for the target file */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tfile\">tfile</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tfile\">tfile</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_fput\">error_fput</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The target file descriptor must support poll */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tfile\">tfile</a>-><a class=\"id\" href=\"#f_op\">f_op</a> || !<a class=\"id\" href=\"#tfile\">tfile</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#poll\">poll</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_tgt_fput\">error_tgt_fput</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have to check that the file structure underneath the file descriptor</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the user passed to us _is_ an eventpoll file. And also we do not permit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * adding an epoll file descriptor inside itself.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a> == <a class=\"id\" href=\"#tfile\">tfile</a> || !<a class=\"id\" href=\"#is_file_epoll\">is_file_epoll</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_tgt_fput\">error_tgt_fput</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point it is safe to assume that the \"private_data\" contains</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our own data structure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#mtx\">mtx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to lookup the file inside our RB tree, Since we grabbed \"mtx\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * above, we can be sure to be able to use the item looked up by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ep_find() till we release the mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#ep_find\">ep_find</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#tfile\">tfile</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#op\">op</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EPOLL_CTL_ADD\">EPOLL_CTL_ADD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#epi\">epi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epds\">epds</a>.<a class=\"id\" href=\"#events\">events</a> |= <a class=\"id\" href=\"#POLLERR\">POLLERR</a> | <a class=\"id\" href=\"#POLLHUP\">POLLHUP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ep_insert\">ep_insert</a>(<a class=\"id\" href=\"#ep\">ep</a>, &amp;<a class=\"id\" href=\"#epds\">epds</a>, <a class=\"id\" href=\"#tfile\">tfile</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EPOLL_CTL_DEL\">EPOLL_CTL_DEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#epi\">epi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ep_remove\">ep_remove</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#epi\">epi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EPOLL_CTL_MOD\">EPOLL_CTL_MOD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#epi\">epi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epds\">epds</a>.<a class=\"id\" href=\"#events\">events</a> |= <a class=\"id\" href=\"#POLLERR\">POLLERR</a> | <a class=\"id\" href=\"#POLLHUP\">POLLHUP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ep_modify\">ep_modify</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#epi\">epi</a>, &amp;<a class=\"id\" href=\"#epds\">epds</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#mtx\">mtx</a>);", 
"", 
"<a class=\"id\" href=\"#error_tgt_fput\">error_tgt_fput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#tfile\">tfile</a>);", 
"<a class=\"id\" href=\"#error_fput\">error_fput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#error_return\">error_return</a>:", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implement the event wait interface for the eventpoll file. It is the kernel</span>", 
"<span class=\"comment\"> * part of the user space epoll_wait(2).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE4\">SYSCALL_DEFINE4</a>(<a class=\"id\" href=\"#epoll_wait\">epoll_wait</a>, int, <a class=\"id\" href=\"#epfd\">epfd</a>, struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#events\">events</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int, <a class=\"id\" href=\"#maxevents\">maxevents</a>, int, <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The maximum number of event must be greater than zero */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxevents\">maxevents</a> <= 0 || <a class=\"id\" href=\"#maxevents\">maxevents</a> &gt; <a class=\"id\" href=\"#EP_MAX_EVENTS\">EP_MAX_EVENTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Verify that the area passed by the user is writeable */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#events\">events</a>, <a class=\"id\" href=\"#maxevents\">maxevents</a> * sizeof(struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the \"struct file *\" for the eventpoll file */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#epfd\">epfd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have to check that the file structure underneath the fd</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the user passed to us _is_ an eventpoll file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_file_epoll\">is_file_epoll</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_fput\">error_fput</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point it is safe to assume that the \"private_data\" contains</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our own data structure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Time to fish for events ... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ep_poll\">ep_poll</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#events\">events</a>, <a class=\"id\" href=\"#maxevents\">maxevents</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"<a class=\"id\" href=\"#error_fput\">error_fput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#error_return\">error_return</a>:", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#HAVE_SET_RESTORE_SIGMASK\">HAVE_SET_RESTORE_SIGMASK</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implement the event wait interface for the eventpoll file. It is the kernel</span>", 
"<span class=\"comment\"> * part of the user space epoll_pwait(2).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE6\">SYSCALL_DEFINE6</a>(<a class=\"id\" href=\"#epoll_pwait\">epoll_pwait</a>, int, <a class=\"id\" href=\"#epfd\">epfd</a>, struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#events\">events</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int, <a class=\"id\" href=\"#maxevents\">maxevents</a>, int, <a class=\"id\" href=\"#timeout\">timeout</a>, const <a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#sigmask\">sigmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#sigsetsize\">sigsetsize</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#ksigmask\">ksigmask</a>, <a class=\"id\" href=\"#sigsaved\">sigsaved</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the caller wants a certain signal mask to be set during the wait,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we apply it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sigmask\">sigmask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sigsetsize\">sigsetsize</a> != sizeof(<a class=\"id\" href=\"#sigset_t\">sigset_t</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#ksigmask\">ksigmask</a>, <a class=\"id\" href=\"#sigmask\">sigmask</a>, sizeof(<a class=\"id\" href=\"#ksigmask\">ksigmask</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigdelsetmask\">sigdelsetmask</a>(&amp;<a class=\"id\" href=\"#ksigmask\">ksigmask</a>, <a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>) | <a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGSTOP\">SIGSTOP</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigprocmask\">sigprocmask</a>(<a class=\"id\" href=\"#SIG_SETMASK\">SIG_SETMASK</a>, &amp;<a class=\"id\" href=\"#ksigmask\">ksigmask</a>, &amp;<a class=\"id\" href=\"#sigsaved\">sigsaved</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sys_epoll_wait\">sys_epoll_wait</a>(<a class=\"id\" href=\"#epfd\">epfd</a>, <a class=\"id\" href=\"#events\">events</a>, <a class=\"id\" href=\"#maxevents\">maxevents</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we changed the signal mask, we need to restore the original one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case we've got a signal while waiting, we do not restore the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * signal mask yet, and we allow do_signal() to deliver the signal on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the way back to userspace, before the signal mask is restored.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sigmask\">sigmask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EINTR\">EINTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#saved_sigmask\">saved_sigmask</a>, &amp;<a class=\"id\" href=\"#sigsaved\">sigsaved</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#sigsaved\">sigsaved</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_restore_sigmask\">set_restore_sigmask</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigprocmask\">sigprocmask</a>(<a class=\"id\" href=\"#SIG_SETMASK\">SIG_SETMASK</a>, &amp;<a class=\"id\" href=\"#sigsaved\">sigsaved</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* HAVE_SET_RESTORE_SIGMASK */</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#eventpoll_init\">eventpoll_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> <a class=\"id\" href=\"#si\">si</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si_meminfo\">si_meminfo</a>(&amp;<a class=\"id\" href=\"#si\">si</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allows top 4% of lomem to be allocated for epoll watches (per user).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_user_watches\">max_user_watches</a> = (((<a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#totalram\">totalram</a> - <a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#totalhigh\">totalhigh</a>) / 25) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EP_ITEM_COST\">EP_ITEM_COST</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the structure used to perform safe poll wait head wake ups */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep_nested_calls_init\">ep_nested_calls_init</a>(&amp;<a class=\"id\" href=\"#poll_safewake_ncalls\">poll_safewake_ncalls</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the structure used to perform file's f_op-&gt;poll() calls */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep_nested_calls_init\">ep_nested_calls_init</a>(&amp;<a class=\"id\" href=\"#poll_readywalk_ncalls\">poll_readywalk_ncalls</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocates slab cache used to allocate \"struct epitem\" items */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#epi_cache\">epi_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"eventpoll_epi\", sizeof(struct <a class=\"id\" href=\"#epitem\">epitem</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a> | <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocates slab cache used to allocate \"struct eppoll_entry\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwq_cache\">pwq_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"eventpoll_pwq\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#eppoll_entry\">eppoll_entry</a>), 0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#eventpoll_init\">eventpoll_init</a>);", 
];
xr_frag_insert('l/d5/2ba666645c56300e597872af33fa052480d978.xr', __xr_tmp);
