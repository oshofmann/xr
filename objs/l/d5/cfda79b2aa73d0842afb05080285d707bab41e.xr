var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Access kernel memory without faulting.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * probe_kernel_read(): safely attempt to read from a location</span>", 
"<span class=\"comment\"> * @dst: pointer to the buffer that shall take the data</span>", 
"<span class=\"comment\"> * @src: address to read from</span>", 
"<span class=\"comment\"> * @size: size of the data chunk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Safely read from address @src to the buffer at @dst.  If a kernel fault</span>", 
"<span class=\"comment\"> * happens, handle that and return -EFAULT.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"long <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#probe_kernel_read\">probe_kernel_read</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"    <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#alias\">alias</a>(\"__probe_kernel_read\")));", 
"", 
"long <a class=\"id\" href=\"#__probe_kernel_read\">__probe_kernel_read</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_disable\">pagefault_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__copy_from_user_inatomic\">__copy_from_user_inatomic</a>(<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__force\">__force</a> const void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_enable\">pagefault_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#probe_kernel_read\">probe_kernel_read</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * probe_kernel_write(): safely attempt to write to a location</span>", 
"<span class=\"comment\"> * @dst: address to write to</span>", 
"<span class=\"comment\"> * @src: pointer to the data that shall be written</span>", 
"<span class=\"comment\"> * @size: size of the data chunk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Safely write to address @dst from the buffer at @src.  If a kernel fault</span>", 
"<span class=\"comment\"> * happens, handle that and return -EFAULT.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#probe_kernel_write\">probe_kernel_write</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"    <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#alias\">alias</a>(\"__probe_kernel_write\")));", 
"", 
"long <a class=\"id\" href=\"#__probe_kernel_write\">__probe_kernel_write</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_disable\">pagefault_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__copy_to_user_inatomic\">__copy_to_user_inatomic</a>((<a class=\"id\" href=\"#__force\">__force</a> void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_enable\">pagefault_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#probe_kernel_write\">probe_kernel_write</a>);", 
];
xr_frag_insert('l/d5/cfda79b2aa73d0842afb05080285d707bab41e.xr', __xr_tmp);
