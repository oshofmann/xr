var __xr_tmp = [
"<span class=\"ts\"/><span class=\"comment\">/* Skip if already in use */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i2c_check_addr_busy\">i2c_check_addr_busy</a>(<a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure there is something at this address */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i2c_default_probe\">i2c_default_probe</a>(<a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally call the custom detection function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#info\">info</a>, 0, sizeof(struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#detect\">detect</a>(<a class=\"id\" href=\"#temp_client\">temp_client</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* -ENODEV is returned if the detection fails. We catch it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   here as this isn't an error. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#ENODEV\">ENODEV</a> ? 0 : <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Consistency check */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#type\">type</a>[0] == '\\0') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s detection function provided \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"no name for 0x%x\\n\", <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Detection succeeded, instantiate the device */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Creating %s at 0x%02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_new_device\">i2c_new_device</a>(<a class=\"id\" href=\"#adapter\">adapter</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#detected\">detected</a>, &amp;<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#clients\">clients</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Failed creating %s at 0x%02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_detect\">i2c_detect</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>, struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned short *<a class=\"id\" href=\"#address_list\">address_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#temp_client\">temp_client</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#adap_id\">adap_id</a> = <a class=\"id\" href=\"#i2c_adapter_id\">i2c_adapter_id</a>(<a class=\"id\" href=\"#adapter\">adapter</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address_list\">address_list</a> = <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#address_list\">address_list</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#detect\">detect</a> || !<a class=\"id\" href=\"#address_list\">address_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up a temporary client to help detect callback */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#temp_client\">temp_client</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#temp_client\">temp_client</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#temp_client\">temp_client</a>-><a class=\"id\" href=\"#adapter\">adapter</a> = <a class=\"id\" href=\"#adapter\">adapter</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Stop here if the classes do not match */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#class\">class</a> &amp; <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#class\">class</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_free\">exit_free</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#address_list\">address_list</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#I2C_CLIENT_END\">I2C_CLIENT_END</a>; <a class=\"id\" href=\"#i\">i</a> += 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"found normal entry for adapter %d, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"addr 0x%02x\\n\", <a class=\"id\" href=\"#adap_id\">adap_id</a>, <a class=\"id\" href=\"#address_list\">address_list</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp_client\">temp_client</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#address_list\">address_list</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#i2c_detect_address\">i2c_detect_address</a>(<a class=\"id\" href=\"#temp_client\">temp_client</a>, <a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_free\">exit_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#exit_free\">exit_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#temp_client\">temp_client</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#i2c_probe_func_quick_read\">i2c_probe_func_quick_read</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, unsigned short <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0, <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#I2C_SMBUS_QUICK\">I2C_SMBUS_QUICK</a>, <a class=\"id\" href=\"#NULL\">NULL</a>) >= 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_probe_func_quick_read\">i2c_probe_func_quick_read</a>);", 
"", 
"struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *", 
"<a class=\"id\" href=\"#i2c_new_probed_device\">i2c_new_probed_device</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned short const *<a class=\"id\" href=\"#addr_list\">addr_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int (*<a class=\"id\" href=\"#probe\">probe</a>)(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *, unsigned short <a class=\"id\" href=\"#addr\">addr</a>))", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probe\">probe</a> = <a class=\"id\" href=\"#i2c_default_probe\">i2c_default_probe</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#addr_list\">addr_list</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#I2C_CLIENT_END\">I2C_CLIENT_END</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check address validity */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i2c_check_addr_validity\">i2c_check_addr_validity</a>(<a class=\"id\" href=\"#addr_list\">addr_list</a>[<a class=\"id\" href=\"#i\">i</a>]) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Invalid 7-bit address \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"0x%02x\\n\", <a class=\"id\" href=\"#addr_list\">addr_list</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check address availability */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i2c_check_addr_busy\">i2c_check_addr_busy</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#addr_list\">addr_list</a>[<a class=\"id\" href=\"#i\">i</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Address 0x%02x already in \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"use, not probing\\n\", <a class=\"id\" href=\"#addr_list\">addr_list</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Test address responsiveness */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#probe\">probe</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#addr_list\">addr_list</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr_list\">addr_list</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#I2C_CLIENT_END\">I2C_CLIENT_END</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Probing failed, no device found\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr_list\">addr_list</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_new_device\">i2c_new_device</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_new_probed_device\">i2c_new_probed_device</a>);", 
"", 
"struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#i2c_get_adapter\">i2c_get_adapter</a>(int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adapter\">adapter</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adapter\">adapter</a> && !<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adapter\">adapter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#adapter\">adapter</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_get_adapter\">i2c_get_adapter</a>);", 
"", 
"void <a class=\"id\" href=\"#i2c_put_adapter\">i2c_put_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_put_adapter\">i2c_put_adapter</a>);", 
"", 
"<span class=\"comment\">/* The SMBus parts */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#POLY\">POLY</a>    (0x1070U << 3)", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#crc8\">crc8</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 8; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> &amp; 0x8000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a> ^ <a class=\"id\" href=\"#POLY\">POLY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a> << 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u8\">u8</a>)(<a class=\"id\" href=\"#data\">data</a> >> 8);", 
"}", 
"", 
"<span class=\"comment\">/* Incremental CRC8 over count bytes in the array pointed to by p */</span>", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#i2c_smbus_pec\">i2c_smbus_pec</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#crc\">crc</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#crc8\">crc8</a>((<a class=\"id\" href=\"#crc\">crc</a> ^ <a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#i\">i</a>]) << 8);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Assume a 7-bit address, which is reasonable for SMBus */</span>", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#i2c_smbus_msg_pec\">i2c_smbus_msg_pec</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pec\">pec</a>, struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* The address will be sent first */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#addr\">addr</a> << 1) | !!(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pec\">pec</a> = <a class=\"id\" href=\"#i2c_smbus_pec\">i2c_smbus_pec</a>(<a class=\"id\" href=\"#pec\">pec</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The data buffer follows */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_smbus_pec\">i2c_smbus_pec</a>(<a class=\"id\" href=\"#pec\">pec</a>, <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Used for write only transactions */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#i2c_smbus_add_pec\">i2c_smbus_add_pec</a>(struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a>] = <a class=\"id\" href=\"#i2c_smbus_msg_pec\">i2c_smbus_msg_pec</a>(0, <a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a>++;", 
"}", 
"", 
"<span class=\"comment\">/* Return &lt;0 on CRC error</span>", 
"<span class=\"comment\">   If there was a write before this read (most cases) we need to take the</span>", 
"<span class=\"comment\">   partial CRC from the write part into account.</span>", 
"<span class=\"comment\">   Note that this function does modify the message (we need to decrease the</span>", 
"<span class=\"comment\">   message length to hide the CRC byte from the caller). */</span>", 
"static int <a class=\"id\" href=\"#i2c_smbus_check_pec\">i2c_smbus_check_pec</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cpec\">cpec</a>, struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#rpec\">rpec</a> = <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#buf\">buf</a>[--<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpec\">cpec</a> = <a class=\"id\" href=\"#i2c_smbus_msg_pec\">i2c_smbus_msg_pec</a>(<a class=\"id\" href=\"#cpec\">cpec</a>, <a class=\"id\" href=\"#msg\">msg</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rpec\">rpec</a> != <a class=\"id\" href=\"#cpec\">cpec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"i2c-core: Bad PEC 0x%02x vs. 0x%02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpec\">rpec</a>, <a class=\"id\" href=\"#cpec\">cpec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADMSG\">EBADMSG</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_read_byte - SMBus \"receive byte\" protocol</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes the SMBus \"receive byte\" protocol, returning negative errno</span>", 
"<span class=\"comment\"> * else the byte received from the device.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_byte\">i2c_smbus_read_byte</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_BYTE\">I2C_SMBUS_BYTE</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a> &lt; 0) ? <a class=\"id\" href=\"#status\">status</a> : <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#byte\">byte</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_read_byte\">i2c_smbus_read_byte</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_write_byte - SMBus \"send byte\" protocol</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @value: Byte to be sent</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes the SMBus \"send byte\" protocol, returning negative errno</span>", 
"<span class=\"comment\"> * else zero on success.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_byte\">i2c_smbus_write_byte</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/>                      <a class=\"id\" href=\"#I2C_SMBUS_WRITE\">I2C_SMBUS_WRITE</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#I2C_SMBUS_BYTE\">I2C_SMBUS_BYTE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_write_byte\">i2c_smbus_write_byte</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_read_byte_data - SMBus \"read byte\" protocol</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @command: Byte interpreted by slave</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes the SMBus \"read byte\" protocol, returning negative errno</span>", 
"<span class=\"comment\"> * else a data byte received from the device.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_byte_data\">i2c_smbus_read_byte_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_BYTE_DATA\">I2C_SMBUS_BYTE_DATA</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a> &lt; 0) ? <a class=\"id\" href=\"#status\">status</a> : <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#byte\">byte</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_read_byte_data\">i2c_smbus_read_byte_data</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_write_byte_data - SMBus \"write byte\" protocol</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @command: Byte interpreted by slave</span>", 
"<span class=\"comment\"> * @value: Byte being written</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes the SMBus \"write byte\" protocol, returning negative errno</span>", 
"<span class=\"comment\"> * else zero on success.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_byte_data\">i2c_smbus_write_byte_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#byte\">byte</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#I2C_SMBUS_WRITE\">I2C_SMBUS_WRITE</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#I2C_SMBUS_BYTE_DATA\">I2C_SMBUS_BYTE_DATA</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_write_byte_data\">i2c_smbus_write_byte_data</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_read_word_data - SMBus \"read word\" protocol</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @command: Byte interpreted by slave</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes the SMBus \"read word\" protocol, returning negative errno</span>", 
"<span class=\"comment\"> * else a 16-bit unsigned \"word\" received from the device.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_word_data\">i2c_smbus_read_word_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_WORD_DATA\">I2C_SMBUS_WORD_DATA</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a> &lt; 0) ? <a class=\"id\" href=\"#status\">status</a> : <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#word\">word</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_read_word_data\">i2c_smbus_read_word_data</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_write_word_data - SMBus \"write word\" protocol</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @command: Byte interpreted by slave</span>", 
"<span class=\"comment\"> * @value: 16-bit \"word\" being written</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes the SMBus \"write word\" protocol, returning negative errno</span>", 
"<span class=\"comment\"> * else zero on success.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_word_data\">i2c_smbus_write_word_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#word\">word</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#I2C_SMBUS_WRITE\">I2C_SMBUS_WRITE</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#I2C_SMBUS_WORD_DATA\">I2C_SMBUS_WORD_DATA</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_write_word_data\">i2c_smbus_write_word_data</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_process_call - SMBus \"process call\" protocol</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @command: Byte interpreted by slave</span>", 
"<span class=\"comment\"> * @value: 16-bit \"word\" being written</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes the SMBus \"process call\" protocol, returning negative errno</span>", 
"<span class=\"comment\"> * else a 16-bit unsigned \"word\" received from the device.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_process_call\">i2c_smbus_process_call</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#word\">word</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_WRITE\">I2C_SMBUS_WRITE</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_PROC_CALL\">I2C_SMBUS_PROC_CALL</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a> &lt; 0) ? <a class=\"id\" href=\"#status\">status</a> : <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#word\">word</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_process_call\">i2c_smbus_process_call</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_read_block_data - SMBus \"block read\" protocol</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @command: Byte interpreted by slave</span>", 
"<span class=\"comment\"> * @values: Byte array into which data will be read; big enough to hold</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the data returned by the slave.  SMBus allows at most 32 bytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes the SMBus \"block read\" protocol, returning negative errno</span>", 
"<span class=\"comment\"> * else the number of data bytes in the slave's response.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that using this function requires that the client's adapter support</span>", 
"<span class=\"comment\"> * the I2C_FUNC_SMBUS_READ_BLOCK_DATA functionality.  Not all adapter drivers</span>", 
"<span class=\"comment\"> * support this; its emulation through I2C messaging relies on a specific</span>", 
"<span class=\"comment\"> * mechanism (I2C_M_RECV_LEN) which may not be implemented.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_block_data\">i2c_smbus_read_block_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#values\">values</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_BLOCK_DATA\">I2C_SMBUS_BLOCK_DATA</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#values\">values</a>, &amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[1], <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[0]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[0];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_read_block_data\">i2c_smbus_read_block_data</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_write_block_data - SMBus \"block write\" protocol</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @command: Byte interpreted by slave</span>", 
"<span class=\"comment\"> * @length: Size of data block; SMBus allows at most 32 bytes</span>", 
"<span class=\"comment\"> * @values: Byte array which will be written.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes the SMBus \"block write\" protocol, returning negative errno</span>", 
"<span class=\"comment\"> * else zero on success.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_block_data\">i2c_smbus_write_block_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#length\">length</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#values\">values</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[0] = <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[1], <a class=\"id\" href=\"#values\">values</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#I2C_SMBUS_WRITE\">I2C_SMBUS_WRITE</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_DATA\">I2C_SMBUS_BLOCK_DATA</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_write_block_data\">i2c_smbus_write_block_data</a>);", 
"", 
"<span class=\"comment\">/* Returns the number of read bytes */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_i2c_block_data\">i2c_smbus_read_i2c_block_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#values\">values</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[0] = <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_SMBUS_I2C_BLOCK_DATA\">I2C_SMBUS_I2C_BLOCK_DATA</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#values\">values</a>, &amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[1], <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[0]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[0];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_read_i2c_block_data\">i2c_smbus_read_i2c_block_data</a>);", 
"", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_i2c_block_data\">i2c_smbus_write_i2c_block_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#length\">length</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#values\">values</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a>[0] = <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block\">block</a> + 1, <a class=\"id\" href=\"#values\">values</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#I2C_SMBUS_WRITE\">I2C_SMBUS_WRITE</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#I2C_SMBUS_I2C_BLOCK_DATA\">I2C_SMBUS_I2C_BLOCK_DATA</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_write_i2c_block_data\">i2c_smbus_write_i2c_block_data</a>);", 
"", 
"<span class=\"comment\">/* Simulate a SMBus command using the i2c protocol</span>", 
"<span class=\"comment\">   No checking of parameters is done!  */</span>", 
"static <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_xfer_emulated\">i2c_smbus_xfer_emulated</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned short <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char <a class=\"id\" href=\"#read_write\">read_write</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* So we need to generate a series of msgs. In the case of writing, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  need to use only one message; when reading, we need two. We initialize</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  most things with sane defaults, to keep the code below somewhat</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  simpler. */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[<a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a>+3];", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#msgbuf1\">msgbuf1</a>[<a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a>+2];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#read_write\">read_write</a> == <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a> ? 2 : 1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> <a class=\"id\" href=\"#msg\">msg</a>[2] = { { <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#flags\">flags</a>, 1, <a class=\"id\" href=\"#msgbuf0\">msgbuf0</a> },", 
"<span class=\"ts\"/>                          { <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a>, 0, <a class=\"id\" href=\"#msgbuf1\">msgbuf1</a> }", 
"<span class=\"ts\"/>                        };", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#partial_pec\">partial_pec</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[0] = <a class=\"id\" href=\"#command\">command</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_QUICK\">I2C_SMBUS_QUICK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Special case: The read/write field is used as data */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a> | (<a class=\"id\" href=\"#read_write\">read_write</a> == <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a> : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_BYTE\">I2C_SMBUS_BYTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#read_write\">read_write</a> == <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Special case: only a read! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a> | <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_BYTE_DATA\">I2C_SMBUS_BYTE_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#read_write\">read_write</a> == <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1].<a class=\"id\" href=\"#len\">len</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[1] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#byte\">byte</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_WORD_DATA\">I2C_SMBUS_WORD_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#read_write\">read_write</a> == <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1].<a class=\"id\" href=\"#len\">len</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[1] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#word\">word</a> &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[2] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#word\">word</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_PROC_CALL\">I2C_SMBUS_PROC_CALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = 2; <span class=\"comment\">/* Special case */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_write\">read_write</a> = <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1].<a class=\"id\" href=\"#len\">len</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[1] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#word\">word</a> &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[2] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#word\">word</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_DATA\">I2C_SMBUS_BLOCK_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#read_write\">read_write</a> == <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#I2C_M_RECV_LEN\">I2C_M_RECV_LEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1].<a class=\"id\" href=\"#len\">len</a> = 1; <span class=\"comment\">/* block length will be added by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   the underlying bus driver */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0] + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a> + 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Invalid block write size %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[<a class=\"id\" href=\"#i\">i</a>-1];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_PROC_CALL\">I2C_SMBUS_BLOCK_PROC_CALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = 2; <span class=\"comment\">/* Another special case */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_write\">read_write</a> = <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0] &gt; <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Invalid block write size %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0] + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[<a class=\"id\" href=\"#i\">i</a>-1];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#I2C_M_RECV_LEN\">I2C_M_RECV_LEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1].<a class=\"id\" href=\"#len\">len</a> = 1; <span class=\"comment\">/* block length will be added by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   the underlying bus driver */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_I2C_BLOCK_DATA\">I2C_SMBUS_I2C_BLOCK_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#read_write\">read_write</a> == <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0] + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a> + 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Invalid block write size %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Unsupported transaction %d\\n\", <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_CLIENT_PEC\">I2C_CLIENT_PEC</a>) && <a class=\"id\" href=\"#size\">size</a> != <a class=\"id\" href=\"#I2C_SMBUS_QUICK\">I2C_SMBUS_QUICK</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      && <a class=\"id\" href=\"#size\">size</a> != <a class=\"id\" href=\"#I2C_SMBUS_I2C_BLOCK_DATA\">I2C_SMBUS_I2C_BLOCK_DATA</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Compute PEC if first message is a write */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#msg\">msg</a>[0].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> == 1) <span class=\"comment\">/* Write only */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_smbus_add_pec\">i2c_smbus_add_pec</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else <span class=\"comment\">/* Write followed by read */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial_pec\">partial_pec</a> = <a class=\"id\" href=\"#i2c_smbus_msg_pec\">i2c_smbus_msg_pec</a>(0, &amp;<a class=\"id\" href=\"#msg\">msg</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ask for PEC if last message is a read */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#num\">num</a>-1].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#num\">num</a>-1].<a class=\"id\" href=\"#len\">len</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_transfer\">i2c_transfer</a>(<a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check PEC if last message is a read */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> && (<a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#num\">num</a>-1].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_smbus_check_pec\">i2c_smbus_check_pec</a>(<a class=\"id\" href=\"#partial_pec\">partial_pec</a>, &amp;<a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#num\">num</a>-1]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_write\">read_write</a> == <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_BYTE\">I2C_SMBUS_BYTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#byte\">byte</a> = <a class=\"id\" href=\"#msgbuf0\">msgbuf0</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_BYTE_DATA\">I2C_SMBUS_BYTE_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#byte\">byte</a> = <a class=\"id\" href=\"#msgbuf1\">msgbuf1</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_WORD_DATA\">I2C_SMBUS_WORD_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_PROC_CALL\">I2C_SMBUS_PROC_CALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#word\">word</a> = <a class=\"id\" href=\"#msgbuf1\">msgbuf1</a>[0] | (<a class=\"id\" href=\"#msgbuf1\">msgbuf1</a>[1] << 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_I2C_BLOCK_DATA\">I2C_SMBUS_I2C_BLOCK_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[0]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[<a class=\"id\" href=\"#i\">i</a>+1] = <a class=\"id\" href=\"#msgbuf1\">msgbuf1</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_DATA\">I2C_SMBUS_BLOCK_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_PROC_CALL\">I2C_SMBUS_BLOCK_PROC_CALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#msgbuf1\">msgbuf1</a>[0] + 1; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block\">block</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#msgbuf1\">msgbuf1</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_smbus_xfer - execute SMBus protocol operations</span>", 
"<span class=\"comment\"> * @adapter: Handle to I2C bus</span>", 
"<span class=\"comment\"> * @addr: Address of SMBus slave on that bus</span>", 
"<span class=\"comment\"> * @flags: I2C_CLIENT_* flags (usually zero or I2C_CLIENT_PEC)</span>", 
"<span class=\"comment\"> * @read_write: I2C_SMBUS_READ or I2C_SMBUS_WRITE</span>", 
"<span class=\"comment\"> * @command: Byte interpreted by slave, for protocols which use such bytes</span>", 
"<span class=\"comment\"> * @protocol: SMBus protocol operation to execute, such as I2C_SMBUS_PROC_CALL</span>", 
"<span class=\"comment\"> * @data: Data to be read or written</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This executes an SMBus protocol operation, and returns a negative</span>", 
"<span class=\"comment\"> * errno code else zero on success.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#addr\">addr</a>, unsigned short <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   char <a class=\"id\" href=\"#read_write\">read_write</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, int <a class=\"id\" href=\"#protocol\">protocol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#orig_jiffies\">orig_jiffies</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#try\">try</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= <a class=\"id\" href=\"#I2C_M_TEN\">I2C_M_TEN</a> | <a class=\"id\" href=\"#I2C_CLIENT_PEC\">I2C_CLIENT_PEC</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#algo\">algo</a>-><a class=\"id\" href=\"#smbus_xfer\">smbus_xfer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_lock_adapter\">i2c_lock_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Retry automatically on arbitration loss */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orig_jiffies\">orig_jiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#res\">res</a> = 0, <a class=\"id\" href=\"#try\">try</a> = 0; <a class=\"id\" href=\"#try\">try</a> <= <a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#retries\">retries</a>; <a class=\"id\" href=\"#try\">try</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#algo\">algo</a>-><a class=\"id\" href=\"#smbus_xfer\">smbus_xfer</a>(<a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_write\">read_write</a>, <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#orig_jiffies\">orig_jiffies</a> + <a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#timeout\">timeout</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_unlock_adapter\">i2c_unlock_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#i2c_smbus_xfer_emulated\">i2c_smbus_xfer_emulated</a>(<a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#read_write\">read_write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>);", 
"", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Simon G. Vogl <simon@tk.uni-linz.ac.at>\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"I2C-Bus main module\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
];
xr_frag_insert('l/d5/e226e80698c0eee14cf1c6379411665fdceada.xr', __xr_tmp);
