var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/mm/memory.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * demand-loading started 01.12.91 - seems it is high on the list of</span>", 
"<span class=\"comment\"> * things wanted, and it should be easy to implement. - Linus</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ok, demand-loading was easy, shared pages a little bit tricker. Shared</span>", 
"<span class=\"comment\"> * pages started 02.12.91, seems to work. - Linus.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Tested sharing by executing about 30 /bin/sh: under the old kernel it</span>", 
"<span class=\"comment\"> * would have taken more than the 6M I have free, but it worked well as</span>", 
"<span class=\"comment\"> * far as I could see.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also corrected some \"invalidate()\"s - I wasn't doing enough of them.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Real VM (paging to/from disk) started 18.12.91. Much more work and</span>", 
"<span class=\"comment\"> * thought has to go into this. Oh, well..</span>", 
"<span class=\"comment\"> * 19.12.91  -  works, somewhat. Sometimes I get faults, don't know why.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Found it. Everything seems to work now.</span>", 
"<span class=\"comment\"> * 20.12.91  -  Ok, making the swap-device changeable like the root.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 05.04.94  -  Multi-page memory management added for v1.1.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>Idea by Alex Bligh (alex@cconcepts.co.uk)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 16.07.99  -  Support of BIGMEM added by Gerhard Wichert, Siemens AG</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>(Gerhard.Wichert@pdb.siemens.de)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Aug/Sep 2004 Changed to four level page tables (Andi Kleen)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ksm\">ksm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delayacct\">delayacct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memcontrol\">memcontrol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swapops\">swapops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elf\">elf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgalloc\">pgalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlb\">tlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NEED_MULTIPLE_NODES\">CONFIG_NEED_MULTIPLE_NODES</a>", 
"<span class=\"comment\">/* use the per-pgdat data instead for discontigmem - mbligh */</span>", 
"unsigned long <a class=\"id\" href=\"#max_mapnr\">max_mapnr</a>;", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#mem_map\">mem_map</a>;", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#max_mapnr\">max_mapnr</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mem_map\">mem_map</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"unsigned long <a class=\"id\" href=\"#num_physpages\">num_physpages</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A number of key systems in x86 including ioremap() rely on the assumption</span>", 
"<span class=\"comment\"> * that high_memory defines the upper bound on direct map memory, then end</span>", 
"<span class=\"comment\"> * of ZONE_NORMAL.  Under CONFIG_DISCONTIG this means that max_low_pfn and</span>", 
"<span class=\"comment\"> * highstart_pfn must be the same; there must be no gap between ZONE_NORMAL</span>", 
"<span class=\"comment\"> * and ZONE_HIGHMEM.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#high_memory\">high_memory</a>;", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#num_physpages\">num_physpages</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#high_memory\">high_memory</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Randomize the address space (stacks, mmaps, brk, etc.).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ( When CONFIG_COMPAT_BRK=y we exclude brk from randomization,</span>", 
"<span class=\"comment\"> *   as ancient (libc5 based) binaries can segfault. )</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#randomize_va_space\">randomize_va_space</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> =", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT_BRK\">CONFIG_COMPAT_BRK</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>2;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#disable_randmaps\">disable_randmaps</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#randomize_va_space\">randomize_va_space</a> = 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"norandmaps\", <a class=\"id\" href=\"#disable_randmaps\">disable_randmaps</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#zero_pfn\">zero_pfn</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"unsigned long <a class=\"id\" href=\"#highest_memmap_pfn\">highest_memmap_pfn</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CONFIG_MMU architectures set up ZERO_PAGE in their paging_init()</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_zero_pfn\">init_zero_pfn</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zero_pfn\">zero_pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#ZERO_PAGE\">ZERO_PAGE</a>(0));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#init_zero_pfn\">init_zero_pfn</a>);", 
"", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#SPLIT_RSS_COUNTING\">SPLIT_RSS_COUNTING</a>)", 
"", 
"static void <a class=\"id\" href=\"#__sync_task_rss_stat\">__sync_task_rss_stat</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_MM_COUNTERS\">NR_MM_COUNTERS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_mm_counter\">add_mm_counter</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#events\">events</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#add_mm_counter_fast\">add_mm_counter_fast</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>, int <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>] += <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_mm_counter\">add_mm_counter</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#member\">member</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#inc_mm_counter_fast\">inc_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#member\">member</a>) <a class=\"id\" href=\"#add_mm_counter_fast\">add_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#member\">member</a>, 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dec_mm_counter_fast\">dec_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#member\">member</a>) <a class=\"id\" href=\"#add_mm_counter_fast\">add_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#member\">member</a>, -1)", 
"", 
"<span class=\"comment\">/* sync counter once per 64 page faults */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_RSS_EVENTS_THRESH\">TASK_RSS_EVENTS_THRESH</a><span class=\"ts\"/>(64)", 
"static void <a class=\"id\" href=\"#check_sync_rss_stat\">check_sync_rss_stat</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#task\">task</a> != <a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#events\">events</a>++ &gt; <a class=\"id\" href=\"#TASK_RSS_EVENTS_THRESH\">TASK_RSS_EVENTS_THRESH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sync_task_rss_stat\">__sync_task_rss_stat</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#get_mm_counter\">get_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#val\">val</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't use task-&gt;mm here...for avoiding to use task_get_mm()..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The caller must guarantee task-&gt;mm is not invalid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>]);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counter is updated in asynchronous manner and may go to minus.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But it's never be expected number for users.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#sync_mm_rss\">sync_mm_rss</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sync_task_rss_stat\">__sync_task_rss_stat</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#inc_mm_counter_fast\">inc_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#member\">member</a>) <a class=\"id\" href=\"#inc_mm_counter\">inc_mm_counter</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#member\">member</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dec_mm_counter_fast\">dec_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#member\">member</a>) <a class=\"id\" href=\"#dec_mm_counter\">dec_mm_counter</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#member\">member</a>)", 
"", 
"static void <a class=\"id\" href=\"#check_sync_rss_stat\">check_sync_rss_stat</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If a p?d_bad entry is found while walking page tables, report</span>", 
"<span class=\"comment\"> * the error, before resetting entry to p?d_none.  Usually (but</span>", 
"<span class=\"comment\"> * very seldom) called out from the p?d_none_or_clear_bad macros.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#pgd_clear_bad\">pgd_clear_bad</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_ERROR\">pgd_ERROR</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_clear\">pgd_clear</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#pud_clear_bad\">pud_clear_bad</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_ERROR\">pud_ERROR</a>(*<a class=\"id\" href=\"#pud\">pud</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_clear\">pud_clear</a>(<a class=\"id\" href=\"#pud\">pud</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#pmd_clear_bad\">pmd_clear_bad</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_ERROR\">pmd_ERROR</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_clear\">pmd_clear</a>(<a class=\"id\" href=\"#pmd\">pmd</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note: this doesn't free the actual pages themselves. That</span>", 
"<span class=\"comment\"> * has been handled earlier when unmapping all the memory regions.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_pte_range\">free_pte_range</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgtable_t\">pgtable_t</a> <a class=\"id\" href=\"#token\">token</a> = <a class=\"id\" href=\"#pmd_pgtable\">pmd_pgtable</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_clear\">pmd_clear</a>(<a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_free_tlb\">pte_free_tlb</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#token\">token</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb\">tlb</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#nr_ptes\">nr_ptes</a>--;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_pmd_range\">free_pmd_range</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#floor\">floor</a>, unsigned long <a class=\"id\" href=\"#ceiling\">ceiling</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pmd_addr_end\">pmd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none_or_clear_bad\">pmd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pte_range\">free_pte_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pmd\">pmd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> &= <a class=\"id\" href=\"#PUD_MASK\">PUD_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#floor\">floor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ceiling\">ceiling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ceiling\">ceiling</a> &= <a class=\"id\" href=\"#PUD_MASK\">PUD_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ceiling\">ceiling</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> - 1 &gt; <a class=\"id\" href=\"#ceiling\">ceiling</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_clear\">pud_clear</a>(<a class=\"id\" href=\"#pud\">pud</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_free_tlb\">pmd_free_tlb</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_pud_range\">free_pud_range</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#floor\">floor</a>, unsigned long <a class=\"id\" href=\"#ceiling\">ceiling</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pud_addr_end\">pud_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none_or_clear_bad\">pud_none_or_clear_bad</a>(<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pmd_range\">free_pmd_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#floor\">floor</a>, <a class=\"id\" href=\"#ceiling\">ceiling</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pud\">pud</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> &= <a class=\"id\" href=\"#PGDIR_MASK\">PGDIR_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#floor\">floor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ceiling\">ceiling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ceiling\">ceiling</a> &= <a class=\"id\" href=\"#PGDIR_MASK\">PGDIR_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ceiling\">ceiling</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> - 1 &gt; <a class=\"id\" href=\"#ceiling\">ceiling</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_clear\">pgd_clear</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_free_tlb\">pud_free_tlb</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function frees user-level page tables of a process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with pagetable lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_pgd_range\">free_pgd_range</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#floor\">floor</a>, unsigned long <a class=\"id\" href=\"#ceiling\">ceiling</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The next few lines have given us lots of grief...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Why are we testing PMD* at this top level?  Because often</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there will be no work to do at all, and we'd prefer not to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * go all the way down to the bottom just to discover that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Why all these \"- 1\"s?  Because 0 represents both the bottom</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the address space and the top of it (using -1 for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * top wouldn't help much: the masks would do the wrong thing).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The rule is that addr 0 and floor 0 refer to the bottom of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the address space, but end 0 and ceiling 0 refer to the top</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Comparisons need to use \"end - 1\" and \"ceiling - 1\" (though</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that end 0 case should be mythical).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wherever addr is brought up or ceiling brought down, we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be careful to reject \"the opposite 0\" before it confuses the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * subsequent tests.  But what about where end is brought down</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by PMD_SIZE below? no, end can't go down to 0 there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Whereas we round start (addr) and ceiling down, by different</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * masks at different levels, in order to test whether a table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now has no other vmas using it, so can be freed, we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bother to round floor or end up - the tests don't need that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> &= <a class=\"id\" href=\"#PMD_MASK\">PMD_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#floor\">floor</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PMD_SIZE\">PMD_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ceiling\">ceiling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ceiling\">ceiling</a> &= <a class=\"id\" href=\"#PMD_MASK\">PMD_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ceiling\">ceiling</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> - 1 &gt; <a class=\"id\" href=\"#ceiling\">ceiling</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> -= <a class=\"id\" href=\"#PMD_SIZE\">PMD_SIZE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &gt; <a class=\"id\" href=\"#end\">end</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#tlb\">tlb</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pgd_addr_end\">pgd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none_or_clear_bad\">pgd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pud_range\">free_pud_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#floor\">floor</a>, <a class=\"id\" href=\"#ceiling\">ceiling</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pgd\">pgd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_pgtables\">free_pgtables</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#floor\">floor</a>, unsigned long <a class=\"id\" href=\"#ceiling\">ceiling</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Hide vma from rmap and truncate_pagecache before freeing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pgtables</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlink_anon_vmas\">unlink_anon_vmas</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlink_file_vma\">unlink_file_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_free_pgd_range\">hugetlb_free_pgd_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#floor\">floor</a>, <a class=\"id\" href=\"#next\">next</a>? <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>: <a class=\"id\" href=\"#ceiling\">ceiling</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Optimization: gather nearby vmas into one call down</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> + <a class=\"id\" href=\"#PMD_SIZE\">PMD_SIZE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       && !<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#next\">next</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlink_anon_vmas\">unlink_anon_vmas</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlink_file_vma\">unlink_file_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pgd_range\">free_pgd_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#floor\">floor</a>, <a class=\"id\" href=\"#next\">next</a>? <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>: <a class=\"id\" href=\"#ceiling\">ceiling</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#__pte_alloc\">__pte_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgtable_t\">pgtable_t</a> <a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#pte_alloc_one\">pte_alloc_one</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure all pte setup (eg. pte page lock and page clearing) are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * visible before the pte is made visible to other CPUs by being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * put into page tables.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The other side of the story is the pointer chasing in the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * table walking code (when walking the page table without locking;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ie. most of the time). Fortunately, these data accesses consist</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of a chain of data-dependent loads, meaning most CPUs (alpha</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * being the notable exception) will already guarantee loads are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * seen in-order. See the alpha page table accessors for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smp_read_barrier_depends() barriers in page table walking code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); <span class=\"comment\">/* Could be smp_wmb__xxx(before|after)_spin_lock */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>)) {<span class=\"ts\"/><span class=\"comment\">/* Has another populated it ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#nr_ptes\">nr_ptes</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_populate\">pmd_populate</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_free\">pte_free</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__pte_alloc_kernel\">__pte_alloc_kernel</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#pte_alloc_one_kernel\">pte_alloc_one_kernel</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); <span class=\"comment\">/* See comment in __pte_alloc */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>)) {<span class=\"ts\"/><span class=\"comment\">/* Has another populated it ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_populate_kernel\">pmd_populate_kernel</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_free_kernel\">pte_free_kernel</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_rss_vec\">init_rss_vec</a>(int *<a class=\"id\" href=\"#rss\">rss</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#rss\">rss</a>, 0, sizeof(int) * <a class=\"id\" href=\"#NR_MM_COUNTERS\">NR_MM_COUNTERS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_mm_rss_vec\">add_mm_rss_vec</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int *<a class=\"id\" href=\"#rss\">rss</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_mm_rss\">sync_mm_rss</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_MM_COUNTERS\">NR_MM_COUNTERS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_mm_counter\">add_mm_counter</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is called to print an error when a bad pte</span>", 
"<span class=\"comment\"> * is found. For example, we might have a PFN-mapped pte in</span>", 
"<span class=\"comment\"> * a region that doesn't allow it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The calling function must still handle the error.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#print_bad_pte\">print_bad_pte</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#resume\">resume</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#nr_shown\">nr_shown</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#nr_unshown\">nr_unshown</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow a burst of 60 reports, then keep quiet for that minute;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or allow a steady drip of one report per second.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_shown\">nr_shown</a> == 60) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#resume\">resume</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_unshown\">nr_unshown</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_unshown\">nr_unshown</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"BUG: Bad page map: %lu messages suppressed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_unshown\">nr_unshown</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_unshown\">nr_unshown</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_shown\">nr_shown</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_shown\">nr_shown</a>++ == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resume\">resume</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + 60 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> ? <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#linear_page_index\">linear_page_index</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"BUG: Bad page map in process %s  pte:%08llx pmd:%08llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(long long)<a class=\"id\" href=\"#pte_val\">pte_val</a>(<a class=\"id\" href=\"#pte\">pte</a>), (long long)<a class=\"id\" href=\"#pmd_val\">pmd_val</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_page\">dump_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"addr:%p vm_flags:%08lx anon_vma:%p mapping:%p index:%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>(void *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Choose text because data symbols depend on CONFIG_KALLSYMS_ALL=y</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_symbol\">print_symbol</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"vma->vm_ops->fault: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#fault\">fault</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_symbol\">print_symbol</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"vma->vm_file->f_op->mmap: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#mmap\">mmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#TAINT_BAD_PAGE\">TAINT_BAD_PAGE</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_cow_mapping\">is_cow_mapping</a>(unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a> | <a class=\"id\" href=\"#VM_MAYWRITE\">VM_MAYWRITE</a>)) == <a class=\"id\" href=\"#VM_MAYWRITE\">VM_MAYWRITE</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#is_zero_pfn\">is_zero_pfn</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_zero_pfn\">is_zero_pfn</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pfn\">pfn</a> == <a class=\"id\" href=\"#zero_pfn\">zero_pfn</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#my_zero_pfn\">my_zero_pfn</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#my_zero_pfn\">my_zero_pfn</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zero_pfn\">zero_pfn</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vm_normal_page -- This function gets the \"struct page\" associated with a pte.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * \"Special\" mappings do not wish to be associated with a \"struct page\" (either</span>", 
"<span class=\"comment\"> * it doesn't exist, or it exists but they don't want to touch it). In this</span>", 
"<span class=\"comment\"> * case, NULL is returned here. \"Normal\" mappings do have a struct page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are 2 broad cases. Firstly, an architecture may define a pte_special()</span>", 
"<span class=\"comment\"> * pte bit, in which case this function is trivial. Secondly, an architecture</span>", 
"<span class=\"comment\"> * may not have a spare pte bit, which requires a more complicated scheme,</span>", 
"<span class=\"comment\"> * described below.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A raw VM_PFNMAP mapping (ie. one that is not COWed) is always considered a</span>", 
"<span class=\"comment\"> * special mapping (even if there are underlying and valid \"struct pages\").</span>", 
"<span class=\"comment\"> * COWed pages of a VM_PFNMAP are always normal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The way we recognize COWed pages within VM_PFNMAP mappings is through the</span>", 
"<span class=\"comment\"> * rules set up by \"remap_pfn_range()\": the vma will have the VM_PFNMAP bit</span>", 
"<span class=\"comment\"> * set, and the vm_pgoff will point to the first PFN mapped: thus every special</span>", 
"<span class=\"comment\"> * mapping will always honor the rule</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pfn_of_page == vma-&gt;vm_pgoff + ((addr - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * And for normal mappings this is false.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This restricts such mappings to be a linear translation from virtual address</span>", 
"<span class=\"comment\"> * to pfn. To get around this restriction, we allow arbitrary mappings so long</span>", 
"<span class=\"comment\"> * as the vma is not a COW mapping; in that case, we know that all ptes are</span>", 
"<span class=\"comment\"> * special (because none can have been COWed).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In order to support COW of arbitrary special mappings, we have VM_MIXEDMAP.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * VM_MIXEDMAP mappings can likewise contain memory with or without \"struct</span>", 
"<span class=\"comment\"> * page\" backing, however the difference is that _all_ pages with a struct</span>", 
"<span class=\"comment\"> * page (that is, those where pfn_valid is true) are refcounted and considered</span>", 
"<span class=\"comment\"> * normal pages by the VM. The disadvantage is that pages are refcounted</span>", 
"<span class=\"comment\"> * (which can be slower and simply not an option for some PFNMAP users). The</span>", 
"<span class=\"comment\"> * advantage is that we don't have to follow the strict linearity rule of</span>", 
"<span class=\"comment\"> * PFNMAP mappings in order to support COWable mappings.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTE_SPECIAL\">__HAVE_ARCH_PTE_SPECIAL</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_PTE_SPECIAL\">HAVE_PTE_SPECIAL</a> 1", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_PTE_SPECIAL\">HAVE_PTE_SPECIAL</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#vm_normal_page\">vm_normal_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HAVE_PTE_SPECIAL\">HAVE_PTE_SPECIAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#pte_special\">pte_special</a>(<a class=\"id\" href=\"#pte\">pte</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#check_pfn\">check_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a> | <a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_zero_pfn\">is_zero_pfn</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_bad_pte\">print_bad_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* !HAVE_PTE_SPECIAL case follows: */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>|<a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = (<a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> == <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> + <a class=\"id\" href=\"#off\">off</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_cow_mapping\">is_cow_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_zero_pfn\">is_zero_pfn</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#check_pfn\">check_pfn</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pfn\">pfn</a> &gt; <a class=\"id\" href=\"#highest_memmap_pfn\">highest_memmap_pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_bad_pte\">print_bad_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE! We still have PageReserved() pages in the page tables.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * eg. VDSO mappings can cause them to exist.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * copy one vm_area from one task to the other. Assumes the page tables</span>", 
"<span class=\"comment\"> * already present in the new task to be cleared in the whole range</span>", 
"<span class=\"comment\"> * covered by this vma.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#copy_one_pte\">copy_one_pte</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#src_mm\">src_mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#dst_pte\">dst_pte</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#src_pte\">src_pte</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int *<a class=\"id\" href=\"#rss\">rss</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a> = *<a class=\"id\" href=\"#src_pte\">src_pte</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pte contains position in swap or file, so copy. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pte_present\">pte_present</a>(<a class=\"id\" href=\"#pte\">pte</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_file\">pte_file</a>(<a class=\"id\" href=\"#pte\">pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_to_swp_entry\">pte_to_swp_entry</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_duplicate\">swap_duplicate</a>(<a class=\"id\" href=\"#entry\">entry</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make sure dst_mm is on swapoff's mmlist. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dst_mm\">dst_mm</a>-><a class=\"id\" href=\"#mmlist\">mmlist</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dst_mm\">dst_mm</a>-><a class=\"id\" href=\"#mmlist\">mmlist</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dst_mm\">dst_mm</a>-><a class=\"id\" href=\"#mmlist\">mmlist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#src_mm\">src_mm</a>-><a class=\"id\" href=\"#mmlist\">mmlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#non_swap_entry\">non_swap_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#MM_SWAPENTS\">MM_SWAPENTS</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#is_write_migration_entry\">is_write_migration_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_cow_mapping\">is_cow_mapping</a>(<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * COW mappings require pages in both parent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and child to be set to read.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#make_migration_entry_read\">make_migration_entry_read</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#swp_entry_to_pte\">swp_entry_to_pte</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#src_pte\">src_pte</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_set_pte\">out_set_pte</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it's a COW mapping, write protect it both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the parent and the child</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_cow_mapping\">is_cow_mapping</a>(<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptep_set_wrprotect\">ptep_set_wrprotect</a>(<a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#src_pte\">src_pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_wrprotect\">pte_wrprotect</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it's a shared mapping, mark it clean in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the child</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_mkclean\">pte_mkclean</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_mkold\">pte_mkold</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vm_normal_page\">vm_normal_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_dup_rmap\">page_dup_rmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#MM_FILEPAGES\">MM_FILEPAGES</a>]++;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_set_pte\">out_set_pte</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dst_pte\">dst_pte</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#copy_pte_range\">copy_pte_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#src_mm\">src_mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#dst_pmd\">dst_pmd</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#src_pmd\">src_pmd</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#orig_src_pte\">orig_src_pte</a>, *<a class=\"id\" href=\"#orig_dst_pte\">orig_dst_pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#src_pte\">src_pte</a>, *<a class=\"id\" href=\"#dst_pte\">dst_pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#src_ptl\">src_ptl</a>, *<a class=\"id\" href=\"#dst_ptl\">dst_ptl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#progress\">progress</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#NR_MM_COUNTERS\">NR_MM_COUNTERS</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a> = (<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a>){0};", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rss_vec\">init_rss_vec</a>(<a class=\"id\" href=\"#rss\">rss</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_pte\">dst_pte</a> = <a class=\"id\" href=\"#pte_alloc_map_lock\">pte_alloc_map_lock</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#dst_pmd\">dst_pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#dst_ptl\">dst_ptl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst_pte\">dst_pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src_pte\">src_pte</a> = <a class=\"id\" href=\"#pte_offset_map_nested\">pte_offset_map_nested</a>(<a class=\"id\" href=\"#src_pmd\">src_pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src_ptl\">src_ptl</a> = <a class=\"id\" href=\"#pte_lockptr\">pte_lockptr</a>(<a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#src_pmd\">src_pmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nested\">spin_lock_nested</a>(<a class=\"id\" href=\"#src_ptl\">src_ptl</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_src_pte\">orig_src_pte</a> = <a class=\"id\" href=\"#src_pte\">src_pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_dst_pte\">orig_dst_pte</a> = <a class=\"id\" href=\"#dst_pte\">dst_pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_enter_lazy_mmu_mode\">arch_enter_lazy_mmu_mode</a>();", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are holding two locks at this point - either of them</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * could generate latencies in another task on another CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#progress\">progress</a> >= 32) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#progress\">progress</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>() ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#spin_needbreak\">spin_needbreak</a>(<a class=\"id\" href=\"#src_ptl\">src_ptl</a>) || <a class=\"id\" href=\"#spin_needbreak\">spin_needbreak</a>(<a class=\"id\" href=\"#dst_ptl\">dst_ptl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_none\">pte_none</a>(*<a class=\"id\" href=\"#src_pte\">src_pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#progress\">progress</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#copy_one_pte\">copy_one_pte</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#dst_pte\">dst_pte</a>, <a class=\"id\" href=\"#src_pte\">src_pte</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#rss\">rss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#progress\">progress</a> += 8;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#dst_pte\">dst_pte</a>++, <a class=\"id\" href=\"#src_pte\">src_pte</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_leave_lazy_mmu_mode\">arch_leave_lazy_mmu_mode</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#src_ptl\">src_ptl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_nested\">pte_unmap_nested</a>(<a class=\"id\" href=\"#orig_src_pte\">orig_src_pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_mm_rss_vec\">add_mm_rss_vec</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#rss\">rss</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#orig_dst_pte\">orig_dst_pte</a>, <a class=\"id\" href=\"#dst_ptl\">dst_ptl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#add_swap_count_continuation\">add_swap_count_continuation</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#progress\">progress</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#copy_pmd_range\">copy_pmd_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#src_mm\">src_mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#dst_pud\">dst_pud</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#src_pud\">src_pud</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#src_pmd\">src_pmd</a>, *<a class=\"id\" href=\"#dst_pmd\">dst_pmd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_pmd\">dst_pmd</a> = <a class=\"id\" href=\"#pmd_alloc\">pmd_alloc</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#dst_pud\">dst_pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst_pmd\">dst_pmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src_pmd\">src_pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#src_pud\">src_pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pmd_addr_end\">pmd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none_or_clear_bad\">pmd_none_or_clear_bad</a>(<a class=\"id\" href=\"#src_pmd\">src_pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_pte_range\">copy_pte_range</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#dst_pmd\">dst_pmd</a>, <a class=\"id\" href=\"#src_pmd\">src_pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#dst_pmd\">dst_pmd</a>++, <a class=\"id\" href=\"#src_pmd\">src_pmd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#copy_pud_range\">copy_pud_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#src_mm\">src_mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#dst_pgd\">dst_pgd</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#src_pgd\">src_pgd</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#src_pud\">src_pud</a>, *<a class=\"id\" href=\"#dst_pud\">dst_pud</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_pud\">dst_pud</a> = <a class=\"id\" href=\"#pud_alloc\">pud_alloc</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#dst_pgd\">dst_pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst_pud\">dst_pud</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src_pud\">src_pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#src_pgd\">src_pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pud_addr_end\">pud_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none_or_clear_bad\">pud_none_or_clear_bad</a>(<a class=\"id\" href=\"#src_pud\">src_pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_pmd_range\">copy_pmd_range</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#dst_pud\">dst_pud</a>, <a class=\"id\" href=\"#src_pud\">src_pud</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#dst_pud\">dst_pud</a>++, <a class=\"id\" href=\"#src_pud\">src_pud</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#copy_page_range\">copy_page_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#src_mm\">src_mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#src_pgd\">src_pgd</a>, *<a class=\"id\" href=\"#dst_pgd\">dst_pgd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't copy ptes where a page fault will fill them correctly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fork becomes much lighter when there are big shared or private</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * readonly mappings. The tradeoff is that copy_page_range is more</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * efficient than faulting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_HUGETLB\">VM_HUGETLB</a>|<a class=\"id\" href=\"#VM_NONLINEAR\">VM_NONLINEAR</a>|<a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>|<a class=\"id\" href=\"#VM_INSERTPAGE\">VM_INSERTPAGE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#copy_hugetlb_page_range\">copy_hugetlb_page_range</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_pfn_mapping\">is_pfn_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We do not free on error cases below as remove_vma</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * gets called on error from higher level routine</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#track_pfn_vma_copy\">track_pfn_vma_copy</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to invalidate the secondary MMU mappings only when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there could be a permission downgrade on the ptes of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parent mm. And a permission downgrade will only happen if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is_cow_mapping() returns true.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_cow_mapping\">is_cow_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_invalidate_range_start\">mmu_notifier_invalidate_range_start</a>(<a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_pgd\">dst_pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src_pgd\">src_pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pgd_addr_end\">pgd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none_or_clear_bad\">pgd_none_or_clear_bad</a>(<a class=\"id\" href=\"#src_pgd\">src_pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#copy_pud_range\">copy_pud_range</a>(<a class=\"id\" href=\"#dst_mm\">dst_mm</a>, <a class=\"id\" href=\"#src_mm\">src_mm</a>, <a class=\"id\" href=\"#dst_pgd\">dst_pgd</a>, <a class=\"id\" href=\"#src_pgd\">src_pgd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#dst_pgd\">dst_pgd</a>++, <a class=\"id\" href=\"#src_pgd\">src_pgd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_cow_mapping\">is_cow_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_invalidate_range_end\">mmu_notifier_invalidate_range_end</a>(<a class=\"id\" href=\"#src_mm\">src_mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#zap_pte_range\">zap_pte_range</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#zap_work\">zap_work</a>, struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *<a class=\"id\" href=\"#details\">details</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#tlb\">tlb</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#NR_MM_COUNTERS\">NR_MM_COUNTERS</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rss_vec\">init_rss_vec</a>(<a class=\"id\" href=\"#rss\">rss</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_enter_lazy_mmu_mode\">arch_enter_lazy_mmu_mode</a>();", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#ptent\">ptent</a> = *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_none\">pte_none</a>(<a class=\"id\" href=\"#ptent\">ptent</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#zap_work\">zap_work</a>)--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#zap_work\">zap_work</a>) -= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_present\">pte_present</a>(<a class=\"id\" href=\"#ptent\">ptent</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vm_normal_page\">vm_normal_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptent\">ptent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#details\">details</a>) && <a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unmap_shared_mapping_pages() wants to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * invalidate cache without truncating:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unmap shared but keep private pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#check_mapping\">check_mapping</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#check_mapping\">check_mapping</a> != <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Each page-&gt;index must be checked when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * invalidating or truncating nonlinear.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#nonlinear_vma\">nonlinear_vma</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#first_index\">first_index</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#last_index\">last_index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptent\">ptent</a> = <a class=\"id\" href=\"#ptep_get_and_clear_full\">ptep_get_and_clear_full</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlb\">tlb</a>-><a class=\"id\" href=\"#fullmm\">fullmm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlb_remove_tlb_entry\">tlb_remove_tlb_entry</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#details\">details</a>) && <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#nonlinear_vma\">nonlinear_vma</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#linear_page_index\">linear_page_index</a>(<a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#nonlinear_vma\">nonlinear_vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>) != <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pgoff_to_pte\">pgoff_to_pte</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>]--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>(<a class=\"id\" href=\"#ptent\">ptent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_young\">pte_young</a>(<a class=\"id\" href=\"#ptent\">ptent</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#VM_SequentialReadHint\">VM_SequentialReadHint</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_page_accessed\">mark_page_accessed</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#MM_FILEPAGES\">MM_FILEPAGES</a>]--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_remove_rmap\">page_remove_rmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>) &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_bad_pte\">print_bad_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptent\">ptent</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlb_remove_page\">tlb_remove_page</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If details-&gt;check_mapping, we leave swap entries;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if details-&gt;nonlinear_vma, we leave file entries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#details\">details</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_file\">pte_file</a>(<a class=\"id\" href=\"#ptent\">ptent</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_NONLINEAR\">VM_NONLINEAR</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_bad_pte\">print_bad_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptent\">ptent</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_to_swp_entry\">pte_to_swp_entry</a>(<a class=\"id\" href=\"#ptent\">ptent</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#non_swap_entry\">non_swap_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rss\">rss</a>[<a class=\"id\" href=\"#MM_SWAPENTS\">MM_SWAPENTS</a>]--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#free_swap_and_cache\">free_swap_and_cache</a>(<a class=\"id\" href=\"#entry\">entry</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_bad_pte\">print_bad_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptent\">ptent</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_clear_not_present_full\">pte_clear_not_present_full</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#tlb\">tlb</a>-><a class=\"id\" href=\"#fullmm\">fullmm</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pte\">pte</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, (<a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a> && *<a class=\"id\" href=\"#zap_work\">zap_work</a> &gt; 0));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_mm_rss_vec\">add_mm_rss_vec</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#rss\">rss</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_leave_lazy_mmu_mode\">arch_leave_lazy_mmu_mode</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a> - 1, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#zap_pmd_range\">zap_pmd_range</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#zap_work\">zap_work</a>, struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *<a class=\"id\" href=\"#details\">details</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pmd_addr_end\">pmd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none_or_clear_bad\">pmd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pmd\">pmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#zap_work\">zap_work</a>)--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#zap_pte_range\">zap_pte_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_work\">zap_work</a>, <a class=\"id\" href=\"#details\">details</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pmd\">pmd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, (<a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a> && *<a class=\"id\" href=\"#zap_work\">zap_work</a> &gt; 0));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#zap_pud_range\">zap_pud_range</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#zap_work\">zap_work</a>, struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *<a class=\"id\" href=\"#details\">details</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pud_addr_end\">pud_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none_or_clear_bad\">pud_none_or_clear_bad</a>(<a class=\"id\" href=\"#pud\">pud</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#zap_work\">zap_work</a>)--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#zap_pmd_range\">zap_pmd_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_work\">zap_work</a>, <a class=\"id\" href=\"#details\">details</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pud\">pud</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, (<a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a> && *<a class=\"id\" href=\"#zap_work\">zap_work</a> &gt; 0));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#unmap_page_range\">unmap_page_range</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#zap_work\">zap_work</a>, struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *<a class=\"id\" href=\"#details\">details</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#details\">details</a> && !<a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#check_mapping\">check_mapping</a> && !<a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#nonlinear_vma\">nonlinear_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_start\">mem_cgroup_uncharge_start</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb_start_vma\">tlb_start_vma</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pgd_addr_end\">pgd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none_or_clear_bad\">pgd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pgd\">pgd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#zap_work\">zap_work</a>)--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#zap_pud_range\">zap_pud_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_work\">zap_work</a>, <a class=\"id\" href=\"#details\">details</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pgd\">pgd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, (<a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a> && *<a class=\"id\" href=\"#zap_work\">zap_work</a> &gt; 0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb_end_vma\">tlb_end_vma</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_end\">mem_cgroup_uncharge_end</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZAP_BLOCK_SIZE\">ZAP_BLOCK_SIZE</a><span class=\"ts\"/>(8 * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"#else", 
"<span class=\"comment\">/* No preempt: go for improved straight-line efficiency */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZAP_BLOCK_SIZE\">ZAP_BLOCK_SIZE</a><span class=\"ts\"/>(1024 * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unmap_vmas - unmap a range of memory covered by a list of vma's</span>", 
"<span class=\"comment\"> * @tlbp: address of the caller's struct mmu_gather</span>", 
"<span class=\"comment\"> * @vma: the starting vma</span>", 
"<span class=\"comment\"> * @start_addr: virtual address at which to start unmapping</span>", 
"<span class=\"comment\"> * @end_addr: virtual address at which to end unmapping</span>", 
"<span class=\"comment\"> * @nr_accounted: Place number of unmapped pages in vm-accountable vma's here</span>", 
"<span class=\"comment\"> * @details: details of nonlinear truncation or shared cache invalidation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the end address of the unmapping (restart addr if interrupted).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unmap all pages in the vma list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We aim to not hold locks for too long (for scheduling latency reasons).</span>", 
"<span class=\"comment\"> * So zap pages in ZAP_BLOCK_SIZE bytecounts.  This means we need to</span>", 
"<span class=\"comment\"> * return the ending mmu_gather to the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only addresses between `start' and `end' will be unmapped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The VMA list must be sorted in ascending virtual address order.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * unmap_vmas() assumes that the caller will flush the whole unmapped address</span>", 
"<span class=\"comment\"> * range after unmap_vmas() returns.  So the only responsibility here is to</span>", 
"<span class=\"comment\"> * ensure that any thus-far unmapped pages are flushed before unmap_vmas()</span>", 
"<span class=\"comment\"> * drops the lock and schedules.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#unmap_vmas\">unmap_vmas</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> **<a class=\"id\" href=\"#tlbp\">tlbp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#start_addr\">start_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_addr\">end_addr</a>, unsigned long *<a class=\"id\" href=\"#nr_accounted\">nr_accounted</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *<a class=\"id\" href=\"#details\">details</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#zap_work\">zap_work</a> = <a class=\"id\" href=\"#ZAP_BLOCK_SIZE\">ZAP_BLOCK_SIZE</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tlb_start\">tlb_start</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* For tlb_finish_mmu */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tlb_start_valid\">tlb_start_valid</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start_addr\">start_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a> = <a class=\"id\" href=\"#details\">details</a>? <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>: <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fullmm\">fullmm</a> = (*<a class=\"id\" href=\"#tlbp\">tlbp</a>)-><a class=\"id\" href=\"#fullmm\">fullmm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_invalidate_range_start\">mmu_notifier_invalidate_range_start</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start_addr\">start_addr</a>, <a class=\"id\" href=\"#end_addr\">end_addr</a>);", 
"<span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#end_addr\">end_addr</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#start_addr\">start_addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>, <a class=\"id\" href=\"#end_addr\">end_addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_ACCOUNT\">VM_ACCOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nr_accounted\">nr_accounted</a> += (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_pfn_mapping\">is_pfn_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#untrack_pfn_vma\">untrack_pfn_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, 0, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tlb_start_valid\">tlb_start_valid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlb_start\">tlb_start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlb_start_valid\">tlb_start_valid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * It is undesirable to test vma-&gt;vm_file as it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * should be non-null for valid hugetlb area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * However, vm_file will be NULL in the error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cleanup path of do_mmap_pgoff. When</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * hugetlbfs -&gt;mmap method fails,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * do_mmap_pgoff() nullifies vma-&gt;vm_file</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * before calling this function to clean up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Since no pte has actually been setup, it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * safe to do nothing in this case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_hugepage_range\">unmap_hugepage_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_work\">zap_work</a> -= (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages_per_huge_page\">pages_per_huge_page</a>(<a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#unmap_page_range\">unmap_page_range</a>(*<a class=\"id\" href=\"#tlbp\">tlbp</a>, <a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, &amp;<a class=\"id\" href=\"#zap_work\">zap_work</a>, <a class=\"id\" href=\"#details\">details</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zap_work\">zap_work</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlb_finish_mmu\">tlb_finish_mmu</a>(*<a class=\"id\" href=\"#tlbp\">tlbp</a>, <a class=\"id\" href=\"#tlb_start\">tlb_start</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>() ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a> && <a class=\"id\" href=\"#spin_needbreak\">spin_needbreak</a>(<a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tlbp\">tlbp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tlbp\">tlbp</a> = <a class=\"id\" href=\"#tlb_gather_mmu\">tlb_gather_mmu</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#fullmm\">fullmm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlb_start_valid\">tlb_start_valid</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_work\">zap_work</a> = <a class=\"id\" href=\"#ZAP_BLOCK_SIZE\">ZAP_BLOCK_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_invalidate_range_end\">mmu_notifier_invalidate_range_end</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start_addr\">start_addr</a>, <a class=\"id\" href=\"#end_addr\">end_addr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#start\">start</a>;<span class=\"ts\"/><span class=\"comment\">/* which is now the end (or restart) address */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * zap_page_range - remove user pages in a given range</span>", 
"<span class=\"comment\"> * @vma: vm_area_struct holding the applicable pages</span>", 
"<span class=\"comment\"> * @address: starting address of pages to zap</span>", 
"<span class=\"comment\"> * @size: number of bytes to zap</span>", 
"<span class=\"comment\"> * @details: details of nonlinear truncation or shared cache invalidation</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#zap_page_range\">zap_page_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *<a class=\"id\" href=\"#details\">details</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_accounted\">nr_accounted</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb\">tlb</a> = <a class=\"id\" href=\"#tlb_gather_mmu\">tlb_gather_mmu</a>(<a class=\"id\" href=\"#mm\">mm</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_hiwater_rss\">update_hiwater_rss</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#unmap_vmas\">unmap_vmas</a>(&amp;<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#end\">end</a>, &amp;<a class=\"id\" href=\"#nr_accounted\">nr_accounted</a>, <a class=\"id\" href=\"#details\">details</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tlb\">tlb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlb_finish_mmu\">tlb_finish_mmu</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#end\">end</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * zap_vma_ptes - remove ptes mapping the vma</span>", 
"<span class=\"comment\"> * @vma: vm_area_struct holding ptes to be zapped</span>", 
"<span class=\"comment\"> * @address: starting address of pages to zap</span>", 
"<span class=\"comment\"> * @size: number of bytes to zap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function only unmaps ptes assigned to VM_PFNMAP vmas.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The entire address range must be fully contained within the vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if successful.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#zap_vma_ptes\">zap_vma_ptes</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> || <a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> ||", 
"<span class=\"ts\"/>    <span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zap_page_range\">zap_page_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#zap_vma_ptes\">zap_vma_ptes</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * follow_page - look up a page descriptor from a user-virtual address</span>", 
"<span class=\"comment\"> * @vma: vm_area_struct mapping @address</span>", 
"<span class=\"comment\"> * @address: virtual address to look up</span>", 
"<span class=\"comment\"> * @flags: flags modifying lookup behaviour</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @flags can have FOLL_ flags set, defined in &lt;linux/mm.h&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the mapped (struct page *), %NULL if no mapping exists, or</span>", 
"<span class=\"comment\"> * an error pointer if there is a mapping to something not represented</span>", 
"<span class=\"comment\"> * by a page descriptor (see also vm_normal_page()).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#follow_page\">follow_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_huge_addr\">follow_huge_addr</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>) || <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pgd_bad\">pgd_bad</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_page_table\">no_page_table</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_page_table\">no_page_table</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_huge\">pud_huge</a>(*<a class=\"id\" href=\"#pud\">pud</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_huge_pud\">follow_huge_pud</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pud_bad\">pud_bad</a>(*<a class=\"id\" href=\"#pud\">pud</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_page_table\">no_page_table</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_page_table\">no_page_table</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_huge\">pmd_huge</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_huge_pmd\">follow_huge_pmd</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pmd_bad\">pmd_bad</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_page_table\">no_page_table</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_present\">pte_present</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_page\">no_page</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>) && !<a class=\"id\" href=\"#pte_write\">pte_write</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vm_normal_page\">vm_normal_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_DUMP\">FOLL_DUMP</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#is_zero_pfn\">is_zero_pfn</a>(<a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#pte\">pte</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_page\">bad_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_TOUCH\">FOLL_TOUCH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>(<a class=\"id\" href=\"#pte\">pte</a>) && !<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pte_mkyoung() would be more correct here, but atomic care</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is needed to avoid losing the dirty bit: it is easier to use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mark_page_accessed().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_page_accessed\">mark_page_accessed</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<a class=\"id\" href=\"#bad_page\">bad_page</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);", 
"", 
"<a class=\"id\" href=\"#no_page\">no_page</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_none\">pte_none</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<a class=\"id\" href=\"#no_page_table\">no_page_table</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When core dumping an enormous anonymous area that nobody</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has touched so far, we don't want to allocate unnecessary pages or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page tables.  Return error instead of NULL to skip handle_mm_fault,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then get_dump_page() will return NULL to leave a hole in the dump.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But we can only make this optimization where a hole would surely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be zero-filled if handle_mm_fault() actually did handle it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_DUMP\">FOLL_DUMP</a>) &&", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> || !<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#fault\">fault</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__get_user_pages\">__get_user_pages</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, unsigned int <a class=\"id\" href=\"#gup_flags\">gup_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#vmas\">vmas</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!!<a class=\"id\" href=\"#pages\">pages</a> != !!(<a class=\"id\" href=\"#gup_flags\">gup_flags</a> &amp; <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Require read or write permissions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If FOLL_FORCE is set, we only require the \"MAY\" flags.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a>  = (<a class=\"id\" href=\"#gup_flags\">gup_flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a> | <a class=\"id\" href=\"#VM_MAYWRITE\">VM_MAYWRITE</a>) : (<a class=\"id\" href=\"#VM_READ\">VM_READ</a> | <a class=\"id\" href=\"#VM_MAYREAD\">VM_MAYREAD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= (<a class=\"id\" href=\"#gup_flags\">gup_flags</a> &amp; <a class=\"id\" href=\"#FOLL_FORCE\">FOLL_FORCE</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_MAYREAD\">VM_MAYREAD</a> | <a class=\"id\" href=\"#VM_MAYWRITE\">VM_MAYWRITE</a>) : (<a class=\"id\" href=\"#VM_READ\">VM_READ</a> | <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_extend_vma\">find_extend_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#in_gate_area\">in_gate_area</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#start\">start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#start\">start</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#gate_vma\">gate_vma</a> = <a class=\"id\" href=\"#get_gate_vma\">get_gate_vma</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* user gate pages are read-only */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gup_flags\">gup_flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pg\">pg</a> &gt; <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset_k\">pgd_offset_k</a>(<a class=\"id\" href=\"#pg\">pg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset_gate\">pgd_offset_gate</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pg\">pg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#pg\">pg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud\">pud</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#pg\">pg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#pg\">pg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_none\">pte_none</a>(*<a class=\"id\" href=\"#pte\">pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vm_normal_page\">vm_normal_page</a>(<a class=\"id\" href=\"#gate_vma\">gate_vma</a>, <a class=\"id\" href=\"#start\">start</a>, *<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gup_flags\">gup_flags</a> &amp; <a class=\"id\" href=\"#FOLL_DUMP\">FOLL_DUMP</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#is_zero_pfn\">is_zero_pfn</a>(<a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#pte\">pte</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(*<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vmas\">vmas</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmas\">vmas</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#gate_vma\">gate_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_IO\">VM_IO</a> | <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#follow_hugetlb_page\">follow_hugetlb_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#vmas\">vmas</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#gup_flags\">gup_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#foll_flags\">foll_flags</a> = <a class=\"id\" href=\"#gup_flags\">gup_flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we have a pending SIGKILL, don't keep faulting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pages and potentially allocating memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? <a class=\"id\" href=\"#i\">i</a> : -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (!(<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_page\">follow_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#foll_flags\">foll_flags</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#handle_mm_fault\">handle_mm_fault</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#foll_flags\">foll_flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a> : 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#VM_FAULT_ERROR\">VM_FAULT_ERROR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? <a class=\"id\" href=\"#i\">i</a> : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a>|<a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? <a class=\"id\" href=\"#i\">i</a> : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#VM_FAULT_MAJOR\">VM_FAULT_MAJOR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#maj_flt\">maj_flt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#min_flt\">min_flt</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The VM_FAULT_WRITE bit tells us that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * do_wp_page has broken COW when necessary,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * even if maybe_mkwrite decided not to set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pte_write. We can thus safely do subsequent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page lookups as if they were reads. But only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * do so when looping for pte_write is futile:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * in some cases userspace may also be wanting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to write to the gotten user page, which a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * read fault here might prevent (a readonly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page might get reCOWed by userspace write).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#VM_FAULT_WRITE\">VM_FAULT_WRITE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#foll_flags\">foll_flags</a> &= ~<a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? <a class=\"id\" href=\"#i\">i</a> : <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_anon_page\">flush_anon_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vmas\">vmas</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmas\">vmas</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> && <a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_user_pages() - pin user pages in memory</span>", 
"<span class=\"comment\"> * @tsk:<span class=\"ts\"/>task_struct of target task</span>", 
"<span class=\"comment\"> * @mm:<span class=\"ts\"/><span class=\"ts\"/>mm_struct of target mm</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/>starting user address</span>", 
"<span class=\"comment\"> * @nr_pages:<span class=\"ts\"/>number of pages from start to pin</span>", 
"<span class=\"comment\"> * @write:<span class=\"ts\"/>whether pages will be written to by the caller</span>", 
"<span class=\"comment\"> * @force:<span class=\"ts\"/>whether to force write access even if user mapping is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>readonly. This will result in the page being COWed even</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>in MAP_SHARED mappings. You do not want this.</span>", 
"<span class=\"comment\"> * @pages:<span class=\"ts\"/>array that receives pointers to the pages pinned.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Should be at least nr_pages long. Or NULL, if caller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>only intends to ensure the pages are faulted in.</span>", 
"<span class=\"comment\"> * @vmas:<span class=\"ts\"/>array of pointers to vmas corresponding to each page.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Or NULL if the caller does not require them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of pages pinned. This may be fewer than the number</span>", 
"<span class=\"comment\"> * requested. If nr_pages is 0 or negative, returns 0. If no pages</span>", 
"<span class=\"comment\"> * were pinned, returns -errno. Each page returned must be released</span>", 
"<span class=\"comment\"> * with a put_page() call when it is finished with. vmas will only</span>", 
"<span class=\"comment\"> * remain valid while mmap_sem is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with mmap_sem held for read or write.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * get_user_pages walks a process's page tables and takes a reference to</span>", 
"<span class=\"comment\"> * each struct page that each user address corresponds to at a given</span>", 
"<span class=\"comment\"> * instant. That is, it takes the page that would be accessed if a user</span>", 
"<span class=\"comment\"> * thread accesses the given user virtual address at that instant.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This does not guarantee that the page exists in the user mappings when</span>", 
"<span class=\"comment\"> * get_user_pages returns, and there may even be a completely different</span>", 
"<span class=\"comment\"> * page there in some cases (eg. if mmapped pagecache has been invalidated</span>", 
"<span class=\"comment\"> * and subsequently re faulted). However it does guarantee that the page</span>", 
"<span class=\"comment\"> * won't be freed completely. And mostly callers simply care that the page</span>", 
"<span class=\"comment\"> * contains data that was valid *at some point in time*. Typically, an IO</span>", 
"<span class=\"comment\"> * or similar operation cannot guarantee anything stronger anyway because</span>", 
"<span class=\"comment\"> * locks can't be held over the syscall boundary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If write=0, the page must not be written to. If the page is written to,</span>", 
"<span class=\"comment\"> * set_page_dirty (or set_page_dirty_lock, as appropriate) must be called</span>", 
"<span class=\"comment\"> * after the page is finished with, and before put_page is called.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * get_user_pages is typically used for fewer-copy IO operations, to get a</span>", 
"<span class=\"comment\"> * handle on the memory by some means other than accesses via the user virtual</span>", 
"<span class=\"comment\"> * addresses. The pages may be submitted for DMA to devices or accessed via</span>", 
"<span class=\"comment\"> * their kernel linear mapping (via the kmap APIs). Care should be taken to</span>", 
"<span class=\"comment\"> * use the correct cache flushing APIs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See also get_user_pages_fast, for performance critical applications.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, int <a class=\"id\" href=\"#write\">write</a>, int <a class=\"id\" href=\"#force\">force</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#vmas\">vmas</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#FOLL_TOUCH\">FOLL_TOUCH</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#force\">force</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FOLL_FORCE\">FOLL_FORCE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_user_pages\">__get_user_pages</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#vmas\">vmas</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_dump_page() - pin user page in memory while writing it to core dump</span>", 
"<span class=\"comment\"> * @addr: user address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns struct page pointer of user page pinned for dump,</span>", 
"<span class=\"comment\"> * to be freed afterwards by page_cache_release() or put_page().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns NULL on any kind of failure - a hole must then be inserted into</span>", 
"<span class=\"comment\"> * the corefile, to preserve alignment with its headers; and also returns</span>", 
"<span class=\"comment\"> * NULL wherever the ZERO_PAGE, or an anonymous pte_none, has been found -</span>", 
"<span class=\"comment\"> * allowing a hole to be left in the corefile to save diskspace.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called without mmap_sem, but after all other threads have been killed.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ELF_CORE\">CONFIG_ELF_CORE</a>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#get_dump_page\">get_dump_page</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_user_pages\">__get_user_pages</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FOLL_FORCE\">FOLL_FORCE</a> | <a class=\"id\" href=\"#FOLL_DUMP\">FOLL_DUMP</a> | <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>, &amp;<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>) &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_page\">flush_cache_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ELF_CORE */</span>", 
"", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#get_locked_pte\">get_locked_pte</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> **<a class=\"id\" href=\"#ptl\">ptl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> * <a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> * <a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_alloc\">pud_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud\">pud</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> * <a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_alloc\">pmd_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pte_alloc_map_lock\">pte_alloc_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the old fallback for page remapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For historical reasons, it only allows reserved pages. Only</span>", 
"<span class=\"comment\"> * old drivers should use this, and they needed to mark their</span>", 
"<span class=\"comment\"> * pages reserved for the old functions anyway.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#insert_page\">insert_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#get_locked_pte\">get_locked_pte</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_none\">pte_none</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, finally just insert the thing.. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_mm_counter_fast\">inc_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_FILEPAGES\">MM_FILEPAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_add_file_rmap\">page_add_file_rmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#prot\">prot</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vm_insert_page - insert single page into user vma</span>", 
"<span class=\"comment\"> * @vma: user vma to map to</span>", 
"<span class=\"comment\"> * @addr: target user address of this page</span>", 
"<span class=\"comment\"> * @page: source kernel page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This allows drivers to insert individual pages they've allocated</span>", 
"<span class=\"comment\"> * into a user vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The page has to be a nice clean _individual_ kernel allocation.</span>", 
"<span class=\"comment\"> * If you allocate a compound page, you need to have marked it as</span>", 
"<span class=\"comment\"> * such (__GFP_COMP), or manually just split the page up yourself</span>", 
"<span class=\"comment\"> * (see split_page()).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! Traditionally this was done with \"remap_pfn_range()\" which</span>", 
"<span class=\"comment\"> * took an arbitrary page protection parameter. This doesn't allow</span>", 
"<span class=\"comment\"> * that. Your vma protection will have to be set up correctly, which</span>", 
"<span class=\"comment\"> * means that if you want a shared writable mapping, you'd better</span>", 
"<span class=\"comment\"> * ask for a shared writable mapping!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The page does not need to be reserved.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vm_insert_page\">vm_insert_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> || <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_INSERTPAGE\">VM_INSERTPAGE</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insert_page\">insert_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vm_insert_page\">vm_insert_page</a>);", 
"", 
"static int <a class=\"id\" href=\"#insert_pfn\">insert_pfn</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#get_locked_pte\">get_locked_pte</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_none\">pte_none</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, finally just insert the thing.. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkspecial\">pte_mkspecial</a>(<a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#prot\">prot</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>); <span class=\"comment\">/* XXX: why not for insert_page? */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vm_insert_pfn - insert single pfn into user vma</span>", 
"<span class=\"comment\"> * @vma: user vma to map to</span>", 
"<span class=\"comment\"> * @addr: target user address of this page</span>", 
"<span class=\"comment\"> * @pfn: source kernel pfn</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similar to vm_inert_page, this allows drivers to insert individual pages</span>", 
"<span class=\"comment\"> * they've allocated into a user vma. Same comments apply.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should only be called from a vm_ops-&gt;fault handler, and</span>", 
"<span class=\"comment\"> * in that case the handler should return NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vma cannot be a COW mapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As this is called only for pages that do not currently exist, we</span>", 
"<span class=\"comment\"> * do not need to flush old virtual caches or the TLB.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vm_insert_pfn\">vm_insert_pfn</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#pgprot\">pgprot</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Technically, architectures with pte_special can avoid all these</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * restrictions (same for remap_pfn_range).  However we would like</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * consistency in testing and feature parity among all, so we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try to keep these invariants in place for everybody.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>|<a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>|<a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a>)) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>|<a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>) && <a class=\"id\" href=\"#is_cow_mapping\">is_cow_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a>) && <a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> || <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#track_pfn_vma_new\">track_pfn_vma_new</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#pgprot\">pgprot</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#insert_pfn\">insert_pfn</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#pgprot\">pgprot</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#untrack_pfn_vma\">untrack_pfn_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vm_insert_pfn\">vm_insert_pfn</a>);", 
"", 
"int <a class=\"id\" href=\"#vm_insert_mixed\">vm_insert_mixed</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> || <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we don't have pte special, then we have to use the pfn_valid()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * based VM_MIXEDMAP scheme (see vm_normal_page), and thus we *must*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * refcount the page if pfn_valid is true (hence insert_page rather</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than insert_pfn).  If a zero_pfn were inserted into a VM_MIXEDMAP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without pte special, it would there be refcounted as a normal page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#HAVE_PTE_SPECIAL\">HAVE_PTE_SPECIAL</a> && <a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#insert_page\">insert_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insert_pfn\">insert_pfn</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vm_insert_mixed\">vm_insert_mixed</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * maps a range of physical memory into the requested pages. the old</span>", 
"<span class=\"comment\"> * mappings are removed. any references to nonexistent pages results</span>", 
"<span class=\"comment\"> * in null mappings (currently treated as \"copy-on-access\")</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#remap_pte_range\">remap_pte_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_alloc_map_lock\">pte_alloc_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_enter_lazy_mmu_mode\">arch_enter_lazy_mmu_mode</a>();", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#pte_none\">pte_none</a>(*<a class=\"id\" href=\"#pte\">pte</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pte_mkspecial\">pte_mkspecial</a>(<a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#prot\">prot</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pte\">pte</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_leave_lazy_mmu_mode\">arch_leave_lazy_mmu_mode</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a> - 1, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#remap_pmd_range\">remap_pmd_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> -= <a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_alloc\">pmd_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pmd_addr_end\">pmd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remap_pte_range\">remap_pte_range</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> + (<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>), <a class=\"id\" href=\"#prot\">prot</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pmd\">pmd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#remap_pud_range\">remap_pud_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> -= <a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_alloc\">pud_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud\">pud</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pud_addr_end\">pud_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remap_pmd_range\">remap_pmd_range</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> + (<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>), <a class=\"id\" href=\"#prot\">prot</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pud\">pud</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * remap_pfn_range - remap kernel memory to userspace</span>", 
"<span class=\"comment\"> * @vma: user vma to map to</span>", 
"<span class=\"comment\"> * @addr: target user address to start at</span>", 
"<span class=\"comment\"> * @pfn: physical address of kernel memory</span>", 
"<span class=\"comment\"> * @size: size of map area</span>", 
"<span class=\"comment\"> * @prot: page protection flags for this mapping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Note: this is only safe if the mm semaphore is held when called.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#remap_pfn_range\">remap_pfn_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Physically remapped pages are special. Tell the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rest of the world about it:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   VM_IO tells people not to look at these pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>(accesses can have side effects).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   VM_RESERVED is specified all over the place, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>in 2.4 it kept swapout's vma scan off this vma; but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>in 2.6 the LRU scan won't even find its pages, so this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>flag means no more than count its pages in reserved_vm,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>and omit it from core dump, even when VM_IO turned off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   VM_PFNMAP tells the core MM that the base pages are just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>raw PFN mappings, and do not have a \"struct page\" associated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>with them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There's a horrible special case to handle copy-on-write</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * behaviour that some programs depend on. We mark the \"original\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * un-COW'ed pages by matching them up with \"vma-&gt;vm_pgoff\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> && <a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_PFN_AT_MMAP\">VM_PFN_AT_MMAP</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#is_cow_mapping\">is_cow_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_IO\">VM_IO</a> | <a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a> | <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#track_pfn_vma_new\">track_pfn_vma_new</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * To indicate that track_pfn related cleanup is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * needed from higher level routine calling unmap_vmas</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~(<a class=\"id\" href=\"#VM_IO\">VM_IO</a> | <a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a> | <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~<a class=\"id\" href=\"#VM_PFN_AT_MMAP\">VM_PFN_AT_MMAP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> -= <a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_range\">flush_cache_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pgd_addr_end\">pgd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#remap_pud_range\">remap_pud_range</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> + (<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>), <a class=\"id\" href=\"#prot\">prot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pgd\">pgd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#untrack_pfn_vma\">untrack_pfn_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#remap_pfn_range\">remap_pfn_range</a>);", 
"", 
"static int <a class=\"id\" href=\"#apply_to_pte_range\">apply_to_pte_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pte_fn_t\">pte_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgtable_t\">pgtable_t</a> <a class=\"id\" href=\"#token\">token</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = (<a class=\"id\" href=\"#mm\">mm</a> == &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_alloc_kernel\">pte_alloc_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_alloc_map_lock\">pte_alloc_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pmd_huge\">pmd_huge</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_enter_lazy_mmu_mode\">arch_enter_lazy_mmu_mode</a>();", 
];
xr_frag_insert('l/d6/c0409de9df1ea8d29669d8ddeb44dcf30d7030.xr', __xr_tmp);
