var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext3/fsync.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1993  Stephen Tweedie (sct@redhat.com)</span>", 
"<span class=\"comment\"> *  from</span>", 
"<span class=\"comment\"> *  Copyright (C) 1992  Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> *                      Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> *                      Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *  from</span>", 
"<span class=\"comment\"> *  linux/fs/minix/truncate.c   Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  ext3fs fsync primitive</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Big-endian to little-endian byte-swapping/bitmaps by</span>", 
"<span class=\"comment\"> *        David S. Miller (davem@caip.rutgers.edu), 1995</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Removed unnecessary code duplication for little endian machines</span>", 
"<span class=\"comment\"> *  and excessive __inline__s.</span>", 
"<span class=\"comment\"> *        Andi Kleen, 1997</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Major simplications and cleanup - we only need to do the metadata, because</span>", 
"<span class=\"comment\"> * we can depend on generic_block_fdatasync() to sync the data blocks.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd\">jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ext3_fs\">ext3_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ext3_jbd\">ext3_jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * akpm: A new design for ext3_sync_file().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is only called from sys_fsync(), sys_fdatasync() and sys_msync().</span>", 
"<span class=\"comment\"> * There cannot be a transaction open by this task.</span>", 
"<span class=\"comment\"> * Another task could have dirtied this inode.  Its data can be in any</span>", 
"<span class=\"comment\"> * state in the journalling system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * What we do is just kick off a commit and wait on it.  This will snapshot the</span>", 
"<span class=\"comment\"> * inode to disk.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#ext3_sync_file\">ext3_sync_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#datasync\">datasync</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_journal\">s_journal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#needs_barrier\">needs_barrier</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tid_t\">tid_t</a> <a class=\"id\" href=\"#commit_tid\">commit_tid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#ext3_journal_current_handle\">ext3_journal_current_handle</a>() == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data=writeback,ordered:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  The caller's filemap_fdatawrite()/wait will sync the data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  Metadata is in the journal, we wait for a proper transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  to commit here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data=journal:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  filemap_fdatawrite won't do anything (the buffers are clean).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  ext3_force_commit will write the file data into the journal and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  will wait on that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  filemap_fdatawait() will encounter a ton of newly-dirtied pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  (they were dirtied by commit).  But that's OK - the blocks are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  safe in-journal, which is all fsync() needs to ensure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_should_journal_data\">ext3_should_journal_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ext3_force_commit\">ext3_force_commit</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#datasync\">datasync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_tid\">commit_tid</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_datasync_tid\">i_datasync_tid</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_tid\">commit_tid</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_sync_tid\">i_sync_tid</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#BARRIER\">BARRIER</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#journal_trans_will_send_data_barrier\">journal_trans_will_send_data_barrier</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#commit_tid\">commit_tid</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needs_barrier\">needs_barrier</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#log_start_commit\">log_start_commit</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#commit_tid\">commit_tid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#log_wait_commit\">log_wait_commit</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#commit_tid\">commit_tid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case we didn't commit a transaction, we have to flush</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disk caches manually so that data really is on persistent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * storage</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needs_barrier\">needs_barrier</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blkdev_issue_flush\">blkdev_issue_flush</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BLKDEV_IFL_WAIT\">BLKDEV_IFL_WAIT</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
];
xr_frag_insert('l/d7/656b8b989c3f5084cfcdc3c0e6d47f404a06fe.xr', __xr_tmp);
