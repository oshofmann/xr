var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#LIST_POISON2\">LIST_POISON2</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_add_head_rcu</span>", 
"<span class=\"comment\"> * @n: the element to add to the hash list.</span>", 
"<span class=\"comment\"> * @h: the list to add to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Adds the specified element to the specified hlist,</span>", 
"<span class=\"comment\"> * while permitting racing traversals.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must take whatever precautions are necessary</span>", 
"<span class=\"comment\"> * (such as holding appropriate locks) to avoid racing</span>", 
"<span class=\"comment\"> * with another list-mutation primitive, such as hlist_add_head_rcu()</span>", 
"<span class=\"comment\"> * or hlist_del_rcu(), running on this same list.</span>", 
"<span class=\"comment\"> * However, it is perfectly legal to run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-traversal primitives, such as</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_rcu(), used to prevent memory-consistency</span>", 
"<span class=\"comment\"> * problems on Alpha CPUs.  Regardless of the type of CPU, the</span>", 
"<span class=\"comment\"> * list-traversal primitive must be guarded by rcu_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_add_before_rcu</span>", 
"<span class=\"comment\"> * @n: the new element to add to the hash list.</span>", 
"<span class=\"comment\"> * @next: the existing element to add the new element before.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Adds the specified element to the specified hlist</span>", 
"<span class=\"comment\"> * before the specified node while permitting racing traversals.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must take whatever precautions are necessary</span>", 
"<span class=\"comment\"> * (such as holding appropriate locks) to avoid racing</span>", 
"<span class=\"comment\"> * with another list-mutation primitive, such as hlist_add_head_rcu()</span>", 
"<span class=\"comment\"> * or hlist_del_rcu(), running on this same list.</span>", 
"<span class=\"comment\"> * However, it is perfectly legal to run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-traversal primitives, such as</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_rcu(), used to prevent memory-consistency</span>", 
"<span class=\"comment\"> * problems on Alpha CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_add_before_rcu\">hlist_add_before_rcu</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pprev\">pprev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(*(<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a>), <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_add_after_rcu</span>", 
"<span class=\"comment\"> * @prev: the existing element to add the new element after.</span>", 
"<span class=\"comment\"> * @n: the new element to add to the hash list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Adds the specified element to the specified hlist</span>", 
"<span class=\"comment\"> * after the specified node while permitting racing traversals.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must take whatever precautions are necessary</span>", 
"<span class=\"comment\"> * (such as holding appropriate locks) to avoid racing</span>", 
"<span class=\"comment\"> * with another list-mutation primitive, such as hlist_add_head_rcu()</span>", 
"<span class=\"comment\"> * or hlist_del_rcu(), running on this same list.</span>", 
"<span class=\"comment\"> * However, it is perfectly legal to run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-traversal primitives, such as</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_rcu(), used to prevent memory-consistency</span>", 
"<span class=\"comment\"> * problems on Alpha CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_add_after_rcu\">hlist_add_after_rcu</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__hlist_for_each_rcu\">__hlist_for_each_rcu</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#first\">first</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>); 1; });<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_rcu - iterate over rcu list of given type</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This list-traversal primitive may safely run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-mutation primitives such as hlist_add_head_rcu()</span>", 
"<span class=\"comment\"> * as long as the traversal is guarded by rcu_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#first\">first</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>); 1; }) &&<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1; }); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_rcu_bh - iterate over rcu list of given type</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This list-traversal primitive may safely run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-mutation primitives such as hlist_add_head_rcu()</span>", 
"<span class=\"comment\"> * as long as the traversal is guarded by rcu_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each_entry_rcu_bh\">hlist_for_each_entry_rcu_bh</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference_bh\">rcu_dereference_bh</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#first\">first</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>); 1; }) &&<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1; }); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference_bh\">rcu_dereference_bh</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_continue_rcu - iterate over a hlist continuing after current point</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each_entry_continue_rcu\">hlist_for_each_entry_continue_rcu</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>((<a class=\"id\" href=\"#pos\">pos</a>)-><a class=\"id\" href=\"#next\">next</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>); 1; }) &&<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     ({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1; });  \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_continue_rcu_bh - iterate over a hlist continuing after current point</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each_entry_continue_rcu_bh\">hlist_for_each_entry_continue_rcu_bh</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference_bh\">rcu_dereference_bh</a>((<a class=\"id\" href=\"#pos\">pos</a>)-><a class=\"id\" href=\"#next\">next</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>); 1; }) &&<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     ({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1; });  \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference_bh\">rcu_dereference_bh</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>))", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/d7/7cf87ae2ce27657e97c5de283c3bed1e15fa0c.xr', __xr_tmp);
