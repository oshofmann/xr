var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__GENERIC_IO_H\">__GENERIC_IO_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GENERIC_IO_H\">__GENERIC_IO_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the \"generic\" interfaces for doing new-style</span>", 
"<span class=\"comment\"> * memory-mapped or PIO accesses. Architectures may do</span>", 
"<span class=\"comment\"> * their own arch-optimized versions, these just act as</span>", 
"<span class=\"comment\"> * wrappers around the old-style IO register access functions:</span>", 
"<span class=\"comment\"> * read[bwl]/write[bwl]/in[bwl]/out[bwl]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Don't include this directly, include it from &lt;asm/io.h&gt;.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read/write from/to an (offsettable) iomem cookie. It might be a PIO</span>", 
"<span class=\"comment\"> * access or a MMIO access, these functions don't care. The info is</span>", 
"<span class=\"comment\"> * encoded in the hardware mapping set up by the mapping functions</span>", 
"<span class=\"comment\"> * (or the cookie itself, depending on implementation and hw).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The generic routines just encode the PIO/MMIO as part of the</span>", 
"<span class=\"comment\"> * cookie, and coldly assume that the MMIO IO mappings are not</span>", 
"<span class=\"comment\"> * in the low address range. Architectures for which this is not</span>", 
"<span class=\"comment\"> * true can't use this generic implementation.</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned int <a class=\"id\" href=\"#ioread8\">ioread8</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"extern unsigned int <a class=\"id\" href=\"#ioread16\">ioread16</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"extern unsigned int <a class=\"id\" href=\"#ioread16be\">ioread16be</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"extern unsigned int <a class=\"id\" href=\"#ioread32\">ioread32</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"extern unsigned int <a class=\"id\" href=\"#ioread32be\">ioread32be</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"", 
"extern void <a class=\"id\" href=\"#iowrite8\">iowrite8</a>(<a class=\"id\" href=\"#u8\">u8</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"extern void <a class=\"id\" href=\"#iowrite16\">iowrite16</a>(<a class=\"id\" href=\"#u16\">u16</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"extern void <a class=\"id\" href=\"#iowrite16be\">iowrite16be</a>(<a class=\"id\" href=\"#u16\">u16</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"extern void <a class=\"id\" href=\"#iowrite32\">iowrite32</a>(<a class=\"id\" href=\"#u32\">u32</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"extern void <a class=\"id\" href=\"#iowrite32be\">iowrite32be</a>(<a class=\"id\" href=\"#u32\">u32</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * \"string\" versions of the above. Note that they</span>", 
"<span class=\"comment\"> * use native byte ordering for the accesses (on</span>", 
"<span class=\"comment\"> * the assumption that IO and memory agree on a</span>", 
"<span class=\"comment\"> * byte order, and CPU byteorder is irrelevant).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * They do _not_ update the port address. If you</span>", 
"<span class=\"comment\"> * want MMIO that copies stuff laid out in MMIO</span>", 
"<span class=\"comment\"> * memory across multiple ports, use \"memcpy_toio()\"</span>", 
"<span class=\"comment\"> * and friends.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#ioread8_rep\">ioread8_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#port\">port</a>, void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>);", 
"extern void <a class=\"id\" href=\"#ioread16_rep\">ioread16_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#port\">port</a>, void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>);", 
"extern void <a class=\"id\" href=\"#ioread32_rep\">ioread32_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#port\">port</a>, void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"extern void <a class=\"id\" href=\"#iowrite8_rep\">iowrite8_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#port\">port</a>, const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>);", 
"extern void <a class=\"id\" href=\"#iowrite16_rep\">iowrite16_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#port\">port</a>, const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>);", 
"extern void <a class=\"id\" href=\"#iowrite32_rep\">iowrite32_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#port\">port</a>, const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"comment\">/* Create a virtual mapping cookie for an IO port range */</span>", 
"extern void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioport_map\">ioport_map</a>(unsigned long <a class=\"id\" href=\"#port\">port</a>, unsigned int <a class=\"id\" href=\"#nr\">nr</a>);", 
"extern void <a class=\"id\" href=\"#ioport_unmap\">ioport_unmap</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_IOREMAP_WC\">ARCH_HAS_IOREMAP_WC</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ioremap_wc\">ioremap_wc</a> <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Create a virtual mapping cookie for a PCI BAR (memory or IO) */</span>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a>;", 
"extern void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#pci_iomap\">pci_iomap</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#bar\">bar</a>, unsigned long <a class=\"id\" href=\"#max\">max</a>);", 
"extern void <a class=\"id\" href=\"#pci_iounmap\">pci_iounmap</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/d7/9353f5dd6d333c9d52920c83606085a928ba32.xr', __xr_tmp);
