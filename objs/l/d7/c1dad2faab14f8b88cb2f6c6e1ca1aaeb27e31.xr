var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Operations on the network namespace</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__NET_NET_NAMESPACE_H\">__NET_NET_NAMESPACE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__NET_NET_NAMESPACE_H\">__NET_NET_NAMESPACE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#core\">core</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#mib\">mib</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#unix\">unix</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#packet\">packet</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#dccp\">dccp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#x_tables\">x_tables</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#conntrack\">conntrack</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#xfrm\">xfrm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a>;", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a>;", 
"struct <a class=\"id\" href=\"#sock\">sock</a>;", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a>;", 
"struct <a class=\"id\" href=\"#net_generic\">net_generic</a>;", 
"struct <a class=\"id\" href=\"#sock\">sock</a>;", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_HASHBITS\">NETDEV_HASHBITS</a>    8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_HASHENTRIES\">NETDEV_HASHENTRIES</a> (1 << <a class=\"id\" href=\"#NETDEV_HASHBITS\">NETDEV_HASHBITS</a>)", 
"", 
"struct <a class=\"id\" href=\"#net\">net</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* To decided when the network</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *  namespace should be freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NETNS_REFCNT_DEBUG\">NETNS_REFCNT_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#use_count\">use_count</a>;<span class=\"ts\"/><span class=\"comment\">/* To track references we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * destroy on demand</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* list of network namespaces */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#cleanup_list\">cleanup_list</a>;<span class=\"ts\"/><span class=\"comment\">/* namespaces on death row */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#exit_list\">exit_list</a>;<span class=\"ts\"/><span class=\"comment\">/* Use only net_mutex */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> <span class=\"ts\"/>*<a class=\"id\" href=\"#proc_net\">proc_net</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> <span class=\"ts\"/>*<a class=\"id\" href=\"#proc_net_stat\">proc_net_stat</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a><span class=\"ts\"/><a class=\"id\" href=\"#sysctls\">sysctls</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a>       *<a class=\"id\" href=\"#loopback_dev\">loopback_dev</a>;          <span class=\"comment\">/* The loopback */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <span class=\"ts\"/><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <span class=\"ts\"/>*<a class=\"id\" href=\"#dev_name_head\">dev_name_head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev_index_head\">dev_index_head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* core fib_rules */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#rules_ops\">rules_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rules_mod_lock\">rules_mod_lock</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> <span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rtnl\">rtnl</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* rtnetlink socket */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#genl_sock\">genl_sock</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_core\">netns_core</a><span class=\"ts\"/><a class=\"id\" href=\"#core\">core</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_mib\">netns_mib</a><span class=\"ts\"/><a class=\"id\" href=\"#mib\">mib</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_packet\">netns_packet</a><span class=\"ts\"/><a class=\"id\" href=\"#packet\">packet</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_unix\">netns_unix</a><span class=\"ts\"/><a class=\"id\" href=\"#unx\">unx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_ipv4\">netns_ipv4</a><span class=\"ts\"/><a class=\"id\" href=\"#ipv4\">ipv4</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_ipv6\">netns_ipv6</a><span class=\"ts\"/><a class=\"id\" href=\"#ipv6\">ipv6</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IP_DCCP\">CONFIG_IP_DCCP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IP_DCCP_MODULE\">CONFIG_IP_DCCP_MODULE</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_dccp\">netns_dccp</a><span class=\"ts\"/><a class=\"id\" href=\"#dccp\">dccp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETFILTER\">CONFIG_NETFILTER</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_xt\">netns_xt</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xt\">xt</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_ct\">netns_ct</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ct\">ct</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nfnl\">nfnl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nfnl_stash\">nfnl_stash</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XFRM\">CONFIG_XFRM</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_xfrm\">netns_xfrm</a><span class=\"ts\"/><a class=\"id\" href=\"#xfrm\">xfrm</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_WEXT_CORE\">CONFIG_WEXT_CORE</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a><span class=\"ts\"/><a class=\"id\" href=\"#wext_nlevents\">wext_nlevents</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_generic\">net_generic</a><span class=\"ts\"/>*<a class=\"id\" href=\"#gen\">gen</a>;", 
"};", 
"", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file_net\">seq_file_net</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Init's network namespace */</span>", 
"extern struct <a class=\"id\" href=\"#net\">net</a> <a class=\"id\" href=\"#init_net\">init_net</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET\">CONFIG_NET</a>", 
"extern struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#copy_net_ns\">copy_net_ns</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net_ns\">net_ns</a>);", 
"", 
"#else <span class=\"comment\">/* CONFIG_NET */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#copy_net_ns\">copy_net_ns</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net_ns\">net_ns</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* There is nothing to copy so this is a noop */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net_ns\">net_ns</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NET */</span>", 
"", 
"", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#net_namespace_list\">net_namespace_list</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#get_net_ns_by_pid\">get_net_ns_by_pid</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"extern void <a class=\"id\" href=\"#__put_net\">__put_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#get_net\">get_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#maybe_get_net\">maybe_get_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Used when we know struct net exists but we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * aren't guaranteed a previous reference count</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exists.  If the reference count is zero this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function fails and returns NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_net\">put_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_net\">__put_net</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#net_eq\">net_eq</a>(const struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net1\">net1</a>, const struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net2\">net2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net1\">net1</a> == <a class=\"id\" href=\"#net2\">net2</a>;", 
"}", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#get_net\">get_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_net\">put_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#maybe_get_net\">maybe_get_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#net_eq\">net_eq</a>(const struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net1\">net1</a>, const struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net2\">net2</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NETNS_REFCNT_DEBUG\">NETNS_REFCNT_DEBUG</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#hold_net\">hold_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net\">net</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#use_count\">use_count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#release_net\">release_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net\">net</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#use_count\">use_count</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#hold_net\">hold_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#release_net\">release_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#write_pnet\">write_pnet</a>(struct <a class=\"id\" href=\"#net\">net</a> **<a class=\"id\" href=\"#pnet\">pnet</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pnet\">pnet</a> = <a class=\"id\" href=\"#net\">net</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#read_pnet\">read_pnet</a>(struct <a class=\"id\" href=\"#net\">net</a> * const *<a class=\"id\" href=\"#pnet\">pnet</a>)", 
"{", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#pnet\">pnet</a>;", 
"}", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_pnet\">write_pnet</a>(<a class=\"id\" href=\"#pnet\">pnet</a>, <a class=\"id\" href=\"#net\">net</a>)<span class=\"ts\"/>do { (void)(<a class=\"id\" href=\"#net\">net</a>);} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_pnet\">read_pnet</a>(<a class=\"id\" href=\"#pnet\">pnet</a>)<span class=\"ts\"/><span class=\"ts\"/>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_net\">for_each_net</a>(<a class=\"id\" href=\"#VAR\">VAR</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#VAR\">VAR</a>, &amp;<a class=\"id\" href=\"#net_namespace_list\">net_namespace_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_net_rcu\">for_each_net_rcu</a>(<a class=\"id\" href=\"#VAR\">VAR</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#VAR\">VAR</a>, &amp;<a class=\"id\" href=\"#net_namespace_list\">net_namespace_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__net_init\">__net_init</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__net_exit\">__net_exit</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__net_initdata\">__net_initdata</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__net_init\">__net_init</a><span class=\"ts\"/><a class=\"id\" href=\"#__init\">__init</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__net_exit\">__net_exit</a><span class=\"ts\"/><a class=\"id\" href=\"#__exit_refok\">__exit_refok</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__net_initdata\">__net_initdata</a><span class=\"ts\"/><a class=\"id\" href=\"#__initdata\">__initdata</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#init\">init</a>)(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#exit\">exit</a>)(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#exit_batch\">exit_batch</a>)(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use these carefully.  If you implement a network device and it</span>", 
"<span class=\"comment\"> * needs per network namespace operations use device pernet operations,</span>", 
"<span class=\"comment\"> * otherwise use pernet subsys operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Network interfaces need to be removed from a dying netns _before_</span>", 
"<span class=\"comment\"> * subsys notifiers can be called, as most of the network code cleanup</span>", 
"<span class=\"comment\"> * (which is done from subsys notifiers) runs with the assumption that</span>", 
"<span class=\"comment\"> * dev_remove_pack has been called so no new packets will arrive during</span>", 
"<span class=\"comment\"> * and after the cleanup functions have been called.  dev_remove_pack</span>", 
"<span class=\"comment\"> * is not per namespace so instead the guarantee of no more packets</span>", 
"<span class=\"comment\"> * arriving in a network namespace is provided by ensuring that all</span>", 
"<span class=\"comment\"> * network devices and all sockets have left the network namespace</span>", 
"<span class=\"comment\"> * before the cleanup methods are called.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For the longest time the ipv4 icmp code was registered as a pernet</span>", 
"<span class=\"comment\"> * device which caused kernel oops, and panics during network</span>", 
"<span class=\"comment\"> * namespace cleanup.   So please don't get this wrong.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#register_pernet_subsys\">register_pernet_subsys</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *);", 
"extern void <a class=\"id\" href=\"#unregister_pernet_subsys\">unregister_pernet_subsys</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *);", 
"extern int <a class=\"id\" href=\"#register_pernet_device\">register_pernet_device</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *);", 
"extern void <a class=\"id\" href=\"#unregister_pernet_device\">unregister_pernet_device</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *);", 
"", 
"struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a>;", 
"struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a>;", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#register_net_sysctl_table\">register_net_sysctl_table</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>);", 
"extern struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#register_net_sysctl_rotable\">register_net_sysctl_rotable</a>(", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>);", 
"extern void <a class=\"id\" href=\"#unregister_net_sysctl_table\">unregister_net_sysctl_table</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#header\">header</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __NET_NET_NAMESPACE_H */</span>", 
];
xr_frag_insert('l/d7/c1dad2faab14f8b88cb2f6c6e1ca1aaeb27e31.xr', __xr_tmp);
