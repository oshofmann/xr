var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi_pmtmr\">acpi_pmtmr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpufreq\">cpufreq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clocksource\">clocksource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#hpet\">hpet</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#vgtod\">vgtod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#hypervisor\">hypervisor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"unsigned int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>;<span class=\"ts\"/><span class=\"comment\">/* TSC clocks / usec, not used here */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#tsc_khz\">tsc_khz</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tsc_khz\">tsc_khz</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TSC can be unstable due to cpufreq or due to unsynced TSCs</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#tsc_unstable\">tsc_unstable</a>;", 
"", 
"<span class=\"comment\">/* native_sched_clock() is called before tsc_init(), so</span>", 
"<span class=\"comment\">   we must start with the TSC soft disabled to prevent</span>", 
"<span class=\"comment\">   erroneous rdtsc usage on !cpu_has_tsc processors */</span>", 
"static int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#tsc_disabled\">tsc_disabled</a> = -1;", 
"", 
"static int <a class=\"id\" href=\"#tsc_clocksource_reliable\">tsc_clocksource_reliable</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scheduler clock - returns current time in nanosec units.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#native_sched_clock\">native_sched_clock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#this_offset\">this_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fall back to jiffies if there's no TSC available:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ( But note that we still use it if the TSC is marked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   unstable. We do this because unlike Time Of Day,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   the scheduler clock tolerates small errors and it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   very important for it to be as fast as the platform</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   can achieve it. )</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tsc_disabled\">tsc_disabled</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No locking but a rare wrong value is not a big deal: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#jiffies_64\">jiffies_64</a> - <a class=\"id\" href=\"#INITIAL_JIFFIES\">INITIAL_JIFFIES</a>) * (1000000000 / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read the Time Stamp Counter: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtscll\">rdtscll</a>(<a class=\"id\" href=\"#this_offset\">this_offset</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* return the value in ns */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__cycles_2_ns\">__cycles_2_ns</a>(<a class=\"id\" href=\"#this_offset\">this_offset</a>);", 
"}", 
"", 
"<span class=\"comment\">/* We need to define a real function for sched_clock, to override the</span>", 
"<span class=\"comment\">   weak default version */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT\">CONFIG_PARAVIRT</a>", 
"unsigned long long <a class=\"id\" href=\"#sched_clock\">sched_clock</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#paravirt_sched_clock\">paravirt_sched_clock</a>();", 
"}", 
"#else", 
"unsigned long long", 
"<a class=\"id\" href=\"#sched_clock\">sched_clock</a>(void) <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#alias\">alias</a>(\"native_sched_clock\")));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#check_tsc_unstable\">check_tsc_unstable</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tsc_unstable\">tsc_unstable</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#check_tsc_unstable\">check_tsc_unstable</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_TSC\">CONFIG_X86_TSC</a>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#notsc_setup\">notsc_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"notsc: Kernel compiled with CONFIG_X86_TSC, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"cannot disable TSC completely.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsc_disabled\">tsc_disabled</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * disable flag for tsc. Takes effect by clearing the TSC cpu flag</span>", 
"<span class=\"comment\"> * in cpu/common.c</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#notsc_setup\">notsc_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_TSC\">X86_FEATURE_TSC</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"notsc\", <a class=\"id\" href=\"#notsc_setup\">notsc_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#tsc_setup\">tsc_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"reliable\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_clocksource_reliable\">tsc_clocksource_reliable</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"tsc=\", <a class=\"id\" href=\"#tsc_setup\">tsc_setup</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_RETRIES\">MAX_RETRIES</a>     5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMI_TRESHOLD\">SMI_TRESHOLD</a>    50000", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read TSC and the reference counters. Take care of SMI disturbance</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tsc_read_refs\">tsc_read_refs</a>(<a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#hpet\">hpet</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#t1\">t1</a>, <a class=\"id\" href=\"#t2\">t2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_RETRIES\">MAX_RETRIES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t1\">t1</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hpet\">hpet</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#hpet_readl\">hpet_readl</a>(<a class=\"id\" href=\"#HPET_COUNTER\">HPET_COUNTER</a>) &amp; 0xFFFFFFFF;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#acpi_pm_read_early\">acpi_pm_read_early</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t2\">t2</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#t2\">t2</a> - <a class=\"id\" href=\"#t1\">t1</a>) &lt; <a class=\"id\" href=\"#SMI_TRESHOLD\">SMI_TRESHOLD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t2\">t2</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the TSC frequency from HPET reference</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#calc_hpet_ref\">calc_hpet_ref</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#deltatsc\">deltatsc</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hpet1\">hpet1</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hpet2\">hpet2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hpet2\">hpet2</a> &lt; <a class=\"id\" href=\"#hpet1\">hpet1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hpet2\">hpet2</a> += 0x100000000ULL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hpet2\">hpet2</a> -= <a class=\"id\" href=\"#hpet1\">hpet1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#hpet2\">hpet2</a> * <a class=\"id\" href=\"#hpet_readl\">hpet_readl</a>(<a class=\"id\" href=\"#HPET_PERIOD\">HPET_PERIOD</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, 1000000);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#deltatsc\">deltatsc</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/>return (unsigned long) <a class=\"id\" href=\"#deltatsc\">deltatsc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the TSC frequency from PMTimer reference</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#calc_pmtimer_ref\">calc_pmtimer_ref</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#deltatsc\">deltatsc</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pm1\">pm1</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pm2\">pm2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pm1\">pm1</a> && !<a class=\"id\" href=\"#pm2\">pm2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm2\">pm2</a> &lt; <a class=\"id\" href=\"#pm1\">pm1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm2\">pm2</a> += (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#ACPI_PM_OVRRUN\">ACPI_PM_OVRRUN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm2\">pm2</a> -= <a class=\"id\" href=\"#pm1\">pm1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#pm2\">pm2</a> * 1000000000LL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#PMTMR_TICKS_PER_SEC\">PMTMR_TICKS_PER_SEC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#deltatsc\">deltatsc</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/>return (unsigned long) <a class=\"id\" href=\"#deltatsc\">deltatsc</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CAL_MS\">CAL_MS</a><span class=\"ts\"/><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CAL_LATCH\">CAL_LATCH</a><span class=\"ts\"/>(<a class=\"id\" href=\"#CLOCK_TICK_RATE\">CLOCK_TICK_RATE</a> / (1000 / <a class=\"id\" href=\"#CAL_MS\">CAL_MS</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CAL_PIT_LOOPS\">CAL_PIT_LOOPS</a><span class=\"ts\"/>1000", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CAL2_MS\">CAL2_MS</a><span class=\"ts\"/><span class=\"ts\"/>50", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CAL2_LATCH\">CAL2_LATCH</a><span class=\"ts\"/>(<a class=\"id\" href=\"#CLOCK_TICK_RATE\">CLOCK_TICK_RATE</a> / (1000 / <a class=\"id\" href=\"#CAL2_MS\">CAL2_MS</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CAL2_PIT_LOOPS\">CAL2_PIT_LOOPS</a><span class=\"ts\"/>5000", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to calibrate the TSC against the Programmable</span>", 
"<span class=\"comment\"> * Interrupt Timer and return the frequency of the TSC</span>", 
"<span class=\"comment\"> * in kHz.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return ULONG_MAX on failure to calibrate.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#pit_calibrate_tsc\">pit_calibrate_tsc</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#latch\">latch</a>, unsigned long <a class=\"id\" href=\"#ms\">ms</a>, int <a class=\"id\" href=\"#loopmin\">loopmin</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tsc\">tsc</a>, <a class=\"id\" href=\"#t1\">t1</a>, <a class=\"id\" href=\"#t2\">t2</a>, <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tscmin\">tscmin</a>, <a class=\"id\" href=\"#tscmax\">tscmax</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pitcnt\">pitcnt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the Gate high, disable speaker */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>((<a class=\"id\" href=\"#inb\">inb</a>(0x61) &amp; ~0x02) | 0x01, 0x61);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Setup CTC channel 2* for mode 0, (interrupt on terminal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * count mode), binary count. Set the latch register to 50ms</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (LSB then MSB) to begin countdown.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0xb0, 0x43);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#latch\">latch</a> &amp; 0xff, 0x42);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#latch\">latch</a> >> 8, 0x42);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsc\">tsc</a> = <a class=\"id\" href=\"#t1\">t1</a> = <a class=\"id\" href=\"#t2\">t2</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pitcnt\">pitcnt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tscmax\">tscmax</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tscmin\">tscmin</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#inb\">inb</a>(0x61) &amp; 0x20) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t2\">t2</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#t2\">t2</a> - <a class=\"id\" href=\"#tsc\">tsc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc\">tsc</a> = <a class=\"id\" href=\"#t2\">t2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long) <a class=\"id\" href=\"#delta\">delta</a> &lt; <a class=\"id\" href=\"#tscmin\">tscmin</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tscmin\">tscmin</a> = (unsigned int) <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long) <a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#tscmax\">tscmax</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tscmax\">tscmax</a> = (unsigned int) <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pitcnt\">pitcnt</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sanity checks:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we were not able to read the PIT more than loopmin</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * times, then we have been hit by a massive SMI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the maximum is 10 times larger than the minimum,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we got hit by an SMI as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pitcnt\">pitcnt</a> &lt; <a class=\"id\" href=\"#loopmin\">loopmin</a> || <a class=\"id\" href=\"#tscmax\">tscmax</a> &gt; 10 * <a class=\"id\" href=\"#tscmin\">tscmin</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate the PIT value */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#t2\">t2</a> - <a class=\"id\" href=\"#t1\">t1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#ms\">ms</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#delta\">delta</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This reads the current MSB of the PIT counter, and</span>", 
"<span class=\"comment\"> * checks if we are running on sufficiently fast and</span>", 
"<span class=\"comment\"> * non-virtualized hardware.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Our expectations are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - the PIT is running at roughly 1.19MHz</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - each IO is going to take about 1us on real hardware,</span>", 
"<span class=\"comment\"> *    but we allow it to be much faster (by a factor of 10) or</span>", 
"<span class=\"comment\"> *    _slightly_ slower (ie we allow up to a 2us read+counter</span>", 
"<span class=\"comment\"> *    update - anything else implies a unacceptably slow CPU</span>", 
"<span class=\"comment\"> *    or PIT for the fast calibration to work.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - with 256 PIT ticks to read the value, we have 214us to</span>", 
"<span class=\"comment\"> *    see the same MSB (and overhead like doing a single TSC</span>", 
"<span class=\"comment\"> *    read per MSB value etc).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - We're doing 2 reads per loop (LSB, MSB), and we expect</span>", 
"<span class=\"comment\"> *    them each to take about a microsecond on real hardware.</span>", 
"<span class=\"comment\"> *    So we expect a count value of around 100. But we'll be</span>", 
"<span class=\"comment\"> *    generous, and accept anything over 50.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - if the PIT is stuck, and we see *many* more reads, we</span>", 
"<span class=\"comment\"> *    return early (and the next caller of pit_expect_msb()</span>", 
"<span class=\"comment\"> *    then consider it a failure when they don't see the</span>", 
"<span class=\"comment\"> *    next expected value).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These expectations mean that we know that we have seen the</span>", 
"<span class=\"comment\"> * transition from one expected value to another with a fairly</span>", 
"<span class=\"comment\"> * high accuracy, and we didn't miss any events. We can thus</span>", 
"<span class=\"comment\"> * use the TSC value at the transitions to calculate a pretty</span>", 
"<span class=\"comment\"> * good value for the TSC frequencty.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pit_verify_msb\">pit_verify_msb</a>(unsigned char <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Ignore LSB */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inb\">inb</a>(0x42);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inb\">inb</a>(0x42) == <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pit_expect_msb\">pit_expect_msb</a>(unsigned char <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#tscp\">tscp</a>, unsigned long *<a class=\"id\" href=\"#deltap\">deltap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tsc\">tsc</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#count\">count</a> = 0; <a class=\"id\" href=\"#count\">count</a> &lt; 50000; <a class=\"id\" href=\"#count\">count</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pit_verify_msb\">pit_verify_msb</a>(<a class=\"id\" href=\"#val\">val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc\">tsc</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#deltap\">deltap</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>() - <a class=\"id\" href=\"#tsc\">tsc</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tscp\">tscp</a> = <a class=\"id\" href=\"#tsc\">tsc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We require _some_ success, but the quality control</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will be based on the error terms on the TSC values.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a> &gt; 5;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * How many MSB values do we want to see? We aim for</span>", 
"<span class=\"comment\"> * a maximum error rate of 500ppm (in practice the</span>", 
"<span class=\"comment\"> * real error is much smaller), but refuse to spend</span>", 
"<span class=\"comment\"> * more than 25ms on it.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_QUICK_PIT_MS\">MAX_QUICK_PIT_MS</a> 25", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_QUICK_PIT_ITERATIONS\">MAX_QUICK_PIT_ITERATIONS</a> (<a class=\"id\" href=\"#MAX_QUICK_PIT_MS\">MAX_QUICK_PIT_MS</a> * <a class=\"id\" href=\"#PIT_TICK_RATE\">PIT_TICK_RATE</a> / 1000 / 256)", 
"", 
"static unsigned long <a class=\"id\" href=\"#quick_pit_calibrate\">quick_pit_calibrate</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tsc\">tsc</a>, <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#d1\">d1</a>, <a class=\"id\" href=\"#d2\">d2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the Gate high, disable speaker */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>((<a class=\"id\" href=\"#inb\">inb</a>(0x61) &amp; ~0x02) | 0x01, 0x61);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Counter 2, mode 0 (one-shot), binary count</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE! Mode 2 decrements by two (and then the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * output is flipped each time, giving the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * final output frequency as a decrement-by-one),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so mode 0 is much better when looking at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * individual counts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0xb0, 0x43);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Start at 0xffff */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0xff, 0x42);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0xff, 0x42);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The PIT starts counting at the next edge, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to delay for a microsecond. The easiest way</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to do that is to just read back the 16-bit counter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * once from the PIT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pit_verify_msb\">pit_verify_msb</a>(0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pit_expect_msb\">pit_expect_msb</a>(0xff, &amp;<a class=\"id\" href=\"#tsc\">tsc</a>, &amp;<a class=\"id\" href=\"#d1\">d1</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#MAX_QUICK_PIT_ITERATIONS\">MAX_QUICK_PIT_ITERATIONS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pit_expect_msb\">pit_expect_msb</a>(0xff-<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#delta\">delta</a>, &amp;<a class=\"id\" href=\"#d2\">d2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Iterate until the error is less than 500 ppm</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> -= <a class=\"id\" href=\"#tsc\">tsc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d1\">d1</a>+<a class=\"id\" href=\"#d2\">d2</a> >= <a class=\"id\" href=\"#delta\">delta</a> >> 11)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Check the PIT one more time to verify that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * all TSC reads were stable wrt the PIT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This also guarantees serialization of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * last cycle read ('d2') in pit_expect_msb.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pit_verify_msb\">pit_verify_msb</a>(0xfe - <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#success\">success</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Fast TSC calibration failed\\n\");", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#success\">success</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, if we get here, then we've seen the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MSB of the PIT decrement 'i' times, and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error has shrunk to less than 500 ppm.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * As a result, we can depend on there not being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any odd delays anywhere, and the TSC reads are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reliable (within the error). We also adjust the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delta to the middle of the error bars, just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because it looks nicer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kHz = ticks / time-in-seconds / 1000;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kHz = (t2 - t1) / (I * 256 / PIT_TICK_RATE) / 1000</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kHz = ((t2 - t1) * PIT_TICK_RATE) / (I * 256 * 1000)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> += (long)(<a class=\"id\" href=\"#d2\">d2</a> - <a class=\"id\" href=\"#d1\">d1</a>)/2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> *= <a class=\"id\" href=\"#PIT_TICK_RATE\">PIT_TICK_RATE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#i\">i</a>*256*1000);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Fast TSC calibration using PIT\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#delta\">delta</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * native_calibrate_tsc - calibrate the tsc on boot</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#native_calibrate_tsc\">native_calibrate_tsc</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tsc1\">tsc1</a>, <a class=\"id\" href=\"#tsc2\">tsc2</a>, <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#ref1\">ref1</a>, <a class=\"id\" href=\"#ref2\">ref2</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>, <a class=\"id\" href=\"#tsc_ref_min\">tsc_ref_min</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#latch\">latch</a>, <a class=\"id\" href=\"#ms\">ms</a>, <a class=\"id\" href=\"#fast_calibrate\">fast_calibrate</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hpet\">hpet</a> = <a class=\"id\" href=\"#is_hpet_enabled\">is_hpet_enabled</a>(), <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#loopmin\">loopmin</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fast_calibrate\">fast_calibrate</a> = <a class=\"id\" href=\"#quick_pit_calibrate\">quick_pit_calibrate</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fast_calibrate\">fast_calibrate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fast_calibrate\">fast_calibrate</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Run 5 calibration loops to get the lowest frequency value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (the best estimate). We use two different calibration modes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) PIT loop. We set the PIT Channel 2 to oneshot mode and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * load a timeout of 50ms. We read the time right after we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * started the timer and wait until the PIT count down reaches</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * zero. In each wait loop iteration we read the TSC and check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the delta to the previous read. We keep track of the min</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and max values of that delta. The delta is mostly defined</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by the IO time of the PIT access, so we can detect when a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SMI/SMM disturbance happend between the two reads. If the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * maximum time is significantly larger than the minimum time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we discard the result and have another try.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Reference counter. If available we use the HPET or the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PMTIMER as a reference to check the sanity of that value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use separate TSC readouts and check inside of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reference read for a SMI/SMM disturbance. We dicard</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disturbed values here as well. We do that around the PIT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * calibration delay loop as we have to wait for a certain</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * amount of time anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Preset PIT loop values */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#latch\">latch</a> = <a class=\"id\" href=\"#CAL_LATCH\">CAL_LATCH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#CAL_MS\">CAL_MS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loopmin\">loopmin</a> = <a class=\"id\" href=\"#CAL_PIT_LOOPS\">CAL_PIT_LOOPS</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 3; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tsc_pit_khz\">tsc_pit_khz</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Read the start value and the reference count of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hpet/pmtimer when available. Then do the PIT</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * calibration, which will take at least 50ms, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * read the end value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc1\">tsc1</a> = <a class=\"id\" href=\"#tsc_read_refs\">tsc_read_refs</a>(&amp;<a class=\"id\" href=\"#ref1\">ref1</a>, <a class=\"id\" href=\"#hpet\">hpet</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_pit_khz\">tsc_pit_khz</a> = <a class=\"id\" href=\"#pit_calibrate_tsc\">pit_calibrate_tsc</a>(<a class=\"id\" href=\"#latch\">latch</a>, <a class=\"id\" href=\"#ms\">ms</a>, <a class=\"id\" href=\"#loopmin\">loopmin</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc2\">tsc2</a> = <a class=\"id\" href=\"#tsc_read_refs\">tsc_read_refs</a>(&amp;<a class=\"id\" href=\"#ref2\">ref2</a>, <a class=\"id\" href=\"#hpet\">hpet</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pick the lowest PIT TSC calibration so far */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a>, <a class=\"id\" href=\"#tsc_pit_khz\">tsc_pit_khz</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hpet or pmtimer available ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hpet\">hpet</a> && !<a class=\"id\" href=\"#ref1\">ref1</a> && !<a class=\"id\" href=\"#ref2\">ref2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check, whether the sampling was disturbed by an SMI */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsc1\">tsc1</a> == <a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a> || <a class=\"id\" href=\"#tsc2\">tsc2</a> == <a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc2\">tsc2</a> = (<a class=\"id\" href=\"#tsc2\">tsc2</a> - <a class=\"id\" href=\"#tsc1\">tsc1</a>) * 1000000LL;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hpet\">hpet</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc2\">tsc2</a> = <a class=\"id\" href=\"#calc_hpet_ref\">calc_hpet_ref</a>(<a class=\"id\" href=\"#tsc2\">tsc2</a>, <a class=\"id\" href=\"#ref1\">ref1</a>, <a class=\"id\" href=\"#ref2\">ref2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc2\">tsc2</a> = <a class=\"id\" href=\"#calc_pmtimer_ref\">calc_pmtimer_ref</a>(<a class=\"id\" href=\"#tsc2\">tsc2</a>, <a class=\"id\" href=\"#ref1\">ref1</a>, <a class=\"id\" href=\"#ref2\">ref2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_ref_min\">tsc_ref_min</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tsc_ref_min\">tsc_ref_min</a>, (unsigned long) <a class=\"id\" href=\"#tsc2\">tsc2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check the reference deviation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = ((<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a>) * 100;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#tsc_ref_min\">tsc_ref_min</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If both calibration results are inside a 10% window</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then we can be sure, that the calibration</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * succeeded. We break out of the loop right away. We</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * use the reference value, as it is more precise.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> >= 90 && <a class=\"id\" href=\"#delta\">delta</a> <= 110) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"TSC: PIT calibration matches %s. %d loops\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#hpet\">hpet</a> ? \"HPET\" : \"PMTIMER\", <a class=\"id\" href=\"#i\">i</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tsc_ref_min\">tsc_ref_min</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check whether PIT failed more than once. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * happens in virtualized environments. We need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * give the virtual PC a slightly longer timeframe for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the HPET/PMTIMER to make the result precise.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 1 && <a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a> == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latch\">latch</a> = <a class=\"id\" href=\"#CAL2_LATCH\">CAL2_LATCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#CAL2_MS\">CAL2_MS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loopmin\">loopmin</a> = <a class=\"id\" href=\"#CAL2_PIT_LOOPS\">CAL2_PIT_LOOPS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now check the results.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a> == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* PIT gave no useful value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"TSC: Unable to calibrate against PIT\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We don't have an alternative source, disable TSC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hpet\">hpet</a> && !<a class=\"id\" href=\"#ref1\">ref1</a> && !<a class=\"id\" href=\"#ref2\">ref2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"TSC: No reference (HPET/PMTIMER) available\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The alternative source failed as well, disable TSC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsc_ref_min\">tsc_ref_min</a> == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"TSC: HPET/PMTIMER calibration \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"failed.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Use the alternative source */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"TSC: using %s reference calibration\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#hpet\">hpet</a> ? \"HPET\" : \"PMTIMER\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tsc_ref_min\">tsc_ref_min</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't have an alternative source, use the PIT calibration value */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hpet\">hpet</a> && !<a class=\"id\" href=\"#ref1\">ref1</a> && !<a class=\"id\" href=\"#ref2\">ref2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"TSC: Using PIT calibration value\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The alternative source failed, use the PIT calibration value */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsc_ref_min\">tsc_ref_min</a> == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"TSC: HPET/PMTIMER calibration failed. \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Using PIT calibration\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The calibration values differ too much. In doubt, we use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the PIT value as we know that there are PMTIMERs around</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * running at double speed. At least we let the user know:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"TSC: PIT calibration deviates from %s: %lu %lu.\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#hpet\">hpet</a> ? \"HPET\" : \"PMTIMER\", <a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a>, <a class=\"id\" href=\"#tsc_ref_min\">tsc_ref_min</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"TSC: Using PIT calibration value\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tsc_pit_min\">tsc_pit_min</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#recalibrate_cpu_khz\">recalibrate_cpu_khz</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cpu_khz_old\">cpu_khz_old</a> = <a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_khz\">tsc_khz</a> = <a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#calibrate_tsc\">calibrate_tsc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_khz\">cpu_khz</a> = <a class=\"id\" href=\"#tsc_khz\">tsc_khz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a>(0).<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_scale\">cpufreq_scale</a>(<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(0).<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_khz_old\">cpu_khz_old</a>, <a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"#else", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#recalibrate_cpu_khz\">recalibrate_cpu_khz</a>);", 
"", 
"", 
"<span class=\"comment\">/* Accelerators for sched_clock()</span>", 
"<span class=\"comment\"> * convert from cycles(64bits) =&gt; nanoseconds (64bits)</span>", 
"<span class=\"comment\"> *  basic equation:</span>", 
"<span class=\"comment\"> *              ns = cycles / (freq / ns_per_sec)</span>", 
"<span class=\"comment\"> *              ns = cycles * (ns_per_sec / freq)</span>", 
"<span class=\"comment\"> *              ns = cycles * (10^9 / (cpu_khz * 10^3))</span>", 
"<span class=\"comment\"> *              ns = cycles * (10^6 / cpu_khz)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Then we use scaling math (suggested by george@mvista.com) to get:</span>", 
"<span class=\"comment\"> *              ns = cycles * (10^6 * SC / cpu_khz) / SC</span>", 
"<span class=\"comment\"> *              ns = cycles * cyc2ns_scale / SC</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      And since SC is a constant power of two, we can convert the div</span>", 
"<span class=\"comment\"> *  into a shift.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  We can use khz divisor instead of mhz to keep a better precision, since</span>", 
"<span class=\"comment\"> *  cyc2ns_scale is limited to 10^6 * 2^10, which fits in 32 bits.</span>", 
"<span class=\"comment\"> *  (mathieu.desnoyers@polymtl.ca)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *                      -johnstul@us.ibm.com \"math is hard, lets go shopping!\"</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#cyc2ns\">cyc2ns</a>);", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long long, <a class=\"id\" href=\"#cyc2ns_offset\">cyc2ns_offset</a>);", 
"", 
"static void <a class=\"id\" href=\"#set_cyc2ns_scale\">set_cyc2ns_scale</a>(unsigned long <a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#tsc_now\">tsc_now</a>, <a class=\"id\" href=\"#ns_now\">ns_now</a>, *<a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, *<a class=\"id\" href=\"#scale\">scale</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_idle_sleep_event\">sched_clock_idle_sleep_event</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scale\">scale</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cyc2ns\">cyc2ns</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cyc2ns_offset\">cyc2ns_offset</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtscll\">rdtscll</a>(<a class=\"id\" href=\"#tsc_now\">tsc_now</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns_now\">ns_now</a> = <a class=\"id\" href=\"#__cycles_2_ns\">__cycles_2_ns</a>(<a class=\"id\" href=\"#tsc_now\">tsc_now</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#scale\">scale</a> = (<a class=\"id\" href=\"#NSEC_PER_MSEC\">NSEC_PER_MSEC</a> << <a class=\"id\" href=\"#CYC2NS_SCALE_FACTOR\">CYC2NS_SCALE_FACTOR</a>)/<a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#ns_now\">ns_now</a> - (<a class=\"id\" href=\"#tsc_now\">tsc_now</a> * *<a class=\"id\" href=\"#scale\">scale</a> >> <a class=\"id\" href=\"#CYC2NS_SCALE_FACTOR\">CYC2NS_SCALE_FACTOR</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_idle_wakeup_event\">sched_clock_idle_wakeup_event</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static unsigned long long <a class=\"id\" href=\"#cyc2ns_suspend\">cyc2ns_suspend</a>;", 
"", 
"void <a class=\"id\" href=\"#save_sched_clock_state\">save_sched_clock_state</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_clock_stable\">sched_clock_stable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cyc2ns_suspend\">cyc2ns_suspend</a> = <a class=\"id\" href=\"#sched_clock\">sched_clock</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Even on processors with invariant TSC, TSC gets reset in some the</span>", 
"<span class=\"comment\"> * ACPI system sleep states. And in some systems BIOS seem to reinit TSC to</span>", 
"<span class=\"comment\"> * arbitrary value (still sync'd across cpu's) during resume from such sleep</span>", 
"<span class=\"comment\"> * states. To cope up with this, recompute the cyc2ns_offset for each cpu so</span>", 
"<span class=\"comment\"> * that sched_clock() continues from the point where it was left off during</span>", 
"<span class=\"comment\"> * suspend.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#restore_sched_clock_state\">restore_sched_clock_state</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_clock_stable\">sched_clock_stable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cyc2ns_offset\">cyc2ns_offset</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#cyc2ns_suspend\">cyc2ns_suspend</a> - <a class=\"id\" href=\"#sched_clock\">sched_clock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cyc2ns_offset\">cyc2ns_offset</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPU_FREQ\">CONFIG_CPU_FREQ</a>", 
"", 
"<span class=\"comment\">/* Frequency scaling support. Adjust the TSC based timer when the cpu frequency</span>", 
"<span class=\"comment\"> * changes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RED-PEN: On SMP we assume all CPUs run with the same frequency.  It's</span>", 
"<span class=\"comment\"> * not that important because current Opteron setups do not support</span>", 
"<span class=\"comment\"> * scaling on SMP anyroads.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Should fix up last_tsc too. Currently gettimeofday in the</span>", 
"<span class=\"comment\"> * first tick after the change will be slightly wrong.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned int  <a class=\"id\" href=\"#ref_freq\">ref_freq</a>;", 
"static unsigned long <a class=\"id\" href=\"#loops_per_jiffy_ref\">loops_per_jiffy_ref</a>;", 
"static unsigned long <a class=\"id\" href=\"#tsc_khz_ref\">tsc_khz_ref</a>;", 
"", 
"static int <a class=\"id\" href=\"#time_cpufreq_notifier\">time_cpufreq_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>, unsigned long <a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpufreq_freqs\">cpufreq_freqs</a> *<a class=\"id\" href=\"#freq\">freq</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#lpj\">lpj</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(&amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lpj\">lpj</a> = &amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CPUFREQ_CONST_LOOPS\">CPUFREQ_CONST_LOOPS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lpj\">lpj</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ref_freq\">ref_freq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ref_freq\">ref_freq</a> = <a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops_per_jiffy_ref\">loops_per_jiffy_ref</a> = *<a class=\"id\" href=\"#lpj\">lpj</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_khz_ref\">tsc_khz_ref</a> = <a class=\"id\" href=\"#tsc_khz\">tsc_khz</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#CPUFREQ_PRECHANGE\">CPUFREQ_PRECHANGE</a>  && <a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#old\">old</a> &lt; <a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#new\">new</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#CPUFREQ_POSTCHANGE\">CPUFREQ_POSTCHANGE</a> && <a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#old\">old</a> &gt; <a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#new\">new</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#CPUFREQ_RESUMECHANGE\">CPUFREQ_RESUMECHANGE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lpj\">lpj</a> = <a class=\"id\" href=\"#cpufreq_scale\">cpufreq_scale</a>(<a class=\"id\" href=\"#loops_per_jiffy_ref\">loops_per_jiffy_ref</a>, <a class=\"id\" href=\"#ref_freq\">ref_freq</a>, <a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_khz\">tsc_khz</a> = <a class=\"id\" href=\"#cpufreq_scale\">cpufreq_scale</a>(<a class=\"id\" href=\"#tsc_khz_ref\">tsc_khz_ref</a>, <a class=\"id\" href=\"#ref_freq\">ref_freq</a>, <a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CPUFREQ_CONST_LOOPS\">CPUFREQ_CONST_LOOPS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_tsc_unstable\">mark_tsc_unstable</a>(\"cpufreq changes\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cyc2ns_scale\">set_cyc2ns_scale</a>(<a class=\"id\" href=\"#tsc_khz\">tsc_khz</a>, <a class=\"id\" href=\"#freq\">freq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#time_cpufreq_notifier_block\">time_cpufreq_notifier_block</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a>  = <a class=\"id\" href=\"#time_cpufreq_notifier\">time_cpufreq_notifier</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cpufreq_tsc\">cpufreq_tsc</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_register_notifier\">cpufreq_register_notifier</a>(&amp;<a class=\"id\" href=\"#time_cpufreq_notifier_block\">time_cpufreq_notifier_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CPUFREQ_TRANSITION_NOTIFIER\">CPUFREQ_TRANSITION_NOTIFIER</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#cpufreq_tsc\">cpufreq_tsc</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CPU_FREQ */</span>", 
"", 
"<span class=\"comment\">/* clocksource code */</span>", 
"", 
"static struct <a class=\"id\" href=\"#clocksource\">clocksource</a> <a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We compare the TSC to the cycle_last value in the clocksource</span>", 
"<span class=\"comment\"> * structure to avoid a nasty time-warp. This can be observed in a</span>", 
"<span class=\"comment\"> * very small window right after one CPU updated cycle_last under</span>", 
"<span class=\"comment\"> * xtime/vsyscall_gtod lock and the other CPU reads a TSC value which</span>", 
"<span class=\"comment\"> * is smaller than the cycle_last reference value due to a TSC which</span>", 
"<span class=\"comment\"> * is slighty behind. This delta is nowhere else observable, but in</span>", 
"<span class=\"comment\"> * that case it results in a forward time jump in the range of hours</span>", 
"<span class=\"comment\"> * due to the unsigned delta calculation of the time keeping core</span>", 
"<span class=\"comment\"> * code, which is necessary to support wrapping clocksources like pm</span>", 
"<span class=\"comment\"> * timer.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#read_tsc\">read_tsc</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#cycle_t\">cycle_t</a>)<a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> >= <a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>.<a class=\"id\" href=\"#cycle_last\">cycle_last</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>.<a class=\"id\" href=\"#cycle_last\">cycle_last</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#__vsyscall_fn\">__vsyscall_fn</a> <a class=\"id\" href=\"#vread_tsc\">vread_tsc</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Surround the RDTSC by barriers, to make sure it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * speculated to outside the seqlock critical section and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * does not cause time warps:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#cycle_t\">cycle_t</a>)<a class=\"id\" href=\"#vget_cycles\">vget_cycles</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> >= <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#cycle_last\">cycle_last</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#cycle_last\">cycle_last</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#resume_tsc\">resume_tsc</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>.<a class=\"id\" href=\"#cycle_last\">cycle_last</a> = 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#clocksource\">clocksource</a> <a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a>                   = \"tsc\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rating\">rating</a>                 = 300,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>                   = <a class=\"id\" href=\"#read_tsc\">read_tsc</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#resume_tsc\">resume_tsc</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mask\">mask</a>                   = <a class=\"id\" href=\"#CLOCKSOURCE_MASK\">CLOCKSOURCE_MASK</a>(64),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a>                  = <a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#CLOCK_SOURCE_MUST_VERIFY\">CLOCK_SOURCE_MUST_VERIFY</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#vread\">vread</a>                  = <a class=\"id\" href=\"#vread_tsc\">vread_tsc</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"void <a class=\"id\" href=\"#mark_tsc_unstable\">mark_tsc_unstable</a>(char *<a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsc_unstable\">tsc_unstable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_unstable\">tsc_unstable</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_stable\">sched_clock_stable</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Marking TSC unstable due to %s\\n\", <a class=\"id\" href=\"#reason\">reason</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Change only the rating, when not registered */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>.<a class=\"id\" href=\"#mult\">mult</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_mark_unstable\">clocksource_mark_unstable</a>(&amp;<a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CLOCK_SOURCE_UNSTABLE\">CLOCK_SOURCE_UNSTABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>.<a class=\"id\" href=\"#rating\">rating</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mark_tsc_unstable\">mark_tsc_unstable</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_mark_tsc_unstable\">dmi_mark_tsc_unstable</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"%s detected: marking TSC unstable.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#ident\">ident</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsc_unstable\">tsc_unstable</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* List of systems that have known TSC problems */</span>", 
"static struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#bad_tsc_dmi_table\">bad_tsc_dmi_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#dmi_mark_tsc_unstable\">dmi_mark_tsc_unstable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"IBM Thinkpad 380XD\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BOARD_VENDOR\">DMI_BOARD_VENDOR</a>, \"IBM\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BOARD_NAME\">DMI_BOARD_NAME</a>, \"2635FA0\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{}", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_system_tsc_reliable\">check_system_tsc_reliable</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MGEODE_LX\">CONFIG_MGEODE_LX</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* RTSC counts during suspend */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RTSC_SUSP\">RTSC_SUSP</a> 0x100", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#res_low\">res_low</a>, <a class=\"id\" href=\"#res_high\">res_high</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsr_safe\">rdmsr_safe</a>(<a class=\"id\" href=\"#MSR_GEODE_BUSCONT_CONF0\">MSR_GEODE_BUSCONT_CONF0</a>, &amp;<a class=\"id\" href=\"#res_low\">res_low</a>, &amp;<a class=\"id\" href=\"#res_high\">res_high</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Geode_LX - the OLPC CPU has a very reliable TSC */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res_low\">res_low</a> &amp; <a class=\"id\" href=\"#RTSC_SUSP\">RTSC_SUSP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_clocksource_reliable\">tsc_clocksource_reliable</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_TSC_RELIABLE\">X86_FEATURE_TSC_RELIABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_clocksource_reliable\">tsc_clocksource_reliable</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make an educated guess if the TSC is trustworthy and synchronized</span>", 
"<span class=\"comment\"> * over all CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> int <a class=\"id\" href=\"#unsynchronized_tsc\">unsynchronized_tsc</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a> || <a class=\"id\" href=\"#tsc_unstable\">tsc_unstable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apic_is_clustered_box\">apic_is_clustered_box</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel systems are normally all synchronized.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Exceptions must mark TSC as unstable:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> != <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* assume multi socket systems are not synchronized: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_unstable\">tsc_unstable</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tsc_unstable\">tsc_unstable</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_tsc_clocksource\">init_tsc_clocksource</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsc_clocksource_reliable\">tsc_clocksource_reliable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>.<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CLOCK_SOURCE_MUST_VERIFY\">CLOCK_SOURCE_MUST_VERIFY</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* lower the rating if we already know its unstable: */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#check_tsc_unstable\">check_tsc_unstable</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>.<a class=\"id\" href=\"#rating\">rating</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>.<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_register_khz\">clocksource_register_khz</a>(&amp;<a class=\"id\" href=\"#clocksource_tsc\">clocksource_tsc</a>, <a class=\"id\" href=\"#tsc_khz\">tsc_khz</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * calibrate_cpu is used on systems with fixed rate TSCs to determine</span>", 
"<span class=\"comment\"> * processor frequency</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TICK_COUNT\">TICK_COUNT</a> 100000000", 
"static unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#calibrate_cpu\">calibrate_cpu</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tsc_start\">tsc_start</a>, <a class=\"id\" href=\"#tsc_now\">tsc_now</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#no_ctr_free\">no_ctr_free</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#evntsel3\">evntsel3</a> = 0, <a class=\"id\" href=\"#pmc3\">pmc3</a> = 0, <a class=\"id\" href=\"#pmc_now\">pmc_now</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#avail_to_resrv_perfctr_nmi_bit\">avail_to_resrv_perfctr_nmi_bit</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#no_ctr_free\">no_ctr_free</a> = (<a class=\"id\" href=\"#i\">i</a> == 4);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#no_ctr_free\">no_ctr_free</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Warning: AMD perfctrs busy ... \"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"cpu_khz value may be incorrect.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_K7_EVNTSEL3\">MSR_K7_EVNTSEL3</a>, <a class=\"id\" href=\"#evntsel3\">evntsel3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_K7_EVNTSEL3\">MSR_K7_EVNTSEL3</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_K7_PERFCTR3\">MSR_K7_PERFCTR3</a>, <a class=\"id\" href=\"#pmc3\">pmc3</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_perfctr_nmi\">reserve_perfctr_nmi</a>(<a class=\"id\" href=\"#MSR_K7_PERFCTR0\">MSR_K7_PERFCTR0</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_evntsel_nmi\">reserve_evntsel_nmi</a>(<a class=\"id\" href=\"#MSR_K7_EVNTSEL0\">MSR_K7_EVNTSEL0</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* start measuring cycles, incrementing from 0 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_K7_PERFCTR0\">MSR_K7_PERFCTR0</a> + <a class=\"id\" href=\"#i\">i</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_K7_EVNTSEL0\">MSR_K7_EVNTSEL0</a> + <a class=\"id\" href=\"#i\">i</a>, 1 << 22 | 3 << 16 | 0x76);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtscl\">rdtscl</a>(<a class=\"id\" href=\"#tsc_start\">tsc_start</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_K7_PERFCTR0\">MSR_K7_PERFCTR0</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#pmc_now\">pmc_now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_now\">tsc_now</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#tsc_now\">tsc_now</a> - <a class=\"id\" href=\"#tsc_start\">tsc_start</a>) &lt; <a class=\"id\" href=\"#TICK_COUNT\">TICK_COUNT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#no_ctr_free\">no_ctr_free</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_K7_EVNTSEL3\">MSR_K7_EVNTSEL3</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_K7_PERFCTR3\">MSR_K7_PERFCTR3</a>, <a class=\"id\" href=\"#pmc3\">pmc3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_K7_EVNTSEL3\">MSR_K7_EVNTSEL3</a>, <a class=\"id\" href=\"#evntsel3\">evntsel3</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_perfctr_nmi\">release_perfctr_nmi</a>(<a class=\"id\" href=\"#MSR_K7_PERFCTR0\">MSR_K7_PERFCTR0</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_evntsel_nmi\">release_evntsel_nmi</a>(<a class=\"id\" href=\"#MSR_K7_EVNTSEL0\">MSR_K7_EVNTSEL0</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pmc_now\">pmc_now</a> * <a class=\"id\" href=\"#tsc_khz\">tsc_khz</a> / (<a class=\"id\" href=\"#tsc_now\">tsc_now</a> - <a class=\"id\" href=\"#tsc_start\">tsc_start</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#calibrate_cpu\">calibrate_cpu</a>(void) { return <a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#tsc_init\">tsc_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lpj\">lpj</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#tsc_pre_init\">tsc_pre_init</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsc_khz\">tsc_khz</a> = <a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#calibrate_tsc\">calibrate_tsc</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_khz\">cpu_khz</a> = <a class=\"id\" href=\"#tsc_khz\">tsc_khz</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsc_khz\">tsc_khz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_tsc_unstable\">mark_tsc_unstable</a>(\"could not calculate TSC khz\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(&amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>, <a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_khz\">cpu_khz</a> = <a class=\"id\" href=\"#calibrate_cpu\">calibrate_cpu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Detected %lu.%03lu MHz processor.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#cpu_khz\">cpu_khz</a> / 1000,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#cpu_khz\">cpu_khz</a> % 1000);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Secondary CPUs do not run through tsc_init(), so set up</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all the scale factors for all CPUs, assuming the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * speed as the bootup CPU. (cpufreq notifiers will fix this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up if their speed diverges)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cyc2ns_scale\">set_cyc2ns_scale</a>(<a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsc_disabled\">tsc_disabled</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* now allow native_sched_clock() to use rdtsc */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsc_disabled\">tsc_disabled</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lpj\">lpj</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#tsc_khz\">tsc_khz</a> * 1000);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#lpj\">lpj</a>, <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lpj_fine\">lpj_fine</a> = <a class=\"id\" href=\"#lpj\">lpj</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#use_tsc_delay\">use_tsc_delay</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Check and install the TSC clocksource */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(<a class=\"id\" href=\"#bad_tsc_dmi_table\">bad_tsc_dmi_table</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unsynchronized_tsc\">unsynchronized_tsc</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_tsc_unstable\">mark_tsc_unstable</a>(\"TSCs unsynchronized\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_system_tsc_reliable\">check_system_tsc_reliable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_tsc_clocksource\">init_tsc_clocksource</a>();", 
"}", 
"", 
];
xr_frag_insert('l/d8/526ae5aaa42892f8b4f8cb6902dfd29f392e77.xr', __xr_tmp);
