var __xr_tmp = [
"<span class=\"comment\">/* internal.h: mm/ internal definitions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 Red Hat, Inc. All Rights Reserved.</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__MM_INTERNAL_H\">__MM_INTERNAL_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__MM_INTERNAL_H\">__MM_INTERNAL_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"void <a class=\"id\" href=\"#free_pgtables\">free_pgtables</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#start_vma\">start_vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#floor\">floor</a>, unsigned long <a class=\"id\" href=\"#ceiling\">ceiling</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_page_count\">set_page_count</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Turn a non-refcounted page (-&gt;_count == 0) into refcounted with</span>", 
"<span class=\"comment\"> * a count of one.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_page_refcounted\">set_page_refcounted</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageTail\">PageTail</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_count\">set_page_count</a>(<a class=\"id\" href=\"#page\">page</a>, 1);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__put_page\">__put_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>);", 
"}", 
"", 
"extern unsigned long <a class=\"id\" href=\"#highest_memmap_pfn\">highest_memmap_pfn</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * in mm/vmscan.c:</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"extern void <a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * in mm/page_alloc.c</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>);", 
"extern void <a class=\"id\" href=\"#prep_compound_page\">prep_compound_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#order\">order</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_free_buddy_page\">is_free_buddy_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * function for dealing with page's order in buddy system.</span>", 
"<span class=\"comment\"> * zone-&gt;lock is already acquired when we use these.</span>", 
"<span class=\"comment\"> * So, we don't need atomic page-&gt;flags operations here.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#page_order\">page_order</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageBuddy\">PageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"extern long <a class=\"id\" href=\"#mlock_vma_pages_range\">mlock_vma_pages_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"extern void <a class=\"id\" href=\"#munlock_vma_pages_range\">munlock_vma_pages_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#munlock_vma_pages_all\">munlock_vma_pages_all</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#munlock_vma_pages_range\">munlock_vma_pages_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called only in fault path via page_evictable() for a new page</span>", 
"<span class=\"comment\"> * to determine if it's being mapped into a LOCKED vma.</span>", 
"<span class=\"comment\"> * If so, mark page as mlocked.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_mlocked_vma\">is_mlocked_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a> | <a class=\"id\" href=\"#VM_SPECIAL\">VM_SPECIAL</a>)) != <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#TestSetPageMlocked\">TestSetPageMlocked</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_MLOCK\">NR_MLOCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGMLOCKED\">UNEVICTABLE_PGMLOCKED</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * must be called with vma's mmap_sem held for read or write, and page locked.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#mlock_vma_page\">mlock_vma_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"extern void <a class=\"id\" href=\"#munlock_vma_page\">munlock_vma_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clear the page's PageMlocked().  This can be useful in a situation where</span>", 
"<span class=\"comment\"> * we want to unconditionally remove a page from the pagecache -- e.g.,</span>", 
"<span class=\"comment\"> * on truncation or freeing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is legal to call this function for any page, mlocked or not.</span>", 
"<span class=\"comment\"> * If called for a page that is still mapped by mlocked vmas, all we do</span>", 
"<span class=\"comment\"> * is revert to lazy LRU behaviour -- semantics are not broken.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#__clear_page_mlock\">__clear_page_mlock</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_page_mlock\">clear_page_mlock</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#TestClearPageMlocked\">TestClearPageMlocked</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_page_mlock\">__clear_page_mlock</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mlock_migrate_page - called only from migrate_page_copy() to</span>", 
"<span class=\"comment\"> * migrate the Mlocked page flag; update statistics.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mlock_migrate_page\">mlock_migrate_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TestClearPageMlocked\">TestClearPageMlocked</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_MLOCK\">NR_MLOCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageMlocked\">SetPageMlocked</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#NR_MLOCK\">NR_MLOCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_MMU */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_mlocked_vma\">is_mlocked_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_page_mlock\">clear_page_mlock</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mlock_vma_page\">mlock_vma_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mlock_migrate_page\">mlock_migrate_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#old\">old</a>) { }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_MMU */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the mem_map entry representing the 'offset' subpage within</span>", 
"<span class=\"comment\"> * the maximally aligned gigantic page 'base'.  Handle any discontiguity</span>", 
"<span class=\"comment\"> * in the mem_map at MAX_ORDER_NR_PAGES boundaries.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#mem_map_offset\">mem_map_offset</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#base\">base</a>, int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#base\">base</a>) + <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Iterator over all subpages withing the maximally aligned gigantic</span>", 
"<span class=\"comment\"> * page 'base'.  Handle any discontiguity in the mem_map.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#mem_map_next\">mem_map_next</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#base\">base</a>, int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#offset\">offset</a> &amp; (<a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a> - 1)) == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#base\">base</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a> + 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * FLATMEM and DISCONTIGMEM configurations use alloc_bootmem_node,</span>", 
"<span class=\"comment\"> * so all functions starting at paging_init should be marked __init</span>", 
"<span class=\"comment\"> * in those cases. SPARSEMEM, however, allows for memory hotplug,</span>", 
"<span class=\"comment\"> * and alloc_bootmem_node is not used.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__paginginit\">__paginginit</a> <a class=\"id\" href=\"#__meminit\">__meminit</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__paginginit\">__paginginit</a> <a class=\"id\" href=\"#__init\">__init</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Memory initialisation debug and verification */</span>", 
"enum <a class=\"id\" href=\"#mminit_level\">mminit_level</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MMINIT_WARNING\">MMINIT_WARNING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MMINIT_VERIFY\">MMINIT_VERIFY</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MMINIT_TRACE\">MMINIT_TRACE</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_MEMORY_INIT\">CONFIG_DEBUG_MEMORY_INIT</a>", 
"", 
"extern int <a class=\"id\" href=\"#mminit_loglevel\">mminit_loglevel</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mminit_dprintk\">mminit_dprintk</a>(<a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#prefix\">prefix</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"do { \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> &lt; <a class=\"id\" href=\"#mminit_loglevel\">mminit_loglevel</a>) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#level\">level</a> <= <a class=\"id\" href=\"#MMINIT_WARNING\">MMINIT_WARNING</a> ? <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> : <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"mminit::\" <a class=\"id\" href=\"#prefix\">prefix</a> \" \" <a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#arg\">arg</a>); \\", 
"<span class=\"ts\"/>} \\", 
"} while (0)", 
"", 
"extern void <a class=\"id\" href=\"#mminit_verify_pageflags_layout\">mminit_verify_pageflags_layout</a>(void);", 
"extern void <a class=\"id\" href=\"#mminit_verify_page_links\">mminit_verify_page_links</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"extern void <a class=\"id\" href=\"#mminit_verify_zonelist\">mminit_verify_zonelist</a>(void);", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mminit_dprintk\">mminit_dprintk</a>(enum <a class=\"id\" href=\"#mminit_level\">mminit_level</a> <a class=\"id\" href=\"#level\">level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#prefix\">prefix</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mminit_verify_pageflags_layout\">mminit_verify_pageflags_layout</a>(void)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mminit_verify_page_links\">mminit_verify_page_links</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mminit_verify_zonelist\">mminit_verify_zonelist</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_MEMORY_INIT */</span>", 
"", 
"<span class=\"comment\">/* mminit_validate_memmodel_limits is independent of CONFIG_DEBUG_MEMORY_INIT */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>)", 
"extern void <a class=\"id\" href=\"#mminit_validate_memmodel_limits\">mminit_validate_memmodel_limits</a>(unsigned long *<a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mminit_validate_memmodel_limits\">mminit_validate_memmodel_limits</a>(unsigned long *<a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SPARSEMEM */</span>", 
"", 
"int <a class=\"id\" href=\"#__get_user_pages\">__get_user_pages</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#foll_flags\">foll_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#vmas\">vmas</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONE_RECLAIM_NOSCAN\">ZONE_RECLAIM_NOSCAN</a><span class=\"ts\"/>-2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONE_RECLAIM_FULL\">ZONE_RECLAIM_FULL</a><span class=\"ts\"/>-1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONE_RECLAIM_SOME\">ZONE_RECLAIM_SOME</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONE_RECLAIM_SUCCESS\">ZONE_RECLAIM_SUCCESS</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#hwpoison_filter\">hwpoison_filter</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"extern <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hwpoison_filter_dev_major\">hwpoison_filter_dev_major</a>;", 
"extern <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hwpoison_filter_dev_minor\">hwpoison_filter_dev_minor</a>;", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hwpoison_filter_flags_mask\">hwpoison_filter_flags_mask</a>;", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hwpoison_filter_flags_value\">hwpoison_filter_flags_value</a>;", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hwpoison_filter_memcg\">hwpoison_filter_memcg</a>;", 
"extern <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hwpoison_filter_enable\">hwpoison_filter_enable</a>;", 
];
xr_frag_insert('l/d8/6c0de00124b92a388aabc29e0f32e7494a8d21.xr', __xr_tmp);
