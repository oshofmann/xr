var __xr_tmp = [
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * /proc/pid/oom_score_adj ranges from -1000 to +1000 such that it may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * either completely disable oom killing or always prefer a certain</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#points\">points</a> += <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#oom_score_adj\">oom_score_adj</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Never return 0 for an eligible task that may be killed since it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * possible that no single user task uses more than 0.1% of memory and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no single admin tasks uses more than 3.0%.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#points\">points</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#points\">points</a> &lt; 1000) ? <a class=\"id\" href=\"#points\">points</a> : 1000;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine the type of allocation constraint.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"static enum <a class=\"id\" href=\"#oom_constraint\">oom_constraint</a> <a class=\"id\" href=\"#constrained_alloc\">constrained_alloc</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#totalpages\">totalpages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a> = <a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cpuset_limited\">cpuset_limited</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Default to all available memory */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#totalpages\">totalpages</a> = <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> + <a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#zonelist\">zonelist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CONSTRAINT_NONE\">CONSTRAINT_NONE</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reach here only when __GFP_NOFAIL is used. So, we should avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to kill current.We have to random task kill in this case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hopefully, CONSTRAINT_THISNODE...but no way to handle it, now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CONSTRAINT_NONE\">CONSTRAINT_NONE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is not a __GFP_THISNODE allocation, so a truncated nodemask in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the page allocator means a mempolicy is in effect.  Cpuset policy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is enforced in get_page_from_freelist().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodemask\">nodemask</a> && !<a class=\"id\" href=\"#nodes_subset\">nodes_subset</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>], *<a class=\"id\" href=\"#nodemask\">nodemask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#totalpages\">totalpages</a> = <a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#nid\">nid</a>, *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#totalpages\">totalpages</a> += <a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CONSTRAINT_MEMORY_POLICY\">CONSTRAINT_MEMORY_POLICY</a>;", 
];
xr_frag_insert('l/d9/29a9c3e57f391405b1ceaf685dd5b2b1454f95.xr', __xr_tmp);
