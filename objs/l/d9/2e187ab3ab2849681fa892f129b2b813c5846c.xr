var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * async.c: Asynchronous function calls for boot performance</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright 2009 Intel Corporation</span>", 
"<span class=\"comment\"> * Author: Arjan van de Ven &lt;arjan@linux.intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; version 2</span>", 
"<span class=\"comment\"> * of the License.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">Goals and Theory of Operation</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">The primary goal of this feature is to reduce the kernel boot time,</span>", 
"<span class=\"comment\">by doing various independent hardware delays and discovery operations</span>", 
"<span class=\"comment\">decoupled and not strictly serialized.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">More specifically, the asynchronous function call concept allows</span>", 
"<span class=\"comment\">certain operations (primarily during system boot) to happen</span>", 
"<span class=\"comment\">asynchronously, out of order, while these operations still</span>", 
"<span class=\"comment\">have their externally visible parts happen sequentially and in-order.</span>", 
"<span class=\"comment\">(not unlike how out-of-order CPUs retire their instructions in order)</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">Key to the asynchronous function call implementation is the concept of</span>", 
"<span class=\"comment\">a \"sequence cookie\" (which, although it has an abstracted type, can be</span>", 
"<span class=\"comment\">thought of as a monotonically incrementing number).</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">The async core will assign each scheduled event such a sequence cookie and</span>", 
"<span class=\"comment\">pass this to the called functions.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">The asynchronously called function should before doing a globally visible</span>", 
"<span class=\"comment\">operation, such as registering device numbers, call the</span>", 
"<span class=\"comment\">async_synchronize_cookie() function and pass in its own cookie. The</span>", 
"<span class=\"comment\">async_synchronize_cookie() function will make sure that all asynchronous</span>", 
"<span class=\"comment\">operations that were scheduled prior to the operation corresponding with the</span>", 
"<span class=\"comment\">cookie have completed.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">Subsystem/driver initialization code that scheduled asynchronous probe</span>", 
"<span class=\"comment\">functions, but which shares global resources with other drivers/subsystems</span>", 
"<span class=\"comment\">that do not use the asynchronous call feature, need to do a full</span>", 
"<span class=\"comment\">synchronization with the async_synchronize_full() function, before returning</span>", 
"<span class=\"comment\">from their init function. This is to maintain strict ordering between the</span>", 
"<span class=\"comment\">asynchronous and synchronous parts of the kernel.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#async\">async</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#next_cookie\">next_cookie</a> = 1;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_WORK\">MAX_WORK</a><span class=\"ts\"/>32768", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#async_pending\">async_pending</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#async_running\">async_running</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#async_lock\">async_lock</a>);", 
"", 
"struct <a class=\"id\" href=\"#async_entry\">async_entry</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_func_ptr\">async_func_ptr</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#running\">running</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#async_done\">async_done</a>);", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#entry_count\">entry_count</a>;", 
"", 
"extern int <a class=\"id\" href=\"#initcall_debug\">initcall_debug</a>;", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * MUST be called with the lock held!</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a>  <a class=\"id\" href=\"#__lowest_in_progress\">__lowest_in_progress</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#async_entry\">async_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#running\">running</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#running\">running</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#async_entry\">async_entry</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>, &amp;<a class=\"id\" href=\"#async_pending\">async_pending</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#running\">running</a> == <a class=\"id\" href=\"#running\">running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#cookie\">cookie</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#next_cookie\">next_cookie</a>;<span class=\"ts\"/><span class=\"comment\">/* \"infinity\" value */</span>", 
"}", 
"", 
"static <a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a>  <a class=\"id\" href=\"#lowest_in_progress\">lowest_in_progress</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__lowest_in_progress\">__lowest_in_progress</a>(<a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pick the first pending entry and run it</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#async_run_entry_fn\">async_run_entry_fn</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#async_entry\">async_entry</a> *<a class=\"id\" href=\"#entry\">entry</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#async_entry\">async_entry</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#calltime\">calltime</a>, <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#rettime\">rettime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 1) move self to the running queue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 2) run (and print duration) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#initcall_debug\">initcall_debug</a> && <a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"calling  %lli_%pF @ %i\\n\", (long long)<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#calltime\">calltime</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#cookie\">cookie</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#initcall_debug\">initcall_debug</a> && <a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rettime\">rettime</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#rettime\">rettime</a>, <a class=\"id\" href=\"#calltime\">calltime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"initcall %lli_%pF returned 0 after %lld usecs\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(long long)<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#func\">func</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(long long)<a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#delta\">delta</a>) >> 10);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 3) remove self from the running queue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 4) free the entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#entry_count\">entry_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 5) wake up any waiters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#async_done\">async_done</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#__async_schedule\">__async_schedule</a>(<a class=\"id\" href=\"#async_func_ptr\">async_func_ptr</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, void *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#async_entry\">async_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#newcookie\">newcookie</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allow irq-off callers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#async_entry\">async_entry</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're out of memory or if there's too much work</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pending already, we execute synchronously.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a> || <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#entry_count\">entry_count</a>) &gt; <a class=\"id\" href=\"#MAX_WORK\">MAX_WORK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcookie\">newcookie</a> = <a class=\"id\" href=\"#next_cookie\">next_cookie</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* low on memory.. run synchronously */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#newcookie\">newcookie</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#newcookie\">newcookie</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#async_run_entry_fn\">async_run_entry_fn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#running\">running</a> = <a class=\"id\" href=\"#running\">running</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newcookie\">newcookie</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#cookie\">cookie</a> = <a class=\"id\" href=\"#next_cookie\">next_cookie</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#async_pending\">async_pending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#entry_count\">entry_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#async_lock\">async_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* schedule for execution */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#system_unbound_wq\">system_unbound_wq</a>, &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#newcookie\">newcookie</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * async_schedule - schedule a function for asynchronous execution</span>", 
"<span class=\"comment\"> * @ptr: function to execute asynchronously</span>", 
"<span class=\"comment\"> * @data: data pointer to pass to the function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an async_cookie_t that may be used for checkpointing later.</span>", 
"<span class=\"comment\"> * Note: This function may be called from atomic or non-atomic contexts.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#async_schedule\">async_schedule</a>(<a class=\"id\" href=\"#async_func_ptr\">async_func_ptr</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__async_schedule\">__async_schedule</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#async_running\">async_running</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#async_schedule\">async_schedule</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * async_schedule_domain - schedule a function for asynchronous execution within a certain domain</span>", 
"<span class=\"comment\"> * @ptr: function to execute asynchronously</span>", 
"<span class=\"comment\"> * @data: data pointer to pass to the function</span>", 
"<span class=\"comment\"> * @running: running list for the domain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an async_cookie_t that may be used for checkpointing later.</span>", 
"<span class=\"comment\"> * @running may be used in the async_synchronize_*_domain() functions</span>", 
"<span class=\"comment\"> * to wait within a certain synchronization domain rather than globally.</span>", 
"<span class=\"comment\"> * A synchronization domain is specified via the running queue @running to use.</span>", 
"<span class=\"comment\"> * Note: This function may be called from atomic or non-atomic contexts.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#async_schedule_domain\">async_schedule_domain</a>(<a class=\"id\" href=\"#async_func_ptr\">async_func_ptr</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__async_schedule\">__async_schedule</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#running\">running</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#async_schedule_domain\">async_schedule_domain</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * async_synchronize_full - synchronize all asynchronous function calls</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function waits until all asynchronous function calls have been done.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#async_synchronize_full\">async_synchronize_full</a>(void)", 
"{", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_cookie\">async_synchronize_cookie</a>(<a class=\"id\" href=\"#next_cookie\">next_cookie</a>);", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#async_running\">async_running</a>) || !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#async_pending\">async_pending</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#async_synchronize_full\">async_synchronize_full</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * async_synchronize_full_domain - synchronize all asynchronous function within a certain domain</span>", 
"<span class=\"comment\"> * @list: running list to synchronize on</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function waits until all asynchronous function calls for the</span>", 
"<span class=\"comment\"> * synchronization domain specified by the running list @list have been done.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#async_synchronize_full_domain\">async_synchronize_full_domain</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_cookie_domain\">async_synchronize_cookie_domain</a>(<a class=\"id\" href=\"#next_cookie\">next_cookie</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#async_synchronize_full_domain\">async_synchronize_full_domain</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * async_synchronize_cookie_domain - synchronize asynchronous function calls within a certain domain with cookie checkpointing</span>", 
"<span class=\"comment\"> * @cookie: async_cookie_t to use as checkpoint</span>", 
"<span class=\"comment\"> * @running: running list to synchronize on</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function waits until all asynchronous function calls for the</span>", 
"<span class=\"comment\"> * synchronization domain specified by the running list @list submitted</span>", 
"<span class=\"comment\"> * prior to @cookie have been done.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#async_synchronize_cookie_domain\">async_synchronize_cookie_domain</a>(<a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#starttime\">starttime</a>, <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#endtime\">endtime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#initcall_debug\">initcall_debug</a> && <a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"async_waiting @ %i\\n\", <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starttime\">starttime</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#async_done\">async_done</a>, <a class=\"id\" href=\"#lowest_in_progress\">lowest_in_progress</a>(<a class=\"id\" href=\"#running\">running</a>) >= <a class=\"id\" href=\"#cookie\">cookie</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#initcall_debug\">initcall_debug</a> && <a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#endtime\">endtime</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#endtime\">endtime</a>, <a class=\"id\" href=\"#starttime\">starttime</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"async_continuing @ %i after %lli usec\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#current\">current</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(long long)<a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#delta\">delta</a>) >> 10);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#async_synchronize_cookie_domain\">async_synchronize_cookie_domain</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * async_synchronize_cookie - synchronize asynchronous function calls with cookie checkpointing</span>", 
"<span class=\"comment\"> * @cookie: async_cookie_t to use as checkpoint</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function waits until all asynchronous function calls prior to @cookie</span>", 
"<span class=\"comment\"> * have been done.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#async_synchronize_cookie\">async_synchronize_cookie</a>(<a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_cookie_domain\">async_synchronize_cookie_domain</a>(<a class=\"id\" href=\"#cookie\">cookie</a>, &amp;<a class=\"id\" href=\"#async_running\">async_running</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#async_synchronize_cookie\">async_synchronize_cookie</a>);", 
];
xr_frag_insert('l/d9/2e187ab3ab2849681fa892f129b2b813c5846c.xr', __xr_tmp);
