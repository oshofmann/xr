var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>on wiphy_new(), but can be changed by the driver if it has a good</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reason to override the default</span>", 
"<span class=\"comment\"> * @WIPHY_FLAG_4ADDR_AP: supports 4addr mode even on AP (with a single station</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on a VLAN interface)</span>", 
"<span class=\"comment\"> * @WIPHY_FLAG_4ADDR_STATION: supports 4addr mode even as a station</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#wiphy_flags\">wiphy_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_FLAG_CUSTOM_REGULATORY\">WIPHY_FLAG_CUSTOM_REGULATORY</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_FLAG_STRICT_REGULATORY\">WIPHY_FLAG_STRICT_REGULATORY</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_FLAG_DISABLE_BEACON_HINTS\">WIPHY_FLAG_DISABLE_BEACON_HINTS</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_FLAG_NETNS_OK\">WIPHY_FLAG_NETNS_OK</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(3),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_FLAG_PS_ON_BY_DEFAULT\">WIPHY_FLAG_PS_ON_BY_DEFAULT</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(4),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_FLAG_4ADDR_AP\">WIPHY_FLAG_4ADDR_AP</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(5),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_FLAG_4ADDR_STATION\">WIPHY_FLAG_4ADDR_STATION</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(6),", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mac_address\">mac_address</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>];", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct wiphy - wireless hardware description</span>", 
"<span class=\"comment\"> * @reg_notifier: the driver's regulatory notification callback</span>", 
"<span class=\"comment\"> * @regd: the driver's regulatory domain, if one was requested via</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>the regulatory_hint() API. This can be used by the driver</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on the reg_notifier() if it chooses to ignore future</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>regulatory domain changes caused by other drivers.</span>", 
"<span class=\"comment\"> * @signal_type: signal type reported in &amp;struct cfg80211_bss.</span>", 
"<span class=\"comment\"> * @cipher_suites: supported cipher suites</span>", 
"<span class=\"comment\"> * @n_cipher_suites: number of supported cipher suites</span>", 
"<span class=\"comment\"> * @retry_short: Retry limit for short frames (dot11ShortRetryLimit)</span>", 
"<span class=\"comment\"> * @retry_long: Retry limit for long frames (dot11LongRetryLimit)</span>", 
"<span class=\"comment\"> * @frag_threshold: Fragmentation threshold (dot11FragmentationThreshold);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>-1 = fragmentation disabled, only odd values &gt;= 256 used</span>", 
"<span class=\"comment\"> * @rts_threshold: RTS threshold (dot11RTSThreshold); -1 = RTS/CTS disabled</span>", 
"<span class=\"comment\"> * @_net: the network namespace this wiphy currently lives in</span>", 
"<span class=\"comment\"> * @perm_addr: permanent MAC address of this device</span>", 
"<span class=\"comment\"> * @addr_mask: If the device supports multiple MAC addresses by masking,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set this to a mask with variable bits set to 1, e.g. if the last</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>four bits are variable then set it to 00:...:00:0f. The actual</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>variable bits shall be determined by the interfaces added, with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interfaces not matching the mask being rejected to be brought up.</span>", 
"<span class=\"comment\"> * @n_addresses: number of addresses in @addresses.</span>", 
"<span class=\"comment\"> * @addresses: If the device has more than one address, set this pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to a list of addresses (6 bytes each). The first one will be used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by default for perm_addr. In this case, the mask should be set to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>all-zeroes. In this case it is assumed that the device can handle</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the same number of arbitrary MAC addresses.</span>", 
"<span class=\"comment\"> * @debugfsdir: debugfs directory used for this wiphy, will be renamed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>automatically on wiphy renames</span>", 
"<span class=\"comment\"> * @dev: (virtual) struct device for this wiphy</span>", 
"<span class=\"comment\"> * @wext: wireless extension handlers</span>", 
"<span class=\"comment\"> * @priv: driver private data (sized according to wiphy_new() parameter)</span>", 
"<span class=\"comment\"> * @interface_modes: bitmask of interfaces types valid for this wiphy,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>must be set by driver</span>", 
"<span class=\"comment\"> * @flags: wiphy flags, see &amp;enum wiphy_flags</span>", 
"<span class=\"comment\"> * @bss_priv_size: each BSS struct has private data allocated with it,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this variable determines its size</span>", 
"<span class=\"comment\"> * @max_scan_ssids: maximum number of SSIDs the device can scan for in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>any given scan</span>", 
"<span class=\"comment\"> * @max_scan_ie_len: maximum length of user-controlled IEs device can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>add to probe request frames transmitted during a scan, must not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>include fixed IEs like supported rates</span>", 
"<span class=\"comment\"> * @coverage_class: current coverage class</span>", 
"<span class=\"comment\"> * @fw_version: firmware version for ethtool reporting</span>", 
"<span class=\"comment\"> * @hw_version: hardware version for ethtool reporting</span>", 
"<span class=\"comment\"> * @max_num_pmkids: maximum number of PMKIDs supported by device</span>", 
"<span class=\"comment\"> * @privid: a pointer that drivers can use to identify if an arbitrary</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>wiphy is theirs, e.g. in global notifiers</span>", 
"<span class=\"comment\"> * @bands: information about bands/channels supported by this device</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#wiphy\">wiphy</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* assign these fields before you register the wiphy */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* permanent MAC address(es) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#perm_addr\">perm_addr</a>[<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#addr_mask\">addr_mask</a>[<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#n_addresses\">n_addresses</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mac_address\">mac_address</a> *<a class=\"id\" href=\"#addresses\">addresses</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Supported interface modes, OR together BIT(NL80211_IFTYPE_...) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#interface_modes\">interface_modes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#cfg80211_signal_type\">cfg80211_signal_type</a> <a class=\"id\" href=\"#signal_type\">signal_type</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bss_priv_size\">bss_priv_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#max_scan_ssids\">max_scan_ssids</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#max_scan_ie_len\">max_scan_ie_len</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n_cipher_suites\">n_cipher_suites</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#cipher_suites\">cipher_suites</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#retry_short\">retry_short</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#retry_long\">retry_long</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#frag_threshold\">frag_threshold</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#rts_threshold\">rts_threshold</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#coverage_class\">coverage_class</a>;", 
"", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#fw_version\">fw_version</a>[<a class=\"id\" href=\"#ETHTOOL_BUSINFO_LEN\">ETHTOOL_BUSINFO_LEN</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hw_version\">hw_version</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#max_num_pmkids\">max_num_pmkids</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If multiple wiphys are registered and you're handed e.g.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a regular netdev with assigned ieee80211_ptr, you won't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * know whether it points to a wiphy your driver has registered</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or not. Assign this to something global to your driver to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * help determine whether you own this wiphy or not. */</span>", 
"<span class=\"ts\"/>const void *<a class=\"id\" href=\"#privid\">privid</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_supported_band\">ieee80211_supported_band</a> *<a class=\"id\" href=\"#bands\">bands</a>[<a class=\"id\" href=\"#IEEE80211_NUM_BANDS\">IEEE80211_NUM_BANDS</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lets us get back the wiphy on the callback */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#reg_notifier\">reg_notifier</a>)(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#regulatory_request\">regulatory_request</a> *<a class=\"id\" href=\"#request\">request</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fields below are read-only, assigned by cfg80211 */</span>", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ieee80211_regdomain\">ieee80211_regdomain</a> *<a class=\"id\" href=\"#regd\">regd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the item in /sys/class/ieee80211/ points to this,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * you need use set_wiphy_dev() (see below) */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* dir in debugfs: ieee80211/&lt;wiphyname&gt; */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfsdir\">debugfsdir</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* the network namespace this phy lives in currently */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#_net\">_net</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CFG80211_WEXT\">CONFIG_CFG80211_WEXT</a>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#iw_handler_def\">iw_handler_def</a> *<a class=\"id\" href=\"#wext\">wext</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#priv\">priv</a>[0] <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__aligned__\">__aligned__</a>(<a class=\"id\" href=\"#NETDEV_ALIGN\">NETDEV_ALIGN</a>)));", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#wiphy_net\">wiphy_net</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_pnet\">read_pnet</a>(&amp;<a class=\"id\" href=\"#wiphy\">wiphy</a>-><a class=\"id\" href=\"#_net\">_net</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#wiphy_net_set\">wiphy_net_set</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_pnet\">write_pnet</a>(&amp;<a class=\"id\" href=\"#wiphy\">wiphy</a>-><a class=\"id\" href=\"#_net\">_net</a>, <a class=\"id\" href=\"#net\">net</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_priv - return priv from wiphy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy whose priv pointer to return</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#wiphy_priv\">wiphy_priv</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#wiphy\">wiphy</a>);", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#wiphy\">wiphy</a>-><a class=\"id\" href=\"#priv\">priv</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * priv_to_wiphy - return the wiphy containing the priv</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @priv: a pointer previously returned by wiphy_priv</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#priv_to_wiphy\">priv_to_wiphy</a>(void *<a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#priv\">priv</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#priv\">priv</a>, struct <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#priv\">priv</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_wiphy_dev - set device pointer for wiphy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: The wiphy whose device to bind</span>", 
"<span class=\"comment\"> * @dev: The device to parent it to</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_wiphy_dev\">set_wiphy_dev</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wiphy\">wiphy</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_dev - get wiphy dev pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: The wiphy whose device struct to look up</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#wiphy_dev\">wiphy_dev</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wiphy\">wiphy</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_name - get wiphy name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: The wiphy whose name to return</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> const char *<a class=\"id\" href=\"#wiphy_name\">wiphy_name</a>(const struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#wiphy\">wiphy</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_new - create a new wiphy for use with cfg80211</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ops: The configuration operations for this device</span>", 
"<span class=\"comment\"> * @sizeof_priv: The size of the private area to allocate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Create a new wiphy and associate the given operations with it.</span>", 
"<span class=\"comment\"> * @sizeof_priv bytes are allocated for private use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The returned pointer must be assigned to each netdev's</span>", 
"<span class=\"comment\"> * ieee80211_ptr for proper operation.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy_new\">wiphy_new</a>(const struct <a class=\"id\" href=\"#cfg80211_ops\">cfg80211_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, int <a class=\"id\" href=\"#sizeof_priv\">sizeof_priv</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_register - register a wiphy with cfg80211</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: The wiphy to register.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a non-negative wiphy index or a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#wiphy_register\">wiphy_register</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_unregister - deregister a wiphy from cfg80211</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: The wiphy to unregister.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After this call, no more requests can be made with this priv</span>", 
"<span class=\"comment\"> * pointer, but the call may sleep to wait for an outstanding</span>", 
"<span class=\"comment\"> * request that is being handled.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#wiphy_unregister\">wiphy_unregister</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_free - free wiphy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: The wiphy to free</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#wiphy_free\">wiphy_free</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>);", 
"", 
"<span class=\"comment\">/* internal structs */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_conn\">cfg80211_conn</a>;", 
"struct <a class=\"id\" href=\"#cfg80211_internal_bss\">cfg80211_internal_bss</a>;", 
"struct <a class=\"id\" href=\"#cfg80211_cached_keys\">cfg80211_cached_keys</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_AUTH_BSSES\">MAX_AUTH_BSSES</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct wireless_dev - wireless per-netdev state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure must be allocated by the driver/stack</span>", 
"<span class=\"comment\"> * that uses the ieee80211_ptr field in struct net_device</span>", 
"<span class=\"comment\"> * (this is intentional so it can be allocated along with</span>", 
"<span class=\"comment\"> * the netdev.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: pointer to hardware description</span>", 
"<span class=\"comment\"> * @iftype: interface type</span>", 
"<span class=\"comment\"> * @list: (private) Used to collect the interfaces</span>", 
"<span class=\"comment\"> * @netdev: (private) Used to reference back to the netdev</span>", 
"<span class=\"comment\"> * @current_bss: (private) Used by the internal configuration code</span>", 
"<span class=\"comment\"> * @channel: (private) Used by the internal configuration code to track</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>user-set AP, monitor and WDS channels for wireless extensions</span>", 
"<span class=\"comment\"> * @bssid: (private) Used by the internal configuration code</span>", 
"<span class=\"comment\"> * @ssid: (private) Used by the internal configuration code</span>", 
"<span class=\"comment\"> * @ssid_len: (private) Used by the internal configuration code</span>", 
"<span class=\"comment\"> * @wext: (private) Used by the internal wireless extensions compat code</span>", 
"<span class=\"comment\"> * @use_4addr: indicates 4addr mode is used on this interface, must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set by driver (if supported) on add_interface BEFORE registering the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev and may otherwise be used by driver read-only, will be update</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by cfg80211 on change_interface</span>", 
"<span class=\"comment\"> * @action_registrations: list of registrations for action frames</span>", 
"<span class=\"comment\"> * @action_registrations_lock: lock for the list</span>", 
"<span class=\"comment\"> * @mtx: mutex used to lock data in this struct</span>", 
"<span class=\"comment\"> * @cleanup_work: work struct used for cleanup that can't be done directly</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#wireless_dev\">wireless_dev</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#nl80211_iftype\">nl80211_iftype</a> <a class=\"id\" href=\"#iftype\">iftype</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the remainder of this struct should be private to cfg80211 */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#netdev\">netdev</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#action_registrations\">action_registrations</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#action_registrations_lock\">action_registrations_lock</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#mtx\">mtx</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#cleanup_work\">cleanup_work</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#use_4addr\">use_4addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* currently used for IBSS and SME - might be rearranged later */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ssid\">ssid</a>[<a class=\"id\" href=\"#IEEE80211_MAX_SSID_LEN\">IEEE80211_MAX_SSID_LEN</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ssid_len\">ssid_len</a>;", 
"<span class=\"ts\"/>enum {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CFG80211_SME_IDLE\">CFG80211_SME_IDLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CFG80211_SME_CONNECTING\">CFG80211_SME_CONNECTING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CFG80211_SME_CONNECTED\">CFG80211_SME_CONNECTED</a>,", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#sme_state\">sme_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_conn\">cfg80211_conn</a> *<a class=\"id\" href=\"#conn\">conn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_cached_keys\">cfg80211_cached_keys</a> *<a class=\"id\" href=\"#connect_keys\">connect_keys</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#event_list\">event_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#event_lock\">event_lock</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_internal_bss\">cfg80211_internal_bss</a> *<a class=\"id\" href=\"#authtry_bsses\">authtry_bsses</a>[<a class=\"id\" href=\"#MAX_AUTH_BSSES\">MAX_AUTH_BSSES</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_internal_bss\">cfg80211_internal_bss</a> *<a class=\"id\" href=\"#auth_bsses\">auth_bsses</a>[<a class=\"id\" href=\"#MAX_AUTH_BSSES\">MAX_AUTH_BSSES</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_internal_bss\">cfg80211_internal_bss</a> *<a class=\"id\" href=\"#current_bss\">current_bss</a>; <span class=\"comment\">/* associated / joined */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ps\">ps</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ps_timeout\">ps_timeout</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CFG80211_WEXT\">CONFIG_CFG80211_WEXT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* wext data */</span>", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_ibss_params\">cfg80211_ibss_params</a> <a class=\"id\" href=\"#ibss\">ibss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_connect_params\">cfg80211_connect_params</a> <a class=\"id\" href=\"#connect\">connect</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_cached_keys\">cfg80211_cached_keys</a> *<a class=\"id\" href=\"#keys\">keys</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ie_len\">ie_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#bssid\">bssid</a>[<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>], <a class=\"id\" href=\"#prev_bssid\">prev_bssid</a>[<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ssid\">ssid</a>[<a class=\"id\" href=\"#IEEE80211_MAX_SSID_LEN\">IEEE80211_MAX_SSID_LEN</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s8\">s8</a> <a class=\"id\" href=\"#default_key\">default_key</a>, <a class=\"id\" href=\"#default_mgmt_key\">default_mgmt_key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#prev_bssid_valid\">prev_bssid_valid</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#wext\">wext</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wdev_priv - return wiphy priv from wireless_dev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wdev: The wireless device whose wiphy's priv pointer to return</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#wdev_priv\">wdev_priv</a>(struct <a class=\"id\" href=\"#wireless_dev\">wireless_dev</a> *<a class=\"id\" href=\"#wdev\">wdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#wdev\">wdev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wiphy_priv\">wiphy_priv</a>(<a class=\"id\" href=\"#wdev\">wdev</a>-><a class=\"id\" href=\"#wiphy\">wiphy</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Utility functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_channel_to_frequency - convert channel number to frequency</span>", 
"<span class=\"comment\"> * @chan: channel number</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#ieee80211_channel_to_frequency\">ieee80211_channel_to_frequency</a>(int <a class=\"id\" href=\"#chan\">chan</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_frequency_to_channel - convert frequency to channel number</span>", 
"<span class=\"comment\"> * @freq: center frequency</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#ieee80211_frequency_to_channel\">ieee80211_frequency_to_channel</a>(int <a class=\"id\" href=\"#freq\">freq</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Name indirection necessary because the ieee80211 code also has</span>", 
"<span class=\"comment\"> * a function named \"ieee80211_get_channel\", so if you include</span>", 
"<span class=\"comment\"> * cfg80211's header file you get cfg80211's version, if you try</span>", 
"<span class=\"comment\"> * to include both header files you'll (rightfully!) get a symbol</span>", 
"<span class=\"comment\"> * clash.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#__ieee80211_get_channel\">__ieee80211_get_channel</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#freq\">freq</a>);", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_get_channel - get channel struct from wiphy for specified frequency</span>", 
"<span class=\"comment\"> * @wiphy: the struct wiphy to get the channel for</span>", 
"<span class=\"comment\"> * @freq: the center frequency of the channel</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *", 
"<a class=\"id\" href=\"#ieee80211_get_channel\">ieee80211_get_channel</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>, int <a class=\"id\" href=\"#freq\">freq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ieee80211_get_channel\">__ieee80211_get_channel</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#freq\">freq</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_get_response_rate - get basic rate for a given rate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @sband: the band to look for rates in</span>", 
"<span class=\"comment\"> * @basic_rates: bitmap of basic rates</span>", 
"<span class=\"comment\"> * @bitrate: the bitrate for which to find the basic rate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns the basic rate corresponding to a given</span>", 
"<span class=\"comment\"> * bitrate, that is the next lower bitrate contained in the basic</span>", 
"<span class=\"comment\"> * rate map, which is, for this function, given as a bitmap of</span>", 
"<span class=\"comment\"> * indices of rates in the band's bitrate table.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ieee80211_rate\">ieee80211_rate</a> *", 
"<a class=\"id\" href=\"#ieee80211_get_response_rate\">ieee80211_get_response_rate</a>(struct <a class=\"id\" href=\"#ieee80211_supported_band\">ieee80211_supported_band</a> *<a class=\"id\" href=\"#sband\">sband</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#basic_rates\">basic_rates</a>, int <a class=\"id\" href=\"#bitrate\">bitrate</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Radiotap parsing functions -- for controlled injection support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Implemented in net/wireless/radiotap.c</span>", 
"<span class=\"comment\"> * Documentation in Documentation/networking/radiotap-headers.txt</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#radiotap_align_size\">radiotap_align_size</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#align\">align</a>:4, <a class=\"id\" href=\"#size\">size</a>:4;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ieee80211_radiotap_namespace\">ieee80211_radiotap_namespace</a> {", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#radiotap_align_size\">radiotap_align_size</a> *<a class=\"id\" href=\"#align_size\">align_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n_bits\">n_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#oui\">oui</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#subns\">subns</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ieee80211_radiotap_vendor_namespaces\">ieee80211_radiotap_vendor_namespaces</a> {", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ieee80211_radiotap_namespace\">ieee80211_radiotap_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n_ns\">n_ns</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ieee80211_radiotap_iterator - tracks walk thru present radiotap args</span>", 
"<span class=\"comment\"> * @this_arg_index: index of current arg, valid after each successful call</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to ieee80211_radiotap_iterator_next()</span>", 
"<span class=\"comment\"> * @this_arg: pointer to current radiotap arg; it is valid after each</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>call to ieee80211_radiotap_iterator_next() but also after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ieee80211_radiotap_iterator_init() where it will point to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the beginning of the actual data portion</span>", 
"<span class=\"comment\"> * @this_arg_size: length of the current arg, for convenience</span>", 
"<span class=\"comment\"> * @current_namespace: pointer to the current namespace definition</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(or internally %NULL if the current namespace is unknown)</span>", 
"<span class=\"comment\"> * @is_radiotap_ns: indicates whether the current namespace is the default</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radiotap namespace or not</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @_rtheader: pointer to the radiotap header we are walking through</span>", 
"<span class=\"comment\"> * @_max_length: length of radiotap header in cpu byte ordering</span>", 
"<span class=\"comment\"> * @_arg_index: next argument index</span>", 
"<span class=\"comment\"> * @_arg: next argument pointer</span>", 
"<span class=\"comment\"> * @_next_bitmap: internal pointer to next present u32</span>", 
"<span class=\"comment\"> * @_bitmap_shifter: internal shifter for curr u32 bitmap, b0 set == arg present</span>", 
"<span class=\"comment\"> * @_vns: vendor namespace definitions</span>", 
"<span class=\"comment\"> * @_next_ns_data: beginning of the next namespace's data</span>", 
"<span class=\"comment\"> * @_reset_on_ext: internal; reset the arg index to 0 when going to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>next bitmap word</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Describes the radiotap parser state. Fields prefixed with an underscore</span>", 
"<span class=\"comment\"> * must not be used by users of the parser, only by the parser internally.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#ieee80211_radiotap_iterator\">ieee80211_radiotap_iterator</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_radiotap_header\">ieee80211_radiotap_header</a> *<a class=\"id\" href=\"#_rtheader\">_rtheader</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ieee80211_radiotap_vendor_namespaces\">ieee80211_radiotap_vendor_namespaces</a> *<a class=\"id\" href=\"#_vns\">_vns</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ieee80211_radiotap_namespace\">ieee80211_radiotap_namespace</a> *<a class=\"id\" href=\"#current_namespace\">current_namespace</a>;", 
"", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#_arg\">_arg</a>, *<a class=\"id\" href=\"#_next_ns_data\">_next_ns_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#_next_bitmap\">_next_bitmap</a>;", 
"", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#this_arg\">this_arg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_arg_index\">this_arg_index</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_arg_size\">this_arg_size</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_radiotap_ns\">is_radiotap_ns</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#_max_length\">_max_length</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#_arg_index\">_arg_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#_bitmap_shifter\">_bitmap_shifter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#_reset_on_ext\">_reset_on_ext</a>;", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#ieee80211_radiotap_iterator_init\">ieee80211_radiotap_iterator_init</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_radiotap_iterator\">ieee80211_radiotap_iterator</a> *<a class=\"id\" href=\"#iterator\">iterator</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_radiotap_header\">ieee80211_radiotap_header</a> *<a class=\"id\" href=\"#radiotap_header\">radiotap_header</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_length\">max_length</a>, const struct <a class=\"id\" href=\"#ieee80211_radiotap_vendor_namespaces\">ieee80211_radiotap_vendor_namespaces</a> *<a class=\"id\" href=\"#vns\">vns</a>);", 
"", 
"extern int <a class=\"id\" href=\"#ieee80211_radiotap_iterator_next\">ieee80211_radiotap_iterator_next</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_radiotap_iterator\">ieee80211_radiotap_iterator</a> *<a class=\"id\" href=\"#iterator\">iterator</a>);", 
"", 
"", 
"extern const unsigned char <a class=\"id\" href=\"#rfc1042_header\">rfc1042_header</a>[6];", 
"extern const unsigned char <a class=\"id\" href=\"#bridge_tunnel_header\">bridge_tunnel_header</a>[6];", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_get_hdrlen_from_skb - get header length from data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given an skb with a raw 802.11 header at the data pointer this function</span>", 
"<span class=\"comment\"> * returns the 802.11 header length in bytes (not including encryption</span>", 
"<span class=\"comment\"> * headers). If the data in the sk_buff is too short to contain a valid 802.11</span>", 
"<span class=\"comment\"> * header the function returns 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @skb: the frame</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#ieee80211_get_hdrlen_from_skb\">ieee80211_get_hdrlen_from_skb</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_hdrlen - get header length in bytes from frame control</span>", 
"<span class=\"comment\"> * @fc: frame control field in little-endian format</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#ieee80211_hdrlen\">ieee80211_hdrlen</a>(<a class=\"id\" href=\"#__le16\">__le16</a> <a class=\"id\" href=\"#fc\">fc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_data_to_8023 - convert an 802.11 data frame to 802.3</span>", 
"<span class=\"comment\"> * @skb: the 802.11 data frame</span>", 
"<span class=\"comment\"> * @addr: the device MAC address</span>", 
"<span class=\"comment\"> * @iftype: the virtual interface type</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ieee80211_data_to_8023\">ieee80211_data_to_8023</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#nl80211_iftype\">nl80211_iftype</a> <a class=\"id\" href=\"#iftype\">iftype</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_data_from_8023 - convert an 802.3 frame to 802.11</span>", 
"<span class=\"comment\"> * @skb: the 802.3 frame</span>", 
"<span class=\"comment\"> * @addr: the device MAC address</span>", 
"<span class=\"comment\"> * @iftype: the virtual interface type</span>", 
"<span class=\"comment\"> * @bssid: the network bssid (used only for iftype STATION and ADHOC)</span>", 
"<span class=\"comment\"> * @qos: build 802.11 QoS data frame</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ieee80211_data_from_8023\">ieee80211_data_from_8023</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#nl80211_iftype\">nl80211_iftype</a> <a class=\"id\" href=\"#iftype\">iftype</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bssid\">bssid</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#qos\">qos</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_amsdu_to_8023s - decode an IEEE 802.11n A-MSDU frame</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Decode an IEEE 802.11n A-MSDU frame and convert it to a list of</span>", 
"<span class=\"comment\"> * 802.3 frames. The @list will be empty if the decode fails. The</span>", 
"<span class=\"comment\"> * @skb is consumed after the function returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @skb: The input IEEE 802.11n A-MSDU frame.</span>", 
"<span class=\"comment\"> * @list: The output list of 802.3 frames. It must be allocated and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>initialized by by the caller.</span>", 
"<span class=\"comment\"> * @addr: The device MAC address.</span>", 
"<span class=\"comment\"> * @iftype: The device interface type.</span>", 
"<span class=\"comment\"> * @extra_headroom: The hardware extra headroom for SKBs in the @list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ieee80211_amsdu_to_8023s\">ieee80211_amsdu_to_8023s</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#nl80211_iftype\">nl80211_iftype</a> <a class=\"id\" href=\"#iftype\">iftype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const unsigned int <a class=\"id\" href=\"#extra_headroom\">extra_headroom</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_classify8021d - determine the 802.1p/1d tag for a data frame</span>", 
"<span class=\"comment\"> * @skb: the data frame</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#cfg80211_classify8021d\">cfg80211_classify8021d</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_find_ie - find information element in data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @eid: element ID</span>", 
"<span class=\"comment\"> * @ies: data consisting of IEs</span>", 
"<span class=\"comment\"> * @len: length of data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return %NULL if the element ID could</span>", 
"<span class=\"comment\"> * not be found or if the element is invalid (claims to be</span>", 
"<span class=\"comment\"> * longer than the given data), or a pointer to the first byte</span>", 
"<span class=\"comment\"> * of the requested element, that is the byte containing the</span>", 
"<span class=\"comment\"> * element ID. There are no checks on the element length</span>", 
"<span class=\"comment\"> * other than having to fit into the given data.</span>", 
"<span class=\"comment\"> */</span>", 
"const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cfg80211_find_ie\">cfg80211_find_ie</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#eid\">eid</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ies\">ies</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Regulatory helper functions for wiphys</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * regulatory_hint - driver hint to the wireless core a regulatory domain</span>", 
"<span class=\"comment\"> * @wiphy: the wireless device giving the hint (used only for reporting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>conflicts)</span>", 
"<span class=\"comment\"> * @alpha2: the ISO/IEC 3166 alpha2 the driver claims its regulatory domain</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>should be in. If @rd is set this should be NULL. Note that if you</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>set this to NULL you should still set rd-&gt;alpha2 to some accepted</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>alpha2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wireless drivers can use this function to hint to the wireless core</span>", 
"<span class=\"comment\"> * what it believes should be the current regulatory domain by</span>", 
"<span class=\"comment\"> * giving it an ISO/IEC 3166 alpha2 country code it knows its regulatory</span>", 
"<span class=\"comment\"> * domain should be in or by providing a completely build regulatory domain.</span>", 
"<span class=\"comment\"> * If the driver provides an ISO/IEC 3166 alpha2 userspace will be queried</span>", 
"<span class=\"comment\"> * for a regulatory domain structure for the respective country.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The wiphy must have been registered to cfg80211 prior to this call.</span>", 
"<span class=\"comment\"> * For cfg80211 drivers this means you must first use wiphy_register(),</span>", 
"<span class=\"comment\"> * for mac80211 drivers you must first use ieee80211_register_hw().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Drivers should check the return value, its possible you can get</span>", 
"<span class=\"comment\"> * an -ENOMEM.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#regulatory_hint\">regulatory_hint</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>, const char *<a class=\"id\" href=\"#alpha2\">alpha2</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_apply_custom_regulatory - apply a custom driver regulatory domain</span>", 
"<span class=\"comment\"> * @wiphy: the wireless device we want to process the regulatory domain on</span>", 
"<span class=\"comment\"> * @regd: the custom regulatory domain to use for this wiphy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Drivers can sometimes have custom regulatory domains which do not apply</span>", 
"<span class=\"comment\"> * to a specific country. Drivers can use this to apply such custom regulatory</span>", 
"<span class=\"comment\"> * domains. This routine must be called prior to wiphy registration. The</span>", 
"<span class=\"comment\"> * custom regulatory domain will be trusted completely and as such previous</span>", 
"<span class=\"comment\"> * default channel settings will be disregarded. If no rule is found for a</span>", 
"<span class=\"comment\"> * channel on the regulatory domain the channel will be disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#wiphy_apply_custom_regulatory\">wiphy_apply_custom_regulatory</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ieee80211_regdomain\">ieee80211_regdomain</a> *<a class=\"id\" href=\"#regd\">regd</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * freq_reg_info - get regulatory information for the given frequency</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy for which we want to process this rule for</span>", 
"<span class=\"comment\"> * @center_freq: Frequency in KHz for which we want regulatory information for</span>", 
"<span class=\"comment\"> * @desired_bw_khz: the desired max bandwidth you want to use per</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>channel. Note that this is still 20 MHz if you want to use HT40</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as HT40 makes use of two channels for its 40 MHz width bandwidth.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If set to 0 we'll assume you want the standard 20 MHz.</span>", 
"<span class=\"comment\"> * @reg_rule: the regulatory rule which we have for this frequency</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use this function to get the regulatory rule for a specific frequency on</span>", 
"<span class=\"comment\"> * a given wireless device. If the device has a specific regulatory domain</span>", 
"<span class=\"comment\"> * it wants to follow we respect that unless a country IE has been received</span>", 
"<span class=\"comment\"> * and processed already.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if it was able to find a valid regulatory rule which does</span>", 
"<span class=\"comment\"> * apply to the given center_freq otherwise it returns non-zero. It will</span>", 
"<span class=\"comment\"> * also return -ERANGE if we determine the given center_freq does not even have</span>", 
"<span class=\"comment\"> * a regulatory rule for a frequency range in the center_freq's band. See</span>", 
"<span class=\"comment\"> * freq_in_rule_band() for our current definition of a band -- this is purely</span>", 
"<span class=\"comment\"> * subjective and right now its 802.11 specific.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#freq_reg_info\">freq_reg_info</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#center_freq\">center_freq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#desired_bw_khz\">desired_bw_khz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#ieee80211_reg_rule\">ieee80211_reg_rule</a> **<a class=\"id\" href=\"#reg_rule\">reg_rule</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Temporary wext handlers &amp; helper functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the future cfg80211 will simply assign the entire wext handler</span>", 
"<span class=\"comment\"> * structure to netdevs it manages, but we're not there yet.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwname\">cfg80211_wext_giwname</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char *<a class=\"id\" href=\"#name\">name</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwmode\">cfg80211_wext_siwmode</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#mode\">mode</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwmode\">cfg80211_wext_giwmode</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#mode\">mode</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwscan\">cfg80211_wext_siwscan</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#iwreq_data\">iwreq_data</a> *<a class=\"id\" href=\"#wrqu\">wrqu</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwscan\">cfg80211_wext_giwscan</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwmlme\">cfg80211_wext_siwmlme</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwrange\">cfg80211_wext_giwrange</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwgenie\">cfg80211_wext_siwgenie</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwauth\">cfg80211_wext_siwauth</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwauth\">cfg80211_wext_giwauth</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwfreq\">cfg80211_wext_siwfreq</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_freq\">iw_freq</a> *<a class=\"id\" href=\"#freq\">freq</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwfreq\">cfg80211_wext_giwfreq</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_freq\">iw_freq</a> *<a class=\"id\" href=\"#freq\">freq</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwessid\">cfg80211_wext_siwessid</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#ssid\">ssid</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwessid\">cfg80211_wext_giwessid</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#ssid\">ssid</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwrate\">cfg80211_wext_siwrate</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#rate\">rate</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwrate\">cfg80211_wext_giwrate</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#rate\">rate</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwrts\">cfg80211_wext_siwrts</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#rts\">rts</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwrts\">cfg80211_wext_giwrts</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#rts\">rts</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwfrag\">cfg80211_wext_siwfrag</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#frag\">frag</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwfrag\">cfg80211_wext_giwfrag</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#frag\">frag</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwretry\">cfg80211_wext_siwretry</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#retry\">retry</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwretry\">cfg80211_wext_giwretry</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#retry\">retry</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwencodeext\">cfg80211_wext_siwencodeext</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#erq\">erq</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwencode\">cfg80211_wext_siwencode</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#erq\">erq</a>, char *<a class=\"id\" href=\"#keybuf\">keybuf</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwencode\">cfg80211_wext_giwencode</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#erq\">erq</a>, char *<a class=\"id\" href=\"#keybuf\">keybuf</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwtxpower\">cfg80211_wext_siwtxpower</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     union <a class=\"id\" href=\"#iwreq_data\">iwreq_data</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#keybuf\">keybuf</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwtxpower\">cfg80211_wext_giwtxpower</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     union <a class=\"id\" href=\"#iwreq_data\">iwreq_data</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#keybuf\">keybuf</a>);", 
"struct <a class=\"id\" href=\"#iw_statistics\">iw_statistics</a> *<a class=\"id\" href=\"#cfg80211_wireless_stats\">cfg80211_wireless_stats</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwpower\">cfg80211_wext_siwpower</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#wrq\">wrq</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwpower\">cfg80211_wext_giwpower</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_param\">iw_param</a> *<a class=\"id\" href=\"#wrq\">wrq</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwap\">cfg80211_wext_siwap</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#ap_addr\">ap_addr</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"int <a class=\"id\" href=\"#cfg80211_wext_giwap\">cfg80211_wext_giwap</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#ap_addr\">ap_addr</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"", 
"int <a class=\"id\" href=\"#cfg80211_wext_siwpmksa\">cfg80211_wext_siwpmksa</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iw_point\">iw_point</a> *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * callbacks for asynchronous cfg80211 methods, notification</span>", 
"<span class=\"comment\"> * functions and BSS handling helpers</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_scan_done - notify that scan finished</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @request: the corresponding scan request</span>", 
"<span class=\"comment\"> * @aborted: set to true if the scan was aborted for any reason,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>userspace will be notified of that</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_scan_done\">cfg80211_scan_done</a>(struct <a class=\"id\" href=\"#cfg80211_scan_request\">cfg80211_scan_request</a> *<a class=\"id\" href=\"#request\">request</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#aborted\">aborted</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_inform_bss_frame - inform cfg80211 of a received BSS frame</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy reporting the BSS</span>", 
"<span class=\"comment\"> * @channel: The channel the frame was received on</span>", 
"<span class=\"comment\"> * @mgmt: the management frame (probe response or beacon)</span>", 
"<span class=\"comment\"> * @len: length of the management frame</span>", 
"<span class=\"comment\"> * @signal: the signal strength, type depends on the wiphy's signal_type</span>", 
"<span class=\"comment\"> * @gfp: context flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This informs cfg80211 that BSS information was found and</span>", 
"<span class=\"comment\"> * the BSS should be updated/added.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a>*", 
"<a class=\"id\" href=\"#cfg80211_inform_bss_frame\">cfg80211_inform_bss_frame</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ieee80211_mgmt\">ieee80211_mgmt</a> *<a class=\"id\" href=\"#mgmt\">mgmt</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_inform_bss - inform cfg80211 of a new BSS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy reporting the BSS</span>", 
"<span class=\"comment\"> * @channel: The channel the frame was received on</span>", 
"<span class=\"comment\"> * @bssid: the BSSID of the BSS</span>", 
"<span class=\"comment\"> * @timestamp: the TSF timestamp sent by the peer</span>", 
"<span class=\"comment\"> * @capability: the capability field sent by the peer</span>", 
"<span class=\"comment\"> * @beacon_interval: the beacon interval announced by the peer</span>", 
"<span class=\"comment\"> * @ie: additional IEs sent by the peer</span>", 
"<span class=\"comment\"> * @ielen: length of the additional IEs</span>", 
"<span class=\"comment\"> * @signal: the signal strength, type depends on the wiphy's signal_type</span>", 
"<span class=\"comment\"> * @gfp: context flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This informs cfg80211 that BSS information was found and</span>", 
"<span class=\"comment\"> * the BSS should be updated/added.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a>*", 
"<a class=\"id\" href=\"#cfg80211_inform_bss\">cfg80211_inform_bss</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bssid\">bssid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#timestamp\">timestamp</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#capability\">capability</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#beacon_interval\">beacon_interval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ielen\">ielen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#cfg80211_get_bss\">cfg80211_get_bss</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bssid\">bssid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ssid_len\">ssid_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#capa_mask\">capa_mask</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#capa_val\">capa_val</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *", 
"<a class=\"id\" href=\"#cfg80211_get_ibss\">cfg80211_get_ibss</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ssid_len\">ssid_len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfg80211_get_bss\">cfg80211_get_bss</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#ssid_len\">ssid_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WLAN_CAPABILITY_IBSS\">WLAN_CAPABILITY_IBSS</a>, <a class=\"id\" href=\"#WLAN_CAPABILITY_IBSS\">WLAN_CAPABILITY_IBSS</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#cfg80211_get_mesh\">cfg80211_get_mesh</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#meshid\">meshid</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#meshidlen\">meshidlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#meshcfg\">meshcfg</a>);", 
"void <a class=\"id\" href=\"#cfg80211_put_bss\">cfg80211_put_bss</a>(struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#bss\">bss</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_unlink_bss - unlink BSS from internal data structures</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy</span>", 
"<span class=\"comment\"> * @bss: the bss to remove</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function removes the given BSS from the internal data structures</span>", 
"<span class=\"comment\"> * thereby making it no longer show up in scan results etc. Use this</span>", 
"<span class=\"comment\"> * function when you detect a BSS is gone. Normally BSSes will also time</span>", 
"<span class=\"comment\"> * out, so it is not necessary to use this function at all.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_unlink_bss\">cfg80211_unlink_bss</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>, struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#bss\">bss</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_send_rx_auth - notification of processed authentication</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @buf: authentication frame (header + body)</span>", 
"<span class=\"comment\"> * @len: length of the frame data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called whenever an authentication has been processed in</span>", 
"<span class=\"comment\"> * station mode. The driver is required to call either this function or</span>", 
"<span class=\"comment\"> * cfg80211_send_auth_timeout() to indicate the result of cfg80211_ops::auth()</span>", 
"<span class=\"comment\"> * call. This function may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_send_rx_auth\">cfg80211_send_rx_auth</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_send_auth_timeout - notification of timed out authentication</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @addr: The MAC address of the device with which the authentication timed out</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_send_auth_timeout\">cfg80211_send_auth_timeout</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __cfg80211_auth_canceled - notify cfg80211 that authentication was canceled</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @addr: The MAC address of the device with which the authentication timed out</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When a pending authentication had no action yet, the driver may decide</span>", 
"<span class=\"comment\"> * to not send a deauth frame, but in that case must calls this function</span>", 
"<span class=\"comment\"> * to tell cfg80211 about this decision. It is only valid to call this</span>", 
"<span class=\"comment\"> * function within the deauth() callback.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cfg80211_auth_canceled\">__cfg80211_auth_canceled</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_send_rx_assoc - notification of processed association</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @buf: (re)association response frame (header + body)</span>", 
"<span class=\"comment\"> * @len: length of the frame data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called whenever a (re)association response has been</span>", 
"<span class=\"comment\"> * processed in station mode. The driver is required to call either this</span>", 
"<span class=\"comment\"> * function or cfg80211_send_assoc_timeout() to indicate the result of</span>", 
"<span class=\"comment\"> * cfg80211_ops::assoc() call. This function may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_send_rx_assoc\">cfg80211_send_rx_assoc</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_send_assoc_timeout - notification of timed out association</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @addr: The MAC address of the device with which the association timed out</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_send_assoc_timeout\">cfg80211_send_assoc_timeout</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_send_deauth - notification of processed deauthentication</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @buf: deauthentication frame (header + body)</span>", 
"<span class=\"comment\"> * @len: length of the frame data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called whenever deauthentication has been processed in</span>", 
"<span class=\"comment\"> * station mode. This includes both received deauthentication frames and</span>", 
"<span class=\"comment\"> * locally generated ones. This function may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_send_deauth\">cfg80211_send_deauth</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __cfg80211_send_deauth - notification of processed deauthentication</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @buf: deauthentication frame (header + body)</span>", 
"<span class=\"comment\"> * @len: length of the frame data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Like cfg80211_send_deauth(), but doesn't take the wdev lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cfg80211_send_deauth\">__cfg80211_send_deauth</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_send_disassoc - notification of processed disassociation</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @buf: disassociation response frame (header + body)</span>", 
"<span class=\"comment\"> * @len: length of the frame data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called whenever disassociation has been processed in</span>", 
"<span class=\"comment\"> * station mode. This includes both received disassociation frames and locally</span>", 
"<span class=\"comment\"> * generated ones. This function may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_send_disassoc\">cfg80211_send_disassoc</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __cfg80211_send_disassoc - notification of processed disassociation</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @buf: disassociation response frame (header + body)</span>", 
"<span class=\"comment\"> * @len: length of the frame data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Like cfg80211_send_disassoc(), but doesn't take the wdev lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cfg80211_send_disassoc\">__cfg80211_send_disassoc</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_michael_mic_failure - notification of Michael MIC failure (TKIP)</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @addr: The source MAC address of the frame</span>", 
"<span class=\"comment\"> * @key_type: The key type that the received frame used</span>", 
"<span class=\"comment\"> * @key_id: Key identifier (0..3)</span>", 
"<span class=\"comment\"> * @tsc: The TSC value of the frame that generated the MIC failure (6 octets)</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called whenever the local MAC detects a MIC failure in a</span>", 
"<span class=\"comment\"> * received frame. This matches with MLME-MICHAELMICFAILURE.indication()</span>", 
"<span class=\"comment\"> * primitive.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_michael_mic_failure\">cfg80211_michael_mic_failure</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  enum <a class=\"id\" href=\"#nl80211_key_type\">nl80211_key_type</a> <a class=\"id\" href=\"#key_type\">key_type</a>, int <a class=\"id\" href=\"#key_id\">key_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#tsc\">tsc</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_ibss_joined - notify cfg80211 that device joined an IBSS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @bssid: the BSSID of the IBSS joined</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function notifies cfg80211 that the device joined an IBSS or</span>", 
"<span class=\"comment\"> * switched to a different BSSID. Before this function can be called,</span>", 
"<span class=\"comment\"> * either a beacon has to have been received from the IBSS, or one of</span>", 
"<span class=\"comment\"> * the cfg80211_inform_bss{,_frame} functions must have been called</span>", 
"<span class=\"comment\"> * with the locally generated beacon -- this guarantees that there is</span>", 
"<span class=\"comment\"> * always a scan result for this IBSS. cfg80211 will handle the rest.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_ibss_joined\">cfg80211_ibss_joined</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bssid\">bssid</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_rfkill_set_hw_state - notify cfg80211 about hw block state</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy</span>", 
"<span class=\"comment\"> * @blocked: block status</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wiphy_rfkill_set_hw_state\">wiphy_rfkill_set_hw_state</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#blocked\">blocked</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_rfkill_start_polling - start polling rfkill</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wiphy_rfkill_start_polling\">wiphy_rfkill_start_polling</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wiphy_rfkill_stop_polling - stop polling rfkill</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wiphy_rfkill_stop_polling\">wiphy_rfkill_stop_polling</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NL80211_TESTMODE\">CONFIG_NL80211_TESTMODE</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_testmode_alloc_reply_skb - allocate testmode reply</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy</span>", 
"<span class=\"comment\"> * @approxlen: an upper bound of the length of the data that will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be put into the skb</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function allocates and pre-fills an skb for a reply to</span>", 
"<span class=\"comment\"> * the testmode command. Since it is intended for a reply, calling</span>", 
"<span class=\"comment\"> * it outside of the @testmode_cmd operation is invalid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The returned skb (or %NULL if any errors happen) is pre-filled</span>", 
"<span class=\"comment\"> * with the wiphy index and set up in a way that any data that is</span>", 
"<span class=\"comment\"> * put into the skb (with skb_put(), nla_put() or similar) will end</span>", 
"<span class=\"comment\"> * up being within the %NL80211_ATTR_TESTDATA attribute, so all that</span>", 
"<span class=\"comment\"> * needs to be done with the skb is adding data for the corresponding</span>", 
"<span class=\"comment\"> * userspace tool which can then read that data out of the testdata</span>", 
"<span class=\"comment\"> * attribute. You must not modify the skb in any other way.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When done, call cfg80211_testmode_reply() with the skb and return</span>", 
"<span class=\"comment\"> * its error code as the result of the @testmode_cmd operation.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#cfg80211_testmode_alloc_reply_skb\">cfg80211_testmode_alloc_reply_skb</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#approxlen\">approxlen</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_testmode_reply - send the reply skb</span>", 
"<span class=\"comment\"> * @skb: The skb, must have been allocated with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cfg80211_testmode_alloc_reply_skb()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an error code or 0 on success, since calling this</span>", 
"<span class=\"comment\"> * function will usually be the last thing before returning</span>", 
"<span class=\"comment\"> * from the @testmode_cmd you should return the error code.</span>", 
"<span class=\"comment\"> * Note that this function consumes the skb regardless of the</span>", 
"<span class=\"comment\"> * return value.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cfg80211_testmode_reply\">cfg80211_testmode_reply</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_testmode_alloc_event_skb - allocate testmode event</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy</span>", 
"<span class=\"comment\"> * @approxlen: an upper bound of the length of the data that will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be put into the skb</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function allocates and pre-fills an skb for an event on the</span>", 
"<span class=\"comment\"> * testmode multicast group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The returned skb (or %NULL if any errors happen) is set up in the</span>", 
"<span class=\"comment\"> * same way as with cfg80211_testmode_alloc_reply_skb() but prepared</span>", 
"<span class=\"comment\"> * for an event. As there, you should simply add data to it that will</span>", 
"<span class=\"comment\"> * then end up in the %NL80211_ATTR_TESTDATA attribute. Again, you must</span>", 
"<span class=\"comment\"> * not modify the skb in any other way.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When done filling the skb, call cfg80211_testmode_event() with the</span>", 
"<span class=\"comment\"> * skb to send the event.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#cfg80211_testmode_alloc_event_skb\">cfg80211_testmode_alloc_event_skb</a>(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#approxlen\">approxlen</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_testmode_event - send the event</span>", 
"<span class=\"comment\"> * @skb: The skb, must have been allocated with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cfg80211_testmode_alloc_event_skb()</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function sends the given @skb, which must have been allocated</span>", 
"<span class=\"comment\"> * by cfg80211_testmode_alloc_event_skb(), as an event. It always</span>", 
"<span class=\"comment\"> * consumes it.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_testmode_event\">cfg80211_testmode_event</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFG80211_TESTMODE_CMD\">CFG80211_TESTMODE_CMD</a>(<a class=\"id\" href=\"#cmd\">cmd</a>)<span class=\"ts\"/>.<a class=\"id\" href=\"#testmode_cmd\">testmode_cmd</a> = (<a class=\"id\" href=\"#cmd\">cmd</a>),", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFG80211_TESTMODE_CMD\">CFG80211_TESTMODE_CMD</a>(<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_connect_result - notify cfg80211 of connection result</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @bssid: the BSSID of the AP</span>", 
"<span class=\"comment\"> * @req_ie: association request IEs (maybe be %NULL)</span>", 
"<span class=\"comment\"> * @req_ie_len: association request IEs length</span>", 
"<span class=\"comment\"> * @resp_ie: association response IEs (may be %NULL)</span>", 
"<span class=\"comment\"> * @resp_ie_len: assoc response IEs length</span>", 
"<span class=\"comment\"> * @status: status code, 0 for successful connection, use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%WLAN_STATUS_UNSPECIFIED_FAILURE if your device cannot give you</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the real status code for failures.</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It should be called by the underlying driver whenever connect() has</span>", 
"<span class=\"comment\"> * succeeded.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_connect_result\">cfg80211_connect_result</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bssid\">bssid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#req_ie\">req_ie</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#req_ie_len\">req_ie_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#resp_ie\">resp_ie</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#resp_ie_len\">resp_ie_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_roamed - notify cfg80211 of roaming</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @bssid: the BSSID of the new AP</span>", 
"<span class=\"comment\"> * @req_ie: association request IEs (maybe be %NULL)</span>", 
"<span class=\"comment\"> * @req_ie_len: association request IEs length</span>", 
"<span class=\"comment\"> * @resp_ie: association response IEs (may be %NULL)</span>", 
"<span class=\"comment\"> * @resp_ie_len: assoc response IEs length</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It should be called by the underlying driver whenever it roamed</span>", 
"<span class=\"comment\"> * from one AP to another while connected.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_roamed\">cfg80211_roamed</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bssid\">bssid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#req_ie\">req_ie</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#req_ie_len\">req_ie_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#resp_ie\">resp_ie</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#resp_ie_len\">resp_ie_len</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_disconnected - notify cfg80211 that connection was dropped</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @ie: information elements of the deauth/disassoc frame (may be %NULL)</span>", 
"<span class=\"comment\"> * @ie_len: length of IEs</span>", 
"<span class=\"comment\"> * @reason: reason code for the disconnection, set it to 0 if unknown</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After it calls this function, the driver should enter an idle state</span>", 
"<span class=\"comment\"> * and not try to connect to any AP any more.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_disconnected\">cfg80211_disconnected</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#reason\">reason</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ie_len\">ie_len</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_ready_on_channel - notification of remain_on_channel start</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @cookie: the request cookie</span>", 
"<span class=\"comment\"> * @chan: The current channel (from remain_on_channel request)</span>", 
"<span class=\"comment\"> * @channel_type: Channel type</span>", 
"<span class=\"comment\"> * @duration: Duration in milliseconds that the driver intents to remain on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>channel</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_ready_on_channel\">cfg80211_ready_on_channel</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       enum <a class=\"id\" href=\"#nl80211_channel_type\">nl80211_channel_type</a> <a class=\"id\" href=\"#channel_type\">channel_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#duration\">duration</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_remain_on_channel_expired - remain_on_channel duration expired</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @cookie: the request cookie</span>", 
"<span class=\"comment\"> * @chan: The current channel (from remain_on_channel request)</span>", 
"<span class=\"comment\"> * @channel_type: Channel type</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_remain_on_channel_expired\">cfg80211_remain_on_channel_expired</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#nl80211_channel_type\">nl80211_channel_type</a> <a class=\"id\" href=\"#channel_type\">channel_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_new_sta - notify userspace about station</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: the netdev</span>", 
"<span class=\"comment\"> * @mac_addr: the station's address</span>", 
"<span class=\"comment\"> * @sinfo: the station information</span>", 
"<span class=\"comment\"> * @gfp: allocation flags</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_new_sta\">cfg80211_new_sta</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#mac_addr\">mac_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#station_info\">station_info</a> *<a class=\"id\" href=\"#sinfo\">sinfo</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_rx_action - notification of received, unprocessed Action frame</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @freq: Frequency on which the frame was received in MHz</span>", 
"<span class=\"comment\"> * @buf: Action frame (header + body)</span>", 
"<span class=\"comment\"> * @len: length of the frame data</span>", 
"<span class=\"comment\"> * @gfp: context flags</span>", 
"<span class=\"comment\"> * Returns %true if a user space application is responsible for rejecting the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unrecognized Action frame; %false if no such application is registered</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(i.e., the driver is responsible for rejecting the unrecognized Action</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>frame)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called whenever an Action frame is received for a station</span>", 
"<span class=\"comment\"> * mode interface, but is not processed in kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cfg80211_rx_action\">cfg80211_rx_action</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#freq\">freq</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_action_tx_status - notification of TX status for Action frame</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @cookie: Cookie returned by cfg80211_ops::action()</span>", 
"<span class=\"comment\"> * @buf: Action frame (header + body)</span>", 
"<span class=\"comment\"> * @len: length of the frame data</span>", 
"<span class=\"comment\"> * @ack: Whether frame was acknowledged</span>", 
"<span class=\"comment\"> * @gfp: context flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called whenever an Action frame was requested to be</span>", 
"<span class=\"comment\"> * transmitted with cfg80211_ops::action() to report the TX status of the</span>", 
"<span class=\"comment\"> * transmission attempt.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_action_tx_status\">cfg80211_action_tx_status</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ack\">ack</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cfg80211_cqm_rssi_notify - connection quality monitoring rssi event</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @rssi_event: the triggered RSSI event</span>", 
"<span class=\"comment\"> * @gfp: context flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called when a configured connection quality monitoring</span>", 
"<span class=\"comment\"> * rssi threshold reached event occurs.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cfg80211_cqm_rssi_notify\">cfg80211_cqm_rssi_notify</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      enum <a class=\"id\" href=\"#nl80211_cqm_rssi_threshold_event\">nl80211_cqm_rssi_threshold_event</a> <a class=\"id\" href=\"#rssi_event\">rssi_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"<span class=\"comment\">/* Logging, debugging and troubleshooting/diagnostic helpers. */</span>", 
"", 
"<span class=\"comment\">/* wiphy_printk helpers, similar to dev_printk */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#level\">level</a> \"%s: \" <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#wiphy_name\">wiphy_name</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>), ##<a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_emerg\">wiphy_emerg</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_alert\">wiphy_alert</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_crit\">wiphy_crit</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_err\">wiphy_err</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_warn\">wiphy_warn</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_notice\">wiphy_notice</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_info\">wiphy_info</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"", 
"int <a class=\"id\" href=\"#wiphy_debug\">wiphy_debug</a>(const struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>, const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 2, 3)));", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#DEBUG\">DEBUG</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_dbg\">wiphy_dbg</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DYNAMIC_DEBUG\">CONFIG_DYNAMIC_DEBUG</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_dbg\">wiphy_dbg</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dynamic_pr_debug\">dynamic_pr_debug</a>(\"%s: \" <a class=\"id\" href=\"#format\">format</a>,<span class=\"ts\"/><a class=\"id\" href=\"#wiphy_name\">wiphy_name</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>), ##<a class=\"id\" href=\"#args\">args</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_dbg\">wiphy_dbg</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (0)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#VERBOSE_DEBUG\">VERBOSE_DEBUG</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_vdbg\">wiphy_vdbg</a><span class=\"ts\"/><a class=\"id\" href=\"#wiphy_dbg\">wiphy_dbg</a>", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_vdbg\">wiphy_vdbg</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (0)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wiphy_printk\">wiphy_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, <a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wiphy_WARN() acts like wiphy_printk(), but with the key difference</span>", 
"<span class=\"comment\"> * of using a WARN/WARN_ON to get the message out, including the</span>", 
"<span class=\"comment\"> * file/line information and a backtrace.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wiphy_WARN\">wiphy_WARN</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"wiphy: %s\\n\" <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#wiphy_name\">wiphy_name</a>(<a class=\"id\" href=\"#wiphy\">wiphy</a>), ##<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __NET_CFG80211_H */</span>", 
];
xr_frag_insert('l/d9/79b8b56c01e12371bb242a76e180ecdfb0d1ae.xr', __xr_tmp);
