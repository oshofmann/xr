var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_ATOMIC_H\">_ASM_X86_ATOMIC_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_ATOMIC_H\">_ASM_X86_ATOMIC_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#alternative\">alternative</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Atomic operations that C can't guarantee us.  Useful for</span>", 
"<span class=\"comment\"> * resource counting etc..</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(<a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/>{ (<a class=\"id\" href=\"#i\">i</a>) }", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_read - read atomic variable</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically reads the value of @v.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(const <a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return (*(volatile int *)&amp;(<a class=\"id\" href=\"#v\">v</a>)-><a class=\"id\" href=\"#counter\">counter</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_set - set atomic variable</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> * @i: required value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically sets the value of @v to @i.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic_set\">atomic_set</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>, int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_add - add integer to atomic variable</span>", 
"<span class=\"comment\"> * @i: integer value to add</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @i to @v.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic_add\">atomic_add</a>(int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"addl %1,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"ir\" (<a class=\"id\" href=\"#i\">i</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_sub - subtract integer from atomic variable</span>", 
"<span class=\"comment\"> * @i: integer value to subtract</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically subtracts @i from @v.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"subl %1,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"ir\" (<a class=\"id\" href=\"#i\">i</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_sub_and_test - subtract value from variable and test result</span>", 
"<span class=\"comment\"> * @i: integer value to subtract</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically subtracts @i from @v and returns</span>", 
"<span class=\"comment\"> * true if the result is zero, or false for all</span>", 
"<span class=\"comment\"> * other cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_sub_and_test\">atomic_sub_and_test</a>(int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"subl %2,%0; sete %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"ir\" (<a class=\"id\" href=\"#i\">i</a>) : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_inc - increment atomic variable</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically increments @v by 1.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"incl %0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_dec - decrement atomic variable</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically decrements @v by 1.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"decl %0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_dec_and_test - decrement and test</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically decrements @v by 1 and</span>", 
"<span class=\"comment\"> * returns true if the result is 0, or false for all other</span>", 
"<span class=\"comment\"> * cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"decl %0; sete %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> != 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_inc_and_test - increment and test</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically increments @v by 1</span>", 
"<span class=\"comment\"> * and returns true if the result is zero, or false for all</span>", 
"<span class=\"comment\"> * other cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_inc_and_test\">atomic_inc_and_test</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"incl %0; sete %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> != 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_add_negative - add and test if negative</span>", 
"<span class=\"comment\"> * @i: integer value to add</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @i to @v and returns true</span>", 
"<span class=\"comment\"> * if the result is negative, or false when</span>", 
"<span class=\"comment\"> * result is greater than or equal to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_add_negative\">atomic_add_negative</a>(int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"addl %2,%0; sets %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"ir\" (<a class=\"id\" href=\"#i\">i</a>) : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_add_return - add integer and return</span>", 
"<span class=\"comment\"> * @i: integer value to add</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @i to @v and returns @i + @v</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_add_return\">atomic_add_return</a>(int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__i\">__i</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_M386\">CONFIG_M386</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> <= 3))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_xadd\">no_xadd</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Modern 486+ processor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__i\">__i</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"xaddl %0, %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+r\" (<a class=\"id\" href=\"#i\">i</a>), \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#__i\">__i</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_M386\">CONFIG_M386</a>", 
"<a class=\"id\" href=\"#no_xadd\">no_xadd</a>: <span class=\"comment\">/* Legacy 386 processor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_local_irq_save\">raw_local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__i\">__i</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(<a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#__i\">__i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_local_irq_restore\">raw_local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#__i\">__i</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_sub_return - subtract integer and return</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> * @i: integer value to subtract</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically subtracts @i from @v and returns @v - @i</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_sub_return\">atomic_sub_return</a>(int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_add_return\">atomic_add_return</a>(-<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(<a class=\"id\" href=\"#v\">v</a>)  (<a class=\"id\" href=\"#atomic_add_return\">atomic_add_return</a>(1, <a class=\"id\" href=\"#v\">v</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#atomic_dec_return\">atomic_dec_return</a>(<a class=\"id\" href=\"#v\">v</a>)  (<a class=\"id\" href=\"#atomic_sub_return\">atomic_sub_return</a>(1, <a class=\"id\" href=\"#v\">v</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>, int <a class=\"id\" href=\"#old\">old</a>, int <a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_xchg\">atomic_xchg</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>, int <a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_add_unless - add unless the number is already a given value</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> * @a: the amount to add to v...</span>", 
"<span class=\"comment\"> * @u: ...unless v is equal to u.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @a to @v, so long as @v was not already @u.</span>", 
"<span class=\"comment\"> * Returns non-zero if @v was not @u, and zero otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>, int <a class=\"id\" href=\"#a\">a</a>, int <a class=\"id\" href=\"#u\">u</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(<a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#c\">c</a> == (<a class=\"id\" href=\"#u\">u</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>((<a class=\"id\" href=\"#v\">v</a>), <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#c\">c</a> + (<a class=\"id\" href=\"#a\">a</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#old\">old</a> == <a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> != (<a class=\"id\" href=\"#u\">u</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(<a class=\"id\" href=\"#v\">v</a>) <a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>((<a class=\"id\" href=\"#v\">v</a>), 1, 0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * atomic_dec_if_positive - decrement by 1 if old value positive</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns the old value of *v minus 1, even if</span>", 
"<span class=\"comment\"> * the atomic variable, v, was not decremented.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic_dec_if_positive\">atomic_dec_if_positive</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#dec\">dec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(<a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec\">dec</a> = <a class=\"id\" href=\"#c\">c</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dec\">dec</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>((<a class=\"id\" href=\"#v\">v</a>), <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#dec\">dec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#old\">old</a> == <a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dec\">dec</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_inc_short - increment of a short integer</span>", 
"<span class=\"comment\"> * @v: pointer to type int</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds 1 to @v</span>", 
"<span class=\"comment\"> * Returns the new value of @u</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> short int <a class=\"id\" href=\"#atomic_inc_short\">atomic_inc_short</a>(short int *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"addw $1, %0\" : \"+m\" (*<a class=\"id\" href=\"#v\">v</a>));", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#v\">v</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_or_long - OR of two long integers</span>", 
"<span class=\"comment\"> * @v1: pointer to type unsigned long</span>", 
"<span class=\"comment\"> * @v2: pointer to type unsigned long</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically ORs @v1 and @v2</span>", 
"<span class=\"comment\"> * Returns the result of the OR</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic_or_long\">atomic_or_long</a>(unsigned long *<a class=\"id\" href=\"#v1\">v1</a>, unsigned long <a class=\"id\" href=\"#v2\">v2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"orq %1, %0\" : \"+m\" (*<a class=\"id\" href=\"#v1\">v1</a>) : \"r\" (<a class=\"id\" href=\"#v2\">v2</a>));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* These are x86-specific, used by some header files */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#atomic_clear_mask\">atomic_clear_mask</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"andl %0,%1\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"r\" (~(<a class=\"id\" href=\"#mask\">mask</a>)), \"m\" (*(<a class=\"id\" href=\"#addr\">addr</a>)) : \"memory\")", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#atomic_set_mask\">atomic_set_mask</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"orl %0,%1\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"r\" ((unsigned)(<a class=\"id\" href=\"#mask\">mask</a>)), \"m\" (*(<a class=\"id\" href=\"#addr\">addr</a>))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\")", 
"", 
"<span class=\"comment\">/* Atomic operations are already serializing on x86 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_mb__before_atomic_dec\">smp_mb__before_atomic_dec</a>()<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_mb__after_atomic_dec\">smp_mb__after_atomic_dec</a>()<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_mb__before_atomic_inc\">smp_mb__before_atomic_inc</a>()<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_mb__after_atomic_inc\">smp_mb__after_atomic_inc</a>()<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"# <a class=\"id\" href=\"#include\">include</a> \"atomic64_32.h\"", 
"#else", 
"# <a class=\"id\" href=\"#include\">include</a> \"atomic64_64.h\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#atomic\">atomic</a>-long.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_ATOMIC_H */</span>", 
];
xr_frag_insert('l/da/5336a2d584a0d0598a3960b62e109392dc685f.xr', __xr_tmp);
