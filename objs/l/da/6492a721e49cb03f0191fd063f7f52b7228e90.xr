var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>@dev_id: hwif</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: unused weirdness from the kernel irq layer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is the default IRQ handler for the IDE layer. You should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not need to override it. If you do be aware it is subtle in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>places</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hwif is the interface in the group currently performing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a command. hwif-&gt;cur_dev is the drive and hwif-&gt;handler is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the IRQ handler to call. As we issue a command the handlers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>step through multiple states, reassigning the handler to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>next step in the process. Unlike a smart SCSI controller IDE</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>expects the main processor to sequence the various transfer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>stages. We also manage a poll timer to catch up with most</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>timeout situations. There are still a few where the handlers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>don't ever decide to give up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The handler eventually returns ide_stopped to indicate the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>request completed. At this point we issue the next request</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on the port and the process begins again.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#ide_intr\">ide_intr</a> (int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = (<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *)<a class=\"id\" href=\"#dev_id\">dev_id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_handler_t\">ide_handler_t</a> *<a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#startstop\">startstop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#irq_ret\">irq_ret</a> = <a class=\"id\" href=\"#IRQ_NONE\">IRQ_NONE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#plug_device\">plug_device</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_SERIALIZE\">IDE_HFLAG_SERIALIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a> != <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#cur_port\">cur_port</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_early\">out_early</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a> && <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#test_irq\">test_irq</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#test_irq\">test_irq</a>(<a class=\"id\" href=\"#hwif\">hwif</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#handler\">handler</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#polling\">polling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Not expecting an interrupt from this drive.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * That means this could be:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>(1) an interrupt from another PCI device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>sharing the same PCI INT# as us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or<span class=\"ts\"/>(2) a drive just entered sleep or standby mode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>and is interrupting to let us know.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or<span class=\"ts\"/>(3) a spurious interrupt of unknown origin.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For PCI, we cannot tell the difference,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so in that case we just ignore it and hope it goes away.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#irq_flags\">irq_flags</a> &amp; <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Probably not a shared PCI interrupt,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so we can safely try to do something about it:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unexpected_intr\">unexpected_intr</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Whack the status register, just in case</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we have a leftover pending IRQ.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#cur_dev\">cur_dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drive_is_ready\">drive_is_ready</a>(<a class=\"id\" href=\"#drive\">drive</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This happens regularly when we share a PCI IRQ with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * another device.  Unfortunately, it can also happen</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with some buggy drives that trigger the IRQ before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * their status register is up to date.  Hopefully we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * enough advance overhead that the latter isn't a problem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#expiry\">expiry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#req_gen\">req_gen</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a> && <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#clear_irq\">clear_irq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#clear_irq\">clear_irq</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_UNMASK\">IDE_DFLAG_UNMASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable_in_hardirq\">local_irq_enable_in_hardirq</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* service this interrupt, may set handler for next interrupt */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#startstop\">startstop</a> = <a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that handler() may have set things up for another</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt to occur soon, but it cannot happen until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we exit from this routine, because it will be the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * same irq as is currently being serviced here, and Linux</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * won't allow another of the same (on any CPU) until we return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#startstop\">startstop</a> == <a class=\"id\" href=\"#ide_stopped\">ide_stopped</a> && <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#polling\">polling</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#handler\">handler</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_unlock_port\">ide_unlock_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plug_device\">plug_device</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_ret\">irq_ret</a> = <a class=\"id\" href=\"#IRQ_HANDLED\">IRQ_HANDLED</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#out_early\">out_early</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#plug_device\">plug_device</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_unlock_host\">ide_unlock_host</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_requeue_and_plug\">ide_requeue_and_plug</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#irq_ret\">irq_ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_intr\">ide_intr</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_pad_transfer\">ide_pad_transfer</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, int <a class=\"id\" href=\"#write\">write</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#buf\">buf</a>[4] = { 0 };", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#output_data\">output_data</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#min\">min</a>(4, <a class=\"id\" href=\"#len\">len</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#input_data\">input_data</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#min\">min</a>(4, <a class=\"id\" href=\"#len\">len</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= 4;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_pad_transfer\">ide_pad_transfer</a>);", 
];
xr_frag_insert('l/da/6492a721e49cb03f0191fd063f7f52b7228e90.xr', __xr_tmp);
