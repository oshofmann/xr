var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_SMPLOCK_H\">__LINUX_SMPLOCK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_SMPLOCK_H\">__LINUX_SMPLOCK_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCK_KERNEL\">CONFIG_LOCK_KERNEL</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kernel_locked\">kernel_locked</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#lock_depth\">lock_depth</a> >= 0)", 
"", 
"extern int <a class=\"id\" href=\"#__lockfunc\">__lockfunc</a> <a class=\"id\" href=\"#__reacquire_kernel_lock\">__reacquire_kernel_lock</a>(void);", 
"extern void <a class=\"id\" href=\"#__lockfunc\">__lockfunc</a> <a class=\"id\" href=\"#__release_kernel_lock\">__release_kernel_lock</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Release/re-acquire global kernel lock for the scheduler</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#release_kernel_lock\">release_kernel_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) do { <span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#lock_depth\">lock_depth</a> >= 0))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__release_kernel_lock\">__release_kernel_lock</a>();<span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#reacquire_kernel_lock\">reacquire_kernel_lock</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#lock_depth\">lock_depth</a> >= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__reacquire_kernel_lock\">__reacquire_kernel_lock</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#__lockfunc\">__lockfunc</a>", 
"<a class=\"id\" href=\"#_lock_kernel\">_lock_kernel</a>(const char *<a class=\"id\" href=\"#func\">func</a>, const char *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#line\">line</a>)", 
"<a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#kernel_lock\">kernel_lock</a>);", 
"", 
"extern void <a class=\"id\" href=\"#__lockfunc\">__lockfunc</a>", 
"<a class=\"id\" href=\"#_unlock_kernel\">_unlock_kernel</a>(const char *<a class=\"id\" href=\"#func\">func</a>, const char *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#line\">line</a>)", 
"<a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#kernel_lock\">kernel_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>() do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_lock_kernel\">_lock_kernel</a>(<a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>()<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_unlock_kernel\">_unlock_kernel</a>(<a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Various legacy drivers don't really need the BKL in a specific</span>", 
"<span class=\"comment\"> * function, but they *do* need to know that the BKL became available.</span>", 
"<span class=\"comment\"> * This function just avoids wrapping a bunch of lock/unlock pairs</span>", 
"<span class=\"comment\"> * around code which doesn't really need it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cycle_kernel_lock\">cycle_kernel_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"}", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#release_kernel_lock\">release_kernel_lock</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cycle_kernel_lock\">cycle_kernel_lock</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#reacquire_kernel_lock\">reacquire_kernel_lock</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kernel_locked\">kernel_locked</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_LOCK_KERNEL */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_SMPLOCK_H */</span>", 
];
xr_frag_insert('l/da/7e316142e6a26df18a91234069f2a22c92361c.xr', __xr_tmp);
