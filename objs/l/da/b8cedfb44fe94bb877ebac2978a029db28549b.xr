var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#reboot\">reboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Notifier list for kernel code which wants to be called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>at shutdown. This is used to stop any idling DMA operations</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and the like.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#BLOCKING_NOTIFIER_HEAD\">BLOCKING_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#reboot_notifier_list\">reboot_notifier_list</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Notifier chain core routines.  The exported routines below</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are layered on top of these, with appropriate locking added.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#notifier_chain_register\">notifier_chain_register</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> **<a class=\"id\" href=\"#nl\">nl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>while ((*<a class=\"id\" href=\"#nl\">nl</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#priority\">priority</a> &gt; (*<a class=\"id\" href=\"#nl\">nl</a>)-><a class=\"id\" href=\"#priority\">priority</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nl\">nl</a> = &amp;((*<a class=\"id\" href=\"#nl\">nl</a>)-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = *<a class=\"id\" href=\"#nl\">nl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(*<a class=\"id\" href=\"#nl\">nl</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#notifier_chain_cond_register\">notifier_chain_cond_register</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> **<a class=\"id\" href=\"#nl\">nl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>while ((*<a class=\"id\" href=\"#nl\">nl</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#nl\">nl</a>) == <a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#priority\">priority</a> &gt; (*<a class=\"id\" href=\"#nl\">nl</a>)-><a class=\"id\" href=\"#priority\">priority</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nl\">nl</a> = &amp;((*<a class=\"id\" href=\"#nl\">nl</a>)-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = *<a class=\"id\" href=\"#nl\">nl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(*<a class=\"id\" href=\"#nl\">nl</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#notifier_chain_unregister\">notifier_chain_unregister</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> **<a class=\"id\" href=\"#nl\">nl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>while ((*<a class=\"id\" href=\"#nl\">nl</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#nl\">nl</a>) == <a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(*<a class=\"id\" href=\"#nl\">nl</a>, <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nl\">nl</a> = &amp;((*<a class=\"id\" href=\"#nl\">nl</a>)-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * notifier_call_chain - Informs the registered notifiers about an event.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nl:<span class=\"ts\"/><span class=\"ts\"/>Pointer to head of the blocking notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val:<span class=\"ts\"/><span class=\"ts\"/>Value passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@v:<span class=\"ts\"/><span class=\"ts\"/>Pointer passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_to_call:<span class=\"ts\"/>Number of notifier functions to be called. Don't care</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>value of this parameter is -1.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_calls:<span class=\"ts\"/>Records the number of notifications sent. Don't care</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>value of this field is NULL.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@returns:<span class=\"ts\"/>notifier_call_chain returns the value returned by the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>last notifier function called.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#notifier_call_chain\">notifier_call_chain</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> **<a class=\"id\" href=\"#nl\">nl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>,<span class=\"ts\"/>int *<a class=\"id\" href=\"#nr_calls\">nr_calls</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>, *<a class=\"id\" href=\"#next_nb\">next_nb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(*<a class=\"id\" href=\"#nl\">nl</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nb\">nb</a> && <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_nb\">next_nb</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_NOTIFIERS\">CONFIG_DEBUG_NOTIFIERS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#func_ptr_is_kernel_text\">func_ptr_is_kernel_text</a>(<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#notifier_call\">notifier_call</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"Invalid notifier called!\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#next_nb\">next_nb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#notifier_call\">notifier_call</a>(<a class=\"id\" href=\"#nb\">nb</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_calls\">nr_calls</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#nr_calls\">nr_calls</a>)++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#NOTIFY_STOP_MASK\">NOTIFY_STOP_MASK</a>) == <a class=\"id\" href=\"#NOTIFY_STOP_MASK\">NOTIFY_STOP_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#next_nb\">next_nb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Atomic notifier chain routines.  Registration and unregistration</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>use a spinlock, and call_chain is synchronized by RCU (no locks).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>atomic_notifier_chain_register - Add notifier to an atomic notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the atomic notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: New entry in notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Adds a notifier to an atomic notifier chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Currently always returns zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(struct <a class=\"id\" href=\"#atomic_notifier_head\">atomic_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_chain_register\">notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>atomic_notifier_chain_unregister - Remove notifier from an atomic notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the atomic notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: Entry to remove from notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Removes a notifier from an atomic notifier chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero on success or %-ENOENT on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#atomic_notifier_chain_unregister\">atomic_notifier_chain_unregister</a>(struct <a class=\"id\" href=\"#atomic_notifier_head\">atomic_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_chain_unregister\">notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#atomic_notifier_chain_unregister\">atomic_notifier_chain_unregister</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__atomic_notifier_call_chain - Call functions in an atomic notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the atomic notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val: Value passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@v: Pointer passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_to_call: See the comment for notifier_call_chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_calls: See the comment for notifier_call_chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Calls each function in a notifier chain in turn.  The functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>run in an atomic context, so they must not block.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This routine uses RCU to synchronize with changes to the chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the return value of the notifier can be and'ed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with %NOTIFY_STOP_MASK then atomic_notifier_call_chain()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will return immediately, with the return value of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the notifier function which halted execution.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Otherwise the return value is the return value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of the last notifier function called.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__atomic_notifier_call_chain\">__atomic_notifier_call_chain</a>(struct <a class=\"id\" href=\"#atomic_notifier_head\">atomic_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>, int *<a class=\"id\" href=\"#nr_calls\">nr_calls</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_call_chain\">notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>, <a class=\"id\" href=\"#nr_calls\">nr_calls</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__atomic_notifier_call_chain\">__atomic_notifier_call_chain</a>);", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(struct <a class=\"id\" href=\"#atomic_notifier_head\">atomic_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__atomic_notifier_call_chain\">__atomic_notifier_call_chain</a>(<a class=\"id\" href=\"#nh\">nh</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, -1, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Blocking notifier chain routines.  All access to the chain is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>synchronized by an rwsem.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>blocking_notifier_chain_register - Add notifier to a blocking notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the blocking notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: New entry in notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Adds a notifier to a blocking notifier chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called in process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Currently always returns zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blocking_notifier_chain_register\">blocking_notifier_chain_register</a>(struct <a class=\"id\" href=\"#blocking_notifier_head\">blocking_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This code gets used during boot-up, when task switching is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not yet working and interrupts must remain disabled.  At</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * such times we must not call down_write().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_chain_register\">notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#rwsem\">rwsem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_chain_register\">notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#rwsem\">rwsem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blocking_notifier_chain_register\">blocking_notifier_chain_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>blocking_notifier_chain_cond_register - Cond add notifier to a blocking notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the blocking notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: New entry in notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Adds a notifier to a blocking notifier chain, only if not already</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>present in the chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called in process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Currently always returns zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blocking_notifier_chain_cond_register\">blocking_notifier_chain_cond_register</a>(struct <a class=\"id\" href=\"#blocking_notifier_head\">blocking_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#rwsem\">rwsem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_chain_cond_register\">notifier_chain_cond_register</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#rwsem\">rwsem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blocking_notifier_chain_cond_register\">blocking_notifier_chain_cond_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>blocking_notifier_chain_unregister - Remove notifier from a blocking notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the blocking notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: Entry to remove from notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Removes a notifier from a blocking notifier chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called from process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero on success or %-ENOENT on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>(struct <a class=\"id\" href=\"#blocking_notifier_head\">blocking_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This code gets used during boot-up, when task switching is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not yet working and interrupts must remain disabled.  At</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * such times we must not call down_write().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_chain_unregister\">notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#rwsem\">rwsem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_chain_unregister\">notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#rwsem\">rwsem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__blocking_notifier_call_chain - Call functions in a blocking notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the blocking notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val: Value passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@v: Pointer passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_to_call: See comment for notifier_call_chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_calls: See comment for notifier_call_chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Calls each function in a notifier chain in turn.  The functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>run in a process context, so they are allowed to block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the return value of the notifier can be and'ed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with %NOTIFY_STOP_MASK then blocking_notifier_call_chain()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will return immediately, with the return value of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the notifier function which halted execution.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Otherwise the return value is the return value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of the last notifier function called.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__blocking_notifier_call_chain\">__blocking_notifier_call_chain</a>(struct <a class=\"id\" href=\"#blocking_notifier_head\">blocking_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>, int *<a class=\"id\" href=\"#nr_calls\">nr_calls</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We check the head outside the lock, but if this access is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * racy then it does not matter what the result of the test</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is, we re-check the list after having taken the lock anyway:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#rwsem\">rwsem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_call_chain\">notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_calls\">nr_calls</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#rwsem\">rwsem</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__blocking_notifier_call_chain\">__blocking_notifier_call_chain</a>);", 
"", 
"int <a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(struct <a class=\"id\" href=\"#blocking_notifier_head\">blocking_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__blocking_notifier_call_chain\">__blocking_notifier_call_chain</a>(<a class=\"id\" href=\"#nh\">nh</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, -1, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Raw notifier chain routines.  There is no protection;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the caller must provide it.  Use at your own risk!</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>raw_notifier_chain_register - Add notifier to a raw notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the raw notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: New entry in notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Adds a notifier to a raw notifier chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>All locking must be provided by the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Currently always returns zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#raw_notifier_chain_register\">raw_notifier_chain_register</a>(struct <a class=\"id\" href=\"#raw_notifier_head\">raw_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_chain_register\">notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#raw_notifier_chain_register\">raw_notifier_chain_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>raw_notifier_chain_unregister - Remove notifier from a raw notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the raw notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: Entry to remove from notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Removes a notifier from a raw notifier chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>All locking must be provided by the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero on success or %-ENOENT on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#raw_notifier_chain_unregister\">raw_notifier_chain_unregister</a>(struct <a class=\"id\" href=\"#raw_notifier_head\">raw_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_chain_unregister\">notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#raw_notifier_chain_unregister\">raw_notifier_chain_unregister</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__raw_notifier_call_chain - Call functions in a raw notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the raw notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val: Value passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@v: Pointer passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_to_call: See comment for notifier_call_chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_calls: See comment for notifier_call_chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Calls each function in a notifier chain in turn.  The functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>run in an undefined context.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>All locking must be provided by the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the return value of the notifier can be and'ed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with %NOTIFY_STOP_MASK then raw_notifier_call_chain()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will return immediately, with the return value of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the notifier function which halted execution.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Otherwise the return value is the return value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of the last notifier function called.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__raw_notifier_call_chain\">__raw_notifier_call_chain</a>(struct <a class=\"id\" href=\"#raw_notifier_head\">raw_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>, int *<a class=\"id\" href=\"#nr_calls\">nr_calls</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_call_chain\">notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>, <a class=\"id\" href=\"#nr_calls\">nr_calls</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__raw_notifier_call_chain\">__raw_notifier_call_chain</a>);", 
"", 
"int <a class=\"id\" href=\"#raw_notifier_call_chain\">raw_notifier_call_chain</a>(struct <a class=\"id\" href=\"#raw_notifier_head\">raw_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__raw_notifier_call_chain\">__raw_notifier_call_chain</a>(<a class=\"id\" href=\"#nh\">nh</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, -1, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#raw_notifier_call_chain\">raw_notifier_call_chain</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SRCU notifier chain routines.    Registration and unregistration</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>use a mutex, and call_chain is synchronized by SRCU (no locks).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>srcu_notifier_chain_register - Add notifier to an SRCU notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the SRCU notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: New entry in notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Adds a notifier to an SRCU notifier chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called in process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Currently always returns zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#srcu_notifier_chain_register\">srcu_notifier_chain_register</a>(struct <a class=\"id\" href=\"#srcu_notifier_head\">srcu_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This code gets used during boot-up, when task switching is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not yet working and interrupts must remain disabled.  At</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * such times we must not call mutex_lock().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_chain_register\">notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_chain_register\">notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#srcu_notifier_chain_register\">srcu_notifier_chain_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>srcu_notifier_chain_unregister - Remove notifier from an SRCU notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the SRCU notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: Entry to remove from notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Removes a notifier from an SRCU notifier chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called from process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero on success or %-ENOENT on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#srcu_notifier_chain_unregister\">srcu_notifier_chain_unregister</a>(struct <a class=\"id\" href=\"#srcu_notifier_head\">srcu_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This code gets used during boot-up, when task switching is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not yet working and interrupts must remain disabled.  At</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * such times we must not call mutex_lock().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_chain_unregister\">notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_chain_unregister\">notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_srcu\">synchronize_srcu</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#srcu\">srcu</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#srcu_notifier_chain_unregister\">srcu_notifier_chain_unregister</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__srcu_notifier_call_chain - Call functions in an SRCU notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the SRCU notifier chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val: Value passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@v: Pointer passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_to_call: See comment for notifier_call_chain.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_calls: See comment for notifier_call_chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Calls each function in a notifier chain in turn.  The functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>run in a process context, so they are allowed to block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the return value of the notifier can be and'ed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with %NOTIFY_STOP_MASK then srcu_notifier_call_chain()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will return immediately, with the return value of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the notifier function which halted execution.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Otherwise the return value is the return value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of the last notifier function called.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__srcu_notifier_call_chain\">__srcu_notifier_call_chain</a>(struct <a class=\"id\" href=\"#srcu_notifier_head\">srcu_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>, int *<a class=\"id\" href=\"#nr_calls\">nr_calls</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#srcu_read_lock\">srcu_read_lock</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#srcu\">srcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_call_chain\">notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>, <a class=\"id\" href=\"#nr_calls\">nr_calls</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#srcu_read_unlock\">srcu_read_unlock</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#srcu\">srcu</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__srcu_notifier_call_chain\">__srcu_notifier_call_chain</a>);", 
"", 
"int <a class=\"id\" href=\"#srcu_notifier_call_chain\">srcu_notifier_call_chain</a>(struct <a class=\"id\" href=\"#srcu_notifier_head\">srcu_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__srcu_notifier_call_chain\">__srcu_notifier_call_chain</a>(<a class=\"id\" href=\"#nh\">nh</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, -1, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#srcu_notifier_call_chain\">srcu_notifier_call_chain</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>srcu_init_notifier_head - Initialize an SRCU notifier head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nh: Pointer to head of the srcu notifier chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unlike other sorts of notifier heads, SRCU notifier heads require</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dynamic initialization.  Be sure to call this routine before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>calling any of the other SRCU notifier routines for this head.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If an SRCU notifier head is deallocated, it must first be cleaned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>up by calling srcu_cleanup_notifier_head().  Otherwise the head's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>per-cpu data (used by the SRCU mechanism) will leak.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#srcu_init_notifier_head\">srcu_init_notifier_head</a>(struct <a class=\"id\" href=\"#srcu_notifier_head\">srcu_notifier_head</a> *<a class=\"id\" href=\"#nh\">nh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#init_srcu_struct\">init_srcu_struct</a>(&amp;<a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#srcu\">srcu</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nh\">nh</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#srcu_init_notifier_head\">srcu_init_notifier_head</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_reboot_notifier - Register function to be called at reboot time</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nb: Info about notifier function to be called</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Registers a function with the list of functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to be called at reboot time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Currently always returns zero, as blocking_notifier_chain_register()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>always returns zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_reboot_notifier\">register_reboot_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blocking_notifier_chain_register\">blocking_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#reboot_notifier_list\">reboot_notifier_list</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_reboot_notifier\">register_reboot_notifier</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unregister_reboot_notifier - Unregister previously registered reboot notifier</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nb: Hook to be unregistered</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unregisters a previously registered reboot</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>notifier function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero on success, or %-ENOENT on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#unregister_reboot_notifier\">unregister_reboot_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#reboot_notifier_list\">reboot_notifier_list</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_reboot_notifier\">unregister_reboot_notifier</a>);", 
"", 
"static <a class=\"id\" href=\"#ATOMIC_NOTIFIER_HEAD\">ATOMIC_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#die_chain\">die_chain</a>);", 
"", 
"int <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#notify_die\">notify_die</a>(enum <a class=\"id\" href=\"#die_val\">die_val</a> <a class=\"id\" href=\"#val\">val</a>, const char *<a class=\"id\" href=\"#str\">str</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#err\">err</a>, int <a class=\"id\" href=\"#trap\">trap</a>, int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#die_args\">die_args</a> <a class=\"id\" href=\"#args\">args</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#regs\">regs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#str\">str</a><span class=\"ts\"/>= <a class=\"id\" href=\"#str\">str</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#err\">err</a><span class=\"ts\"/>= <a class=\"id\" href=\"#err\">err</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#trapnr\">trapnr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#trap\">trap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#signr\">signr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sig\">sig</a>,", 
"", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#die_chain\">die_chain</a>, <a class=\"id\" href=\"#val\">val</a>, &amp;<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#register_die_notifier\">register_die_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmalloc_sync_all\">vmalloc_sync_all</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#die_chain\">die_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_die_notifier\">register_die_notifier</a>);", 
"", 
"int <a class=\"id\" href=\"#unregister_die_notifier\">unregister_die_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_chain_unregister\">atomic_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#die_chain\">die_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_die_notifier\">unregister_die_notifier</a>);", 
];
xr_frag_insert('l/da/b8cedfb44fe94bb877ebac2978a029db28549b.xr', __xr_tmp);
