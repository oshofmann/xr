var __xr_tmp = [
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>remainder = (remainder &lt;&lt; 1) ^ multiple;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>}</span>", 
"<span class=\"comment\"> * }</span>", 
"<span class=\"comment\"> * If the input is a multiple of 32 bits, you can even XOR in a 32-bit</span>", 
"<span class=\"comment\"> * word at a time and increase the inner loop count to 32.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You can also mix and match the two loop styles, for example doing the</span>", 
"<span class=\"comment\"> * bulk of a message byte-at-a-time and adding bit-at-a-time processing</span>", 
"<span class=\"comment\"> * for any fractional bytes at the end.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The only remaining optimization is to the byte-at-a-time table method.</span>", 
"<span class=\"comment\"> * Here, rather than just shifting one bit of the remainder to decide</span>", 
"<span class=\"comment\"> * in the correct multiple to subtract, we can shift a byte at a time.</span>", 
"<span class=\"comment\"> * This produces a 40-bit (rather than a 33-bit) intermediate remainder,</span>", 
"<span class=\"comment\"> * but again the multiple of the polynomial to subtract depends only on</span>", 
"<span class=\"comment\"> * the high bits, the high 8 bits in this case.  </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The multiple we need in that case is the low 32 bits of a 40-bit</span>", 
"<span class=\"comment\"> * value whose high 8 bits are given, and which is a multiple of the</span>", 
"<span class=\"comment\"> * generator polynomial.  This is simply the CRC-32 of the given</span>", 
"<span class=\"comment\"> * one-byte message.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Two more details: normally, appending zero bits to a message which</span>", 
"<span class=\"comment\"> * is already a multiple of a polynomial produces a larger multiple of that</span>", 
"<span class=\"comment\"> * polynomial.  To enable a CRC to detect this condition, it's common to</span>", 
"<span class=\"comment\"> * invert the CRC before appending it.  This makes the remainder of the</span>", 
"<span class=\"comment\"> * message+crc come out not as zero, but some fixed non-zero value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The same problem applies to zero bits prepended to the message, and</span>", 
"<span class=\"comment\"> * a similar solution is used.  Instead of starting with a remainder of</span>", 
"<span class=\"comment\"> * 0, an initial remainder of all ones is used.  As long as you start</span>", 
"<span class=\"comment\"> * the same way on decoding, it doesn't make a difference.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#UNITTEST\">UNITTEST</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#stdlib\">stdlib</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#stdio\">stdio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#if 0<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*Not used at present */</span>", 
"static void", 
"<a class=\"id\" href=\"#buf_dump\">buf_dump</a>(char const *<a class=\"id\" href=\"#prefix\">prefix</a>, unsigned char const *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fputs\">fputs</a>(<a class=\"id\" href=\"#prefix\">prefix</a>, <a class=\"id\" href=\"#stdout\">stdout</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\" %02x\", *<a class=\"id\" href=\"#buf\">buf</a>++);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#putchar\">putchar</a>('\\n');", 
"", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#bytereverse\">bytereverse</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#bitrev8\">bitrev8</a>(*<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#random_garbage\">random_garbage</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = (unsigned char) <a class=\"id\" href=\"#random\">random</a>();", 
"}", 
"", 
"#if 0<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not used at present */</span>", 
"static void <a class=\"id\" href=\"#store_le\">store_le</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#x\">x</a>, unsigned char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = (unsigned char) <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[1] = (unsigned char) (<a class=\"id\" href=\"#x\">x</a> >> 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] = (unsigned char) (<a class=\"id\" href=\"#x\">x</a> >> 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[3] = (unsigned char) (<a class=\"id\" href=\"#x\">x</a> >> 24);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#store_be\">store_be</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#x\">x</a>, unsigned char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = (unsigned char) (<a class=\"id\" href=\"#x\">x</a> >> 24);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[1] = (unsigned char) (<a class=\"id\" href=\"#x\">x</a> >> 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] = (unsigned char) (<a class=\"id\" href=\"#x\">x</a> >> 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[3] = (unsigned char) <a class=\"id\" href=\"#x\">x</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This checks that CRC(buf + CRC(buf)) = 0, and that</span>", 
"<span class=\"comment\"> * CRC commutes with bit-reversal.  This has the side effect</span>", 
"<span class=\"comment\"> * of bytewise bit-reversing the input buffer, and returns</span>", 
"<span class=\"comment\"> * the CRC of the reversed buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#test_step\">test_step</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#init\">init</a>, unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc1\">crc1</a>, <a class=\"id\" href=\"#crc2\">crc2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc1\">crc1</a> = <a class=\"id\" href=\"#crc32_be\">crc32_be</a>(<a class=\"id\" href=\"#init\">init</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#store_be\">store_be</a>(<a class=\"id\" href=\"#crc1\">crc1</a>, <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc2\">crc2</a> = <a class=\"id\" href=\"#crc32_be\">crc32_be</a>(<a class=\"id\" href=\"#init\">init</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a> + 4);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#crc2\">crc2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\"\\nCRC cancellation fail: 0x%08x should be 0\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#crc2\">crc2</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#len\">len</a> + 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc2\">crc2</a> = <a class=\"id\" href=\"#crc32_be\">crc32_be</a>(<a class=\"id\" href=\"#init\">init</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc2\">crc2</a> = <a class=\"id\" href=\"#crc32_be\">crc32_be</a>(<a class=\"id\" href=\"#crc2\">crc2</a>, <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#len\">len</a> + 4 - <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#crc2\">crc2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\"\\nCRC split fail: 0x%08x\\n\", <a class=\"id\" href=\"#crc2\">crc2</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now swap it around for the other test */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bytereverse\">bytereverse</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a> + 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init\">init</a> = <a class=\"id\" href=\"#bitrev32\">bitrev32</a>(<a class=\"id\" href=\"#init\">init</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc2\">crc2</a> = <a class=\"id\" href=\"#bitrev32\">bitrev32</a>(<a class=\"id\" href=\"#crc1\">crc1</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#crc1\">crc1</a> != <a class=\"id\" href=\"#bitrev32\">bitrev32</a>(<a class=\"id\" href=\"#crc2\">crc2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\"\\nBit reversal fail: 0x%08x -> 0x%08x -> 0x%08x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#crc1\">crc1</a>, <a class=\"id\" href=\"#crc2\">crc2</a>, <a class=\"id\" href=\"#bitrev32\">bitrev32</a>(<a class=\"id\" href=\"#crc2\">crc2</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc1\">crc1</a> = <a class=\"id\" href=\"#crc32_le\">crc32_le</a>(<a class=\"id\" href=\"#init\">init</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#crc1\">crc1</a> != <a class=\"id\" href=\"#crc2\">crc2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\"\\nCRC endianness fail: 0x%08x != 0x%08x\\n\", <a class=\"id\" href=\"#crc1\">crc1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#crc2\">crc2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc2\">crc2</a> = <a class=\"id\" href=\"#crc32_le\">crc32_le</a>(<a class=\"id\" href=\"#init\">init</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a> + 4);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#crc2\">crc2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\"\\nCRC cancellation fail: 0x%08x should be 0\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#crc2\">crc2</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#len\">len</a> + 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc2\">crc2</a> = <a class=\"id\" href=\"#crc32_le\">crc32_le</a>(<a class=\"id\" href=\"#init\">init</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc2\">crc2</a> = <a class=\"id\" href=\"#crc32_le\">crc32_le</a>(<a class=\"id\" href=\"#crc2\">crc2</a>, <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#len\">len</a> + 4 - <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#crc2\">crc2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\"\\nCRC split fail: 0x%08x\\n\", <a class=\"id\" href=\"#crc2\">crc2</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc1\">crc1</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIZE\">SIZE</a> 64", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT1\">INIT1</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT2\">INIT2</a> 0", 
"", 
"int <a class=\"id\" href=\"#main\">main</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#buf1\">buf1</a>[<a class=\"id\" href=\"#SIZE\">SIZE</a> + 4];", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#buf2\">buf2</a>[<a class=\"id\" href=\"#SIZE\">SIZE</a> + 4];", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#buf3\">buf3</a>[<a class=\"id\" href=\"#SIZE\">SIZE</a> + 4];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc1\">crc1</a>, <a class=\"id\" href=\"#crc2\">crc2</a>, <a class=\"id\" href=\"#crc3\">crc3</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#SIZE\">SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\"\\rTesting length %d...\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fflush\">fflush</a>(<a class=\"id\" href=\"#stdout\">stdout</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#random_garbage\">random_garbage</a>(<a class=\"id\" href=\"#buf1\">buf1</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#random_garbage\">random_garbage</a>(<a class=\"id\" href=\"#buf2\">buf2</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf3\">buf3</a>[<a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#buf1\">buf1</a>[<a class=\"id\" href=\"#j\">j</a>] ^ <a class=\"id\" href=\"#buf2\">buf2</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc1\">crc1</a> = <a class=\"id\" href=\"#test_step\">test_step</a>(<a class=\"id\" href=\"#INIT1\">INIT1</a>, <a class=\"id\" href=\"#buf1\">buf1</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc2\">crc2</a> = <a class=\"id\" href=\"#test_step\">test_step</a>(<a class=\"id\" href=\"#INIT2\">INIT2</a>, <a class=\"id\" href=\"#buf2\">buf2</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now check that CRC(buf1 ^ buf2) = CRC(buf1) ^ CRC(buf2) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc3\">crc3</a> = <a class=\"id\" href=\"#test_step\">test_step</a>(<a class=\"id\" href=\"#INIT1\">INIT1</a> ^ <a class=\"id\" href=\"#INIT2\">INIT2</a>, <a class=\"id\" href=\"#buf3\">buf3</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#crc3\">crc3</a> != (<a class=\"id\" href=\"#crc1\">crc1</a> ^ <a class=\"id\" href=\"#crc2\">crc2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\"CRC XOR fail: 0x%08x != 0x%08x ^ 0x%08x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#crc3\">crc3</a>, <a class=\"id\" href=\"#crc1\">crc1</a>, <a class=\"id\" href=\"#crc2\">crc2</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printf\">printf</a>(\"\\nAll test complete.  No failures expected.\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* UNITTEST */</span>", 
];
xr_frag_insert('l/db/145b6fd2bda942a192a88898db9417a520a30f.xr', __xr_tmp);
