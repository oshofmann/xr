var __xr_tmp = [
"<span class=\"comment\"> * @reg: Register returned by mtrr_add</span>", 
"<span class=\"comment\"> * @base: Physical base address</span>", 
"<span class=\"comment\"> * @size: Size of region</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If register is supplied then base and size are ignored. This is</span>", 
"<span class=\"comment\"> * how drivers should call it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Releases an MTRR region. If the usage count drops to zero the</span>", 
"<span class=\"comment\"> * register is freed and the region returns to default state.</span>", 
"<span class=\"comment\"> * On success the register is returned, on failure a negative error</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mtrr_del_page\">mtrr_del_page</a>(int <a class=\"id\" href=\"#reg\">reg</a>, unsigned long <a class=\"id\" href=\"#base\">base</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_type\">mtrr_type</a> <a class=\"id\" href=\"#ltype\">ltype</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lbase\">lbase</a>, <a class=\"id\" href=\"#lsize\">lsize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#num_var_ranges\">num_var_ranges</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* No CPU hotplug when we change MTRR entries */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#mtrr_mutex\">mtrr_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  Search for existing MTRR  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max\">max</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#lbase\">lbase</a>, &amp;<a class=\"id\" href=\"#lsize\">lsize</a>, &amp;<a class=\"id\" href=\"#ltype\">ltype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lbase\">lbase</a> == <a class=\"id\" href=\"#base\">base</a> && <a class=\"id\" href=\"#lsize\">lsize</a> == <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"mtrr: no MTRR for %lx000,%lx000 found\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a> >= <a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"mtrr: register: %d too big\\n\", <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#lbase\">lbase</a>, &amp;<a class=\"id\" href=\"#lsize\">lsize</a>, &amp;<a class=\"id\" href=\"#ltype\">ltype</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lsize\">lsize</a> &lt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"mtrr: MTRR %d not used\\n\", <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mtrr_usage_table\">mtrr_usage_table</a>[<a class=\"id\" href=\"#reg\">reg</a>] &lt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"mtrr: reg: %d has count=0\\n\", <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#mtrr_usage_table\">mtrr_usage_table</a>[<a class=\"id\" href=\"#reg\">reg</a>] &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_mtrr\">set_mtrr</a>(<a class=\"id\" href=\"#reg\">reg</a>, 0, 0, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#reg\">reg</a>;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#mtrr_mutex\">mtrr_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mtrr_del - delete a memory type region</span>", 
"<span class=\"comment\"> * @reg: Register returned by mtrr_add</span>", 
"<span class=\"comment\"> * @base: Physical base address</span>", 
"<span class=\"comment\"> * @size: Size of region</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If register is supplied then base and size are ignored. This is</span>", 
"<span class=\"comment\"> * how drivers should call it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Releases an MTRR region. If the usage count drops to zero the</span>", 
"<span class=\"comment\"> * register is freed and the region returns to default state.</span>", 
"<span class=\"comment\"> * On success the register is returned, on failure a negative error</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mtrr_del\">mtrr_del</a>(int <a class=\"id\" href=\"#reg\">reg</a>, unsigned long <a class=\"id\" href=\"#base\">base</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mtrr_check\">mtrr_check</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mtrr_del_page\">mtrr_del_page</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#base\">base</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#size\">size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mtrr_del\">mtrr_del</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * HACK ALERT!</span>", 
"<span class=\"comment\"> * These should be called implicitly, but we can't yet until all the initcall</span>", 
"<span class=\"comment\"> * stuff is done...</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_ifs\">init_ifs</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_init_mtrr\">amd_init_mtrr</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cyrix_init_mtrr\">cyrix_init_mtrr</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#centaur_init_mtrr\">centaur_init_mtrr</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* The suspend/resume methods are only for CPU without MTRR. CPU using generic</span>", 
"<span class=\"comment\"> * MTRR driver doesn't require this</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mtrr_value\">mtrr_value</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_type\">mtrr_type</a><span class=\"ts\"/><a class=\"id\" href=\"#ltype\">ltype</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#lbase\">lbase</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#lsize\">lsize</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#mtrr_value\">mtrr_value</a> <a class=\"id\" href=\"#mtrr_value\">mtrr_value</a>[<a class=\"id\" href=\"#MTRR_MAX_VAR_RANGES\">MTRR_MAX_VAR_RANGES</a>];", 
"", 
"static int <a class=\"id\" href=\"#mtrr_save\">mtrr_save</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#sysdev\">sysdev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_var_ranges\">num_var_ranges</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#mtrr_value\">mtrr_value</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lbase\">lbase</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mtrr_value\">mtrr_value</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lsize\">lsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mtrr_value\">mtrr_value</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ltype\">ltype</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mtrr_restore\">mtrr_restore</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#sysdev\">sysdev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_var_ranges\">num_var_ranges</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mtrr_value\">mtrr_value</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lsize\">lsize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_mtrr\">set_mtrr</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#mtrr_value\">mtrr_value</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lbase\">lbase</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#mtrr_value\">mtrr_value</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lsize\">lsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#mtrr_value\">mtrr_value</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ltype\">ltype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"", 
"static struct <a class=\"id\" href=\"#sysdev_driver\">sysdev_driver</a> <a class=\"id\" href=\"#mtrr_sysdev_driver\">mtrr_sysdev_driver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a><span class=\"ts\"/>= <a class=\"id\" href=\"#mtrr_save\">mtrr_save</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mtrr_restore\">mtrr_restore</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#changed_by_mtrr_cleanup\">changed_by_mtrr_cleanup</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mtrr_bp_init - initialize mtrrs on the boot CPU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This needs to be called early; before any of the other CPUs are</span>", 
"<span class=\"comment\"> * initialized (i.e. before smp_init()).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mtrr_bp_init\">mtrr_bp_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_ifs\">init_ifs</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> = 32;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_mtrr\">cpu_has_mtrr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a> = &amp;<a class=\"id\" href=\"#generic_mtrr_ops\">generic_mtrr_ops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_or_mask\">size_or_mask</a> = 0xff000000;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 36 bits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_and_mask\">size_and_mask</a> = 0x00f00000;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> = 36;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is an AMD specific MSR, but we assume(hope?) that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Intel will implement it to when they extend the address</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bus of the Xeon.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuid_eax\">cpuid_eax</a>(0x80000000) >= 0x80000008) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> = <a class=\"id\" href=\"#cpuid_eax\">cpuid_eax</a>(0x80000008) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CPUID workaround for Intel 0F33/0F34 CPU */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 0xF &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_model\">x86_model</a> == 0x3 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0x3 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0x4))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> = 36;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_or_mask\">size_or_mask</a> = ~((1ULL << (<a class=\"id\" href=\"#phys_addr\">phys_addr</a> - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_and_mask\">size_and_mask</a> = ~<a class=\"id\" href=\"#size_or_mask\">size_or_mask</a> &amp; 0xfffff00000ULL;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_CENTAUR\">X86_VENDOR_CENTAUR</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * VIA C* family have Intel style MTRRs,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but don't support PAE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_or_mask\">size_or_mask</a> = 0xfff00000;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 32 bits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_and_mask\">size_and_mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> = 32;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_k6_mtrr\">cpu_has_k6_mtrr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pre-Athlon (K6) AMD CPU MTRRs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a> = <a class=\"id\" href=\"#mtrr_ops\">mtrr_ops</a>[<a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_or_mask\">size_or_mask</a> = 0xfff00000;<span class=\"ts\"/><span class=\"comment\">/* 32 bits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_and_mask\">size_and_mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_CENTAUR\">X86_VENDOR_CENTAUR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_centaur_mcr\">cpu_has_centaur_mcr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a> = <a class=\"id\" href=\"#mtrr_ops\">mtrr_ops</a>[<a class=\"id\" href=\"#X86_VENDOR_CENTAUR\">X86_VENDOR_CENTAUR</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_or_mask\">size_or_mask</a> = 0xfff00000;<span class=\"ts\"/><span class=\"comment\">/* 32 bits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_and_mask\">size_and_mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_CYRIX\">X86_VENDOR_CYRIX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_cyrix_arr\">cpu_has_cyrix_arr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a> = <a class=\"id\" href=\"#mtrr_ops\">mtrr_ops</a>[<a class=\"id\" href=\"#X86_VENDOR_CYRIX\">X86_VENDOR_CYRIX</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_or_mask\">size_or_mask</a> = 0xfff00000;<span class=\"ts\"/><span class=\"comment\">/* 32 bits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_and_mask\">size_and_mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_num_var_ranges\">set_num_var_ranges</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_table\">init_table</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#use_intel\">use_intel</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_mtrr_state\">get_mtrr_state</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mtrr_cleanup\">mtrr_cleanup</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed_by_mtrr_cleanup\">changed_by_mtrr_cleanup</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#set_all\">set_all</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#mtrr_ap_init\">mtrr_ap_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#use_intel\">use_intel</a>() || <a class=\"id\" href=\"#mtrr_aps_delayed_init\">mtrr_aps_delayed_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ideally we should hold mtrr_mutex here to avoid mtrr entries</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * changed, but this routine will be called in cpu boot time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding the lock breaks it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This routine is called in two cases:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   1. very earily time of software resume, when there absolutely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      isn't mtrr entry changes;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   2. cpu hotadd time. We let mtrr_add/del_page hold cpuhotplug</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      lock to prevent mtrr entry changes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mtrr\">set_mtrr</a>(~0U, 0, 0, 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Save current fixed-range MTRR state of the BSP</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mtrr_save_state\">mtrr_save_state</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(0, <a class=\"id\" href=\"#mtrr_save_fixed_ranges\">mtrr_save_fixed_ranges</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_mtrr_aps_delayed_init\">set_mtrr_aps_delayed_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#use_intel\">use_intel</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_aps_delayed_init\">mtrr_aps_delayed_init</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * MTRR initialization for all AP's</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mtrr_aps_init\">mtrr_aps_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#use_intel\">use_intel</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mtrr\">set_mtrr</a>(~0U, 0, 0, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_aps_delayed_init\">mtrr_aps_delayed_init</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#mtrr_bp_restore\">mtrr_bp_restore</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#use_intel\">use_intel</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#set_all\">set_all</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mtrr_init_finialize\">mtrr_init_finialize</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_intel\">use_intel</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#changed_by_mtrr_cleanup\">changed_by_mtrr_cleanup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_state_warn\">mtrr_state_warn</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The CPU has no MTRR and seems to not support SMP. They have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * specific drivers, we use a tricky method to support</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * suspend/resume for them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TBD: is there any system with such CPU which supports</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * suspend/resume? If no, we should remove the code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev_driver_register\">sysdev_driver_register</a>(&amp;<a class=\"id\" href=\"#cpu_sysdev_class\">cpu_sysdev_class</a>, &amp;<a class=\"id\" href=\"#mtrr_sysdev_driver\">mtrr_sysdev_driver</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#mtrr_init_finialize\">mtrr_init_finialize</a>);", 
];
xr_frag_insert('l/dc/0f34ffd583c741e6675def531e5241007c324e.xr', __xr_tmp);
