var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: psscope - Parser scope stack management routines</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acparser.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_PARSER\">ACPI_PARSER</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"psscope\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_get_parent_scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Pointer to an Op object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get parent of current op being parsed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#acpi_ps_get_parent_scope\">acpi_ps_get_parent_scope</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  *<a class=\"id\" href=\"#parser_state\">parser_state</a>)", 
"{", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#op\">op</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_has_completed_scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Boolean, TRUE = scope completed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Is parsing of current argument complete?  Determined by</span>", 
"<span class=\"comment\"> *              1) AML pointer is at or beyond the end of the scope</span>", 
"<span class=\"comment\"> *              2) The scope argument count has reached zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ps_has_completed_scope\">acpi_ps_has_completed_scope</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> * <a class=\"id\" href=\"#parser_state\">parser_state</a>)", 
"{", 
"", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#u8\">u8</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> >= <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_end\">arg_end</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>  || !<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_count\">arg_count</a>)));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_init_scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *              Root                - the Root Node of this new scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Allocate and init a new scope object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ps_init_scope\">acpi_ps_init_scope</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> * <a class=\"id\" href=\"#parser_state\">parser_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> * <a class=\"id\" href=\"#root_op\">root_op</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#scope\">scope</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ps_init_scope\">ps_init_scope</a>, <a class=\"id\" href=\"#root_op\">root_op</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a> = <a class=\"id\" href=\"#acpi_ut_create_generic_state\">acpi_ut_create_generic_state</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scope\">scope</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#descriptor_type\">descriptor_type</a> = <a class=\"id\" href=\"#ACPI_DESC_TYPE_STATE_RPSCOPE\">ACPI_DESC_TYPE_STATE_RPSCOPE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#root_op\">root_op</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_count\">arg_count</a> = <a class=\"id\" href=\"#ACPI_VAR_ARGS\">ACPI_VAR_ARGS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_end\">arg_end</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml_end\">aml_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#pkg_end\">pkg_end</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml_end\">aml_end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#scope\">scope</a> = <a class=\"id\" href=\"#scope\">scope</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#start_op\">start_op</a> = <a class=\"id\" href=\"#root_op\">root_op</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_push_scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *              Op                  - Current op to be pushed</span>", 
"<span class=\"comment\"> *              remaining_args      - List of args remaining</span>", 
"<span class=\"comment\"> *              arg_count           - Fixed or variable number of args</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Push current op to begin parsing its argument</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ps_push_scope\">acpi_ps_push_scope</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#op\">op</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#remaining_args\">remaining_args</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#arg_count\">arg_count</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#scope\">scope</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ps_push_scope\">ps_push_scope</a>, <a class=\"id\" href=\"#op\">op</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a> = <a class=\"id\" href=\"#acpi_ut_create_generic_state\">acpi_ut_create_generic_state</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scope\">scope</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#descriptor_type\">descriptor_type</a> = <a class=\"id\" href=\"#ACPI_DESC_TYPE_STATE_PSCOPE\">ACPI_DESC_TYPE_STATE_PSCOPE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_list\">arg_list</a> = <a class=\"id\" href=\"#remaining_args\">remaining_args</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_count\">arg_count</a> = <a class=\"id\" href=\"#arg_count\">arg_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#pkg_end\">pkg_end</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Push onto scope stack */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_push_generic_state\">acpi_ut_push_generic_state</a>(&amp;<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#scope\">scope</a>, <a class=\"id\" href=\"#scope\">scope</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg_count\">arg_count</a> == <a class=\"id\" href=\"#ACPI_VAR_ARGS\">ACPI_VAR_ARGS</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Multiple arguments */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_end\">arg_end</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Single argument */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_end\">arg_end</a> = <a class=\"id\" href=\"#ACPI_TO_POINTER\">ACPI_TO_POINTER</a>(<a class=\"id\" href=\"#ACPI_MAX_PTR\">ACPI_MAX_PTR</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_pop_scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *              Op                  - Where the popped op is returned</span>", 
"<span class=\"comment\"> *              arg_list            - Where the popped \"next argument\" is</span>", 
"<span class=\"comment\"> *                                    returned</span>", 
"<span class=\"comment\"> *              arg_count           - Count of objects in arg_list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Return to parsing a previous op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ps_pop_scope\">acpi_ps_pop_scope</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> **<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#u32\">u32</a> * <a class=\"id\" href=\"#arg_list\">arg_list</a>, <a class=\"id\" href=\"#u32\">u32</a> * <a class=\"id\" href=\"#arg_count\">arg_count</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#scope\">scope</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#scope\">scope</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ps_pop_scope\">ps_pop_scope</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only pop the scope if there is in fact a next scope */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a> = <a class=\"id\" href=\"#acpi_ut_pop_generic_state\">acpi_ut_pop_generic_state</a>(&amp;<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#scope\">scope</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return to parsing previous op */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#arg_list\">arg_list</a> = <a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_list\">arg_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#arg_count\">arg_count</a> = <a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#arg_count\">arg_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a> = <a class=\"id\" href=\"#scope\">scope</a>-><a class=\"id\" href=\"#parse_scope\">parse_scope</a>.<a class=\"id\" href=\"#pkg_end\">pkg_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* All done with this scope state structure */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_generic_state\">acpi_ut_delete_generic_state</a>(<a class=\"id\" href=\"#scope\">scope</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Empty parse stack, prepare to fetch next opcode */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#arg_list\">arg_list</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#arg_count\">arg_count</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_PARSE\">ACPI_DB_PARSE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Popped Op %p Args %X\\n\", *<a class=\"id\" href=\"#op\">op</a>, *<a class=\"id\" href=\"#arg_count\">arg_count</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_cleanup_scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Destroy available list, remaining stack levels, and return</span>", 
"<span class=\"comment\"> *              root scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ps_cleanup_scope\">acpi_ps_cleanup_scope</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#scope\">scope</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ps_cleanup_scope\">ps_cleanup_scope</a>, <a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parser_state\">parser_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Delete anything on the scope stack */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#scope\">scope</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scope\">scope</a> = <a class=\"id\" href=\"#acpi_ut_pop_generic_state\">acpi_ut_pop_generic_state</a>(&amp;<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#scope\">scope</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_generic_state\">acpi_ut_delete_generic_state</a>(<a class=\"id\" href=\"#scope\">scope</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
];
xr_frag_insert('l/dc/1670744f20bc6aabdaf7e6729d4f3421a12422.xr', __xr_tmp);
