var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Re-map IO memory to kernel address space so that we can access it.</span>", 
"<span class=\"comment\"> * This is needed for high PCI addresses that aren't mapped in the</span>", 
"<span class=\"comment\"> * 640k-1MB IO memory area on PC's</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright 1995 1996 Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmiotrace\">mmiotrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#fixmap\">fixmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgalloc\">pgalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pat\">pat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"physaddr.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fix up the linear direct mapping of the kernel to avoid cache attribute</span>", 
"<span class=\"comment\"> * conflicts.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ioremap_change_attr\">ioremap_change_attr</a>(unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#prot_val\">prot_val</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nrpages\">nrpages</a> = <a class=\"id\" href=\"#size\">size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#prot_val\">prot_val</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_PAGE_CACHE_UC\">_PAGE_CACHE_UC</a>:", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#_set_memory_uc\">_set_memory_uc</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#nrpages\">nrpages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#_set_memory_wc\">_set_memory_wc</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#nrpages\">nrpages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_PAGE_CACHE_WB\">_PAGE_CACHE_WB</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#_set_memory_wb\">_set_memory_wb</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#nrpages\">nrpages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remap an arbitrary physical address space into the kernel virtual</span>", 
"<span class=\"comment\"> * address space. Needed when the kernel wants to access high addresses</span>", 
"<span class=\"comment\"> * directly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! We need to allow non-page-aligned mappings too: we will obviously</span>", 
"<span class=\"comment\"> * have to convert them into an offset in a page-aligned mapping, but the</span>", 
"<span class=\"comment\"> * caller shouldn't need to know that small detail.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#__ioremap_caller\">__ioremap_caller</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#prot_val\">prot_val</a>, void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#last_pfn\">last_pfn</a>, <a class=\"id\" href=\"#last_addr\">last_addr</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#unaligned_phys_addr\">unaligned_phys_addr</a> = <a class=\"id\" href=\"#phys_addr\">phys_addr</a>;", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#unaligned_size\">unaligned_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_prot_val\">new_prot_val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ret_addr\">ret_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow wraparound or zero size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_addr\">last_addr</a> = <a class=\"id\" href=\"#phys_addr\">phys_addr</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a> || <a class=\"id\" href=\"#last_addr\">last_addr</a> &lt; <a class=\"id\" href=\"#phys_addr\">phys_addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#phys_addr_valid\">phys_addr_valid</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ioremap: invalid physical address %llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#phys_addr\">phys_addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't remap the low PCI/ISA area, it's always mapped..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_ISA_range\">is_ISA_range</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#last_addr\">last_addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#__force\">__force</a> void <a class=\"id\" href=\"#__iomem\">__iomem</a> *)<a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
];
xr_frag_insert('l/dc/29969f006218885f0c4b0d315a9b75047e1eb9.xr', __xr_tmp);
