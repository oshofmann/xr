var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RT Mutexes: blocking mutual exclusion locks with PI support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * started by Ingo Molnar and Thomas Gleixner:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004-2006 Red Hat, Inc., Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2006, Timesys Corp., Thomas Gleixner &lt;tglx@timesys.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains the private data structure and API definitions.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__KERNEL_RTMUTEX_COMMON_H\">__KERNEL_RTMUTEX_COMMON_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__KERNEL_RTMUTEX_COMMON_H\">__KERNEL_RTMUTEX_COMMON_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtmutex\">rtmutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The rtmutex in kernel tester is independent of rtmutex debugging. We</span>", 
"<span class=\"comment\"> * call schedule_rt_mutex_test() instead of schedule() for the tasks which</span>", 
"<span class=\"comment\"> * belong to the tester. That way we can delay the wakeup path of those</span>", 
"<span class=\"comment\"> * threads to provoke lock stealing and testing of  complex boosting scenarios.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_MUTEX_TESTER\">CONFIG_RT_MUTEX_TESTER</a>", 
"", 
"extern void <a class=\"id\" href=\"#schedule_rt_mutex_test\">schedule_rt_mutex_test</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#schedule_rt_mutex\">schedule_rt_mutex</a>(<a class=\"id\" href=\"#_lock\">_lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"  do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_MUTEX_TESTER\">PF_MUTEX_TESTER</a>))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_rt_mutex_test\">schedule_rt_mutex_test</a>(<a class=\"id\" href=\"#_lock\">_lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"  } while (0)", 
"", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#schedule_rt_mutex\">schedule_rt_mutex</a>(<a class=\"id\" href=\"#_lock\">_lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the control structure for tasks blocked on a rt_mutex,</span>", 
"<span class=\"comment\"> * which is allocated on the kernel stack on of the blocked task.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @list_entry:<span class=\"ts\"/><span class=\"ts\"/>pi node to enqueue into the mutex waiters list</span>", 
"<span class=\"comment\"> * @pi_list_entry:<span class=\"ts\"/>pi node to enqueue into the mutex owner waiters list</span>", 
"<span class=\"comment\"> * @task:<span class=\"ts\"/><span class=\"ts\"/>task reference to the blocked task</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_node\">plist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_node\">plist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lock\">lock</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_RT_MUTEXES\">CONFIG_DEBUG_RT_MUTEXES</a>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#deadlock_task_pid\">deadlock_task_pid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#deadlock_lock\">deadlock_lock</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Various helpers to access the waiters-plist:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rt_mutex_has_waiters\">rt_mutex_has_waiters</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#plist_head_empty\">plist_head_empty</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *", 
"<a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#w\">w</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> = <a class=\"id\" href=\"#plist_first_entry\">plist_first_entry</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>, struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#list_entry\">list_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#w\">w</a>-><a class=\"id\" href=\"#lock\">lock</a> != <a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#w\">w</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_has_pi_waiters\">task_has_pi_waiters</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#plist_head_empty\">plist_head_empty</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *", 
"<a class=\"id\" href=\"#task_top_pi_waiter\">task_top_pi_waiter</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#plist_first_entry\">plist_first_entry</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>, struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock-&gt;owner state tracking:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RT_MUTEX_OWNER_PENDING\">RT_MUTEX_OWNER_PENDING</a><span class=\"ts\"/>1UL", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RT_MUTEX_HAS_WAITERS\">RT_MUTEX_HAS_WAITERS</a><span class=\"ts\"/>2UL", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RT_MUTEX_OWNER_MASKALL\">RT_MUTEX_OWNER_MASKALL</a><span class=\"ts\"/>3UL", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> &amp; ~<a class=\"id\" href=\"#RT_MUTEX_OWNER_MASKALL\">RT_MUTEX_OWNER_MASKALL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#rt_mutex_real_owner\">rt_mutex_real_owner</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> &amp; ~<a class=\"id\" href=\"#RT_MUTEX_HAS_WAITERS\">RT_MUTEX_HAS_WAITERS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#rt_mutex_owner_pending\">rt_mutex_owner_pending</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> &amp; <a class=\"id\" href=\"#RT_MUTEX_OWNER_PENDING\">RT_MUTEX_OWNER_PENDING</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PI-futex support (proxy locking functions, etc.):</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#rt_mutex_next_owner\">rt_mutex_next_owner</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"extern void <a class=\"id\" href=\"#rt_mutex_init_proxy_locked\">rt_mutex_init_proxy_locked</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#proxy_owner\">proxy_owner</a>);", 
"extern void <a class=\"id\" href=\"#rt_mutex_proxy_unlock\">rt_mutex_proxy_unlock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#proxy_owner\">proxy_owner</a>);", 
"extern int <a class=\"id\" href=\"#rt_mutex_start_proxy_lock\">rt_mutex_start_proxy_lock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>);", 
"extern int <a class=\"id\" href=\"#rt_mutex_finish_proxy_lock\">rt_mutex_finish_proxy_lock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_RT_MUTEXES\">CONFIG_DEBUG_RT_MUTEXES</a>", 
"# <a class=\"id\" href=\"#include\">include</a> \"rtmutex-debug.h\"", 
"#else", 
"# <a class=\"id\" href=\"#include\">include</a> \"rtmutex.h\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/dc/2afbf920148ab4dc8d5c180a19d189a04d6372.xr', __xr_tmp);
