var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>of tracked contacts</span>", 
"<span class=\"comment\"> * @mtsize: number of MT slots the device uses</span>", 
"<span class=\"comment\"> * @slot: MT slot currently being transmitted</span>", 
"<span class=\"comment\"> * @absinfo: array of &amp;struct absinfo elements holding information</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>about absolute axes (current value, min, max, flat, fuzz,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>resolution)</span>", 
"<span class=\"comment\"> * @key: reflects current state of device's keys/buttons</span>", 
"<span class=\"comment\"> * @led: reflects current state of device's LEDs</span>", 
"<span class=\"comment\"> * @snd: reflects current state of sound effects</span>", 
"<span class=\"comment\"> * @sw: reflects current state of device's switches</span>", 
"<span class=\"comment\"> * @open: this method is called when the very first user calls</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>input_open_device(). The driver must prepare the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to start generating events (start polling thread,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>request an IRQ, submit URB, etc.)</span>", 
"<span class=\"comment\"> * @close: this method is called when the very last user calls</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>input_close_device().</span>", 
"<span class=\"comment\"> * @flush: purges the device. Most commonly used to get rid of force</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>feedback effects loaded into the device when disconnecting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from it</span>", 
"<span class=\"comment\"> * @event: event handler for events sent _to_ the device, like EV_LED</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or EV_SND. The device is expected to carry out the requested</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>action (turn on a LED, play sound, etc.) The call is protected</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by @event_lock and must not sleep</span>", 
"<span class=\"comment\"> * @grab: input handle that currently has the device grabbed (via</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>EVIOCGRAB ioctl). When a handle grabs a device it becomes sole</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>recipient for all input events coming from the device</span>", 
"<span class=\"comment\"> * @event_lock: this spinlock is is taken when input core receives</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and processes a new event for the device (in input_event()).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Code that accesses and/or modifies parameters of a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(such as keymap or absmin, absmax, absfuzz, etc.) after device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>has been registered with input core must take this lock.</span>", 
"<span class=\"comment\"> * @mutex: serializes calls to open(), close() and flush() methods</span>", 
"<span class=\"comment\"> * @users: stores number of users (input handlers) that opened this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device. It is used by input_open_device() and input_close_device()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to make sure that dev-&gt;open() is only called when the first</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>user opens device and dev-&gt;close() is called when the very</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>last user closes the device</span>", 
"<span class=\"comment\"> * @going_away: marks devices that are in a middle of unregistering and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>causes input_open_device*() fail with -ENODEV.</span>", 
"<span class=\"comment\"> * @sync: set to %true when there were no new events since last EV_SYN</span>", 
"<span class=\"comment\"> * @dev: driver model's view of this device</span>", 
"<span class=\"comment\"> * @h_list: list of input handles associated with the device. When</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>accessing the list dev-&gt;mutex must be held</span>", 
"<span class=\"comment\"> * @node: used to place the device onto input_dev_list</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#input_dev\">input_dev</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#phys\">phys</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#uniq\">uniq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_id\">input_id</a> <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#evbit\">evbit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#EV_CNT\">EV_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#keybit\">keybit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#KEY_CNT\">KEY_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#relbit\">relbit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#REL_CNT\">REL_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#absbit\">absbit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#ABS_CNT\">ABS_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mscbit\">mscbit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#MSC_CNT\">MSC_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ledbit\">ledbit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#LED_CNT\">LED_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sndbit\">sndbit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#SND_CNT\">SND_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ffbit\">ffbit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#FF_CNT\">FF_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#swbit\">swbit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#SW_CNT\">SW_CNT</a>)];", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hint_events_per_packet\">hint_events_per_packet</a>;", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#keycodemax\">keycodemax</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#keycodesize\">keycodesize</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#keycode\">keycode</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#setkeycode\">setkeycode</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>, unsigned int <a class=\"id\" href=\"#keycode\">keycode</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#getkeycode\">getkeycode</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>, unsigned int *<a class=\"id\" href=\"#keycode\">keycode</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a>;", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#repeat_key\">repeat_key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> <a class=\"id\" href=\"#timer\">timer</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_CNT\">REP_CNT</a>];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_mt_slot\">input_mt_slot</a> *<a class=\"id\" href=\"#mt\">mt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mtsize\">mtsize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slot\">slot</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_absinfo\">input_absinfo</a> *<a class=\"id\" href=\"#absinfo\">absinfo</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#key\">key</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#KEY_CNT\">KEY_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#led\">led</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#LED_CNT\">LED_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#snd\">snd</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#SND_CNT\">SND_CNT</a>)];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sw\">sw</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#SW_CNT\">SW_CNT</a>)];", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#open\">open</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#close\">close</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#flush\">flush</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#event\">event</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#grab\">grab</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#event_lock\">event_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#mutex\">mutex</a>;", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#users\">users</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#going_away\">going_away</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#sync\">sync</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#h_list\">h_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#input_dev\">input_dev</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Verify that we are in sync with input_device_id mod_devicetable.h #defines</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#if <a class=\"id\" href=\"#EV_MAX\">EV_MAX</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_EV_MAX\">INPUT_DEVICE_ID_EV_MAX</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"EV_MAX and INPUT_DEVICE_ID_EV_MAX do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#KEY_MIN_INTERESTING\">KEY_MIN_INTERESTING</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_KEY_MIN_INTERESTING\">INPUT_DEVICE_ID_KEY_MIN_INTERESTING</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"KEY_MIN_INTERESTING and INPUT_DEVICE_ID_KEY_MIN_INTERESTING do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_KEY_MAX\">INPUT_DEVICE_ID_KEY_MAX</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"KEY_MAX and INPUT_DEVICE_ID_KEY_MAX do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#REL_MAX\">REL_MAX</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_REL_MAX\">INPUT_DEVICE_ID_REL_MAX</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"REL_MAX and INPUT_DEVICE_ID_REL_MAX do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#ABS_MAX\">ABS_MAX</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_ABS_MAX\">INPUT_DEVICE_ID_ABS_MAX</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"ABS_MAX and INPUT_DEVICE_ID_ABS_MAX do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#MSC_MAX\">MSC_MAX</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_MSC_MAX\">INPUT_DEVICE_ID_MSC_MAX</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"MSC_MAX and INPUT_DEVICE_ID_MSC_MAX do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#LED_MAX\">LED_MAX</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_LED_MAX\">INPUT_DEVICE_ID_LED_MAX</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"LED_MAX and INPUT_DEVICE_ID_LED_MAX do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#SND_MAX\">SND_MAX</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_SND_MAX\">INPUT_DEVICE_ID_SND_MAX</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"SND_MAX and INPUT_DEVICE_ID_SND_MAX do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#FF_MAX\">FF_MAX</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_FF_MAX\">INPUT_DEVICE_ID_FF_MAX</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"FF_MAX and INPUT_DEVICE_ID_FF_MAX do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#SW_MAX\">SW_MAX</a> != <a class=\"id\" href=\"#INPUT_DEVICE_ID_SW_MAX\">INPUT_DEVICE_ID_SW_MAX</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"SW_MAX and INPUT_DEVICE_ID_SW_MAX do not match\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_DEVICE\">INPUT_DEVICE_ID_MATCH_DEVICE</a> \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_BUS\">INPUT_DEVICE_ID_MATCH_BUS</a> | <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_VENDOR\">INPUT_DEVICE_ID_MATCH_VENDOR</a> | <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_PRODUCT\">INPUT_DEVICE_ID_MATCH_PRODUCT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_DEVICE_AND_VERSION\">INPUT_DEVICE_ID_MATCH_DEVICE_AND_VERSION</a> \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_DEVICE\">INPUT_DEVICE_ID_MATCH_DEVICE</a> | <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_VERSION\">INPUT_DEVICE_ID_MATCH_VERSION</a>)", 
"", 
"struct <a class=\"id\" href=\"#input_handle\">input_handle</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct input_handler - implements one of interfaces for input devices</span>", 
"<span class=\"comment\"> * @private: driver-specific data</span>", 
"<span class=\"comment\"> * @event: event handler. This method is being called by input core with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupts disabled and dev-&gt;event_lock spinlock held and so</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it may not sleep</span>", 
"<span class=\"comment\"> * @filter: similar to @event; separates normal event handlers from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"filters\".</span>", 
"<span class=\"comment\"> * @match: called after comparing device's id with handler's id_table</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to perform fine-grained matching between device and handler</span>", 
"<span class=\"comment\"> * @connect: called when attaching a handler to an input device</span>", 
"<span class=\"comment\"> * @disconnect: disconnects a handler from input device</span>", 
"<span class=\"comment\"> * @start: starts handler for given handle. This function is called by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>input core right after connect() method and also when a process</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that \"grabbed\" a device releases it</span>", 
"<span class=\"comment\"> * @fops: file operations this driver implements</span>", 
"<span class=\"comment\"> * @minor: beginning of range of 32 minors for devices this driver</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>can provide</span>", 
"<span class=\"comment\"> * @name: name of the handler, to be shown in /proc/bus/input/handlers</span>", 
"<span class=\"comment\"> * @id_table: pointer to a table of input_device_ids this driver can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>handle</span>", 
"<span class=\"comment\"> * @h_list: list of input handles associated with the handler</span>", 
"<span class=\"comment\"> * @node: for placing the driver onto input_handler_list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Input handlers attach to input devices and create input handles. There</span>", 
"<span class=\"comment\"> * are likely several handlers attached to any given input device at the</span>", 
"<span class=\"comment\"> * same time. All of them will get their copy of input event generated by</span>", 
"<span class=\"comment\"> * the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The very same structure is used to implement input filters. Input core</span>", 
"<span class=\"comment\"> * allows filters to run first and will not pass event to regular handlers</span>", 
"<span class=\"comment\"> * if any of the filters indicate that the event should be filtered (by</span>", 
"<span class=\"comment\"> * returning %true from their filter() method).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that input core serializes calls to connect() and disconnect()</span>", 
"<span class=\"comment\"> * methods.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#input_handler\">input_handler</a> {", 
"", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#event\">event</a>)(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#filter\">filter</a>)(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#match\">match</a>)(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>, struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#connect\">connect</a>)(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>, struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, const struct <a class=\"id\" href=\"#input_device_id\">input_device_id</a> *<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#disconnect\">disconnect</a>)(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#start\">start</a>)(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#minor\">minor</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#input_device_id\">input_device_id</a> *<a class=\"id\" href=\"#id_table\">id_table</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#h_list\">h_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct input_handle - links input device with an input handler</span>", 
"<span class=\"comment\"> * @private: handler-specific data</span>", 
"<span class=\"comment\"> * @open: counter showing whether the handle is 'open', i.e. should deliver</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>events from its device</span>", 
"<span class=\"comment\"> * @name: name given to the handle by handler that created it</span>", 
"<span class=\"comment\"> * @dev: input device the handle is attached to</span>", 
"<span class=\"comment\"> * @handler: handler that works with the device through this handle</span>", 
"<span class=\"comment\"> * @d_node: used to put the handle on device's list of attached handles</span>", 
"<span class=\"comment\"> * @h_node: used to put the handle on handler's list of handles from which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it gets events</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#input_handle\">input_handle</a> {", 
"", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#open\">open</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#d_node\">d_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#h_node\">h_node</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#input_allocate_device\">input_allocate_device</a>(void);", 
"void <a class=\"id\" href=\"#input_free_device\">input_free_device</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#input_get_device\">input_get_device</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>)) : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_put_device\">input_put_device</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#input_get_drvdata\">input_get_drvdata</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_set_drvdata\">input_set_drvdata</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#input_register_device\">input_register_device</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *);", 
"void <a class=\"id\" href=\"#input_unregister_device\">input_unregister_device</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *);", 
"", 
"int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#input_register_handler\">input_register_handler</a>(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *);", 
"void <a class=\"id\" href=\"#input_unregister_handler\">input_unregister_handler</a>(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *);", 
"", 
"int <a class=\"id\" href=\"#input_handler_for_each_handle\">input_handler_for_each_handle</a>(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *, void *));", 
"", 
"int <a class=\"id\" href=\"#input_register_handle\">input_register_handle</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *);", 
"void <a class=\"id\" href=\"#input_unregister_handle\">input_unregister_handle</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *);", 
"", 
"int <a class=\"id\" href=\"#input_grab_device\">input_grab_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *);", 
"void <a class=\"id\" href=\"#input_release_device\">input_release_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *);", 
"", 
"int <a class=\"id\" href=\"#input_open_device\">input_open_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *);", 
"void <a class=\"id\" href=\"#input_close_device\">input_close_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *);", 
"", 
"int <a class=\"id\" href=\"#input_flush_device\">input_flush_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a>* <a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#file\">file</a>* <a class=\"id\" href=\"#file\">file</a>);", 
"", 
"void <a class=\"id\" href=\"#input_event\">input_event</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"void <a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_report_key\">input_report_key</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_event\">input_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>, <a class=\"id\" href=\"#code\">code</a>, !!<a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_report_rel\">input_report_rel</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_event\">input_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_REL\">EV_REL</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_report_abs\">input_report_abs</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_event\">input_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_ABS\">EV_ABS</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_report_ff_status\">input_report_ff_status</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_event\">input_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_FF_STATUS\">EV_FF_STATUS</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_report_switch\">input_report_switch</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_event\">input_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_SW\">EV_SW</a>, <a class=\"id\" href=\"#code\">code</a>, !!<a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_sync\">input_sync</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_event\">input_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_SYN\">EV_SYN</a>, <a class=\"id\" href=\"#SYN_REPORT\">SYN_REPORT</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_mt_sync\">input_mt_sync</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_event\">input_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_SYN\">EV_SYN</a>, <a class=\"id\" href=\"#SYN_MT_REPORT\">SYN_MT_REPORT</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_mt_slot\">input_mt_slot</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#slot\">slot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_event\">input_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_ABS\">EV_ABS</a>, <a class=\"id\" href=\"#ABS_MT_SLOT\">ABS_MT_SLOT</a>, <a class=\"id\" href=\"#slot\">slot</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#input_set_capability\">input_set_capability</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_set_events_per_packet - tell handlers about the driver event rate</span>", 
"<span class=\"comment\"> * @dev: the input device used by the driver</span>", 
"<span class=\"comment\"> * @n_events: the average number of events between calls to input_sync()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the event rate sent from a device is unusually large, use this</span>", 
"<span class=\"comment\"> * function to set the expected event rate. This will allow handlers</span>", 
"<span class=\"comment\"> * to set up an appropriate buffer size for the event stream, in order</span>", 
"<span class=\"comment\"> * to minimize information loss.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_set_events_per_packet\">input_set_events_per_packet</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#n_events\">n_events</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hint_events_per_packet\">hint_events_per_packet</a> = <a class=\"id\" href=\"#n_events\">n_events</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#input_alloc_absinfo\">input_alloc_absinfo</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"void <a class=\"id\" href=\"#input_set_abs_params\">input_set_abs_params</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#axis\">axis</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#min\">min</a>, int <a class=\"id\" href=\"#max\">max</a>, int <a class=\"id\" href=\"#fuzz\">fuzz</a>, int <a class=\"id\" href=\"#flat\">flat</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_GENERATE_ABS_ACCESSORS\">INPUT_GENERATE_ABS_ACCESSORS</a>(<a class=\"id\" href=\"#_suffix\">_suffix</a>, <a class=\"id\" href=\"#_item\">_item</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#input_abs_get_\">input_abs_get_</a>##<a class=\"id\" href=\"#_suffix\">_suffix</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#axis\">axis</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>[<a class=\"id\" href=\"#axis\">axis</a>].<a class=\"id\" href=\"#_item\">_item</a> : 0;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_abs_set_\">input_abs_set_</a>##<a class=\"id\" href=\"#_suffix\">_suffix</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#axis\">axis</a>, int <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_alloc_absinfo\">input_alloc_absinfo</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>[<a class=\"id\" href=\"#axis\">axis</a>].<a class=\"id\" href=\"#_item\">_item</a> = <a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"<a class=\"id\" href=\"#INPUT_GENERATE_ABS_ACCESSORS\">INPUT_GENERATE_ABS_ACCESSORS</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#value\">value</a>)", 
"<a class=\"id\" href=\"#INPUT_GENERATE_ABS_ACCESSORS\">INPUT_GENERATE_ABS_ACCESSORS</a>(<a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#minimum\">minimum</a>)", 
"<a class=\"id\" href=\"#INPUT_GENERATE_ABS_ACCESSORS\">INPUT_GENERATE_ABS_ACCESSORS</a>(<a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#maximum\">maximum</a>)", 
"<a class=\"id\" href=\"#INPUT_GENERATE_ABS_ACCESSORS\">INPUT_GENERATE_ABS_ACCESSORS</a>(<a class=\"id\" href=\"#fuzz\">fuzz</a>, <a class=\"id\" href=\"#fuzz\">fuzz</a>)", 
"<a class=\"id\" href=\"#INPUT_GENERATE_ABS_ACCESSORS\">INPUT_GENERATE_ABS_ACCESSORS</a>(<a class=\"id\" href=\"#flat\">flat</a>, <a class=\"id\" href=\"#flat\">flat</a>)", 
"<a class=\"id\" href=\"#INPUT_GENERATE_ABS_ACCESSORS\">INPUT_GENERATE_ABS_ACCESSORS</a>(<a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#resolution\">resolution</a>)", 
"", 
"int <a class=\"id\" href=\"#input_get_keycode\">input_get_keycode</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>, unsigned int *<a class=\"id\" href=\"#keycode\">keycode</a>);", 
"int <a class=\"id\" href=\"#input_set_keycode\">input_set_keycode</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>, unsigned int <a class=\"id\" href=\"#keycode\">keycode</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#class\">class</a> <a class=\"id\" href=\"#input_class\">input_class</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ff_device - force-feedback part of an input device</span>", 
"<span class=\"comment\"> * @upload: Called to upload an new effect into device</span>", 
"<span class=\"comment\"> * @erase: Called to erase an effect from device</span>", 
"<span class=\"comment\"> * @playback: Called to request device to start playing specified effect</span>", 
"<span class=\"comment\"> * @set_gain: Called to set specified gain</span>", 
"<span class=\"comment\"> * @set_autocenter: Called to auto-center device</span>", 
"<span class=\"comment\"> * @destroy: called by input core when parent input device is being</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>destroyed</span>", 
"<span class=\"comment\"> * @private: driver-specific data, will be freed automatically</span>", 
"<span class=\"comment\"> * @ffbit: bitmap of force feedback capabilities truly supported by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device (not emulated like ones in input_dev-&gt;ffbit)</span>", 
"<span class=\"comment\"> * @mutex: mutex for serializing access to the device</span>", 
"<span class=\"comment\"> * @max_effects: maximum number of effects supported by device</span>", 
"<span class=\"comment\"> * @effects: pointer to an array of effects currently loaded into device</span>", 
"<span class=\"comment\"> * @effect_owners: array of effect owners; when file handle owning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>an effect gets closed the effect is automatically erased</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Every force-feedback device must implement upload() and playback()</span>", 
"<span class=\"comment\"> * methods; erase() is optional. set_gain() and set_autocenter() need</span>", 
"<span class=\"comment\"> * only be implemented if driver sets up FF_GAIN and FF_AUTOCENTER</span>", 
"<span class=\"comment\"> * bits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that playback(), set_gain() and set_autocenter() are called with</span>", 
"<span class=\"comment\"> * dev-&gt;event_lock spinlock held and interrupts off and thus may not</span>", 
"<span class=\"comment\"> * sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ff_device\">ff_device</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#upload\">upload</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *<a class=\"id\" href=\"#effect\">effect</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#erase\">erase</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#effect_id\">effect_id</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#playback\">playback</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#effect_id\">effect_id</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_gain\">set_gain</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#gain\">gain</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_autocenter\">set_autocenter</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#magnitude\">magnitude</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#destroy\">destroy</a>)(struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *);", 
"", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ffbit\">ffbit</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#FF_CNT\">FF_CNT</a>)];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#mutex\">mutex</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_effects\">max_effects</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *<a class=\"id\" href=\"#effects\">effects</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#effect_owners\">effect_owners</a>[];", 
"};", 
"", 
"int <a class=\"id\" href=\"#input_ff_create\">input_ff_create</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#max_effects\">max_effects</a>);", 
"void <a class=\"id\" href=\"#input_ff_destroy\">input_ff_destroy</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"int <a class=\"id\" href=\"#input_ff_event\">input_ff_event</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"int <a class=\"id\" href=\"#input_ff_upload\">input_ff_upload</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *<a class=\"id\" href=\"#effect\">effect</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"int <a class=\"id\" href=\"#input_ff_erase\">input_ff_erase</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#effect_id\">effect_id</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"int <a class=\"id\" href=\"#input_ff_create_memless\">input_ff_create_memless</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#play_effect\">play_effect</a>)(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *, void *, struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *));", 
"", 
"int <a class=\"id\" href=\"#input_mt_create_slots\">input_mt_create_slots</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#num_slots\">num_slots</a>);", 
"void <a class=\"id\" href=\"#input_mt_destroy_slots\">input_mt_destroy_slots</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/dc/47853c6d47dd59cfdd60f7b1efa8638a898f99.xr', __xr_tmp);
