var __xr_tmp = [
"<span class=\"comment\"> * This is only useful when the bootmem allocator has already been torn</span>", 
"<span class=\"comment\"> * down, but we are still initializing the system.  Pages are given directly</span>", 
"<span class=\"comment\"> * to the page allocator, no bootmem metadata is updated because it is gone.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_bootmem_late\">free_bootmem_late</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cursor\">cursor</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_free_part\">kmemleak_free_part</a>(<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#addr\">addr</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cursor\">cursor</a> = <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#cursor\">cursor</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#cursor\">cursor</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#cursor\">cursor</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__free_pages_memory\">__free_pages_memory</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_aligned\">start_aligned</a>, <a class=\"id\" href=\"#end_aligned\">end_aligned</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_aligned\">start_aligned</a> = (<a class=\"id\" href=\"#start\">start</a> + (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1)) &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_aligned\">end_aligned</a> = <a class=\"id\" href=\"#end\">end</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_aligned\">end_aligned</a> <= <a class=\"id\" href=\"#start_aligned\">start_aligned</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#i\">i</a>), 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#start_aligned\">start_aligned</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#i\">i</a>), 0);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start_aligned\">start_aligned</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#end_aligned\">end_aligned</a>; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#order\">order</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#end_aligned\">end_aligned</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#i\">i</a>), 0);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_all_memory_core_early\">free_all_memory_core_early</a>(int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#range\">range</a> *<a class=\"id\" href=\"#range\">range</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_range\">nr_range</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_range\">nr_range</a> = <a class=\"id\" href=\"#get_free_all_memory_range\">get_free_all_memory_range</a>(&amp;<a class=\"id\" href=\"#range\">range</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_range\">nr_range</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#range\">range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#range\">range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_memory\">__free_pages_memory</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"#else", 
"static unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_all_bootmem_core\">free_all_bootmem_core</a>(<a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#aligned\">aligned</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_low_pfn\">node_low_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the start is aligned to the machines wordsize, we might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be able to free pages in bulks of that order.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aligned\">aligned</a> = !(<a class=\"id\" href=\"#start\">start</a> &amp; (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdebug\">bdebug</a>(\"nid=%td start=%lx end=%lx aligned=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a> - <a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#aligned\">aligned</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#vec\">vec</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> = ~<a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#idx\">idx</a> / <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#aligned\">aligned</a> && <a class=\"id\" href=\"#vec\">vec</a> == ~0UL && <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#start\">start</a>), <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#off\">off</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#vec\">vec</a> && <a class=\"id\" href=\"#off\">off</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vec\">vec</a> &amp; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_low_pfn\">node_low_pfn</a> - <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#bootmem_bootmap_pages\">bootmem_bootmap_pages</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pages\">pages</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(<a class=\"id\" href=\"#page\">page</a>++, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdebug\">bdebug</a>(\"nid=%td released=%lx\\n\", <a class=\"id\" href=\"#bdata\">bdata</a> - <a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_all_bootmem_node - release a node's free pages to the buddy allocator</span>", 
"<span class=\"comment\"> * @pgdat: node to be released</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of pages actually released.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_all_bootmem_node\">free_all_bootmem_node</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_page_bootmem_info_node\">register_page_bootmem_info_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* free_all_memory_core_early(MAX_NUMNODES) will be called later */</span>", 
"<span class=\"ts\"/>return 0;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#free_all_bootmem_core\">free_all_bootmem_core</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#bdata\">bdata</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_all_bootmem - release free pages to the buddy allocator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of pages actually released.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_all_bootmem\">free_all_bootmem</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to use MAX_NUMNODES instead of NODE_DATA(0)-&gt;node_id</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  because in some case like Node0 doesnt have RAM installed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  low ram will be on Node1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use MAX_NUMNODES will make sure all ranges in early_node_map[]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  will be used instead of only Node0 related</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#free_all_memory_core_early\">free_all_memory_core_early</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"#else", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_pages\">total_pages</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, &amp;<a class=\"id\" href=\"#bdata_list\">bdata_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_pages\">total_pages</a> += <a class=\"id\" href=\"#free_all_bootmem_core\">free_all_bootmem_core</a>(<a class=\"id\" href=\"#bdata\">bdata</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#total_pages\">total_pages</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__free\">__free</a>(<a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sidx\">sidx</a>, unsigned long <a class=\"id\" href=\"#eidx\">eidx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdebug\">bdebug</a>(\"nid=%td start=%lx end=%lx\\n\", <a class=\"id\" href=\"#bdata\">bdata</a> - <a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> + <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eidx\">eidx</a> + <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#hint_idx\">hint_idx</a> &gt; <a class=\"id\" href=\"#sidx\">sidx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#hint_idx\">hint_idx</a> = <a class=\"id\" href=\"#sidx\">sidx</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sidx\">sidx</a>; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#eidx\">eidx</a>; <a class=\"id\" href=\"#idx\">idx</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__reserve\">__reserve</a>(<a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>, unsigned long <a class=\"id\" href=\"#sidx\">sidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#eidx\">eidx</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#exclusive\">exclusive</a> = <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#BOOTMEM_EXCLUSIVE\">BOOTMEM_EXCLUSIVE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdebug\">bdebug</a>(\"nid=%td start=%lx end=%lx flags=%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a> - <a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> + <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eidx\">eidx</a> + <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sidx\">sidx</a>; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#eidx\">eidx</a>; <a class=\"id\" href=\"#idx\">idx</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#exclusive\">exclusive</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free\">__free</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#sidx\">sidx</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdebug\">bdebug</a>(\"silent double reserve of PFN %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> + <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mark_bootmem_node\">mark_bootmem_node</a>(<a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#reserve\">reserve</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sidx\">sidx</a>, <a class=\"id\" href=\"#eidx\">eidx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdebug\">bdebug</a>(\"nid=%td start=%lx end=%lx reserve=%d flags=%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a> - <a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#reserve\">reserve</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_low_pfn\">node_low_pfn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> = <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eidx\">eidx</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reserve\">reserve</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__reserve\">__reserve</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#sidx\">sidx</a>, <a class=\"id\" href=\"#eidx\">eidx</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free\">__free</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#sidx\">sidx</a>, <a class=\"id\" href=\"#eidx\">eidx</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mark_bootmem\">mark_bootmem</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#reserve\">reserve</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, &amp;<a class=\"id\" href=\"#bdata_list\">bdata_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pos\">pos</a> >= <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_low_pfn\">node_low_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pos\">pos</a> != <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_low_pfn\">node_low_pfn</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mark_bootmem_node\">mark_bootmem_node</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#reserve\">reserve</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reserve\">reserve</a> && <a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_bootmem\">mark_bootmem</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#pos\">pos</a>, 0, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> == <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_low_pfn\">node_low_pfn</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_bootmem_node - mark a page range as usable</span>", 
"<span class=\"comment\"> * @pgdat: node the range resides on</span>", 
"<span class=\"comment\"> * @physaddr: starting address of the range</span>", 
"<span class=\"comment\"> * @size: size of the range in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Partial pages will be considered reserved and left as they are.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The range must reside completely on the specified node.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_bootmem_node\">free_bootmem_node</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long <a class=\"id\" href=\"#physaddr\">physaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_early\">free_early</a>(<a class=\"id\" href=\"#physaddr\">physaddr</a>, <a class=\"id\" href=\"#physaddr\">physaddr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"#else", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_free_part\">kmemleak_free_part</a>(<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#physaddr\">physaddr</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#physaddr\">physaddr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#physaddr\">physaddr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_bootmem_node\">mark_bootmem_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, 0, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_bootmem - mark a page range as usable</span>", 
"<span class=\"comment\"> * @addr: starting address of the range</span>", 
"<span class=\"comment\"> * @size: size of the range in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Partial pages will be considered reserved and left as they are.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The range must be contiguous but may span node boundaries.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_early\">free_early</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"#else", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_free_part\">kmemleak_free_part</a>(<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#addr\">addr</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_bootmem\">mark_bootmem</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, 0, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * reserve_bootmem_node - mark a page range as reserved</span>", 
"<span class=\"comment\"> * @pgdat: node the range resides on</span>", 
"<span class=\"comment\"> * @physaddr: starting address of the range</span>", 
"<span class=\"comment\"> * @size: size of the range in bytes</span>", 
"<span class=\"comment\"> * @flags: reservation flags (see linux/bootmem.h)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Partial pages will be reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The range must reside completely on the specified node.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#reserve_bootmem_node\">reserve_bootmem_node</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long <a class=\"id\" href=\"#physaddr\">physaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"no bootmem\");", 
"<span class=\"ts\"/>return 0;", 
"#else", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#physaddr\">physaddr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#physaddr\">physaddr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mark_bootmem_node\">mark_bootmem_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, 1, <a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * reserve_bootmem - mark a page range as usable</span>", 
"<span class=\"comment\"> * @addr: starting address of the range</span>", 
"<span class=\"comment\"> * @size: size of the range in bytes</span>", 
"<span class=\"comment\"> * @flags: reservation flags (see linux/bootmem.h)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Partial pages will be reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The range must be contiguous but may span node boundaries.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#reserve_bootmem\">reserve_bootmem</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"no bootmem\");", 
"<span class=\"ts\"/>return 0;", 
"#else", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mark_bootmem\">mark_bootmem</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, 1, <a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"static unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#align_idx\">align_idx</a>(struct <a class=\"id\" href=\"#bootmem_data\">bootmem_data</a> *<a class=\"id\" href=\"#bdata\">bdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#idx\">idx</a>, unsigned long <a class=\"id\" href=\"#step\">step</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Align the index with respect to the node start so that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * combination of both satisfies the requested alignment.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#step\">step</a>) - <a class=\"id\" href=\"#base\">base</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#align_off\">align_off</a>(struct <a class=\"id\" href=\"#bootmem_data\">bootmem_data</a> *<a class=\"id\" href=\"#bdata\">bdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#off\">off</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Same as align_idx for byte offsets */</span>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#align\">align</a>) - <a class=\"id\" href=\"#base\">base</a>;", 
"}", 
"", 
"static void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#alloc_bootmem_core\">alloc_bootmem_core</a>(struct <a class=\"id\" href=\"#bootmem_data\">bootmem_data</a> *<a class=\"id\" href=\"#bdata\">bdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#goal\">goal</a>, unsigned long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#fallback\">fallback</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sidx\">sidx</a>, <a class=\"id\" href=\"#midx\">midx</a>, <a class=\"id\" href=\"#step\">step</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdebug\">bdebug</a>(\"nid=%td size=%lx [%lu pages] align=%lx goal=%lx limit=%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a> - <a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#align\">align</a> &amp; (<a class=\"id\" href=\"#align\">align</a> - 1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#limit\">limit</a> && <a class=\"id\" href=\"#goal\">goal</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#limit\">limit</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a> = <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_low_pfn\">node_low_pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> >>= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> >>= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> && <a class=\"id\" href=\"#max\">max</a> &gt; <a class=\"id\" href=\"#limit\">limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> <= <a class=\"id\" href=\"#min\">min</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#step\">step</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#align\">align</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, 1UL);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> && <a class=\"id\" href=\"#min\">min</a> &lt; <a class=\"id\" href=\"#goal\">goal</a> && <a class=\"id\" href=\"#goal\">goal</a> &lt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#step\">step</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#step\">step</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> = <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#midx\">midx</a> = <a class=\"id\" href=\"#max\">max</a> - <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#hint_idx\">hint_idx</a> &gt; <a class=\"id\" href=\"#sidx\">sidx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Handle the valid case of sidx being zero and still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * catch the fallback below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fallback\">fallback</a> = <a class=\"id\" href=\"#sidx\">sidx</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> = <a class=\"id\" href=\"#align_idx\">align_idx</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#hint_idx\">hint_idx</a>, <a class=\"id\" href=\"#step\">step</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#merge\">merge</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#region\">region</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#eidx\">eidx</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#start_off\">start_off</a>, <a class=\"id\" href=\"#end_off\">end_off</a>;", 
"<a class=\"id\" href=\"#find_block\">find_block</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> = <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a>, <a class=\"id\" href=\"#midx\">midx</a>, <a class=\"id\" href=\"#sidx\">sidx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> = <a class=\"id\" href=\"#align_idx\">align_idx</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#sidx\">sidx</a>, <a class=\"id\" href=\"#step\">step</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eidx\">eidx</a> = <a class=\"id\" href=\"#sidx\">sidx</a> + <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sidx\">sidx</a> >= <a class=\"id\" href=\"#midx\">midx</a> || <a class=\"id\" href=\"#eidx\">eidx</a> &gt; <a class=\"id\" href=\"#midx\">midx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#sidx\">sidx</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#eidx\">eidx</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> = <a class=\"id\" href=\"#align_idx\">align_idx</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#step\">step</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sidx\">sidx</a> == <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> += <a class=\"id\" href=\"#step\">step</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#find_block\">find_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#last_end_off\">last_end_off</a> &amp; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#last_end_off\">last_end_off</a>) + 1 == <a class=\"id\" href=\"#sidx\">sidx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_off\">start_off</a> = <a class=\"id\" href=\"#align_off\">align_off</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#last_end_off\">last_end_off</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_off\">start_off</a> = <a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#sidx\">sidx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#merge\">merge</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#start_off\">start_off</a>) &lt; <a class=\"id\" href=\"#sidx\">sidx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_off\">end_off</a> = <a class=\"id\" href=\"#start_off\">start_off</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#last_end_off\">last_end_off</a> = <a class=\"id\" href=\"#end_off\">end_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#hint_idx\">hint_idx</a> = <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#end_off\">end_off</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Reserve the area now:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__reserve\">__reserve</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#start_off\">start_off</a>) + <a class=\"id\" href=\"#merge\">merge</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#end_off\">end_off</a>), <a class=\"id\" href=\"#BOOTMEM_EXCLUSIVE\">BOOTMEM_EXCLUSIVE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a> = <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_off\">start_off</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#region\">region</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The min_count is set to 0 so that bootmem allocated blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are never reported as leaks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_alloc\">kmemleak_alloc</a>(<a class=\"id\" href=\"#region\">region</a>, <a class=\"id\" href=\"#size\">size</a>, 0, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#region\">region</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fallback\">fallback</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sidx\">sidx</a> = <a class=\"id\" href=\"#align_idx\">align_idx</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#fallback\">fallback</a> - 1, <a class=\"id\" href=\"#step\">step</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fallback\">fallback</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#find_block\">find_block</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#alloc_arch_preferred_bootmem\">alloc_arch_preferred_bootmem</a>(<a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#goal\">goal</a>, unsigned long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_ARCH_BOOTMEM\">CONFIG_HAVE_ARCH_BOOTMEM</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#p_bdata\">p_bdata</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p_bdata\">p_bdata</a> = <a class=\"id\" href=\"#bootmem_arch_preferred_node\">bootmem_arch_preferred_node</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p_bdata\">p_bdata</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_bootmem_core\">alloc_bootmem_core</a>(<a class=\"id\" href=\"#p_bdata\">p_bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#___alloc_bootmem_nopanic\">___alloc_bootmem_nopanic</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#goal\">goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#region\">region</a>;", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a> = <a class=\"id\" href=\"#alloc_arch_preferred_bootmem\">alloc_arch_preferred_bootmem</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#region\">region</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#region\">region</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, &amp;<a class=\"id\" href=\"#bdata_list\">bdata_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> && <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_low_pfn\">node_low_pfn</a> <= <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#goal\">goal</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> && <a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a> >= <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#limit\">limit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a> = <a class=\"id\" href=\"#alloc_bootmem_core\">alloc_bootmem_core</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#region\">region</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#region\">region</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __alloc_bootmem_nopanic - allocate boot memory without panicking</span>", 
"<span class=\"comment\"> * @size: size of the request in bytes</span>", 
"<span class=\"comment\"> * @align: alignment of the region</span>", 
"<span class=\"comment\"> * @goal: preferred starting address of the region</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The goal is dropped if it can not be satisfied and the allocation will</span>", 
"<span class=\"comment\"> * fall back to memory below @goal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocation may happen on any node in the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__alloc_bootmem_nopanic\">__alloc_bootmem_nopanic</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#limit\">limit</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = -1UL;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#___alloc_bootmem_nopanic\">___alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"}", 
"", 
"static void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#___alloc_bootmem\">___alloc_bootmem</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#goal\">goal</a>, unsigned long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#___alloc_bootmem_nopanic\">___alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Whoops, we cannot satisfy the allocation request.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"bootmem alloc of %lu bytes failed!\\n\", <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Out of memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __alloc_bootmem - allocate boot memory</span>", 
"<span class=\"comment\"> * @size: size of the request in bytes</span>", 
"<span class=\"comment\"> * @align: alignment of the region</span>", 
"<span class=\"comment\"> * @goal: preferred starting address of the region</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The goal is dropped if it can not be satisfied and the allocation will</span>", 
"<span class=\"comment\"> * fall back to memory below @goal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocation may happen on any node in the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function panics if the request can not be satisfied.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__alloc_bootmem\">__alloc_bootmem</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#limit\">limit</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = -1UL;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#___alloc_bootmem\">___alloc_bootmem</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"static void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#___alloc_bootmem_node\">___alloc_bootmem_node</a>(<a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#goal\">goal</a>, unsigned long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#alloc_arch_preferred_bootmem\">alloc_arch_preferred_bootmem</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#alloc_bootmem_core\">alloc_bootmem_core</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#___alloc_bootmem\">___alloc_bootmem</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __alloc_bootmem_node - allocate boot memory from a specific node</span>", 
"<span class=\"comment\"> * @pgdat: node to allocate from</span>", 
"<span class=\"comment\"> * @size: size of the request in bytes</span>", 
"<span class=\"comment\"> * @align: alignment of the region</span>", 
"<span class=\"comment\"> * @goal: preferred starting address of the region</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The goal is dropped if it can not be satisfied and the allocation will</span>", 
"<span class=\"comment\"> * fall back to memory below @goal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocation may fall back to any node in the system if the specified node</span>", 
"<span class=\"comment\"> * can not hold the requested memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function panics if the request can not be satisfied.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__alloc_bootmem_node\">__alloc_bootmem_node</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#align\">align</a>, unsigned long <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>, <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#goal\">goal</a>, -1ULL);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#goal\">goal</a>, -1ULL);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#___alloc_bootmem_node\">___alloc_bootmem_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"}", 
"", 
"void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__alloc_bootmem_node_high\">__alloc_bootmem_node_high</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#align\">align</a>, unsigned long <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>, <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update goal according ...MAX_DMA32_PFN */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> + <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pfn\">end_pfn</a> &gt; <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a> + (128 >> (20 - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#goal\">goal</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) &lt; <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_goal\">new_goal</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_goal\">new_goal</a> = <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> =  <a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#new_goal\">new_goal</a>, -1ULL);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#alloc_bootmem_core\">alloc_bootmem_core</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#new_goal\">new_goal</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_bootmem_node\">__alloc_bootmem_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>);", 
"", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_bootmem_section - allocate boot memory from a specific section</span>", 
"<span class=\"comment\"> * @size: size of the request in bytes</span>", 
"<span class=\"comment\"> * @section_nr: sparse map section to allocate from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#alloc_bootmem_section\">alloc_bootmem_section</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#section_nr\">section_nr</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#section_nr_to_pfn\">section_nr_to_pfn</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#section_nr_to_pfn\">section_nr_to_pfn</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a> + 1) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(<a class=\"id\" href=\"#early_pfn_to_nid\">early_pfn_to_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>), <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SMP_CACHE_BYTES\">SMP_CACHE_BYTES</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#section_nr_to_pfn\">section_nr_to_pfn</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#section_nr_to_pfn\">section_nr_to_pfn</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a> + 1) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a> = &amp;<a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>[<a class=\"id\" href=\"#early_pfn_to_nid\">early_pfn_to_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_bootmem_core\">alloc_bootmem_core</a>(<a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#SMP_CACHE_BYTES\">SMP_CACHE_BYTES</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__alloc_bootmem_node_nopanic\">__alloc_bootmem_node_nopanic</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#align\">align</a>, unsigned long <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>, <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> =  <a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#goal\">goal</a>, -1ULL);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#alloc_arch_preferred_bootmem\">alloc_arch_preferred_bootmem</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#alloc_bootmem_core\">alloc_bootmem_core</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_bootmem_nopanic\">__alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_LOW_ADDRESS_LIMIT\">ARCH_LOW_ADDRESS_LIMIT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_LOW_ADDRESS_LIMIT\">ARCH_LOW_ADDRESS_LIMIT</a><span class=\"ts\"/>0xffffffffUL", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __alloc_bootmem_low - allocate low boot memory</span>", 
"<span class=\"comment\"> * @size: size of the request in bytes</span>", 
"<span class=\"comment\"> * @align: alignment of the region</span>", 
"<span class=\"comment\"> * @goal: preferred starting address of the region</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The goal is dropped if it can not be satisfied and the allocation will</span>", 
"<span class=\"comment\"> * fall back to memory below @goal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocation may happen on any node in the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function panics if the request can not be satisfied.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__alloc_bootmem_low\">__alloc_bootmem_low</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#___alloc_bootmem\">___alloc_bootmem</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#ARCH_LOW_ADDRESS_LIMIT\">ARCH_LOW_ADDRESS_LIMIT</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __alloc_bootmem_low_node - allocate low boot memory from a specific node</span>", 
"<span class=\"comment\"> * @pgdat: node to allocate from</span>", 
"<span class=\"comment\"> * @size: size of the request in bytes</span>", 
"<span class=\"comment\"> * @align: alignment of the region</span>", 
"<span class=\"comment\"> * @goal: preferred starting address of the region</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The goal is dropped if it can not be satisfied and the allocation will</span>", 
"<span class=\"comment\"> * fall back to memory below @goal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocation may fall back to any node in the system if the specified node</span>", 
"<span class=\"comment\"> * can not hold the requested memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function panics if the request can not be satisfied.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__alloc_bootmem_low_node\">__alloc_bootmem_low_node</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#align\">align</a>, unsigned long <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>, <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#ARCH_LOW_ADDRESS_LIMIT\">ARCH_LOW_ADDRESS_LIMIT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#ARCH_LOW_ADDRESS_LIMIT\">ARCH_LOW_ADDRESS_LIMIT</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#___alloc_bootmem_node\">___alloc_bootmem_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#ARCH_LOW_ADDRESS_LIMIT\">ARCH_LOW_ADDRESS_LIMIT</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"}", 
];
xr_frag_insert('l/dc/88490d48fd239d36ec7d7c3ba434c3202e664d.xr', __xr_tmp);
