var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read-Copy Update mechanism for mutual exclusion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright IBM Corporation, 2001</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Dipankar Sarma &lt;dipankar@in.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on the original work by Paul McKenney &lt;paulmck@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> * and inputs from Rusty Russell, Andrea Arcangeli and Andi Kleen.</span>", 
"<span class=\"comment\"> * Papers:</span>", 
"<span class=\"comment\"> * http://www.rdrop.com/users/paulmck/paper/rclockpdcsproof.pdf</span>", 
"<span class=\"comment\"> * http://lse.sourceforge.net/locking/rclock_OLS.2001.05.01c.sc.pdf (OLS2001)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For detailed explanation of Read-Copy Update mechanism see -</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>http://lse.sourceforge.net/locking/rcupdate.html</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_RCUPDATE_H\">__LINUX_RCUPDATE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_RCUPDATE_H\">__LINUX_RCUPDATE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#threads\">threads</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seqlock\">seqlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#lockdep\">lockdep</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugobjects\">debugobjects</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_TORTURE_TEST\">CONFIG_RCU_TORTURE_TEST</a>", 
"extern int <a class=\"id\" href=\"#rcutorture_runnable\">rcutorture_runnable</a>; <span class=\"comment\">/* for sysctl */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_RCU_TORTURE_TEST */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct rcu_head - callback structure for use with RCU</span>", 
"<span class=\"comment\"> * @next: next update requests in a list</span>", 
"<span class=\"comment\"> * @func: actual update function to call after the grace period.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>);", 
"};", 
"", 
"<span class=\"comment\">/* Exported common interfaces */</span>", 
"extern void <a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>(void);", 
"extern void <a class=\"id\" href=\"#rcu_barrier_bh\">rcu_barrier_bh</a>(void);", 
"extern void <a class=\"id\" href=\"#rcu_barrier_sched\">rcu_barrier_sched</a>(void);", 
"extern void <a class=\"id\" href=\"#synchronize_sched_expedited\">synchronize_sched_expedited</a>(void);", 
"extern int <a class=\"id\" href=\"#sched_expedited_torture_stats\">sched_expedited_torture_stats</a>(char *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"comment\">/* Internal to kernel */</span>", 
"extern void <a class=\"id\" href=\"#rcu_init\">rcu_init</a>(void);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TREE_RCU\">CONFIG_TREE_RCU</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TREE_PREEMPT_RCU\">CONFIG_TREE_PREEMPT_RCU</a>)", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcutree\">rcutree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TINY_RCU\">CONFIG_TINY_RCU</a>)", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcutiny\">rcutiny</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"#<a class=\"id\" href=\"#error\">error</a> \"Unknown RCU implementation specified to kernel configuration\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_HEAD_INIT\">RCU_HEAD_INIT</a><span class=\"ts\"/>{ .<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, .<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#NULL\">NULL</a> }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_HEAD\">RCU_HEAD</a>(<a class=\"id\" href=\"#head\">head</a>) struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#RCU_HEAD_INIT\">RCU_HEAD_INIT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_RCU_HEAD\">INIT_RCU_HEAD</a>(<a class=\"id\" href=\"#ptr\">ptr</a>) do { \\", 
"       (<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; (<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; \\", 
"} while (0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * init_rcu_head_on_stack()/destroy_rcu_head_on_stack() are needed for dynamic</span>", 
"<span class=\"comment\"> * initialization and destruction of rcu_head on the stack. rcu_head structures</span>", 
"<span class=\"comment\"> * allocated dynamically in the heap or defined statically don't need any</span>", 
"<span class=\"comment\"> * initialization.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS_RCU_HEAD\">CONFIG_DEBUG_OBJECTS_RCU_HEAD</a>", 
"extern void <a class=\"id\" href=\"#init_rcu_head_on_stack\">init_rcu_head_on_stack</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>);", 
"extern void <a class=\"id\" href=\"#destroy_rcu_head_on_stack\">destroy_rcu_head_on_stack</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>);", 
"#else <span class=\"comment\">/* !CONFIG_DEBUG_OBJECTS_RCU_HEAD */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_rcu_head_on_stack\">init_rcu_head_on_stack</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#destroy_rcu_head_on_stack\">destroy_rcu_head_on_stack</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* #else !CONFIG_DEBUG_OBJECTS_RCU_HEAD */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"", 
"extern struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#rcu_lock_map\">rcu_lock_map</a>;", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_acquire\">rcu_read_acquire</a>() \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(&amp;<a class=\"id\" href=\"#rcu_lock_map\">rcu_lock_map</a>, 0, 0, 2, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_release\">rcu_read_release</a>()<span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(&amp;<a class=\"id\" href=\"#rcu_lock_map\">rcu_lock_map</a>, 1, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"", 
"extern struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#rcu_bh_lock_map\">rcu_bh_lock_map</a>;", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_acquire_bh\">rcu_read_acquire_bh</a>() \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(&amp;<a class=\"id\" href=\"#rcu_bh_lock_map\">rcu_bh_lock_map</a>, 0, 0, 2, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_release_bh\">rcu_read_release_bh</a>()<span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(&amp;<a class=\"id\" href=\"#rcu_bh_lock_map\">rcu_bh_lock_map</a>, 1, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"", 
"extern struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#rcu_sched_lock_map\">rcu_sched_lock_map</a>;", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_acquire_sched\">rcu_read_acquire_sched</a>() \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(&amp;<a class=\"id\" href=\"#rcu_sched_lock_map\">rcu_sched_lock_map</a>, 0, 0, 2, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_release_sched\">rcu_read_release_sched</a>() \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(&amp;<a class=\"id\" href=\"#rcu_sched_lock_map\">rcu_sched_lock_map</a>, 1, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"", 
"extern int <a class=\"id\" href=\"#debug_lockdep_rcu_enabled\">debug_lockdep_rcu_enabled</a>(void);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_read_lock_held - might we be in RCU read-side critical section?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If CONFIG_DEBUG_LOCK_ALLOC is selected, returns nonzero iff in an RCU</span>", 
"<span class=\"comment\"> * read-side critical section.  In absence of CONFIG_DEBUG_LOCK_ALLOC,</span>", 
"<span class=\"comment\"> * this assumes we are in an RCU read-side critical section unless it can</span>", 
"<span class=\"comment\"> * prove otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check debug_lockdep_rcu_enabled() to prevent false positives during boot</span>", 
"<span class=\"comment\"> * and while lockdep is disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug_lockdep_rcu_enabled\">debug_lockdep_rcu_enabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lock_is_held\">lock_is_held</a>(&amp;<a class=\"id\" href=\"#rcu_lock_map\">rcu_lock_map</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rcu_read_lock_bh_held() is defined out of line to avoid #include-file</span>", 
"<span class=\"comment\"> * hell.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#rcu_read_lock_bh_held\">rcu_read_lock_bh_held</a>(void);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_read_lock_sched_held - might we be in RCU-sched read-side critical section?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If CONFIG_DEBUG_LOCK_ALLOC is selected, returns nonzero iff in an</span>", 
"<span class=\"comment\"> * RCU-sched read-side critical section.  In absence of</span>", 
"<span class=\"comment\"> * CONFIG_DEBUG_LOCK_ALLOC, this assumes we are in an RCU-sched read-side</span>", 
"<span class=\"comment\"> * critical section unless it can prove otherwise.  Note that disabling</span>", 
"<span class=\"comment\"> * of preemption (including disabling irqs) counts as an RCU-sched</span>", 
"<span class=\"comment\"> * read-side critical section.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check debug_lockdep_rcu_enabled() to prevent false positives during boot</span>", 
"<span class=\"comment\"> * and while lockdep is disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rcu_read_lock_sched_held\">rcu_read_lock_sched_held</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lockdep_opinion\">lockdep_opinion</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug_lockdep_rcu_enabled\">debug_lockdep_rcu_enabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#debug_locks\">debug_locks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_opinion\">lockdep_opinion</a> = <a class=\"id\" href=\"#lock_is_held\">lock_is_held</a>(&amp;<a class=\"id\" href=\"#rcu_sched_lock_map\">rcu_sched_lock_map</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lockdep_opinion\">lockdep_opinion</a> || <a class=\"id\" href=\"#preempt_count\">preempt_count</a>() != 0 || <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>();", 
"}", 
"#else <span class=\"comment\">/* #ifdef CONFIG_PREEMPT */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rcu_read_lock_sched_held\">rcu_read_lock_sched_held</a>(void)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_PREEMPT */</span>", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_DEBUG_LOCK_ALLOC */</span>", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_acquire\">rcu_read_acquire</a>()<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_release\">rcu_read_release</a>()<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_acquire_bh\">rcu_read_acquire_bh</a>()<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_release_bh\">rcu_read_release_bh</a>()<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_acquire_sched\">rcu_read_acquire_sched</a>()<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_read_release_sched\">rcu_read_release_sched</a>()<span class=\"ts\"/>do { } while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>(void)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rcu_read_lock_bh_held\">rcu_read_lock_bh_held</a>(void)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rcu_read_lock_sched_held\">rcu_read_lock_sched_held</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#preempt_count\">preempt_count</a>() != 0 || <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>();", 
"}", 
"#else <span class=\"comment\">/* #ifdef CONFIG_PREEMPT */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rcu_read_lock_sched_held\">rcu_read_lock_sched_held</a>(void)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_PREEMPT */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_DEBUG_LOCK_ALLOC */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_RCU\">CONFIG_PROVE_RCU</a>", 
"", 
"extern int <a class=\"id\" href=\"#rcu_my_thread_group_empty\">rcu_my_thread_group_empty</a>(void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__do_rcu_dereference_check\">__do_rcu_dereference_check</a>(<a class=\"id\" href=\"#c\">c</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__warned\">__warned</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#debug_lockdep_rcu_enabled\">debug_lockdep_rcu_enabled</a>() && !<a class=\"id\" href=\"#__warned\">__warned</a> && !(<a class=\"id\" href=\"#c\">c</a>)) {<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__warned\">__warned</a> = <a class=\"id\" href=\"#true\">true</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_rcu_dereference\">lockdep_rcu_dereference</a>(<a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_dereference_check - rcu_dereference with debug checking</span>", 
"<span class=\"comment\"> * @p: The pointer to read, prior to dereferencing</span>", 
"<span class=\"comment\"> * @c: The conditions under which the dereference will take place</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do an rcu_dereference(), but check that the conditions under which the</span>", 
"<span class=\"comment\"> * dereference will take place are correct.  Typically the conditions indicate</span>", 
"<span class=\"comment\"> * the various locking conditions that should be held at that point.  The check</span>", 
"<span class=\"comment\"> * should return true if the conditions are satisfied.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For example:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bar = rcu_dereference_check(foo-&gt;bar, rcu_read_lock_held() ||</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      lockdep_is_held(&amp;foo-&gt;lock));</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * could be used to indicate to lockdep that foo-&gt;bar may only be dereferenced</span>", 
"<span class=\"comment\"> * if either the RCU read lock is held, or that the lock required to replace</span>", 
"<span class=\"comment\"> * the bar struct at foo-&gt;bar is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the list of conditions may also include indications of when a lock</span>", 
"<span class=\"comment\"> * need not be held, for example during initialisation or destruction of the</span>", 
"<span class=\"comment\"> * target struct:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bar = rcu_dereference_check(foo-&gt;bar, rcu_read_lock_held() ||</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      lockdep_is_held(&amp;foo-&gt;lock) ||</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      atomic_read(&amp;foo-&gt;usage) == 0);</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#c\">c</a>) \\", 
"<span class=\"ts\"/>({ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__do_rcu_dereference_check\">__do_rcu_dereference_check</a>(<a class=\"id\" href=\"#c\">c</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#p\">p</a>); \\", 
"<span class=\"ts\"/>})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_dereference_protected - fetch RCU pointer when updates prevented</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the value of the specified RCU-protected pointer, but omit</span>", 
"<span class=\"comment\"> * both the smp_read_barrier_depends() and the ACCESS_ONCE().  This</span>", 
"<span class=\"comment\"> * is useful in cases where update-side locks prevent the value of the</span>", 
"<span class=\"comment\"> * pointer from changing.  Please note that this primitive does -not-</span>", 
"<span class=\"comment\"> * prevent the compiler from repeating this reference or combining it</span>", 
"<span class=\"comment\"> * with other references, so it should not be used without protection</span>", 
"<span class=\"comment\"> * of appropriate locks.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_protected\">rcu_dereference_protected</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#c\">c</a>) \\", 
"<span class=\"ts\"/>({ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__do_rcu_dereference_check\">__do_rcu_dereference_check</a>(<a class=\"id\" href=\"#c\">c</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#p\">p</a>); \\", 
"<span class=\"ts\"/>})", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_PROVE_RCU */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#c\">c</a>)<span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#p\">p</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_protected\">rcu_dereference_protected</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#c\">c</a>) (<a class=\"id\" href=\"#p\">p</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_PROVE_RCU */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_access_pointer - fetch RCU pointer with no dereferencing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the value of the specified RCU-protected pointer, but omit the</span>", 
"<span class=\"comment\"> * smp_read_barrier_depends() and keep the ACCESS_ONCE().  This is useful</span>", 
"<span class=\"comment\"> * when the value of this pointer is accessed, but the pointer is not</span>", 
"<span class=\"comment\"> * dereferenced, for example, when testing an RCU-protected pointer against</span>", 
"<span class=\"comment\"> * NULL.  This may also be used in cases where update-side locks prevent</span>", 
"<span class=\"comment\"> * the value of the pointer from changing, but rcu_dereference_protected()</span>", 
"<span class=\"comment\"> * is a lighter-weight primitive for this use case.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_access_pointer\">rcu_access_pointer</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#p\">p</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_read_lock - mark the beginning of an RCU read-side critical section.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When synchronize_rcu() is invoked on one CPU while other CPUs</span>", 
"<span class=\"comment\"> * are within RCU read-side critical sections, then the</span>", 
"<span class=\"comment\"> * synchronize_rcu() is guaranteed to block until after all the other</span>", 
"<span class=\"comment\"> * CPUs exit their critical sections.  Similarly, if call_rcu() is invoked</span>", 
"<span class=\"comment\"> * on one CPU while other CPUs are within RCU read-side critical</span>", 
"<span class=\"comment\"> * sections, invocation of the corresponding RCU callback is deferred</span>", 
"<span class=\"comment\"> * until after the all the other CPUs exit their critical sections.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, however, that RCU callbacks are permitted to run concurrently</span>", 
"<span class=\"comment\"> * with RCU read-side critical sections.  One way that this can happen</span>", 
"<span class=\"comment\"> * is via the following sequence of events: (1) CPU 0 enters an RCU</span>", 
"<span class=\"comment\"> * read-side critical section, (2) CPU 1 invokes call_rcu() to register</span>", 
"<span class=\"comment\"> * an RCU callback, (3) CPU 0 exits the RCU read-side critical section,</span>", 
"<span class=\"comment\"> * (4) CPU 2 enters a RCU read-side critical section, (5) the RCU</span>", 
"<span class=\"comment\"> * callback is invoked.  This is legal, because the RCU read-side critical</span>", 
"<span class=\"comment\"> * section that was running concurrently with the call_rcu() (and which</span>", 
"<span class=\"comment\"> * therefore might be referencing something that the corresponding RCU</span>", 
"<span class=\"comment\"> * callback would free up) has completed before the corresponding</span>", 
"<span class=\"comment\"> * RCU callback is invoked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RCU read-side critical sections may be nested.  Any deferred actions</span>", 
"<span class=\"comment\"> * will be deferred until the outermost RCU read-side critical section</span>", 
"<span class=\"comment\"> * completes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is illegal to block while in an RCU read-side critical section.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_read_lock\">__rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#RCU\">RCU</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_acquire\">rcu_read_acquire</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * So where is rcu_write_lock()?  It does not exist, as there is no</span>", 
"<span class=\"comment\"> * way for writers to lock out RCU readers.  This is a feature, not</span>", 
"<span class=\"comment\"> * a bug -- this property is what provides RCU's performance benefits.</span>", 
"<span class=\"comment\"> * Of course, writers must coordinate with each other.  The normal</span>", 
"<span class=\"comment\"> * spinlock primitives work well for this, but any other technique may be</span>", 
"<span class=\"comment\"> * used as well.  RCU does not care how the writers keep out of each</span>", 
"<span class=\"comment\"> * others' way, as long as they do so.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_read_unlock - marks the end of an RCU read-side critical section.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See rcu_read_lock() for more information.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_release\">rcu_read_release</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#RCU\">RCU</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_read_unlock\">__rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_read_lock_bh - mark the beginning of a softirq-only RCU critical section</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is equivalent of rcu_read_lock(), but to be used when updates</span>", 
"<span class=\"comment\"> * are being done using call_rcu_bh(). Since call_rcu_bh() callbacks</span>", 
"<span class=\"comment\"> * consider completion of a softirq handler to be a quiescent state,</span>", 
"<span class=\"comment\"> * a process in RCU read-side critical section must be protected by</span>", 
"<span class=\"comment\"> * disabling softirqs. Read-side critical sections in interrupt context</span>", 
"<span class=\"comment\"> * can use just rcu_read_lock().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rcu_read_lock_bh\">rcu_read_lock_bh</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_read_lock_bh\">__rcu_read_lock_bh</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#RCU_BH\">RCU_BH</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_acquire_bh\">rcu_read_acquire_bh</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rcu_read_unlock_bh - marks the end of a softirq-only RCU critical section</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See rcu_read_lock_bh() for more information.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rcu_read_unlock_bh\">rcu_read_unlock_bh</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_release_bh\">rcu_read_release_bh</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#RCU_BH\">RCU_BH</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_read_unlock_bh\">__rcu_read_unlock_bh</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_read_lock_sched - mark the beginning of a RCU-classic critical section</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Should be used with either</span>", 
"<span class=\"comment\"> * - synchronize_sched()</span>", 
"<span class=\"comment\"> * or</span>", 
"<span class=\"comment\"> * - call_rcu_sched() and rcu_barrier_sched()</span>", 
"<span class=\"comment\"> * on the write-side to insure proper synchronization.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rcu_read_lock_sched\">rcu_read_lock_sched</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#RCU_SCHED\">RCU_SCHED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_acquire_sched\">rcu_read_acquire_sched</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Used by lockdep and tracing: cannot be traced, cannot call lockdep. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#notrace\">notrace</a> void <a class=\"id\" href=\"#rcu_read_lock_sched_notrace\">rcu_read_lock_sched_notrace</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#RCU_SCHED\">RCU_SCHED</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rcu_read_unlock_sched - marks the end of a RCU-classic critical section</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See rcu_read_lock_sched for more information.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rcu_read_unlock_sched\">rcu_read_unlock_sched</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_release_sched\">rcu_read_release_sched</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#RCU_SCHED\">RCU_SCHED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Used by lockdep and tracing: cannot be traced, cannot call lockdep. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#notrace\">notrace</a> void <a class=\"id\" href=\"#rcu_read_unlock_sched_notrace\">rcu_read_unlock_sched_notrace</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#RCU_SCHED\">RCU_SCHED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_dereference_raw - fetch an RCU-protected pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must be within some flavor of RCU read-side critical</span>", 
"<span class=\"comment\"> * section, or must be otherwise preventing the pointer from changing,</span>", 
"<span class=\"comment\"> * for example, by holding an appropriate lock.  This pointer may later</span>", 
"<span class=\"comment\"> * be safely dereferenced.  It is the caller's responsibility to have</span>", 
"<span class=\"comment\"> * done the right thing, as this primitive does no checking of any kind.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Inserts memory barriers on architectures that require them</span>", 
"<span class=\"comment\"> * (currently only the Alpha), and, more importantly, documents</span>", 
"<span class=\"comment\"> * exactly which pointers are protected by RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/>({ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#_________p1\">_________p1</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#p\">p</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_read_barrier_depends\">smp_read_barrier_depends</a>(); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#_________p1\">_________p1</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_dereference - fetch an RCU-protected pointer, checking for RCU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Makes rcu_dereference_check() do the dirty work.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#p\">p</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>())", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_dereference_bh - fetch an RCU-protected pointer, checking for RCU-bh</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Makes rcu_dereference_check() do the dirty work.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_bh\">rcu_dereference_bh</a>(<a class=\"id\" href=\"#p\">p</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rcu_read_lock_bh_held\">rcu_read_lock_bh_held</a>() || <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>())", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_dereference_sched - fetch RCU-protected pointer, checking for RCU-sched</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Makes rcu_dereference_check() do the dirty work.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_sched\">rcu_dereference_sched</a>(<a class=\"id\" href=\"#p\">p</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rcu_read_lock_sched_held\">rcu_read_lock_sched_held</a>())", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_assign_pointer - assign (publicize) a pointer to a newly</span>", 
"<span class=\"comment\"> * initialized structure that will be dereferenced by RCU read-side</span>", 
"<span class=\"comment\"> * critical sections.  Returns the value assigned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Inserts memory barriers on architectures that require them</span>", 
"<span class=\"comment\"> * (pretty much all of them other than x86), and also prevents</span>", 
"<span class=\"comment\"> * the compiler from reordering the code that initializes the</span>", 
"<span class=\"comment\"> * structure after the pointer assignment.  More importantly, this</span>", 
"<span class=\"comment\"> * call documents which pointers will be dereferenced by RCU read-side</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#v\">v</a>) \\", 
"<span class=\"ts\"/>({ \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#v\">v</a>) || \\", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#v\">v</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>)) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#p\">p</a>) = (<a class=\"id\" href=\"#v\">v</a>); \\", 
"<span class=\"ts\"/>})", 
"", 
"<span class=\"comment\">/* Infrastructure to implement the synchronize_() primitives. */</span>", 
"", 
"struct <a class=\"id\" href=\"#rcu_synchronize\">rcu_synchronize</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#completion\">completion</a>;", 
"};", 
"", 
"extern void <a class=\"id\" href=\"#wakeme_after_rcu\">wakeme_after_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a>  *<a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * call_rcu - Queue an RCU callback for invocation after a grace period.</span>", 
"<span class=\"comment\"> * @head: structure to be used for queueing the RCU updates.</span>", 
"<span class=\"comment\"> * @func: actual update function to be invoked after the grace period</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The update function will be invoked some time after a full grace</span>", 
"<span class=\"comment\"> * period elapses, in other words after all currently executing RCU</span>", 
"<span class=\"comment\"> * read-side critical sections have completed.  RCU read-side critical</span>", 
"<span class=\"comment\"> * sections are delimited by rcu_read_lock() and rcu_read_unlock(),</span>", 
"<span class=\"comment\"> * and may be nested.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#call_rcu\">call_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>));", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * call_rcu_bh - Queue an RCU for invocation after a quicker grace period.</span>", 
"<span class=\"comment\"> * @head: structure to be used for queueing the RCU updates.</span>", 
"<span class=\"comment\"> * @func: actual update function to be invoked after the grace period</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The update function will be invoked some time after a full grace</span>", 
"<span class=\"comment\"> * period elapses, in other words after all currently executing RCU</span>", 
"<span class=\"comment\"> * read-side critical sections have completed. call_rcu_bh() assumes</span>", 
"<span class=\"comment\"> * that the read-side critical sections end on completion of a softirq</span>", 
"<span class=\"comment\"> * handler. This means that read-side critical sections in process</span>", 
"<span class=\"comment\"> * context must not be interrupted by softirqs. This interface is to be</span>", 
"<span class=\"comment\"> * used when most of the read-side critical sections are in softirq context.</span>", 
"<span class=\"comment\"> * RCU read-side critical sections are delimited by :</span>", 
"<span class=\"comment\"> *  - rcu_read_lock() and  rcu_read_unlock(), if in interrupt context.</span>", 
"<span class=\"comment\"> *  OR</span>", 
"<span class=\"comment\"> *  - rcu_read_lock_bh() and rcu_read_unlock_bh(), if in process context.</span>", 
"<span class=\"comment\"> *  These may be nested.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#call_rcu_bh\">call_rcu_bh</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>));", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * debug_rcu_head_queue()/debug_rcu_head_unqueue() are used internally</span>", 
"<span class=\"comment\"> * by call_rcu() and rcu callback execution, and are therefore not part of the</span>", 
"<span class=\"comment\"> * RCU API. Leaving in rcupdate.h because they are used by all RCU flavors.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS_RCU_HEAD\">CONFIG_DEBUG_OBJECTS_RCU_HEAD</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATE_RCU_HEAD_READY\">STATE_RCU_HEAD_READY</a><span class=\"ts\"/>0", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATE_RCU_HEAD_QUEUED\">STATE_RCU_HEAD_QUEUED</a><span class=\"ts\"/>1", 
"", 
"extern struct <a class=\"id\" href=\"#debug_obj_descr\">debug_obj_descr</a> <a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_rcu_head_queue\">debug_rcu_head_queue</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_activate\">debug_object_activate</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_active_state\">debug_object_active_state</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#STATE_RCU_HEAD_READY\">STATE_RCU_HEAD_READY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#STATE_RCU_HEAD_QUEUED\">STATE_RCU_HEAD_QUEUED</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_rcu_head_unqueue\">debug_rcu_head_unqueue</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_active_state\">debug_object_active_state</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#STATE_RCU_HEAD_QUEUED\">STATE_RCU_HEAD_QUEUED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#STATE_RCU_HEAD_READY\">STATE_RCU_HEAD_READY</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_deactivate\">debug_object_deactivate</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"}", 
"#else<span class=\"ts\"/><span class=\"comment\">/* !CONFIG_DEBUG_OBJECTS_RCU_HEAD */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_rcu_head_queue\">debug_rcu_head_queue</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_rcu_head_unqueue\">debug_rcu_head_unqueue</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* #else !CONFIG_DEBUG_OBJECTS_RCU_HEAD */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_PROVE_RCU\">CONFIG_PROVE_RCU</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__do_rcu_dereference_check\">__do_rcu_dereference_check</a>(<a class=\"id\" href=\"#c\">c</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_PROVE_RCU */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__rcu_dereference_index_check\">__rcu_dereference_index_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#c\">c</a>) \\", 
"<span class=\"ts\"/>({ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#_________p1\">_________p1</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#p\">p</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__do_rcu_dereference_check\">__do_rcu_dereference_check</a>(<a class=\"id\" href=\"#c\">c</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_read_barrier_depends\">smp_read_barrier_depends</a>(); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#_________p1\">_________p1</a>); \\", 
"<span class=\"ts\"/>})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_dereference_index_check() - rcu_dereference for indices with debug checking</span>", 
"<span class=\"comment\"> * @p: The pointer to read, prior to dereferencing</span>", 
"<span class=\"comment\"> * @c: The conditions under which the dereference will take place</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similar to rcu_dereference_check(), but omits the sparse checking.</span>", 
"<span class=\"comment\"> * This allows rcu_dereference_index_check() to be used on integers,</span>", 
"<span class=\"comment\"> * which can then be used as array indices.  Attempting to use</span>", 
"<span class=\"comment\"> * rcu_dereference_check() on an integer will give compiler warnings</span>", 
"<span class=\"comment\"> * because the sparse address-space mechanism relies on dereferencing</span>", 
"<span class=\"comment\"> * the RCU-protected pointer.  Dereferencing integers is not something</span>", 
"<span class=\"comment\"> * that even gcc will put up with.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this function does not implicitly check for RCU read-side</span>", 
"<span class=\"comment\"> * critical sections.  If this function gains lots of uses, it might</span>", 
"<span class=\"comment\"> * make sense to provide versions for each flavor of RCU, but it does</span>", 
"<span class=\"comment\"> * not make sense as of early 2010.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_index_check\">rcu_dereference_index_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#c\">c</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_dereference_index_check\">__rcu_dereference_index_check</a>((<a class=\"id\" href=\"#p\">p</a>), (<a class=\"id\" href=\"#c\">c</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_RCUPDATE_H */</span>", 
];
xr_frag_insert('l/dc/c37265de65cc459744a0260dca85f2c3245763.xr', __xr_tmp);
