var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ram backed block device driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Nick Piggin</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Novell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Parts derived from drivers/block/rd.c, and drivers/block/loop.c, copyright</span>", 
"<span class=\"comment\"> * of their respective owners.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#major\">major</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp_lock\">smp_lock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#radix\">radix</a>-<a class=\"id\" href=\"#tree\">tree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* invalidate_bh_lrus() */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a><span class=\"ts\"/><span class=\"ts\"/>9", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_SECTORS_SHIFT\">PAGE_SECTORS_SHIFT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_SECTORS\">PAGE_SECTORS</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#PAGE_SECTORS_SHIFT\">PAGE_SECTORS_SHIFT</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each block ramdisk device has a radix_tree brd_pages of pages that stores</span>", 
"<span class=\"comment\"> * the pages containing the block device's contents. A brd page's -&gt;index is</span>", 
"<span class=\"comment\"> * its offset in PAGE_SIZE units. This is similar to, but in no way connected</span>", 
"<span class=\"comment\"> * with, the kernel's pagecache or buffer cache (which sit above our block</span>", 
"<span class=\"comment\"> * device).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#brd_device\">brd_device</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_number\">brd_number</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_refcnt\">brd_refcnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_offset\">brd_offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_sizelimit\">brd_sizelimit</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#brd_blocksize\">brd_blocksize</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a><span class=\"ts\"/>*<a class=\"id\" href=\"#brd_queue\">brd_queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#brd_disk\">brd_disk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#brd_list\">brd_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Backing store of pages and lock to protect it. This is the contents</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the block device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_lock\">brd_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a><span class=\"ts\"/><a class=\"id\" href=\"#brd_pages\">brd_pages</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Look up and return a brd's page for a given sector.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#brd_lookup_page\">brd_lookup_page</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The page lifetime is protected by the fact that we have opened the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device node -- brd pages will never be deleted under us, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't need any further locking or refcounting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is strictly true for the radix-tree nodes as well (ie. we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't actually need the rcu_read_lock()), however that is not a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * documented feature of the radix-tree API so it is better to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * safe here (we don't have total exclusion from radix tree updates</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here, only deletes).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sector\">sector</a> >> <a class=\"id\" href=\"#PAGE_SECTORS_SHIFT\">PAGE_SECTORS_SHIFT</a>; <span class=\"comment\">/* sector to page index */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_pages\">brd_pages</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a> && <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#idx\">idx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Look up and return a brd's page for a given sector.</span>", 
"<span class=\"comment\"> * If one does not exist, allocate an empty page, and insert that. Then</span>", 
"<span class=\"comment\"> * return it.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#brd_insert_page\">brd_insert_page</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#brd_lookup_page\">brd_lookup_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must use NOIO because we don't want to recurse back into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block or filesystem layers from page reclaim.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cannot support XIP and highmem, because our -&gt;direct_access</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * routine for XIP must return memory that is always addressable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If XIP was reworked to use pfns and kmap throughout, this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * restriction might be able to be lifted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> = <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>;", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_XIP\">CONFIG_BLK_DEV_XIP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> |= <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>(<a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_lock\">brd_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sector\">sector</a> >> <a class=\"id\" href=\"#PAGE_SECTORS_SHIFT\">PAGE_SECTORS_SHIFT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#radix_tree_insert\">radix_tree_insert</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_pages\">brd_pages</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_pages\">brd_pages</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_lock\">brd_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#brd_free_page\">brd_free_page</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_lock\">brd_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sector\">sector</a> >> <a class=\"id\" href=\"#PAGE_SECTORS_SHIFT\">PAGE_SECTORS_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_pages\">brd_pages</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_lock\">brd_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#brd_zero_page\">brd_zero_page</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#brd_lookup_page\">brd_lookup_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_highpage\">clear_highpage</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free all backing store pages and radix tree. This must only be called when</span>", 
"<span class=\"comment\"> * there are no other users of the device.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FREE_BATCH\">FREE_BATCH</a> 16", 
"static void <a class=\"id\" href=\"#brd_free_pages\">brd_free_pages</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#FREE_BATCH\">FREE_BATCH</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#radix_tree_gang_lookup\">radix_tree_gang_lookup</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_pages\">brd_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void **)<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#FREE_BATCH\">FREE_BATCH</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_pages\">brd_pages</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ret\">ret</a> || <a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This assumes radix_tree_gang_lookup always returns as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * many pages as possible. If the radix-tree code changes,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so will this have to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> == <a class=\"id\" href=\"#FREE_BATCH\">FREE_BATCH</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * copy_to_brd_setup must be called before copy_to_brd. It may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#copy_to_brd_setup\">copy_to_brd_setup</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#sector\">sector</a> &amp; (<a class=\"id\" href=\"#PAGE_SECTORS\">PAGE_SECTORS</a>-1)) << <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#copy\">copy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#brd_insert_page\">brd_insert_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &lt; <a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> += <a class=\"id\" href=\"#copy\">copy</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#brd_insert_page\">brd_insert_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#discard_from_brd\">discard_from_brd</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> >= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't want to actually discard pages here because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * re-allocating the pages can result in writeback</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * deadlocks under heavy load.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_free_page\">brd_free_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_zero_page\">brd_zero_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy n bytes from src to the brd starting at sector. Does not sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#copy_to_brd\">copy_to_brd</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>, const void *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#dst\">dst</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#sector\">sector</a> &amp; (<a class=\"id\" href=\"#PAGE_SECTORS\">PAGE_SECTORS</a>-1)) << <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#copy\">copy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#brd_lookup_page\">brd_lookup_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &lt; <a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> += <a class=\"id\" href=\"#copy\">copy</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#n\">n</a> - <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#brd_lookup_page\">brd_lookup_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy n bytes to dst from the brd starting at sector. Does not sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#copy_from_brd\">copy_from_brd</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#sector\">sector</a> &amp; (<a class=\"id\" href=\"#PAGE_SECTORS\">PAGE_SECTORS</a>-1)) << <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#copy\">copy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#brd_lookup_page\">brd_lookup_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dst\">dst</a>, 0, <a class=\"id\" href=\"#copy\">copy</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &lt; <a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> += <a class=\"id\" href=\"#copy\">copy</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#n\">n</a> - <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#brd_lookup_page\">brd_lookup_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dst\">dst</a>, 0, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Process a single bvec of a bio.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#brd_do_bvec\">brd_do_bvec</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#off\">off</a>, int <a class=\"id\" href=\"#rw\">rw</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> != <a class=\"id\" href=\"#READ\">READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#copy_to_brd_setup\">copy_to_brd_setup</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READ\">READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_from_brd\">copy_from_brd</a>(<a class=\"id\" href=\"#mem\">mem</a> + <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_to_brd\">copy_to_brd</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#mem\">mem</a> + <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#brd_make_request\">brd_make_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rw\">rw</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sector\">sector</a> + (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>) &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_capacity\">get_capacity</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#discard_from_brd\">discard_from_brd</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#bio_rw\">bio_rw</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READA\">READA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#READ\">READ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_for_each_segment\">bio_for_each_segment</a>(<a class=\"id\" href=\"#bvec\">bvec</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#brd_do_bvec\">brd_do_bvec</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a>, <a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> += <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_endio\">bio_endio</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_XIP\">CONFIG_BLK_DEV_XIP</a>", 
"static int <a class=\"id\" href=\"#brd_direct_access\">brd_direct_access</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void **<a class=\"id\" href=\"#kaddr\">kaddr</a>, unsigned long *<a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#brd\">brd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sector\">sector</a> &amp; (<a class=\"id\" href=\"#PAGE_SECTORS\">PAGE_SECTORS</a>-1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sector\">sector</a> + <a class=\"id\" href=\"#PAGE_SECTORS\">PAGE_SECTORS</a> &gt; <a class=\"id\" href=\"#get_capacity\">get_capacity</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#brd_insert_page\">brd_insert_page</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#kaddr\">kaddr</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#brd_ioctl\">brd_ioctl</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> != <a class=\"id\" href=\"#BLKFLSBUF\">BLKFLSBUF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ram device BLKFLSBUF has special semantics, we want to actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * release and destroy the ramdisk data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_openers\">bd_openers</a> <= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Invalidate the cache first, so it isn't written</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * back to the device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Another thread might instantiate more buffercache here,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but there is not much we can do to close that race.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_bh_lrus\">invalidate_bh_lrus</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_free_pages\">brd_free_pages</a>(<a class=\"id\" href=\"#brd\">brd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#block_device_operations\">block_device_operations</a> <a class=\"id\" href=\"#brd_fops\">brd_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ioctl\">ioctl</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_ioctl\">brd_ioctl</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_XIP\">CONFIG_BLK_DEV_XIP</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#direct_access\">direct_access</a> =<span class=\"ts\"/><a class=\"id\" href=\"#brd_direct_access\">brd_direct_access</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * And now the modules code and kernel interface.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rd_nr\">rd_nr</a>;", 
"int <a class=\"id\" href=\"#rd_size\">rd_size</a> = <a class=\"id\" href=\"#CONFIG_BLK_DEV_RAM_SIZE\">CONFIG_BLK_DEV_RAM_SIZE</a>;", 
"static int <a class=\"id\" href=\"#max_part\">max_part</a>;", 
"static int <a class=\"id\" href=\"#part_shift\">part_shift</a>;", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#rd_nr\">rd_nr</a>, int, 0);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#rd_nr\">rd_nr</a>, \"Maximum number of brd devices\");", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#rd_size\">rd_size</a>, int, 0);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#rd_size\">rd_size</a>, \"Size of each RAM disk in kbytes.\");", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#max_part\">max_part</a>, int, 0);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#max_part\">max_part</a>, \"Maximum number of partitions per RAM disk\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"<a class=\"id\" href=\"#MODULE_ALIAS_BLOCKDEV_MAJOR\">MODULE_ALIAS_BLOCKDEV_MAJOR</a>(<a class=\"id\" href=\"#RAMDISK_MAJOR\">RAMDISK_MAJOR</a>);", 
"<a class=\"id\" href=\"#MODULE_ALIAS\">MODULE_ALIAS</a>(\"rd\");", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#MODULE\">MODULE</a>", 
"<span class=\"comment\">/* Legacy boot options - nonmodular */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ramdisk_size\">ramdisk_size</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rd_size\">rd_size</a> = <a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"ramdisk_size=\", <a class=\"id\" href=\"#ramdisk_size\">ramdisk_size</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The device scheme is derived from loop.c. Keep them in synch where possible</span>", 
"<span class=\"comment\"> * (should share code eventually).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#brd_devices\">brd_devices</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#brd_devices_mutex\">brd_devices_mutex</a>);", 
"", 
"static struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd_alloc\">brd_alloc</a>(int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd\">brd</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#brd\">brd</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#brd\">brd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_number\">brd_number</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_lock\">brd_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_RADIX_TREE\">INIT_RADIX_TREE</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_pages\">brd_pages</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a> = <a class=\"id\" href=\"#blk_alloc_queue\">blk_alloc_queue</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dev\">out_free_dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_make_request\">blk_queue_make_request</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>, <a class=\"id\" href=\"#brd_make_request\">brd_make_request</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_ordered\">blk_queue_ordered</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>, <a class=\"id\" href=\"#QUEUE_ORDERED_TAG\">QUEUE_ORDERED_TAG</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_hw_sectors\">blk_queue_max_hw_sectors</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>, 1024);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_bounce_limit\">blk_queue_bounce_limit</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>, <a class=\"id\" href=\"#BLK_BOUNCE_ANY\">BLK_BOUNCE_ANY</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#discard_granularity\">discard_granularity</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a> = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#discard_zeroes_data\">discard_zeroes_data</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set_unlocked\">queue_flag_set_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_DISCARD\">QUEUE_FLAG_DISCARD</a>, <a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_disk\">brd_disk</a> = <a class=\"id\" href=\"#alloc_disk\">alloc_disk</a>(1 << <a class=\"id\" href=\"#part_shift\">part_shift</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#disk\">disk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_queue\">out_free_queue</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#major\">major</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#RAMDISK_MAJOR\">RAMDISK_MAJOR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#first_minor\">first_minor</a><span class=\"ts\"/>= <a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#part_shift\">part_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#fops\">fops</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#brd_fops\">brd_fops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a><span class=\"ts\"/>= <a class=\"id\" href=\"#brd\">brd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GENHD_FL_SUPPRESS_PARTITION_INFO\">GENHD_FL_SUPPRESS_PARTITION_INFO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>, \"ram%d\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_capacity\">set_capacity</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#rd_size\">rd_size</a> * 2);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#brd\">brd</a>;", 
"", 
"<a class=\"id\" href=\"#out_free_queue\">out_free_queue</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_cleanup_queue\">blk_cleanup_queue</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>);", 
"<a class=\"id\" href=\"#out_free_dev\">out_free_dev</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#brd\">brd</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#brd_free\">brd_free</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_disk\">put_disk</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_disk\">brd_disk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_cleanup_queue\">blk_cleanup_queue</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_queue\">brd_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd_free_pages\">brd_free_pages</a>(<a class=\"id\" href=\"#brd\">brd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#brd\">brd</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd_init_one\">brd_init_one</a>(int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#brd\">brd</a>, &amp;<a class=\"id\" href=\"#brd_devices\">brd_devices</a>, <a class=\"id\" href=\"#brd_list\">brd_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_number\">brd_number</a> == <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd\">brd</a> = <a class=\"id\" href=\"#brd_alloc\">brd_alloc</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#brd\">brd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_disk\">add_disk</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_disk\">brd_disk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_list\">brd_list</a>, &amp;<a class=\"id\" href=\"#brd_devices\">brd_devices</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#brd\">brd</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#brd_del_one\">brd_del_one</a>(struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_list\">brd_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_gendisk\">del_gendisk</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_disk\">brd_disk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd_free\">brd_free</a>(<a class=\"id\" href=\"#brd\">brd</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#brd_probe\">brd_probe</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, int *<a class=\"id\" href=\"#part\">part</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#brd_devices_mutex\">brd_devices_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brd\">brd</a> = <a class=\"id\" href=\"#brd_init_one\">brd_init_one</a>(<a class=\"id\" href=\"#dev\">dev</a> &amp; <a class=\"id\" href=\"#MINORMASK\">MINORMASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#brd\">brd</a> ? <a class=\"id\" href=\"#get_disk\">get_disk</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_disk\">brd_disk</a>) : <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#brd_devices_mutex\">brd_devices_mutex</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#part\">part</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#brd_init\">brd_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#range\">range</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * brd module now has a feature to instantiate underlying device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structure on-demand, provided that there is an access dev node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * However, this will not work well with user space tool that doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * know about such \"feature\".  In order to not break any existing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tool, we do the following:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (1) if rd_nr is specified, create that many upfront, and this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     also becomes a hard limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (2) if rd_nr is not specified, create 1 rd device on module</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     load, user can further extend brd device by create dev node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     themselves and have kernel automatically instantiate actual</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     device on-demand.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_shift\">part_shift</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_part\">max_part</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_shift\">part_shift</a> = <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#max_part\">max_part</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rd_nr\">rd_nr</a> &gt; 1UL << (<a class=\"id\" href=\"#MINORBITS\">MINORBITS</a> - <a class=\"id\" href=\"#part_shift\">part_shift</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rd_nr\">rd_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#rd_nr\">rd_nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#range\">range</a> = <a class=\"id\" href=\"#rd_nr\">rd_nr</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#CONFIG_BLK_DEV_RAM_COUNT\">CONFIG_BLK_DEV_RAM_COUNT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#range\">range</a> = 1UL << (<a class=\"id\" href=\"#MINORBITS\">MINORBITS</a> - <a class=\"id\" href=\"#part_shift\">part_shift</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_blkdev\">register_blkdev</a>(<a class=\"id\" href=\"#RAMDISK_MAJOR\">RAMDISK_MAJOR</a>, \"ramdisk\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd\">brd</a> = <a class=\"id\" href=\"#brd_alloc\">brd_alloc</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#brd\">brd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_list\">brd_list</a>, &amp;<a class=\"id\" href=\"#brd_devices\">brd_devices</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* point of no return */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#brd\">brd</a>, &amp;<a class=\"id\" href=\"#brd_devices\">brd_devices</a>, <a class=\"id\" href=\"#brd_list\">brd_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_disk\">add_disk</a>(<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_disk\">brd_disk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_register_region\">blk_register_region</a>(<a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#RAMDISK_MAJOR\">RAMDISK_MAJOR</a>, 0), <a class=\"id\" href=\"#range\">range</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, <a class=\"id\" href=\"#brd_probe\">brd_probe</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"brd: module loaded\\n\");", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#brd_devices\">brd_devices</a>, <a class=\"id\" href=\"#brd_list\">brd_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#brd\">brd</a>-><a class=\"id\" href=\"#brd_list\">brd_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_free\">brd_free</a>(<a class=\"id\" href=\"#brd\">brd</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>(<a class=\"id\" href=\"#RAMDISK_MAJOR\">RAMDISK_MAJOR</a>, \"ramdisk\");", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#brd_exit\">brd_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#range\">range</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#brd_device\">brd_device</a> *<a class=\"id\" href=\"#brd\">brd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#range\">range</a> = <a class=\"id\" href=\"#rd_nr\">rd_nr</a> ? <a class=\"id\" href=\"#rd_nr\">rd_nr</a> :  1UL << (<a class=\"id\" href=\"#MINORBITS\">MINORBITS</a> - <a class=\"id\" href=\"#part_shift\">part_shift</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#brd\">brd</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#brd_devices\">brd_devices</a>, <a class=\"id\" href=\"#brd_list\">brd_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brd_del_one\">brd_del_one</a>(<a class=\"id\" href=\"#brd\">brd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_unregister_region\">blk_unregister_region</a>(<a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#RAMDISK_MAJOR\">RAMDISK_MAJOR</a>, 0), <a class=\"id\" href=\"#range\">range</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>(<a class=\"id\" href=\"#RAMDISK_MAJOR\">RAMDISK_MAJOR</a>, \"ramdisk\");", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#brd_init\">brd_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#brd_exit\">brd_exit</a>);", 
"", 
];
xr_frag_insert('l/dd/2993b3f0714ba9e69f2e52370d5f852dae9e52.xr', __xr_tmp);
