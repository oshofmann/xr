var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_SUSPEND_H\">_LINUX_SUSPEND_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_SUSPEND_H\">_LINUX_SUSPEND_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_VT\">CONFIG_VT</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_VT_CONSOLE\">CONFIG_VT_CONSOLE</a>)", 
"extern void <a class=\"id\" href=\"#pm_set_vt_switch\">pm_set_vt_switch</a>(int);", 
"extern int <a class=\"id\" href=\"#pm_prepare_console\">pm_prepare_console</a>(void);", 
"extern void <a class=\"id\" href=\"#pm_restore_console\">pm_restore_console</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pm_set_vt_switch\">pm_set_vt_switch</a>(int <a class=\"id\" href=\"#do_switch\">do_switch</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pm_prepare_console\">pm_prepare_console</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pm_restore_console\">pm_restore_console</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"typedef int <a class=\"id\" href=\"#__bitwise\">__bitwise</a> <a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_SUSPEND_ON\">PM_SUSPEND_ON</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a>) 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_SUSPEND_STANDBY\">PM_SUSPEND_STANDBY</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a>) 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_SUSPEND_MEM\">PM_SUSPEND_MEM</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a>) 3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_SUSPEND_MAX\">PM_SUSPEND_MAX</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a>) 4)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct platform_suspend_ops - Callbacks for managing platform dependent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>system sleep states.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @valid: Callback to determine if given system sleep state is supported by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the platform.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Valid (ie. supported) states are advertised in /sys/power/state.  Note</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that it still may be impossible to enter given system sleep state if the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>conditions aren't right.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>There is the %suspend_valid_only_mem function available that can be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>assigned to this if the platform only supports mem sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @begin: Initialise a transition to given system sleep state.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@begin() is executed right prior to suspending devices.  The information</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>conveyed to the platform code by @begin() should be disregarded by it as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>soon as @end() is executed.  If @begin() fails (ie. returns nonzero),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prepare(), @enter() and @finish() will not be called by the PM core.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This callback is optional.  However, if it is implemented, the argument</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>passed to @enter() is redundant and should be ignored.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @prepare: Prepare the platform for entering the system sleep state indicated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by @begin().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prepare() is called right after devices have been suspended (ie. the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appropriate .suspend() method has been executed for each device) and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>before device drivers' late suspend callbacks are executed.  It returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success or a negative error code otherwise, in which case the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>system cannot enter the desired sleep state (@prepare_late(), @enter(),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and @wake() will not be called in that case).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @prepare_late: Finish preparing the platform for entering the system sleep</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>state indicated by @begin().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prepare_late is called before disabling nonboot CPUs and after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device drivers' late suspend callbacks have been executed.  It returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success or a negative error code otherwise, in which case the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>system cannot enter the desired sleep state (@enter() will not be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>executed).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @enter: Enter the system sleep state indicated by @begin() or represented by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the argument if @begin() is not implemented.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This callback is mandatory.  It returns 0 on success or a negative</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>error code otherwise, in which case the system cannot enter the desired</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sleep state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @wake: Called when the system has just left a sleep state, right after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the nonboot CPUs have been enabled and before device drivers' early</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>resume callbacks are executed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This callback is optional, but should be implemented by the platforms</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that implement @prepare_late().  If implemented, it is always called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>after @prepare_late and @enter(), even if one of them fails.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @finish: Finish wake-up of the platform.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@finish is called right prior to calling device drivers' regular suspend</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>callbacks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This callback is optional, but should be implemented by the platforms</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that implement @prepare().  If implemented, it is always called after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@enter() and @wake(), even if any of them fails.  It is executed after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a failing @prepare.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @end: Called by the PM core right after resuming devices, to indicate to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the platform that the system has returned to the working state or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the transition to the sleep state has been aborted.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This callback is optional, but should be implemented by the platforms</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that implement @begin().  Accordingly, platforms implementing @begin()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should also provide a @end() which cleans up transitions aborted before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@enter().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @recover: Recover the platform from a suspend failure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called by the PM core if the suspending of devices fails.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This callback is optional and should only be implemented by platforms</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>which require special recovery actions in that situation.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#platform_suspend_ops\">platform_suspend_ops</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#valid\">valid</a>)(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#begin\">begin</a>)(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#prepare\">prepare</a>)(void);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#prepare_late\">prepare_late</a>)(void);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#enter\">enter</a>)(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#wake\">wake</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#finish\">finish</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#end\">end</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#recover\">recover</a>)(void);", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SUSPEND\">CONFIG_SUSPEND</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * suspend_set_ops - set platform dependent suspend operations</span>", 
"<span class=\"comment\"> * @ops: The new suspend operations to set.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#suspend_set_ops\">suspend_set_ops</a>(struct <a class=\"id\" href=\"#platform_suspend_ops\">platform_suspend_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>);", 
"extern int <a class=\"id\" href=\"#suspend_valid_only_mem\">suspend_valid_only_mem</a>(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * arch_suspend_disable_irqs - disable IRQs for suspend</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Disables IRQs (in the default case). This is a weak symbol in the common</span>", 
"<span class=\"comment\"> * code and thus allows architectures to override it if more needs to be</span>", 
"<span class=\"comment\"> * done. Not called for suspend to disk.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#arch_suspend_disable_irqs\">arch_suspend_disable_irqs</a>(void);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * arch_suspend_enable_irqs - enable IRQs after suspend</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Enables IRQs (in the default case). This is a weak symbol in the common</span>", 
"<span class=\"comment\"> * code and thus allows architectures to override it if more needs to be</span>", 
"<span class=\"comment\"> * done. Not called for suspend to disk.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#arch_suspend_enable_irqs\">arch_suspend_enable_irqs</a>(void);", 
"", 
"extern int <a class=\"id\" href=\"#pm_suspend\">pm_suspend</a>(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"#else <span class=\"comment\">/* !CONFIG_SUSPEND */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#suspend_valid_only_mem\">suspend_valid_only_mem</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#suspend_set_ops\">suspend_set_ops</a>(struct <a class=\"id\" href=\"#platform_suspend_ops\">platform_suspend_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pm_suspend\">pm_suspend</a>(<a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#state\">state</a>) { return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>; }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_SUSPEND */</span>", 
"", 
"<span class=\"comment\">/* struct pbe is used for creating lists of pages that should be restored</span>", 
"<span class=\"comment\"> * atomically during the resume from disk, because the page frames they have</span>", 
"<span class=\"comment\"> * occupied before the suspend are in use.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pbe\">pbe</a> {", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#address\">address</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* address of the copy */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#orig_address\">orig_address</a>;<span class=\"ts\"/><span class=\"comment\">/* original address of a page */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pbe\">pbe</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"};", 
"", 
"<span class=\"comment\">/* mm/page_alloc.c */</span>", 
"extern void <a class=\"id\" href=\"#mark_free_pages\">mark_free_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct platform_hibernation_ops - hibernation platform support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The methods in this structure allow a platform to carry out special</span>", 
"<span class=\"comment\"> * operations required by it during a hibernation transition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All the methods below, except for @recover(), must be implemented.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @begin: Tell the platform driver that we're starting hibernation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called right after shrinking memory and before freezing devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @end: Called by the PM core right after resuming devices, to indicate to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the platform that the system has returned to the working state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @pre_snapshot: Prepare the platform for creating the hibernation image.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called right after devices have been frozen and before the nonboot</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CPUs are disabled (runs with IRQs on).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @finish: Restore the previous state of the platform after the hibernation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>image has been created *or* put the platform into the normal operation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mode after the hibernation (the same method is executed in both cases).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called right after the nonboot CPUs have been enabled and before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>thawing devices (runs with IRQs on).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @prepare: Prepare the platform for entering the low power state.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called right after the hibernation image has been saved and before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>devices are prepared for entering the low power state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @enter: Put the system into the low power state after the hibernation image</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>has been saved to disk.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called after the nonboot CPUs have been disabled and all of the low</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>level devices have been shut down (runs with IRQs off).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @leave: Perform the first stage of the cleanup after the system sleep state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>indicated by @set_target() has been left.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called right after the control has been passed from the boot kernel to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the image kernel, before the nonboot CPUs are enabled and before devices</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are resumed.  Executed with interrupts disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @pre_restore: Prepare system for the restoration from a hibernation image.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called right after devices have been frozen and before the nonboot</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CPUs are disabled (runs with IRQs on).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @restore_cleanup: Clean up after a failing image restoration.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called right after the nonboot CPUs have been enabled and before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>thawing devices (runs with IRQs on).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @recover: Recover the platform from a failure to suspend devices.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called by the PM core if the suspending of devices during hibernation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fails.  This callback is optional and should only be implemented by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platforms which require special recovery actions in that situation.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#platform_hibernation_ops\">platform_hibernation_ops</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#begin\">begin</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#end\">end</a>)(void);", 
];
xr_frag_insert('l/dd/2ffea0d48fbf2eb73098e9cbaa99215b13f408.xr', __xr_tmp);
