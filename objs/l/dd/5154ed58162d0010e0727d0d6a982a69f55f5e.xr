var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#mces_seen\">mces_seen</a>, <a class=\"id\" href=\"#cpu\">cpu</a>), 0, sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#global_nwo\">global_nwo</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start of Monarch synchronization. This waits until all CPUs have</span>", 
"<span class=\"comment\"> * entered the exception handler and then determines if any of them</span>", 
"<span class=\"comment\"> * saw a fatal event that requires panic. Then it executes them</span>", 
"<span class=\"comment\"> * in the entry order.</span>", 
"<span class=\"comment\"> * TBD double check parallel CPU hotunplug</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mce_start\">mce_start</a>(int *<a class=\"id\" href=\"#no_way_out\">no_way_out</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpus\">cpus</a> = <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#timeout\">timeout</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#monarch_timeout\">monarch_timeout</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(*<a class=\"id\" href=\"#no_way_out\">no_way_out</a>, &amp;<a class=\"id\" href=\"#global_nwo\">global_nwo</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * global_nwo should be updated before mce_callin</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#mce_callin\">mce_callin</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for everyone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mce_callin\">mce_callin</a>) != <a class=\"id\" href=\"#cpus\">cpus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_timed_out\">mce_timed_out</a>(&amp;<a class=\"id\" href=\"#timeout\">timeout</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#global_nwo\">global_nwo</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#SPINUNIT\">SPINUNIT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mce_callin should be read before global_nwo</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Monarch: Starts executing now, the others wait.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#mce_executing\">mce_executing</a>, 1);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Subject: Now start the scanning loop one by one in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the original callin order.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This way when there are any shared banks it will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only seen by one CPU before cleared, avoiding duplicates.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mce_executing\">mce_executing</a>) &lt; <a class=\"id\" href=\"#order\">order</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_timed_out\">mce_timed_out</a>(&amp;<a class=\"id\" href=\"#timeout\">timeout</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#global_nwo\">global_nwo</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#SPINUNIT\">SPINUNIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cache the global no_way_out state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#no_way_out\">no_way_out</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#global_nwo\">global_nwo</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#order\">order</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Synchronize between CPUs after main scanning loop.</span>", 
"<span class=\"comment\"> * This invokes the bulk of the Monarch processing.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mce_end\">mce_end</a>(int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#timeout\">timeout</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#monarch_timeout\">monarch_timeout</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset\">reset</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset\">reset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow others to run.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mce_executing\">mce_executing</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CHECKME: Can this race with a parallel hotplug? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpus\">cpus</a> = <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Monarch: Wait for everyone to go through their scanning</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * loops.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mce_executing\">mce_executing</a>) <= <a class=\"id\" href=\"#cpus\">cpus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_timed_out\">mce_timed_out</a>(&amp;<a class=\"id\" href=\"#timeout\">timeout</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset\">reset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#SPINUNIT\">SPINUNIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_reign\">mce_reign</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Subject: Wait for Monarch to finish.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mce_executing\">mce_executing</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_timed_out\">mce_timed_out</a>(&amp;<a class=\"id\" href=\"#timeout\">timeout</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset\">reset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#SPINUNIT\">SPINUNIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't reset anything. That's done by the Monarch.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset all global state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#reset\">reset</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#global_nwo\">global_nwo</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#mce_callin\">mce_callin</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Let others run again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#mce_executing\">mce_executing</a>, 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if the address reported by the CPU is in a format we can parse.</span>", 
"<span class=\"comment\"> * It would be possible to add code for most other cases, but all would</span>", 
"<span class=\"comment\"> * be somewhat complicated (e.g. segment offset would require an instruction</span>", 
"<span class=\"comment\"> * parser). So only support physical addresses upto page granuality for now.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mce_usable_address\">mce_usable_address</a>(struct <a class=\"id\" href=\"#mce\">mce</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#MCI_STATUS_MISCV\">MCI_STATUS_MISCV</a>) || !(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#MCI_STATUS_ADDRV\">MCI_STATUS_ADDRV</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#misc\">misc</a> &amp; 0x3f) &gt; <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#misc\">misc</a> >> 6) &amp; 7) != <a class=\"id\" href=\"#MCM_ADDR_PHYS\">MCM_ADDR_PHYS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mce_clear_state\">mce_clear_state</a>(unsigned long *<a class=\"id\" href=\"#toclear\">toclear</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#banks\">banks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#toclear\">toclear</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_wrmsrl\">mce_wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_STATUS\">MSR_IA32_MCx_STATUS</a>(<a class=\"id\" href=\"#i\">i</a>), 0);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The actual machine check handler. This only handles real</span>", 
"<span class=\"comment\"> * exceptions when something got corrupted coming in through int 18.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is executed in NMI context not subject to normal locking rules. This</span>", 
"<span class=\"comment\"> * implies that most kernel services cannot be safely used. Don't even</span>", 
"<span class=\"comment\"> * think about putting a printk in there!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On Intel systems this is entered on all CPUs in parallel through</span>", 
"<span class=\"comment\"> * MCE broadcast. However some CPUs might be broken beyond repair,</span>", 
"<span class=\"comment\"> * so be always careful when synchronizing with others.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#do_machine_check\">do_machine_check</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mce\">mce</a> <a class=\"id\" href=\"#m\">m</a>, *<a class=\"id\" href=\"#final\">final</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#worst\">worst</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#severity\">severity</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Establish sequential order between the CPUs entering the machine</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check handler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If no_way_out gets set, there is no safe way to recover from this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MCE.  If tolerant is cranked up, we'll try anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#no_way_out\">no_way_out</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If kill_it gets set, there might be a way to recover from this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#kill_it\">kill_it</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#toclear\">toclear</a>, <a class=\"id\" href=\"#MAX_NR_BANKS\">MAX_NR_BANKS</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#msg\">msg</a> = \"Unknown\";", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mce_entry\">mce_entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_inc\">percpu_inc</a>(<a class=\"id\" href=\"#mce_exception_count\">mce_exception_count</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_NMI\">DIE_NMI</a>, \"machine check\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   18, <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>) == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#banks\">banks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_setup\">mce_setup</a>(&amp;<a class=\"id\" href=\"#m\">m</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#mcgstatus\">mcgstatus</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCG_STATUS\">MSR_IA32_MCG_STATUS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mces_seen\">mces_seen</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#no_way_out\">no_way_out</a> = <a class=\"id\" href=\"#mce_no_way_out\">mce_no_way_out</a>(&amp;<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#msg\">msg</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When no restart IP must always kill or panic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#mcgstatus\">mcgstatus</a> &amp; <a class=\"id\" href=\"#MCG_STATUS_RIPV\">MCG_STATUS_RIPV</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_it\">kill_it</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Go through all the banks in exclusion of the other CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This way we don't report duplicated events on shared banks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because the first one to see it will clear it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#mce_start\">mce_start</a>(&amp;<a class=\"id\" href=\"#no_way_out\">no_way_out</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#banks\">banks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#toclear\">toclear</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_banks\">mce_banks</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ctl\">ctl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#misc\">misc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#addr\">addr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#bank\">bank</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_STATUS\">MSR_IA32_MCx_STATUS</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#MCI_STATUS_VAL\">MCI_STATUS_VAL</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Non uncorrected or non signaled errors are handled by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * machine_check_poll. Leave them alone, unless this panics.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> &amp; (<a class=\"id\" href=\"#mce_ser\">mce_ser</a> ? <a class=\"id\" href=\"#MCI_STATUS_S\">MCI_STATUS_S</a> : <a class=\"id\" href=\"#MCI_STATUS_UC\">MCI_STATUS_UC</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#no_way_out\">no_way_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Set taint even when machine check was not enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#TAINT_MACHINE_CHECK\">TAINT_MACHINE_CHECK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#severity\">severity</a> = <a class=\"id\" href=\"#mce_severity\">mce_severity</a>(&amp;<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#tolerant\">tolerant</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When machine check was for corrected handler don't touch,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unless we're panicing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#MCE_KEEP_SEVERITY\">MCE_KEEP_SEVERITY</a> && !<a class=\"id\" href=\"#no_way_out\">no_way_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#toclear\">toclear</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#MCE_NO_SEVERITY\">MCE_NO_SEVERITY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Machine check event was not enabled. Clear, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ignore.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Kill on action required.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#MCE_AR_SEVERITY\">MCE_AR_SEVERITY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_it\">kill_it</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#MCI_STATUS_MISCV\">MCI_STATUS_MISCV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#misc\">misc</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_MISC\">MSR_IA32_MCx_MISC</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#MCI_STATUS_ADDRV\">MCI_STATUS_ADDRV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_ADDR\">MSR_IA32_MCx_ADDR</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Action optional error. Queue address for later processing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When the ring overflows we just ignore the AO error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * RED-PEN add some logging mechanism when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * usable_address or mce_add_ring fails.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * RED-PEN don't ignore overflow for tolerant == 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#MCE_AO_SEVERITY\">MCE_AO_SEVERITY</a> && <a class=\"id\" href=\"#mce_usable_address\">mce_usable_address</a>(&amp;<a class=\"id\" href=\"#m\">m</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_ring_add\">mce_ring_add</a>(<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_get_rip\">mce_get_rip</a>(&amp;<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_log\">mce_log</a>(&amp;<a class=\"id\" href=\"#m\">m</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#severity\">severity</a> &gt; <a class=\"id\" href=\"#worst\">worst</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worst\">worst</a> = <a class=\"id\" href=\"#severity\">severity</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#no_way_out\">no_way_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_clear_state\">mce_clear_state</a>(<a class=\"id\" href=\"#toclear\">toclear</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do most of the synchronization with other CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When there's any problem use only local no_way_out state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_end\">mce_end</a>(<a class=\"id\" href=\"#order\">order</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#no_way_out\">no_way_out</a> = <a class=\"id\" href=\"#worst\">worst</a> >= <a class=\"id\" href=\"#MCE_PANIC_SEVERITY\">MCE_PANIC_SEVERITY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have decided that we just CAN'T continue, and the user</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has not set tolerant to an insane level, give up and die.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is mainly used in the case when the system doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * support MCE broadcasting or it has been disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#no_way_out\">no_way_out</a> && <a class=\"id\" href=\"#tolerant\">tolerant</a> &lt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_panic\">mce_panic</a>(\"Fatal machine check on current CPU\", <a class=\"id\" href=\"#final\">final</a>, <a class=\"id\" href=\"#msg\">msg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the error seems to be unrecoverable, something should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * done.  Try to kill as little as possible.  If we can kill just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one task, do that.  If the user has set the tolerance very</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * high, don't try to do anything at all.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kill_it\">kill_it</a> && <a class=\"id\" href=\"#tolerant\">tolerant</a> &lt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* notify userspace ASAP */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#TIF_MCE_NOTIFY\">TIF_MCE_NOTIFY</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#worst\">worst</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_report_event\">mce_report_event</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_wrmsrl\">mce_wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCG_STATUS\">MSR_IA32_MCG_STATUS</a>, 0);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#mce_entry\">mce_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_core\">sync_core</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#do_machine_check\">do_machine_check</a>);", 
"", 
"<span class=\"comment\">/* dummy to break dependency. actual code is in mm/memory-failure.c */</span>", 
"void <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#memory_failure\">memory_failure</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Action optional memory failure at %lx ignored\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called after mce notification in process context. This code</span>", 
"<span class=\"comment\"> * is allowed to sleep. Call the high level VM handler to process</span>", 
"<span class=\"comment\"> * any corrupted pages.</span>", 
"<span class=\"comment\"> * Assume that the work queue code only calls this one at a time</span>", 
"<span class=\"comment\"> * per CPU.</span>", 
"<span class=\"comment\"> * Note we don't disable preemption, so this code might run on the wrong</span>", 
"<span class=\"comment\"> * CPU. In this case the event is picked up by the scheduled work queue.</span>", 
"<span class=\"comment\"> * This is merely a fast path to expedite processing in some common</span>", 
"<span class=\"comment\"> * cases.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mce_notify_process\">mce_notify_process</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_notify_irq\">mce_notify_irq</a>();", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#mce_ring_get\">mce_ring_get</a>(&amp;<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_failure\">memory_failure</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#MCE_VECTOR\">MCE_VECTOR</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mce_process_work\">mce_process_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_notify_process\">mce_notify_process</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_MCE_INTEL\">CONFIG_X86_MCE_INTEL</a>", 
"<span class=\"comment\">/***</span>", 
"<span class=\"comment\"> * mce_log_therm_throt_event - Logs the thermal throttling event to mcelog</span>", 
"<span class=\"comment\"> * @cpu: The CPU on which the event occurred.</span>", 
"<span class=\"comment\"> * @status: Event status information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be called by the thermal interrupt after the</span>", 
"<span class=\"comment\"> * event has been processed and the decision was made to log the event</span>", 
"<span class=\"comment\"> * further.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The status parameter will be saved to the 'status' field of 'struct mce'</span>", 
"<span class=\"comment\"> * and historically has been the register value of the</span>", 
"<span class=\"comment\"> * MSR_IA32_THERMAL_STATUS (Intel) msr.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mce_log_therm_throt_event\">mce_log_therm_throt_event</a>(<a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mce\">mce</a> <a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_setup\">mce_setup</a>(&amp;<a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#bank\">bank</a> = <a class=\"id\" href=\"#MCE_THERMAL_BANK\">MCE_THERMAL_BANK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_log\">mce_log</a>(&amp;<a class=\"id\" href=\"#m\">m</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_MCE_INTEL */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Periodic polling timer for \"silent\" machine check errors.  If the</span>", 
"<span class=\"comment\"> * poller finds an MCE, poll 2x faster.  When the poller finds no more</span>", 
"<span class=\"comment\"> * errors, poll 2x slower (up to check_interval seconds).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#check_interval\">check_interval</a> = 5 * 60; <span class=\"comment\">/* 5 minutes */</span>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#mce_next_interval\">mce_next_interval</a>); <span class=\"comment\">/* in jiffies */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a>, <a class=\"id\" href=\"#mce_timer\">mce_timer</a>);", 
"", 
"static void <a class=\"id\" href=\"#mce_start_timer\">mce_start_timer</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#mce_timer\">mce_timer</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() != <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_available\">mce_available</a>(&amp;<a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_check_poll\">machine_check_poll</a>(<a class=\"id\" href=\"#MCP_TIMESTAMP\">MCP_TIMESTAMP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_poll_banks\">mce_poll_banks</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Alert userspace if needed.  If we logged an MCE, reduce the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * polling interval, otherwise increase the polling interval.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_next_interval\">mce_next_interval</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_notify_irq\">mce_notify_irq</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#max\">max</a>(*<a class=\"id\" href=\"#n\">n</a>/2, <a class=\"id\" href=\"#HZ\">HZ</a>/100);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#min\">min</a>(*<a class=\"id\" href=\"#n\">n</a>*2, (int)<a class=\"id\" href=\"#round_jiffies_relative\">round_jiffies_relative</a>(<a class=\"id\" href=\"#check_interval\">check_interval</a>*<a class=\"id\" href=\"#HZ\">HZ</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer_on\">add_timer_on</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mce_do_trigger\">mce_do_trigger</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_usermodehelper\">call_usermodehelper</a>(<a class=\"id\" href=\"#mce_helper\">mce_helper</a>, <a class=\"id\" href=\"#mce_helper_argv\">mce_helper_argv</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#UMH_NO_WAIT\">UMH_NO_WAIT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DECLARE_WORK\">DECLARE_WORK</a>(<a class=\"id\" href=\"#mce_trigger_work\">mce_trigger_work</a>, <a class=\"id\" href=\"#mce_do_trigger\">mce_do_trigger</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Notify the user(s) about new machine check events.</span>", 
"<span class=\"comment\"> * Can be called from interrupt context, but not from machine check/NMI</span>", 
"<span class=\"comment\"> * context.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mce_notify_irq\">mce_notify_irq</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Not more than two messages every minute */</span>", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_RATELIMIT_STATE\">DEFINE_RATELIMIT_STATE</a>(<a class=\"id\" href=\"#ratelimit\">ratelimit</a>, 60*<a class=\"id\" href=\"#HZ\">HZ</a>, 2);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_thread_flag\">clear_thread_flag</a>(<a class=\"id\" href=\"#TIF_MCE_NOTIFY\">TIF_MCE_NOTIFY</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(0, &amp;<a class=\"id\" href=\"#mce_need_notify\">mce_need_notify</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#mce_wait\">mce_wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There is no risk of missing notifications because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * work_pending is always cleared before the function is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * executed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_helper\">mce_helper</a>[0] && !<a class=\"id\" href=\"#work_pending\">work_pending</a>(&amp;<a class=\"id\" href=\"#mce_trigger_work\">mce_trigger_work</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#mce_trigger_work\">mce_trigger_work</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__ratelimit\">__ratelimit</a>(&amp;<a class=\"id\" href=\"#ratelimit\">ratelimit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(<a class=\"id\" href=\"#HW_ERR\">HW_ERR</a> \"Machine check events logged\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mce_notify_irq\">mce_notify_irq</a>);", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#__mcheck_cpu_mce_banks_init\">__mcheck_cpu_mce_banks_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_banks\">mce_banks</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#banks\">banks</a> * sizeof(struct <a class=\"id\" href=\"#mce_bank\">mce_bank</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_banks\">mce_banks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#banks\">banks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mce_bank\">mce_bank</a> *<a class=\"id\" href=\"#b\">b</a> = &amp;<a class=\"id\" href=\"#mce_banks\">mce_banks</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#ctl\">ctl</a> = -1ULL;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#init\">init</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize Machine Checks for a CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#__mcheck_cpu_cap_init\">__mcheck_cpu_cap_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cap\">cap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCG_CAP\">MSR_IA32_MCG_CAP</a>, <a class=\"id\" href=\"#cap\">cap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#MCG_BANKCNT_MASK\">MCG_BANKCNT_MASK</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#banks\">banks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"mce: CPU supports %d MCE banks\\n\", <a class=\"id\" href=\"#b\">b</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a> &gt; <a class=\"id\" href=\"#MAX_NR_BANKS\">MAX_NR_BANKS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"MCE: Using only %u machine check banks out of %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_NR_BANKS\">MAX_NR_BANKS</a>, <a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#MAX_NR_BANKS\">MAX_NR_BANKS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't support asymmetric configurations today */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#banks\">banks</a> != 0 && <a class=\"id\" href=\"#b\">b</a> != <a class=\"id\" href=\"#banks\">banks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#banks\">banks</a> = <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_banks\">mce_banks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__mcheck_cpu_mce_banks_init\">__mcheck_cpu_mce_banks_init</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use accurate RIP reporting if available. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#MCG_EXT_P\">MCG_EXT_P</a>) && <a class=\"id\" href=\"#MCG_EXT_CNT\">MCG_EXT_CNT</a>(<a class=\"id\" href=\"#cap\">cap</a>) >= 9)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rip_msr\">rip_msr</a> = <a class=\"id\" href=\"#MSR_IA32_MCG_EIP\">MSR_IA32_MCG_EIP</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#MCG_SER_P\">MCG_SER_P</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_ser\">mce_ser</a> = 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__mcheck_cpu_init_generic\">__mcheck_cpu_init_generic</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_banks_t\">mce_banks_t</a> <a class=\"id\" href=\"#all_banks\">all_banks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Log the machine checks left over from the previous reset.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_fill\">bitmap_fill</a>(<a class=\"id\" href=\"#all_banks\">all_banks</a>, <a class=\"id\" href=\"#MAX_NR_BANKS\">MAX_NR_BANKS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_check_poll\">machine_check_poll</a>(<a class=\"id\" href=\"#MCP_UC\">MCP_UC</a>|(!<a class=\"id\" href=\"#mce_bootlog\">mce_bootlog</a> ? <a class=\"id\" href=\"#MCP_DONTLOG\">MCP_DONTLOG</a> : 0), &amp;<a class=\"id\" href=\"#all_banks\">all_banks</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_in_cr4\">set_in_cr4</a>(<a class=\"id\" href=\"#X86_CR4_MCE\">X86_CR4_MCE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCG_CAP\">MSR_IA32_MCG_CAP</a>, <a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#MCG_CTL_P\">MCG_CTL_P</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_IA32_MCG_CTL\">MSR_IA32_MCG_CTL</a>, 0xffffffff, 0xffffffff);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#banks\">banks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mce_bank\">mce_bank</a> *<a class=\"id\" href=\"#b\">b</a> = &amp;<a class=\"id\" href=\"#mce_banks\">mce_banks</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#init\">init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_CTL\">MSR_IA32_MCx_CTL</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#ctl\">ctl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_STATUS\">MSR_IA32_MCx_STATUS</a>(<a class=\"id\" href=\"#i\">i</a>), 0);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Add per CPU specific workarounds here */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#__mcheck_cpu_apply_quirks\">__mcheck_cpu_apply_quirks</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_UNKNOWN\">X86_VENDOR_UNKNOWN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"MCE: unknown CPU type - not enabling MCE support.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This should be disabled by the BIOS, but isn't always */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 15 && <a class=\"id\" href=\"#banks\">banks</a> &gt; 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * disable GART TBL walk error reporting, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * trips off incorrectly with the IOMMU &amp; 3ware</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * &amp; Cerberus:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(10, (unsigned long *)&amp;<a class=\"id\" href=\"#mce_banks\">mce_banks</a>[4].<a class=\"id\" href=\"#ctl\">ctl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> <= 17 && <a class=\"id\" href=\"#mce_bootlog\">mce_bootlog</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Lots of broken BIOS around that don't clear them</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * by default and leave crap in there. Don't log:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_bootlog\">mce_bootlog</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Various K7s with broken bank 0 around. Always disable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by default.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/> if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#banks\">banks</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_banks\">mce_banks</a>[0].<a class=\"id\" href=\"#ctl\">ctl</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SDM documents that on family 6 bank 0 should not be written</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because it aliases to another special BIOS controlled</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * register.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But it's not aliased anymore on model 0x1a+</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't ignore bank 0 completely because there could be a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * valid event later, merely don't write CTL0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> &lt; 0x1A && <a class=\"id\" href=\"#banks\">banks</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_banks\">mce_banks</a>[0].<a class=\"id\" href=\"#init\">init</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * All newer Intel systems support MCE broadcasting. Enable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * synchronization with a one second timeout.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> &gt; 6 || (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> >= 0xe)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#monarch_timeout\">monarch_timeout</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#monarch_timeout\">monarch_timeout</a> = <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There are also broken BIOSes on some Pentium M and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * earlier systems:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> <= 13 && <a class=\"id\" href=\"#mce_bootlog\">mce_bootlog</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_bootlog\">mce_bootlog</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#monarch_timeout\">monarch_timeout</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#monarch_timeout\">monarch_timeout</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_bootlog\">mce_bootlog</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_panic_timeout\">mce_panic_timeout</a> = 30;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#__mcheck_cpu_ancient_init\">__mcheck_cpu_ancient_init</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> != 5)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#intel_p5_mcheck_init\">intel_p5_mcheck_init</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_CENTAUR\">X86_VENDOR_CENTAUR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#winchip_mcheck_init\">winchip_mcheck_init</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__mcheck_cpu_init_vendor\">__mcheck_cpu_init_vendor</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_intel_feature_init\">mce_intel_feature_init</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_amd_feature_init\">mce_amd_feature_init</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__mcheck_cpu_init_timer\">__mcheck_cpu_init_timer</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_timer\">mce_timer</a>);", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#n\">n</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_next_interval\">mce_next_interval</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_timer\">setup_timer</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#mce_start_timer\">mce_start_timer</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_ignore_ce\">mce_ignore_ce</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#check_interval\">check_interval</a> * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#round_jiffies\">round_jiffies</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a> + *<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer_on\">add_timer_on</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"}", 
"", 
"<span class=\"comment\">/* Handle unconfigured int18 (should never happen) */</span>", 
"static void <a class=\"id\" href=\"#unexpected_machine_check\">unexpected_machine_check</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CPU#%d: Unexpected int18 (Machine Check).\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"}", 
"", 
"<span class=\"comment\">/* Call the installed machine check handler for this CPU setup. */</span>", 
"void (*<a class=\"id\" href=\"#machine_check_vector\">machine_check_vector</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *, long <a class=\"id\" href=\"#error_code\">error_code</a>) =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unexpected_machine_check\">unexpected_machine_check</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called for each booted CPU to set up machine checks.</span>", 
"<span class=\"comment\"> * Must be called with preempt off:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#mcheck_cpu_init\">mcheck_cpu_init</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_disabled\">mce_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mcheck_cpu_ancient_init\">__mcheck_cpu_ancient_init</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_available\">mce_available</a>(<a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__mcheck_cpu_cap_init\">__mcheck_cpu_cap_init</a>() &lt; 0 || <a class=\"id\" href=\"#__mcheck_cpu_apply_quirks\">__mcheck_cpu_apply_quirks</a>(<a class=\"id\" href=\"#c\">c</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_disabled\">mce_disabled</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_check_vector\">machine_check_vector</a> = <a class=\"id\" href=\"#do_machine_check\">do_machine_check</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mcheck_cpu_init_generic\">__mcheck_cpu_init_generic</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mcheck_cpu_init_vendor\">__mcheck_cpu_init_vendor</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mcheck_cpu_init_timer\">__mcheck_cpu_init_timer</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_work\">mce_work</a>), <a class=\"id\" href=\"#mce_process_work\">mce_process_work</a>);", 
"", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Character device to read and clear the MCE log.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#mce_state_lock\">mce_state_lock</a>);", 
"static int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#open_count\">open_count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* #times opened */</span>", 
"static int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#open_exclu\">open_exclu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* already open exclusive? */</span>", 
"", 
"static int <a class=\"id\" href=\"#mce_open\">mce_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mce_state_lock\">mce_state_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#open_exclu\">open_exclu</a> || (<a class=\"id\" href=\"#open_count\">open_count</a> && (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_EXCL\">O_EXCL</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mce_state_lock\">mce_state_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_EXCL\">O_EXCL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#open_exclu\">open_exclu</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_count\">open_count</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mce_state_lock\">mce_state_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nonseekable_open\">nonseekable_open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mce_release\">mce_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mce_state_lock\">mce_state_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_count\">open_count</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_exclu\">open_exclu</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mce_state_lock\">mce_state_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#collect_tscs\">collect_tscs</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#cpu_tsc\">cpu_tsc</a> = (unsigned long *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtscll\">rdtscll</a>(<a class=\"id\" href=\"#cpu_tsc\">cpu_tsc</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()]);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mce_apei_read_done\">mce_apei_read_done</a>;", 
"", 
"<span class=\"comment\">/* Collect MCE record of previous boot in persistent storage via APEI ERST. */</span>", 
"static int <a class=\"id\" href=\"#__mce_read_apei\">__mce_read_apei</a>(char <a class=\"id\" href=\"#__user\">__user</a> **<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#usize\">usize</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#record_id\">record_id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mce\">mce</a> <a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usize\">usize</a> &lt; sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#apei_read_mce\">apei_read_mce</a>(&amp;<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#record_id\">record_id</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Error or no more MCE record */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_apei_read_done\">mce_apei_read_done</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(*<a class=\"id\" href=\"#ubuf\">ubuf</a>, &amp;<a class=\"id\" href=\"#m\">m</a>, sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In fact, we should have cleared the record after that has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * been flushed to the disk or sent to network in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * /sbin/mcelog, but we have no interface to support that now,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so just clear it to avoid duplication.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#apei_clear_mce\">apei_clear_mce</a>(<a class=\"id\" href=\"#record_id\">record_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_apei_read_done\">mce_apei_read_done</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ubuf\">ubuf</a> += sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#mce_read\">mce_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#usize\">usize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#off\">off</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#ubuf\">ubuf</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#cpu_tsc\">cpu_tsc</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_tsc\">cpu_tsc</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(long), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_tsc\">cpu_tsc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#mce_read_mutex\">mce_read_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_apei_read_done\">mce_apei_read_done</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__mce_read_apei\">__mce_read_apei</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#usize\">usize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> || <a class=\"id\" href=\"#buf\">buf</a> != <a class=\"id\" href=\"#ubuf\">ubuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rcu_dereference_check_mce\">rcu_dereference_check_mce</a>(<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only supports full reads right now */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#off\">off</a> != 0 || <a class=\"id\" href=\"#usize\">usize</a> &lt; <a class=\"id\" href=\"#MCE_LOG_LEN\">MCE_LOG_LEN</a>*sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#prev\">prev</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#finished\">finished</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#start\">start</a> + 2)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#entry\">entry</a> + <a class=\"id\" href=\"#i\">i</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> |= <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#entry\">entry</a> + <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>);", 
"<a class=\"id\" href=\"#timeout\">timeout</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#entry\">entry</a> + <a class=\"id\" href=\"#prev\">prev</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#prev\">prev</a>) * sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#prev\">prev</a>, 0);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Collect entries that were still getting written before the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synchronize.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#collect_tscs\">collect_tscs</a>, <a class=\"id\" href=\"#cpu_tsc\">cpu_tsc</a>, 1);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MCE_LOG_LEN\">MCE_LOG_LEN</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#finished\">finished</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#tsc\">tsc</a> &lt; <a class=\"id\" href=\"#cpu_tsc\">cpu_tsc</a>[<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#cpu\">cpu</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> |= <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#entry\">entry</a>+<a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#i\">i</a>], 0, sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#mce_read_mutex\">mce_read_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cpu_tsc\">cpu_tsc</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a> ? <a class=\"id\" href=\"#err\">err</a> : <a class=\"id\" href=\"#buf\">buf</a> - <a class=\"id\" href=\"#ubuf\">ubuf</a>;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#mce_poll\">mce_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#mce_wait\">mce_wait</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_dereference_check_mce\">rcu_dereference_check_mce</a>(<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_apei_read_done\">mce_apei_read_done</a> && <a class=\"id\" href=\"#apei_check_mce\">apei_check_mce</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#mce_ioctl\">mce_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a> = (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MCE_GET_RECORD_LEN\">MCE_GET_RECORD_LEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(sizeof(struct <a class=\"id\" href=\"#mce\">mce</a>), <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MCE_GET_LOG_LEN\">MCE_GET_LOG_LEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#MCE_LOG_LEN\">MCE_LOG_LEN</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MCE_GETCLEAR_FLAGS\">MCE_GETCLEAR_FLAGS</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#mcelog\">mcelog</a>.<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#flags\">flags</a>, 0) != <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Modified in mce-inject.c, so not static or const */</span>", 
"struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#mce_chrdev_ops\">mce_chrdev_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mce_open\">mce_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mce_release\">mce_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mce_read\">mce_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mce_poll\">mce_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mce_ioctl\">mce_ioctl</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mce_chrdev_ops\">mce_chrdev_ops</a>);", 
"", 
"static struct <a class=\"id\" href=\"#miscdevice\">miscdevice</a> <a class=\"id\" href=\"#mce_log_device\">mce_log_device</a> = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MISC_MCELOG_MINOR\">MISC_MCELOG_MINOR</a>,", 
"<span class=\"ts\"/>\"mcelog\",", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mce_chrdev_ops\">mce_chrdev_ops</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mce=off Disables machine check</span>", 
"<span class=\"comment\"> * mce=no_cmci Disables CMCI</span>", 
"<span class=\"comment\"> * mce=dont_log_ce Clears corrected events silently, no log created for CEs.</span>", 
"<span class=\"comment\"> * mce=ignore_ce Disables polling and CMCI, corrected events are not cleared.</span>", 
"<span class=\"comment\"> * mce=TOLERANCELEVEL[,monarchtimeout] (number, see above)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>monarchtimeout is how long to wait for other CPUs on machine</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>check, or 0 to not wait</span>", 
"<span class=\"comment\"> * mce=bootlog Log MCEs from before booting. Disabled by default on AMD.</span>", 
"<span class=\"comment\"> * mce=nobootlog Don't log MCEs from before booting.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mcheck_enable\">mcheck_enable</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#str\">str</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_p5_mce\">enable_p5_mce</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#str\">str</a> == '=')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a>++;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"off\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_disabled\">mce_disabled</a> = 1;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"no_cmci\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_cmci_disabled\">mce_cmci_disabled</a> = 1;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"dont_log_ce\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_dont_log_ce\">mce_dont_log_ce</a> = 1;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"ignore_ce\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_ignore_ce\">mce_ignore_ce</a> = 1;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"bootlog\") || !<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"nobootlog\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_bootlog\">mce_bootlog</a> = (<a class=\"id\" href=\"#str\">str</a>[0] == 'b');", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#str\">str</a>[0])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#tolerant\">tolerant</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#str\">str</a> == ',') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#monarch_timeout\">monarch_timeout</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"mce argument %s ignored. Please use /sys\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"mce\", <a class=\"id\" href=\"#mcheck_enable\">mcheck_enable</a>);", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mcheck_init\">mcheck_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#x86_mce_decoder_chain\">x86_mce_decoder_chain</a>, &amp;<a class=\"id\" href=\"#mce_dec_nb\">mce_dec_nb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mcheck_intel_therm_init\">mcheck_intel_therm_init</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sysfs support</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable machine checks on suspend and shutdown. We can't really handle</span>", 
"<span class=\"comment\"> * them later.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mce_disable_error_reporting\">mce_disable_error_reporting</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#banks\">banks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mce_bank\">mce_bank</a> *<a class=\"id\" href=\"#b\">b</a> = &amp;<a class=\"id\" href=\"#mce_banks\">mce_banks</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#init\">init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_CTL\">MSR_IA32_MCx_CTL</a>(<a class=\"id\" href=\"#i\">i</a>), 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mce_suspend\">mce_suspend</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mce_disable_error_reporting\">mce_disable_error_reporting</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mce_shutdown\">mce_shutdown</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mce_disable_error_reporting\">mce_disable_error_reporting</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On resume clear all MCE state. Don't want to see leftovers from the BIOS.</span>", 
"<span class=\"comment\"> * Only one CPU is active at this time, the others get re-added later using</span>", 
"<span class=\"comment\"> * CPU hotplug:</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mce_resume\">mce_resume</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mcheck_cpu_init_generic\">__mcheck_cpu_init_generic</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mcheck_cpu_init_vendor\">__mcheck_cpu_init_vendor</a>(&amp;<a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mce_cpu_restart\">mce_cpu_restart</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_timer\">mce_timer</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_available\">mce_available</a>(&amp;<a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mcheck_cpu_init_generic\">__mcheck_cpu_init_generic</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mcheck_cpu_init_timer\">__mcheck_cpu_init_timer</a>();", 
];
xr_frag_insert('l/dd/5154ed58162d0010e0727d0d6a982a69f55f5e.xr', __xr_tmp);
