var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VMware Detection code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2008, VMware, Inc.</span>", 
"<span class=\"comment\"> * Author : Alok N Kataria &lt;akataria@vmware.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or</span>", 
"<span class=\"comment\"> * NON INFRINGEMENT.  See the GNU General Public License for more</span>", 
"<span class=\"comment\"> * details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#div64\">div64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#hypervisor\">hypervisor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPUID_VMWARE_INFO_LEAF\">CPUID_VMWARE_INFO_LEAF</a><span class=\"ts\"/>0x40000000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMWARE_HYPERVISOR_MAGIC\">VMWARE_HYPERVISOR_MAGIC</a><span class=\"ts\"/>0x564D5868", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMWARE_HYPERVISOR_PORT\">VMWARE_HYPERVISOR_PORT</a><span class=\"ts\"/>0x5658", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMWARE_PORT_CMD_GETVERSION\">VMWARE_PORT_CMD_GETVERSION</a><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMWARE_PORT_CMD_GETHZ\">VMWARE_PORT_CMD_GETHZ</a><span class=\"ts\"/><span class=\"ts\"/>45", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMWARE_PORT\">VMWARE_PORT</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__asm__\">__asm__</a>(\"inl (%%dx)\" :<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"=a\"(<a class=\"id\" href=\"#eax\">eax</a>), \"=c\"(<a class=\"id\" href=\"#ecx\">ecx</a>), \"=d\"(<a class=\"id\" href=\"#edx\">edx</a>), \"=b\"(<a class=\"id\" href=\"#ebx\">ebx</a>) :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"0\"(<a class=\"id\" href=\"#VMWARE_HYPERVISOR_MAGIC\">VMWARE_HYPERVISOR_MAGIC</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"1\"(<a class=\"id\" href=\"#VMWARE_PORT_CMD_\">VMWARE_PORT_CMD_</a>##<a class=\"id\" href=\"#cmd\">cmd</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"2\"(<a class=\"id\" href=\"#VMWARE_HYPERVISOR_PORT\">VMWARE_HYPERVISOR_PORT</a>), \"3\"(<a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>) :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"memory\");", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__vmware_platform\">__vmware_platform</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMWARE_PORT\">VMWARE_PORT</a>(<a class=\"id\" href=\"#GETVERSION\">GETVERSION</a>, <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#eax\">eax</a> != (<a class=\"id\" href=\"#uint32_t\">uint32_t</a>)-1 && <a class=\"id\" href=\"#ebx\">ebx</a> == <a class=\"id\" href=\"#VMWARE_HYPERVISOR_MAGIC\">VMWARE_HYPERVISOR_MAGIC</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#vmware_get_tsc_khz\">vmware_get_tsc_khz</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#tsc_hz\">tsc_hz</a>, <a class=\"id\" href=\"#lpj\">lpj</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMWARE_PORT\">VMWARE_PORT</a>(<a class=\"id\" href=\"#GETHZ\">GETHZ</a>, <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsc_hz\">tsc_hz</a> = <a class=\"id\" href=\"#eax\">eax</a> | (((<a class=\"id\" href=\"#uint64_t\">uint64_t</a>)<a class=\"id\" href=\"#ebx\">ebx</a>) << 32);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#tsc_hz\">tsc_hz</a>, 1000);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#tsc_hz\">tsc_hz</a> >> 32);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"TSC freq read from hypervisor : %lu.%03lu MHz\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long) <a class=\"id\" href=\"#tsc_hz\">tsc_hz</a> / 1000,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long) <a class=\"id\" href=\"#tsc_hz\">tsc_hz</a> % 1000);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#preset_lpj\">preset_lpj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lpj\">lpj</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#tsc_hz\">tsc_hz</a> * 1000);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#lpj\">lpj</a>, <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preset_lpj\">preset_lpj</a> = <a class=\"id\" href=\"#lpj\">lpj</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tsc_hz\">tsc_hz</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vmware_platform_setup\">vmware_platform_setup</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMWARE_PORT\">VMWARE_PORT</a>(<a class=\"id\" href=\"#GETHZ\">GETHZ</a>, <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ebx\">ebx</a> != <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#calibrate_tsc\">calibrate_tsc</a> = <a class=\"id\" href=\"#vmware_get_tsc_khz\">vmware_get_tsc_khz</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Failed to get TSC freq from the hypervisor\\n\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * While checking the dmi string infomation, just checking the product</span>", 
"<span class=\"comment\"> * serial key should be enough, as this will always have a VMware</span>", 
"<span class=\"comment\"> * specific string when running under VMware hypervisor.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vmware_platform\">vmware_platform</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_hypervisor\">cpu_has_hypervisor</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#eax\">eax</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hyper_vendor_id\">hyper_vendor_id</a>[3];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(<a class=\"id\" href=\"#CPUID_VMWARE_INFO_LEAF\">CPUID_VMWARE_INFO_LEAF</a>, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#hyper_vendor_id\">hyper_vendor_id</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#hyper_vendor_id\">hyper_vendor_id</a>[1], &amp;<a class=\"id\" href=\"#hyper_vendor_id\">hyper_vendor_id</a>[2]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#hyper_vendor_id\">hyper_vendor_id</a>, \"VMwareVMware\", 12))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#dmi_available\">dmi_available</a> && <a class=\"id\" href=\"#dmi_name_in_serial\">dmi_name_in_serial</a>(\"VMware\") &&", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#__vmware_platform\">__vmware_platform</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VMware hypervisor takes care of exporting a reliable TSC to the guest.</span>", 
"<span class=\"comment\"> * Still, due to timing difference when running on virtual cpus, the TSC can</span>", 
"<span class=\"comment\"> * be marked as unstable in some cases. For example, the TSC sync check at</span>", 
"<span class=\"comment\"> * bootup can fail due to a marginal offset between vcpus' TSCs (though the</span>", 
"<span class=\"comment\"> * TSCs do not drift from each other).  Also, the ACPI PM timer clocksource</span>", 
"<span class=\"comment\"> * is not suitable as a watchdog when running on a hypervisor because the</span>", 
"<span class=\"comment\"> * kernel may miss a wrap of the counter if the vcpu is descheduled for a</span>", 
"<span class=\"comment\"> * long time. To skip these checks at runtime we set these capability bits,</span>", 
"<span class=\"comment\"> * so that the kernel could just trust the hypervisor with providing a</span>", 
"<span class=\"comment\"> * reliable virtual TSC that is suitable for timekeeping.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#vmware_set_cpu_features\">vmware_set_cpu_features</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_TSC_RELIABLE\">X86_FEATURE_TSC_RELIABLE</a>);", 
"}", 
"", 
"const <a class=\"id\" href=\"#__refconst\">__refconst</a> struct <a class=\"id\" href=\"#hypervisor_x86\">hypervisor_x86</a> <a class=\"id\" href=\"#x86_hyper_vmware\">x86_hyper_vmware</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"VMware\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#detect\">detect</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#vmware_platform\">vmware_platform</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_cpu_features\">set_cpu_features</a><span class=\"ts\"/>= <a class=\"id\" href=\"#vmware_set_cpu_features\">vmware_set_cpu_features</a>,", 
];
xr_frag_insert('l/dd/66a740011a6492150c5a628bba259159e2e492.xr', __xr_tmp);
