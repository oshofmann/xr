var __xr_tmp = [
"struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *<a class=\"id\" href=\"#rpc_clone_client\">rpc_clone_client</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *);", 
"void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_shutdown_client\">rpc_shutdown_client</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *);", 
"void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_release_client\">rpc_release_client</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *);", 
"void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_task_release_client\">rpc_task_release_client</a>(struct <a class=\"id\" href=\"#rpc_task\">rpc_task</a> *);", 
"", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpcb_register\">rpcb_register</a>(<a class=\"id\" href=\"#u32\">u32</a>, <a class=\"id\" href=\"#u32\">u32</a>, int, unsigned short);", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpcb_v4_register\">rpcb_v4_register</a>(const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#program\">program</a>, const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#version\">version</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#netid\">netid</a>);", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpcb_getport_sync\">rpcb_getport_sync</a>(struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *, <a class=\"id\" href=\"#u32\">u32</a>, <a class=\"id\" href=\"#u32\">u32</a>, int);", 
"void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpcb_getport_async\">rpcb_getport_async</a>(struct <a class=\"id\" href=\"#rpc_task\">rpc_task</a> *);", 
"", 
"void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_call_start\">rpc_call_start</a>(struct <a class=\"id\" href=\"#rpc_task\">rpc_task</a> *);", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_call_async\">rpc_call_async</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *<a class=\"id\" href=\"#clnt\">clnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#rpc_message\">rpc_message</a> *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#rpc_call_ops\">rpc_call_ops</a> *<a class=\"id\" href=\"#tk_ops\">tk_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#calldata\">calldata</a>);", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_call_sync\">rpc_call_sync</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *<a class=\"id\" href=\"#clnt\">clnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#rpc_message\">rpc_message</a> *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"struct <a class=\"id\" href=\"#rpc_task\">rpc_task</a> *<a class=\"id\" href=\"#rpc_call_null\">rpc_call_null</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *<a class=\"id\" href=\"#clnt\">clnt</a>, struct <a class=\"id\" href=\"#rpc_cred\">rpc_cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#flags\">flags</a>);", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_restart_call_prepare\">rpc_restart_call_prepare</a>(struct <a class=\"id\" href=\"#rpc_task\">rpc_task</a> *);", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_restart_call\">rpc_restart_call</a>(struct <a class=\"id\" href=\"#rpc_task\">rpc_task</a> *);", 
"void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_setbufsize\">rpc_setbufsize</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *, unsigned int, unsigned int);", 
"<a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_max_payload\">rpc_max_payload</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *);", 
"void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_force_rebind\">rpc_force_rebind</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *);", 
"<a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_peeraddr\">rpc_peeraddr</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *, struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"const char<span class=\"ts\"/>*<a class=\"id\" href=\"#rpc_peeraddr2str\">rpc_peeraddr2str</a>(struct <a class=\"id\" href=\"#rpc_clnt\">rpc_clnt</a> *, enum <a class=\"id\" href=\"#rpc_display_format_t\">rpc_display_format_t</a>);", 
"", 
"<a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_ntop\">rpc_ntop</a>(const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *, char *, const <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"<a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_pton\">rpc_pton</a>(const char *, const <a class=\"id\" href=\"#size_t\">size_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *, const <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"char *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_sockaddr2uaddr\">rpc_sockaddr2uaddr</a>(const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *);", 
"<a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc_uaddr2sockaddr\">rpc_uaddr2sockaddr</a>(const char *, const <a class=\"id\" href=\"#size_t\">size_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *, const <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned short <a class=\"id\" href=\"#rpc_get_port\">rpc_get_port</a>(const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap\">sap</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#sa_family\">sa_family</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AF_INET\">AF_INET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ntohs\">ntohs</a>(((struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *)<a class=\"id\" href=\"#sap\">sap</a>)-><a class=\"id\" href=\"#sin_port\">sin_port</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AF_INET6\">AF_INET6</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ntohs\">ntohs</a>(((struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *)<a class=\"id\" href=\"#sap\">sap</a>)-><a class=\"id\" href=\"#sin6_port\">sin6_port</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rpc_set_port\">rpc_set_port</a>(struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap\">sap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned short <a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#sa_family\">sa_family</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AF_INET\">AF_INET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>((struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *)<a class=\"id\" href=\"#sap\">sap</a>)-><a class=\"id\" href=\"#sin_port\">sin_port</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#port\">port</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AF_INET6\">AF_INET6</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>((struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *)<a class=\"id\" href=\"#sap\">sap</a>)-><a class=\"id\" href=\"#sin6_port\">sin6_port</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#port\">port</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IPV6_SCOPE_DELIMITER\">IPV6_SCOPE_DELIMITER</a><span class=\"ts\"/><span class=\"ts\"/>'%'", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IPV6_SCOPE_ID_LEN\">IPV6_SCOPE_ID_LEN</a><span class=\"ts\"/><span class=\"ts\"/>sizeof(\"%nnnnnnnnnn\")", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__rpc_cmp_addr4\">__rpc_cmp_addr4</a>(const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap1\">sap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap2\">sap2</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *<a class=\"id\" href=\"#sin1\">sin1</a> = (const struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *)<a class=\"id\" href=\"#sap1\">sap1</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *<a class=\"id\" href=\"#sin2\">sin2</a> = (const struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *)<a class=\"id\" href=\"#sap2\">sap2</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sin1\">sin1</a>-><a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> == <a class=\"id\" href=\"#sin2\">sin2</a>-><a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__rpc_copy_addr4\">__rpc_copy_addr4</a>(struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *<a class=\"id\" href=\"#ssin\">ssin</a> = (struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *) <a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *<a class=\"id\" href=\"#dsin\">dsin</a> = (struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *) <a class=\"id\" href=\"#dst\">dst</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsin\">dsin</a>-><a class=\"id\" href=\"#sin_family\">sin_family</a> = <a class=\"id\" href=\"#ssin\">ssin</a>-><a class=\"id\" href=\"#sin_family\">sin_family</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsin\">dsin</a>-><a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> = <a class=\"id\" href=\"#ssin\">ssin</a>-><a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__rpc_cmp_addr6\">__rpc_cmp_addr6</a>(const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap1\">sap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap2\">sap2</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *<a class=\"id\" href=\"#sin1\">sin1</a> = (const struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *)<a class=\"id\" href=\"#sap1\">sap1</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *<a class=\"id\" href=\"#sin2\">sin2</a> = (const struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *)<a class=\"id\" href=\"#sap2\">sap2</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ipv6_addr_equal\">ipv6_addr_equal</a>(&amp;<a class=\"id\" href=\"#sin1\">sin1</a>-><a class=\"id\" href=\"#sin6_addr\">sin6_addr</a>, &amp;<a class=\"id\" href=\"#sin2\">sin2</a>-><a class=\"id\" href=\"#sin6_addr\">sin6_addr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__rpc_copy_addr6\">__rpc_copy_addr6</a>(struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *<a class=\"id\" href=\"#ssin6\">ssin6</a> = (const struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *) <a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *<a class=\"id\" href=\"#dsin6\">dsin6</a> = (struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *) <a class=\"id\" href=\"#dst\">dst</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsin6\">dsin6</a>-><a class=\"id\" href=\"#sin6_family\">sin6_family</a> = <a class=\"id\" href=\"#ssin6\">ssin6</a>-><a class=\"id\" href=\"#sin6_family\">sin6_family</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipv6_addr_copy\">ipv6_addr_copy</a>(&amp;<a class=\"id\" href=\"#dsin6\">dsin6</a>-><a class=\"id\" href=\"#sin6_addr\">sin6_addr</a>, &amp;<a class=\"id\" href=\"#ssin6\">ssin6</a>-><a class=\"id\" href=\"#sin6_addr\">sin6_addr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"#else<span class=\"ts\"/><span class=\"comment\">/* !(CONFIG_IPV6 || CONFIG_IPV6_MODULE) */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__rpc_cmp_addr6\">__rpc_cmp_addr6</a>(const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap1\">sap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap2\">sap2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__rpc_copy_addr6\">__rpc_copy_addr6</a>(struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* !(CONFIG_IPV6 || CONFIG_IPV6_MODULE) */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rpc_cmp_addr - compare the address portion of two sockaddrs.</span>", 
"<span class=\"comment\"> * @sap1: first sockaddr</span>", 
"<span class=\"comment\"> * @sap2: second sockaddr</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Just compares the family and address portion. Ignores port, scope, etc.</span>", 
"<span class=\"comment\"> * Returns true if the addrs are equal, false if they aren't.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#rpc_cmp_addr\">rpc_cmp_addr</a>(const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap1\">sap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap2\">sap2</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sap1\">sap1</a>-><a class=\"id\" href=\"#sa_family\">sa_family</a> == <a class=\"id\" href=\"#sap2\">sap2</a>-><a class=\"id\" href=\"#sa_family\">sa_family</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#sap1\">sap1</a>-><a class=\"id\" href=\"#sa_family\">sa_family</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AF_INET\">AF_INET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__rpc_cmp_addr4\">__rpc_cmp_addr4</a>(<a class=\"id\" href=\"#sap1\">sap1</a>, <a class=\"id\" href=\"#sap2\">sap2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AF_INET6\">AF_INET6</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__rpc_cmp_addr6\">__rpc_cmp_addr6</a>(<a class=\"id\" href=\"#sap1\">sap1</a>, <a class=\"id\" href=\"#sap2\">sap2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rpc_copy_addr - copy the address portion of one sockaddr to another</span>", 
"<span class=\"comment\"> * @dst: destination sockaddr</span>", 
"<span class=\"comment\"> * @src: source sockaddr</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Just copies the address portion and family. Ignores port, scope, etc.</span>", 
"<span class=\"comment\"> * Caller is responsible for making certain that dst is large enough to hold</span>", 
"<span class=\"comment\"> * the address in src. Returns true if address family is supported. Returns</span>", 
"<span class=\"comment\"> * false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#rpc_copy_addr\">rpc_copy_addr</a>(struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#sa_family\">sa_family</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AF_INET\">AF_INET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__rpc_copy_addr4\">__rpc_copy_addr4</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AF_INET6\">AF_INET6</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__rpc_copy_addr6\">__rpc_copy_addr6</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rpc_get_scope_id - return scopeid for a given sockaddr</span>", 
"<span class=\"comment\"> * @sa: sockaddr to get scopeid from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the value of the sin6_scope_id for AF_INET6 addrs, or 0 if</span>", 
"<span class=\"comment\"> * not an AF_INET6 address.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#rpc_get_scope_id\">rpc_get_scope_id</a>(const struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sa\">sa</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sa\">sa</a>-><a class=\"id\" href=\"#sa_family\">sa_family</a> != <a class=\"id\" href=\"#AF_INET6\">AF_INET6</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return ((struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *) <a class=\"id\" href=\"#sa\">sa</a>)-><a class=\"id\" href=\"#sin6_scope_id\">sin6_scope_id</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_SUNRPC_CLNT_H */</span>", 
];
xr_frag_insert('l/dd/67a8a726d92286240a726a5e5b4ab7c383d4b3.xr', __xr_tmp);
