var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* get field width */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field_width\">field_width</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field_width\">field_width</a> = <a class=\"id\" href=\"#skip_atoi\">skip_atoi</a>(&amp;<a class=\"id\" href=\"#fmt\">fmt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* get conversion qualifier */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qualifier\">qualifier</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#fmt\">fmt</a> == 'h' || <a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>) == 'l' ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>) == 'z') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qualifier\">qualifier</a> = *<a class=\"id\" href=\"#fmt\">fmt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#qualifier\">qualifier</a> == *<a class=\"id\" href=\"#fmt\">fmt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qualifier\">qualifier</a> == 'h') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qualifier\">qualifier</a> = 'H';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#qualifier\">qualifier</a> == 'l') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qualifier\">qualifier</a> = 'L';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#fmt\">fmt</a> || !*<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_sign\">is_sign</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (*<a class=\"id\" href=\"#fmt\">fmt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'c':", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a> = (char *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, char*);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#field_width\">field_width</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field_width\">field_width</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a>++ = *<a class=\"id\" href=\"#str\">str</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} while (--<a class=\"id\" href=\"#field_width\">field_width</a> &gt; 0 && *<a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 's':", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a> = (char *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, char *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#field_width\">field_width</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field_width\">field_width</a> = <a class=\"id\" href=\"#SHRT_MAX\">SHRT_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* first, skip leading white space in buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* now copy until next white space */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#str\">str</a> && !<a class=\"id\" href=\"#isspace\">isspace</a>(*<a class=\"id\" href=\"#str\">str</a>) && <a class=\"id\" href=\"#field_width\">field_width</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a>++ = *<a class=\"id\" href=\"#str\">str</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'n':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* return number of characters read so far */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#i\">i</a> = (int *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int*);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#str\">str</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'o':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'x':", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'X':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'i':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'd':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_sign\">is_sign</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'u':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case '%':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* looking for '%' in str */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#str\">str</a>++ != '%')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* invalid format; stop here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* have some sort of integer conversion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first, skip white space in buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#digit\">digit</a> = *<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sign\">is_sign</a> && <a class=\"id\" href=\"#digit\">digit</a> == '-')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#digit\">digit</a> = *(<a class=\"id\" href=\"#str\">str</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#digit\">digit</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#base\">base</a> == 16 && !<a class=\"id\" href=\"#isxdigit\">isxdigit</a>(<a class=\"id\" href=\"#digit\">digit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#base\">base</a> == 10 && !<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#digit\">digit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#base\">base</a> == 8 && (!<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#digit\">digit</a>) || <a class=\"id\" href=\"#digit\">digit</a> &gt; '7'))", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#base\">base</a> == 0 && !<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#digit\">digit</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#qualifier\">qualifier</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'H':<span class=\"ts\"/><span class=\"comment\">/* that's 'hh' in format */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sign\">is_sign</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>signed char *<a class=\"id\" href=\"#s\">s</a> = (signed char *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, signed char *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = (signed char)<a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#s\">s</a> = (unsigned char *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, unsigned char *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = (unsigned char)<a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'h':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sign\">is_sign</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>short *<a class=\"id\" href=\"#s\">s</a> = (short *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, short *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = (short)<a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned short *<a class=\"id\" href=\"#s\">s</a> = (unsigned short *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, unsigned short *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = (unsigned short)<a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'l':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sign\">is_sign</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#l\">l</a> = (long *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, long *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#l\">l</a> = (unsigned long *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, unsigned long *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'L':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sign\">is_sign</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long long *<a class=\"id\" href=\"#l\">l</a> = (long long *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, long long *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#simple_strtoll\">simple_strtoll</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long *<a class=\"id\" href=\"#l\">l</a> = (unsigned long long *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, unsigned long long *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#simple_strtoull\">simple_strtoull</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'Z':", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'z':", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#s\">s</a> = (<a class=\"id\" href=\"#size_t\">size_t</a> *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = (<a class=\"id\" href=\"#size_t\">size_t</a>)<a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sign\">is_sign</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#i\">i</a> = (int *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i\">i</a> = (int)<a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#i\">i</a> = (unsigned int *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, unsigned int*);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i\">i</a> = (unsigned int)<a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we've come all the way through so either the input string or the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * format ended. In the former case, there can be a %n at the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * position in the format that needs to be filled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#fmt\">fmt</a> == '%' && *(<a class=\"id\" href=\"#fmt\">fmt</a> + 1) == 'n') {", 
"<span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#p\">p</a> = (int *)<a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int *);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#str\">str</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vsscanf\">vsscanf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sscanf - Unformat a buffer into a list of arguments</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>input buffer</span>", 
"<span class=\"comment\"> * @fmt:<span class=\"ts\"/>formatting of buffer</span>", 
"<span class=\"comment\"> * @...:<span class=\"ts\"/>resulting arguments</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sscanf\">sscanf</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vsscanf\">vsscanf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sscanf\">sscanf</a>);", 
];
xr_frag_insert('l/dd/b5cc1ee681ee94f36f3073537507c87ebcf0e1.xr', __xr_tmp);
