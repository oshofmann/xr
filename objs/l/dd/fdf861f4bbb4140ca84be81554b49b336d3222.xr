var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * drivers/base/devres.c - device resource management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2006  SUSE Linux Products GmbH</span>", 
"<span class=\"comment\"> * Copyright (c) 2006  Tejun Heo &lt;teheo@suse.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"base.h\"", 
"", 
"struct <a class=\"id\" href=\"#devres_node\">devres_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr_release_t\">dr_release_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release\">release</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_DEVRES\">CONFIG_DEBUG_DEVRES</a>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#devres\">devres</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_node\">devres_node</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* -- 3 pointers */</span>", 
"<span class=\"ts\"/>unsigned long long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>[];<span class=\"ts\"/><span class=\"comment\">/* guarantee ull alignment */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#devres_group\">devres_group</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_node\">devres_node</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>[2];", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#color\">color</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* -- 8 pointers */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_DEVRES\">CONFIG_DEBUG_DEVRES</a>", 
"static int <a class=\"id\" href=\"#log_devres\">log_devres</a> = 0;", 
"<a class=\"id\" href=\"#module_param_named\">module_param_named</a>(<a class=\"id\" href=\"#log\">log</a>, <a class=\"id\" href=\"#log_devres\">log_devres</a>, int, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>);", 
"", 
"static void <a class=\"id\" href=\"#set_node_dbginfo\">set_node_dbginfo</a>(struct <a class=\"id\" href=\"#devres_node\">devres_node</a> *<a class=\"id\" href=\"#node\">node</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#devres_log\">devres_log</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#devres_node\">devres_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#log_devres\">log_devres</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#dev\">dev</a>, \"DEVRES %3s %p %s (%lu bytes)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#name\">name</a>, (unsigned long)<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"#else <span class=\"comment\">/* CONFIG_DEBUG_DEVRES */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_node_dbginfo\">set_node_dbginfo</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#s\">s</a>)<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#devres_log\">devres_log</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#op\">op</a>)<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_DEVRES */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Release functions for devres group.  These callbacks are used only</span>", 
"<span class=\"comment\"> * for identification.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#group_open_release\">group_open_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* noop */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#group_close_release\">group_close_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* noop */</span>", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#devres_group\">devres_group</a> * <a class=\"id\" href=\"#node_to_group\">node_to_group</a>(struct <a class=\"id\" href=\"#devres_node\">devres_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#release\">release</a> == &amp;<a class=\"id\" href=\"#group_open_release\">group_open_release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#devres_group\">devres_group</a>, <a class=\"id\" href=\"#node\">node</a>[0]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#release\">release</a> == &amp;<a class=\"id\" href=\"#group_close_release\">group_close_release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#devres_group\">devres_group</a>, <a class=\"id\" href=\"#node\">node</a>[1]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> struct <a class=\"id\" href=\"#devres\">devres</a> * <a class=\"id\" href=\"#alloc_dr\">alloc_dr</a>(<a class=\"id\" href=\"#dr_release_t\">dr_release_t</a> <a class=\"id\" href=\"#release\">release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#tot_size\">tot_size</a> = sizeof(struct <a class=\"id\" href=\"#devres\">devres</a>) + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#kmalloc_track_caller\">kmalloc_track_caller</a>(<a class=\"id\" href=\"#tot_size\">tot_size</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#dr\">dr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dr\">dr</a>, 0, <a class=\"id\" href=\"#tot_size\">tot_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#release\">release</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dr\">dr</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#add_dr\">add_dr</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#devres_node\">devres_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_log\">devres_log</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#node\">node</a>, \"ADD\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#entry\">entry</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#entry\">entry</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_head\">devres_head</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_DEVRES\">CONFIG_DEBUG_DEVRES</a>", 
"void * <a class=\"id\" href=\"#__devres_alloc\">__devres_alloc</a>(<a class=\"id\" href=\"#dr_release_t\">dr_release_t</a> <a class=\"id\" href=\"#release\">release</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#alloc_dr\">alloc_dr</a>(<a class=\"id\" href=\"#release\">release</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#dr\">dr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_node_dbginfo\">set_node_dbginfo</a>(&amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__devres_alloc\">__devres_alloc</a>);", 
"#else", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_alloc - Allocate device resource data</span>", 
"<span class=\"comment\"> * @release: Release function devres will be associated with</span>", 
"<span class=\"comment\"> * @size: Allocation size</span>", 
"<span class=\"comment\"> * @gfp: Allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate devres of @size bytes.  The allocated area is zeroed, then</span>", 
"<span class=\"comment\"> * associated with @release.  The returned pointer can be passed to</span>", 
"<span class=\"comment\"> * other devres_*() functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to allocated devres on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#devres_alloc\">devres_alloc</a>(<a class=\"id\" href=\"#dr_release_t\">dr_release_t</a> <a class=\"id\" href=\"#release\">release</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#alloc_dr\">alloc_dr</a>(<a class=\"id\" href=\"#release\">release</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#dr\">dr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_alloc\">devres_alloc</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_free - Free device resource data</span>", 
"<span class=\"comment\"> * @res: Pointer to devres data to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free devres created with devres_alloc().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#devres_free\">devres_free</a>(void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#res\">res</a>, struct <a class=\"id\" href=\"#devres\">devres</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#entry\">entry</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dr\">dr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_free\">devres_free</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_add - Register device resource</span>", 
"<span class=\"comment\"> * @dev: Device to add resource to</span>", 
"<span class=\"comment\"> * @res: Resource to register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register devres @res to @dev.  @res should have been allocated</span>", 
"<span class=\"comment\"> * using devres_alloc().  On driver detach, the associated release</span>", 
"<span class=\"comment\"> * function will be invoked and devres will be freed automatically.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#devres_add\">devres_add</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#res\">res</a>, struct <a class=\"id\" href=\"#devres\">devres</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_dr\">add_dr</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_add\">devres_add</a>);", 
"", 
"static struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#find_dr\">find_dr</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dr_release_t\">dr_release_t</a> <a class=\"id\" href=\"#release\">release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#dr_match_t\">dr_match_t</a> <a class=\"id\" href=\"#match\">match</a>, void *<a class=\"id\" href=\"#match_data\">match_data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_node\">devres_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_reverse\">list_for_each_entry_reverse</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_head\">devres_head</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#devres\">devres</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#release\">release</a> != <a class=\"id\" href=\"#release\">release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match\">match</a> && !<a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#match_data\">match_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dr\">dr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_find - Find device resource</span>", 
"<span class=\"comment\"> * @dev: Device to lookup resource from</span>", 
"<span class=\"comment\"> * @release: Look for resources associated with this release function</span>", 
"<span class=\"comment\"> * @match: Match function (optional)</span>", 
"<span class=\"comment\"> * @match_data: Data for the match function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the latest devres of @dev which is associated with @release</span>", 
"<span class=\"comment\"> * and for which @match returns 1.  If @match is NULL, it's considered</span>", 
"<span class=\"comment\"> * to match all.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to found devres, NULL if not found.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#devres_find\">devres_find</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dr_release_t\">dr_release_t</a> <a class=\"id\" href=\"#release\">release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dr_match_t\">dr_match_t</a> <a class=\"id\" href=\"#match\">match</a>, void *<a class=\"id\" href=\"#match_data\">match_data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#find_dr\">find_dr</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#release\">release</a>, <a class=\"id\" href=\"#match\">match</a>, <a class=\"id\" href=\"#match_data\">match_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_find\">devres_find</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_get - Find devres, if non-existent, add one atomically</span>", 
"<span class=\"comment\"> * @dev: Device to lookup or add devres for</span>", 
"<span class=\"comment\"> * @new_res: Pointer to new initialized devres to add if not found</span>", 
"<span class=\"comment\"> * @match: Match function (optional)</span>", 
"<span class=\"comment\"> * @match_data: Data for the match function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the latest devres of @dev which has the same release function</span>", 
"<span class=\"comment\"> * as @new_res and for which @match return 1.  If found, @new_res is</span>", 
"<span class=\"comment\"> * freed; otherwise, @new_res is added atomically.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to found or added devres.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#devres_get\">devres_get</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#new_res\">new_res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dr_match_t\">dr_match_t</a> <a class=\"id\" href=\"#match\">match</a>, void *<a class=\"id\" href=\"#match_data\">match_data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#new_dr\">new_dr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#new_res\">new_res</a>, struct <a class=\"id\" href=\"#devres\">devres</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#find_dr\">find_dr</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#new_dr\">new_dr</a>-><a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#release\">release</a>, <a class=\"id\" href=\"#match\">match</a>, <a class=\"id\" href=\"#match_data\">match_data</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dr\">dr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_dr\">add_dr</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#new_dr\">new_dr</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#new_dr\">new_dr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_dr\">new_dr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_free\">devres_free</a>(<a class=\"id\" href=\"#new_dr\">new_dr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_get\">devres_get</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_remove - Find a device resource and remove it</span>", 
"<span class=\"comment\"> * @dev: Device to find resource from</span>", 
"<span class=\"comment\"> * @release: Look for resources associated with this release function</span>", 
"<span class=\"comment\"> * @match: Match function (optional)</span>", 
"<span class=\"comment\"> * @match_data: Data for the match function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the latest devres of @dev associated with @release and for</span>", 
"<span class=\"comment\"> * which @match returns 1.  If @match is NULL, it's considered to</span>", 
"<span class=\"comment\"> * match all.  If found, the resource is removed atomically and</span>", 
"<span class=\"comment\"> * returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to removed devres on success, NULL if not found.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#devres_remove\">devres_remove</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dr_release_t\">dr_release_t</a> <a class=\"id\" href=\"#release\">release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dr_match_t\">dr_match_t</a> <a class=\"id\" href=\"#match\">match</a>, void *<a class=\"id\" href=\"#match_data\">match_data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#find_dr\">find_dr</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#release\">release</a>, <a class=\"id\" href=\"#match\">match</a>, <a class=\"id\" href=\"#match_data\">match_data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_log\">devres_log</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>, \"REM\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_remove\">devres_remove</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_destroy - Find a device resource and destroy it</span>", 
"<span class=\"comment\"> * @dev: Device to find resource from</span>", 
"<span class=\"comment\"> * @release: Look for resources associated with this release function</span>", 
"<span class=\"comment\"> * @match: Match function (optional)</span>", 
"<span class=\"comment\"> * @match_data: Data for the match function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the latest devres of @dev associated with @release and for</span>", 
"<span class=\"comment\"> * which @match returns 1.  If @match is NULL, it's considered to</span>", 
"<span class=\"comment\"> * match all.  If found, the resource is removed atomically and freed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 if devres is found and freed, -ENOENT if not found.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#devres_destroy\">devres_destroy</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dr_release_t\">dr_release_t</a> <a class=\"id\" href=\"#release\">release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dr_match_t\">dr_match_t</a> <a class=\"id\" href=\"#match\">match</a>, void *<a class=\"id\" href=\"#match_data\">match_data</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#devres_remove\">devres_remove</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#release\">release</a>, <a class=\"id\" href=\"#match\">match</a>, <a class=\"id\" href=\"#match_data\">match_data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_free\">devres_free</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_destroy\">devres_destroy</a>);", 
"", 
"static int <a class=\"id\" href=\"#remove_nodes\">remove_nodes</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#first\">first</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#todo\">todo</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a> = 0, <a class=\"id\" href=\"#nr_groups\">nr_groups</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First pass - move normal devres entries to @todo and clear</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * devres_group colors.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cur\">cur</a> != <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_node\">devres_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_group\">devres_group</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#cur\">cur</a>, struct <a class=\"id\" href=\"#devres_node\">devres_node</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#node_to_group\">node_to_group</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clear color of group markers in the first pass */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#color\">color</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_groups\">nr_groups</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* regular devres entry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#entry\">entry</a> == <a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#todo\">todo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_groups\">nr_groups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Second pass - Scan groups and color them.  A group gets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * color value of two iff the group is wholly contained in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [cur, end).  That is, for a closed group, both opening and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * closing markers should be in the range, while just the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * opening marker is enough for an open group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cur\">cur</a> != <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_node\">devres_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_group\">devres_group</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#cur\">cur</a>, struct <a class=\"id\" href=\"#devres_node\">devres_node</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#node_to_group\">node_to_group</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#grp\">grp</a> || <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[0].<a class=\"id\" href=\"#entry\">entry</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#color\">color</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1].<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#color\">color</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#color\">color</a> <= 0 || <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#color\">color</a> &gt; 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#color\">color</a> == 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No need to update cur or end.  The removed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * nodes are always before both.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[0].<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#todo\">todo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1].<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#release_nodes\">release_nodes</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#first\">first</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#end\">end</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#todo\">todo</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#remove_nodes\">remove_nodes</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#end\">end</a>, &amp;<a class=\"id\" href=\"#todo\">todo</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Release.  Note that both devres and devres_group are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handled as devres in the following loop.  This is safe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe_reverse\">list_for_each_entry_safe_reverse</a>(<a class=\"id\" href=\"#dr\">dr</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#todo\">todo</a>, <a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_log\">devres_log</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>, \"REL\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dr\">dr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_release_all - Release all managed resources</span>", 
"<span class=\"comment\"> * @dev: Device to release resources for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Release all resources associated with @dev.  This function is</span>", 
"<span class=\"comment\"> * called on driver detach.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#devres_release_all\">devres_release_all</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Looks like an uninitialized device structure */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_head\">devres_head</a>.<a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#release_nodes\">release_nodes</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_head\">devres_head</a>.<a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_head\">devres_head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_open_group - Open a new devres group</span>", 
"<span class=\"comment\"> * @dev: Device to open devres group for</span>", 
"<span class=\"comment\"> * @id: Separator ID</span>", 
"<span class=\"comment\"> * @gfp: Allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Open a new devres group for @dev with @id.  For @id, using a</span>", 
"<span class=\"comment\"> * pointer to an object which won't be used for another group is</span>", 
"<span class=\"comment\"> * recommended.  If @id is NULL, address-wise unique ID is created.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * ID of the new group, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#devres_open_group\">devres_open_group</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_group\">devres_group</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#grp\">grp</a>), <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#grp\">grp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[0].<a class=\"id\" href=\"#release\">release</a> = &amp;<a class=\"id\" href=\"#group_open_release\">group_open_release</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1].<a class=\"id\" href=\"#release\">release</a> = &amp;<a class=\"id\" href=\"#group_close_release\">group_close_release</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[0].<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1].<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_node_dbginfo\">set_node_dbginfo</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[0], \"grp<\", 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_node_dbginfo\">set_node_dbginfo</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1], \"grp>\", 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_dr\">add_dr</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_open_group\">devres_open_group</a>);", 
"", 
"<span class=\"comment\">/* Find devres group with ID @id.  If @id is NULL, look for the latest. */</span>", 
"static struct <a class=\"id\" href=\"#devres_group\">devres_group</a> * <a class=\"id\" href=\"#find_group\">find_group</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_node\">devres_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_reverse\">list_for_each_entry_reverse</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_head\">devres_head</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_group\">devres_group</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#release\">release</a> != &amp;<a class=\"id\" href=\"#group_open_release\">group_open_release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#devres_group\">devres_group</a>, <a class=\"id\" href=\"#node\">node</a>[0]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1].<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_close_group - Close a devres group</span>", 
"<span class=\"comment\"> * @dev: Device to close devres group for</span>", 
"<span class=\"comment\"> * @id: ID of target group, can be NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Close the group identified by @id.  If @id is NULL, the latest open</span>", 
"<span class=\"comment\"> * group is selected.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#devres_close_group\">devres_close_group</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_group\">devres_group</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#find_group\">find_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_dr\">add_dr</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1]);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
];
xr_frag_insert('l/dd/fdf861f4bbb4140ca84be81554b49b336d3222.xr', __xr_tmp);
