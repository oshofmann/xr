var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86 single-step support code, common to 32-bit and 64-bit.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"unsigned long <a class=\"id\" href=\"#convert_ip_to_linear\">convert_ip_to_linear</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#seg\">seg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seg\">seg</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> &amp; 0xffff;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v8086_mode\">v8086_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#addr\">addr</a> &amp; 0xffff) + (<a class=\"id\" href=\"#seg\">seg</a> << 4);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We'll assume that the code segments in the GDT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are all zero-based. That is largely true: the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TLS segments are used for data, and the PNPBIOS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and APM bios ones we just ignore here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#seg\">seg</a> &amp; <a class=\"id\" href=\"#SEGMENT_TI_MASK\">SEGMENT_TI_MASK</a>) == <a class=\"id\" href=\"#SEGMENT_LDT\">SEGMENT_LDT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seg\">seg</a> &= ~7UL;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#context\">context</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#seg\">seg</a> >> 3) >= <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#context\">context</a>.<a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = -1L; <span class=\"comment\">/* bogus selector, access would fault */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#context\">context</a>.<a class=\"id\" href=\"#ldt\">ldt</a> + <a class=\"id\" href=\"#seg\">seg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#get_desc_base\">get_desc_base</a>(<a class=\"id\" href=\"#desc\">desc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 16-bit code segment? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#d\">d</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> &= 0xffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#context\">context</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#is_setting_trap_flag\">is_setting_trap_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#opcode\">opcode</a>[15];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#convert_ip_to_linear\">convert_ip_to_linear</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = <a class=\"id\" href=\"#access_process_vm\">access_process_vm</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#opcode\">opcode</a>, sizeof(<a class=\"id\" href=\"#opcode\">opcode</a>), 0);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#copied\">copied</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#opcode\">opcode</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* popf and iret */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x9d: case 0xcf:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CHECKME: 64 65 */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* opcode and address size prefixes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x66: case 0x67:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* irrelevant prefixes (segment overrides and repeats) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x26: case 0x2e:", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x36: case 0x3e:", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x64: case 0x65:", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0xf0: case 0xf2: case 0xf3:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x40 ... 0x4f:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> != <a class=\"id\" href=\"#__USER_CS\">__USER_CS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 32-bit mode: register increment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 64-bit mode: REX prefix */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CHECKME: f2, f3 */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pushf: NOTE! We should probably not let</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the user see the TF bit being set. But</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it's more pain than it's worth to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it, and a debugger could emulate this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * all in user space if it _really_ cares.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x9c:", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enable single-stepping.  Return nonzero if user mode is not using TF itself.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#enable_single_step\">enable_single_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#oflags\">oflags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we stepped into a sysenter/syscall insn, it trapped in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel mode; do_debug() cleared TF and set TIF_SINGLESTEP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If user-mode had set TF itself, then it's still clear from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do_debug() and we need to set it again to restore the user</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state so we don't wrongly set TIF_FORCED_TF below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If enable_single_step() was used last and that is what</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set TIF_SINGLESTEP, then both TF and TIF_FORCED_TF are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already set and our bookkeeping is fine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_SINGLESTEP\">TIF_SINGLESTEP</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always set TIF_SINGLESTEP - this guarantees that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we single-step system calls etc..  This will also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cause us to set TF when returning to user mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_SINGLESTEP\">TIF_SINGLESTEP</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oflags\">oflags</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set TF on the kernel stack.. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ..but if TF is changed by the instruction we will trace,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't mark it as being \"us\" that set it, so that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * won't clear it by hand later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that if we don't actually execute the popf because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of a signal arriving right now or suchlike, we will lose</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * track of the fact that it really was \"us\" that set it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_setting_trap_flag\">is_setting_trap_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_FORCED_TF\">TIF_FORCED_TF</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If TF was already set, check whether it was us who set it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If not, we should never attempt a block step.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oflags\">oflags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_FORCED_TF\">TIF_FORCED_TF</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_FORCED_TF\">TIF_FORCED_TF</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enable single or block step.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#enable_step\">enable_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure block stepping (BTF) is not enabled unless it should be.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that we don't try to worry about any is_setting_trap_flag()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * instructions after the first when using block stepping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So noone should try to use debugger block stepping in a program</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that uses user-mode single stepping itself.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable_single_step\">enable_single_step</a>(<a class=\"id\" href=\"#child\">child</a>) && <a class=\"id\" href=\"#block\">block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debugctl\">debugctl</a> = <a class=\"id\" href=\"#get_debugctlmsr\">get_debugctlmsr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugctl\">debugctl</a> |= <a class=\"id\" href=\"#DEBUGCTLMSR_BTF\">DEBUGCTLMSR_BTF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_debugctlmsr\">update_debugctlmsr</a>(<a class=\"id\" href=\"#debugctl\">debugctl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debugctl\">debugctl</a> = <a class=\"id\" href=\"#get_debugctlmsr\">get_debugctlmsr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugctl\">debugctl</a> &= ~<a class=\"id\" href=\"#DEBUGCTLMSR_BTF\">DEBUGCTLMSR_BTF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_debugctlmsr\">update_debugctlmsr</a>(<a class=\"id\" href=\"#debugctl\">debugctl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#user_enable_single_step\">user_enable_single_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_step\">enable_step</a>(<a class=\"id\" href=\"#child\">child</a>, 0);", 
"}", 
"", 
"void <a class=\"id\" href=\"#user_enable_block_step\">user_enable_block_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_step\">enable_step</a>(<a class=\"id\" href=\"#child\">child</a>, 1);", 
"}", 
"", 
"void <a class=\"id\" href=\"#user_disable_single_step\">user_disable_single_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure block stepping (BTF) is disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debugctl\">debugctl</a> = <a class=\"id\" href=\"#get_debugctlmsr\">get_debugctlmsr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugctl\">debugctl</a> &= ~<a class=\"id\" href=\"#DEBUGCTLMSR_BTF\">DEBUGCTLMSR_BTF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_debugctlmsr\">update_debugctlmsr</a>(<a class=\"id\" href=\"#debugctl\">debugctl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always clear TIF_SINGLESTEP... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_SINGLESTEP\">TIF_SINGLESTEP</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* But touch TF only if it was set by us.. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_tsk_thread_flag\">test_and_clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_FORCED_TF\">TIF_FORCED_TF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#child\">child</a>)-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"}", 
];
xr_frag_insert('l/de/756dd51b9194f95843e33bc4876d63b89f45e4.xr', __xr_tmp);
