var __xr_tmp = [
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Read block address from @tf.  This function can handle all</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>three address formats - LBA, LBA48 and CHS.  tf-&gt;protocol and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>flags select the address format to use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Block address read from @tf.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ata_tf_read_block\">ata_tf_read_block</a>(struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>, struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#block\">block</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_TFLAG_LBA\">ATA_TFLAG_LBA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> |= (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbah\">hob_lbah</a> << 40;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> |= (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbam\">hob_lbam</a> << 32;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> |= (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbal\">hob_lbal</a> << 24;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> |= (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> &amp; 0xf) << 24;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> |= <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> << 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> |= <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> << 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> |= <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cyl\">cyl</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#sect\">sect</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cyl\">cyl</a> = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> | (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> << 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> &amp; 0xf;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sect\">sect</a> = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sect\">sect</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, \"device reported \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"invalid CHS sector 0\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sect\">sect</a> = 1; <span class=\"comment\">/* oh well */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = (<a class=\"id\" href=\"#cyl\">cyl</a> * <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#heads\">heads</a> + <a class=\"id\" href=\"#head\">head</a>) * <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sectors\">sectors</a> + <a class=\"id\" href=\"#sect\">sect</a> - 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block\">block</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_build_rw_tf - Build ATA taskfile for given read/write request</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tf: Target ATA taskfile</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: ATA device @tf belongs to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@block: Block address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n_block: Number of blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tf_flags: RW/FUA etc...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tag: tag</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Build ATA taskfile @tf for read/write request described by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@block, @n_block, @tf_flags and @tag on @dev.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -ERANGE if the request is too large for @dev,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>-EINVAL if the request is invalid.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_build_rw_tf\">ata_build_rw_tf</a>(struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>, struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#n_block\">n_block</a>, unsigned int <a class=\"id\" href=\"#tf_flags\">tf_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#tf_flags\">tf_flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_ncq_enabled\">ata_ncq_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>) && <a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#tag\">tag</a> != <a class=\"id\" href=\"#ATA_TAG_INTERNAL\">ATA_TAG_INTERNAL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* yay, NCQ */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#lba_48_ok\">lba_48_ok</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#n_block\">n_block</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_NCQ\">ATA_PROT_NCQ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_LBA\">ATA_TFLAG_LBA</a> | <a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_TFLAG_WRITE\">ATA_TFLAG_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_FPDMA_WRITE\">ATA_CMD_FPDMA_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_FPDMA_READ\">ATA_CMD_FPDMA_READ</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#tag\">tag</a> << 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_feature\">hob_feature</a> = (<a class=\"id\" href=\"#n_block\">n_block</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> = <a class=\"id\" href=\"#n_block\">n_block</a> &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbah\">hob_lbah</a> = (<a class=\"id\" href=\"#block\">block</a> >> 40) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbam\">hob_lbam</a> = (<a class=\"id\" href=\"#block\">block</a> >> 32) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbal\">hob_lbal</a> = (<a class=\"id\" href=\"#block\">block</a> >> 24) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> = (<a class=\"id\" href=\"#block\">block</a> >> 16) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> = (<a class=\"id\" href=\"#block\">block</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> = <a class=\"id\" href=\"#block\">block</a> &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> = 1 << 6;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_TFLAG_FUA\">ATA_TFLAG_FUA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> |= 1 << 7;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_LBA\">ATA_DFLAG_LBA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_LBA\">ATA_TFLAG_LBA</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lba_28_ok\">lba_28_ok</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#n_block\">n_block</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use LBA28 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> |= (<a class=\"id\" href=\"#block\">block</a> >> 24) &amp; 0xf;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#lba_48_ok\">lba_48_ok</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#n_block\">n_block</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_LBA48\">ATA_DFLAG_LBA48</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use LBA48 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_nsect\">hob_nsect</a> = (<a class=\"id\" href=\"#n_block\">n_block</a> >> 8) &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbah\">hob_lbah</a> = (<a class=\"id\" href=\"#block\">block</a> >> 40) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbam\">hob_lbam</a> = (<a class=\"id\" href=\"#block\">block</a> >> 32) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbal\">hob_lbal</a> = (<a class=\"id\" href=\"#block\">block</a> >> 24) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* request too large even for LBA48 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ata_rwcmd_protocol\">ata_rwcmd_protocol</a>(<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#dev\">dev</a>) &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#n_block\">n_block</a> &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> = (<a class=\"id\" href=\"#block\">block</a> >> 16) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> = (<a class=\"id\" href=\"#block\">block</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> = <a class=\"id\" href=\"#block\">block</a> &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> |= <a class=\"id\" href=\"#ATA_LBA\">ATA_LBA</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CHS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sect\">sect</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#cyl\">cyl</a>, <a class=\"id\" href=\"#track\">track</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The request -may- be too large for CHS addressing. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#lba_28_ok\">lba_28_ok</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#n_block\">n_block</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ata_rwcmd_protocol\">ata_rwcmd_protocol</a>(<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#dev\">dev</a>) &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Convert LBA to CHS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#track\">track</a> = (<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#block\">block</a> / <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sectors\">sectors</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cyl\">cyl</a>   = <a class=\"id\" href=\"#track\">track</a> / <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#heads\">heads</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>  = <a class=\"id\" href=\"#track\">track</a> % <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#heads\">heads</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sect\">sect</a>  = (<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#block\">block</a> % <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sectors\">sectors</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"block %u track %u cyl %u head %u sect %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#track\">track</a>, <a class=\"id\" href=\"#cyl\">cyl</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#sect\">sect</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check whether the converted CHS can fit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Cylinder: 0-65535</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Head: 0-15</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Sector: 1-255*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cyl\">cyl</a> >> 16) || (<a class=\"id\" href=\"#head\">head</a> >> 4) || (<a class=\"id\" href=\"#sect\">sect</a> >> 8) || (!<a class=\"id\" href=\"#sect\">sect</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#n_block\">n_block</a> &amp; 0xff; <span class=\"comment\">/* Sector count 0 means 256 sectors */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> = <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> = <a class=\"id\" href=\"#cyl\">cyl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> = <a class=\"id\" href=\"#cyl\">cyl</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> |= <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pack_xfermask - Pack pio, mwdma and udma masks into xfer_mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pio_mask: pio_mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mwdma_mask: mwdma_mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@udma_mask: udma_mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pack @pio_mask, @mwdma_mask and @udma_mask into a single</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unsigned int xfer_mask.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Packed xfer_mask.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ata_pack_xfermask\">ata_pack_xfermask</a>(unsigned long <a class=\"id\" href=\"#pio_mask\">pio_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#udma_mask\">udma_mask</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#pio_mask\">pio_mask</a> << <a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a>) &amp; <a class=\"id\" href=\"#ATA_MASK_PIO\">ATA_MASK_PIO</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> << <a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a>) &amp; <a class=\"id\" href=\"#ATA_MASK_MWDMA\">ATA_MASK_MWDMA</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#udma_mask\">udma_mask</a> << <a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a>) &amp; <a class=\"id\" href=\"#ATA_MASK_UDMA\">ATA_MASK_UDMA</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_unpack_xfermask - Unpack xfer_mask into pio, mwdma and udma masks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@xfer_mask: xfer_mask to unpack</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pio_mask: resulting pio_mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mwdma_mask: resulting mwdma_mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@udma_mask: resulting udma_mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unpack @xfer_mask into @pio_mask, @mwdma_mask and @udma_mask.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Any NULL distination masks will be ignored.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_unpack_xfermask\">ata_unpack_xfermask</a>(unsigned long <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>, unsigned long *<a class=\"id\" href=\"#pio_mask\">pio_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long *<a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>, unsigned long *<a class=\"id\" href=\"#udma_mask\">udma_mask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pio_mask\">pio_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pio_mask\">pio_mask</a> = (<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &amp; <a class=\"id\" href=\"#ATA_MASK_PIO\">ATA_MASK_PIO</a>) >> <a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> = (<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &amp; <a class=\"id\" href=\"#ATA_MASK_MWDMA\">ATA_MASK_MWDMA</a>) >> <a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#udma_mask\">udma_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#udma_mask\">udma_mask</a> = (<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &amp; <a class=\"id\" href=\"#ATA_MASK_UDMA\">ATA_MASK_UDMA</a>) >> <a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#ata_xfer_ent\">ata_xfer_ent</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a>, <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#base\">base</a>;", 
"} <a class=\"id\" href=\"#ata_xfer_tbl\">ata_xfer_tbl</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a>, <a class=\"id\" href=\"#ATA_NR_PIO_MODES\">ATA_NR_PIO_MODES</a>, <a class=\"id\" href=\"#XFER_PIO_0\">XFER_PIO_0</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a>, <a class=\"id\" href=\"#ATA_NR_MWDMA_MODES\">ATA_NR_MWDMA_MODES</a>, <a class=\"id\" href=\"#XFER_MW_DMA_0\">XFER_MW_DMA_0</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a>, <a class=\"id\" href=\"#ATA_NR_UDMA_MODES\">ATA_NR_UDMA_MODES</a>, <a class=\"id\" href=\"#XFER_UDMA_0\">XFER_UDMA_0</a> },", 
"<span class=\"ts\"/>{ -1, },", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_xfer_mask2mode - Find matching XFER_* for the given xfer_mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@xfer_mask: xfer_mask of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return matching XFER_* value for @xfer_mask.  Only the highest</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bit of @xfer_mask is considered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Matching XFER_* value, 0xff if no match found.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ata_xfer_mask2mode\">ata_xfer_mask2mode</a>(unsigned long <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#highbit\">highbit</a> = <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>) - 1;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_xfer_ent\">ata_xfer_ent</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#ata_xfer_tbl\">ata_xfer_tbl</a>; <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#shift\">shift</a> >= 0; <a class=\"id\" href=\"#ent\">ent</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#highbit\">highbit</a> >= <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#shift\">shift</a> && <a class=\"id\" href=\"#highbit\">highbit</a> &lt; <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#shift\">shift</a> + <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#bits\">bits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#highbit\">highbit</a> - <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>return 0xff;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_xfer_mode2mask - Find matching xfer_mask for XFER_*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@xfer_mode: XFER_* of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return matching xfer_mask for @xfer_mode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Matching xfer_mask, 0 if no match found.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ata_xfer_mode2mask\">ata_xfer_mode2mask</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#xfer_mode\">xfer_mode</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_xfer_ent\">ata_xfer_ent</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#ata_xfer_tbl\">ata_xfer_tbl</a>; <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#shift\">shift</a> >= 0; <a class=\"id\" href=\"#ent\">ent</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#xfer_mode\">xfer_mode</a> >= <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#base\">base</a> && <a class=\"id\" href=\"#xfer_mode\">xfer_mode</a> &lt; <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#bits\">bits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return ((2 << (<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#shift\">shift</a> + <a class=\"id\" href=\"#xfer_mode\">xfer_mode</a> - <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#base\">base</a>)) - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp; ~((1 << <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#shift\">shift</a>) - 1);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_xfer_mode2shift - Find matching xfer_shift for XFER_*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@xfer_mode: XFER_* of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return matching xfer_shift for @xfer_mode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Matching xfer_shift, -1 if no match found.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_xfer_mode2shift\">ata_xfer_mode2shift</a>(unsigned long <a class=\"id\" href=\"#xfer_mode\">xfer_mode</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_xfer_ent\">ata_xfer_ent</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#ata_xfer_tbl\">ata_xfer_tbl</a>; <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#shift\">shift</a> >= 0; <a class=\"id\" href=\"#ent\">ent</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#xfer_mode\">xfer_mode</a> >= <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#base\">base</a> && <a class=\"id\" href=\"#xfer_mode\">xfer_mode</a> &lt; <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#bits\">bits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_mode_string - convert xfer_mask to string</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@xfer_mask: mask of bits supported; only highest bit counts.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Determine string which represents the highest speed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(highest bit in @modemask).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Constant C string representing highest speed listed in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode_mask, or the constant C string \"&lt;n/a&gt;\".</span>", 
"<span class=\"comment\"> */</span>", 
"const char *<a class=\"id\" href=\"#ata_mode_string\">ata_mode_string</a>(unsigned long <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>)", 
"{", 
"<span class=\"ts\"/>static const char * const <a class=\"id\" href=\"#xfer_mode_str\">xfer_mode_str</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>\"PIO0\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"PIO1\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"PIO2\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"PIO3\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"PIO4\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"PIO5\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"PIO6\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"MWDMA0\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"MWDMA1\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"MWDMA2\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"MWDMA3\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"MWDMA4\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"UDMA/16\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"UDMA/25\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"UDMA/33\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"UDMA/44\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"UDMA/66\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"UDMA/100\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"UDMA/133\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"UDMA7\",", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#highbit\">highbit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#highbit\">highbit</a> = <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>) - 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#highbit\">highbit</a> >= 0 && <a class=\"id\" href=\"#highbit\">highbit</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#xfer_mode_str\">xfer_mode_str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#xfer_mode_str\">xfer_mode_str</a>[<a class=\"id\" href=\"#highbit\">highbit</a>];", 
"<span class=\"ts\"/>return \"<n/a>\";", 
"}", 
"", 
"static const char *<a class=\"id\" href=\"#sata_spd_string\">sata_spd_string</a>(unsigned int <a class=\"id\" href=\"#spd\">spd</a>)", 
"{", 
"<span class=\"ts\"/>static const char * const <a class=\"id\" href=\"#spd_str\">spd_str</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>\"1.5 Gbps\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"3.0 Gbps\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"6.0 Gbps\",", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spd\">spd</a> == 0 || (<a class=\"id\" href=\"#spd\">spd</a> - 1) >= <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#spd_str\">spd_str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"<unknown>\";", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#spd_str\">spd_str</a>[<a class=\"id\" href=\"#spd\">spd</a> - 1];", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ata_dev_set_dipm\">ata_dev_set_dipm</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, enum <a class=\"id\" href=\"#link_pm\">link_pm</a> <a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#scontrol\">scontrol</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disallow DIPM for drivers which haven't set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ATA_FLAG_IPM.  This is because when DIPM is enabled,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * phy ready will be set in the interrupt status on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state changes, which will cause some drivers to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * think there are errors - additionally drivers will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to disable hot plug.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_IPM\">ATA_FLAG_IPM</a>) || !<a class=\"id\" href=\"#ata_dev_enabled\">ata_dev_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pm_policy\">pm_policy</a> = <a class=\"id\" href=\"#NOT_AVAILABLE\">NOT_AVAILABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For DIPM, we will only enable it for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * min_power setting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Why?  Because Disks are too stupid to know that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the host rejects a request to go to SLUMBER</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they should retry at PARTIAL, and instead it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just would give up.  So, for medium_power to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * work at all, we need to only allow HIPM.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sata_scr_read\">sata_scr_read</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#SCR_CONTROL\">SCR_CONTROL</a>, &amp;<a class=\"id\" href=\"#scontrol\">scontrol</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#policy\">policy</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MIN_POWER\">MIN_POWER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no restrictions on IPM transitions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scontrol\">scontrol</a> &= ~(0x3 << 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sata_scr_write\">sata_scr_write</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#SCR_CONTROL\">SCR_CONTROL</a>, <a class=\"id\" href=\"#scontrol\">scontrol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* enable DIPM */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_DIPM\">ATA_DFLAG_DIPM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_dev_set_feature\">ata_dev_set_feature</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SETFEATURES_SATA_ENABLE\">SETFEATURES_SATA_ENABLE</a>, <a class=\"id\" href=\"#SATA_DIPM\">SATA_DIPM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEDIUM_POWER\">MEDIUM_POWER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allow IPM to PARTIAL */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scontrol\">scontrol</a> &= ~(0x1 << 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scontrol\">scontrol</a> |= (0x2 << 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sata_scr_write\">sata_scr_write</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#SCR_CONTROL\">SCR_CONTROL</a>, <a class=\"id\" href=\"#scontrol\">scontrol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we don't have to disable DIPM since IPM flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disallow transitions to SLUMBER, which effectively</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disable DIPM if it does not support PARTIAL</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NOT_AVAILABLE\">NOT_AVAILABLE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MAX_PERFORMANCE\">MAX_PERFORMANCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* disable all IPM transitions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scontrol\">scontrol</a> |= (0x3 << 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sata_scr_write\">sata_scr_write</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#SCR_CONTROL\">SCR_CONTROL</a>, <a class=\"id\" href=\"#scontrol\">scontrol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we don't have to disable DIPM since IPM flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disallow all transitions which effectively</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disable DIPM anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: handle SET FEATURES failure */</span>", 
"<span class=\"ts\"/>(void) <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_enable_pm - enable SATA interface power management</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev:  device to enable power management</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@policy: the link power management policy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Enable SATA Interface power management.  This will enable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Device Interface Power Management (DIPM) for min_power</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>policy, and then call driver specific callbacks for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>enabling Host Initiated Power management.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: Caller.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns: -EINVAL if IPM is not supported, 0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_dev_enable_pm\">ata_dev_enable_pm</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, enum <a class=\"id\" href=\"#link_pm\">link_pm</a> <a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set HIPM first, then DIPM */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#enable_pm\">enable_pm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#enable_pm\">enable_pm</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#policy\">policy</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#enable_pm_out\">enable_pm_out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_dev_set_dipm\">ata_dev_set_dipm</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#policy\">policy</a>);", 
"", 
"<a class=\"id\" href=\"#enable_pm_out\">enable_pm_out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pm_policy\">pm_policy</a> = <a class=\"id\" href=\"#MAX_PERFORMANCE\">MAX_PERFORMANCE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pm_policy\">pm_policy</a> = <a class=\"id\" href=\"#policy\">policy</a>;", 
"<span class=\"ts\"/>return <span class=\"comment\">/* rc */</span>;<span class=\"ts\"/><span class=\"comment\">/* hopefully we can use 'rc' eventually */</span>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_disable_pm - disable SATA interface power management</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to disable power management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Disable SATA Interface power management.  This will disable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Device Interface Power Management (DIPM) without changing</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>policy,  call driver specific callbacks for disabling Host</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Initiated Power management.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: Caller.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns: void</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_dev_disable_pm\">ata_dev_disable_pm</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_set_dipm\">ata_dev_set_dipm</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#MAX_PERFORMANCE\">MAX_PERFORMANCE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#disable_pm\">disable_pm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#disable_pm\">disable_pm</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_PM */</span>", 
"", 
"void <a class=\"id\" href=\"#ata_lpm_schedule\">ata_lpm_schedule</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, enum <a class=\"id\" href=\"#link_pm\">link_pm</a> <a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pm_policy\">pm_policy</a> = <a class=\"id\" href=\"#policy\">policy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_info\">eh_info</a>.<a class=\"id\" href=\"#action\">action</a> |= <a class=\"id\" href=\"#ATA_EH_LPM\">ATA_EH_LPM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_info\">eh_info</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_EHI_NO_AUTOPSY\">ATA_EHI_NO_AUTOPSY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_port_schedule_eh\">ata_port_schedule_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"static void <a class=\"id\" href=\"#ata_lpm_enable\">ata_lpm_enable</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_link\">ata_for_each_link</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#EDGE\">EDGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ALL\">ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_disable_pm\">ata_dev_disable_pm</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_lpm_disable\">ata_lpm_disable</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_lpm_schedule\">ata_lpm_schedule</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pm_policy\">pm_policy</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_PM */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_classify - determine device type based on ATA-spec signature</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tf: ATA taskfile register set for device to be identified</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Determine from taskfile register contents whether a device is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ATA or ATAPI, as per \"Signature and persistence\" section</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of ATA/PI spec (volume 1, sect 5.14).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Device type, %ATA_DEV_ATA, %ATA_DEV_ATAPI, %ATA_DEV_PMP or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%ATA_DEV_UNKNOWN the event of failure.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#ata_dev_classify\">ata_dev_classify</a>(const struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Apple's open source Darwin code hints that some devices only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * put a proper signature into the LBA mid/high registers,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, we only check those.  It's sufficient for uniqueness.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ATA/ATAPI-7 (d1532v1r1: Feb. 19, 2003) specified separate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * signatures for ATA and ATAPI devices attached on SerialATA,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 0x3c/0xc3 and 0x69/0x96 respectively.  However, SerialATA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * spec has never mentioned about using different signatures</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for ATA/ATAPI devices.  Then, Serial ATA II: Port</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Multiplier specification began to use 0x69/0x96 to identify</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * port multpliers and 0x3c/0xc3 to identify SEMB device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ATA/ATAPI-7 dropped descriptions about 0x3c/0xc3 and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 0x69/0x96 shortly and described them as reserved for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SerialATA.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We follow the current spec and consider that 0x69/0x96</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * identifies a port multiplier and 0x3c/0xc3 a SEMB device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unfortunately, WDC WD1600JS-62MHB5 (a hard drive) reports</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SEMB signature.  This is worked around in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ata_dev_read_id().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> == 0) && (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"found ATA device by sig\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> == 0x14) && (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> == 0xeb)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"found ATAPI device by sig\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_DEV_ATAPI\">ATA_DEV_ATAPI</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> == 0x69) && (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> == 0x96)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"found PMP device by sig\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_DEV_PMP\">ATA_DEV_PMP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> == 0x3c) && (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> == 0xc3)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"found SEMB device by sig (could be ATA device)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_DEV_SEMB\">ATA_DEV_SEMB</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"unknown device\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_DEV_UNKNOWN\">ATA_DEV_UNKNOWN</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_id_string - Convert IDENTIFY DEVICE page into string</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: IDENTIFY DEVICE results we will examine</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@s: string into which data is output</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ofs: offset into identify device page</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: length of string to return. must be an even number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The strings in the IDENTIFY DEVICE page are broken up into</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>16-bit chunks.  Run through the string, and output each</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>8-bit chunk linearly, regardless of platform.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>caller.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>, unsigned char *<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#ofs\">ofs</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#len\">len</a> &amp; 1);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ofs\">ofs</a>] >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ofs\">ofs</a>] &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ofs\">ofs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= 2;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_id_c_string - Convert IDENTIFY DEVICE page into C string</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: IDENTIFY DEVICE results we will examine</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@s: string into which data is output</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ofs: offset into identify device page</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: length of string to return. must be an odd number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is identical to ata_id_string except that it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>trims trailing spaces and terminates the resulting string with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>null.  @len must be actual maximum length (even number) + 1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>caller.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_id_c_string\">ata_id_c_string</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>, unsigned char *<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#ofs\">ofs</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#ofs\">ofs</a>, <a class=\"id\" href=\"#len\">len</a> - 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#s\">s</a> + <a class=\"id\" href=\"#strnlen\">strnlen</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#len\">len</a> - 1);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> &gt; <a class=\"id\" href=\"#s\">s</a> && <a class=\"id\" href=\"#p\">p</a>[-1] == ' ')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>--;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '\\0';", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ata_id_n_sectors\">ata_id_n_sectors</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_has_lba\">ata_id_has_lba</a>(<a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_has_lba48\">ata_id_has_lba48</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_id_u64\">ata_id_u64</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_LBA_CAPACITY_2\">ATA_ID_LBA_CAPACITY_2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_id_u32\">ata_id_u32</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_LBA_CAPACITY\">ATA_ID_LBA_CAPACITY</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_current_chs_valid\">ata_id_current_chs_valid</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_CYLS\">ATA_ID_CUR_CYLS</a>] * <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_HEADS\">ATA_ID_CUR_HEADS</a>] *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_SECTORS\">ATA_ID_CUR_SECTORS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CYLS\">ATA_ID_CYLS</a>] * <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>] *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SECTORS\">ATA_ID_SECTORS</a>];", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ata_tf_to_lba48\">ata_tf_to_lba48</a>(const struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sectors\">sectors</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbah\">hob_lbah</a> &amp; 0xff)) << 40;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbam\">hob_lbam</a> &amp; 0xff)) << 32;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbal\">hob_lbal</a> &amp; 0xff)) << 24;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> &amp; 0xff) << 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> &amp; 0xff) << 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> &amp; 0xff);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sectors\">sectors</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ata_tf_to_lba\">ata_tf_to_lba</a>(const struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sectors\">sectors</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> &amp; 0x0f) << 24;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> &amp; 0xff) << 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> &amp; 0xff) << 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> |= (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> &amp; 0xff);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sectors\">sectors</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_read_native_max_address - Read native max address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: target device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_sectors: out parameter for the result native max address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Perform an LBA48 or LBA28 native size query upon the device in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>question.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -EACCES if command is aborted by the drive.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>-EIO on other errors.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_read_native_max_address\">ata_read_native_max_address</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#max_sectors\">max_sectors</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lba48\">lba48</a> = <a class=\"id\" href=\"#ata_id_has_lba48\">ata_id_has_lba48</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_tf_init\">ata_tf_init</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* always clear all address registers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a> | <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lba48\">lba48</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_READ_NATIVE_MAX_EXT\">ATA_CMD_READ_NATIVE_MAX_EXT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_READ_NATIVE_MAX\">ATA_CMD_READ_NATIVE_MAX</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> |= <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#device\">device</a> |= <a class=\"id\" href=\"#ATA_LBA\">ATA_LBA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_exec_internal\">ata_exec_internal</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, \"failed to read native \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"max address (err_mask=0x%x)\\n\", <a class=\"id\" href=\"#err_mask\">err_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a> == <a class=\"id\" href=\"#AC_ERR_DEV\">AC_ERR_DEV</a> && (<a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> &amp; <a class=\"id\" href=\"#ATA_ABORTED\">ATA_ABORTED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lba48\">lba48</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#ata_tf_to_lba48\">ata_tf_to_lba48</a>(&amp;<a class=\"id\" href=\"#tf\">tf</a>) + 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#ata_tf_to_lba\">ata_tf_to_lba</a>(&amp;<a class=\"id\" href=\"#tf\">tf</a>) + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_HPA_SIZE\">ATA_HORKAGE_HPA_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#max_sectors\">max_sectors</a>)--;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_set_max_sectors - Set max sectors</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: target device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_sectors: new max sectors value to set for the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set max sectors of @dev to @new_sectors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -EACCES if command is aborted or denied (due to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>previous non-volatile SET_MAX) by the drive.  -EIO on other</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>errors.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_set_max_sectors\">ata_set_max_sectors</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#new_sectors\">new_sectors</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lba48\">lba48</a> = <a class=\"id\" href=\"#ata_id_has_lba48\">ata_id_has_lba48</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_sectors\">new_sectors</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_tf_init\">ata_tf_init</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a> | <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lba48\">lba48</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_SET_MAX_EXT\">ATA_CMD_SET_MAX_EXT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#hob_lbal\">hob_lbal</a> = (<a class=\"id\" href=\"#new_sectors\">new_sectors</a> >> 24) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#hob_lbam\">hob_lbam</a> = (<a class=\"id\" href=\"#new_sectors\">new_sectors</a> >> 32) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#hob_lbah\">hob_lbah</a> = (<a class=\"id\" href=\"#new_sectors\">new_sectors</a> >> 40) &amp; 0xff;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_SET_MAX\">ATA_CMD_SET_MAX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#device\">device</a> |= (<a class=\"id\" href=\"#new_sectors\">new_sectors</a> >> 24) &amp; 0xf;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> |= <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#device\">device</a> |= <a class=\"id\" href=\"#ATA_LBA\">ATA_LBA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbal\">lbal</a> = (<a class=\"id\" href=\"#new_sectors\">new_sectors</a> >> 0) &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbam\">lbam</a> = (<a class=\"id\" href=\"#new_sectors\">new_sectors</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbah\">lbah</a> = (<a class=\"id\" href=\"#new_sectors\">new_sectors</a> >> 16) &amp; 0xff;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_exec_internal\">ata_exec_internal</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, \"failed to set \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"max address (err_mask=0x%x)\\n\", <a class=\"id\" href=\"#err_mask\">err_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a> == <a class=\"id\" href=\"#AC_ERR_DEV\">AC_ERR_DEV</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> &amp; (<a class=\"id\" href=\"#ATA_ABORTED\">ATA_ABORTED</a> | <a class=\"id\" href=\"#ATA_IDNF\">ATA_IDNF</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_hpa_resize<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>Resize a device with an HPA set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device to resize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Read the size of an LBA28 or LBA48 disk with HPA features and resize</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it if required to the full size of the media. The caller must check</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the drive has the HPA feature set enabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_hpa_resize\">ata_hpa_resize</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_context\">ata_eh_context</a> *<a class=\"id\" href=\"#ehc\">ehc</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#print_info\">print_info</a> = <a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_EHI_PRINTINFO\">ATA_EHI_PRINTINFO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#unlock_hpa\">unlock_hpa</a> = <a class=\"id\" href=\"#ata_ignore_hpa\">ata_ignore_hpa</a> || <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_UNLOCK_HPA\">ATA_DFLAG_UNLOCK_HPA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sectors\">sectors</a> = <a class=\"id\" href=\"#ata_id_n_sectors\">ata_id_n_sectors</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#native_sectors\">native_sectors</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do we need to do it? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> != <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#ata_id_has_lba\">ata_id_has_lba</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>) || !<a class=\"id\" href=\"#ata_id_hpa_enabled\">ata_id_hpa_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_BROKEN_HPA\">ATA_HORKAGE_BROKEN_HPA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read native max address */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_read_native_max_address\">ata_read_native_max_address</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#native_sectors\">native_sectors</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If device aborted the command or HPA isn't going to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be unlocked, skip HPA resizing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EACCES\">EACCES</a> || !<a class=\"id\" href=\"#unlock_hpa\">unlock_hpa</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, \"HPA support seems \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"broken, skipping HPA handling\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> |= <a class=\"id\" href=\"#ATA_HORKAGE_BROKEN_HPA\">ATA_HORKAGE_BROKEN_HPA</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we can continue if device aborted the command */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EACCES\">EACCES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#n_native_sectors\">n_native_sectors</a> = <a class=\"id\" href=\"#native_sectors\">native_sectors</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* nothing to do? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#native_sectors\">native_sectors</a> <= <a class=\"id\" href=\"#sectors\">sectors</a> || !<a class=\"id\" href=\"#unlock_hpa\">unlock_hpa</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#print_info\">print_info</a> || <a class=\"id\" href=\"#native_sectors\">native_sectors</a> == <a class=\"id\" href=\"#sectors\">sectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#native_sectors\">native_sectors</a> &gt; <a class=\"id\" href=\"#sectors\">sectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"HPA detected: current %llu, native %llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#sectors\">sectors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#native_sectors\">native_sectors</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#native_sectors\">native_sectors</a> &lt; <a class=\"id\" href=\"#sectors\">sectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"native sectors (%llu) is smaller than \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"sectors (%llu)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#native_sectors\">native_sectors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#sectors\">sectors</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* let's unlock HPA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_set_max_sectors\">ata_set_max_sectors</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#native_sectors\">native_sectors</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EACCES\">EACCES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if device aborted the command, skip HPA resizing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, \"device aborted resize \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"(%llu -> %llu), skipping HPA handling\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#sectors\">sectors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#native_sectors\">native_sectors</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> |= <a class=\"id\" href=\"#ATA_HORKAGE_BROKEN_HPA\">ATA_HORKAGE_BROKEN_HPA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* re-read IDENTIFY data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_dev_reread_id\">ata_dev_reread_id</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, \"failed to re-read IDENTIFY \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"data after HPA resizing\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#print_info\">print_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#new_sectors\">new_sectors</a> = <a class=\"id\" href=\"#ata_id_n_sectors\">ata_id_n_sectors</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"HPA unlocked: %llu -> %llu, native %llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#sectors\">sectors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#new_sectors\">new_sectors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#native_sectors\">native_sectors</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dump_id - IDENTIFY DEVICE info debugging output</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: IDENTIFY DEVICE page to dump</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Dump selected 16-bit words from the given IDENTIFY DEVICE</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>caller.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ata_dump_id\">ata_dump_id</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"49==0x%04x  \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"53==0x%04x  \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"63==0x%04x  \"", 
];
xr_frag_insert('l/de/7c77905d996ce5fa739f0b94e5840a8eab3418.xr', __xr_tmp);
