var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright 2003-2005 Red Hat, Inc.  All rights reserved.</span>", 
"<span class=\"comment\"> *  Copyright 2003-2005 Jeff Garzik</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2, or (at your option)</span>", 
"<span class=\"comment\"> *  any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  libata documentation is available via 'make {ps|pdf}docs',</span>", 
"<span class=\"comment\"> *  as Documentation/DocBook/libata.*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_LIBATA_H__\">__LINUX_LIBATA_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_LIBATA_H__\">__LINUX_LIBATA_H__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dma\">dma</a>-<a class=\"id\" href=\"#mapping\">mapping</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ata\">ata</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_host\">scsi_host</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cdrom\">cdrom</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Define if arch has non-standard setup.  This is a _PCI_ standard</span>", 
"<span class=\"comment\"> * not a legacy or ISA standard.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ATA_NONSTANDARD\">CONFIG_ATA_NONSTANDARD</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#libata\">libata</a>-<a class=\"id\" href=\"#portmap\">portmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#libata\">libata</a>-<a class=\"id\" href=\"#portmap\">portmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * compile-time options: to be removed as soon as all the drivers are</span>", 
"<span class=\"comment\"> * converted to the new debugging mechanism</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#ATA_DEBUG\">ATA_DEBUG</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* debugging output */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#ATA_VERBOSE_DEBUG\">ATA_VERBOSE_DEBUG</a><span class=\"ts\"/><span class=\"comment\">/* yet more debugging output */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#ATA_IRQ_TRAP\">ATA_IRQ_TRAP</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* define to ack screaming irqs */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#ATA_NDEBUG\">ATA_NDEBUG</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* define to disable quick runtime checks */</span>", 
"", 
"", 
"<span class=\"comment\">/* note: prints function name for you */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ATA_DEBUG\">ATA_DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...) <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: \" <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, ## <a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ATA_VERBOSE_DEBUG\">ATA_VERBOSE_DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...) <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: \" <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, ## <a class=\"id\" href=\"#args\">args</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* ATA_VERBOSE_DEBUG */</span>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* ATA_DEBUG */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BPRINTK\">BPRINTK</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...) if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_DEBUGMSG\">ATA_FLAG_DEBUGMSG</a>) <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: \" <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, ## <a class=\"id\" href=\"#args\">args</a>)", 
"", 
"<span class=\"comment\">/* NEW: debug levels */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_LIBATA_MSG\">HAVE_LIBATA_MSG</a> 1", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_MSG_DRV\">ATA_MSG_DRV</a><span class=\"ts\"/>= 0x0001,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_MSG_INFO\">ATA_MSG_INFO</a><span class=\"ts\"/>= 0x0002,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_MSG_PROBE\">ATA_MSG_PROBE</a><span class=\"ts\"/>= 0x0004,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_MSG_WARN\">ATA_MSG_WARN</a><span class=\"ts\"/>= 0x0008,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_MSG_MALLOC\">ATA_MSG_MALLOC</a><span class=\"ts\"/>= 0x0010,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_MSG_CTL\">ATA_MSG_CTL</a><span class=\"ts\"/>= 0x0020,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_MSG_INTR\">ATA_MSG_INTR</a><span class=\"ts\"/>= 0x0040,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_MSG_ERR\">ATA_MSG_ERR</a><span class=\"ts\"/>= 0x0080,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ata_msg_drv\">ata_msg_drv</a>(<a class=\"id\" href=\"#p\">p</a>)    ((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> &amp; <a class=\"id\" href=\"#ATA_MSG_DRV\">ATA_MSG_DRV</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ata_msg_info\">ata_msg_info</a>(<a class=\"id\" href=\"#p\">p</a>)   ((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> &amp; <a class=\"id\" href=\"#ATA_MSG_INFO\">ATA_MSG_INFO</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ata_msg_probe\">ata_msg_probe</a>(<a class=\"id\" href=\"#p\">p</a>)  ((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> &amp; <a class=\"id\" href=\"#ATA_MSG_PROBE\">ATA_MSG_PROBE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ata_msg_warn\">ata_msg_warn</a>(<a class=\"id\" href=\"#p\">p</a>)   ((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> &amp; <a class=\"id\" href=\"#ATA_MSG_WARN\">ATA_MSG_WARN</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ata_msg_malloc\">ata_msg_malloc</a>(<a class=\"id\" href=\"#p\">p</a>) ((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> &amp; <a class=\"id\" href=\"#ATA_MSG_MALLOC\">ATA_MSG_MALLOC</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ata_msg_ctl\">ata_msg_ctl</a>(<a class=\"id\" href=\"#p\">p</a>)    ((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> &amp; <a class=\"id\" href=\"#ATA_MSG_CTL\">ATA_MSG_CTL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ata_msg_intr\">ata_msg_intr</a>(<a class=\"id\" href=\"#p\">p</a>)   ((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> &amp; <a class=\"id\" href=\"#ATA_MSG_INTR\">ATA_MSG_INTR</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ata_msg_err\">ata_msg_err</a>(<a class=\"id\" href=\"#p\">p</a>)    ((<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> &amp; <a class=\"id\" href=\"#ATA_MSG_ERR\">ATA_MSG_ERR</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ata_msg_init\">ata_msg_init</a>(int <a class=\"id\" href=\"#dval\">dval</a>, int <a class=\"id\" href=\"#default_msg_enable_bits\">default_msg_enable_bits</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dval\">dval</a> &lt; 0 || <a class=\"id\" href=\"#dval\">dval</a> >= (sizeof(<a class=\"id\" href=\"#u32\">u32</a>) * 8))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#default_msg_enable_bits\">default_msg_enable_bits</a>; <span class=\"comment\">/* should be 0x1 - only driver info msgs */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dval\">dval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return (1 << <a class=\"id\" href=\"#dval\">dval</a>) - 1;", 
"}", 
"", 
"<span class=\"comment\">/* defines only for the constants which don't work well as enums */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATA_TAG_POISON\">ATA_TAG_POISON</a><span class=\"ts\"/><span class=\"ts\"/>0xfafbfcfdU", 
"", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* various global constants */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIBATA_MAX_PRD\">LIBATA_MAX_PRD</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_MAX_PRD\">ATA_MAX_PRD</a> / 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIBATA_DUMB_MAX_PRD\">LIBATA_DUMB_MAX_PRD</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_MAX_PRD\">ATA_MAX_PRD</a> / 4,<span class=\"ts\"/><span class=\"comment\">/* Worst case */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEF_QUEUE\">ATA_DEF_QUEUE</a><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><span class=\"comment\">/* tag ATA_MAX_QUEUE - 1 is reserved for internal commands */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_MAX_QUEUE\">ATA_MAX_QUEUE</a><span class=\"ts\"/><span class=\"ts\"/>= 32,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_TAG_INTERNAL\">ATA_TAG_INTERNAL</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_MAX_QUEUE\">ATA_MAX_QUEUE</a> - 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_SHORT_PAUSE\">ATA_SHORT_PAUSE</a><span class=\"ts\"/><span class=\"ts\"/>= 16,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATAPI_MAX_DRAIN\">ATAPI_MAX_DRAIN</a><span class=\"ts\"/><span class=\"ts\"/>= 16 << 10,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ALL_DEVICES\">ATA_ALL_DEVICES</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << <a class=\"id\" href=\"#ATA_MAX_DEVICES\">ATA_MAX_DEVICES</a>) - 1,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_SHT_EMULATED\">ATA_SHT_EMULATED</a><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_SHT_CMD_PER_LUN\">ATA_SHT_CMD_PER_LUN</a><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_SHT_THIS_ID\">ATA_SHT_THIS_ID</a><span class=\"ts\"/><span class=\"ts\"/>= -1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_SHT_USE_CLUSTERING\">ATA_SHT_USE_CLUSTERING</a><span class=\"ts\"/>= 1,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* struct ata_device stuff */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_LBA\">ATA_DFLAG_LBA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0), <span class=\"comment\">/* device supports LBA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_LBA48\">ATA_DFLAG_LBA48</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1), <span class=\"comment\">/* device supports LBA48 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_CDB_INTR\">ATA_DFLAG_CDB_INTR</a><span class=\"ts\"/>= (1 << 2), <span class=\"comment\">/* device asserts INTRQ when ready for CDB */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_NCQ\">ATA_DFLAG_NCQ</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3), <span class=\"comment\">/* device supports NCQ */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_FLUSH_EXT\">ATA_DFLAG_FLUSH_EXT</a><span class=\"ts\"/>= (1 << 4), <span class=\"comment\">/* do FLUSH_EXT instead of FLUSH */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_ACPI_PENDING\">ATA_DFLAG_ACPI_PENDING</a><span class=\"ts\"/>= (1 << 5), <span class=\"comment\">/* ACPI resume action pending */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_ACPI_FAILED\">ATA_DFLAG_ACPI_FAILED</a><span class=\"ts\"/>= (1 << 6), <span class=\"comment\">/* ACPI on devcfg has failed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_AN\">ATA_DFLAG_AN</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 7), <span class=\"comment\">/* AN configured */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_HIPM\">ATA_DFLAG_HIPM</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 8), <span class=\"comment\">/* device supports HIPM */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_DIPM\">ATA_DFLAG_DIPM</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 9), <span class=\"comment\">/* device supports DIPM */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_DMADIR\">ATA_DFLAG_DMADIR</a><span class=\"ts\"/>= (1 << 10), <span class=\"comment\">/* device requires DMADIR */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_CFG_MASK\">ATA_DFLAG_CFG_MASK</a><span class=\"ts\"/>= (1 << 12) - 1,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_PIO\">ATA_DFLAG_PIO</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 12), <span class=\"comment\">/* device limited to PIO mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_NCQ_OFF\">ATA_DFLAG_NCQ_OFF</a><span class=\"ts\"/>= (1 << 13), <span class=\"comment\">/* device limited to non-NCQ mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_SLEEPING\">ATA_DFLAG_SLEEPING</a><span class=\"ts\"/>= (1 << 15), <span class=\"comment\">/* device is sleeping */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_DUBIOUS_XFER\">ATA_DFLAG_DUBIOUS_XFER</a><span class=\"ts\"/>= (1 << 16), <span class=\"comment\">/* data transfer not verified */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_NO_UNLOAD\">ATA_DFLAG_NO_UNLOAD</a><span class=\"ts\"/>= (1 << 17), <span class=\"comment\">/* device doesn't support unload */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_UNLOCK_HPA\">ATA_DFLAG_UNLOCK_HPA</a><span class=\"ts\"/>= (1 << 18), <span class=\"comment\">/* unlock HPA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_INIT_MASK\">ATA_DFLAG_INIT_MASK</a><span class=\"ts\"/>= (1 << 24) - 1,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_DETACH\">ATA_DFLAG_DETACH</a><span class=\"ts\"/>= (1 << 24),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DFLAG_DETACHED\">ATA_DFLAG_DETACHED</a><span class=\"ts\"/>= (1 << 25),", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_UNKNOWN\">ATA_DEV_UNKNOWN</a><span class=\"ts\"/><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"comment\">/* unknown device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a><span class=\"ts\"/><span class=\"ts\"/>= 1,<span class=\"ts\"/><span class=\"comment\">/* ATA device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_ATA_UNSUP\">ATA_DEV_ATA_UNSUP</a><span class=\"ts\"/>= 2,<span class=\"ts\"/><span class=\"comment\">/* ATA device (unsupported) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_ATAPI\">ATA_DEV_ATAPI</a><span class=\"ts\"/><span class=\"ts\"/>= 3,<span class=\"ts\"/><span class=\"comment\">/* ATAPI device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_ATAPI_UNSUP\">ATA_DEV_ATAPI_UNSUP</a><span class=\"ts\"/>= 4,<span class=\"ts\"/><span class=\"comment\">/* ATAPI device (unsupported) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_PMP\">ATA_DEV_PMP</a><span class=\"ts\"/><span class=\"ts\"/>= 5,<span class=\"ts\"/><span class=\"comment\">/* SATA port multiplier */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_PMP_UNSUP\">ATA_DEV_PMP_UNSUP</a><span class=\"ts\"/>= 6,<span class=\"ts\"/><span class=\"comment\">/* SATA port multiplier (unsupported) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_SEMB\">ATA_DEV_SEMB</a><span class=\"ts\"/><span class=\"ts\"/>= 7,<span class=\"ts\"/><span class=\"comment\">/* SEMB */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_SEMB_UNSUP\">ATA_DEV_SEMB_UNSUP</a><span class=\"ts\"/>= 8,<span class=\"ts\"/><span class=\"comment\">/* SEMB (unsupported) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_DEV_NONE\">ATA_DEV_NONE</a><span class=\"ts\"/><span class=\"ts\"/>= 9,<span class=\"ts\"/><span class=\"comment\">/* no device */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* struct ata_link flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_LFLAG_NO_HRST\">ATA_LFLAG_NO_HRST</a><span class=\"ts\"/>= (1 << 1), <span class=\"comment\">/* avoid hardreset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_LFLAG_NO_SRST\">ATA_LFLAG_NO_SRST</a><span class=\"ts\"/>= (1 << 2), <span class=\"comment\">/* avoid softreset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_LFLAG_ASSUME_ATA\">ATA_LFLAG_ASSUME_ATA</a><span class=\"ts\"/>= (1 << 3), <span class=\"comment\">/* assume ATA class */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_LFLAG_ASSUME_SEMB\">ATA_LFLAG_ASSUME_SEMB</a><span class=\"ts\"/>= (1 << 4), <span class=\"comment\">/* assume SEMB class */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_LFLAG_ASSUME_CLASS\">ATA_LFLAG_ASSUME_CLASS</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_LFLAG_ASSUME_ATA\">ATA_LFLAG_ASSUME_ATA</a> | <a class=\"id\" href=\"#ATA_LFLAG_ASSUME_SEMB\">ATA_LFLAG_ASSUME_SEMB</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_LFLAG_NO_RETRY\">ATA_LFLAG_NO_RETRY</a><span class=\"ts\"/>= (1 << 5), <span class=\"comment\">/* don't retry this link */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_LFLAG_DISABLED\">ATA_LFLAG_DISABLED</a><span class=\"ts\"/>= (1 << 6), <span class=\"comment\">/* link is disabled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_LFLAG_SW_ACTIVITY\">ATA_LFLAG_SW_ACTIVITY</a><span class=\"ts\"/>= (1 << 7), <span class=\"comment\">/* keep activity stats */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* struct ata_port flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_SLAVE_POSS\">ATA_FLAG_SLAVE_POSS</a><span class=\"ts\"/>= (1 << 0), <span class=\"comment\">/* host supports slave dev */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* (doesn't imply presence) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_SATA\">ATA_FLAG_SATA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_NO_LEGACY\">ATA_FLAG_NO_LEGACY</a><span class=\"ts\"/>= (1 << 2), <span class=\"comment\">/* no legacy mode check */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_MMIO\">ATA_FLAG_MMIO</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3), <span class=\"comment\">/* use MMIO, not PIO */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_SRST\">ATA_FLAG_SRST</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 4), <span class=\"comment\">/* (obsolete) use ATA SRST, not E.D.D. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_SATA_RESET\">ATA_FLAG_SATA_RESET</a><span class=\"ts\"/>= (1 << 5), <span class=\"comment\">/* (obsolete) use COMRESET */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_NO_ATAPI\">ATA_FLAG_NO_ATAPI</a><span class=\"ts\"/>= (1 << 6), <span class=\"comment\">/* No ATAPI support */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_PIO_DMA\">ATA_FLAG_PIO_DMA</a><span class=\"ts\"/>= (1 << 7), <span class=\"comment\">/* PIO cmds via DMA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_PIO_LBA48\">ATA_FLAG_PIO_LBA48</a><span class=\"ts\"/>= (1 << 8), <span class=\"comment\">/* Host DMA engine is LBA28 only */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_PIO_POLLING\">ATA_FLAG_PIO_POLLING</a><span class=\"ts\"/>= (1 << 9), <span class=\"comment\">/* use polling PIO if LLD</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     * doesn't handle PIO interrupts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_NCQ\">ATA_FLAG_NCQ</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 10), <span class=\"comment\">/* host supports NCQ */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_NO_POWEROFF_SPINDOWN\">ATA_FLAG_NO_POWEROFF_SPINDOWN</a> = (1 << 11), <span class=\"comment\">/* don't spindown before poweroff */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_NO_HIBERNATE_SPINDOWN\">ATA_FLAG_NO_HIBERNATE_SPINDOWN</a> = (1 << 12), <span class=\"comment\">/* don't spindown before hibernation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_DEBUGMSG\">ATA_FLAG_DEBUGMSG</a><span class=\"ts\"/>= (1 << 13),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_FPDMA_AA\">ATA_FLAG_FPDMA_AA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 14), <span class=\"comment\">/* driver supports Auto-Activate */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_IGN_SIMPLEX\">ATA_FLAG_IGN_SIMPLEX</a><span class=\"ts\"/>= (1 << 15), <span class=\"comment\">/* ignore SIMPLEX */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_NO_IORDY\">ATA_FLAG_NO_IORDY</a><span class=\"ts\"/>= (1 << 16), <span class=\"comment\">/* controller lacks iordy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_ACPI_SATA\">ATA_FLAG_ACPI_SATA</a><span class=\"ts\"/>= (1 << 17), <span class=\"comment\">/* need native SATA ACPI layout */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_AN\">ATA_FLAG_AN</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 18), <span class=\"comment\">/* controller supports AN */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_PMP\">ATA_FLAG_PMP</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 19), <span class=\"comment\">/* controller supports PMP */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_IPM\">ATA_FLAG_IPM</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 20), <span class=\"comment\">/* driver can handle IPM */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_EM\">ATA_FLAG_EM</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 21), <span class=\"comment\">/* driver supports enclosure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      * management */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_FLAG_SW_ACTIVITY\">ATA_FLAG_SW_ACTIVITY</a><span class=\"ts\"/>= (1 << 22), <span class=\"comment\">/* driver supports sw activity</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      * led */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* bits 24:31 of ap-&gt;flags are reserved for LLD specific flags */</span>", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* struct ata_port pflags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_EH_PENDING\">ATA_PFLAG_EH_PENDING</a><span class=\"ts\"/>= (1 << 0), <span class=\"comment\">/* EH pending */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_EH_IN_PROGRESS\">ATA_PFLAG_EH_IN_PROGRESS</a> = (1 << 1), <span class=\"comment\">/* EH in progress */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_FROZEN\">ATA_PFLAG_FROZEN</a><span class=\"ts\"/>= (1 << 2), <span class=\"comment\">/* port is frozen */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_RECOVERED\">ATA_PFLAG_RECOVERED</a><span class=\"ts\"/>= (1 << 3), <span class=\"comment\">/* recovery action performed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_LOADING\">ATA_PFLAG_LOADING</a><span class=\"ts\"/>= (1 << 4), <span class=\"comment\">/* boot/loading probe */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_SCSI_HOTPLUG\">ATA_PFLAG_SCSI_HOTPLUG</a><span class=\"ts\"/>= (1 << 6), <span class=\"comment\">/* SCSI hotplug scheduled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_INITIALIZING\">ATA_PFLAG_INITIALIZING</a><span class=\"ts\"/>= (1 << 7), <span class=\"comment\">/* being initialized, don't touch */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_RESETTING\">ATA_PFLAG_RESETTING</a><span class=\"ts\"/>= (1 << 8), <span class=\"comment\">/* reset in progress */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_UNLOADING\">ATA_PFLAG_UNLOADING</a><span class=\"ts\"/>= (1 << 9), <span class=\"comment\">/* driver is being unloaded */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_UNLOADED\">ATA_PFLAG_UNLOADED</a><span class=\"ts\"/>= (1 << 10), <span class=\"comment\">/* driver is unloaded */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_SUSPENDED\">ATA_PFLAG_SUSPENDED</a><span class=\"ts\"/>= (1 << 17), <span class=\"comment\">/* port is suspended (power) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_PM_PENDING\">ATA_PFLAG_PM_PENDING</a><span class=\"ts\"/>= (1 << 18), <span class=\"comment\">/* PM operation pending */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_INIT_GTM_VALID\">ATA_PFLAG_INIT_GTM_VALID</a> = (1 << 19), <span class=\"comment\">/* initial gtm data valid */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_PIO32\">ATA_PFLAG_PIO32</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 20),  <span class=\"comment\">/* 32bit PIO */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_PFLAG_PIO32CHANGE\">ATA_PFLAG_PIO32CHANGE</a><span class=\"ts\"/>= (1 << 21),  <span class=\"comment\">/* 32bit PIO can be turned on/off */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* struct ata_queued_cmd flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_ACTIVE\">ATA_QCFLAG_ACTIVE</a><span class=\"ts\"/>= (1 << 0), <span class=\"comment\">/* cmd not yet ack'd to scsi lyer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_DMAMAP\">ATA_QCFLAG_DMAMAP</a><span class=\"ts\"/>= (1 << 1), <span class=\"comment\">/* SG table is DMA mapped */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_IO\">ATA_QCFLAG_IO</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3), <span class=\"comment\">/* standard IO command */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_RESULT_TF\">ATA_QCFLAG_RESULT_TF</a><span class=\"ts\"/>= (1 << 4), <span class=\"comment\">/* result TF requested */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_CLEAR_EXCL\">ATA_QCFLAG_CLEAR_EXCL</a><span class=\"ts\"/>= (1 << 5), <span class=\"comment\">/* clear excl_link on completion */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_QUIET\">ATA_QCFLAG_QUIET</a><span class=\"ts\"/>= (1 << 6), <span class=\"comment\">/* don't report device error */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_RETRY\">ATA_QCFLAG_RETRY</a><span class=\"ts\"/>= (1 << 7), <span class=\"comment\">/* retry after failure */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_FAILED\">ATA_QCFLAG_FAILED</a><span class=\"ts\"/>= (1 << 16), <span class=\"comment\">/* cmd failed and is owned by EH */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_SENSE_VALID\">ATA_QCFLAG_SENSE_VALID</a><span class=\"ts\"/>= (1 << 17), <span class=\"comment\">/* sense data valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_QCFLAG_EH_SCHEDULED\">ATA_QCFLAG_EH_SCHEDULED</a> = (1 << 18), <span class=\"comment\">/* EH scheduled (obsolete) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* host set flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_HOST_SIMPLEX\">ATA_HOST_SIMPLEX</a><span class=\"ts\"/>= (1 << 0),<span class=\"ts\"/><span class=\"comment\">/* Host is simplex, one DMA channel per host only */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_HOST_STARTED\">ATA_HOST_STARTED</a><span class=\"ts\"/>= (1 << 1),<span class=\"ts\"/><span class=\"comment\">/* Host started */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_HOST_PARALLEL_SCAN\">ATA_HOST_PARALLEL_SCAN</a><span class=\"ts\"/>= (1 << 2),<span class=\"ts\"/><span class=\"comment\">/* Ports on this host can be scanned in parallel */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* bits 24:31 of host-&gt;flags are reserved for LLD specific flags */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* various lengths of time */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_TMOUT_BOOT\">ATA_TMOUT_BOOT</a><span class=\"ts\"/><span class=\"ts\"/>= 30000,<span class=\"ts\"/><span class=\"comment\">/* heuristic */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_TMOUT_BOOT_QUICK\">ATA_TMOUT_BOOT_QUICK</a><span class=\"ts\"/>=  7000,<span class=\"ts\"/><span class=\"comment\">/* heuristic */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_TMOUT_INTERNAL_QUICK\">ATA_TMOUT_INTERNAL_QUICK</a> = 5000,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_TMOUT_MAX_PARK\">ATA_TMOUT_MAX_PARK</a><span class=\"ts\"/>= 30000,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * GoVault needs 2s and iVDR disk HHD424020F7SV00 800ms.  2s</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is too much without parallel probing.  Use 2s if parallel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * probing is available, 800ms otherwise.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_TMOUT_FF_WAIT_LONG\">ATA_TMOUT_FF_WAIT_LONG</a><span class=\"ts\"/>=  2000,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_TMOUT_FF_WAIT\">ATA_TMOUT_FF_WAIT</a><span class=\"ts\"/>=   800,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Spec mandates to wait for \"&gt;= 2ms\" before checking status</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * after reset.  We wait 150ms, because that was the magic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delay used for ATAPI devices in Hale Landis's ATADRVR, for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the period of time between when the ATA command register is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * written, and then status is checked.  Because waiting for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"a while\" before checking status is fine, post SRST, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * perform this magic delay here as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Old drivers/ide uses the 2mS rule and then waits for ready.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_WAIT_AFTER_RESET\">ATA_WAIT_AFTER_RESET</a><span class=\"ts\"/>=  150,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If PMP is supported, we have to do follow-up SRST.  As some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PMPs don't send D2H Reg FIS after hardreset, LLDs are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * advised to wait only for the following duration before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doing SRST.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_TMOUT_PMP_SRST_WAIT\">ATA_TMOUT_PMP_SRST_WAIT</a><span class=\"ts\"/>= 5000,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ATA bus states */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUS_UNKNOWN\">BUS_UNKNOWN</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUS_DMA\">BUS_DMA</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUS_IDLE\">BUS_IDLE</a><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUS_NOINTR\">BUS_NOINTR</a><span class=\"ts\"/><span class=\"ts\"/>= 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUS_NODATA\">BUS_NODATA</a><span class=\"ts\"/><span class=\"ts\"/>= 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUS_TIMER\">BUS_TIMER</a><span class=\"ts\"/><span class=\"ts\"/>= 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUS_PIO\">BUS_PIO</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUS_EDD\">BUS_EDD</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 7,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUS_IDENTIFY\">BUS_IDENTIFY</a><span class=\"ts\"/><span class=\"ts\"/>= 8,", 
];
xr_frag_insert('l/de/a85222c181a8c5047658e8160ad4eb1e42c6d3.xr', __xr_tmp);
