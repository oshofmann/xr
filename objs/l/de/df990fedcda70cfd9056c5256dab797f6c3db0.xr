var __xr_tmp = [
"<span class=\"comment\">/* netfilter.c: look after the filters for various protocols.</span>", 
"<span class=\"comment\"> * Heavily influenced by the old firewall.c by David Bonn and Alan Cox.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thanks to Rob `CmdrTaco' Malda for not influencing this code in any</span>", 
"<span class=\"comment\"> * way.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Rusty Russell (C)2000 -- This code is GPL.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netfilter\">netfilter</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#protocol\">protocol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/if.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inetdevice\">inetdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#net_namespace\">net_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"nf_internals.h\"", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#afinfo_mutex\">afinfo_mutex</a>);", 
"", 
"const struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> *<a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a>[<a class=\"id\" href=\"#NFPROTO_NUMPROTO\">NFPROTO_NUMPROTO</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a>);", 
"", 
"int <a class=\"id\" href=\"#nf_register_afinfo\">nf_register_afinfo</a>(const struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#afinfo_mutex\">afinfo_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a>[<a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#family\">family</a>], <a class=\"id\" href=\"#afinfo\">afinfo</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#afinfo_mutex\">afinfo_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#nf_register_afinfo\">nf_register_afinfo</a>);", 
"", 
"void <a class=\"id\" href=\"#nf_unregister_afinfo\">nf_unregister_afinfo</a>(const struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#afinfo_mutex\">afinfo_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a>[<a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#family\">family</a>], <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#afinfo_mutex\">afinfo_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#nf_unregister_afinfo\">nf_unregister_afinfo</a>);", 
"", 
"struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#nf_hooks\">nf_hooks</a>[<a class=\"id\" href=\"#NFPROTO_NUMPROTO\">NFPROTO_NUMPROTO</a>][<a class=\"id\" href=\"#NF_MAX_HOOKS\">NF_MAX_HOOKS</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_hooks\">nf_hooks</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#nf_hook_mutex\">nf_hook_mutex</a>);", 
"", 
"int <a class=\"id\" href=\"#nf_register_hook\">nf_register_hook</a>(struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#elem\">elem</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#nf_hook_mutex\">nf_hook_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#elem\">elem</a>, &amp;<a class=\"id\" href=\"#nf_hooks\">nf_hooks</a>[<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#pf\">pf</a>][<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#hooknum\">hooknum</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#priority\">priority</a> &lt; <a class=\"id\" href=\"#elem\">elem</a>-><a class=\"id\" href=\"#priority\">priority</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#elem\">elem</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#nf_hook_mutex\">nf_hook_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_register_hook\">nf_register_hook</a>);", 
"", 
"void <a class=\"id\" href=\"#nf_unregister_hook\">nf_unregister_hook</a>(struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#nf_hook_mutex\">nf_hook_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#nf_hook_mutex\">nf_hook_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_unregister_hook\">nf_unregister_hook</a>);", 
"", 
"int <a class=\"id\" href=\"#nf_register_hooks\">nf_register_hooks</a>(struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>, unsigned int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#nf_register_hook\">nf_register_hook</a>(&amp;<a class=\"id\" href=\"#reg\">reg</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nf_unregister_hooks\">nf_unregister_hooks</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_register_hooks\">nf_register_hooks</a>);", 
"", 
"void <a class=\"id\" href=\"#nf_unregister_hooks\">nf_unregister_hooks</a>(struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>, unsigned int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nf_unregister_hook\">nf_unregister_hook</a>(&amp;<a class=\"id\" href=\"#reg\">reg</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_unregister_hooks\">nf_unregister_hooks</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#nf_iterate\">nf_iterate</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hook\">hook</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#indev\">indev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#outdev\">outdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> **<a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#hook_thresh\">hook_thresh</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#verdict\">verdict</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The caller must not block between calls to this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function because of risk of continuing from deleted element.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_continue_rcu\">list_for_each_continue_rcu</a>(*<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#elem\">elem</a> = (struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *)*<a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hook_thresh\">hook_thresh</a> &gt; <a class=\"id\" href=\"#elem\">elem</a>-><a class=\"id\" href=\"#priority\">priority</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Optimization: we don't need to hold module</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   reference here, since function can't sleep. --RR */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#verdict\">verdict</a> = <a class=\"id\" href=\"#elem\">elem</a>-><a class=\"id\" href=\"#hook\">hook</a>(<a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#indev\">indev</a>, <a class=\"id\" href=\"#outdev\">outdev</a>, <a class=\"id\" href=\"#okfn\">okfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#verdict\">verdict</a> != <a class=\"id\" href=\"#NF_ACCEPT\">NF_ACCEPT</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETFILTER_DEBUG\">CONFIG_NETFILTER_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#verdict\">verdict</a> &amp; <a class=\"id\" href=\"#NF_VERDICT_MASK\">NF_VERDICT_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&gt; <a class=\"id\" href=\"#NF_MAX_VERDICT\">NF_MAX_VERDICT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NFDEBUG\">NFDEBUG</a>(\"Evil return from %p(%u).\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elem\">elem</a>-><a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#hook\">hook</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#verdict\">verdict</a> != <a class=\"id\" href=\"#NF_REPEAT\">NF_REPEAT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#verdict\">verdict</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i\">i</a> = (*<a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NF_ACCEPT\">NF_ACCEPT</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Returns 1 if okfn() needs to be executed by the caller,</span>", 
"<span class=\"comment\"> * -EPERM for NF_DROP, 0 otherwise. */</span>", 
"int <a class=\"id\" href=\"#nf_hook_slow\">nf_hook_slow</a>(<a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#indev\">indev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#outdev\">outdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#hook_thresh\">hook_thresh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#elem\">elem</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#verdict\">verdict</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We may already have this, but read-locks nest anyway */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elem\">elem</a> = &amp;<a class=\"id\" href=\"#nf_hooks\">nf_hooks</a>[<a class=\"id\" href=\"#pf\">pf</a>][<a class=\"id\" href=\"#hook\">hook</a>];", 
"<a class=\"id\" href=\"#next_hook\">next_hook</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#verdict\">verdict</a> = <a class=\"id\" href=\"#nf_iterate\">nf_iterate</a>(&amp;<a class=\"id\" href=\"#nf_hooks\">nf_hooks</a>[<a class=\"id\" href=\"#pf\">pf</a>][<a class=\"id\" href=\"#hook\">hook</a>], <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#indev\">indev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#outdev\">outdev</a>, &amp;<a class=\"id\" href=\"#elem\">elem</a>, <a class=\"id\" href=\"#okfn\">okfn</a>, <a class=\"id\" href=\"#hook_thresh\">hook_thresh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#verdict\">verdict</a> == <a class=\"id\" href=\"#NF_ACCEPT\">NF_ACCEPT</a> || <a class=\"id\" href=\"#verdict\">verdict</a> == <a class=\"id\" href=\"#NF_STOP\">NF_STOP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#verdict\">verdict</a> == <a class=\"id\" href=\"#NF_DROP\">NF_DROP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#verdict\">verdict</a> &amp; <a class=\"id\" href=\"#NF_VERDICT_MASK\">NF_VERDICT_MASK</a>) == <a class=\"id\" href=\"#NF_QUEUE\">NF_QUEUE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nf_queue\">nf_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#elem\">elem</a>, <a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#indev\">indev</a>, <a class=\"id\" href=\"#outdev\">outdev</a>, <a class=\"id\" href=\"#okfn\">okfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#verdict\">verdict</a> >> <a class=\"id\" href=\"#NF_VERDICT_BITS\">NF_VERDICT_BITS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_hook\">next_hook</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_hook_slow\">nf_hook_slow</a>);", 
"", 
"", 
"int <a class=\"id\" href=\"#skb_make_writable\">skb_make_writable</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#writable_len\">writable_len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#writable_len\">writable_len</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Not exclusive use of packet?  Must copy. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#writable_len\">writable_len</a> <= <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#skb_clone_writable\">skb_clone_writable</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#writable_len\">writable_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#writable_len\">writable_len</a> <= <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writable_len\">writable_len</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writable_len\">writable_len</a> -= <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>return !!<a class=\"id\" href=\"#__pskb_pull_tail\">__pskb_pull_tail</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#writable_len\">writable_len</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_make_writable\">skb_make_writable</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"<span class=\"comment\">/* This does not belong here, but locally generated errors need it if connection</span>", 
"<span class=\"comment\">   tracking in use: without this, connection may not be in hash table, and hence</span>", 
"<span class=\"comment\">   manufactured ICMP or RST packets will not be associated with it. */</span>", 
"void (*<a class=\"id\" href=\"#ip_ct_attach\">ip_ct_attach</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ip_ct_attach\">ip_ct_attach</a>);", 
"", 
"void <a class=\"id\" href=\"#nf_ct_attach\">nf_ct_attach</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#attach\">attach</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nfct\">nfct</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach\">attach</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#ip_ct_attach\">ip_ct_attach</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attach\">attach</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach\">attach</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_ct_attach\">nf_ct_attach</a>);", 
"", 
"void (*<a class=\"id\" href=\"#nf_ct_destroy\">nf_ct_destroy</a>)(struct <a class=\"id\" href=\"#nf_conntrack\">nf_conntrack</a> *);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_ct_destroy\">nf_ct_destroy</a>);", 
"", 
"void <a class=\"id\" href=\"#nf_conntrack_destroy\">nf_conntrack_destroy</a>(struct <a class=\"id\" href=\"#nf_conntrack\">nf_conntrack</a> *<a class=\"id\" href=\"#nfct\">nfct</a>)", 
"{", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#destroy\">destroy</a>)(struct <a class=\"id\" href=\"#nf_conntrack\">nf_conntrack</a> *);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy\">destroy</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#nf_ct_destroy\">nf_ct_destroy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#destroy\">destroy</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#nfct\">nfct</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nf_conntrack_destroy\">nf_conntrack_destroy</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NF_CONNTRACK */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_net_netfilter\">proc_net_netfilter</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_net_netfilter\">proc_net_netfilter</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#netfilter_init\">netfilter_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#nf_hooks\">nf_hooks</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#h\">h</a> = 0; <a class=\"id\" href=\"#h\">h</a> &lt; <a class=\"id\" href=\"#NF_MAX_HOOKS\">NF_MAX_HOOKS</a>; <a class=\"id\" href=\"#h\">h</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#nf_hooks\">nf_hooks</a>[<a class=\"id\" href=\"#i\">i</a>][<a class=\"id\" href=\"#h\">h</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_net_netfilter\">proc_net_netfilter</a> = <a class=\"id\" href=\"#proc_mkdir\">proc_mkdir</a>(\"netfilter\", <a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#proc_net\">proc_net</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#proc_net_netfilter\">proc_net_netfilter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"cannot create netfilter proc entry\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netfilter_queue_init\">netfilter_queue_init</a>() &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"cannot initialize nf_queue\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netfilter_log_init\">netfilter_log_init</a>() &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"cannot initialize nf_log\");", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> <a class=\"id\" href=\"#nf_net_netfilter_sysctl_path\">nf_net_netfilter_sysctl_path</a>[] = {", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#procname\">procname</a> = \"net\", },", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#procname\">procname</a> = \"netfilter\", },", 
"<span class=\"ts\"/>{ }", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#nf_net_netfilter_sysctl_path\">nf_net_netfilter_sysctl_path</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSCTL */</span>", 
];
xr_frag_insert('l/de/df990fedcda70cfd9056c5256dab797f6c3db0.xr', __xr_tmp);
