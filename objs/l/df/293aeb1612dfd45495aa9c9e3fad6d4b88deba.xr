var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_skb_tso_segs\">tcp_set_skb_tso_segs</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#mss_now\">mss_now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#probe_size\">probe_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_tso_segs\">tcp_init_tso_segs</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#nskb\">nskb</a>, <a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We're ready to send.  If this fails, the probe will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be resegmented into mss-sized pieces by tcp_write_xmit(). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#nskb\">nskb</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_transmit_skb\">tcp_transmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#nskb\">nskb</a>, 1, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Decrement cwnd here because we are sending</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * effectively two packets. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_event_new_data_sent\">tcp_event_new_data_sent</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#nskb\">nskb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#probe_size\">probe_size</a> = <a class=\"id\" href=\"#tcp_mss_to_mtu\">tcp_mss_to_mtu</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mtu_probe\">mtu_probe</a>.<a class=\"id\" href=\"#probe_seq_start\">probe_seq_start</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#nskb\">nskb</a>)-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mtu_probe\">mtu_probe</a>.<a class=\"id\" href=\"#probe_seq_end\">probe_seq_end</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#nskb\">nskb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/* This routine writes packets to the network.  It advances the</span>", 
"<span class=\"comment\"> * send_head.  This happens as incoming acks open up the remote</span>", 
"<span class=\"comment\"> * window for us.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LARGESEND note: !tcp_urg_mode is overkill, only frames between</span>", 
"<span class=\"comment\"> * snd_up-64k-mss .. snd_up cannot be large. However, taking into</span>", 
"<span class=\"comment\"> * account rare use of URG, this is not a big flaw.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1, if no segments are in flight and we have queued segments, but</span>", 
"<span class=\"comment\"> * cannot send anything now because of SWS or another problem.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_write_xmit\">tcp_write_xmit</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned int <a class=\"id\" href=\"#mss_now\">mss_now</a>, int <a class=\"id\" href=\"#nonagle\">nonagle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#push_one\">push_one</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tso_segs\">tso_segs</a>, <a class=\"id\" href=\"#sent_pkts\">sent_pkts</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cwnd_quota\">cwnd_quota</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sent_pkts\">sent_pkts</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#push_one\">push_one</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do MTU probing. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#tcp_mtu_probe\">tcp_mtu_probe</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#result\">result</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sent_pkts\">sent_pkts</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#limit\">limit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tso_segs\">tso_segs</a> = <a class=\"id\" href=\"#tcp_init_tso_segs\">tcp_init_tso_segs</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#mss_now\">mss_now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#tso_segs\">tso_segs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwnd_quota\">cwnd_quota</a> = <a class=\"id\" href=\"#tcp_cwnd_test\">tcp_cwnd_test</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cwnd_quota\">cwnd_quota</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#tcp_snd_wnd_test\">tcp_snd_wnd_test</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#mss_now\">mss_now</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tso_segs\">tso_segs</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#tcp_nagle_test\">tcp_nagle_test</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#mss_now\">mss_now</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#tcp_skb_is_last\">tcp_skb_is_last</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#nonagle\">nonagle</a> : <a class=\"id\" href=\"#TCP_NAGLE_PUSH\">TCP_NAGLE_PUSH</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#push_one\">push_one</a> && <a class=\"id\" href=\"#tcp_tso_should_defer\">tcp_tso_should_defer</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#mss_now\">mss_now</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tso_segs\">tso_segs</a> &gt; 1 && !<a class=\"id\" href=\"#tcp_urg_mode\">tcp_urg_mode</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#tcp_mss_split_point\">tcp_mss_split_point</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#mss_now\">mss_now</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cwnd_quota\">cwnd_quota</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#limit\">limit</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tso_fragment\">tso_fragment</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#mss_now\">mss_now</a>, <a class=\"id\" href=\"#gfp\">gfp</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tcp_transmit_skb\">tcp_transmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, 1, <a class=\"id\" href=\"#gfp\">gfp</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Advance the send_head.  This one is sent out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This call will increment packets_out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_event_new_data_sent\">tcp_event_new_data_sent</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_minshall_update\">tcp_minshall_update</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#mss_now\">mss_now</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sent_pkts\">sent_pkts</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#push_one\">push_one</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#sent_pkts\">sent_pkts</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_cwnd_validate\">tcp_cwnd_validate</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a> && <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Push out any pending frames which were held back due to</span>", 
"<span class=\"comment\"> * TCP_CORK or attempt at coalescing tiny packets.</span>", 
"<span class=\"comment\"> * The socket must be locked by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__tcp_push_pending_frames\">__tcp_push_pending_frames</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned int <a class=\"id\" href=\"#cur_mss\">cur_mss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#nonagle\">nonagle</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are closed, the bytes will have to remain here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In time closedown will finish, we empty the write queue and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all will be happy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> == <a class=\"id\" href=\"#TCP_CLOSE\">TCP_CLOSE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_write_xmit\">tcp_write_xmit</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#cur_mss\">cur_mss</a>, <a class=\"id\" href=\"#nonagle\">nonagle</a>, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_check_probe_timer\">tcp_check_probe_timer</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Send _single_ skb sitting at the send head. This function requires</span>", 
"<span class=\"comment\"> * true push pending frames to setup probe timer etc.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_push_one\">tcp_push_one</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned int <a class=\"id\" href=\"#mss_now\">mss_now</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#skb\">skb</a> || <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#mss_now\">mss_now</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_write_xmit\">tcp_write_xmit</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#mss_now\">mss_now</a>, <a class=\"id\" href=\"#TCP_NAGLE_PUSH\">TCP_NAGLE_PUSH</a>, 1, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_allocation\">sk_allocation</a>);", 
"}", 
"", 
"<span class=\"comment\">/* This function returns the amount that we can raise the</span>", 
"<span class=\"comment\"> * usable window based on the following constraints</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1. The window can never be shrunk once it is offered (RFC 793)</span>", 
"<span class=\"comment\"> * 2. We limit memory per socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RFC 1122:</span>", 
"<span class=\"comment\"> * \"the suggested [SWS] avoidance algorithm for the receiver is to keep</span>", 
"<span class=\"comment\"> *  RECV.NEXT + RCV.WIN fixed until:</span>", 
"<span class=\"comment\"> *  RCV.BUFF - RCV.USER - RCV.WINDOW &gt;= min(1/2 RCV.BUFF, MSS)\"</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * i.e. don't raise the right edge of the window until you can raise</span>", 
"<span class=\"comment\"> * it at least MSS bytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unfortunately, the recommended algorithm breaks header prediction,</span>", 
"<span class=\"comment\"> * since header prediction assumes th-&gt;window stays fixed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Strictly speaking, keeping th-&gt;window fixed violates the receiver</span>", 
"<span class=\"comment\"> * side SWS prevention criteria. The problem is that under this rule</span>", 
"<span class=\"comment\"> * a stream of single byte packets will cause the right side of the</span>", 
"<span class=\"comment\"> * window to always advance by a single byte.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Of course, if the sender implements sender side SWS prevention</span>", 
"<span class=\"comment\"> * then this will not be a problem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * BSD seems to make the following compromise:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the free space is less than the 1/4 of the maximum</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>space available and the free space is less than 1/2 mss,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>then set the window to 0.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>[ Actually, bsd uses MSS and 1/4 of maximal _window_ ]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Otherwise, just prevent the window from shrinking</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and from being larger than the largest representable value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This prevents incremental opening of the window in the regime</span>", 
"<span class=\"comment\"> * where TCP is limited by the speed of the reader side taking</span>", 
"<span class=\"comment\"> * data out of the TCP receive queue. It does nothing about</span>", 
"<span class=\"comment\"> * those cases where the window is constrained on the sender side</span>", 
"<span class=\"comment\"> * because the pipeline is full.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * BSD also seems to \"accidentally\" limit itself to windows that are a</span>", 
"<span class=\"comment\"> * multiple of MSS, at least until the free space gets quite small.</span>", 
"<span class=\"comment\"> * This would appear to be a side effect of the mbuf implementation.</span>", 
"<span class=\"comment\"> * Combining these two algorithms results in the observed behavior</span>", 
"<span class=\"comment\"> * of having a fixed window size at almost all times.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Below we obtain similar behavior by forcing the offered window to</span>", 
"<span class=\"comment\"> * a multiple of the mss when it is feasible to do so.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, we don't \"adjust\" for TIMESTAMP or SACK option bytes.</span>", 
"<span class=\"comment\"> * Regular options like TIMESTAMP are taken into account.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__tcp_select_window\">__tcp_select_window</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* MSS for the peer's data.  Previous versions used mss_clamp</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here.  I don't know if the value based on our guesses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of peer's MSS is better for the performance.  It's more correct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but may be worse for the performance because of rcv_mss</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fluctuations.  --SAW  1998/11/1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#rcv_mss\">rcv_mss</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free_space\">free_space</a> = <a class=\"id\" href=\"#tcp_space\">tcp_space</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#full_space\">full_space</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a>, <a class=\"id\" href=\"#tcp_full_space\">tcp_full_space</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#window\">window</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mss\">mss</a> &gt; <a class=\"id\" href=\"#full_space\">full_space</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#full_space\">full_space</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_space\">free_space</a> &lt; (<a class=\"id\" href=\"#full_space\">full_space</a> >> 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#quick\">quick</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_memory_pressure\">tcp_memory_pressure</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       4U * <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#free_space\">free_space</a> &lt; <a class=\"id\" href=\"#mss\">mss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_space\">free_space</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_space\">free_space</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't do rounding if we are using window scaling, since the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scaled window will not line up with the MSS boundary anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#window\">window</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#window\">window</a> = <a class=\"id\" href=\"#free_space\">free_space</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Advertise enough space so that it won't get scaled away.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Import case: prevent zero window announcement if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1&lt;&lt;rcv_wscale &gt; mss.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#window\">window</a> >> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>) << <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>) != <a class=\"id\" href=\"#window\">window</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#window\">window</a> = (((<a class=\"id\" href=\"#window\">window</a> >> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>) + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  << <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the largest window that is a nice multiple of mss.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Window clamp already applied above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If our current window offering is within 1 mss of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * free space we just keep it. This prevents the divide</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and multiply from happening most of the time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We also don't do any window rounding when the free space</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is too small.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#window\">window</a> <= <a class=\"id\" href=\"#free_space\">free_space</a> - <a class=\"id\" href=\"#mss\">mss</a> || <a class=\"id\" href=\"#window\">window</a> &gt; <a class=\"id\" href=\"#free_space\">free_space</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#window\">window</a> = (<a class=\"id\" href=\"#free_space\">free_space</a> / <a class=\"id\" href=\"#mss\">mss</a>) * <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#mss\">mss</a> == <a class=\"id\" href=\"#full_space\">full_space</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#free_space\">free_space</a> &gt; <a class=\"id\" href=\"#window\">window</a> + (<a class=\"id\" href=\"#full_space\">full_space</a> >> 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#window\">window</a> = <a class=\"id\" href=\"#free_space\">free_space</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#window\">window</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Collapses two adjacent SKB's during retransmission. */</span>", 
"static void <a class=\"id\" href=\"#tcp_collapse_retrans\">tcp_collapse_retrans</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#next_skb\">next_skb</a> = <a class=\"id\" href=\"#tcp_write_queue_next\">tcp_write_queue_next</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#skb_size\">skb_size</a>, <a class=\"id\" href=\"#next_skb_size\">next_skb_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_size\">skb_size</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_skb_size\">next_skb_size</a> = <a class=\"id\" href=\"#next_skb\">next_skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>) != 1 || <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#next_skb\">next_skb</a>) != 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_highest_sack_combine\">tcp_highest_sack_combine</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#next_skb\">next_skb</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_unlink_write_queue\">tcp_unlink_write_queue</a>(<a class=\"id\" href=\"#next_skb\">next_skb</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_from_linear_data\">skb_copy_from_linear_data</a>(<a class=\"id\" href=\"#next_skb\">next_skb</a>, <a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#next_skb_size\">next_skb_size</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#next_skb_size\">next_skb_size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_skb\">next_skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> != <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_block_add\">csum_block_add</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#next_skb\">next_skb</a>-><a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#skb_size\">skb_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update sequence range on original skb. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#next_skb\">next_skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Merge over control information. This moves PSH/FIN etc. over */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#next_skb\">next_skb</a>)-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All done, get rid of second SKB and account for it so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * packet counting does not break.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> |= <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#next_skb\">next_skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_EVER_RETRANS\">TCPCB_EVER_RETRANS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* changed transmit queue under us so clear hints */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_clear_retrans_hints_partial\">tcp_clear_retrans_hints_partial</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_skb\">next_skb</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_adjust_pcount\">tcp_adjust_pcount</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#next_skb\">next_skb</a>, <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#next_skb\">next_skb</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_wmem_free_skb\">sk_wmem_free_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#next_skb\">next_skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Check if coalescing SKBs is legal. */</span>", 
"static int <a class=\"id\" href=\"#tcp_can_collapse\">tcp_can_collapse</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>) &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* TODO: SACK collapsing could be used to remove this condition */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* Some heurestics for collapsing over SACK'd could be invented */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* Collapse packets in the retransmit queue to make to create</span>", 
"<span class=\"comment\"> * less packets on the wire. This is only done on retransmission.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_retrans_try_collapse\">tcp_retrans_try_collapse</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#space\">space</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#to\">to</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#first\">first</a> = 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sysctl_tcp_retrans_collapse\">sysctl_tcp_retrans_collapse</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TCPHDR_SYN\">TCPHDR_SYN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue_from_safe\">tcp_for_write_queue_from_safe</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_can_collapse\">tcp_can_collapse</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#space\">space</a> -= <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#space\">space</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Punt if not enough space exists in the first SKB for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the data in the second</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#to\">to</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tcp_wnd_end\">tcp_wnd_end</a>(<a class=\"id\" href=\"#tp\">tp</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_collapse_retrans\">tcp_collapse_retrans</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* This retransmits one SKB.  Policy decisions and retransmit queue</span>", 
"<span class=\"comment\"> * state updates are done by the caller.  Returns non-zero if an</span>", 
"<span class=\"comment\"> * error occurred which prevented the send.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tcp_retransmit_skb\">tcp_retransmit_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cur_mss\">cur_mss</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Inconslusive MTU probe */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#probe_size\">probe_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#probe_size\">probe_size</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do not sent more than we queued. 1/4 is reserved for possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * copying overhead: fragmentation, tunneling, mangling etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>) &gt;", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_queued\">sk_wmem_queued</a> + (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_queued\">sk_wmem_queued</a> >> 2), <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_trim_head\">tcp_trim_head</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> - <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_af_ops\">icsk_af_ops</a>-><a class=\"id\" href=\"#rebuild_header\">rebuild_header</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EHOSTUNREACH\">EHOSTUNREACH</a>; <span class=\"comment\">/* Routing failure or similar. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur_mss\">cur_mss</a> = <a class=\"id\" href=\"#tcp_current_mss\">tcp_current_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If receiver has shrunk his window, and skb is out of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new window, do not retransmit it. The exception is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case, when window is shrunk to zero. In this case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our retransmit serves as a zero window probe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#tcp_wnd_end\">tcp_wnd_end</a>(<a class=\"id\" href=\"#tp\">tp</a>)) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a> != <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#cur_mss\">cur_mss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_fragment\">tcp_fragment</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#cur_mss\">cur_mss</a>, <a class=\"id\" href=\"#cur_mss\">cur_mss</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>; <span class=\"comment\">/* We'll try again later. */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#oldpcount\">oldpcount</a> = <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#oldpcount\">oldpcount</a> &gt; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_tso_segs\">tcp_init_tso_segs</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#cur_mss\">cur_mss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_adjust_pcount\">tcp_adjust_pcount</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#oldpcount\">oldpcount</a> - <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_retrans_try_collapse\">tcp_retrans_try_collapse</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#cur_mss\">cur_mss</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Some Solaris stacks overoptimize and ignore the FIN on a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * retransmit when old data is attached.  So strip it off</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since it is cheap to do so and saves bytes on the network.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; 0 &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TCPHDR_FIN\">TCPHDR_FIN</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> == (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_trim\">pskb_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reuse, even though it does some unnecessary work */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_nondata_skb\">tcp_init_nondata_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a> - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make a copy, if the first transmission SKB clone we made</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is still in somebody's hands, else make a clone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#tcp_transmit_skb\">tcp_transmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, 1, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update global TCP statistics. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_INC_STATS\">TCP_INC_STATS</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#TCP_MIB_RETRANSSEGS\">TCP_MIB_RETRANSSEGS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#total_retrans\">total_retrans</a>++;", 
"", 
"#if <a class=\"id\" href=\"#FASTRETRANS_DEBUG\">FASTRETRANS_DEBUG</a> &gt; 0", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"retrans_out leaked.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_retrans_low\">lost_retrans_low</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> |= <a class=\"id\" href=\"#TCPCB_RETRANS\">TCPCB_RETRANS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Save stamp of the first retransmit. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_stamp\">retrans_stamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_stamp\">retrans_stamp</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_retrans\">undo_retrans</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* snd_nxt is stored to detect loss of retransmitted segment,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * see tcp_input.c tcp_sacktag_write_queue().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#ack_seq\">ack_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Check if we forward retransmits are possible in the current</span>", 
"<span class=\"comment\"> * window/congestion state.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_can_forward_retransmit\">tcp_can_forward_retransmit</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Forward retransmissions are possible only during Recovery. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> != <a class=\"id\" href=\"#TCP_CA_Recovery\">TCP_CA_Recovery</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No forward retransmissions in Reno are possible. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
];
xr_frag_insert('l/df/293aeb1612dfd45495aa9c9e3fad6d4b88deba.xr', __xr_tmp);
