var __xr_tmp = [
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#refcount\">refcount</a>;", 
"", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> <a class=\"id\" href=\"#key\">key</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct futex_q - The hashed futex queue entry, one per waiting task</span>", 
"<span class=\"comment\"> * @task:<span class=\"ts\"/><span class=\"ts\"/>the task waiting on the futex</span>", 
"<span class=\"comment\"> * @lock_ptr:<span class=\"ts\"/><span class=\"ts\"/>the hash bucket lock</span>", 
"<span class=\"comment\"> * @key:<span class=\"ts\"/><span class=\"ts\"/>the key the futex is hashed on</span>", 
"<span class=\"comment\"> * @pi_state:<span class=\"ts\"/><span class=\"ts\"/>optional priority inheritance state</span>", 
"<span class=\"comment\"> * @rt_waiter:<span class=\"ts\"/><span class=\"ts\"/>rt_waiter storage for use with requeue_pi</span>", 
"<span class=\"comment\"> * @requeue_pi_key:<span class=\"ts\"/>the requeue_pi target futex key</span>", 
"<span class=\"comment\"> * @bitset:<span class=\"ts\"/><span class=\"ts\"/>bitset for the optional bitmasked wakeup</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use this hashed waitqueue, instead of a normal wait_queue_t, so</span>", 
"<span class=\"comment\"> * we can wake only the relevant ones (hashed queues may be shared).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A futex_q has a woken state, just like tasks have TASK_RUNNING.</span>", 
"<span class=\"comment\"> * It is considered woken when plist_node_empty(&amp;q-&gt;list) || q-&gt;lock_ptr == 0.</span>", 
"<span class=\"comment\"> * The order of wakup is always to make the first condition true, then</span>", 
"<span class=\"comment\"> * the second.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PI futexes are typically woken before they are removed from the hash list via</span>", 
"<span class=\"comment\"> * the rt_mutex code. See unqueue_me_pi().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#futex_q\">futex_q</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_node\">plist_node</a> <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#requeue_pi_key\">requeue_pi_key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bitset\">bitset</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Hash buckets are shared by all the futex_keys that hash to the same</span>", 
"<span class=\"comment\"> * location.  Each key may have multiple futex_q structures, one for each task</span>", 
"<span class=\"comment\"> * waiting on a futex.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a> <a class=\"id\" href=\"#chain\">chain</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> <a class=\"id\" href=\"#futex_queues\">futex_queues</a>[1<<<a class=\"id\" href=\"#FUTEX_HASHBITS\">FUTEX_HASHBITS</a>];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We hash on the keys returned from get_futex_key (see below).</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hash_futex\">hash_futex</a>(union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#jhash2\">jhash2</a>((<a class=\"id\" href=\"#u32\">u32</a>*)&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#word\">word</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (sizeof(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#word\">word</a>)+sizeof(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#ptr\">ptr</a>))/4,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#futex_queues\">futex_queues</a>[<a class=\"id\" href=\"#hash\">hash</a> &amp; ((1 << <a class=\"id\" href=\"#FUTEX_HASHBITS\">FUTEX_HASHBITS</a>)-1)];", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return 1 if two futex_keys are equal, 0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#match_futex\">match_futex</a>(union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key1\">key1</a>, union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key2\">key2</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#key1\">key1</a> && <a class=\"id\" href=\"#key2\">key2</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#key1\">key1</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#word\">word</a> == <a class=\"id\" href=\"#key2\">key2</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#word\">word</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#key1\">key1</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#ptr\">ptr</a> == <a class=\"id\" href=\"#key2\">key2</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#ptr\">ptr</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#key1\">key1</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#offset\">offset</a> == <a class=\"id\" href=\"#key2\">key2</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Take a reference to the resource addressed by a key.</span>", 
"<span class=\"comment\"> * Can be called while holding spinlocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#get_futex_key_refs\">get_futex_key_refs</a>(union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#offset\">offset</a> &amp; (<a class=\"id\" href=\"#FUT_OFF_INODE\">FUT_OFF_INODE</a>|<a class=\"id\" href=\"#FUT_OFF_MMSHARED\">FUT_OFF_MMSHARED</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FUT_OFF_INODE\">FUT_OFF_INODE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FUT_OFF_MMSHARED\">FUT_OFF_MMSHARED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#private\">private</a>.<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Drop a reference to the resource addressed by a key.</span>", 
"<span class=\"comment\"> * The hash bucket spinlock must not be held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#drop_futex_key_refs\">drop_futex_key_refs</a>(union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#ptr\">ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we're here then we tried to put a key we failed to get */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#offset\">offset</a> &amp; (<a class=\"id\" href=\"#FUT_OFF_INODE\">FUT_OFF_INODE</a>|<a class=\"id\" href=\"#FUT_OFF_MMSHARED\">FUT_OFF_MMSHARED</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FUT_OFF_INODE\">FUT_OFF_INODE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FUT_OFF_MMSHARED\">FUT_OFF_MMSHARED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#private\">private</a>.<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_futex_key() - Get parameters which are the keys for a futex</span>", 
"<span class=\"comment\"> * @uaddr:<span class=\"ts\"/>virtual address of the futex</span>", 
"<span class=\"comment\"> * @fshared:<span class=\"ts\"/>0 for a PROCESS_PRIVATE futex, 1 for PROCESS_SHARED</span>", 
"<span class=\"comment\"> * @key:<span class=\"ts\"/>address where result is stored.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a negative error code or 0</span>", 
"<span class=\"comment\"> * The key words are stored in *key on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For shared mappings, it's (page-&gt;index, vma-&gt;vm_file-&gt;f_path.dentry-&gt;d_inode,</span>", 
"<span class=\"comment\"> * offset_within_page).  For private mappings, it's (uaddr, current-&gt;mm).</span>", 
"<span class=\"comment\"> * We can usually work out the index without swapping in the page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * lock_page() might sleep, the caller should not hold a spinlock.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>, union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a> = (unsigned long)<a class=\"id\" href=\"#uaddr\">uaddr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The futex address must be \"naturally\" aligned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#address\">address</a> % <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#address\">address</a> % sizeof(<a class=\"id\" href=\"#u32\">u32</a>)) != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> -= <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PROCESS_PRIVATE futexes are fast.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * As the mm cannot disappear under us and the 'key' only needs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * virtual address, we dont even have to find the underlying vma.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note : We do have to check 'uaddr' is a valid user address,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *        but access_ok() should be faster than find_vma()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fshared\">fshared</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#private\">private</a>.<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#private\">private</a>.<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_futex_key_refs\">get_futex_key_refs</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_user_pages_fast\">get_user_pages_fast</a>(<a class=\"id\" href=\"#address\">address</a>, 1, 1, &amp;<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Private mappings are handled in a simple way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: When userspace waits on a MAP_SHARED mapping, even if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's a read-only handle, it's expected that futexes attach to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the object not the particular process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#offset\">offset</a> |= <a class=\"id\" href=\"#FUT_OFF_MMSHARED\">FUT_OFF_MMSHARED</a>; <span class=\"comment\">/* ref taken on mm */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#private\">private</a>.<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#private\">private</a>.<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#both\">both</a>.<a class=\"id\" href=\"#offset\">offset</a> |= <a class=\"id\" href=\"#FUT_OFF_INODE\">FUT_OFF_INODE</a>; <span class=\"comment\">/* inode-based key */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_futex_key_refs\">get_futex_key_refs</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(int <a class=\"id\" href=\"#fshared\">fshared</a>, union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_futex_key_refs\">drop_futex_key_refs</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * fault_in_user_writeable() - Fault in user address and verify RW access</span>", 
"<span class=\"comment\"> * @uaddr:<span class=\"ts\"/>pointer to faulting user space address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Slow path to fixup the fault we just took in the atomic write</span>", 
"<span class=\"comment\"> * access to @uaddr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have no generic implementation of a non destructive write to the</span>", 
"<span class=\"comment\"> * user address. We know that we faulted in the atomic pagefault</span>", 
"<span class=\"comment\"> * disabled section so we can as well avoid the #PF overhead by</span>", 
"<span class=\"comment\"> * calling get_user_pages() right away.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fault_in_user_writeable\">fault_in_user_writeable</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#mm\">mm</a>, (unsigned long)<a class=\"id\" href=\"#uaddr\">uaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     1, 1, 0, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> &lt; 0 ? <a class=\"id\" href=\"#ret\">ret</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * futex_top_waiter() - Return the highest priority waiter on a futex</span>", 
"<span class=\"comment\"> * @hb:<span class=\"ts\"/><span class=\"ts\"/>the hash bucket the futex_q's reside in</span>", 
"<span class=\"comment\"> * @key:<span class=\"ts\"/>the futex key (to distinguish it from other futex futex_q's)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with the hb lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#futex_top_waiter\">futex_top_waiter</a>(struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#this\">this</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_for_each_entry\">plist_for_each_entry</a>(<a class=\"id\" href=\"#this\">this</a>, &amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_futex\">match_futex</a>(&amp;<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#key\">key</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#this\">this</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cmpxchg_futex_value_locked\">cmpxchg_futex_value_locked</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#newval\">newval</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#curval\">curval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_disable\">pagefault_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curval\">curval</a> = <a class=\"id\" href=\"#futex_atomic_cmpxchg_inatomic\">futex_atomic_cmpxchg_inatomic</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#newval\">newval</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_enable\">pagefault_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#curval\">curval</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_futex_value_locked\">get_futex_value_locked</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_disable\">pagefault_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__copy_from_user_inatomic\">__copy_from_user_inatomic</a>(<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#from\">from</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_enable\">pagefault_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PI code:</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#refill_pi_state_cache\">refill_pi_state_cache</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#pi_state\">pi_state</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pi_state\">pi_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* pi_mutex gets initialized later */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#refcount\">refcount</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a> = <a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> * <a class=\"id\" href=\"#alloc_pi_state\">alloc_pi_state</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_pi_state\">free_pi_state</a>(struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state\">pi_state</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#refcount\">refcount</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If pi_state-&gt;owner is NULL, the owner is most probably dying</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and has cleaned up the pi_state already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_proxy_unlock\">rt_mutex_proxy_unlock</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>, <a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pi_state-&gt;list is already empty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * clear pi_state-&gt;owner.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * refcount is at 0 - put it back to 1.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#refcount\">refcount</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a> = <a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Look up the task based on what TID userspace gave us.</span>", 
"<span class=\"comment\"> * We dont trust it.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * <a class=\"id\" href=\"#futex_find_get_task\">futex_find_get_task</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This task is holding PI mutexes at exit time =&gt; bad.</span>", 
"<span class=\"comment\"> * Kernel cleans up PI-state, but userspace is likely hosed.</span>", 
"<span class=\"comment\"> * (Robust-futex cleanup is separate and might save the day for userspace.)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#exit_pi_state_list\">exit_pi_state_list</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a>, *<a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#pi_state_list\">pi_state_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> <a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#futex_cmpxchg_enabled\">futex_cmpxchg_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are a ZOMBIE and nobody can enqueue itself on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pi_state_list anymore, but we have to be careful</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * versus waiters unqueueing themselves:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hb\">hb</a> = <a class=\"id\" href=\"#hash_futex\">hash_futex</a>(&amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We dropped the pi-lock, so re-check whether this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * task still owns the PI-state:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> != <a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_unlock\">rt_mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#lookup_pi_state\">lookup_pi_state</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uval\">uval</a>, struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key\">key</a>, struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> **<a class=\"id\" href=\"#ps\">ps</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#this\">this</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#uval\">uval</a> &amp; <a class=\"id\" href=\"#FUTEX_TID_MASK\">FUTEX_TID_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#chain\">chain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_for_each_entry_safe\">plist_for_each_entry_safe</a>(<a class=\"id\" href=\"#this\">this</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_futex\">match_futex</a>(&amp;<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#key\">key</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Another waiter already exists - bump up</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the refcount and return its pi_state:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Userspace might have messed up non PI and PI futexes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pi_state\">pi_state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#refcount\">refcount</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * When pi_state-&gt;owner is NULL then the owner died</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and another waiter is on the fly. pi_state-&gt;owner</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is fixed up by the task which acquires</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pi_state-&gt;rt_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We do not check for pid == 0 which can happen when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the owner died and robust_list_exit() cleared the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * TID.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> && <a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Bail out if user space manipulated the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * futex value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#refcount\">refcount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ps\">ps</a> = <a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are the first waiter - try to look up the real owner and attach</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the new pi_state to it, but bail out when TID = 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#futex_find_get_task\">futex_find_get_task</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to look at the task state flags to figure out,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * whether the task is exiting. To protect against the do_exit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * change of the task flags, we do this protected by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * p-&gt;pi_lock:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The task is on the way out. When PF_EXITPIDONE is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * set, we know that the task has finished the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cleanup:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITPIDONE\">PF_EXITPIDONE</a>) ? -<a class=\"id\" href=\"#ESRCH\">ESRCH</a> : -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#alloc_pi_state\">alloc_pi_state</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize the pi_mutex in locked state and make 'p'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the owner of it:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_init_proxy_locked\">rt_mutex_init_proxy_locked</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Store the key for possible exit cleanups: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#key\">key</a> = *<a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_state_list\">pi_state_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ps\">ps</a> = <a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * futex_lock_pi_atomic() - Atomic work required to acquire a pi aware futex</span>", 
"<span class=\"comment\"> * @uaddr:<span class=\"ts\"/><span class=\"ts\"/>the pi futex user address</span>", 
"<span class=\"comment\"> * @hb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the pi futex hash bucket</span>", 
"<span class=\"comment\"> * @key:<span class=\"ts\"/><span class=\"ts\"/>the futex key associated with uaddr and hb</span>", 
"<span class=\"comment\"> * @ps:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the pi_state pointer where we store the result of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>lookup</span>", 
"<span class=\"comment\"> * @task:<span class=\"ts\"/><span class=\"ts\"/>the task to perform the atomic lock work for.  This will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>be \"current\" except in the case of requeue pi.</span>", 
"<span class=\"comment\"> * @set_waiters:<span class=\"ts\"/>force setting the FUTEX_WAITERS bit (1) or not (0)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 - ready to wait</span>", 
"<span class=\"comment\"> *  1 - acquired the lock</span>", 
"<span class=\"comment\"> * &lt;0 - error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The hb-&gt;lock and futex_key refs shall be held by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#futex_lock_pi_atomic\">futex_lock_pi_atomic</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> **<a class=\"id\" href=\"#ps\">ps</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, int <a class=\"id\" href=\"#set_waiters\">set_waiters</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lock_taken\">lock_taken</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#ownerdied\">ownerdied</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#newval\">newval</a>, <a class=\"id\" href=\"#curval\">curval</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#lock_taken\">lock_taken</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To avoid races, we attempt to take the lock here again</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (by doing a 0 -&gt; TID atomic cmpxchg), while holding all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the locks. It will most likely not succeed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newval\">newval</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#set_waiters\">set_waiters</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newval\">newval</a> |= <a class=\"id\" href=\"#FUTEX_WAITERS\">FUTEX_WAITERS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curval\">curval</a> = <a class=\"id\" href=\"#cmpxchg_futex_value_locked\">cmpxchg_futex_value_locked</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, 0, <a class=\"id\" href=\"#newval\">newval</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#curval\">curval</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Detect deadlocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#curval\">curval</a> &amp; <a class=\"id\" href=\"#FUTEX_TID_MASK\">FUTEX_TID_MASK</a>) == <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#task\">task</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EDEADLK\">EDEADLK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Surprise - we got the lock. Just return to userspace:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#curval\">curval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uval\">uval</a> = <a class=\"id\" href=\"#curval\">curval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the FUTEX_WAITERS flag, so the owner will know it has someone</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to wake at the next unlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
];
xr_frag_insert('l/df/a9369224834bd7346b2d8bccf0694bb960eca2.xr', __xr_tmp);
