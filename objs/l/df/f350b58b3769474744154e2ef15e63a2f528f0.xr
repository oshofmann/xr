var __xr_tmp = [
"<span class=\"ts\"/>case 0x40:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>; <span class=\"comment\">/* REX prefix is boostable */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>case 0x60:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (0x63 &lt; <a class=\"id\" href=\"#opcode\">opcode</a> && <a class=\"id\" href=\"#opcode\">opcode</a> &lt; 0x67)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>; <span class=\"comment\">/* prefixes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* can't boost Address-size override and bound */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#opcode\">opcode</a> != 0x62 && <a class=\"id\" href=\"#opcode\">opcode</a> != 0x67);", 
"<span class=\"ts\"/>case 0x70:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0; <span class=\"comment\">/* can't boost conditional jump */</span>", 
"<span class=\"ts\"/>case 0xc0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* can't boost software-interruptions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (0xc1 &lt; <a class=\"id\" href=\"#opcode\">opcode</a> && <a class=\"id\" href=\"#opcode\">opcode</a> &lt; 0xcc) || <a class=\"id\" href=\"#opcode\">opcode</a> == 0xcf;", 
"<span class=\"ts\"/>case 0xd0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* can boost AA* and XLAT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#opcode\">opcode</a> == 0xd4 || <a class=\"id\" href=\"#opcode\">opcode</a> == 0xd5 || <a class=\"id\" href=\"#opcode\">opcode</a> == 0xd7);", 
"<span class=\"ts\"/>case 0xe0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* can boost in/out and absolute jmps */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return ((<a class=\"id\" href=\"#opcode\">opcode</a> &amp; 0x04) || <a class=\"id\" href=\"#opcode\">opcode</a> == 0xea);", 
"<span class=\"ts\"/>case 0xf0:", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#opcode\">opcode</a> &amp; 0x0c) == 0 && <a class=\"id\" href=\"#opcode\">opcode</a> != 0xf1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>; <span class=\"comment\">/* lock/rep(ne) prefix */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clear and set flags are boostable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#opcode\">opcode</a> == 0xf5 || (0xf7 &lt; <a class=\"id\" href=\"#opcode\">opcode</a> && <a class=\"id\" href=\"#opcode\">opcode</a> &lt; 0xfe));", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* segment override prefixes are boostable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#opcode\">opcode</a> == 0x26 || <a class=\"id\" href=\"#opcode\">opcode</a> == 0x36 || <a class=\"id\" href=\"#opcode\">opcode</a> == 0x3e)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>; <span class=\"comment\">/* prefixes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CS override prefix and call are not boostable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#opcode\">opcode</a> != 0x2e && <a class=\"id\" href=\"#opcode\">opcode</a> != 0x9a);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Recover the probed instruction at addr for further analysis. */</span>", 
"static int <a class=\"id\" href=\"#recover_probed_instruction\">recover_probed_instruction</a>(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a> = <a class=\"id\" href=\"#get_kprobe\">get_kprobe</a>((void *)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kp\">kp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  Basically, kp-&gt;ainsn.insn has an original instruction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  However, RIP-relative instruction can not do single-stepping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  at different place, __copy_instruction() tweaks the displacement of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  that instruction. In that case, we can't recover the instruction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  from the kp-&gt;ainsn.insn.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  On the other hand, kp-&gt;opcode has a copy of the first byte of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  the probed instruction, which is overwritten by int3. And</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  the instruction at kp-&gt;addr is not modified by kprobes except</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  for the first byte, we can recover the original instruction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  from it and kp-&gt;opcode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#MAX_INSN_SIZE\">MAX_INSN_SIZE</a> * sizeof(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Dummy buffers for kallsyms_lookup */</span>", 
"static char <a class=\"id\" href=\"#__dummy_buf\">__dummy_buf</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>];", 
"", 
"<span class=\"comment\">/* Check if paddr is at an instruction boundary */</span>", 
];
xr_frag_insert('l/df/f350b58b3769474744154e2ef15e63a2f528f0.xr', __xr_tmp);
