var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * net/sched/gen_estimator.c<span class=\"ts\"/>Simple rate estimator.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Alexey Kuznetsov, &lt;kuznet@ms2.inr.ac.ru&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Changes:</span>", 
"<span class=\"comment\"> *              Jamal Hadi Salim - moved it to net/core and reshulfed</span>", 
"<span class=\"comment\"> *              names to make it usable in general net subsystem.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sockios\">sockios</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rbtree\">rbtree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#gen_stats\">gen_stats</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   This code is NOT intended to be used for statistics collection,</span>", 
"<span class=\"comment\">   its purpose is to provide a base for statistical multiplexing</span>", 
"<span class=\"comment\">   for controlled load service.</span>", 
"<span class=\"comment\">   If you need only statistics, run a user level daemon which</span>", 
"<span class=\"comment\">   periodically reads byte counters.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Unfortunately, rate estimation is not a very easy task.</span>", 
"<span class=\"comment\">   F.e. I did not find a simple way to estimate the current peak rate</span>", 
"<span class=\"comment\">   and even failed to formulate the problem 8)8)</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   So I preferred not to built an estimator into the scheduler,</span>", 
"<span class=\"comment\">   but run this task separately.</span>", 
"<span class=\"comment\">   Ideally, it should be kernel thread(s), but for now it runs</span>", 
"<span class=\"comment\">   from timers, which puts apparent top bounds on the number of rated</span>", 
"<span class=\"comment\">   flows, has minimal overhead on small, but is enough</span>", 
"<span class=\"comment\">   to handle controlled load service, sets of aggregates.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   We measure rate over A=(1&lt;&lt;interval) seconds and evaluate EWMA:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   avrate = avrate*(1-W) + rate*W</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   where W is chosen as negative power of 2: W = 2^(-ewma_log)</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   The resulting time constant is:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   T = A/(-ln(1-W))</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   NOTES.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   * avbps is scaled by 2^5, avpps is scaled by 2^10.</span>", 
"<span class=\"comment\">   * both values are reported as 32 bit unsigned values. bps can</span>", 
"<span class=\"comment\">     overflow for fast links : max speed being 34360Mbit/sec</span>", 
"<span class=\"comment\">   * Minimal interval is HZ/4=250msec (it is the greatest common divisor</span>", 
"<span class=\"comment\">     for HZ=100 and HZ=1024 8)), maximal interval</span>", 
"<span class=\"comment\">     is (HZ*2^EST_MAX_INTERVAL)/4 = 8sec. Shorter intervals</span>", 
"<span class=\"comment\">     are too expensive, longer ones can be implemented</span>", 
"<span class=\"comment\">     at user level painlessly.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EST_MAX_INTERVAL\">EST_MAX_INTERVAL</a><span class=\"ts\"/>5", 
"", 
"struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gnet_stats_basic_packed\">gnet_stats_basic_packed</a><span class=\"ts\"/>*<a class=\"id\" href=\"#bstats\">bstats</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gnet_stats_rate_est\">gnet_stats_rate_est</a><span class=\"ts\"/>*<a class=\"id\" href=\"#rate_est\">rate_est</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#stats_lock\">stats_lock</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ewma_log\">ewma_log</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_bytes\">last_bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avbps\">avbps</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_packets\">last_packets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avpps\">avpps</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_rcu\">e_rcu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#gen_estimator_head\">gen_estimator_head</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#gen_estimator_head\">gen_estimator_head</a> <a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#EST_MAX_INTERVAL\">EST_MAX_INTERVAL</a>+1];", 
"", 
"<span class=\"comment\">/* Protects against NULL dereference */</span>", 
"static <a class=\"id\" href=\"#DEFINE_RWLOCK\">DEFINE_RWLOCK</a>(<a class=\"id\" href=\"#est_lock\">est_lock</a>);", 
"", 
"<span class=\"comment\">/* Protects against soft lockup during large deletion */</span>", 
"static struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#est_root\">est_root</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#est_tree_lock\">est_tree_lock</a>);", 
"", 
"static void <a class=\"id\" href=\"#est_timer\">est_timer</a>(unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = (int)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#e\">e</a>, &amp;<a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#brate\">brate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#npackets\">npackets</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#rate\">rate</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#stats_lock\">stats_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#est_lock\">est_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#bstats\">bstats</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip\">skip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#bstats\">bstats</a>-><a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#npackets\">npackets</a> = <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#bstats\">bstats</a>-><a class=\"id\" href=\"#packets\">packets</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brate\">brate</a> = (<a class=\"id\" href=\"#nbytes\">nbytes</a> - <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#last_bytes\">last_bytes</a>)<<(7 - <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#last_bytes\">last_bytes</a> = <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#avbps\">avbps</a> += (<a class=\"id\" href=\"#brate\">brate</a> >> <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#ewma_log\">ewma_log</a>) - (<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#avbps\">avbps</a> >> <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#ewma_log\">ewma_log</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#rate_est\">rate_est</a>-><a class=\"id\" href=\"#bps\">bps</a> = (<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#avbps\">avbps</a>+0xF)>>5;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rate\">rate</a> = (<a class=\"id\" href=\"#npackets\">npackets</a> - <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#last_packets\">last_packets</a>)<<(12 - <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#last_packets\">last_packets</a> = <a class=\"id\" href=\"#npackets\">npackets</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#avpps\">avpps</a> += (<a class=\"id\" href=\"#rate\">rate</a> >> <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#ewma_log\">ewma_log</a>) - (<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#avpps\">avpps</a> >> <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#ewma_log\">ewma_log</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#rate_est\">rate_est</a>-><a class=\"id\" href=\"#pps\">pps</a> = (<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#avpps\">avpps</a>+0x1FF)>>10;", 
"<a class=\"id\" href=\"#skip\">skip</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#est_lock\">est_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#stats_lock\">stats_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + ((<a class=\"id\" href=\"#HZ\">HZ</a>/4) << <a class=\"id\" href=\"#idx\">idx</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#gen_add_node\">gen_add_node</a>(struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a> *<a class=\"id\" href=\"#est\">est</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#est_root\">est_root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>, *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#bstats\">bstats</a> &gt; <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#bstats\">bstats</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#est_root\">est_root</a>);", 
"}", 
"", 
"static", 
"struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a> *<a class=\"id\" href=\"#gen_find_node\">gen_find_node</a>(const struct <a class=\"id\" href=\"#gnet_stats_basic_packed\">gnet_stats_basic_packed</a> *<a class=\"id\" href=\"#bstats\">bstats</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#gnet_stats_rate_est\">gnet_stats_rate_est</a> *<a class=\"id\" href=\"#rate_est\">rate_est</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#est_root\">est_root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bstats\">bstats</a> &gt; <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#bstats\">bstats</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#bstats\">bstats</a> &lt; <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#bstats\">bstats</a> || <a class=\"id\" href=\"#rate_est\">rate_est</a> != <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#rate_est\">rate_est</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#e\">e</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * gen_new_estimator - create a new rate estimator</span>", 
"<span class=\"comment\"> * @bstats: basic statistics</span>", 
"<span class=\"comment\"> * @rate_est: rate estimator statistics</span>", 
"<span class=\"comment\"> * @stats_lock: statistics lock</span>", 
"<span class=\"comment\"> * @opt: rate estimator configuration TLV</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Creates a new rate estimator with &amp;bstats as source and &amp;rate_est</span>", 
"<span class=\"comment\"> * as destination. A new timer with the interval specified in the</span>", 
"<span class=\"comment\"> * configuration TLV is created. Upon each interval, the latest statistics</span>", 
"<span class=\"comment\"> * will be read from &amp;bstats and the estimated rate will be stored in</span>", 
"<span class=\"comment\"> * &amp;rate_est with the statistics lock grabed during this period.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or a negative error code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#gen_new_estimator\">gen_new_estimator</a>(struct <a class=\"id\" href=\"#gnet_stats_basic_packed\">gnet_stats_basic_packed</a> *<a class=\"id\" href=\"#bstats\">bstats</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#gnet_stats_rate_est\">gnet_stats_rate_est</a> *<a class=\"id\" href=\"#rate_est\">rate_est</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#stats_lock\">stats_lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#opt\">opt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a> *<a class=\"id\" href=\"#est\">est</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gnet_estimator\">gnet_estimator</a> *<a class=\"id\" href=\"#parm\">parm</a> = <a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#opt\">opt</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#opt\">opt</a>) &lt; sizeof(*<a class=\"id\" href=\"#parm\">parm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parm\">parm</a>-><a class=\"id\" href=\"#interval\">interval</a> &lt; -2 || <a class=\"id\" href=\"#parm\">parm</a>-><a class=\"id\" href=\"#interval\">interval</a> &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#est\">est</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#est\">est</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOBUFS\">ENOBUFS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#parm\">parm</a>-><a class=\"id\" href=\"#interval\">interval</a> + 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#bstats\">bstats</a> = <a class=\"id\" href=\"#bstats\">bstats</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#rate_est\">rate_est</a> = <a class=\"id\" href=\"#rate_est\">rate_est</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#stats_lock\">stats_lock</a> = <a class=\"id\" href=\"#stats_lock\">stats_lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#ewma_log\">ewma_log</a> = <a class=\"id\" href=\"#parm\">parm</a>-><a class=\"id\" href=\"#ewma_log\">ewma_log</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#last_bytes\">last_bytes</a> = <a class=\"id\" href=\"#bstats\">bstats</a>-><a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#avbps\">avbps</a> = <a class=\"id\" href=\"#rate_est\">rate_est</a>-><a class=\"id\" href=\"#bps\">bps</a><<5;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#last_packets\">last_packets</a> = <a class=\"id\" href=\"#bstats\">bstats</a>-><a class=\"id\" href=\"#packets\">packets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#avpps\">avpps</a> = <a class=\"id\" href=\"#rate_est\">rate_est</a>-><a class=\"id\" href=\"#pps\">pps</a><<10;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#est_tree_lock\">est_tree_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#function\">function</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_timer\">setup_timer</a>(&amp;<a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#est_timer\">est_timer</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + ((<a class=\"id\" href=\"#HZ\">HZ</a>/4) << <a class=\"id\" href=\"#idx\">idx</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#est\">est</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#elist\">elist</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gen_add_node\">gen_add_node</a>(<a class=\"id\" href=\"#est\">est</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#est_tree_lock\">est_tree_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#gen_new_estimator\">gen_new_estimator</a>);", 
"", 
"static void <a class=\"id\" href=\"#__gen_kill_estimator\">__gen_kill_estimator</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a> *<a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a>, <a class=\"id\" href=\"#e_rcu\">e_rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#e\">e</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * gen_kill_estimator - remove a rate estimator</span>", 
"<span class=\"comment\"> * @bstats: basic statistics</span>", 
"<span class=\"comment\"> * @rate_est: rate estimator statistics</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Removes the rate estimator specified by &amp;bstats and &amp;rate_est.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note : Caller should respect an RCU grace period before freeing stats_lock</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#gen_kill_estimator\">gen_kill_estimator</a>(struct <a class=\"id\" href=\"#gnet_stats_basic_packed\">gnet_stats_basic_packed</a> *<a class=\"id\" href=\"#bstats\">bstats</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gnet_stats_rate_est\">gnet_stats_rate_est</a> *<a class=\"id\" href=\"#rate_est\">rate_est</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gen_estimator\">gen_estimator</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#est_tree_lock\">est_tree_lock</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#gen_find_node\">gen_find_node</a>(<a class=\"id\" href=\"#bstats\">bstats</a>, <a class=\"id\" href=\"#rate_est\">rate_est</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#est_root\">est_root</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock_bh\">write_lock_bh</a>(&amp;<a class=\"id\" href=\"#est_lock\">est_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#bstats\">bstats</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#est_lock\">est_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#e_rcu\">e_rcu</a>, <a class=\"id\" href=\"#__gen_kill_estimator\">__gen_kill_estimator</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#est_tree_lock\">est_tree_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#gen_kill_estimator\">gen_kill_estimator</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * gen_replace_estimator - replace rate estimator configuration</span>", 
"<span class=\"comment\"> * @bstats: basic statistics</span>", 
"<span class=\"comment\"> * @rate_est: rate estimator statistics</span>", 
"<span class=\"comment\"> * @stats_lock: statistics lock</span>", 
"<span class=\"comment\"> * @opt: rate estimator configuration TLV</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Replaces the configuration of a rate estimator by calling</span>", 
"<span class=\"comment\"> * gen_kill_estimator() and gen_new_estimator().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#gen_replace_estimator\">gen_replace_estimator</a>(struct <a class=\"id\" href=\"#gnet_stats_basic_packed\">gnet_stats_basic_packed</a> *<a class=\"id\" href=\"#bstats\">bstats</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#gnet_stats_rate_est\">gnet_stats_rate_est</a> *<a class=\"id\" href=\"#rate_est\">rate_est</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#stats_lock\">stats_lock</a>, struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#opt\">opt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gen_kill_estimator\">gen_kill_estimator</a>(<a class=\"id\" href=\"#bstats\">bstats</a>, <a class=\"id\" href=\"#rate_est\">rate_est</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#gen_new_estimator\">gen_new_estimator</a>(<a class=\"id\" href=\"#bstats\">bstats</a>, <a class=\"id\" href=\"#rate_est\">rate_est</a>, <a class=\"id\" href=\"#stats_lock\">stats_lock</a>, <a class=\"id\" href=\"#opt\">opt</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#gen_replace_estimator\">gen_replace_estimator</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * gen_estimator_active - test if estimator is currently in use</span>", 
"<span class=\"comment\"> * @bstats: basic statistics</span>", 
"<span class=\"comment\"> * @rate_est: rate estimator statistics</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if estimator is active, and false if not.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#gen_estimator_active\">gen_estimator_active</a>(const struct <a class=\"id\" href=\"#gnet_stats_basic_packed\">gnet_stats_basic_packed</a> *<a class=\"id\" href=\"#bstats\">bstats</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#gnet_stats_rate_est\">gnet_stats_rate_est</a> *<a class=\"id\" href=\"#rate_est\">rate_est</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#est_tree_lock\">est_tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#gen_find_node\">gen_find_node</a>(<a class=\"id\" href=\"#bstats\">bstats</a>, <a class=\"id\" href=\"#rate_est\">rate_est</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#est_tree_lock\">est_tree_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#gen_estimator_active\">gen_estimator_active</a>);", 
];
xr_frag_insert('l/df/f6991a494d0eb1900ddc302bb5377f3757e1ee.xr', __xr_tmp);
