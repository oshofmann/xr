var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/mm/slab.c</span>", 
"<span class=\"comment\"> * Written by Mark Hemment, 1996/97.</span>", 
"<span class=\"comment\"> * (markhe@nextd.demon.co.uk)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * kmem_cache_destroy() + some cleanup - 1999 Andrea Arcangeli</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Major cleanup, different bufctl logic, per-cpu arrays</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(c) 2000 Manfred Spraul</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Cleanup, make the head arrays unconditional, preparation for NUMA</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>(c) 2002 Manfred Spraul</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An implementation of the Slab Allocator as described in outline in;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>UNIX Internals: The New Frontiers by Uresh Vahalia</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pub: Prentice Hall<span class=\"ts\"/>ISBN 0-13-101908-2</span>", 
"<span class=\"comment\"> * or with a little more detail in;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The Slab Allocator: An Object-Caching Kernel Memory Allocator</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Jeff Bonwick (Sun Microsystems).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Presented at: USENIX Summer 1994 Technical Conference</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The memory is organized in caches, one cache for each object type.</span>", 
"<span class=\"comment\"> * (e.g. inode_cache, dentry_cache, buffer_head, vm_area_struct)</span>", 
"<span class=\"comment\"> * Each cache consists out of many slabs (they are small (usually one</span>", 
"<span class=\"comment\"> * page long) and always contiguous), and each slab contains multiple</span>", 
"<span class=\"comment\"> * initialized objects.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This means, that your constructor is used only for newly allocated</span>", 
"<span class=\"comment\"> * slabs and you must pass objects with the same initializations to</span>", 
"<span class=\"comment\"> * kmem_cache_free.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each cache can only support one memory type (GFP_DMA, GFP_HIGHMEM,</span>", 
"<span class=\"comment\"> * normal). If you need a special memory type, then must create a new</span>", 
"<span class=\"comment\"> * cache for that memory type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In order to reduce fragmentation, the slabs are sorted in 3 groups:</span>", 
"<span class=\"comment\"> *   full slabs with 0 free objects</span>", 
"<span class=\"comment\"> *   partial slabs</span>", 
"<span class=\"comment\"> *   empty slabs with no allocated objects</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If partial slabs exist, then new allocations come from these slabs,</span>", 
"<span class=\"comment\"> * otherwise from empty slabs or new slabs are allocated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * kmem_cache_destroy() CAN CRASH if you try to allocate from the cache</span>", 
"<span class=\"comment\"> * during kmem_cache_destroy(). The caller must prevent concurrent allocs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each cache has a short per-cpu head array, most allocs</span>", 
"<span class=\"comment\"> * and frees go into that array, and if that array overflows, then 1/2</span>", 
"<span class=\"comment\"> * of the entries in the array are given back into the global cache.</span>", 
"<span class=\"comment\"> * The head array is strictly LIFO and should improve the cache hit rates.</span>", 
"<span class=\"comment\"> * On SMP, it additionally reduces the spinlock operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The c_cpuarray may not be read with enabled local interrupts -</span>", 
"<span class=\"comment\"> * it's changed with a smp_call_function().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SMP synchronization:</span>", 
"<span class=\"comment\"> *  constructors and destructors are called without any locking.</span>", 
"<span class=\"comment\"> *  Several members in struct kmem_cache and struct slab never change, they</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are accessed without any locking.</span>", 
"<span class=\"comment\"> *  The per-cpu arrays are never accessed from the wrong cpu, no locking,</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/>and local interrupts are disabled so slab code is preempt-safe.</span>", 
"<span class=\"comment\"> *  The non-constant members are protected with a per-cache irq spinlock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Many thanks to Mark Hemment, who wrote another per-cpu slab patch</span>", 
"<span class=\"comment\"> * in 2000 - many ideas in the current implementation are derived from</span>", 
"<span class=\"comment\"> * his patch.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Further notes from the original documentation:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 11 April '97.  Started multi-threading - markhe</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The global cache-chain is protected by the mutex 'cache_chain_mutex'.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The sem is only needed when accessing/extending the cache-chain, which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>can never happen inside an interrupt (kmem_cache_create(),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kmem_cache_shrink() and kmem_cache_reap()).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>At present, each engine can be growing a cache.  This should be blocked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 15 March 2005. NUMA slab allocator.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Shai Fultheim &lt;shai@scalex86.org&gt;.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Shobhit Dayal &lt;shobhit@calsoftinc.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Alok N Kataria &lt;alokk@calsoftinc.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Christoph Lameter &lt;christoph@lameter.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Modified the slab allocator to be node aware on NUMA systems.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Each node has its own list of partial, free and full slabs.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>All object allocations for a node occur from node specific slab lists.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poison\">poison</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nodemask\">nodemask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemleak\">kmemleak</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fault\">fault</a>-<a class=\"id\" href=\"#inject\">inject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtmutex\">rtmutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#reciprocal_div\">reciprocal_div</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugobjects\">debugobjects</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemcheck\">kmemcheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory\">memory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a><span class=\"ts\"/>&lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * DEBUG<span class=\"ts\"/>- 1 for kmem_cache_create() to honour; SLAB_RED_ZONE &amp; SLAB_POISON.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  0 for faster, smaller code (especially in the critical paths).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * STATS<span class=\"ts\"/>- 1 to collect stats for /proc/slabinfo.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  0 for faster, smaller code (especially in the critical paths).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FORCED_DEBUG<span class=\"ts\"/>- 1 enables SLAB_RED_ZONE and SLAB_POISON (if possible)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SLAB\">CONFIG_DEBUG_SLAB</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG\">DEBUG</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS\">STATS</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#FORCED_DEBUG\">FORCED_DEBUG</a><span class=\"ts\"/>1", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG\">DEBUG</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS\">STATS</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#FORCED_DEBUG\">FORCED_DEBUG</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Shouldn't this be in a header file somewhere? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a><span class=\"ts\"/><span class=\"ts\"/>sizeof(void *)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#REDZONE_ALIGN\">REDZONE_ALIGN</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a>, <a class=\"id\" href=\"#__alignof__\">__alignof__</a>(unsigned long long))", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_KMALLOC_FLAGS\">ARCH_KMALLOC_FLAGS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_KMALLOC_FLAGS\">ARCH_KMALLOC_FLAGS</a> <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Legal flag mask for kmem_cache_create(). */</span>", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_MASK\">CREATE_MASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a> | <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_CACHE_DMA\">SLAB_CACHE_DMA</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a> | <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a> | <a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_DEBUG_OBJECTS\">SLAB_DEBUG_OBJECTS</a> | <a class=\"id\" href=\"#SLAB_NOLEAKTRACE\">SLAB_NOLEAKTRACE</a> | <a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_MASK\">CREATE_MASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_CACHE_DMA\">SLAB_CACHE_DMA</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a> | <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a> | <a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_DEBUG_OBJECTS\">SLAB_DEBUG_OBJECTS</a> | <a class=\"id\" href=\"#SLAB_NOLEAKTRACE\">SLAB_NOLEAKTRACE</a> | <a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kmem_bufctl_t:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Bufctl's are used for linking objs within a slab</span>", 
"<span class=\"comment\"> * linked offsets.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This implementation relies on \"struct page\" for locating the cache &amp;</span>", 
"<span class=\"comment\"> * slab an object belongs to.</span>", 
"<span class=\"comment\"> * This allows the bufctl structure to be small (one int), but limits</span>", 
"<span class=\"comment\"> * the number of objects a slab (not a cache) can contain when off-slab</span>", 
"<span class=\"comment\"> * bufctls are used. The limit is the size of the largest general cache</span>", 
"<span class=\"comment\"> * that does not use off-slab slabs.</span>", 
"<span class=\"comment\"> * For 32bit archs with 4 kB pages, is this 56.</span>", 
"<span class=\"comment\"> * This is not serious, as it is only for large objects, when it is unwise</span>", 
"<span class=\"comment\"> * to have too many per slab.</span>", 
"<span class=\"comment\"> * Note: This limit can be raised by introducing a general cache whose size</span>", 
"<span class=\"comment\"> * is less than 512 (PAGE_SIZE&lt;&lt;3), but greater than 256.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"typedef unsigned int <a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUFCTL_END\">BUFCTL_END</a><span class=\"ts\"/>(((<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>)(~0U))-0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUFCTL_FREE\">BUFCTL_FREE</a><span class=\"ts\"/>(((<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>)(~0U))-1)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#BUFCTL_ACTIVE\">BUFCTL_ACTIVE</a><span class=\"ts\"/>(((<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>)(~0U))-2)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_LIMIT\">SLAB_LIMIT</a><span class=\"ts\"/>(((<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>)(~0U))-3)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * struct slab</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Manages the objs in a slab. Placed either at the beginning of mem allocated</span>", 
"<span class=\"comment\"> * for a slab, or allocated from an general cache.</span>", 
"<span class=\"comment\"> * Slabs are chained into three list: fully used, partial, fully free slabs.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#slab\">slab</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#colouroff\">colouroff</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#s_mem\">s_mem</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* including colour offset */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#inuse\">inuse</a>;<span class=\"ts\"/><span class=\"comment\">/* num of objs active in slab */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a> <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#nodeid\">nodeid</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * struct slab_rcu</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * slab_destroy on a SLAB_DESTROY_BY_RCU cache uses this structure to</span>", 
"<span class=\"comment\"> * arrange for kmem_freepages to be called via RCU.  This is useful if</span>", 
"<span class=\"comment\"> * we need to approach a kernel structure obliquely, from its address</span>", 
"<span class=\"comment\"> * obtained without the usual locking.  We can lock the structure to</span>", 
"<span class=\"comment\"> * stabilize it and check it's still at the given address, only if we</span>", 
"<span class=\"comment\"> * can be sure that the memory has not been meanwhile reused for some</span>", 
"<span class=\"comment\"> * other kind of object (which our subsystem's lock might corrupt).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * rcu_read_lock before reading the address, then rcu_read_unlock after</span>", 
"<span class=\"comment\"> * taking the spinlock within the structure expected at that address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We assume struct slab_rcu can overlay struct slab when destroying.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#slab_rcu\">slab_rcu</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * struct array_cache</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:</span>", 
"<span class=\"comment\"> * - LIFO ordering, to hand out cache-warm objects from _alloc</span>", 
"<span class=\"comment\"> * - reduce the number of linked list operations</span>", 
"<span class=\"comment\"> * - reduce spinlock operations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The limit is stored in the per-cpu structure to reduce the data cache</span>", 
"<span class=\"comment\"> * footprint.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#array_cache\">array_cache</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#avail\">avail</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#touched\">touched</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#entry\">entry</a>[];<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Must have this definition in here for the proper</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * alignment of array_cache. Also simplifies accessing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the entries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bootstrap: The caches do not work without cpuarrays anymore, but the</span>", 
"<span class=\"comment\"> * cpuarrays are allocated from the generic caches...</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BOOT_CPUCACHE_ENTRIES\">BOOT_CPUCACHE_ENTRIES</a><span class=\"ts\"/>1", 
"struct <a class=\"id\" href=\"#arraycache_init\">arraycache_init</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> <a class=\"id\" href=\"#cache\">cache</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#BOOT_CPUCACHE_ENTRIES\">BOOT_CPUCACHE_ENTRIES</a>];", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The slab lists for all objects.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>;<span class=\"ts\"/><span class=\"comment\">/* partial list first, better asm code */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#slabs_full\">slabs_full</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#slabs_free\">slabs_free</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free_objects\">free_objects</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#free_limit\">free_limit</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#colour_next\">colour_next</a>;<span class=\"ts\"/><span class=\"comment\">/* Per-node cache coloring */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#list_lock\">list_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#shared\">shared</a>;<span class=\"ts\"/><span class=\"comment\">/* shared per node */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#alien\">alien</a>;<span class=\"ts\"/><span class=\"comment\">/* on other nodes */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_reap\">next_reap</a>;<span class=\"ts\"/><span class=\"comment\">/* updated without locking */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free_touched\">free_touched</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* updated without locking */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Need this for bootstrapping a per node allocator.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_INIT_LISTS\">NUM_INIT_LISTS</a> (3 * <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#initkmem_list3\">initkmem_list3</a>[<a class=\"id\" href=\"#NUM_INIT_LISTS\">NUM_INIT_LISTS</a>];", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#CACHE_CACHE\">CACHE_CACHE</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SIZE_AC\">SIZE_AC</a> <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SIZE_L3\">SIZE_L3</a> (2 * <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"", 
"static int <a class=\"id\" href=\"#drain_freelist\">drain_freelist</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>, int <a class=\"id\" href=\"#tofree\">tofree</a>);", 
"static void <a class=\"id\" href=\"#free_block\">free_block</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void **<a class=\"id\" href=\"#objpp\">objpp</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>);", 
"static int <a class=\"id\" href=\"#enable_cpucache\">enable_cpucache</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"static void <a class=\"id\" href=\"#cache_reap\">cache_reap</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#unused\">unused</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function must be completely optimized away if a constant is passed to</span>", 
"<span class=\"comment\"> * it.  Mostly the same as what is in linux/slab.h except it returns an index.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> int <a class=\"id\" href=\"#index_of\">index_of</a>(const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>extern void <a class=\"id\" href=\"#__bad_size\">__bad_size</a>(void);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>(<a class=\"id\" href=\"#x\">x</a>) \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <=<a class=\"id\" href=\"#x\">x</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>; \\", 
"<span class=\"ts\"/>else \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmalloc_sizes\">kmalloc_sizes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bad_size\">__bad_size</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bad_size\">__bad_size</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#slab_early_init\">slab_early_init</a> = 1;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a> <a class=\"id\" href=\"#index_of\">index_of</a>(sizeof(struct <a class=\"id\" href=\"#arraycache_init\">arraycache_init</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INDEX_L3\">INDEX_L3</a> <a class=\"id\" href=\"#index_of\">index_of</a>(sizeof(struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a>))", 
"", 
"static void <a class=\"id\" href=\"#kmem_list3_init\">kmem_list3_init</a>(struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#slabs_full\">slabs_full</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#colour_next\">colour_next</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#free_touched\">free_touched</a> = 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAKE_LIST\">MAKE_LIST</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#listp\">listp</a>, <a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#listp\">listp</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>]-><a class=\"id\" href=\"#slab\">slab</a>), <a class=\"id\" href=\"#listp\">listp</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MAKE_ALL_LISTS\">MAKE_ALL_LISTS</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAKE_LIST\">MAKE_LIST</a>((<a class=\"id\" href=\"#cachep\">cachep</a>), (&amp;(<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#slabs_full\">slabs_full</a>), <a class=\"id\" href=\"#slabs_full\">slabs_full</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAKE_LIST\">MAKE_LIST</a>((<a class=\"id\" href=\"#cachep\">cachep</a>), (&amp;(<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>), <a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAKE_LIST\">MAKE_LIST</a>((<a class=\"id\" href=\"#cachep\">cachep</a>), (&amp;(<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>), <a class=\"id\" href=\"#slabs_free\">slabs_free</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFLGS_OFF_SLAB\">CFLGS_OFF_SLAB</a><span class=\"ts\"/><span class=\"ts\"/>(0x80000000UL)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#OFF_SLAB\">OFF_SLAB</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CFLGS_OFF_SLAB\">CFLGS_OFF_SLAB</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BATCHREFILL_LIMIT\">BATCHREFILL_LIMIT</a><span class=\"ts\"/>16", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Optimization question: fewer reaps means less probability for unnessary</span>", 
"<span class=\"comment\"> * cpucache drain/refill cycles.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * OTOH the cpuarrays can contain lots of objects,</span>", 
"<span class=\"comment\"> * which could lock up otherwise freeable slabs.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REAPTIMEOUT_CPUC\">REAPTIMEOUT_CPUC</a><span class=\"ts\"/>(2*<a class=\"id\" href=\"#HZ\">HZ</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a><span class=\"ts\"/>(4*<a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"#if <a class=\"id\" href=\"#STATS\">STATS</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ACTIVE\">STATS_INC_ACTIVE</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#num_active\">num_active</a>++)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_DEC_ACTIVE\">STATS_DEC_ACTIVE</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#num_active\">num_active</a>--)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ALLOCED\">STATS_INC_ALLOCED</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#num_allocations\">num_allocations</a>++)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_GROWN\">STATS_INC_GROWN</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#grown\">grown</a>++)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_ADD_REAPED\">STATS_ADD_REAPED</a>(<a class=\"id\" href=\"#x\">x</a>,<a class=\"id\" href=\"#y\">y</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#reaped\">reaped</a> += (<a class=\"id\" href=\"#y\">y</a>))", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_SET_HIGH\">STATS_SET_HIGH</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#num_active\">num_active</a> &gt; (<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#high_mark\">high_mark</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#high_mark\">high_mark</a> = (<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#num_active\">num_active</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ERR\">STATS_INC_ERR</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#errors\">errors</a>++)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_NODEALLOCS\">STATS_INC_NODEALLOCS</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#node_allocs\">node_allocs</a>++)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_NODEFREES\">STATS_INC_NODEFREES</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#node_frees\">node_frees</a>++)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_ACOVERFLOW\">STATS_INC_ACOVERFLOW</a>(<a class=\"id\" href=\"#x\">x</a>)   ((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#node_overflow\">node_overflow</a>++)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_SET_FREEABLE\">STATS_SET_FREEABLE</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#max_freeable\">max_freeable</a> &lt; <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#max_freeable\">max_freeable</a> = <a class=\"id\" href=\"#i\">i</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_ALLOCHIT\">STATS_INC_ALLOCHIT</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#allochit\">allochit</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_ALLOCMISS\">STATS_INC_ALLOCMISS</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#allocmiss\">allocmiss</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_FREEHIT\">STATS_INC_FREEHIT</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#freehit\">freehit</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_FREEMISS\">STATS_INC_FREEMISS</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#freemiss\">freemiss</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ACTIVE\">STATS_INC_ACTIVE</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_DEC_ACTIVE\">STATS_DEC_ACTIVE</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ALLOCED\">STATS_INC_ALLOCED</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_GROWN\">STATS_INC_GROWN</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_ADD_REAPED\">STATS_ADD_REAPED</a>(<a class=\"id\" href=\"#x\">x</a>,<a class=\"id\" href=\"#y\">y</a>)<span class=\"ts\"/>do { (void)(<a class=\"id\" href=\"#y\">y</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_SET_HIGH\">STATS_SET_HIGH</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ERR\">STATS_INC_ERR</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_NODEALLOCS\">STATS_INC_NODEALLOCS</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_NODEFREES\">STATS_INC_NODEFREES</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_ACOVERFLOW\">STATS_INC_ACOVERFLOW</a>(<a class=\"id\" href=\"#x\">x</a>)   do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#STATS_SET_FREEABLE\">STATS_SET_FREEABLE</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#i\">i</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_ALLOCHIT\">STATS_INC_ALLOCHIT</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_ALLOCMISS\">STATS_INC_ALLOCMISS</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_FREEHIT\">STATS_INC_FREEHIT</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATS_INC_FREEMISS\">STATS_INC_FREEMISS</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * memory layout of objects:</span>", 
"<span class=\"comment\"> * 0<span class=\"ts\"/><span class=\"ts\"/>: objp</span>", 
"<span class=\"comment\"> * 0 .. cachep-&gt;obj_offset - BYTES_PER_WORD - 1: padding. This ensures that</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>the end of an object is aligned with the end of the real</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>allocation. Catches writes behind the end of the allocation.</span>", 
"<span class=\"comment\"> * cachep-&gt;obj_offset - BYTES_PER_WORD .. cachep-&gt;obj_offset - 1:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>redzone word.</span>", 
"<span class=\"comment\"> * cachep-&gt;obj_offset: The real object.</span>", 
"<span class=\"comment\"> * cachep-&gt;buffer_size - 2* BYTES_PER_WORD: redzone word [BYTES_PER_WORD long]</span>", 
"<span class=\"comment\"> * cachep-&gt;buffer_size - 1* BYTES_PER_WORD: last caller address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[BYTES_PER_WORD long]</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#obj_offset\">obj_offset</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#obj_size\">obj_size</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#obj_size\">obj_size</a>;", 
"}", 
"", 
"static unsigned long long *<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>));", 
"<span class=\"ts\"/>return (unsigned long long*) (<a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      sizeof(unsigned long long));", 
"}", 
"", 
"static unsigned long long *<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (unsigned long long *)(<a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      sizeof(unsigned long long) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#REDZONE_ALIGN\">REDZONE_ALIGN</a>);", 
"<span class=\"ts\"/>return (unsigned long long *) (<a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(unsigned long long));", 
"}", 
"", 
"static void **<a class=\"id\" href=\"#dbg_userword\">dbg_userword</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>));", 
"<span class=\"ts\"/>return (void **)(<a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> - <a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a>);", 
"}", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>)<span class=\"ts\"/>({<a class=\"id\" href=\"#BUG\">BUG</a>(); (unsigned long long *)<a class=\"id\" href=\"#NULL\">NULL</a>;})", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>)<span class=\"ts\"/>({<a class=\"id\" href=\"#BUG\">BUG</a>(); (unsigned long long *)<a class=\"id\" href=\"#NULL\">NULL</a>;})", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dbg_userword\">dbg_userword</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>)<span class=\"ts\"/>({<a class=\"id\" href=\"#BUG\">BUG</a>(); (void **)<a class=\"id\" href=\"#NULL\">NULL</a>;})", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#slab_buffer_size\">slab_buffer_size</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slab_buffer_size\">slab_buffer_size</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do not go above this order unless 0 objects fit into the slab.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#BREAK_GFP_ORDER_HI\">BREAK_GFP_ORDER_HI</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#BREAK_GFP_ORDER_LO\">BREAK_GFP_ORDER_LO</a><span class=\"ts\"/>0", 
"static int <a class=\"id\" href=\"#slab_break_gfp_order\">slab_break_gfp_order</a> = <a class=\"id\" href=\"#BREAK_GFP_ORDER_LO\">BREAK_GFP_ORDER_LO</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions for storing/retrieving the cachep and or slab from the page</span>", 
"<span class=\"comment\"> * allocator.  These are used to find the slab an obj belongs to.  With kfree(),</span>", 
"<span class=\"comment\"> * these are used to find the cache which an obj belongs to.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#page_set_cache\">page_set_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#next\">next</a> = (struct <a class=\"id\" href=\"#list_head\">list_head</a> *)<a class=\"id\" href=\"#cache\">cache</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#page_get_cache\">page_get_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageSlab\">PageSlab</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#page_set_slab\">page_set_slab</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slab\">slab</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#prev\">prev</a> = (struct <a class=\"id\" href=\"#list_head\">list_head</a> *)<a class=\"id\" href=\"#slab\">slab</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#page_get_slab\">page_get_slab</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageSlab\">PageSlab</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#slab\">slab</a> *)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#virt_to_cache\">virt_to_cache</a>(const void *<a class=\"id\" href=\"#obj\">obj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_head_page\">virt_to_head_page</a>(<a class=\"id\" href=\"#obj\">obj</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_get_cache\">page_get_cache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#virt_to_slab\">virt_to_slab</a>(const void *<a class=\"id\" href=\"#obj\">obj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_head_page\">virt_to_head_page</a>(<a class=\"id\" href=\"#obj\">obj</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_get_slab\">page_get_slab</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#index_to_obj\">index_to_obj</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slab\">slab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slab\">slab</a>-><a class=\"id\" href=\"#s_mem\">s_mem</a> + <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> * <a class=\"id\" href=\"#idx\">idx</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We want to avoid an expensive divide : (offset / cache-&gt;buffer_size)</span>", 
"<span class=\"comment\"> *   Using the fact that buffer_size is a constant for a particular cache,</span>", 
"<span class=\"comment\"> *   we can replace (offset / cache-&gt;buffer_size) by</span>", 
"<span class=\"comment\"> *   reciprocal_divide(offset, cache-&gt;reciprocal_buffer_size)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#obj_to_index\">obj_to_index</a>(const struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slab\">slab</a>, void *<a class=\"id\" href=\"#obj\">obj</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#obj\">obj</a> - <a class=\"id\" href=\"#slab\">slab</a>-><a class=\"id\" href=\"#s_mem\">s_mem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#reciprocal_divide\">reciprocal_divide</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#reciprocal_buffer_size\">reciprocal_buffer_size</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the default caches for kmalloc. Custom caches can have other sizes.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cache_sizes\">cache_sizes</a> <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[] = {", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>(<a class=\"id\" href=\"#x\">x</a>) { .<a class=\"id\" href=\"#cs_size\">cs_size</a> = (<a class=\"id\" href=\"#x\">x</a>) },", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmalloc_sizes\">kmalloc_sizes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CACHE\">CACHE</a>(<a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>)", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>);", 
"", 
"<span class=\"comment\">/* Must match cache_sizes above. Out of line to keep cache footprint low. */</span>", 
"struct <a class=\"id\" href=\"#cache_names\">cache_names</a> {", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name_dma\">name_dma</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#cache_names\">cache_names</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#cache_names\">cache_names</a>[] = {", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>(<a class=\"id\" href=\"#x\">x</a>) { .<a class=\"id\" href=\"#name\">name</a> = \"size-\" #<a class=\"id\" href=\"#x\">x</a>, .<a class=\"id\" href=\"#name_dma\">name_dma</a> = \"size-\" #<a class=\"id\" href=\"#x\">x</a> \"(DMA)\" },", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmalloc_sizes\">kmalloc_sizes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#NULL\">NULL</a>,}", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#arraycache_init\">arraycache_init</a> <a class=\"id\" href=\"#initarray_cache\">initarray_cache</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> =", 
"    { {0, <a class=\"id\" href=\"#BOOT_CPUCACHE_ENTRIES\">BOOT_CPUCACHE_ENTRIES</a>, 1, 0} };", 
"static struct <a class=\"id\" href=\"#arraycache_init\">arraycache_init</a> <a class=\"id\" href=\"#initarray_generic\">initarray_generic</a> =", 
"    { {0, <a class=\"id\" href=\"#BOOT_CPUCACHE_ENTRIES\">BOOT_CPUCACHE_ENTRIES</a>, 1, 0} };", 
"", 
"<span class=\"comment\">/* internal cache of cache description objs */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> <a class=\"id\" href=\"#cache_cache\">cache_cache</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#batchcount\">batchcount</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#BOOT_CPUCACHE_ENTRIES\">BOOT_CPUCACHE_ENTRIES</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shared\">shared</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#buffer_size\">buffer_size</a> = sizeof(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"kmem_cache\",", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BAD_ALIEN_MAGIC\">BAD_ALIEN_MAGIC</a> 0x01020304ul", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * chicken and egg problem: delay the per-cpu array allocation</span>", 
"<span class=\"comment\"> * until the general caches are up.</span>", 
"<span class=\"comment\"> */</span>", 
"static enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NONE\">NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PARTIAL_AC\">PARTIAL_AC</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PARTIAL_L3\">PARTIAL_L3</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EARLY\">EARLY</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FULL\">FULL</a>", 
"} <a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * used by boot code to determine if it can use slab based allocator</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> >= <a class=\"id\" href=\"#EARLY\">EARLY</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Slab sometimes uses the kmalloc slabs to store the slab headers</span>", 
"<span class=\"comment\"> * for other slabs \"off slab\".</span>", 
"<span class=\"comment\"> * The locking for this is tricky in that it nests within the locks</span>", 
"<span class=\"comment\"> * of all other slabs in a few places; to deal with this special</span>", 
"<span class=\"comment\"> * locking we put on-slab caches into a separate lock-class.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We set lock class for alien array caches which are up during init.</span>", 
"<span class=\"comment\"> * The lock annotation will be lost if all cpus of a node goes down and</span>", 
"<span class=\"comment\"> * then comes back up during hotplug</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#on_slab_l3_key\">on_slab_l3_key</a>;", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#on_slab_alc_key\">on_slab_alc_key</a>;", 
"", 
"static void <a class=\"id\" href=\"#init_node_lock_keys\">init_node_lock_keys</a>(int <a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_sizes\">cache_sizes</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> != <a class=\"id\" href=\"#FULL\">FULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>; <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#cs_size\">cs_size</a> != <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>; <a class=\"id\" href=\"#s\">s</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#alc\">alc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#q\">q</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a> || <a class=\"id\" href=\"#OFF_SLAB\">OFF_SLAB</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>, &amp;<a class=\"id\" href=\"#on_slab_l3_key\">on_slab_l3_key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alc\">alc</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * FIXME: This check for BAD_ALIEN_MAGIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should go away when common slab code is taught to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * work even without alien caches.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Currently, non NUMA code returns BAD_ALIEN_MAGIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for alloc_alien_cache,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#alc\">alc</a> || (unsigned long)<a class=\"id\" href=\"#alc\">alc</a> == <a class=\"id\" href=\"#BAD_ALIEN_MAGIC\">BAD_ALIEN_MAGIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node\">for_each_node</a>(<a class=\"id\" href=\"#r\">r</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alc\">alc</a>[<a class=\"id\" href=\"#r\">r</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#alc\">alc</a>[<a class=\"id\" href=\"#r\">r</a>]-><a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#on_slab_alc_key\">on_slab_alc_key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_lock_keys\">init_lock_keys</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node\">for_each_node</a>(<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_node_lock_keys\">init_node_lock_keys</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#init_node_lock_keys\">init_node_lock_keys</a>(int <a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_lock_keys\">init_lock_keys</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Guard access to the cache-chain.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cache_chain\">cache_chain</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a>, <a class=\"id\" href=\"#slab_reap_work\">slab_reap_work</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#__find_general_cachep\">__find_general_cachep</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfpflags\">gfpflags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_sizes\">cache_sizes</a> *<a class=\"id\" href=\"#csizep\">csizep</a> = <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>;", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* This happens if someone tries to call</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmem_cache_create(), or __kmalloc(), before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the generic caches are initialized.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZERO_SIZE_PTR\">ZERO_SIZE_PTR</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#csizep\">csizep</a>-><a class=\"id\" href=\"#cs_size\">cs_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csizep\">csizep</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Really subtle: The last entry with cs-&gt;cs_size==ULONG_MAX</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has cs_{dma,}cachep==NULL. Thus no special case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for large kmalloc calls required.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#gfpflags\">gfpflags</a> &amp; <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#csizep\">csizep</a>-><a class=\"id\" href=\"#cs_dmacachep\">cs_dmacachep</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csizep\">csizep</a>-><a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#kmem_find_general_cachep\">kmem_find_general_cachep</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfpflags\">gfpflags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__find_general_cachep\">__find_general_cachep</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfpflags\">gfpflags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#slab_mgmt_size\">slab_mgmt_size</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nr_objs\">nr_objs</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(struct <a class=\"id\" href=\"#slab\">slab</a>)+<a class=\"id\" href=\"#nr_objs\">nr_objs</a>*sizeof(<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>), <a class=\"id\" href=\"#align\">align</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the number of objects and left-over bytes for a given buffer size.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cache_estimate\">cache_estimate</a>(unsigned long <a class=\"id\" href=\"#gfporder\">gfporder</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buffer_size\">buffer_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>, int <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#left_over\">left_over</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int *<a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_objs\">nr_objs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#mgmt_size\">mgmt_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#slab_size\">slab_size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << <a class=\"id\" href=\"#gfporder\">gfporder</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The slab management structure can be either off the slab or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on it. For the latter case, the memory allocated for a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slab is used for:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - The struct slab</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - One kmem_bufctl_t for each object</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - Padding to respect alignment of @align</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - @buffer_size bytes for each object</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the slab management structure is off the slab, then the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * alignment will already be calculated into the size. Because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the slabs are all pages aligned, the objects will be at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * correct alignment when allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CFLGS_OFF_SLAB\">CFLGS_OFF_SLAB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mgmt_size\">mgmt_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_objs\">nr_objs</a> = <a class=\"id\" href=\"#slab_size\">slab_size</a> / <a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_objs\">nr_objs</a> &gt; <a class=\"id\" href=\"#SLAB_LIMIT\">SLAB_LIMIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_objs\">nr_objs</a> = <a class=\"id\" href=\"#SLAB_LIMIT\">SLAB_LIMIT</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ignore padding for the initial guess. The padding</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is at most @align-1 bytes, and @buffer_size is at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * least @align. In the worst case, this result will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be one greater than the number of objects that fit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * into the memory allocation when taking the padding</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * into account.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_objs\">nr_objs</a> = (<a class=\"id\" href=\"#slab_size\">slab_size</a> - sizeof(struct <a class=\"id\" href=\"#slab\">slab</a>)) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#buffer_size\">buffer_size</a> + sizeof(<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This calculated number will be either the right</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * amount, or one greater than what we want.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_mgmt_size\">slab_mgmt_size</a>(<a class=\"id\" href=\"#nr_objs\">nr_objs</a>, <a class=\"id\" href=\"#align\">align</a>) + <a class=\"id\" href=\"#nr_objs\">nr_objs</a>*<a class=\"id\" href=\"#buffer_size\">buffer_size</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       &gt; <a class=\"id\" href=\"#slab_size\">slab_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_objs\">nr_objs</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_objs\">nr_objs</a> &gt; <a class=\"id\" href=\"#SLAB_LIMIT\">SLAB_LIMIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_objs\">nr_objs</a> = <a class=\"id\" href=\"#SLAB_LIMIT\">SLAB_LIMIT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mgmt_size\">mgmt_size</a> = <a class=\"id\" href=\"#slab_mgmt_size\">slab_mgmt_size</a>(<a class=\"id\" href=\"#nr_objs\">nr_objs</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#nr_objs\">nr_objs</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#left_over\">left_over</a> = <a class=\"id\" href=\"#slab_size\">slab_size</a> - <a class=\"id\" href=\"#nr_objs\">nr_objs</a>*<a class=\"id\" href=\"#buffer_size\">buffer_size</a> - <a class=\"id\" href=\"#mgmt_size\">mgmt_size</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#slab_error\">slab_error</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#msg\">msg</a>) <a class=\"id\" href=\"#__slab_error\">__slab_error</a>(<a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#msg\">msg</a>)", 
"", 
"static void <a class=\"id\" href=\"#__slab_error\">__slab_error</a>(const char *<a class=\"id\" href=\"#function\">function</a>, struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"slab error in %s(): cache `%s': %s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#function\">function</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * By default on NUMA we use alien caches to stage the freeing of</span>", 
"<span class=\"comment\"> * objects allocated from other nodes. This causes massive memory</span>", 
"<span class=\"comment\"> * inefficiencies when using fake NUMA setup to split memory into a</span>", 
"<span class=\"comment\"> * large number of small nodes, so it can be disabled on the command</span>", 
"<span class=\"comment\"> * line</span>", 
"<span class=\"comment\">  */</span>", 
"", 
"static int <a class=\"id\" href=\"#use_alien_caches\">use_alien_caches</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#noaliencache_setup\">noaliencache_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#use_alien_caches\">use_alien_caches</a> = 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"noaliencache\", <a class=\"id\" href=\"#noaliencache_setup\">noaliencache_setup</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special reaping functions for NUMA systems called from cache_reap().</span>", 
"<span class=\"comment\"> * These take care of doing round robin flushing of alien caches (containing</span>", 
"<span class=\"comment\"> * objects freed on different nodes from which they were allocated) and the</span>", 
"<span class=\"comment\"> * flushing of remote pcps by calling drain_node_pages.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#slab_reap_node\">slab_reap_node</a>);", 
"", 
"static void <a class=\"id\" href=\"#init_reap_node\">init_reap_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#next_node\">next_node</a>(<a class=\"id\" href=\"#cpu_to_mem\">cpu_to_mem</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#slab_reap_node\">slab_reap_node</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#next_reap_node\">next_reap_node</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#slab_reap_node\">slab_reap_node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#next_node\">next_node</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#node\">node</a> >= <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#slab_reap_node\">slab_reap_node</a>) = <a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#init_reap_node\">init_reap_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#next_reap_node\">next_reap_node</a>(void) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initiate the reap timer running on the target CPU.  We run at around 1 to 2Hz</span>", 
"<span class=\"comment\"> * via the workqueue/eventd.</span>", 
"<span class=\"comment\"> * Add the CPU number into the expiration time to minimize the possibility of</span>", 
"<span class=\"comment\"> * the CPUs getting into lockstep and contending for the global cache chain</span>", 
"<span class=\"comment\"> * lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#start_cpu_timer\">start_cpu_timer</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#reap_work\">reap_work</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#slab_reap_work\">slab_reap_work</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When this gets called from do_initcalls via cpucache_init(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * init_workqueues() has already run, so keventd will be setup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at that time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keventd_up\">keventd_up</a>() && <a class=\"id\" href=\"#reap_work\">reap_work</a>-><a class=\"id\" href=\"#work\">work</a>.<a class=\"id\" href=\"#func\">func</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_reap_node\">init_reap_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_DELAYED_WORK_DEFERRABLE\">INIT_DELAYED_WORK_DEFERRABLE</a>(<a class=\"id\" href=\"#reap_work\">reap_work</a>, <a class=\"id\" href=\"#cache_reap\">cache_reap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work_on\">schedule_delayed_work_on</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#reap_work\">reap_work</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__round_jiffies_relative\">__round_jiffies_relative</a>(<a class=\"id\" href=\"#HZ\">HZ</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#alloc_arraycache\">alloc_arraycache</a>(int <a class=\"id\" href=\"#node\">node</a>, int <a class=\"id\" href=\"#entries\">entries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#batchcount\">batchcount</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#memsize\">memsize</a> = sizeof(void *) * <a class=\"id\" href=\"#entries\">entries</a> + sizeof(struct <a class=\"id\" href=\"#array_cache\">array_cache</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#nc\">nc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nc\">nc</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(<a class=\"id\" href=\"#memsize\">memsize</a>, <a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The array_cache structures contain pointers to free object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * However, when such objects are allocated or transfered to another</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cache the pointers are not cleared and they could be counted as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * valid references during a kmemleak scan. Therefore, kmemleak must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not scan such objects.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_no_scan\">kmemleak_no_scan</a>(<a class=\"id\" href=\"#nc\">nc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nc\">nc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nc\">nc</a>-><a class=\"id\" href=\"#avail\">avail</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nc\">nc</a>-><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nc\">nc</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a> = <a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nc\">nc</a>-><a class=\"id\" href=\"#touched\">touched</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#nc\">nc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nc\">nc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Transfer objects in one arraycache to another.</span>", 
"<span class=\"comment\"> * Locking must be handled by the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the number of entries transferred.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#transfer_objects\">transfer_objects</a>(struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#from\">from</a>, unsigned int <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Figure out how many entries to transfer */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#max\">max</a>), <a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#limit\">limit</a> - <a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#avail\">avail</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr\">nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#entry\">entry</a> + <a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#entry\">entry</a> + <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#avail\">avail</a> -<a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(void *) *<a class=\"id\" href=\"#nr\">nr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#avail\">avail</a> -= <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#avail\">avail</a> += <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#drain_alien_cache\">drain_alien_cache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#alien\">alien</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#reap_alien\">reap_alien</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#l3\">l3</a>) do { } while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#alloc_alien_cache\">alloc_alien_cache</a>(int <a class=\"id\" href=\"#node\">node</a>, int <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **)<a class=\"id\" href=\"#BAD_ALIEN_MAGIC\">BAD_ALIEN_MAGIC</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_alien_cache\">free_alien_cache</a>(struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cache_free_alien\">cache_free_alien</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#alternate_node_alloc\">alternate_node_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#____cache_alloc_node\">____cache_alloc_node</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"static void *<a class=\"id\" href=\"#____cache_alloc_node\">____cache_alloc_node</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>, int);", 
"static void *<a class=\"id\" href=\"#alternate_node_alloc\">alternate_node_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"", 
"static struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#alloc_alien_cache\">alloc_alien_cache</a>(int <a class=\"id\" href=\"#node\">node</a>, int <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#memsize\">memsize</a> = sizeof(void *) * <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = 12;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac_ptr\">ac_ptr</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#memsize\">memsize</a>, <a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node\">for_each_node</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#node\">node</a> || !<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#alloc_arraycache\">alloc_arraycache</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#limit\">limit</a>, 0xbaadf00d, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>--; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_alien_cache\">free_alien_cache</a>(struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node\">for_each_node</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ac_ptr\">ac_ptr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__drain_alien_cache\">__drain_alien_cache</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#rl3\">rl3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#rl3\">rl3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Stuff objects into the remote nodes shared array first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * That way we could avoid the overhead of putting the objects</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * into the free lists and getting them back later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rl3\">rl3</a>-><a class=\"id\" href=\"#shared\">shared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transfer_objects\">transfer_objects</a>(<a class=\"id\" href=\"#rl3\">rl3</a>-><a class=\"id\" href=\"#shared\">shared</a>, <a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#limit\">limit</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_block\">free_block</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#rl3\">rl3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from cache_reap() to regularly drain alien caches round robin.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#reap_alien\">reap_alien</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#slab_reap_node\">slab_reap_node</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a> && <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> && <a class=\"id\" href=\"#spin_trylock_irq\">spin_trylock_irq</a>(&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#lock\">lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__drain_alien_cache\">__drain_alien_cache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#drain_alien_cache\">drain_alien_cache</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#alien\">alien</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#alien\">alien</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__drain_alien_cache\">__drain_alien_cache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cache_free_alien\">cache_free_alien</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#virt_to_slab\">virt_to_slab</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nodeid\">nodeid</a> = <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#nodeid\">nodeid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we are not freeing a object from another node to the array</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cache on this cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#nodeid\">nodeid</a> == <a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_NODEFREES\">STATS_INC_NODEFREES</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a> && <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#alien\">alien</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#alien\">alien</a>-><a class=\"id\" href=\"#avail\">avail</a> == <a class=\"id\" href=\"#alien\">alien</a>-><a class=\"id\" href=\"#limit\">limit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ACOVERFLOW\">STATS_INC_ACOVERFLOW</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__drain_alien_cache\">__drain_alien_cache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#alien\">alien</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alien\">alien</a>-><a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#alien\">alien</a>-><a class=\"id\" href=\"#avail\">avail</a>++] = <a class=\"id\" href=\"#objp\">objp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#alien\">alien</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>])-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_block\">free_block</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, &amp;<a class=\"id\" href=\"#objp\">objp</a>, 1, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>])-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocates and initializes nodelists for a node on each slab cache, used for</span>", 
"<span class=\"comment\"> * either memory or cpu hotplug.  If memory is being hot-added, the kmem_list3</span>", 
"<span class=\"comment\"> * will be allocated off-node since memory is not yet online for the new node.</span>", 
"<span class=\"comment\"> * When hotplugging memory or a cpu, existing nodelists are not replaced if</span>", 
"<span class=\"comment\"> * already in use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must hold cache_chain_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#init_cache_nodelists_node\">init_cache_nodelists_node</a>(int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#memsize\">memsize</a> = sizeof(struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Set up the size64 kmemlist for cpu before we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * begin anything. Make sure some other cpu on this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * node has not already allocated this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(<a class=\"id\" href=\"#memsize\">memsize</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_list3_init\">kmem_list3_init</a>(<a class=\"id\" href=\"#l3\">l3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#next_reap\">next_reap</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    ((unsigned long)<a class=\"id\" href=\"#cachep\">cachep</a>) % <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The l3s don't come and go as CPUs come and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * go.  cache_chain_mutex is sufficient</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * protection here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>] = <a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]-><a class=\"id\" href=\"#free_limit\">free_limit</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 + <a class=\"id\" href=\"#nr_cpus_node\">nr_cpus_node</a>(<a class=\"id\" href=\"#node\">node</a>)) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a> + <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpuup_canceled\">cpuup_canceled</a>(long <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#cpu_to_mem\">cpu_to_mem</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#nc\">nc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#shared\">shared</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#alien\">alien</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cpu is dead; no one can alloc from it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nc\">nc</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_array_cache\">free_array_cache</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Free limit for this kmem_list3 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_limit\">free_limit</a> -= <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nc\">nc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_block\">free_block</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#nc\">nc</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#nc\">nc</a>-><a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#mask\">mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_array_cache\">free_array_cache</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shared\">shared</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_block\">free_block</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#shared\">shared</a>-><a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#shared\">shared</a>-><a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#shared\">shared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alien\">alien</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_alien_cache\">drain_alien_cache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#alien\">alien</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_alien_cache\">free_alien_cache</a>(<a class=\"id\" href=\"#alien\">alien</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#free_array_cache\">free_array_cache</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#nc\">nc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In the previous loop, all the objects were freed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the respective cache's slabs,  now we can go ahead and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * shrink each nodelist to its limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_freelist\">drain_freelist</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#l3\">l3</a>, <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpuup_prepare\">cpuup_prepare</a>(long <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#cpu_to_mem\">cpu_to_mem</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to do this right in the beginning since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * alloc_arraycache's are going to use this list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmalloc_node allows us to add the slab to the right</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmem_list3 and not this cpu's kmem_list3</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#init_cache_nodelists_node\">init_cache_nodelists_node</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we can go ahead with allocating the shared arrays and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * array caches</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#nc\">nc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nc\">nc</a> = <a class=\"id\" href=\"#alloc_arraycache\">alloc_arraycache</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#limit\">limit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nc\">nc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#shared\">shared</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#alloc_arraycache\">alloc_arraycache</a>(<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#shared\">shared</a> * <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0xbaadf00d, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#shared\">shared</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#nc\">nc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#use_alien_caches\">use_alien_caches</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#alloc_alien_cache\">alloc_alien_cache</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#alien\">alien</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#shared\">shared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#nc\">nc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#nc\">nc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#l3\">l3</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We are serialised from CPU_DEAD or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * CPU_UP_CANCELLED by the cpucontrol lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#shared\">shared</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#alien\">alien</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#shared\">shared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_alien_cache\">free_alien_cache</a>(<a class=\"id\" href=\"#alien\">alien</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_node_lock_keys\">init_node_lock_keys</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#bad\">bad</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuup_canceled\">cpuup_canceled</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpuup_callback\">cpuup_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE_FROZEN\">CPU_UP_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cpuup_prepare\">cpuup_prepare</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE_FROZEN\">CPU_ONLINE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_cpu_timer\">start_cpu_timer</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"  <span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a>:", 
"  <span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE_FROZEN\">CPU_DOWN_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Shutdown cache reaper. Note that the cache_chain_mutex is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * held so that if cache_reap() is invoked it cannot do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * anything expensive but will only modify reap_work</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and reschedule the timer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cancel_rearming_delayed_work\">cancel_rearming_delayed_work</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#slab_reap_work\">slab_reap_work</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now the cache_reaper is guaranteed to be not running. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#slab_reap_work\">slab_reap_work</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#work\">work</a>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"  <span class=\"ts\"/><span class=\"ts\"/>break;", 
"  <span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_FAILED\">CPU_DOWN_FAILED</a>:", 
"  <span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_FAILED_FROZEN\">CPU_DOWN_FAILED_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_cpu_timer\">start_cpu_timer</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"  <span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Even if all the cpus of a node are down, we don't free the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kmem_list3 of any cache. This to avoid a race between</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cpu_down, and a kmalloc allocation from another cpu for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * memory from the node of the cpu going down.  The list3</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * structure is usually allocated from kmem_cache_create() and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * gets destroyed at kmem_cache_destroy().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED_FROZEN\">CPU_UP_CANCELED_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuup_canceled\">cpuup_canceled</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_from_errno\">notifier_from_errno</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#cpucache_notifier\">cpucache_notifier</a> = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpuup_callback\">cpuup_callback</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0", 
"};", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Drains freelist for a node on each slab cache, used for memory hot-remove.</span>", 
"<span class=\"comment\"> * Returns -EBUSY if all objects cannot be drained so that the node is not</span>", 
"<span class=\"comment\"> * removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must hold cache_chain_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#drain_cache_nodelists_node\">drain_cache_nodelists_node</a>(int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_freelist\">drain_freelist</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#l3\">l3</a>, <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_full\">slabs_full</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#slab_memory_callback\">slab_memory_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_notify\">memory_notify</a> *<a class=\"id\" href=\"#mnb\">mnb</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#mnb\">mnb</a>-><a class=\"id\" href=\"#status_change_nid\">status_change_nid</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_GOING_ONLINE\">MEM_GOING_ONLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#init_cache_nodelists_node\">init_cache_nodelists_node</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_GOING_OFFLINE\">MEM_GOING_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#drain_cache_nodelists_node\">drain_cache_nodelists_node</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_OFFLINE\">MEM_OFFLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CANCEL_ONLINE\">MEM_CANCEL_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CANCEL_OFFLINE\">MEM_CANCEL_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#notifier_from_errno\">notifier_from_errno</a>(<a class=\"id\" href=\"#ret\">ret</a>) : <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA &amp;&amp; CONFIG_MEMORY_HOTPLUG */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * swap the static kmem_list3 with kmalloced memory</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_list\">init_list</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a>), <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#list\">list</a>, sizeof(struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not assume that spinlocks can be initialized via memcpy:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAKE_ALL_LISTS\">MAKE_ALL_LISTS</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>] = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For setting up all the kmem_list3s for cache whose buffer_size is same as</span>", 
"<span class=\"comment\"> * size of kmem_list3.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_up_list3s\">set_up_list3s</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>] = &amp;<a class=\"id\" href=\"#initkmem_list3\">initkmem_list3</a>[<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]-><a class=\"id\" href=\"#next_reap\">next_reap</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((unsigned long)<a class=\"id\" href=\"#cachep\">cachep</a>) % <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialisation.  Called after the page allocator have been initialised and</span>", 
"<span class=\"comment\"> * before smp_init().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kmem_cache_init\">kmem_cache_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#left_over\">left_over</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_sizes\">cache_sizes</a> *<a class=\"id\" href=\"#sizes\">sizes</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_names\">cache_names</a> *<a class=\"id\" href=\"#names\">names</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_possible_nodes\">num_possible_nodes</a>() == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#use_alien_caches\">use_alien_caches</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NUM_INIT_LISTS\">NUM_INIT_LISTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_list3_init\">kmem_list3_init</a>(&amp;<a class=\"id\" href=\"#initkmem_list3\">initkmem_list3</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_up_list3s\">set_up_list3s</a>(&amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>, <a class=\"id\" href=\"#CACHE_CACHE\">CACHE_CACHE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fragmentation resistance on low memory - only use bigger</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page orders on machines with more than 32MB of memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> &gt; (32 << 20) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_break_gfp_order\">slab_break_gfp_order</a> = <a class=\"id\" href=\"#BREAK_GFP_ORDER_HI\">BREAK_GFP_ORDER_HI</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Bootstrap is tricky, because several objects are allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from caches that do not exist yet:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) initialize the cache_cache cache: it contains the struct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    kmem_cache structures of all caches, except cache_cache itself:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    cache_cache is statically allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    Initially an __init data area is used for the head array and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    kmem_list3 structures, it's replaced with a kmalloc allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    array at the end of the bootstrap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Create the first kmalloc cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    The struct kmem_cache for the new cache is allocated normally.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    An __init data area is used for the head array.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3) Create the remaining kmalloc caches, with minimally sized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    head arrays.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4) Replace the __init data head arrays for cache_cache and the first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    kmalloc cache with kmalloc allocated arrays.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 5) Replace the __init data for kmem_list3 for cache_cache and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    the other cache's with kmalloc allocated memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 6) Resize the head arrays of the kmalloc caches to their final sizes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 1) create the cache_cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#colour_off\">colour_off</a> = <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()] = &amp;<a class=\"id\" href=\"#initarray_cache\">initarray_cache</a>.<a class=\"id\" href=\"#cache\">cache</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>] = &amp;<a class=\"id\" href=\"#initkmem_list3\">initkmem_list3</a>[<a class=\"id\" href=\"#CACHE_CACHE\">CACHE_CACHE</a> + <a class=\"id\" href=\"#node\">node</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct kmem_cache size depends on nr_node_ids, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can be less than MAX_NUMNODES.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#buffer_size\">buffer_size</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a>, <a class=\"id\" href=\"#nodelists\">nodelists</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a> * sizeof(struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *);", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#obj_size\">obj_size</a> = <a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#buffer_size\">buffer_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#buffer_size\">buffer_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#reciprocal_buffer_size\">reciprocal_buffer_size</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reciprocal_value\">reciprocal_value</a>(<a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#buffer_size\">buffer_size</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#order\">order</a> = 0; <a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>; <a class=\"id\" href=\"#order\">order</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache_estimate\">cache_estimate</a>(<a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#buffer_size\">buffer_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>(), 0, &amp;<a class=\"id\" href=\"#left_over\">left_over</a>, &amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#num\">num</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#gfporder\">gfporder</a> = <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#colour\">colour</a> = <a class=\"id\" href=\"#left_over\">left_over</a> / <a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#colour_off\">colour_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#slab_size\">slab_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#num\">num</a> * sizeof(<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      sizeof(struct <a class=\"id\" href=\"#slab\">slab</a>), <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>());", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 2+3) create the kmalloc caches */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a> = <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#names\">names</a> = <a class=\"id\" href=\"#cache_names\">cache_names</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize the caches that provide memory for the array cache and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmem_list3 structures first.  Without this, further allocations will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bug.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#names\">names</a>[<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a>].<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a>].<a class=\"id\" href=\"#cs_size\">cs_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARCH_KMALLOC_MINALIGN\">ARCH_KMALLOC_MINALIGN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARCH_KMALLOC_FLAGS\">ARCH_KMALLOC_FLAGS</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a> != <a class=\"id\" href=\"#INDEX_L3\">INDEX_L3</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#INDEX_L3\">INDEX_L3</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#names\">names</a>[<a class=\"id\" href=\"#INDEX_L3\">INDEX_L3</a>].<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a>[<a class=\"id\" href=\"#INDEX_L3\">INDEX_L3</a>].<a class=\"id\" href=\"#cs_size\">cs_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARCH_KMALLOC_MINALIGN\">ARCH_KMALLOC_MINALIGN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARCH_KMALLOC_FLAGS\">ARCH_KMALLOC_FLAGS</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab_early_init\">slab_early_init</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#sizes\">sizes</a>-><a class=\"id\" href=\"#cs_size\">cs_size</a> != <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For performance, all the general caches are L1 aligned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This should be particularly beneficial on SMP boxes, as it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * eliminates \"false sharing\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note for systems short on memory removing the alignment will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allow tighter packing of the smaller caches.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sizes\">sizes</a>-><a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a>-><a class=\"id\" href=\"#cs_cachep\">cs_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#names\">names</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a>-><a class=\"id\" href=\"#cs_size\">cs_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARCH_KMALLOC_MINALIGN\">ARCH_KMALLOC_MINALIGN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARCH_KMALLOC_FLAGS\">ARCH_KMALLOC_FLAGS</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a>-><a class=\"id\" href=\"#cs_dmacachep\">cs_dmacachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#names\">names</a>-><a class=\"id\" href=\"#name_dma\">name_dma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a>-><a class=\"id\" href=\"#cs_size\">cs_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARCH_KMALLOC_MINALIGN\">ARCH_KMALLOC_MINALIGN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARCH_KMALLOC_FLAGS\">ARCH_KMALLOC_FLAGS</a>|<a class=\"id\" href=\"#SLAB_CACHE_DMA\">SLAB_CACHE_DMA</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sizes\">sizes</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#names\">names</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* 4) Replace the bootstrap head arrays */</span>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#arraycache_init\">arraycache_init</a>), <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(&amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>) != &amp;<a class=\"id\" href=\"#initarray_cache\">initarray_cache</a>.<a class=\"id\" href=\"#cache\">cache</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(&amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       sizeof(struct <a class=\"id\" href=\"#arraycache_init\">arraycache_init</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do not assume that spinlocks can be initialized via memcpy:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache_cache\">cache_cache</a>.<a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()] = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#arraycache_init\">arraycache_init</a>), <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>       != &amp;<a class=\"id\" href=\"#initarray_generic\">initarray_generic</a>.<a class=\"id\" href=\"#cache\">cache</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       sizeof(struct <a class=\"id\" href=\"#arraycache_init\">arraycache_init</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do not assume that spinlocks can be initialized via memcpy:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>-><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()] =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* 5) Replace the bootstrap kmem_list3's */</span>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_list\">init_list</a>(&amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>, &amp;<a class=\"id\" href=\"#initkmem_list3\">initkmem_list3</a>[<a class=\"id\" href=\"#CACHE_CACHE\">CACHE_CACHE</a> + <a class=\"id\" href=\"#nid\">nid</a>], <a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_list\">init_list</a>(<a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#initkmem_list3\">initkmem_list3</a>[<a class=\"id\" href=\"#SIZE_AC\">SIZE_AC</a> + <a class=\"id\" href=\"#nid\">nid</a>], <a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a> != <a class=\"id\" href=\"#INDEX_L3\">INDEX_L3</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_list\">init_list</a>(<a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#INDEX_L3\">INDEX_L3</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#initkmem_list3\">initkmem_list3</a>[<a class=\"id\" href=\"#SIZE_L3\">SIZE_L3</a> + <a class=\"id\" href=\"#nid\">nid</a>], <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> = <a class=\"id\" href=\"#EARLY\">EARLY</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kmem_cache_init_late\">kmem_cache_init_late</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 6) resize the head arrays to their final sizes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#enable_cpucache\">enable_cpucache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Done! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> = <a class=\"id\" href=\"#FULL\">FULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Annotate slab for lockdep -- annotate the malloc caches */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_lock_keys\">init_lock_keys</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Register a cpu startup notifier callback that initializes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu_cache_get for all new cpus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#cpucache_notifier\">cpucache_notifier</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Register a memory hotplug callback that initializes and frees</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nodelists.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotplug_memory_notifier\">hotplug_memory_notifier</a>(<a class=\"id\" href=\"#slab_memory_callback\">slab_memory_callback</a>, <a class=\"id\" href=\"#SLAB_CALLBACK_PRI\">SLAB_CALLBACK_PRI</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The reap timers are started later, with a module init call: That part</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the kernel is not yet operational.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cpucache_init\">cpucache_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Register the timers that return unneeded pages to the page allocator</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_cpu_timer\">start_cpu_timer</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#cpucache_init\">cpucache_init</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interface to system's page allocator. No need to hold the cache-lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we requested dmaable memory, we will get it. Even if we</span>", 
"<span class=\"comment\"> * did not request dmaable memory, we might get it, but that</span>", 
"<span class=\"comment\"> * would be relatively rare and ignorable.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#kmem_getpages\">kmem_getpages</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Nommu uses slab's for process anonymous memory allocations, and thus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requires __GFP_COMP to properly refcount higher order allocations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#__GFP_COMP\">__GFP_COMP</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfpflags\">gfpflags</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#__GFP_RECLAIMABLE\">__GFP_RECLAIMABLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#__GFP_NOTRACK\">__GFP_NOTRACK</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfporder\">gfporder</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (1 << <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfporder\">gfporder</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_zone_page_state\">add_zone_page_state</a>(<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_zone_page_state\">add_zone_page_state</a>(<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NR_SLAB_UNRECLAIMABLE\">NR_SLAB_UNRECLAIMABLE</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__SetPageSlab\">__SetPageSlab</a>(<a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kmemcheck_enabled\">kmemcheck_enabled</a> && !(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_alloc_shadow\">kmemcheck_alloc_shadow</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfporder\">gfporder</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#ctor\">ctor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_mark_uninitialized_pages\">kmemcheck_mark_uninitialized_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_mark_unallocated_pages\">kmemcheck_mark_unallocated_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interface to system's page release.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kmem_freepages\">kmem_freepages</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a> = (1 << <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfporder\">gfporder</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#nr_freed\">nr_freed</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_free_shadow\">kmemcheck_free_shadow</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfporder\">gfporder</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sub_zone_page_state\">sub_zone_page_state</a>(<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>, <a class=\"id\" href=\"#nr_freed\">nr_freed</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sub_zone_page_state\">sub_zone_page_state</a>(<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NR_SLAB_UNRECLAIMABLE\">NR_SLAB_UNRECLAIMABLE</a>, <a class=\"id\" href=\"#nr_freed\">nr_freed</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageSlab\">PageSlab</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ClearPageSlab\">__ClearPageSlab</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>-><a class=\"id\" href=\"#reclaimed_slab\">reclaimed_slab</a> += <a class=\"id\" href=\"#nr_freed\">nr_freed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfporder\">gfporder</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kmem_rcu_free\">kmem_rcu_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slab_rcu\">slab_rcu</a> *<a class=\"id\" href=\"#slab_rcu\">slab_rcu</a> = (struct <a class=\"id\" href=\"#slab_rcu\">slab_rcu</a> *)<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#slab_rcu\">slab_rcu</a>-><a class=\"id\" href=\"#cachep\">cachep</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_freepages\">kmem_freepages</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slab_rcu\">slab_rcu</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#OFF_SLAB\">OFF_SLAB</a>(<a class=\"id\" href=\"#cachep\">cachep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#slabp_cache\">slabp_cache</a>, <a class=\"id\" href=\"#slab_rcu\">slab_rcu</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"static void <a class=\"id\" href=\"#store_stackinfo\">store_stackinfo</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, unsigned long *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long *)&amp;((char *)<a class=\"id\" href=\"#addr\">addr</a>)[<a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; 5 * sizeof(unsigned long))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>++ = 0x12345678;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>++ = <a class=\"id\" href=\"#caller\">caller</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>++ = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= 3 * sizeof(unsigned long);", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#sptr\">sptr</a> = &amp;<a class=\"id\" href=\"#caller\">caller</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#svalue\">svalue</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#kstack_end\">kstack_end</a>(<a class=\"id\" href=\"#sptr\">sptr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#svalue\">svalue</a> = *<a class=\"id\" href=\"#sptr\">sptr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kernel_text_address\">kernel_text_address</a>(<a class=\"id\" href=\"#svalue\">svalue</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>++ = <a class=\"id\" href=\"#svalue\">svalue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= sizeof(unsigned long);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <= sizeof(unsigned long))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>++ = 0x87654321;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#poison_obj\">poison_obj</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#addr\">addr</a>, unsigned char <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = &amp;((char *)<a class=\"id\" href=\"#addr\">addr</a>)[<a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>*(unsigned char *)(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> - 1) = <a class=\"id\" href=\"#POISON_END\">POISON_END</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dump_line\">dump_line</a>(char *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bad_count\">bad_count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%03x:\", <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#limit\">limit</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_count\">bad_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" %02x\", (unsigned char)<a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bad_count\">bad_count</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> ^= <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#error\">error</a> &amp; (<a class=\"id\" href=\"#error\">error</a> - 1))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Single bit error detected. Probably \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"bad RAM.\\n\");", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86\">CONFIG_X86</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Run memtest86+ or a similar memory \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"test tool.\\n\");", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Run a memory test tool.\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"", 
"static void <a class=\"id\" href=\"#print_objinfo\">print_objinfo</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>, int <a class=\"id\" href=\"#lines\">lines</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#realobj\">realobj</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Redzone: 0x%llx/0x%llx.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Last user: [<%p>]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_userword\">dbg_userword</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_symbol\">print_symbol</a>(\"(%s)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)*<a class=\"id\" href=\"#dbg_userword\">dbg_userword</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#realobj\">realobj</a> = (char *)<a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#size\">size</a> && <a class=\"id\" href=\"#lines\">lines</a>; <a class=\"id\" href=\"#i\">i</a> += 16, <a class=\"id\" href=\"#lines\">lines</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = 16;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#limit\">limit</a> &gt; <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_line\">dump_line</a>(<a class=\"id\" href=\"#realobj\">realobj</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_poison_obj\">check_poison_obj</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#realobj\">realobj</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lines\">lines</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#realobj\">realobj</a> = (char *)<a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#exp\">exp</a> = <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#size\">size</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exp\">exp</a> = <a class=\"id\" href=\"#POISON_END\">POISON_END</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#realobj\">realobj</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#exp\">exp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mismatch ! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Print header */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lines\">lines</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Slab corruption: %s start=%p, len=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#realobj\">realobj</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_objinfo\">print_objinfo</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Hexdump the affected line */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#i\">i</a> / 16) * 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#limit\">limit</a> &gt; <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_line\">dump_line</a>(<a class=\"id\" href=\"#realobj\">realobj</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lines\">lines</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Limit to 5 lines */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lines\">lines</a> &gt; 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lines\">lines</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Print some data about the neighboring objects, if they</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * exist:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#virt_to_slab\">virt_to_slab</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#objnr\">objnr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objnr\">objnr</a> = <a class=\"id\" href=\"#obj_to_index\">obj_to_index</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#objnr\">objnr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#index_to_obj\">index_to_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#objnr\">objnr</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#realobj\">realobj</a> = (char *)<a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Prev obj: start=%p, len=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#realobj\">realobj</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_objinfo\">print_objinfo</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#objnr\">objnr</a> + 1 &lt; <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#index_to_obj\">index_to_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#objnr\">objnr</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#realobj\">realobj</a> = (char *)<a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Next obj: start=%p, len=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#realobj\">realobj</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_objinfo\">print_objinfo</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"static void <a class=\"id\" href=\"#slab_destroy_debugcheck\">slab_destroy_debugcheck</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#index_to_obj\">index_to_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> % <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#OFF_SLAB\">OFF_SLAB</a>(<a class=\"id\" href=\"#cachep\">cachep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#objp\">objp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_poison_obj\">check_poison_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_poison_obj\">check_poison_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) != <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_error\">slab_error</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, \"start of a freed object \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"was overwritten\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) != <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_error\">slab_error</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, \"end of a freed object \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"was overwritten\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#slab_destroy_debugcheck\">slab_destroy_debugcheck</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * slab_destroy - destroy and release all objects in a slab</span>", 
"<span class=\"comment\"> * @cachep: cache pointer being destroyed</span>", 
"<span class=\"comment\"> * @slabp: slab pointer being destroyed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Destroy all the objs in a slab, and release the mem back to the system.</span>", 
"<span class=\"comment\"> * Before calling the slab must have been unlinked from the cache.  The</span>", 
"<span class=\"comment\"> * cache-lock is not held/needed.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#slab_destroy\">slab_destroy</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#s_mem\">s_mem</a> - <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#colouroff\">colouroff</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab_destroy_debugcheck\">slab_destroy_debugcheck</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#slab_rcu\">slab_rcu</a> *<a class=\"id\" href=\"#slab_rcu\">slab_rcu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_rcu\">slab_rcu</a> = (struct <a class=\"id\" href=\"#slab_rcu\">slab_rcu</a> *)<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_rcu\">slab_rcu</a>-><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_rcu\">slab_rcu</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#slab_rcu\">slab_rcu</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#kmem_rcu_free\">kmem_rcu_free</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_freepages\">kmem_freepages</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#OFF_SLAB\">OFF_SLAB</a>(<a class=\"id\" href=\"#cachep\">cachep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#slabp_cache\">slabp_cache</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kmem_cache_destroy\">__kmem_cache_destroy</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NUMA: free the list3 structures */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_alien_cache\">free_alien_cache</a>(<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#l3\">l3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(&amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>, <a class=\"id\" href=\"#cachep\">cachep</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * calculate_slab_order - calculate size (page order) of slabs</span>", 
"<span class=\"comment\"> * @cachep: pointer to the cache that is being created</span>", 
"<span class=\"comment\"> * @size: size of objects to be created in this cache.</span>", 
"<span class=\"comment\"> * @align: required alignment for the objects.</span>", 
"<span class=\"comment\"> * @flags: slab allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also calculates the number of objects per slab.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This could be made much more intelligent.  For now, try to avoid using</span>", 
"<span class=\"comment\"> * high order pages for slabs.  When the gfp() functions are more friendly</span>", 
"<span class=\"comment\"> * towards high-order requests, this should be changed.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#calculate_slab_order\">calculate_slab_order</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offslab_limit\">offslab_limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#left_over\">left_over</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#gfporder\">gfporder</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#gfporder\">gfporder</a> = 0; <a class=\"id\" href=\"#gfporder\">gfporder</a> <= <a class=\"id\" href=\"#KMALLOC_MAX_ORDER\">KMALLOC_MAX_ORDER</a>; <a class=\"id\" href=\"#gfporder\">gfporder</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#remainder\">remainder</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache_estimate\">cache_estimate</a>(<a class=\"id\" href=\"#gfporder\">gfporder</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#flags\">flags</a>, &amp;<a class=\"id\" href=\"#remainder\">remainder</a>, &amp;<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#num\">num</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CFLGS_OFF_SLAB\">CFLGS_OFF_SLAB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Max number of objs-per-slab for caches which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * use off-slab slabs. Needed to avoid a possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * looping condition in cache_grow().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offslab_limit\">offslab_limit</a> = <a class=\"id\" href=\"#size\">size</a> - sizeof(struct <a class=\"id\" href=\"#slab\">slab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offslab_limit\">offslab_limit</a> /= sizeof(<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>);", 
"", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> &gt; <a class=\"id\" href=\"#offslab_limit\">offslab_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Found something acceptable - save it away */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfporder\">gfporder</a> = <a class=\"id\" href=\"#gfporder\">gfporder</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left_over\">left_over</a> = <a class=\"id\" href=\"#remainder\">remainder</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A VFS-reclaimable slab tends to have most allocations</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as GFP_NOFS and we really don't want to have to be allocating</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * higher-order pages when we are unable to shrink dcache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Large number of objects is good, but very large slabs are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * currently bad for the gfp()s.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gfporder\">gfporder</a> >= <a class=\"id\" href=\"#slab_break_gfp_order\">slab_break_gfp_order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Acceptable internal fragmentation?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left_over\">left_over</a> * 8 <= (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << <a class=\"id\" href=\"#gfporder\">gfporder</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#left_over\">left_over</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init_refok\">__init_refok</a> <a class=\"id\" href=\"#setup_cpu_cache\">setup_cpu_cache</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> == <a class=\"id\" href=\"#FULL\">FULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#enable_cpucache\">enable_cpucache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> == <a class=\"id\" href=\"#NONE\">NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: the first kmem_cache_create must create the cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that's used by kmalloc(24), otherwise the creation of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * further caches will BUG().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()] = &amp;<a class=\"id\" href=\"#initarray_generic\">initarray_generic</a>.<a class=\"id\" href=\"#cache\">cache</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the cache that's used by kmalloc(sizeof(kmem_list3)) is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the first cache, then we need to set up all its list3s,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * otherwise the creation of further caches will BUG().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_up_list3s\">set_up_list3s</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#SIZE_AC\">SIZE_AC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#INDEX_AC\">INDEX_AC</a> == <a class=\"id\" href=\"#INDEX_L3\">INDEX_L3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> = <a class=\"id\" href=\"#PARTIAL_L3\">PARTIAL_L3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> = <a class=\"id\" href=\"#PARTIAL_AC\">PARTIAL_AC</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#arraycache_init\">arraycache_init</a>), <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> == <a class=\"id\" href=\"#PARTIAL_AC\">PARTIAL_AC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_up_list3s\">set_up_list3s</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#SIZE_L3\">SIZE_L3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#g_cpucache_up\">g_cpucache_up</a> = <a class=\"id\" href=\"#PARTIAL_L3\">PARTIAL_L3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_list3_init\">kmem_list3_init</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>()]-><a class=\"id\" href=\"#next_reap\">next_reap</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#cachep\">cachep</a>) % <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)-><a class=\"id\" href=\"#avail\">avail</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)-><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#BOOT_CPUCACHE_ENTRIES\">BOOT_CPUCACHE_ENTRIES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)-><a class=\"id\" href=\"#batchcount\">batchcount</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)-><a class=\"id\" href=\"#touched\">touched</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#BOOT_CPUCACHE_ENTRIES\">BOOT_CPUCACHE_ENTRIES</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmem_cache_create - Create a cache.</span>", 
"<span class=\"comment\"> * @name: A string which is used in /proc/slabinfo to identify this cache.</span>", 
"<span class=\"comment\"> * @size: The size of objects to be created in this cache.</span>", 
"<span class=\"comment\"> * @align: The required alignment for the objects.</span>", 
"<span class=\"comment\"> * @flags: SLAB flags</span>", 
"<span class=\"comment\"> * @ctor: A constructor for the objects.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a ptr to the cache on success, NULL on failure.</span>", 
"<span class=\"comment\"> * Cannot be called within a int, but can be interrupted.</span>", 
"<span class=\"comment\"> * The @ctor is run when new pages are allocated by the cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name must be valid until the cache is destroyed. This implies that</span>", 
"<span class=\"comment\"> * the module calling this has to destroy the cache before getting unloaded.</span>", 
"<span class=\"comment\"> * Note that kmem_cache_name() is not guaranteed to return the same pointer,</span>", 
"<span class=\"comment\"> * therefore applications must manage it themselves.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The flags are</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %SLAB_POISON - Poison the slab with a known test pattern (a5a5a5a5)</span>", 
"<span class=\"comment\"> * to catch references to uninitialised memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %SLAB_RED_ZONE - Insert `Red' zones around the allocated memory to check</span>", 
"<span class=\"comment\"> * for buffer overruns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %SLAB_HWCACHE_ALIGN - Align the objects in this cache to a hardware</span>", 
"<span class=\"comment\"> * cacheline.  This can be beneficial if you're counting cycles as closely</span>", 
"<span class=\"comment\"> * as davem.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *", 
"<a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a> (const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, void (*<a class=\"id\" href=\"#ctor\">ctor</a>)(void *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#left_over\">left_over</a>, <a class=\"id\" href=\"#slab_size\">slab_size</a>, <a class=\"id\" href=\"#ralign\">ralign</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sanity checks... these are all serious usage bugs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a> || <a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>() || (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#KMALLOC_MAX_SIZE\">KMALLOC_MAX_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: Early error in slab %s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use cache_chain_mutex to ensure a consistent view of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu_online_mask as well.  Please see cpuup_callback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pc\">pc</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This happens when the module gets unloaded and doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * destroy its slab cache and no-one else reuses the vmalloc</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * area of the module.  Print a warning.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>(<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"SLAB: cache with size %d has lost its name\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"kmem_cache_create: duplicate cache %s\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oops\">oops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#name\">name</a>, ' '));<span class=\"ts\"/><span class=\"comment\">/* It confuses parsers */</span>", 
"#if <a class=\"id\" href=\"#FORCED_DEBUG\">FORCED_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable redzoning and last user accounting, except for caches with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * large objects, if the increased size would increase the object size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * above the next power of two: caches with object sizes just above a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * power of two have a significant amount of internal fragmentation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; 4096 || <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#size\">size</a> - 1) == <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#size\">size</a>-1 + <a class=\"id\" href=\"#REDZONE_ALIGN\">REDZONE_ALIGN</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>2 * sizeof(unsigned long long)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a> | <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always checks flags, a caller might be expecting debug support which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * isn't available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#CREATE_MASK\">CREATE_MASK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check that size is in terms of words.  This is needed to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unaligned accesses for some archs when redzoning is used, and makes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sure any on-slab bufctl's are also correctly aligned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &amp; (<a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += (<a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> &= ~(<a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a> - 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* calculate the final buffer alignment: */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 1) arch recommendation: can be overridden for debug */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Default alignment: as specified by the arch code.  Except if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an object is really small, then squeeze multiple objects into</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one cacheline.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ralign\">ralign</a> = <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#ralign\">ralign</a> / 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ralign\">ralign</a> /= 2;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ralign\">ralign</a> = <a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Redzoning and user store require word alignment or possibly larger.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note this will be overridden by architecture or caller mandated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * alignment if either is greater than BYTES_PER_WORD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ralign\">ralign</a> = <a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ralign\">ralign</a> = <a class=\"id\" href=\"#REDZONE_ALIGN\">REDZONE_ALIGN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If redzoning, ensure that the second redzone is suitably</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * aligned, by adjusting the object size accordingly. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#REDZONE_ALIGN\">REDZONE_ALIGN</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> &= ~(<a class=\"id\" href=\"#REDZONE_ALIGN\">REDZONE_ALIGN</a> - 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 2) arch mandated alignment */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ralign\">ralign</a> &lt; <a class=\"id\" href=\"#ARCH_SLAB_MINALIGN\">ARCH_SLAB_MINALIGN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ralign\">ralign</a> = <a class=\"id\" href=\"#ARCH_SLAB_MINALIGN\">ARCH_SLAB_MINALIGN</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* 3) caller mandated alignment */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ralign\">ralign</a> &lt; <a class=\"id\" href=\"#align\">align</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ralign\">ralign</a> = <a class=\"id\" href=\"#align\">align</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* disable debug if not aligning with REDZONE_ALIGN */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ralign\">ralign</a> &amp; (<a class=\"id\" href=\"#__alignof__\">__alignof__</a>(unsigned long long) - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a> | <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4) Store it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = <a class=\"id\" href=\"#ralign\">ralign</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp\">gfp</a> = <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp\">gfp</a> = <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get cache's description obj. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(&amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oops\">oops</a>;", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#obj_size\">obj_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Both debugging options require word-alignment which is calculated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into align above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* add space for red zone words */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#obj_offset\">obj_offset</a> += <a class=\"id\" href=\"#align\">align</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#align\">align</a> + sizeof(unsigned long long);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* user store requires one word storage behind the end of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the real object. But if the second red zone needs to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * aligned to 64 bits, we must allow that much space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#REDZONE_ALIGN\">REDZONE_ALIGN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#BYTES_PER_WORD\">BYTES_PER_WORD</a>;", 
"<span class=\"ts\"/>}", 
"#if <a class=\"id\" href=\"#FORCED_DEBUG\">FORCED_DEBUG</a> && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#INDEX_L3\">INDEX_L3</a> + 1].<a class=\"id\" href=\"#cs_size\">cs_size</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#obj_size\">obj_size</a> &gt; <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>() && <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>) &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#obj_offset\">obj_offset</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Determine if the slab management is 'on' or 'off' slab.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (bootstrapping cannot cope with offslab caches so don't do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it too early on. Always use on-slab management when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SLAB_NOLEAKTRACE to avoid recursive calls into kmemleak)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#size\">size</a> >= (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >> 3)) && !<a class=\"id\" href=\"#slab_early_init\">slab_early_init</a> &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_NOLEAKTRACE\">SLAB_NOLEAKTRACE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Size is large, assume best to place the slab management obj</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * off-slab (should allow better packing of objs).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CFLGS_OFF_SLAB\">CFLGS_OFF_SLAB</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#left_over\">left_over</a> = <a class=\"id\" href=\"#calculate_slab_order\">calculate_slab_order</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"kmem_cache_create: couldn't create cache %s.\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(&amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>, <a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oops\">oops</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab_size\">slab_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a> * sizeof(<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  + sizeof(struct <a class=\"id\" href=\"#slab\">slab</a>), <a class=\"id\" href=\"#align\">align</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the slab has been placed off-slab, and we have enough space then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * move it on-slab. This is at the expense of any extra colouring.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CFLGS_OFF_SLAB\">CFLGS_OFF_SLAB</a> && <a class=\"id\" href=\"#left_over\">left_over</a> >= <a class=\"id\" href=\"#slab_size\">slab_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CFLGS_OFF_SLAB\">CFLGS_OFF_SLAB</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left_over\">left_over</a> -= <a class=\"id\" href=\"#slab_size\">slab_size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CFLGS_OFF_SLAB\">CFLGS_OFF_SLAB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* really off slab. No need for manual alignment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_size\">slab_size</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a> * sizeof(<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>) + sizeof(struct <a class=\"id\" href=\"#slab\">slab</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PAGE_POISONING\">CONFIG_PAGE_POISONING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we're going to use the generic kernel_map_pages()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * poisoning, then it's going to smash the contents of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the redzone and userword anyhow, so switch them off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> % <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> == 0 && <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a> | <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#colour_off\">colour_off</a> = <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Offset must be a multiple of the alignment. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#colour_off\">colour_off</a> &lt; <a class=\"id\" href=\"#align\">align</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#colour_off\">colour_off</a> = <a class=\"id\" href=\"#align\">align</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#colour\">colour</a> = <a class=\"id\" href=\"#left_over\">left_over</a> / <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#colour_off\">colour_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#slab_size\">slab_size</a> = <a class=\"id\" href=\"#slab_size\">slab_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfpflags\">gfpflags</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CONFIG_ZONE_DMA_FLAG\">CONFIG_ZONE_DMA_FLAG</a> && (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_CACHE_DMA\">SLAB_CACHE_DMA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfpflags\">gfpflags</a> |= <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#reciprocal_buffer_size\">reciprocal_buffer_size</a> = <a class=\"id\" href=\"#reciprocal_value\">reciprocal_value</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CFLGS_OFF_SLAB\">CFLGS_OFF_SLAB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#slabp_cache\">slabp_cache</a> = <a class=\"id\" href=\"#kmem_find_general_cachep\">kmem_find_general_cachep</a>(<a class=\"id\" href=\"#slab_size\">slab_size</a>, 0u);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is a possibility for one of the malloc_sizes caches.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But since we go off slab only for object size greater than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * PAGE_SIZE/8, and malloc_sizes gets created in ascending order,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this should not happen at all.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But leave a BUG_ON for some lucky dude.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ZERO_OR_NULL_PTR\">ZERO_OR_NULL_PTR</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#slabp_cache\">slabp_cache</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#ctor\">ctor</a> = <a class=\"id\" href=\"#ctor\">ctor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_cpu_cache\">setup_cpu_cache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp\">gfp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kmem_cache_destroy\">__kmem_cache_destroy</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oops\">oops</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cache setup completed, link it into the list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>);", 
"<a class=\"id\" href=\"#oops\">oops</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cachep\">cachep</a> && (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"kmem_cache_create(): failed to create slab `%s'\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cachep\">cachep</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>);", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"static void <a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_irq_on\">check_irq_on</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_spinlock_acquired\">check_spinlock_acquired</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>()]-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_spinlock_acquired_node\">check_spinlock_acquired_node</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>()<span class=\"ts\"/>do { } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#check_irq_on\">check_irq_on</a>()<span class=\"ts\"/>do { } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#check_spinlock_acquired\">check_spinlock_acquired</a>(<a class=\"id\" href=\"#x\">x</a>) do { } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#check_spinlock_acquired_node\">check_spinlock_acquired_node</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) do { } while(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#drain_array\">drain_array</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#force\">force</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"static void <a class=\"id\" href=\"#do_drain\">do_drain</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_block\">free_block</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#drain_cpu_caches\">drain_cpu_caches</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#do_drain\">do_drain</a>, <a class=\"id\" href=\"#cachep\">cachep</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_on\">check_irq_on</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a> && <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_alien_cache\">drain_alien_cache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_array\">drain_array</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#l3\">l3</a>, <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>, 1, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove slabs from the list of free slabs.</span>", 
"<span class=\"comment\"> * Specify the number of slabs to drain in tofree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the actual number of slabs released.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#drain_freelist\">drain_freelist</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>, int <a class=\"id\" href=\"#tofree\">tofree</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_freed\">nr_freed</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_freed\">nr_freed</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_freed\">nr_freed</a> &lt; <a class=\"id\" href=\"#tofree\">tofree</a> && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Safe to drop the lock. The slab is no longer linked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to the cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a> -= <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_destroy\">slab_destroy</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_freed\">nr_freed</a>++;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_freed\">nr_freed</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Called with cache_chain_mutex held to protect against cpu hotplug */</span>", 
"static int <a class=\"id\" href=\"#__cache_shrink\">__cache_shrink</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drain_cpu_caches\">drain_cpu_caches</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_on\">check_irq_on</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_freelist\">drain_freelist</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#l3\">l3</a>, <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_full\">slabs_full</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ret\">ret</a> ? 1 : 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmem_cache_shrink - Shrink a cache.</span>", 
"<span class=\"comment\"> * @cachep: The cache to shrink.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Releases as many slabs as possible for a cache.</span>", 
"<span class=\"comment\"> * To help debugging, a zero exit status indicates all slabs were released.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kmem_cache_shrink\">kmem_cache_shrink</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cachep\">cachep</a> || <a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__cache_shrink\">__cache_shrink</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_shrink\">kmem_cache_shrink</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmem_cache_destroy - delete a cache</span>", 
"<span class=\"comment\"> * @cachep: the cache to destroy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Remove a &amp;struct kmem_cache object from the slab cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is expected this function will be called by a module when it is</span>", 
"<span class=\"comment\"> * unloaded.  This will remove the cache completely, and avoid a duplicate</span>", 
"<span class=\"comment\"> * cache being allocated each time a module is loaded and unloaded, if the</span>", 
"<span class=\"comment\"> * module doesn't have persistent in-kernel storage across loads and unloads.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The cache must be empty before calling this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must guarantee that noone will allocate memory from the cache</span>", 
"<span class=\"comment\"> * during the kmem_cache_destroy().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cachep\">cachep</a> || <a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the cache in the chain of caches. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the chain is never empty, cache_cache is never destroyed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__cache_shrink\">__cache_shrink</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_error\">slab_error</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, \"Can't free all objects\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kmem_cache_destroy\">__kmem_cache_destroy</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the memory for a slab management obj.</span>", 
"<span class=\"comment\"> * For a slab cache when the slab descriptor is off-slab, slab descriptors</span>", 
"<span class=\"comment\"> * always come from malloc_sizes caches.  The slab descriptor cannot</span>", 
"<span class=\"comment\"> * come from the same cache which is getting created because,</span>", 
"<span class=\"comment\"> * when we are searching for an appropriate cache for these</span>", 
"<span class=\"comment\"> * descriptors in kmem_cache_create, we search through the malloc_sizes array.</span>", 
"<span class=\"comment\"> * If we are creating a malloc_sizes cache here it would not be visible to</span>", 
"<span class=\"comment\"> * kmem_find_general_cachep till the initialization is complete.</span>", 
"<span class=\"comment\"> * Hence we cannot have slabp_cache same as the original cache.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#alloc_slabmgmt\">alloc_slabmgmt</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#colour_off\">colour_off</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#local_flags\">local_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#OFF_SLAB\">OFF_SLAB</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Slab management obj is off-slab. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#slabp_cache\">slabp_cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#local_flags\">local_flags</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the first object in the slab is leaked (it's allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but no one has a reference to it), we want to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kmemleak does not treat the -&gt;s_mem pointer as a reference</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to the object. Otherwise we will not report the leak.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_scan_area\">kmemleak_scan_area</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>, sizeof(struct <a class=\"id\" href=\"#list_head\">list_head</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#local_flags\">local_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#slabp\">slabp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#colour_off\">colour_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#colour_off\">colour_off</a> += <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#slab_size\">slab_size</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#colouroff\">colouroff</a> = <a class=\"id\" href=\"#colour_off\">colour_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#s_mem\">s_mem</a> = <a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#colour_off\">colour_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#nodeid\">nodeid</a> = <a class=\"id\" href=\"#nodeid\">nodeid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slabp\">slabp</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a> *<a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a> *) (<a class=\"id\" href=\"#slabp\">slabp</a> + 1);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cache_init_objs\">cache_init_objs</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#index_to_obj\">index_to_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* need to poison the objs? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poison_obj\">poison_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_userword\">dbg_userword</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) = <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) = <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Constructors are not allowed to allocate memory from the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cache which they are a constructor for.  Otherwise, deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * They must also be threaded.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#ctor\">ctor</a> && !(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#ctor\">ctor</a>(<a class=\"id\" href=\"#objp\">objp</a> + <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) != <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_error\">slab_error</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, \"constructor overwrote the\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \" end of an object\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) != <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_error\">slab_error</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, \"constructor overwrote the\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \" start of an object\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> % <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#OFF_SLAB\">OFF_SLAB</a>(<a class=\"id\" href=\"#cachep\">cachep</a>) && <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#objp\">objp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, 0);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#ctor\">ctor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#ctor\">ctor</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#i\">i</a> + 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#i\">i</a> - 1] = <a class=\"id\" href=\"#BUFCTL_END\">BUFCTL_END</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kmem_flagcheck\">kmem_flagcheck</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CONFIG_ZONE_DMA_FLAG\">CONFIG_ZONE_DMA_FLAG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfpflags\">gfpflags</a> &amp; <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfpflags\">gfpflags</a> &amp; <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#slab_get_obj\">slab_get_obj</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#index_to_obj\">index_to_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a> <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a>];", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a>] = <a class=\"id\" href=\"#BUFCTL_FREE\">BUFCTL_FREE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#nodeid\">nodeid</a> != <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#objp\">objp</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#slab_put_obj\">slab_put_obj</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#objp\">objp</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#objnr\">objnr</a> = <a class=\"id\" href=\"#obj_to_index\">obj_to_index</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Verify that the slab belongs to the intended node */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#nodeid\">nodeid</a> != <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#objnr\">objnr</a>] + 1 <= <a class=\"id\" href=\"#SLAB_LIMIT\">SLAB_LIMIT</a> + 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"slab: double free detected in cache \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"'%s', objp %p\\n\", <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#objnr\">objnr</a>] = <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#objnr\">objnr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a>--;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map pages beginning at addr to the given cache and slab. This is required</span>", 
"<span class=\"comment\"> * for the slab allocator to be able to lookup the cache and slab of a</span>", 
"<span class=\"comment\"> * virtual address for kfree, ksize, kmem_ptr_validate, and slab debugging.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#slab_map_pages\">slab_map_pages</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slab\">slab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> <<= <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#gfporder\">gfporder</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_set_cache\">page_set_cache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#cache\">cache</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_set_slab\">page_set_slab</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#slab\">slab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>++;", 
"<span class=\"ts\"/>} while (--<a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Grow (by 1) the number of slabs within a cache.  This is called by</span>", 
"<span class=\"comment\"> * kmem_cache_alloc() when there are no active objs left in a cache.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cache_grow\">cache_grow</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>, void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#local_flags\">local_flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Be lazy and only check for valid flags here,  keeping it out of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * critical path in kmem_cache_alloc().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GFP_SLAB_BUG_MASK\">GFP_SLAB_BUG_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_flags\">local_flags</a> = <a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#GFP_CONSTRAINT_MASK\">GFP_CONSTRAINT_MASK</a>|<a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Take the l3 list lock to change the colour_next on this node */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get colour for the slab, and cal the next value. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#colour_next\">colour_next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#colour_next\">colour_next</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#colour_next\">colour_next</a> >= <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#colour\">colour</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#colour_next\">colour_next</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> *= <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#colour_off\">colour_off</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_flags\">local_flags</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The test for missing atomic flag is performed here, rather than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the more obvious place, simply to reduce the critical path length</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in kmem_cache_alloc(). If a caller is seriously mis-behaving they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will eventually be caught here (where it matters).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_flagcheck\">kmem_flagcheck</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get mem for the objs.  Attempt to allocate a physical page from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'nodeid'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#objp\">objp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#kmem_getpages\">kmem_getpages</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#local_flags\">local_flags</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#objp\">objp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get slab management. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#alloc_slabmgmt\">alloc_slabmgmt</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_flags\">local_flags</a> &amp; ~<a class=\"id\" href=\"#GFP_CONSTRAINT_MASK\">GFP_CONSTRAINT_MASK</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#slabp\">slabp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#opps1\">opps1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab_map_pages\">slab_map_pages</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_init_objs\">cache_init_objs</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_flags\">local_flags</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make slab active. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;(<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_GROWN\">STATS_INC_GROWN</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a> += <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>return 1;", 
"<a class=\"id\" href=\"#opps1\">opps1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_freepages\">kmem_freepages</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"<a class=\"id\" href=\"#failed\">failed</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_flags\">local_flags</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Perform extra freeing checks:</span>", 
"<span class=\"comment\"> * - detect bad pointers.</span>", 
"<span class=\"comment\"> * - POISON/RED_ZONE checking</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kfree_debugcheck\">kfree_debugcheck</a>(const void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#virt_addr_valid\">virt_addr_valid</a>(<a class=\"id\" href=\"#objp\">objp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kfree_debugcheck: out of range ptr %lxh.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long)<a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#verify_redzone_free\">verify_redzone_free</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>, void *<a class=\"id\" href=\"#obj\">obj</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#redzone1\">redzone1</a>, <a class=\"id\" href=\"#redzone2\">redzone2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#redzone1\">redzone1</a> = *<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#obj\">obj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#redzone2\">redzone2</a> = *<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#obj\">obj</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Redzone is ok.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#redzone1\">redzone1</a> == <a class=\"id\" href=\"#RED_ACTIVE\">RED_ACTIVE</a> && <a class=\"id\" href=\"#redzone2\">redzone2</a> == <a class=\"id\" href=\"#RED_ACTIVE\">RED_ACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#redzone1\">redzone1</a> == <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a> && <a class=\"id\" href=\"#redzone2\">redzone2</a> == <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_error\">slab_error</a>(<a class=\"id\" href=\"#cache\">cache</a>, \"double free detected\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_error\">slab_error</a>(<a class=\"id\" href=\"#cache\">cache</a>, \"memory outside object was overwritten\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%p: redzone 1:0x%llx, redzone 2:0x%llx.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a>, <a class=\"id\" href=\"#redzone1\">redzone1</a>, <a class=\"id\" href=\"#redzone2\">redzone2</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#cache_free_debugcheck\">cache_free_debugcheck</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#objnr\">objnr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#virt_to_cache\">virt_to_cache</a>(<a class=\"id\" href=\"#objp\">objp</a>) != <a class=\"id\" href=\"#cachep\">cachep</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> -= <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_debugcheck\">kfree_debugcheck</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_head_page\">virt_to_head_page</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#page_get_slab\">page_get_slab</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#verify_redzone_free\">verify_redzone_free</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) = <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) = <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_userword\">dbg_userword</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) = <a class=\"id\" href=\"#caller\">caller</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#objnr\">objnr</a> = <a class=\"id\" href=\"#obj_to_index\">obj_to_index</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#objnr\">objnr</a> >= <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#objp\">objp</a> != <a class=\"id\" href=\"#index_to_obj\">index_to_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#objnr\">objnr</a>));", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SLAB_LEAK\">CONFIG_DEBUG_SLAB_LEAK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#objnr\">objnr</a>] = <a class=\"id\" href=\"#BUFCTL_FREE\">BUFCTL_FREE</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> % <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)==0 && <a class=\"id\" href=\"#OFF_SLAB\">OFF_SLAB</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#store_stackinfo\">store_stackinfo</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, (unsigned long)<a class=\"id\" href=\"#caller\">caller</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#objp\">objp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poison_obj\">poison_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poison_obj\">poison_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#objp\">objp</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_slabp\">check_slabp</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#entries\">entries</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check slab's freelist to see if this obj is there. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a>; <a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#BUFCTL_END\">BUFCTL_END</a>; <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entries\">entries</a> &gt; <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a> || <a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entries\">entries</a> != <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a> - <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a>) {", 
"<a class=\"id\" href=\"#bad\">bad</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"slab: Internal list corruption detected in \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"cache '%s'(%d), slabp %p(%d). Hexdump:\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a> &lt; sizeof(*<a class=\"id\" href=\"#slabp\">slabp</a>) + <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a> * sizeof(<a class=\"id\" href=\"#kmem_bufctl_t\">kmem_bufctl_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> % 16 == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n%03x:\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" %02x\", ((unsigned char *)<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfree_debugcheck\">kfree_debugcheck</a>(<a class=\"id\" href=\"#x\">x</a>) do { } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cache_free_debugcheck\">cache_free_debugcheck</a>(<a class=\"id\" href=\"#x\">x</a>,<a class=\"id\" href=\"#objp\">objp</a>,<a class=\"id\" href=\"#z\">z</a>) (<a class=\"id\" href=\"#objp\">objp</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#check_slabp\">check_slabp</a>(<a class=\"id\" href=\"#x\">x</a>,<a class=\"id\" href=\"#y\">y</a>) do { } while(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void *<a class=\"id\" href=\"#cache_alloc_refill\">cache_alloc_refill</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#batchcount\">batchcount</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#touched\">touched</a> && <a class=\"id\" href=\"#batchcount\">batchcount</a> &gt; <a class=\"id\" href=\"#BATCHREFILL_LIMIT\">BATCHREFILL_LIMIT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If there was little recent activity on this cache, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * perform only a partial refill.  Otherwise we could generate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * refill bouncing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#batchcount\">batchcount</a> = <a class=\"id\" href=\"#BATCHREFILL_LIMIT\">BATCHREFILL_LIMIT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> &gt; 0 || !<a class=\"id\" href=\"#l3\">l3</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See if we can refill from the shared array */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a> && <a class=\"id\" href=\"#transfer_objects\">transfer_objects</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>, <a class=\"id\" href=\"#batchcount\">batchcount</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>-><a class=\"id\" href=\"#touched\">touched</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#alloc_done\">alloc_done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#batchcount\">batchcount</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get slab alloc is to come from. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_touched\">free_touched</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#must_grow\">must_grow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_slabp\">check_slabp</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_spinlock_acquired\">check_spinlock_acquired</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The slab was either on partial or free list so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * there must be at least one object available for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a> >= <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a> &lt; <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a> && <a class=\"id\" href=\"#batchcount\">batchcount</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ALLOCED\">STATS_INC_ALLOCED</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ACTIVE\">STATS_INC_ACTIVE</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_SET_HIGH\">STATS_SET_HIGH</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>++] = <a class=\"id\" href=\"#slab_get_obj\">slab_get_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_slabp\">check_slabp</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
];
xr_frag_insert('l/e0/03d29b271bfb603492415141763f9155e9d56e.xr', __xr_tmp);
