var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Force feedback support for Linux input subsystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (c) 2006 Anssi Hannula &lt;anssi.hannula@gmail.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (c) 2006 Dmitry Torokhov &lt;dtor@mail.ru&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* #define DEBUG */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#debug\">debug</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#arg\">arg</a>...) <a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"ff-core: \" <a class=\"id\" href=\"#format\">format</a> \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>)", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check that the effect_id is a valid effect and whether the user</span>", 
"<span class=\"comment\"> * is the owner</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#check_effect_access\">check_effect_access</a>(struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a>, int <a class=\"id\" href=\"#effect_id\">effect_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#effect_id\">effect_id</a> &lt; 0 || <a class=\"id\" href=\"#effect_id\">effect_id</a> >= <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#max_effects\">max_effects</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effect_owners\">effect_owners</a>[<a class=\"id\" href=\"#effect_id\">effect_id</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a> && <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effect_owners\">effect_owners</a>[<a class=\"id\" href=\"#effect_id\">effect_id</a>] != <a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Checks whether 2 effects can be combined together</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_effects_compatible\">check_effects_compatible</a>(struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *<a class=\"id\" href=\"#e1\">e1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *<a class=\"id\" href=\"#e2\">e2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#e1\">e1</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#e2\">e2</a>-><a class=\"id\" href=\"#type\">type</a> &&", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#e1\">e1</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#FF_PERIODIC\">FF_PERIODIC</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e1\">e1</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#waveform\">waveform</a> == <a class=\"id\" href=\"#e2\">e2</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#waveform\">waveform</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert an effect into compatible one</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#compat_effect\">compat_effect</a>(struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a>, struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *<a class=\"id\" href=\"#effect\">effect</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#magnitude\">magnitude</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FF_RUMBLE\">FF_RUMBLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FF_PERIODIC\">FF_PERIODIC</a>, <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * calculate manginude of sine wave as average of rumble's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 2/3 of strong magnitude and 1/3 of weak magnitude</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#magnitude\">magnitude</a> = <a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#rumble\">rumble</a>.<a class=\"id\" href=\"#strong_magnitude\">strong_magnitude</a> / 3 +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#rumble\">rumble</a>.<a class=\"id\" href=\"#weak_magnitude\">weak_magnitude</a> / 6;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FF_PERIODIC\">FF_PERIODIC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#waveform\">waveform</a> = <a class=\"id\" href=\"#FF_SINE\">FF_SINE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#period\">period</a> = 50;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#magnitude\">magnitude</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#magnitude\">magnitude</a>, 0x7fff);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#phase\">phase</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#envelope\">envelope</a>.<a class=\"id\" href=\"#attack_length\">attack_length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#envelope\">envelope</a>.<a class=\"id\" href=\"#attack_level\">attack_level</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#envelope\">envelope</a>.<a class=\"id\" href=\"#fade_length\">fade_length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#envelope\">envelope</a>.<a class=\"id\" href=\"#fade_level\">fade_level</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Let driver handle conversion */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_ff_upload() - upload effect into force-feedback device</span>", 
"<span class=\"comment\"> * @dev: input device</span>", 
"<span class=\"comment\"> * @effect: effect to be uploaded</span>", 
"<span class=\"comment\"> * @file: owner of the effect</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_ff_upload\">input_ff_upload</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *<a class=\"id\" href=\"#effect\">effect</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ff\">ff</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_FF\">EV_FF</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#FF_EFFECT_MIN\">FF_EFFECT_MIN</a> || <a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#FF_EFFECT_MAX\">FF_EFFECT_MAX</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug\">debug</a>(\"invalid or not supported effect type in upload\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#FF_PERIODIC\">FF_PERIODIC</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#waveform\">waveform</a> &lt; <a class=\"id\" href=\"#FF_WAVEFORM_MIN\">FF_WAVEFORM_MIN</a> ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#waveform\">waveform</a> &gt; <a class=\"id\" href=\"#FF_WAVEFORM_MAX\">FF_WAVEFORM_MAX</a> ||", 
"<span class=\"ts\"/>     !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#periodic\">periodic</a>.<a class=\"id\" href=\"#waveform\">waveform</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug\">debug</a>(\"invalid or not supported wave form in upload\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#compat_effect\">compat_effect</a>(<a class=\"id\" href=\"#ff\">ff</a>, <a class=\"id\" href=\"#effect\">effect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#id\">id</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#id\">id</a> = 0; <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#max_effects\">max_effects</a>; <a class=\"id\" href=\"#id\">id</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>     if (!<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effect_owners\">effect_owners</a>[<a class=\"id\" href=\"#id\">id</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> >= <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#max_effects\">max_effects</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#effect\">effect</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#check_effect_access\">check_effect_access</a>(<a class=\"id\" href=\"#ff\">ff</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = &amp;<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effects\">effects</a>[<a class=\"id\" href=\"#id\">id</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_effects_compatible\">check_effects_compatible</a>(<a class=\"id\" href=\"#effect\">effect</a>, <a class=\"id\" href=\"#old\">old</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#upload\">upload</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#effect\">effect</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effects\">effects</a>[<a class=\"id\" href=\"#id\">id</a>] = *<a class=\"id\" href=\"#effect\">effect</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effect_owners\">effect_owners</a>[<a class=\"id\" href=\"#id\">id</a>] = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#input_ff_upload\">input_ff_upload</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Erases the effect if the requester is also the effect owner. The mutex</span>", 
"<span class=\"comment\"> * should already be locked before calling this function.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#erase_effect\">erase_effect</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#effect_id\">effect_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ff\">ff</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#check_effect_access\">check_effect_access</a>(<a class=\"id\" href=\"#ff\">ff</a>, <a class=\"id\" href=\"#effect_id\">effect_id</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#playback\">playback</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#effect_id\">effect_id</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effect_owners\">effect_owners</a>[<a class=\"id\" href=\"#effect_id\">effect_id</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#erase\">erase</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#erase\">erase</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#effect_id\">effect_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effect_owners\">effect_owners</a>[<a class=\"id\" href=\"#effect_id\">effect_id</a>] = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_ff_erase - erase a force-feedback effect from device</span>", 
"<span class=\"comment\"> * @dev: input device to erase effect from</span>", 
"<span class=\"comment\"> * @effect_id: id of the ffect to be erased</span>", 
"<span class=\"comment\"> * @file: purported owner of the request</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function erases a force-feedback effect from specified device.</span>", 
"<span class=\"comment\"> * The effect will only be erased if it was uploaded through the same</span>", 
"<span class=\"comment\"> * file handle that is requesting erase.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_ff_erase\">input_ff_erase</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#effect_id\">effect_id</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ff\">ff</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_FF\">EV_FF</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#erase_effect\">erase_effect</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#effect_id\">effect_id</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#input_ff_erase\">input_ff_erase</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * flush_effects - erase all effects owned by a file handle</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#flush_effects\">flush_effects</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ff\">ff</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug\">debug</a>(\"flushing now\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#max_effects\">max_effects</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#erase_effect\">erase_effect</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_ff_event() - generic handler for force-feedback events</span>", 
"<span class=\"comment\"> * @dev: input device to send the effect to</span>", 
"<span class=\"comment\"> * @type: event type (anything but EV_FF is ignored)</span>", 
"<span class=\"comment\"> * @code: event code</span>", 
"<span class=\"comment\"> * @value: event value</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_ff_event\">input_ff_event</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ff\">ff</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#EV_FF\">EV_FF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#code\">code</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FF_GAIN\">FF_GAIN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FF_GAIN\">FF_GAIN</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>) || <a class=\"id\" href=\"#value\">value</a> &gt; 0xffff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#set_gain\">set_gain</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FF_AUTOCENTER\">FF_AUTOCENTER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FF_AUTOCENTER\">FF_AUTOCENTER</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>) || <a class=\"id\" href=\"#value\">value</a> &gt; 0xffff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#set_autocenter\">set_autocenter</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_effect_access\">check_effect_access</a>(<a class=\"id\" href=\"#ff\">ff</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#NULL\">NULL</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#playback\">playback</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#input_ff_event\">input_ff_event</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_ff_create() - create force-feedback device</span>", 
"<span class=\"comment\"> * @dev: input device supporting force-feedback</span>", 
"<span class=\"comment\"> * @max_effects: maximum number of effects supported by the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function allocates all necessary memory for a force feedback</span>", 
"<span class=\"comment\"> * portion of an input device and installs all default handlers.</span>", 
"<span class=\"comment\"> * @dev-&gt;ffbit should be already set up before calling this function.</span>", 
"<span class=\"comment\"> * Once ff device is created you need to setup its upload, erase,</span>", 
"<span class=\"comment\"> * playback and other handlers before registering input device</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_ff_create\">input_ff_create</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#max_effects\">max_effects</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#max_effects\">max_effects</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"ff-core: cannot allocate device without any effects\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#ff_device\">ff_device</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#max_effects\">max_effects</a> * sizeof(struct <a class=\"id\" href=\"#file\">file</a> *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ff\">ff</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effects\">effects</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#max_effects\">max_effects</a>, sizeof(struct <a class=\"id\" href=\"#ff_effect\">ff_effect</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effects\">effects</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ff\">ff</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#max_effects\">max_effects</a> = <a class=\"id\" href=\"#max_effects\">max_effects</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#ff\">ff</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flush\">flush</a> = <a class=\"id\" href=\"#flush_effects\">flush_effects</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#input_ff_event\">input_ff_event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#EV_FF\">EV_FF</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy \"true\" bits into ff device bitmap */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#FF_MAX\">FF_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we can emulate RUMBLE with periodic effects */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FF_PERIODIC\">FF_PERIODIC</a>, <a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#FF_RUMBLE\">FF_RUMBLE</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#input_ff_create\">input_ff_create</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_ff_destroy() - frees force feedback portion of input device</span>", 
"<span class=\"comment\"> * @dev: input device supporting force feedback</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is only needed in error path as input core will</span>", 
"<span class=\"comment\"> * automatically free force feedback structures when device is</span>", 
"<span class=\"comment\"> * destroyed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_ff_destroy\">input_ff_destroy</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ff_device\">ff_device</a> *<a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ff\">ff</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#EV_FF\">EV_FF</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ff\">ff</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#destroy\">destroy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#ff\">ff</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ff\">ff</a>-><a class=\"id\" href=\"#effects\">effects</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ff\">ff</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#input_ff_destroy\">input_ff_destroy</a>);", 
];
xr_frag_insert('l/e0/a81ee27e49a6ed2276ce3925099dca264e6db8.xr', __xr_tmp);
