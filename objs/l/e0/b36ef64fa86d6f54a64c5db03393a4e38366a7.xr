var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *  Copyright (C) 2000, 2001, 2002 Andi Kleen, SuSE Labs</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#utsname\">utsname</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kexec\">kexec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bug\">bug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysfs\">sysfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#stacktrace\">stacktrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"int <a class=\"id\" href=\"#panic_on_unrecovered_nmi\">panic_on_unrecovered_nmi</a>;", 
"int <a class=\"id\" href=\"#panic_on_io_nmi\">panic_on_io_nmi</a>;", 
"unsigned int <a class=\"id\" href=\"#code_bytes\">code_bytes</a> = 64;", 
"int <a class=\"id\" href=\"#kstack_depth_to_print\">kstack_depth_to_print</a> = 3 * <a class=\"id\" href=\"#STACKSLOTS_PER_LINE\">STACKSLOTS_PER_LINE</a>;", 
"static int <a class=\"id\" href=\"#die_counter\">die_counter</a>;", 
"", 
"void <a class=\"id\" href=\"#printk_address\">printk_address</a>(unsigned long <a class=\"id\" href=\"#address\">address</a>, int <a class=\"id\" href=\"#reliable\">reliable</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" [<%p>] %s%pS\\n\", (void *) <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reliable\">reliable</a> ? \"\" : \"? \", (void *) <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"static void", 
"<a class=\"id\" href=\"#print_ftrace_graph_addr\">print_ftrace_graph_addr</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#stacktrace_ops\">stacktrace_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#tinfo\">tinfo</a>, int *<a class=\"id\" href=\"#graph\">graph</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#tinfo\">tinfo</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret_addr\">ret_addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> != (unsigned long)<a class=\"id\" href=\"#return_to_handler\">return_to_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a> || <a class=\"id\" href=\"#index\">index</a> &lt; *<a class=\"id\" href=\"#graph\">graph</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> -= *<a class=\"id\" href=\"#graph\">graph</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_addr\">ret_addr</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#address\">address</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#ret_addr\">ret_addr</a>, 1);", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#graph\">graph</a>)++;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#print_ftrace_graph_addr\">print_ftrace_graph_addr</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#stacktrace_ops\">stacktrace_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#tinfo\">tinfo</a>, int *<a class=\"id\" href=\"#graph\">graph</a>)", 
"{ }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86-64 can have up to three kernel stacks:</span>", 
"<span class=\"comment\"> * process stack</span>", 
"<span class=\"comment\"> * interrupt stack</span>", 
"<span class=\"comment\"> * severe exception (double fault, nmi, stack fault, debug, mce) hardware stack</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#valid_stack_ptr\">valid_stack_ptr</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#tinfo\">tinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>, void *<a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#tinfo\">tinfo</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#end\">end</a> && <a class=\"id\" href=\"#p\">p</a> >= (<a class=\"id\" href=\"#end\">end</a>-<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a> &gt; <a class=\"id\" href=\"#t\">t</a> && <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#t\">t</a> + <a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> - <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"unsigned long", 
"<a class=\"id\" href=\"#print_context_stack\">print_context_stack</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#tinfo\">tinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#stack\">stack</a>, unsigned long <a class=\"id\" href=\"#bp\">bp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#stacktrace_ops\">stacktrace_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#end\">end</a>, int *<a class=\"id\" href=\"#graph\">graph</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_frame\">stack_frame</a> *<a class=\"id\" href=\"#frame\">frame</a> = (struct <a class=\"id\" href=\"#stack_frame\">stack_frame</a> *)<a class=\"id\" href=\"#bp\">bp</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#valid_stack_ptr\">valid_stack_ptr</a>(<a class=\"id\" href=\"#tinfo\">tinfo</a>, <a class=\"id\" href=\"#stack\">stack</a>, sizeof(*<a class=\"id\" href=\"#stack\">stack</a>), <a class=\"id\" href=\"#end\">end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = *<a class=\"id\" href=\"#stack\">stack</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__kernel_text_address\">__kernel_text_address</a>(<a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long) <a class=\"id\" href=\"#stack\">stack</a> == <a class=\"id\" href=\"#bp\">bp</a> + sizeof(long)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#address\">address</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#addr\">addr</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a> = <a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#next_frame\">next_frame</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = (unsigned long) <a class=\"id\" href=\"#frame\">frame</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#address\">address</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_ftrace_graph_addr\">print_ftrace_graph_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#tinfo\">tinfo</a>, <a class=\"id\" href=\"#graph\">graph</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bp\">bp</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#print_context_stack\">print_context_stack</a>);", 
"", 
"unsigned long", 
"<a class=\"id\" href=\"#print_context_stack_bp\">print_context_stack_bp</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#tinfo\">tinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#stack\">stack</a>, unsigned long <a class=\"id\" href=\"#bp\">bp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#stacktrace_ops\">stacktrace_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#end\">end</a>, int *<a class=\"id\" href=\"#graph\">graph</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_frame\">stack_frame</a> *<a class=\"id\" href=\"#frame\">frame</a> = (struct <a class=\"id\" href=\"#stack_frame\">stack_frame</a> *)<a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#ret_addr\">ret_addr</a> = &amp;<a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#return_address\">return_address</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#valid_stack_ptr\">valid_stack_ptr</a>(<a class=\"id\" href=\"#tinfo\">tinfo</a>, <a class=\"id\" href=\"#ret_addr\">ret_addr</a>, sizeof(*<a class=\"id\" href=\"#ret_addr\">ret_addr</a>), <a class=\"id\" href=\"#end\">end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = *<a class=\"id\" href=\"#ret_addr\">ret_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__kernel_text_address\">__kernel_text_address</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#address\">address</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#addr\">addr</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a> = <a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#next_frame\">next_frame</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_addr\">ret_addr</a> = &amp;<a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#return_address\">return_address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_ftrace_graph_addr\">print_ftrace_graph_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#tinfo\">tinfo</a>, <a class=\"id\" href=\"#graph\">graph</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#frame\">frame</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#print_context_stack_bp\">print_context_stack_bp</a>);", 
"", 
"", 
"static void", 
"<a class=\"id\" href=\"#print_trace_warning_symbol\">print_trace_warning_symbol</a>(void *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#msg\">msg</a>, unsigned long <a class=\"id\" href=\"#symbol\">symbol</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_symbol\">print_symbol</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#symbol\">symbol</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"}", 
"", 
"static void <a class=\"id\" href=\"#print_trace_warning\">print_trace_warning</a>(void *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%s\\n\", (char *)<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#msg\">msg</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#print_trace_stack\">print_trace_stack</a>(void *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s <%s> \", (char *)<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Print one address/symbol entries per line.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#print_trace_address\">print_trace_address</a>(void *<a class=\"id\" href=\"#data\">data</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#reliable\">reliable</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_address\">printk_address</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#reliable\">reliable</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#stacktrace_ops\">stacktrace_ops</a> <a class=\"id\" href=\"#print_trace_ops\">print_trace_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#warning\">warning</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#print_trace_warning\">print_trace_warning</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#warning_symbol\">warning_symbol</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#print_trace_warning_symbol\">print_trace_warning_symbol</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stack\">stack</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#print_trace_stack\">print_trace_stack</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#address\">address</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#print_trace_address\">print_trace_address</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#walk_stack\">walk_stack</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#print_context_stack\">print_context_stack</a>,", 
"};", 
"", 
"void", 
"<a class=\"id\" href=\"#show_trace_log_lvl\">show_trace_log_lvl</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#stack\">stack</a>, unsigned long <a class=\"id\" href=\"#bp\">bp</a>, char *<a class=\"id\" href=\"#log_lvl\">log_lvl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%sCall Trace:\\n\", <a class=\"id\" href=\"#log_lvl\">log_lvl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_trace\">dump_trace</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#bp\">bp</a>, &amp;<a class=\"id\" href=\"#print_trace_ops\">print_trace_ops</a>, <a class=\"id\" href=\"#log_lvl\">log_lvl</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#show_trace\">show_trace</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#stack\">stack</a>, unsigned long <a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_trace_log_lvl\">show_trace_log_lvl</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#bp\">bp</a>, \"\");", 
"}", 
"", 
"void <a class=\"id\" href=\"#show_stack\">show_stack</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned long *<a class=\"id\" href=\"#sp\">sp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_stack_log_lvl\">show_stack_log_lvl</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#sp\">sp</a>, 0, \"\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The architecture-independent dump_stack generator</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dump_stack\">dump_stack</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bp\">bp</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack\">stack</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FRAME_POINTER\">CONFIG_FRAME_POINTER</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bp\">bp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bp\">get_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Pid: %d, comm: %.20s %s %s %.*s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#print_tainted\">print_tainted</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#release\">release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(int)<a class=\"id\" href=\"#strcspn\">strcspn</a>(<a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#version\">version</a>, \" \"),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#version\">version</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_trace\">show_trace</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#bp\">bp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dump_stack\">dump_stack</a>);", 
"", 
"static <a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> <a class=\"id\" href=\"#die_lock\">die_lock</a> = <a class=\"id\" href=\"#__ARCH_SPIN_LOCK_UNLOCKED\">__ARCH_SPIN_LOCK_UNLOCKED</a>;", 
"static int <a class=\"id\" href=\"#die_owner\">die_owner</a> = -1;", 
"static unsigned int <a class=\"id\" href=\"#die_nest_count\">die_nest_count</a>;", 
"", 
"unsigned <a class=\"id\" href=\"#__kprobes\">__kprobes</a> long <a class=\"id\" href=\"#oops_begin\">oops_begin</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oops_enter\">oops_enter</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* racy, but better than risking deadlock. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_local_irq_save\">raw_local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#arch_spin_trylock\">arch_spin_trylock</a>(&amp;<a class=\"id\" href=\"#die_lock\">die_lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#die_owner\">die_owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nested oops. should stop eventually */</span>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#die_lock\">die_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#die_nest_count\">die_nest_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#die_owner\">die_owner</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_verbose\">console_verbose</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bust_spinlocks\">bust_spinlocks</a>(1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#flags\">flags</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#oops_end\">oops_end</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int <a class=\"id\" href=\"#signr\">signr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a> && <a class=\"id\" href=\"#kexec_should_crash\">kexec_should_crash</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crash_kexec\">crash_kexec</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bust_spinlocks\">bust_spinlocks</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#die_owner\">die_owner</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#TAINT_DIE\">TAINT_DIE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#die_nest_count\">die_nest_count</a>--;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#die_nest_count\">die_nest_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nest count reaches zero, release the lock. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#die_lock\">die_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_local_irq_restore\">raw_local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oops_exit\">oops_exit</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#signr\">signr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Fatal exception in interrupt\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#panic_on_oops\">panic_on_oops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Fatal exception\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_exit\">do_exit</a>(<a class=\"id\" href=\"#signr\">signr</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__die\">__die</a>(const char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sp\">sp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"%s: %04lx [#%d] \", <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#err\">err</a> &amp; 0xffff, ++<a class=\"id\" href=\"#die_counter\">die_counter</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"PREEMPT \");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"SMP \");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"DEBUG_PAGEALLOC\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_printk_last_file\">sysfs_printk_last_file</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_OOPS\">DIE_OOPS</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#err\">err</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a>, <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>) == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_registers\">show_registers</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user_mode_vm\">user_mode_vm</a>(<a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ss\">ss</a> &amp; 0xffff;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#kernel_stack_pointer\">kernel_stack_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#ss\">ss</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"EIP: [<%08lx>] \", <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_symbol\">print_symbol</a>(\"%s\", <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" SS:ESP %04x:%08lx\\n\", <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#sp\">sp</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/* Executive summary in case the oops scrolled away */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"RIP \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_address\">printk_address</a>(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" RSP <%016lx>\\n\", <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is gone through when something in the kernel has done something bad</span>", 
"<span class=\"comment\"> * and is about to be terminated:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#die\">die</a>(const char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#oops_begin\">oops_begin</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#user_mode_vm\">user_mode_vm</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#report_bug\">report_bug</a>(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__die\">__die</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#err\">err</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oops_end\">oops_end</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"<a class=\"id\" href=\"#die_nmi\">die_nmi</a>(char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int <a class=\"id\" href=\"#do_panic\">do_panic</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_NMIWATCHDOG\">DIE_NMIWATCHDOG</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, 0, 2, <a class=\"id\" href=\"#SIGINT\">SIGINT</a>) == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are in trouble anyway, lets at least try</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to get a message out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#oops_begin\">oops_begin</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"%s\", <a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" on CPU%d, ip %08lx, registers:\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_registers\">show_registers</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oops_end\">oops_end</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#regs\">regs</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_panic\">do_panic</a> || <a class=\"id\" href=\"#panic_on_oops\">panic_on_oops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Non maskable interrupt\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nmi_exit\">nmi_exit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_exit\">do_exit</a>(<a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#oops_setup\">oops_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#s\">s</a>, \"panic\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic_on_oops\">panic_on_oops</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"oops\", <a class=\"id\" href=\"#oops_setup\">oops_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kstack_setup\">kstack_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kstack_depth_to_print\">kstack_depth_to_print</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"kstack\", <a class=\"id\" href=\"#kstack_setup\">kstack_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#code_bytes_setup\">code_bytes_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#code_bytes\">code_bytes</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#code_bytes\">code_bytes</a> &gt; 8192)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#code_bytes\">code_bytes</a> = 8192;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"code_bytes=\", <a class=\"id\" href=\"#code_bytes_setup\">code_bytes_setup</a>);", 
];
xr_frag_insert('l/e0/b36ef64fa86d6f54a64c5db03393a4e38366a7.xr', __xr_tmp);
