var __xr_tmp = [
"<span class=\"comment\"> * @size: payload size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocates an skb, builds the netlink message, and sends it to the pid.</span>", 
"<span class=\"comment\"> * No failure notifications.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#audit_send_reply\">audit_send_reply</a>(int <a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#seq\">seq</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#done\">done</a>, int <a class=\"id\" href=\"#multi\">multi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#payload\">payload</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_reply\">audit_reply</a> *<a class=\"id\" href=\"#reply\">reply</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#audit_reply\">audit_reply</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#reply\">reply</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#audit_make_reply\">audit_make_reply</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#done\">done</a>, <a class=\"id\" href=\"#multi\">multi</a>, <a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reply\">reply</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reply\">reply</a>-><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#audit_send_reply_thread\">audit_send_reply_thread</a>, <a class=\"id\" href=\"#reply\">reply</a>, \"audit_send_reply\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#reply\">reply</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check for appropriate CAP_AUDIT_ capabilities on incoming audit</span>", 
"<span class=\"comment\"> * control messages.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#audit_netlink_ok\">audit_netlink_ok</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#msg_type\">msg_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#msg_type\">msg_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_GET\">AUDIT_GET</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_LIST\">AUDIT_LIST</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_LIST_RULES\">AUDIT_LIST_RULES</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_SET\">AUDIT_SET</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_ADD\">AUDIT_ADD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_ADD_RULE\">AUDIT_ADD_RULE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_DEL\">AUDIT_DEL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_DEL_RULE\">AUDIT_DEL_RULE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_SIGNAL_INFO\">AUDIT_SIGNAL_INFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_TTY_GET\">AUDIT_TTY_GET</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_TTY_SET\">AUDIT_TTY_SET</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_TRIM\">AUDIT_TRIM</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_MAKE_EQUIV\">AUDIT_MAKE_EQUIV</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#security_netlink_recv\">security_netlink_recv</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#CAP_AUDIT_CONTROL\">CAP_AUDIT_CONTROL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_USER\">AUDIT_USER</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_FIRST_USER_MSG\">AUDIT_FIRST_USER_MSG</a> ... <a class=\"id\" href=\"#AUDIT_LAST_USER_MSG\">AUDIT_LAST_USER_MSG</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_FIRST_USER_MSG2\">AUDIT_FIRST_USER_MSG2</a> ... <a class=\"id\" href=\"#AUDIT_LAST_USER_MSG2\">AUDIT_LAST_USER_MSG2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#security_netlink_recv\">security_netlink_recv</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#CAP_AUDIT_WRITE\">CAP_AUDIT_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:  <span class=\"comment\">/* bad msg */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_log_common_recv_msg\">audit_log_common_recv_msg</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> **<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#msg_type\">msg_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#auid\">auid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ses\">ses</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#audit_enabled\">audit_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ab\">ab</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ab\">ab</a> = <a class=\"id\" href=\"#audit_log_start\">audit_log_start</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#msg_type\">msg_type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(*<a class=\"id\" href=\"#ab\">ab</a>, \"user pid=%d uid=%u auid=%u ses=%u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#auid\">auid</a>, <a class=\"id\" href=\"#ses\">ses</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sid\">sid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_secid_to_secctx\">security_secid_to_secctx</a>(<a class=\"id\" href=\"#sid\">sid</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>, &amp;<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(*<a class=\"id\" href=\"#ab\">ab</a>, \" ssid=%u\", <a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(*<a class=\"id\" href=\"#ab\">ab</a>, \" subj=%s\", <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_release_secctx\">security_release_secctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_receive_msg\">audit_receive_msg</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#nlmsghdr\">nlmsghdr</a> *<a class=\"id\" href=\"#nlh\">nlh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_status\">audit_status</a><span class=\"ts\"/>*<a class=\"id\" href=\"#status_get\">status_get</a>, <a class=\"id\" href=\"#status_set\">status_set</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ab\">ab</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg_type\">msg_type</a> = <a class=\"id\" href=\"#nlh\">nlh</a>-><a class=\"id\" href=\"#nlmsg_type\">nlmsg_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loginuid\">loginuid</a>; <span class=\"comment\">/* loginuid of sender */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sessionid\">sessionid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_sig_info\">audit_sig_info</a>   *<a class=\"id\" href=\"#sig_data\">sig_data</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_netlink_ok\">audit_netlink_ok</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#msg_type\">msg_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* As soon as there's any sign of userspace auditd,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start kauditd to talk to it */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kauditd_task\">kauditd_task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kauditd_task\">kauditd_task</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#kauditd_thread\">kauditd_thread</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"kauditd\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#kauditd_task\">kauditd_task</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#kauditd_task\">kauditd_task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kauditd_task\">kauditd_task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a>  = <a class=\"id\" href=\"#NETLINK_CREDS\">NETLINK_CREDS</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid\">uid</a>  = <a class=\"id\" href=\"#NETLINK_CREDS\">NETLINK_CREDS</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loginuid\">loginuid</a> = <a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#loginuid\">loginuid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sessionid\">sessionid</a> = <a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#sessionid\">sessionid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a>  = <a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a>  = <a class=\"id\" href=\"#nlh\">nlh</a>-><a class=\"id\" href=\"#nlmsg_seq\">nlmsg_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#NLMSG_DATA\">NLMSG_DATA</a>(<a class=\"id\" href=\"#nlh\">nlh</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#msg_type\">msg_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_GET\">AUDIT_GET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status_set\">status_set</a>.<a class=\"id\" href=\"#enabled\">enabled</a><span class=\"ts\"/> = <a class=\"id\" href=\"#audit_enabled\">audit_enabled</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status_set\">status_set</a>.<a class=\"id\" href=\"#failure\">failure</a><span class=\"ts\"/> = <a class=\"id\" href=\"#audit_failure\">audit_failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status_set\">status_set</a>.<a class=\"id\" href=\"#pid\">pid</a><span class=\"ts\"/><span class=\"ts\"/> = <a class=\"id\" href=\"#audit_pid\">audit_pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status_set\">status_set</a>.<a class=\"id\" href=\"#rate_limit\">rate_limit</a><span class=\"ts\"/> = <a class=\"id\" href=\"#audit_rate_limit\">audit_rate_limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status_set\">status_set</a>.<a class=\"id\" href=\"#backlog_limit\">backlog_limit</a> = <a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status_set\">status_set</a>.<a class=\"id\" href=\"#lost\">lost</a><span class=\"ts\"/><span class=\"ts\"/> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#audit_lost\">audit_lost</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status_set\">status_set</a>.<a class=\"id\" href=\"#backlog\">backlog</a><span class=\"ts\"/> = <a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#audit_skb_queue\">audit_skb_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_send_reply\">audit_send_reply</a>(<a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#AUDIT_GET\">AUDIT_GET</a>, 0, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#status_set\">status_set</a>, sizeof(<a class=\"id\" href=\"#status_set\">status_set</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_SET\">AUDIT_SET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nlh\">nlh</a>-><a class=\"id\" href=\"#nlmsg_len\">nlmsg_len</a> &lt; sizeof(struct <a class=\"id\" href=\"#audit_status\">audit_status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status_get\">status_get</a>   = (struct <a class=\"id\" href=\"#audit_status\">audit_status</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#AUDIT_STATUS_ENABLED\">AUDIT_STATUS_ENABLED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_set_enabled\">audit_set_enabled</a>(<a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#enabled\">enabled</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#AUDIT_STATUS_FAILURE\">AUDIT_STATUS_FAILURE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_set_failure\">audit_set_failure</a>(<a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#failure\">failure</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#AUDIT_STATUS_PID\">AUDIT_STATUS_PID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#new_pid\">new_pid</a> = <a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_enabled\">audit_enabled</a> != <a class=\"id\" href=\"#AUDIT_OFF\">AUDIT_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_config_change\">audit_log_config_change</a>(\"audit_pid\", <a class=\"id\" href=\"#new_pid\">new_pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_pid\">audit_pid</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_pid\">audit_pid</a> = <a class=\"id\" href=\"#new_pid\">new_pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_nlk_pid\">audit_nlk_pid</a> = <a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#AUDIT_STATUS_RATE_LIMIT\">AUDIT_STATUS_RATE_LIMIT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_set_rate_limit\">audit_set_rate_limit</a>(<a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#rate_limit\">rate_limit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#AUDIT_STATUS_BACKLOG_LIMIT\">AUDIT_STATUS_BACKLOG_LIMIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_set_backlog_limit\">audit_set_backlog_limit</a>(<a class=\"id\" href=\"#status_get\">status_get</a>-><a class=\"id\" href=\"#backlog_limit\">backlog_limit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_USER\">AUDIT_USER</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_FIRST_USER_MSG\">AUDIT_FIRST_USER_MSG</a> ... <a class=\"id\" href=\"#AUDIT_LAST_USER_MSG\">AUDIT_LAST_USER_MSG</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_FIRST_USER_MSG2\">AUDIT_FIRST_USER_MSG2</a> ... <a class=\"id\" href=\"#AUDIT_LAST_USER_MSG2\">AUDIT_LAST_USER_MSG2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#audit_enabled\">audit_enabled</a> && <a class=\"id\" href=\"#msg_type\">msg_type</a> != <a class=\"id\" href=\"#AUDIT_USER_AVC\">AUDIT_USER_AVC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_filter_user\">audit_filter_user</a>(&amp;<a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg_type\">msg_type</a> == <a class=\"id\" href=\"#AUDIT_USER_TTY\">AUDIT_USER_TTY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_prepare_user_tty\">audit_prepare_user_tty</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sessionid\">sessionid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_common_recv_msg\">audit_log_common_recv_msg</a>(&amp;<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#msg_type\">msg_type</a>, <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#uid\">uid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg_type\">msg_type</a> != <a class=\"id\" href=\"#AUDIT_USER_TTY\">AUDIT_USER_TTY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" msg='%.1024s'\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (char *)<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" msg=\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#nlmsg_len\">nlmsg_len</a>(<a class=\"id\" href=\"#nlh\">nlh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    ((unsigned char *)<a class=\"id\" href=\"#data\">data</a>)[<a class=\"id\" href=\"#size\">size</a> - 1] == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_n_untrustedstring\">audit_log_n_untrustedstring</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_set_pid\">audit_set_pid</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_ADD\">AUDIT_ADD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_DEL\">AUDIT_DEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nlmsg_len\">nlmsg_len</a>(<a class=\"id\" href=\"#nlh\">nlh</a>) &lt; sizeof(struct <a class=\"id\" href=\"#audit_rule\">audit_rule</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_enabled\">audit_enabled</a> == <a class=\"id\" href=\"#AUDIT_LOCKED\">AUDIT_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_common_recv_msg\">audit_log_common_recv_msg</a>(&amp;<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#AUDIT_CONFIG_CHANGE\">AUDIT_CONFIG_CHANGE</a>, <a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" audit_enabled=%d res=0\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#audit_enabled\">audit_enabled</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fallthrough */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_LIST\">AUDIT_LIST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_receive_filter\">audit_receive_filter</a>(<a class=\"id\" href=\"#msg_type\">msg_type</a>, <a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#nlmsg_len\">nlmsg_len</a>(<a class=\"id\" href=\"#nlh\">nlh</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_ADD_RULE\">AUDIT_ADD_RULE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_DEL_RULE\">AUDIT_DEL_RULE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nlmsg_len\">nlmsg_len</a>(<a class=\"id\" href=\"#nlh\">nlh</a>) &lt; sizeof(struct <a class=\"id\" href=\"#audit_rule_data\">audit_rule_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_enabled\">audit_enabled</a> == <a class=\"id\" href=\"#AUDIT_LOCKED\">AUDIT_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_common_recv_msg\">audit_log_common_recv_msg</a>(&amp;<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#AUDIT_CONFIG_CHANGE\">AUDIT_CONFIG_CHANGE</a>, <a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" audit_enabled=%d res=0\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#audit_enabled\">audit_enabled</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fallthrough */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_LIST_RULES\">AUDIT_LIST_RULES</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_receive_filter\">audit_receive_filter</a>(<a class=\"id\" href=\"#msg_type\">msg_type</a>, <a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#nlmsg_len\">nlmsg_len</a>(<a class=\"id\" href=\"#nlh\">nlh</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_TRIM\">AUDIT_TRIM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_trim_trees\">audit_trim_trees</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_common_recv_msg\">audit_log_common_recv_msg</a>(&amp;<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#AUDIT_CONFIG_CHANGE\">AUDIT_CONFIG_CHANGE</a>, <a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" op=trim res=1\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_MAKE_EQUIV\">AUDIT_MAKE_EQUIV</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#bufp\">bufp</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sizes\">sizes</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#msglen\">msglen</a> = <a class=\"id\" href=\"#nlmsg_len\">nlmsg_len</a>(<a class=\"id\" href=\"#nlh\">nlh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#old\">old</a>, *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msglen\">msglen</a> &lt; 2 * sizeof(<a class=\"id\" href=\"#u32\">u32</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#sizes\">sizes</a>, <a class=\"id\" href=\"#bufp\">bufp</a>, 2 * sizeof(<a class=\"id\" href=\"#u32\">u32</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bufp\">bufp</a> += 2 * sizeof(<a class=\"id\" href=\"#u32\">u32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msglen\">msglen</a> -= 2 * sizeof(<a class=\"id\" href=\"#u32\">u32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#audit_unpack_string\">audit_unpack_string</a>(&amp;<a class=\"id\" href=\"#bufp\">bufp</a>, &amp;<a class=\"id\" href=\"#msglen\">msglen</a>, <a class=\"id\" href=\"#sizes\">sizes</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#old\">old</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#audit_unpack_string\">audit_unpack_string</a>(&amp;<a class=\"id\" href=\"#bufp\">bufp</a>, &amp;<a class=\"id\" href=\"#msglen\">msglen</a>, <a class=\"id\" href=\"#sizes\">sizes</a>[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new\">new</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* OK, here comes... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_tag_tree\">audit_tag_tree</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_common_recv_msg\">audit_log_common_recv_msg</a>(&amp;<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#AUDIT_CONFIG_CHANGE\">AUDIT_CONFIG_CHANGE</a>, <a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" op=make_equiv old=\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_untrustedstring\">audit_log_untrustedstring</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" new=\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_untrustedstring\">audit_log_untrustedstring</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" res=%d\", !<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_SIGNAL_INFO\">AUDIT_SIGNAL_INFO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_sig_sid\">audit_sig_sid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_secid_to_secctx\">security_secid_to_secctx</a>(<a class=\"id\" href=\"#audit_sig_sid\">audit_sig_sid</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>, &amp;<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig_data\">sig_data</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#sig_data\">sig_data</a>) + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sig_data\">sig_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_sig_sid\">audit_sig_sid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_release_secctx\">security_release_secctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig_data\">sig_data</a>-><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#audit_sig_uid\">audit_sig_uid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig_data\">sig_data</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#audit_sig_pid\">audit_sig_pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_sig_sid\">audit_sig_sid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#sig_data\">sig_data</a>-><a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_release_secctx\">security_release_secctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_send_reply\">audit_send_reply</a>(<a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#AUDIT_SIGNAL_INFO\">AUDIT_SIGNAL_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, 0, <a class=\"id\" href=\"#sig_data\">sig_data</a>, sizeof(*<a class=\"id\" href=\"#sig_data\">sig_data</a>) + <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sig_data\">sig_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_TTY_GET\">AUDIT_TTY_GET</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tty_status\">audit_tty_status</a> <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>.<a class=\"id\" href=\"#enabled\">enabled</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#audit_tty\">audit_tty</a> != 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_send_reply\">audit_send_reply</a>(<a class=\"id\" href=\"#NETLINK_CB\">NETLINK_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#AUDIT_TTY_GET\">AUDIT_TTY_GET</a>, 0, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#s\">s</a>, sizeof(<a class=\"id\" href=\"#s\">s</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_TTY_SET\">AUDIT_TTY_SET</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tty_status\">audit_tty_status</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nlh\">nlh</a>-><a class=\"id\" href=\"#nlmsg_len\">nlmsg_len</a> &lt; sizeof(struct <a class=\"id\" href=\"#audit_tty_status\">audit_tty_status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#enabled\">enabled</a> != 0 && <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#enabled\">enabled</a> != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#audit_tty\">audit_tty</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#enabled\">enabled</a> != 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a> &lt; 0 ? <a class=\"id\" href=\"#err\">err</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get message from skb.  Each message is processed by audit_receive_msg.</span>", 
"<span class=\"comment\"> * Malformed skbs with wrong length are discarded silently.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#audit_receive_skb\">audit_receive_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlmsghdr\">nlmsghdr</a> *<a class=\"id\" href=\"#nlh\">nlh</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * len MUST be signed for NLMSG_NEXT to be able to dec it below 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the nlmsg_len was not aligned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlh\">nlh</a> = <a class=\"id\" href=\"#nlmsg_hdr\">nlmsg_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#NLMSG_OK\">NLMSG_OK</a>(<a class=\"id\" href=\"#nlh\">nlh</a>, <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#audit_receive_msg\">audit_receive_msg</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#nlh\">nlh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if err or if this message says it wants a response */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> || (<a class=\"id\" href=\"#nlh\">nlh</a>-><a class=\"id\" href=\"#nlmsg_flags\">nlmsg_flags</a> &amp; <a class=\"id\" href=\"#NLM_F_ACK\">NLM_F_ACK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlink_ack\">netlink_ack</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#nlh\">nlh</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlh\">nlh</a> = <a class=\"id\" href=\"#NLMSG_NEXT\">NLMSG_NEXT</a>(<a class=\"id\" href=\"#nlh\">nlh</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Receive messages from netlink socket. */</span>", 
"static void <a class=\"id\" href=\"#audit_receive\">audit_receive</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>  *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_receive_skb\">audit_receive_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Initialize audit support at boot time. */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#audit_init\">audit_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_initialized\">audit_initialized</a> == <a class=\"id\" href=\"#AUDIT_DISABLED\">AUDIT_DISABLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"audit: initializing netlink socket (%s)\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#audit_default\">audit_default</a> ? \"enabled\" : \"disabled\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_sock\">audit_sock</a> = <a class=\"id\" href=\"#netlink_kernel_create\">netlink_kernel_create</a>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>, <a class=\"id\" href=\"#NETLINK_AUDIT\">NETLINK_AUDIT</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#audit_receive\">audit_receive</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#audit_sock\">audit_sock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_panic\">audit_panic</a>(\"cannot initialize netlink socket\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_sock\">audit_sock</a>-><a class=\"id\" href=\"#sk_sndtimeo\">sk_sndtimeo</a> = <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#audit_skb_queue\">audit_skb_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#audit_skb_hold_queue\">audit_skb_hold_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_initialized\">audit_initialized</a> = <a class=\"id\" href=\"#AUDIT_INITIALIZED\">AUDIT_INITIALIZED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_enabled\">audit_enabled</a> = <a class=\"id\" href=\"#audit_default\">audit_default</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_ever_enabled\">audit_ever_enabled</a> |= !!<a class=\"id\" href=\"#audit_default\">audit_default</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log\">audit_log</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#AUDIT_KERNEL\">AUDIT_KERNEL</a>, \"initialized\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#AUDIT_INODE_BUCKETS\">AUDIT_INODE_BUCKETS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#audit_inode_hash\">audit_inode_hash</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#audit_init\">audit_init</a>);", 
"", 
"<span class=\"comment\">/* Process kernel command-line parameter at boot time.  audit=0 or audit=1. */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#audit_enable\">audit_enable</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_default\">audit_default</a> = !!<a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#audit_default\">audit_default</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_initialized\">audit_initialized</a> = <a class=\"id\" href=\"#AUDIT_DISABLED\">AUDIT_DISABLED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"audit: %s\", <a class=\"id\" href=\"#audit_default\">audit_default</a> ? \"enabled\" : \"disabled\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_initialized\">audit_initialized</a> == <a class=\"id\" href=\"#AUDIT_INITIALIZED\">AUDIT_INITIALIZED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_enabled\">audit_enabled</a> = <a class=\"id\" href=\"#audit_default\">audit_default</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_ever_enabled\">audit_ever_enabled</a> |= !!<a class=\"id\" href=\"#audit_default\">audit_default</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#audit_initialized\">audit_initialized</a> == <a class=\"id\" href=\"#AUDIT_UNINITIALIZED\">AUDIT_UNINITIALIZED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" (after initialization)\");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" (until reboot)\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"audit=\", <a class=\"id\" href=\"#audit_enable\">audit_enable</a>);", 
"", 
"static void <a class=\"id\" href=\"#audit_buffer_free\">audit_buffer_free</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#audit_freelist_lock\">audit_freelist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_freelist_count\">audit_freelist_count</a> &gt; <a class=\"id\" href=\"#AUDIT_MAXFREE\">AUDIT_MAXFREE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_freelist_count\">audit_freelist_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#audit_freelist\">audit_freelist</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#audit_freelist_lock\">audit_freelist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> * <a class=\"id\" href=\"#audit_buffer_alloc\">audit_buffer_alloc</a>(struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlmsghdr\">nlmsghdr</a> *<a class=\"id\" href=\"#nlh\">nlh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#audit_freelist_lock\">audit_freelist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#audit_freelist\">audit_freelist</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#audit_freelist\">audit_freelist</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#audit_freelist_count\">audit_freelist_count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#audit_freelist_lock\">audit_freelist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#ab\">ab</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#nlmsg_new\">nlmsg_new</a>(<a class=\"id\" href=\"#AUDIT_BUFSIZ\">AUDIT_BUFSIZ</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nlmsg_failure\">nlmsg_failure</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlh\">nlh</a> = <a class=\"id\" href=\"#NLMSG_NEW\">NLMSG_NEW</a>(<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>, 0, 0, <a class=\"id\" href=\"#type\">type</a>, 0, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ab\">ab</a>;", 
"", 
"<a class=\"id\" href=\"#nlmsg_failure\">nlmsg_failure</a>:                  <span class=\"comment\">/* Used by NLMSG_NEW */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_buffer_free\">audit_buffer_free</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_serial - compute a serial number for the audit record</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Compute a serial number for the audit record.  Audit records are</span>", 
"<span class=\"comment\"> * written to user-space as soon as they are generated, so a complete</span>", 
"<span class=\"comment\"> * audit record may be written in several pieces.  The timestamp of the</span>", 
"<span class=\"comment\"> * record and this serial number are used by the user-space tools to</span>", 
"<span class=\"comment\"> * determine which pieces belong to the same audit record.  The</span>", 
"<span class=\"comment\"> * (timestamp,serial) tuple is unique for each syscall and is live from</span>", 
"<span class=\"comment\"> * syscall entry to syscall exit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: Another possibility is to store the formatted records off the</span>", 
"<span class=\"comment\"> * audit context (for those records that have a context), and emit them</span>", 
"<span class=\"comment\"> * all at syscall exit.  However, this could delay the reporting of</span>", 
"<span class=\"comment\"> * significant errors until syscall exit (or never, if the system</span>", 
"<span class=\"comment\"> * halts).</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#audit_serial\">audit_serial</a>(void)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#serial_lock\">serial_lock</a>);", 
"<span class=\"ts\"/>static unsigned int <a class=\"id\" href=\"#serial\">serial</a> = 0;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#serial_lock\">serial_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = ++<a class=\"id\" href=\"#serial\">serial</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ret\">ret</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#serial_lock\">serial_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#audit_get_stamp\">audit_get_stamp</a>(struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned int *<a class=\"id\" href=\"#serial\">serial</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a> || !<a class=\"id\" href=\"#auditsc_get_stamp\">auditsc_get_stamp</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#serial\">serial</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#serial\">serial</a> = <a class=\"id\" href=\"#audit_serial\">audit_serial</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Obtain an audit buffer.  This routine does locking to obtain the</span>", 
"<span class=\"comment\"> * audit buffer, but then no locking is required for calls to</span>", 
"<span class=\"comment\"> * audit_log_*format.  If the tsk is a task that is currently in a</span>", 
"<span class=\"comment\"> * syscall, then the syscall is marked as auditable and an audit record</span>", 
"<span class=\"comment\"> * will be written at syscall exit.  If there is no associated task, tsk</span>", 
"<span class=\"comment\"> * should be NULL. */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_log_start - obtain an audit buffer</span>", 
"<span class=\"comment\"> * @ctx: audit_context (may be NULL)</span>", 
"<span class=\"comment\"> * @gfp_mask: type of allocation</span>", 
"<span class=\"comment\"> * @type: audit message type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns audit_buffer pointer on success or NULL on error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Obtain an audit buffer.  This routine does locking to obtain the</span>", 
"<span class=\"comment\"> * audit buffer, but then no locking is required for calls to</span>", 
"<span class=\"comment\"> * audit_log_*format.  If the task (ctx) is a task that is currently in a</span>", 
"<span class=\"comment\"> * syscall, then the syscall is marked as auditable and an audit record</span>", 
"<span class=\"comment\"> * will be written at syscall exit.  If there is no associated task, then</span>", 
"<span class=\"comment\"> * task context (ctx) should be NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#audit_log_start\">audit_log_start</a>(struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ab\">ab</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#serial\">serial</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reserve\">reserve</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout_start\">timeout_start</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_initialized\">audit_initialized</a> != <a class=\"id\" href=\"#AUDIT_INITIALIZED\">AUDIT_INITIALIZED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#audit_filter_type\">audit_filter_type</a>(<a class=\"id\" href=\"#type\">type</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve\">reserve</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve\">reserve</a> = 5; <span class=\"comment\">/* Allow atomic callers to go up to five</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>entries over the normal backlog limit */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a>", 
"<span class=\"ts\"/>       && <a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#audit_skb_queue\">audit_skb_queue</a>) &gt; <a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a> + <a class=\"id\" href=\"#reserve\">reserve</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a> && <a class=\"id\" href=\"#audit_backlog_wait_time\">audit_backlog_wait_time</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#timeout_start\">timeout_start</a> + <a class=\"id\" href=\"#audit_backlog_wait_time\">audit_backlog_wait_time</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wait for auditd to drain the queue a little */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(&amp;<a class=\"id\" href=\"#audit_backlog_wait\">audit_backlog_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#audit_skb_queue\">audit_skb_queue</a>) &gt; <a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#timeout_start\">timeout_start</a> + <a class=\"id\" href=\"#audit_backlog_wait_time\">audit_backlog_wait_time</a> - <a class=\"id\" href=\"#jiffies\">jiffies</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#audit_backlog_wait\">audit_backlog_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_rate_check\">audit_rate_check</a>() && <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"audit: audit_backlog=%d > \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"audit_backlog_limit=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#audit_skb_queue\">audit_skb_queue</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_lost\">audit_log_lost</a>(\"backlog limit exceeded\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_backlog_wait_time\">audit_backlog_wait_time</a> = <a class=\"id\" href=\"#audit_backlog_wait_overflow\">audit_backlog_wait_overflow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#audit_backlog_wait\">audit_backlog_wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a> = <a class=\"id\" href=\"#audit_buffer_alloc\">audit_buffer_alloc</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_lost\">audit_log_lost</a>(\"out of memory in audit_log_start\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_get_stamp\">audit_get_stamp</a>(<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#ctx\">ctx</a>, &amp;<a class=\"id\" href=\"#t\">t</a>, &amp;<a class=\"id\" href=\"#serial\">serial</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"audit(%lu.%03lu:%u): \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>, <a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>/1000000, <a class=\"id\" href=\"#serial\">serial</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ab\">ab</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_expand - expand skb in the audit buffer</span>", 
"<span class=\"comment\"> * @ab: audit_buffer</span>", 
"<span class=\"comment\"> * @extra: space to add at tail of the skb</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 (no space) on failed expansion, or available space if</span>", 
"<span class=\"comment\"> * successful.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#audit_expand\">audit_expand</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, int <a class=\"id\" href=\"#extra\">extra</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldtail\">oldtail</a> = <a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, <a class=\"id\" href=\"#extra\">extra</a>, <a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#newtail\">newtail</a> = <a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_lost\">audit_log_lost</a>(\"out of memory in audit_expand\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a> += <a class=\"id\" href=\"#newtail\">newtail</a> - <a class=\"id\" href=\"#oldtail\">oldtail</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#newtail\">newtail</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Format an audit message into the audit buffer.  If there isn't enough</span>", 
"<span class=\"comment\"> * room in the audit buffer, more room will be allocated and vsnprint</span>", 
"<span class=\"comment\"> * will be called a second time.  Currently, we assume that a printk</span>", 
"<span class=\"comment\"> * can't format message larger than 1024 bytes, so we don't either.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#audit_log_vformat\">audit_log_vformat</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#avail\">avail</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args2\">args2</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avail\">avail</a> = <a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avail\">avail</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avail\">avail</a> = <a class=\"id\" href=\"#audit_expand\">audit_expand</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#AUDIT_BUFSIZ\">AUDIT_BUFSIZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#avail\">avail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_copy\">va_copy</a>(<a class=\"id\" href=\"#args2\">args2</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>), <a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#avail\">avail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The printk buffer is 1024 bytes long, so if we get</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * here and AUDIT_BUFSIZ is at least 1024, then we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * log everything that printk could have logged. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avail\">avail</a> = <a class=\"id\" href=\"#audit_expand\">audit_expand</a>(<a class=\"id\" href=\"#ab\">ab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_t\">max_t</a>(unsigned, <a class=\"id\" href=\"#AUDIT_BUFSIZ\">AUDIT_BUFSIZ</a>, 1+<a class=\"id\" href=\"#len\">len</a>-<a class=\"id\" href=\"#avail\">avail</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#avail\">avail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>), <a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args2\">args2</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args2\">args2</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_log_format - format a message into the audit buffer.</span>", 
"<span class=\"comment\"> * @ab: audit_buffer</span>", 
"<span class=\"comment\"> * @fmt: format string</span>", 
"<span class=\"comment\"> * @...: optional parameters matching @fmt string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All the work is done in audit_log_vformat.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_vformat\">audit_log_vformat</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_log_hex - convert a buffer to hex and append it to the audit skb</span>", 
"<span class=\"comment\"> * @ab: the audit_buffer</span>", 
"<span class=\"comment\"> * @buf: buffer to convert to hex</span>", 
"<span class=\"comment\"> * @len: length of @buf to be converted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No return value; failure to expand is silently ignored.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will take the passed buf and convert it into a string of</span>", 
"<span class=\"comment\"> * ascii hex digits. The new string is placed onto the skb.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#audit_log_n_hex\">audit_log_n_hex</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, const unsigned char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#new_len\">new_len</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>static const unsigned char *<a class=\"id\" href=\"#hex\">hex</a> = \"0123456789ABCDEF\";", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avail\">avail</a> = <a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_len\">new_len</a> = <a class=\"id\" href=\"#len\">len</a><<1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_len\">new_len</a> >= <a class=\"id\" href=\"#avail\">avail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Round the buffer request up to the next multiple */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_len\">new_len</a> = <a class=\"id\" href=\"#AUDIT_BUFSIZ\">AUDIT_BUFSIZ</a>*(((<a class=\"id\" href=\"#new_len\">new_len</a>-<a class=\"id\" href=\"#avail\">avail</a>)/<a class=\"id\" href=\"#AUDIT_BUFSIZ\">AUDIT_BUFSIZ</a>) + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avail\">avail</a> = <a class=\"id\" href=\"#audit_expand\">audit_expand</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#new_len\">new_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#avail\">avail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;<a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a>++ = <a class=\"id\" href=\"#hex\">hex</a>[(<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>] &amp; 0xF0)>>4]; <span class=\"comment\">/* Upper nibble */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a>++ = <a class=\"id\" href=\"#hex\">hex</a>[<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>] &amp; 0x0F];<span class=\"ts\"/>  <span class=\"comment\">/* Lower nibble */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a> << 1); <span class=\"comment\">/* new string is twice the old string */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Format a string of no more than slen characters into the audit buffer,</span>", 
"<span class=\"comment\"> * enclosed in quote marks.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#audit_log_n_string\">audit_log_n_string</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, const char *<a class=\"id\" href=\"#string\">string</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#slen\">slen</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#new_len\">new_len</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avail\">avail</a> = <a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_len\">new_len</a> = <a class=\"id\" href=\"#slen\">slen</a> + 3;<span class=\"ts\"/><span class=\"comment\">/* enclosing quotes + null terminator */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_len\">new_len</a> &gt; <a class=\"id\" href=\"#avail\">avail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avail\">avail</a> = <a class=\"id\" href=\"#audit_expand\">audit_expand</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#new_len\">new_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#avail\">avail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a>++ = '\"';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#slen\">slen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#slen\">slen</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a>++ = '\"';", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#slen\">slen</a> + 2);<span class=\"ts\"/><span class=\"comment\">/* don't include null terminator */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_string_contains_control - does a string need to be logged in hex</span>", 
"<span class=\"comment\"> * @string: string to be checked</span>", 
"<span class=\"comment\"> * @len: max length of the string to check</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#audit_string_contains_control\">audit_string_contains_control</a>(const char *<a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>; <a class=\"id\" href=\"#p\">p</a> &lt; (const unsigned char *)<a class=\"id\" href=\"#string\">string</a> + <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == '\"' || *<a class=\"id\" href=\"#p\">p</a> &lt; 0x21 || *<a class=\"id\" href=\"#p\">p</a> &gt; 0x7e)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_log_n_untrustedstring - log a string that may contain random characters</span>", 
"<span class=\"comment\"> * @ab: audit_buffer</span>", 
"<span class=\"comment\"> * @len: length of string (not including trailing null)</span>", 
"<span class=\"comment\"> * @string: string to be logged</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code will escape a string that is passed to it if the string</span>", 
"<span class=\"comment\"> * contains a control character, unprintable character, double quote mark,</span>", 
"<span class=\"comment\"> * or a space. Unescaped strings will start and end with a double quote mark.</span>", 
"<span class=\"comment\"> * Strings that are escaped are printed in hex (2 digits per char).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller specifies the number of characters in the string to log, which may</span>", 
"<span class=\"comment\"> * or may not be the entire string.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#audit_log_n_untrustedstring\">audit_log_n_untrustedstring</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, const char *<a class=\"id\" href=\"#string\">string</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_string_contains_control\">audit_string_contains_control</a>(<a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_n_hex\">audit_log_n_hex</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_n_string\">audit_log_n_string</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_log_untrustedstring - log a string that may contain random characters</span>", 
"<span class=\"comment\"> * @ab: audit_buffer</span>", 
"<span class=\"comment\"> * @string: string to be logged</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Same as audit_log_n_untrustedstring(), except that strlen is used to</span>", 
"<span class=\"comment\"> * determine string length.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#audit_log_untrustedstring\">audit_log_untrustedstring</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, const char *<a class=\"id\" href=\"#string\">string</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_n_untrustedstring\">audit_log_n_untrustedstring</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#string\">string</a>));", 
"}", 
"", 
"<span class=\"comment\">/* This is a helper-function to print the escaped d_path */</span>", 
"void <a class=\"id\" href=\"#audit_log_d_path\">audit_log_d_path</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, const char *<a class=\"id\" href=\"#prefix\">prefix</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#pathname\">pathname</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prefix\">prefix</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" %s\", <a class=\"id\" href=\"#prefix\">prefix</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We will allow 11 spaces for ' (deleted)' to be appended */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pathname\">pathname</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>+11, <a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pathname\">pathname</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_string\">audit_log_string</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"<no_memory>\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#d_path\">d_path</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>+11);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>)) { <span class=\"comment\">/* Should never happen since we send PATH_MAX */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: can we save some information here? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_string\">audit_log_string</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"<too_long>\");", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_untrustedstring\">audit_log_untrustedstring</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pathname\">pathname</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#audit_log_key\">audit_log_key</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, char *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" key=\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_untrustedstring\">audit_log_untrustedstring</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"(null)\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_log_end - end one audit record</span>", 
"<span class=\"comment\"> * @ab: the audit_buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The netlink_* functions cannot be called inside an irq context, so</span>", 
"<span class=\"comment\"> * the audit buffer is placed on a queue and a tasklet is scheduled to</span>", 
"<span class=\"comment\"> * remove them from the queue outside the irq context.  May be called in</span>", 
"<span class=\"comment\"> * any context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ab\">ab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#audit_rate_check\">audit_rate_check</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_lost\">audit_log_lost</a>(\"rate limit exceeded\");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nlmsghdr\">nlmsghdr</a> *<a class=\"id\" href=\"#nlh\">nlh</a> = <a class=\"id\" href=\"#nlmsg_hdr\">nlmsg_hdr</a>(<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlh\">nlh</a>-><a class=\"id\" href=\"#nlmsg_len\">nlmsg_len</a> = <a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#NLMSG_SPACE\">NLMSG_SPACE</a>(0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_pid\">audit_pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#audit_skb_queue\">audit_skb_queue</a>, <a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#kauditd_wait\">kauditd_wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_printk_skb\">audit_printk_skb</a>(<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_buffer_free\">audit_buffer_free</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_log - Log an audit record</span>", 
"<span class=\"comment\"> * @ctx: audit context</span>", 
"<span class=\"comment\"> * @gfp_mask: type of allocation</span>", 
"<span class=\"comment\"> * @type: audit message type</span>", 
"<span class=\"comment\"> * @fmt: format string to use</span>", 
"<span class=\"comment\"> * @...: variable parameters matching the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a convenience function that calls audit_log_start,</span>", 
"<span class=\"comment\"> * audit_log_vformat, and audit_log_end.  It may be called</span>", 
"<span class=\"comment\"> * in any context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#audit_log\">audit_log</a>(struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/>       const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a> = <a class=\"id\" href=\"#audit_log_start\">audit_log_start</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ab\">ab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_vformat\">audit_log_vformat</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#audit_log_start\">audit_log_start</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#audit_log\">audit_log</a>);", 
];
xr_frag_insert('l/e0/cd33de0c992c35dd5822b9e6a3b50bfaf672e3.xr', __xr_tmp);
