var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dynamic DMA mapping support for AMD Hammer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use the integrated AGP GART in the Hammer northbridge as an IOMMU for PCI.</span>", 
"<span class=\"comment\"> * This allows to use PCI devices that only support 32bit addresses on systems</span>", 
"<span class=\"comment\"> * with more than 4GB.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See Documentation/PCI/PCI-DMA-mapping.txt for the interface specification.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2002 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> * Subject to the GNU General Public License v2 only.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#agp_backend\">agp_backend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitmap\">bitmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#iommu\">iommu</a>-<a class=\"id\" href=\"#helper\">helper</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mtrr\">mtrr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#iommu\">iommu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#gart\">gart</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#swiotlb\">swiotlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#k8\">k8</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static unsigned long <a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a>;<span class=\"ts\"/><span class=\"comment\">/* GART remapping area (physical) */</span>", 
"static unsigned long <a class=\"id\" href=\"#iommu_size\">iommu_size</a>;<span class=\"ts\"/><span class=\"comment\">/* size of remapping area bytes */</span>", 
"static unsigned long <a class=\"id\" href=\"#iommu_pages\">iommu_pages</a>;<span class=\"ts\"/><span class=\"comment\">/* .. and in pages */</span>", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#iommu_gatt_base\">iommu_gatt_base</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remapping table */</span>", 
"", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#bad_dma_addr\">bad_dma_addr</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If this is disabled the IOMMU will use an optimized flushing strategy</span>", 
"<span class=\"comment\"> * of only flushing when an mapping is reused. With it true the GART is</span>", 
"<span class=\"comment\"> * flushed for every mapping. Problem is that doing the lazy flush seems</span>", 
"<span class=\"comment\"> * to trigger bugs with some popular PCI cards, in particular 3ware (but</span>", 
"<span class=\"comment\"> * has been also also seen with Qlogic at least).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#iommu_fullflush\">iommu_fullflush</a> = 1;", 
"", 
"<span class=\"comment\">/* Allocation bitmap for the remapping area: */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#iommu_bitmap_lock\">iommu_bitmap_lock</a>);", 
"<span class=\"comment\">/* Guarded by iommu_bitmap_lock: */</span>", 
"static unsigned long *<a class=\"id\" href=\"#iommu_gart_bitmap\">iommu_gart_bitmap</a>;", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gart_unmapped_entry\">gart_unmapped_entry</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPTE_VALID\">GPTE_VALID</a>    1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPTE_COHERENT\">GPTE_COHERENT</a> 2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPTE_ENCODE\">GPTE_ENCODE</a>(<a class=\"id\" href=\"#x\">x</a>) \\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#x\">x</a>) &amp; 0xfffff000) | (((<a class=\"id\" href=\"#x\">x</a>) >> 32) << 4) | <a class=\"id\" href=\"#GPTE_VALID\">GPTE_VALID</a> | <a class=\"id\" href=\"#GPTE_COHERENT\">GPTE_COHERENT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPTE_DECODE\">GPTE_DECODE</a>(<a class=\"id\" href=\"#x\">x</a>) (((<a class=\"id\" href=\"#x\">x</a>) &amp; 0xfffff000) | (((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#x\">x</a>) &amp; 0xff0) << 28))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EMERGENCY_PAGES\">EMERGENCY_PAGES</a> 32 <span class=\"comment\">/* = 128KB */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AGP\">CONFIG_AGP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AGPEXTERN\">AGPEXTERN</a> extern", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AGPEXTERN\">AGPEXTERN</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* backdoor interface to AGP driver */</span>", 
"<a class=\"id\" href=\"#AGPEXTERN\">AGPEXTERN</a> int <a class=\"id\" href=\"#agp_memory_reserved\">agp_memory_reserved</a>;", 
"<a class=\"id\" href=\"#AGPEXTERN\">AGPEXTERN</a> <a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#agp_gatt_table\">agp_gatt_table</a>;", 
"", 
"static unsigned long <a class=\"id\" href=\"#next_bit\">next_bit</a>;  <span class=\"comment\">/* protected by iommu_bitmap_lock */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#need_flush\">need_flush</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* global flush state. set for each gart wrap */</span>", 
"", 
"static unsigned long <a class=\"id\" href=\"#alloc_iommu\">alloc_iommu</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#align_mask\">align_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#boundary_size\">boundary_size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base_index\">base_index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base_index\">base_index</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a> &amp; <a class=\"id\" href=\"#dma_get_seg_boundary\">dma_get_seg_boundary</a>(<a class=\"id\" href=\"#dev\">dev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boundary_size\">boundary_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#dma_get_seg_boundary\">dma_get_seg_boundary</a>(<a class=\"id\" href=\"#dev\">dev</a>) + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#iommu_bitmap_lock\">iommu_bitmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#iommu_area_alloc\">iommu_area_alloc</a>(<a class=\"id\" href=\"#iommu_gart_bitmap\">iommu_gart_bitmap</a>, <a class=\"id\" href=\"#iommu_pages\">iommu_pages</a>, <a class=\"id\" href=\"#next_bit\">next_bit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#base_index\">base_index</a>, <a class=\"id\" href=\"#boundary_size\">boundary_size</a>, <a class=\"id\" href=\"#align_mask\">align_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#iommu_area_alloc\">iommu_area_alloc</a>(<a class=\"id\" href=\"#iommu_gart_bitmap\">iommu_gart_bitmap</a>, <a class=\"id\" href=\"#iommu_pages\">iommu_pages</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#base_index\">base_index</a>, <a class=\"id\" href=\"#boundary_size\">boundary_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#align_mask\">align_mask</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_bit\">next_bit</a> = <a class=\"id\" href=\"#offset\">offset</a>+<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next_bit\">next_bit</a> >= <a class=\"id\" href=\"#iommu_pages\">iommu_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_bit\">next_bit</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_fullflush\">iommu_fullflush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#iommu_bitmap_lock\">iommu_bitmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_iommu\">free_iommu</a>(unsigned long <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#iommu_bitmap_lock\">iommu_bitmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_clear\">bitmap_clear</a>(<a class=\"id\" href=\"#iommu_gart_bitmap\">iommu_gart_bitmap</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#next_bit\">next_bit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_bit\">next_bit</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#iommu_bitmap_lock\">iommu_bitmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use global flush state to avoid races with multiple flushers.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#flush_gart\">flush_gart</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#iommu_bitmap_lock\">iommu_bitmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_flush\">need_flush</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k8_flush_garts\">k8_flush_garts</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#iommu_bitmap_lock\">iommu_bitmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IOMMU_LEAK\">CONFIG_IOMMU_LEAK</a>", 
"<span class=\"comment\">/* Debugging aid for drivers that don't free their IOMMU tables */</span>", 
"static int <a class=\"id\" href=\"#leak_trace\">leak_trace</a>;", 
"static int <a class=\"id\" href=\"#iommu_leak_pages\">iommu_leak_pages</a> = 20;", 
"", 
"static void <a class=\"id\" href=\"#dump_leak\">dump_leak</a>(void)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#dump\">dump</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dump\">dump</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump\">dump</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_stack\">show_stack</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_dma_dump_mappings\">debug_dma_dump_mappings</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#iommu_full\">iommu_full</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ran out of IOMMU space for this operation. This is very bad.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unfortunately the drivers cannot handle this operation properly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Return some non mapped prereserved space in the aperture and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * let the Northbridge deal with it. This will result in garbage</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the IO operation. When the size exceeds the prereserved space</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * memory corruption will occur or random memory will be DMAed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * out. Hopefully no network devices use single mappings that big.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PCI-DMA: Out of IOMMU space for %lu bytes\\n\", <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>*<a class=\"id\" href=\"#EMERGENCY_PAGES\">EMERGENCY_PAGES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#PCI_DMA_FROMDEVICE\">PCI_DMA_FROMDEVICE</a> || <a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#PCI_DMA_BIDIRECTIONAL\">PCI_DMA_BIDIRECTIONAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"PCI-DMA: Memory would be corrupted\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#PCI_DMA_TODEVICE\">PCI_DMA_TODEVICE</a> || <a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#PCI_DMA_BIDIRECTIONAL\">PCI_DMA_BIDIRECTIONAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"PCI-DMA: Random memory would be DMAed\\n\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IOMMU_LEAK\">CONFIG_IOMMU_LEAK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_leak\">dump_leak</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#need_iommu\">need_iommu</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#force_iommu\">force_iommu</a> || !<a class=\"id\" href=\"#dma_capable\">dma_capable</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#nonforced_iommu\">nonforced_iommu</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#dma_capable\">dma_capable</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Map a single continuous physical area into the IOMMU.</span>", 
"<span class=\"comment\"> * Caller needs to check if the iommu is needed and flush.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_map_area\">dma_map_area</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#phys_mem\">phys_mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#dir\">dir</a>, unsigned long <a class=\"id\" href=\"#align_mask\">align_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#npages\">npages</a> = <a class=\"id\" href=\"#iommu_num_pages\">iommu_num_pages</a>(<a class=\"id\" href=\"#phys_mem\">phys_mem</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#iommu_page\">iommu_page</a> = <a class=\"id\" href=\"#alloc_iommu\">alloc_iommu</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#npages\">npages</a>, <a class=\"id\" href=\"#align_mask\">align_mask</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_page\">iommu_page</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nonforced_iommu\">nonforced_iommu</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#phys_mem\">phys_mem</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#phys_mem\">phys_mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#panic_on_overflow\">panic_on_overflow</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"dma_map_area overflow %lu bytes\\n\", <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_full\">iommu_full</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bad_dma_addr\">bad_dma_addr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#npages\">npages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_gatt_base\">iommu_gatt_base</a>[<a class=\"id\" href=\"#iommu_page\">iommu_page</a> + <a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#GPTE_ENCODE\">GPTE_ENCODE</a>(<a class=\"id\" href=\"#phys_mem\">phys_mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_mem\">phys_mem</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a> + <a class=\"id\" href=\"#iommu_page\">iommu_page</a>*<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> + (<a class=\"id\" href=\"#phys_mem\">phys_mem</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Map a single area into the IOMMU */</span>", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#gart_map_page\">gart_map_page</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#x86_dma_fallback_dev\">x86_dma_fallback_dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_iommu\">need_iommu</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"", 
];
xr_frag_insert('l/e1/0b80d6bd1354233baf4eca870fac8469dfc199.xr', __xr_tmp);
