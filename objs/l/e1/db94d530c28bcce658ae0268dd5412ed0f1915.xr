var __xr_tmp = [
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_drop_fraglist\">skb_drop_fraglist</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_drop_list\">skb_drop_list</a>(&amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#skb_clone_fraglist\">skb_clone_fraglist</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_walk_frags\">skb_walk_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_get\">skb_get</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#skb_release_data\">skb_release_data</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#cloned\">cloned</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#atomic_sub_return\">atomic_sub_return</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nohdr\">nohdr</a> ? (1 << <a class=\"id\" href=\"#SKB_DATAREF_SHIFT\">SKB_DATAREF_SHIFT</a>) + 1 : 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dataref\">dataref</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_drop_fraglist\">skb_drop_fraglist</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Free an skbuff by memory without cleaning the state.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kfree_skbmem\">kfree_skbmem</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#other\">other</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#fclone_ref\">fclone_ref</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#fclone\">fclone</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SKB_FCLONE_UNAVAILABLE\">SKB_FCLONE_UNAVAILABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#skbuff_head_cache\">skbuff_head_cache</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SKB_FCLONE_ORIG\">SKB_FCLONE_ORIG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fclone_ref\">fclone_ref</a> = (<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *) (<a class=\"id\" href=\"#skb\">skb</a> + 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(<a class=\"id\" href=\"#fclone_ref\">fclone_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#skbuff_fclone_cache\">skbuff_fclone_cache</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SKB_FCLONE_CLONE\">SKB_FCLONE_CLONE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fclone_ref\">fclone_ref</a> = (<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *) (<a class=\"id\" href=\"#skb\">skb</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#other\">other</a> = <a class=\"id\" href=\"#skb\">skb</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The clone portion is available for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fast-cloning again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#fclone\">fclone</a> = <a class=\"id\" href=\"#SKB_FCLONE_UNAVAILABLE\">SKB_FCLONE_UNAVAILABLE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(<a class=\"id\" href=\"#fclone_ref\">fclone_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#skbuff_fclone_cache\">skbuff_fclone_cache</a>, <a class=\"id\" href=\"#other\">other</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#skb_release_head_state\">skb_release_head_state</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_drop\">skb_dst_drop</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XFRM\">CONFIG_XFRM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#secpath_put\">secpath_put</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sp\">sp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#in_irq\">in_irq</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_conntrack_put\">nf_conntrack_put</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nfct\">nfct</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_conntrack_put_reasm\">nf_conntrack_put_reasm</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nfct_reasm\">nfct_reasm</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BRIDGE_NETFILTER\">CONFIG_BRIDGE_NETFILTER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_bridge_put\">nf_bridge_put</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/* XXX: IS this still necessary? - JHS */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_SCHED\">CONFIG_NET_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_index\">tc_index</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ACT\">CONFIG_NET_CLS_ACT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* Free everything but the sk_buff shell. */</span>", 
"static void <a class=\"id\" href=\"#skb_release_all\">skb_release_all</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_release_head_state\">skb_release_head_state</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_release_data\">skb_release_data</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__kfree_skb - private function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Free an sk_buff. Release anything attached to the buffer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clean the state. This is an internal helper function. Users should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>always call kfree_skb</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#__kfree_skb\">__kfree_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_release_all\">skb_release_all</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skbmem\">kfree_skbmem</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__kfree_skb\">__kfree_skb</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kfree_skb - free an sk_buff</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Drop a reference to the buffer and free it if the usage count has</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hit zero.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>) == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_kfree_skb\">trace_kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfree_skb\">__kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>consume_skb - free an skbuff</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Drop a ref to the buffer and free it if the usage count has hit zero</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Functions identically to kfree_skb, but kfree_skb assumes that the frame</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is being dropped after a failure and notes that</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#consume_skb\">consume_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>) == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfree_skb\">__kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#consume_skb\">consume_skb</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_recycle_check - check if skb can be reused for receive</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb_size: minimum receive buffer size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Checks that the skb passed in is not shared or cloned, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that it is linear and its head portion at least as large as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_size so that it can be recycled as a receive buffer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If these conditions are met, this function does any necessary</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reference count dropping and cleans up the skbuff as if it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>just came from __alloc_skb().</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_recycle_check\">skb_recycle_check</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#skb_size\">skb_size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a> *<a class=\"id\" href=\"#shinfo\">shinfo</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_is_nonlinear\">skb_is_nonlinear</a>(<a class=\"id\" href=\"#skb\">skb</a>) || <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#fclone\">fclone</a> != <a class=\"id\" href=\"#SKB_FCLONE_UNAVAILABLE\">SKB_FCLONE_UNAVAILABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_size\">skb_size</a> = <a class=\"id\" href=\"#SKB_DATA_ALIGN\">SKB_DATA_ALIGN</a>(<a class=\"id\" href=\"#skb_size\">skb_size</a> + <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_end_pointer\">skb_end_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>) - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> &lt; <a class=\"id\" href=\"#skb_size\">skb_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shared\">skb_shared</a>(<a class=\"id\" href=\"#skb\">skb</a>) || <a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_release_head_state\">skb_release_head_state</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shinfo\">shinfo</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#shinfo\">shinfo</a>, 0, <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a>, <a class=\"id\" href=\"#dataref\">dataref</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#shinfo\">shinfo</a>-><a class=\"id\" href=\"#dataref\">dataref</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>, <a class=\"id\" href=\"#tail\">tail</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_tail_pointer\">skb_reset_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_recycle_check\">skb_recycle_check</a>);", 
"", 
"static void <a class=\"id\" href=\"#__copy_skb_header\">__copy_skb_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#dev\">dev</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#network_header\">network_header</a><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#network_header\">network_header</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_copy\">skb_dst_copy</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XFRM\">CONFIG_XFRM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#sp\">sp</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#secpath_get\">secpath_get</a>(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#sp\">sp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cb\">cb</a>, <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cb\">cb</a>, sizeof(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cb\">cb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#csum\">csum</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#local_df\">local_df</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#local_df\">local_df</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_queue_mapping\">skb_copy_queue_mapping</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#priority\">priority</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#priority\">priority</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#deliver_no_wcard\">deliver_no_wcard</a><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#deliver_no_wcard\">deliver_no_wcard</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IP_VS\">CONFIG_IP_VS</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IP_VS_MODULE\">CONFIG_IP_VS_MODULE</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#ipvs_property\">ipvs_property</a><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#ipvs_property\">ipvs_property</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#protocol\">protocol</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mark\">mark</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#skb_iif\">skb_iif</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#skb_iif\">skb_iif</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__nf_copy\">__nf_copy</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NETFILTER_XT_TARGET_TRACE\">CONFIG_NETFILTER_XT_TARGET_TRACE</a>) || \\", 
"    <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NETFILTER_XT_TARGET_TRACE_MODULE\">CONFIG_NETFILTER_XT_TARGET_TRACE_MODULE</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#nf_trace\">nf_trace</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#nf_trace\">nf_trace</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_SCHED\">CONFIG_NET_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tc_index\">tc_index</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#tc_index\">tc_index</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ACT\">CONFIG_NET_CLS_ACT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vlan_tci\">vlan_tci</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_secmark\">skb_copy_secmark</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * You should not add any new code to this function.  Add it to</span>", 
"<span class=\"comment\"> * __copy_skb_header above instead.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__skb_clone\">__skb_clone</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#x\">x</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__copy_skb_header\">__copy_skb_header</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#data_len\">data_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#mac_len\">mac_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#hdr_len\">hdr_len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nohdr\">nohdr</a> ? <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) : <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#hdr_len\">hdr_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#cloned\">cloned</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#nohdr\">nohdr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#tail\">tail</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#truesize\">truesize</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#users\">users</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dataref\">dataref</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#cloned\">cloned</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#C\">C</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_morph<span class=\"ts\"/>-<span class=\"ts\"/>morph one skb into another</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dst: the skb to receive the contents</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@src: the skb to supply the contents</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is identical to skb_clone except that the target skb is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>supplied by the user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The target skb is returned upon exit.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_morph\">skb_morph</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_release_all\">skb_release_all</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__skb_clone\">__skb_clone</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#skb_morph\">skb_morph</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_clone<span class=\"ts\"/>-<span class=\"ts\"/>duplicate an sk_buff</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to clone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation priority</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Duplicate an &amp;sk_buff. The new one is not owned by a socket. Both</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>copies share the same packet data but not structure. The new</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buffer has a reference count of 1. If the allocation fails the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function returns %NULL otherwise the new buffer is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If this function is called from an interrupt gfp_mask() must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%GFP_ATOMIC.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_clone\">skb_clone</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#skb\">skb</a> + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#fclone\">fclone</a> == <a class=\"id\" href=\"#SKB_FCLONE_ORIG\">SKB_FCLONE_ORIG</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#fclone\">fclone</a> == <a class=\"id\" href=\"#SKB_FCLONE_UNAVAILABLE\">SKB_FCLONE_UNAVAILABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#fclone_ref\">fclone_ref</a> = (<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *) (<a class=\"id\" href=\"#n\">n</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#fclone\">fclone</a> = <a class=\"id\" href=\"#SKB_FCLONE_CLONE\">SKB_FCLONE_CLONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(<a class=\"id\" href=\"#fclone_ref\">fclone_ref</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#skbuff_head_cache\">skbuff_head_cache</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#flags1\">flags1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#flags2\">flags2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#fclone\">fclone</a> = <a class=\"id\" href=\"#SKB_FCLONE_UNAVAILABLE\">SKB_FCLONE_UNAVAILABLE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__skb_clone\">__skb_clone</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_clone\">skb_clone</a>);", 
"", 
"static void <a class=\"id\" href=\"#copy_skb_header\">copy_skb_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Shift between the two data areas in bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__copy_skb_header\">__copy_skb_header</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* {transport,network,mac}_header are relative to skb-&gt;head */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> += <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#network_header\">network_header</a>   += <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_mac_header_was_set\">skb_mac_header_was_set</a>(<a class=\"id\" href=\"#new\">new</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a><span class=\"ts\"/>      += <a class=\"id\" href=\"#offset\">offset</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#new\">new</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#old\">old</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#new\">new</a>)-><a class=\"id\" href=\"#gso_segs\">gso_segs</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#old\">old</a>)-><a class=\"id\" href=\"#gso_segs\">gso_segs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#new\">new</a>)-><a class=\"id\" href=\"#gso_type\">gso_type</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#old\">old</a>)-><a class=\"id\" href=\"#gso_type\">gso_type</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_copy<span class=\"ts\"/>-<span class=\"ts\"/>create private copy of an sk_buff</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to copy</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation priority</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Make a copy of both an &amp;sk_buff and its data. This is used when the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>caller wishes to modify the data and needs a private copy of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data to alter. Returns %NULL on failure or the pointer to the buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on success. The returned buffer has a reference count of 1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>As by-product this function converts non-linear &amp;sk_buff to linear</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>one, so that &amp;sk_buff becomes completely private and caller is allowed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to modify all the data of returned buffer. This means that this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function is not recommended for use in circumstances when only</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>header is going to be modified. Use pskb_copy() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_copy\">skb_copy</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#headerlen\">headerlen</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Allocate the copy buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the data pointer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#headerlen\">headerlen</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the tail pointer and length */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_copy_bits\">skb_copy_bits</a>(<a class=\"id\" href=\"#skb\">skb</a>, -<a class=\"id\" href=\"#headerlen\">headerlen</a>, <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#headerlen\">headerlen</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_skb_header\">copy_skb_header</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_copy\">skb_copy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pskb_copy<span class=\"ts\"/>-<span class=\"ts\"/>create copy of an sk_buff with private head.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to copy</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation priority</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Make a copy of both an &amp;sk_buff and part of its data, located</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in header. Fragmented data remain shared. This is used when</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the caller wishes to modify only header of &amp;sk_buff and needs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>private copy of the header to alter. Returns %NULL on failure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or the pointer to the buffer on success.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The returned buffer has a reference count of 1.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#pskb_copy\">pskb_copy</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Allocate the copy buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the data pointer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the tail pointer and length */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy the bytes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_from_linear_data\">skb_copy_from_linear_data</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#truesize\">truesize</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#data_len\">data_len</a>  = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#len\">len</a><span class=\"ts\"/>     = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_clone_fraglist\">skb_clone_fraglist</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_skb_header\">copy_skb_header</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pskb_copy\">pskb_copy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pskb_expand_head - reallocate header of &amp;sk_buff</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to reallocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nhead: room to add at head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ntail: room to add at tail</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation priority</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Expands (or creates identical copy, if &amp;nhead and &amp;ntail are zero)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>header of skb. &amp;sk_buff itself is not changed. &amp;sk_buff MUST have</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reference count of 1. Returns zero in the case of success or error,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if expansion failed. In the last case, &amp;sk_buff is not changed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>All the pointers pointing into skb header may change and must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reloaded after call to this function.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#nhead\">nhead</a>, int <a class=\"id\" href=\"#ntail\">ntail</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#nhead\">nhead</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a> + <a class=\"id\" href=\"#ntail\">ntail</a>;", 
"#else", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#nhead\">nhead</a> + (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>) + <a class=\"id\" href=\"#ntail\">ntail</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#nhead\">nhead</a> &lt; 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shared\">skb_shared</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#SKB_DATA_ALIGN\">SKB_DATA_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a> + sizeof(struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nodata\">nodata</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy only real data... and, alas, header. This should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * optimized for the cases when header is void. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#nhead\">nhead</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#nhead\">nhead</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#skb_end_pointer\">skb_end_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a>, <a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>]));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_clone_fraglist\">skb_clone_fraglist</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_release_data\">skb_release_data</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = (<a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#nhead\">nhead</a>) - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>     = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>    += <a class=\"id\" href=\"#off\">off</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a>      = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a>           = <a class=\"id\" href=\"#nhead\">nhead</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a>      = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* {transport,network,mac}_header and tail are relative to skb-&gt;head */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a><span class=\"ts\"/>      += <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> += <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a>   += <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_mac_header_was_set\">skb_mac_header_was_set</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> += <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Only adjust this if it actually is csum_start rather than csum */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_start\">csum_start</a> += <a class=\"id\" href=\"#nhead\">nhead</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#cloned\">cloned</a>   = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#hdr_len\">hdr_len</a>  = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nohdr\">nohdr</a>    = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dataref\">dataref</a>, 1);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#nodata\">nodata</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>);", 
"", 
"<span class=\"comment\">/* Make private copy of skb with writable head and some headroom */</span>", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_realloc_headroom\">skb_realloc_headroom</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#headroom\">headroom</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb2\">skb2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#headroom\">headroom</a> - <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb2\">skb2</a> = <a class=\"id\" href=\"#pskb_copy\">pskb_copy</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb2\">skb2</a> = <a class=\"id\" href=\"#skb_clone\">skb_clone</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb2\">skb2</a> && <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb2\">skb2</a>, <a class=\"id\" href=\"#SKB_DATA_ALIGN\">SKB_DATA_ALIGN</a>(<a class=\"id\" href=\"#delta\">delta</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb2\">skb2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb2\">skb2</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb2\">skb2</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_realloc_headroom\">skb_realloc_headroom</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_copy_expand<span class=\"ts\"/>-<span class=\"ts\"/>copy and expand sk_buff</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to copy</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newheadroom: new free bytes at head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newtailroom: new free bytes at tail</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation priority</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Make a copy of both an &amp;sk_buff and its data and while doing so</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocate additional space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is used when the caller wishes to modify the data and needs a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>private copy of the data to alter as well as more space for new fields.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns %NULL on failure or the pointer to the buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on success. The returned buffer has a reference count of 1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>You must pass %GFP_ATOMIC as the allocation priority if this function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is called from an interrupt.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_copy_expand\">skb_copy_expand</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#newheadroom\">newheadroom</a>, int <a class=\"id\" href=\"#newtailroom\">newtailroom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Allocate the copy buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#newheadroom\">newheadroom</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#newtailroom\">newtailroom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldheadroom\">oldheadroom</a> = <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#head_copy_len\">head_copy_len</a>, <a class=\"id\" href=\"#head_copy_off\">head_copy_off</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#newheadroom\">newheadroom</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the tail pointer and length */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head_copy_len\">head_copy_len</a> = <a class=\"id\" href=\"#oldheadroom\">oldheadroom</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head_copy_off\">head_copy_off</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newheadroom\">newheadroom</a> <= <a class=\"id\" href=\"#head_copy_len\">head_copy_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head_copy_len\">head_copy_len</a> = <a class=\"id\" href=\"#newheadroom\">newheadroom</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head_copy_off\">head_copy_off</a> = <a class=\"id\" href=\"#newheadroom\">newheadroom</a> - <a class=\"id\" href=\"#head_copy_len\">head_copy_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy the linear header and data. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_copy_bits\">skb_copy_bits</a>(<a class=\"id\" href=\"#skb\">skb</a>, -<a class=\"id\" href=\"#head_copy_len\">head_copy_len</a>, <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#head_copy_off\">head_copy_off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#head_copy_len\">head_copy_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_skb_header\">copy_skb_header</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a>                  = <a class=\"id\" href=\"#newheadroom\">newheadroom</a> - <a class=\"id\" href=\"#oldheadroom\">oldheadroom</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#csum_start\">csum_start</a> += <a class=\"id\" href=\"#off\">off</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> += <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#network_header\">network_header</a>   += <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_mac_header_was_set\">skb_mac_header_was_set</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> += <a class=\"id\" href=\"#off\">off</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_copy_expand\">skb_copy_expand</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_pad<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>zero pad the tail of an skb</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to pad</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pad: space to pad</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ensure that a buffer is followed by a padding area that is zero</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>filled. Used by network drivers which may DMA or transfer data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>beyond the buffer end onto the wire.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>May return error in out of memory cases. The skb is freed on error.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#skb_pad\">skb_pad</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#pad\">pad</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ntail\">ntail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the skbuff is non linear tailroom is always zero.. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) && <a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) >= <a class=\"id\" href=\"#pad\">pad</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>+<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>, 0, <a class=\"id\" href=\"#pad\">pad</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ntail\">ntail</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a> + <a class=\"id\" href=\"#pad\">pad</a> - (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) || <a class=\"id\" href=\"#ntail\">ntail</a> &gt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, <a class=\"id\" href=\"#ntail\">ntail</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_skb\">free_skb</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: The use of this function with non-linear skb's really needs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be audited.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#skb_linearize\">skb_linearize</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_skb\">free_skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>, 0, <a class=\"id\" href=\"#pad\">pad</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#free_skb\">free_skb</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_pad\">skb_pad</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_put - add data to a buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: amount of data to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function extends the used data area of the buffer. If this would</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>exceed the total buffer size the kernel will panic. A pointer to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>first byte of the extra data is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned char *<a class=\"id\" href=\"#skb_put\">skb_put</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_LINEAR_ASSERT\">SKB_LINEAR_ASSERT</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>  += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_over_panic\">skb_over_panic</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_put\">skb_put</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_push - add data to the start of a buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: amount of data to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function extends the used data area of the buffer at the buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>start. If this would exceed the total buffer headroom the kernel will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>panic. A pointer to the first byte of the extra data is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned char *<a class=\"id\" href=\"#skb_push\">skb_push</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>  += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>&lt;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_under_panic\">skb_under_panic</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_push\">skb_push</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_pull - remove data from the start of a buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: amount of data to remove</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function removes data from the start of a buffer, returning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the memory to the headroom. A pointer to the next data in the buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned. Once the data has been pulled future pushes will overwrite</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the old data.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned char *<a class=\"id\" href=\"#skb_pull\">skb_pull</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_pull_inline\">skb_pull_inline</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_pull\">skb_pull</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_trim - remove end from a buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to alter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: new length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Cut the length of a buffer down by removing data from the tail. If</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the buffer is already under the length specified it is not modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The skb must be linear.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_trim\">skb_trim</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_trim\">__skb_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_trim\">skb_trim</a>);", 
"", 
"<span class=\"comment\">/* Trims skb to length len. It can change skb pointers.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#___pskb_trim\">___pskb_trim</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#fragp\">fragp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#frag\">frag</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nfrags\">nfrags</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop_pages\">drop_pages</a>;", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nfrags\">nfrags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>++].<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<a class=\"id\" href=\"#drop_pages\">drop_pages</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nfrags\">nfrags</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_drop_fraglist\">skb_drop_fraglist</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fragp\">fragp</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>; (<a class=\"id\" href=\"#frag\">frag</a> = *<a class=\"id\" href=\"#fragp\">fragp</a>);", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#fragp\">fragp</a> = &amp;<a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shared\">skb_shared</a>(<a class=\"id\" href=\"#frag\">frag</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#nfrag\">nfrag</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nfrag\">nfrag</a> = <a class=\"id\" href=\"#skb_clone\">skb_clone</a>(<a class=\"id\" href=\"#frag\">frag</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#nfrag\">nfrag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nfrag\">nfrag</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#frag\">frag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a> = <a class=\"id\" href=\"#nfrag\">nfrag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fragp\">fragp</a> = <a class=\"id\" href=\"#frag\">frag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#len\">len</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pskb_trim\">pskb_trim</a>(<a class=\"id\" href=\"#frag\">frag</a>, <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#offset\">offset</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_drop_list\">skb_drop_list</a>(&amp;<a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a> -= <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>       = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>       = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>  = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_set_tail_pointer\">skb_set_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#___pskb_trim\">___pskb_trim</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__pskb_pull_tail - advance tail of skb header</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to reallocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@delta: number of bytes to advance tail</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The function makes a sense only on a fragmented &amp;sk_buff,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it expands header moving its tail forward and copying necessary</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data from fragmented part.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>&amp;sk_buff MUST have reference count of 1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns %NULL (and &amp;sk_buff does not change) if pull failed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or value of new tail of skb in the case of success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>All the pointers pointing into skb header may change and must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reloaded after call to this function.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Moves tail of skb head forward, copying data from fragmented part,</span>", 
"<span class=\"comment\"> * when it is necessary.</span>", 
"<span class=\"comment\"> * 1. It may fail due to malloc failure.</span>", 
"<span class=\"comment\"> * 2. It may change skb pointers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is pretty complicated. Luckily, it is called only in exceptional cases.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned char *<a class=\"id\" href=\"#__pskb_pull_tail\">__pskb_pull_tail</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If skb has not enough free space at tail, get new one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * plus 128 bytes for future expansions. If we have enough</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * room at tail, reallocate without expansion only if skb is cloned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#eat\">eat</a> = (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> + <a class=\"id\" href=\"#delta\">delta</a>) - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#eat\">eat</a> &gt; 0 || <a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, <a class=\"id\" href=\"#eat\">eat</a> &gt; 0 ? <a class=\"id\" href=\"#eat\">eat</a> + 128 : 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_copy_bits\">skb_copy_bits</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>), <a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>), <a class=\"id\" href=\"#delta\">delta</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Optimization: no fragments, no reasons to preestimate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * size of pulled pages. Superb.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#pull_pages\">pull_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Estimate size of pulled pages. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eat\">eat</a> = <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#eat\">eat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#pull_pages\">pull_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eat\">eat</a> -= <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we need update frag list, we are in troubles.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Certainly, it possible to add an offset to skb data,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but taking into account that pulling is expected to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be very rare operation, it is worth to fight against</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * further bloating skb head and crucify ourselves here instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Pure masohism, indeed. 8)8)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#eat\">eat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#insp\">insp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#eat\">eat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Eaten as whole. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eat\">eat</a> -= <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insp\">insp</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Eaten partially. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shared\">skb_shared</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Sucks! We need to fork list. :-( */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#skb_clone\">skb_clone</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#clone\">clone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insp\">insp</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This may be pulled without</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * problems. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insp\">insp</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_pull\">pskb_pull</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#eat\">eat</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#eat\">eat</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Free pulled out fragments. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>) != <a class=\"id\" href=\"#insp\">insp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* And insert new clone at head. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clone\">clone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> = <a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Success! Now we may commit changes to skb data. */</span>", 
"", 
"<a class=\"id\" href=\"#pull_pages\">pull_pages</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eat\">eat</a> = <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#eat\">eat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eat\">eat</a> -= <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#k\">k</a>] = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#eat\">eat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#k\">k</a>].<a class=\"id\" href=\"#page_offset\">page_offset</a> += <a class=\"id\" href=\"#eat\">eat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#k\">k</a>].<a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#eat\">eat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eat\">eat</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a>     += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a> -= <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__pskb_pull_tail\">__pskb_pull_tail</a>);", 
"", 
"<span class=\"comment\">/* Copy some data bits from skb to kernel buffer. */</span>", 
"", 
"int <a class=\"id\" href=\"#skb_copy_bits\">skb_copy_bits</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#offset\">offset</a>, void *<a class=\"id\" href=\"#to\">to</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#frag_iter\">frag_iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#copy\">copy</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &gt; (int)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fault\">fault</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy header. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_from_linear_data_offset\">skb_copy_from_linear_data_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>     += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#kmap_skb_frag\">kmap_skb_frag</a>(&amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page_offset\">page_offset</a>+", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_skb_frag\">kunmap_skb_frag</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>     += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_walk_frags\">skb_walk_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#frag_iter\">frag_iter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#frag_iter\">frag_iter</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_copy_bits\">skb_copy_bits</a>(<a class=\"id\" href=\"#frag_iter\">frag_iter</a>, <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fault\">fault</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>     += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fault\">fault</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_copy_bits\">skb_copy_bits</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Callback from splice_to_pipe(), if we need to release some pages</span>", 
"<span class=\"comment\"> * at the end of the spd in case we error'ed out in filling the pipe.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sock_spd_release\">sock_spd_release</a>(struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> *<a class=\"id\" href=\"#spd\">spd</a>, unsigned int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#linear_to_page\">linear_to_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int *<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int *<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndmsg_page\">sk_sndmsg_page</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) {", 
"<a class=\"id\" href=\"#new_page\">new_page</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndmsg_page\">sk_sndmsg_page</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_allocation\">sk_allocation</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndmsg_off\">sk_sndmsg_off</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hold one ref to this page until it's full */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mlen\">mlen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndmsg_off\">sk_sndmsg_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mlen\">mlen</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mlen\">mlen</a> &lt; 64 && <a class=\"id\" href=\"#mlen\">mlen</a> &lt; *<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#new_page\">new_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, *<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#mlen\">mlen</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#p\">p</a>) + <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + *<a class=\"id\" href=\"#offset\">offset</a>, *<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndmsg_off\">sk_sndmsg_off</a> += *<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fill page/offset/length into spd, if it can hold more pages.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#spd_fill_page\">spd_fill_page</a>(struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> *<a class=\"id\" href=\"#spd\">spd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#linear\">linear</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> == <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#linear\">linear</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#linear_to_page\">linear_to_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>].<a class=\"id\" href=\"#len\">len</a> = *<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>].<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>++;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__segment_seek\">__segment_seek</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#page\">page</a>, unsigned int *<a class=\"id\" href=\"#poff\">poff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int *<a class=\"id\" href=\"#plen\">plen</a>, unsigned int <a class=\"id\" href=\"#off\">off</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#poff\">poff</a> += <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = *<a class=\"id\" href=\"#poff\">poff</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#nth_page\">nth_page</a>(*<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#poff\">poff</a> = *<a class=\"id\" href=\"#poff\">poff</a> % <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#plen\">plen</a> -= <a class=\"id\" href=\"#off\">off</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__splice_segment\">__splice_segment</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#poff\">poff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#plen\">plen</a>, unsigned int *<a class=\"id\" href=\"#off\">off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int *<a class=\"id\" href=\"#len\">len</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> *<a class=\"id\" href=\"#spd\">spd</a>, int <a class=\"id\" href=\"#linear\">linear</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"{", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* skip this segment if already processed */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#off\">off</a> >= <a class=\"id\" href=\"#plen\">plen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#off\">off</a> -= <a class=\"id\" href=\"#plen\">plen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ignore any bits we already processed */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#off\">off</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__segment_seek\">__segment_seek</a>(&amp;<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#poff\">poff</a>, &amp;<a class=\"id\" href=\"#plen\">plen</a>, *<a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#off\">off</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flen\">flen</a> = <a class=\"id\" href=\"#min\">min</a>(*<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#plen\">plen</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the linear region may spread across several pages  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flen\">flen</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, <a class=\"id\" href=\"#flen\">flen</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#poff\">poff</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spd_fill_page\">spd_fill_page</a>(<a class=\"id\" href=\"#spd\">spd</a>, <a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#flen\">flen</a>, <a class=\"id\" href=\"#poff\">poff</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#linear\">linear</a>, <a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__segment_seek\">__segment_seek</a>(&amp;<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#poff\">poff</a>, &amp;<a class=\"id\" href=\"#plen\">plen</a>, <a class=\"id\" href=\"#flen\">flen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#flen\">flen</a>;", 
"", 
"<span class=\"ts\"/>} while (*<a class=\"id\" href=\"#len\">len</a> && <a class=\"id\" href=\"#plen\">plen</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map linear and fragment data from the skb to spd. It reports failure if the</span>", 
"<span class=\"comment\"> * pipe is full or if we already spliced the requested length.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__skb_splice_bits\">__skb_splice_bits</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int *<a class=\"id\" href=\"#offset\">offset</a>, unsigned int *<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> *<a class=\"id\" href=\"#spd\">spd</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#seg\">seg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * map the linear part</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__splice_segment\">__splice_segment</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (unsigned long) <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> &amp; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#spd\">spd</a>, 1, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#pipe\">pipe</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then map the fragments</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#seg\">seg</a> = 0; <a class=\"id\" href=\"#seg\">seg</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#seg\">seg</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a> *<a class=\"id\" href=\"#f\">f</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#seg\">seg</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__splice_segment\">__splice_segment</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#spd\">spd</a>, 0, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#pipe\">pipe</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map data from the skb to a pipe. Should handle both the linear part,</span>", 
"<span class=\"comment\"> * the fragments, and the frag list. It does NOT handle frag lists within</span>", 
"<span class=\"comment\"> * the frag list, if such a thing exists. We'd probably need to recurse to</span>", 
"<span class=\"comment\"> * handle that cleanly.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#skb_splice_bits\">skb_splice_bits</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, unsigned int <a class=\"id\" href=\"#tlen\">tlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partial_page\">partial_page</a> <a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> <a class=\"id\" href=\"#spd\">spd</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#partial\">partial</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#sock_pipe_buf_ops\">sock_pipe_buf_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#spd_release\">spd_release</a> = <a class=\"id\" href=\"#sock_spd_release\">sock_spd_release</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#frag_iter\">frag_iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#splice_grow_spd\">splice_grow_spd</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __skb_splice_bits() only fails if the output has no room left,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so no point in going over the frag_list for the error case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__skb_splice_bits\">__skb_splice_bits</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, &amp;<a class=\"id\" href=\"#tlen\">tlen</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>, <a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#tlen\">tlen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now see if we have a frag_list to map</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_walk_frags\">skb_walk_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#frag_iter\">frag_iter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tlen\">tlen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__skb_splice_bits\">__skb_splice_bits</a>(<a class=\"id\" href=\"#frag_iter\">frag_iter</a>, <a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, &amp;<a class=\"id\" href=\"#tlen\">tlen</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>, <a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Drop the socket lock, otherwise we have reverse</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * locking dependencies between sk_lock and i_mutex</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * here as compared to sendfile(). We enter here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with the socket lock held, and splice_to_pipe() will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * grab the pipe inode lock. For sendfile() emulation,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we call into -&gt;sendpage() with the i_mutex lock held</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and networking will grab the socket lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#splice_to_pipe\">splice_to_pipe</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_sock\">lock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#splice_shrink_spd\">splice_shrink_spd</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_store_bits - store bits from kernel buffer to skb</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: destination buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offset: offset in destination</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@from: source buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: number of bytes to copy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copy the specified number of bytes from the source buffer to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>destination skb.  This function handles all the messy bits of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>traversing fragment lists and such.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#skb_store_bits\">skb_store_bits</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#offset\">offset</a>, const void *<a class=\"id\" href=\"#from\">from</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#frag_iter\">frag_iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#copy\">copy</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &gt; (int)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fault\">fault</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_to_linear_data_offset\">skb_copy_to_linear_data_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a> *<a class=\"id\" href=\"#frag\">frag</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#kmap_skb_frag\">kmap_skb_frag</a>(<a class=\"id\" href=\"#frag\">frag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a> + <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_skb_frag\">kunmap_skb_frag</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_walk_frags\">skb_walk_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#frag_iter\">frag_iter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#frag_iter\">frag_iter</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_store_bits\">skb_store_bits</a>(<a class=\"id\" href=\"#frag_iter\">frag_iter</a>, <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fault\">fault</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fault\">fault</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_store_bits\">skb_store_bits</a>);", 
"", 
"<span class=\"comment\">/* Checksum skb data. */</span>", 
"", 
"<a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#skb_checksum\">skb_checksum</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#frag_iter\">frag_iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Checksum header. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_partial\">csum_partial</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#copy\">copy</a>, <a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a><span class=\"ts\"/>= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum2\">csum2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a> *<a class=\"id\" href=\"#frag\">frag</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#kmap_skb_frag\">kmap_skb_frag</a>(<a class=\"id\" href=\"#frag\">frag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum2\">csum2</a> = <a class=\"id\" href=\"#csum_partial\">csum_partial</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#copy\">copy</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_skb_frag\">kunmap_skb_frag</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_block_add\">csum_block_add</a>(<a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#csum2\">csum2</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a>    += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_walk_frags\">skb_walk_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#frag_iter\">frag_iter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#frag_iter\">frag_iter</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum2\">csum2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum2\">csum2</a> = <a class=\"id\" href=\"#skb_checksum\">skb_checksum</a>(<a class=\"id\" href=\"#frag_iter\">frag_iter</a>, <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#copy\">copy</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_block_add\">csum_block_add</a>(<a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#csum2\">csum2</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a>    += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_checksum\">skb_checksum</a>);", 
"", 
"<span class=\"comment\">/* Both of above in one bottle. */</span>", 
"", 
"<a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#skb_copy_and_csum_bits\">skb_copy_and_csum_bits</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#to\">to</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#frag_iter\">frag_iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy header. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_partial_copy_nocheck\">csum_partial_copy_nocheck</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#copy\">copy</a>, <a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>     += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a><span class=\"ts\"/>= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum2\">csum2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a> *<a class=\"id\" href=\"#frag\">frag</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#kmap_skb_frag\">kmap_skb_frag</a>(<a class=\"id\" href=\"#frag\">frag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum2\">csum2</a> = <a class=\"id\" href=\"#csum_partial_copy_nocheck\">csum_partial_copy_nocheck</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#copy\">copy</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_skb_frag\">kunmap_skb_frag</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_block_add\">csum_block_add</a>(<a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#csum2\">csum2</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>     += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a>    += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_walk_frags\">skb_walk_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#frag_iter\">frag_iter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum2\">csum2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#frag_iter\">frag_iter</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum2\">csum2</a> = <a class=\"id\" href=\"#skb_copy_and_csum_bits\">skb_copy_and_csum_bits</a>(<a class=\"id\" href=\"#frag_iter\">frag_iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#copy\">copy</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_block_add\">csum_block_add</a>(<a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#csum2\">csum2</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>     += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a>    += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_copy_and_csum_bits\">skb_copy_and_csum_bits</a>);", 
"", 
"void <a class=\"id\" href=\"#skb_copy_and_csum_dev\">skb_copy_and_csum_dev</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#csstart\">csstart</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csstart\">csstart</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_start\">csum_start</a> - <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csstart\">csstart</a> = <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#csstart\">csstart</a> &gt; <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_from_linear_data\">skb_copy_from_linear_data</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#csstart\">csstart</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#csstart\">csstart</a> != <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#skb_copy_and_csum_bits\">skb_copy_and_csum_bits</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#csstart\">csstart</a>, <a class=\"id\" href=\"#to\">to</a> + <a class=\"id\" href=\"#csstart\">csstart</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#csstart\">csstart</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#csstuff\">csstuff</a> = <a class=\"id\" href=\"#csstart\">csstart</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_offset\">csum_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*((<a class=\"id\" href=\"#__sum16\">__sum16</a> *)(<a class=\"id\" href=\"#to\">to</a> + <a class=\"id\" href=\"#csstuff\">csstuff</a>)) = <a class=\"id\" href=\"#csum_fold\">csum_fold</a>(<a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_copy_and_csum_dev\">skb_copy_and_csum_dev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_dequeue - remove from the head of the queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to dequeue from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove the head of the list. The list lock is taken so the function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>may be used safely with other locking list functions. The head item is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returned or %NULL if the list is empty.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#__skb_dequeue\">__skb_dequeue</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_dequeue_tail - remove from the tail of the queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to dequeue from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove the tail of the list. The list lock is taken so the function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>may be used safely with other locking list functions. The tail item is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returned or %NULL if the list is empty.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_dequeue_tail\">skb_dequeue_tail</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#__skb_dequeue_tail\">__skb_dequeue_tail</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_dequeue_tail\">skb_dequeue_tail</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_purge - empty a list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to empty</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Delete all buffers on an &amp;sk_buff list. Each buffer is removed from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the list and one reference dropped. This function takes the list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>lock and is atomic with respect to other list locking functions.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_queue_purge\">skb_queue_purge</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(<a class=\"id\" href=\"#list\">list</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_queue_purge\">skb_queue_purge</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_head - queue a buffer at the list head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newsk: buffer to queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Queue a buffer at the start of the list. This function takes the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>list lock and can be used safely with other locking &amp;sk_buff functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>safely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A buffer cannot be placed on two lists at the same time.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_queue_head\">skb_queue_head</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_head\">__skb_queue_head</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#newsk\">newsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_queue_head\">skb_queue_head</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_tail - queue a buffer at the list tail</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newsk: buffer to queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Queue a buffer at the tail of the list. This function takes the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>list lock and can be used safely with other locking &amp;sk_buff functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>safely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A buffer cannot be placed on two lists at the same time.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_tail\">__skb_queue_tail</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#newsk\">newsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_unlink<span class=\"ts\"/>-<span class=\"ts\"/>remove a buffer from a list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to remove</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove a packet from a list. The list locks are taken and this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function is atomic with respect to other list locked calls</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>You must know what list the SKB is on.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_unlink\">skb_unlink</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_unlink\">skb_unlink</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_append<span class=\"ts\"/>-<span class=\"ts\"/>append a buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old: buffer to insert after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newsk: buffer to insert</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Place a packet after a given packet in a list. The list locks are taken</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and this function is atomic with respect to other list locked calls.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A buffer cannot be placed on two lists at the same time.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_append\">skb_append</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>, struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_after\">__skb_queue_after</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#newsk\">newsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_append\">skb_append</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_insert<span class=\"ts\"/>-<span class=\"ts\"/>insert a buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old: buffer to insert before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newsk: buffer to insert</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Place a packet before a given packet in a list. The list locks are</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>taken and this function is atomic with respect to other list locked</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>calls.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A buffer cannot be placed on two lists at the same time.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_insert\">skb_insert</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>, struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_insert\">__skb_insert</a>(<a class=\"id\" href=\"#newsk\">newsk</a>, <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_insert\">skb_insert</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_split_inside_header\">skb_split_inside_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>* <a class=\"id\" href=\"#skb1\">skb1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>, const int <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_from_linear_data_offset\">skb_copy_from_linear_data_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb1\">skb1</a>, <a class=\"id\" href=\"#pos\">pos</a> - <a class=\"id\" href=\"#len\">len</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pos\">pos</a> - <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* And move data appendix as is. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb1\">skb1</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb1\">skb1</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>  = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb1\">skb1</a>-><a class=\"id\" href=\"#data_len\">data_len</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb1\">skb1</a>-><a class=\"id\" href=\"#len\">len</a><span class=\"ts\"/><span class=\"ts\"/>   += <a class=\"id\" href=\"#skb1\">skb1</a>-><a class=\"id\" href=\"#data_len\">data_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a><span class=\"ts\"/><span class=\"ts\"/>   = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_set_tail_pointer\">skb_set_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_split_no_header\">skb_split_no_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>* <a class=\"id\" href=\"#skb1\">skb1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#k\">k</a> = 0;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#nfrags\">nfrags</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb1\">skb1</a>-><a class=\"id\" href=\"#len\">len</a><span class=\"ts\"/><span class=\"ts\"/>  = <a class=\"id\" href=\"#skb1\">skb1</a>-><a class=\"id\" href=\"#data_len\">data_len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a><span class=\"ts\"/><span class=\"ts\"/>  = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a><span class=\"ts\"/><span class=\"ts\"/>  = <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nfrags\">nfrags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb1\">skb1</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#k\">k</a>] = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Split frag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We have two variants in this case:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 1. Move all the frag to the second</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    part, if it is possible. F.e.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    this approach is mandatory for TUX,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    where splitting is expensive.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 2. Split is accurately. We make this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb1\">skb1</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#page_offset\">page_offset</a> += <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb1\">skb1</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a><span class=\"ts\"/>= <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb1\">skb1</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_split - Split fragmented skb to two parts at length len.</span>", 
"<span class=\"comment\"> * @skb: the buffer to split</span>", 
"<span class=\"comment\"> * @skb1: the buffer to receive the second part</span>", 
"<span class=\"comment\"> * @len: new length for skb</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_split\">skb_split</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb1\">skb1</a>, const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#pos\">pos</a>)<span class=\"ts\"/><span class=\"comment\">/* Split line is inside header. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_split_inside_header\">skb_split_inside_header</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb1\">skb1</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Second chunk has no header, nothing to copy. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_split_no_header\">skb_split_no_header</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb1\">skb1</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_split\">skb_split</a>);", 
"", 
"<span class=\"comment\">/* Shifting from/to a cloned skb is a no-go.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller cannot keep skb_shinfo related pointers past calling here!</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#skb_prepare_for_shift\">skb_prepare_for_shift</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) && <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_shift - Shifts paged data partially from skb to another</span>", 
"<span class=\"comment\"> * @tgt: buffer into which tail data gets added</span>", 
"<span class=\"comment\"> * @skb: buffer from which the paged data comes from</span>", 
"<span class=\"comment\"> * @shiftlen: shift up to this many bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempts to shift up to shiftlen worth of bytes, which may be less than</span>", 
"<span class=\"comment\"> * the length of the skb, from tgt to skb. Returns number bytes shifted.</span>", 
"<span class=\"comment\"> * It's up to caller to free skb if everything was shifted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @tgt runs out of frags, the whole operation is aborted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Skb cannot include anything else but paged data while tgt is allowed</span>", 
"<span class=\"comment\"> * to have non-paged data as well.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO: full sized shift could be optimized but that would need</span>", 
"<span class=\"comment\"> * specialized skb free'er to handle frags without up-to-date nr_frags.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#skb_shift\">skb_shift</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tgt\">tgt</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#shiftlen\">shiftlen</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#merge\">merge</a>, <a class=\"id\" href=\"#todo\">todo</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_frag_struct\">skb_frag_struct</a> *<a class=\"id\" href=\"#fragfrom\">fragfrom</a>, *<a class=\"id\" href=\"#fragto\">fragto</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#shiftlen\">shiftlen</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>));<span class=\"ts\"/><span class=\"comment\">/* Would corrupt stream */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#todo\">todo</a> = <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#tgt\">tgt</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fragfrom\">fragfrom</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#from\">from</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Actual merge is delayed until the point when we know we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * commit all, so that we don't have to undo partial changes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#to\">to</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#skb_can_coalesce\">skb_can_coalesce</a>(<a class=\"id\" href=\"#tgt\">tgt</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#merge\">merge</a> = -1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#merge\">merge</a> = <a class=\"id\" href=\"#to\">to</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#todo\">todo</a> -= <a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#todo\">todo</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_prepare_for_shift\">skb_prepare_for_shift</a>(<a class=\"id\" href=\"#skb\">skb</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#skb_prepare_for_shift\">skb_prepare_for_shift</a>(<a class=\"id\" href=\"#tgt\">tgt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* All previous frag pointers might be stale! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragfrom\">fragfrom</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#from\">from</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragto\">fragto</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#tgt\">tgt</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#merge\">merge</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragto\">fragto</a>-><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a> += <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#onlymerged\">onlymerged</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip full, not-fitting skb to avoid expensive operations */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#shiftlen\">shiftlen</a> == <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> - <a class=\"id\" href=\"#from\">from</a>) &gt; (<a class=\"id\" href=\"#MAX_SKB_FRAGS\">MAX_SKB_FRAGS</a> - <a class=\"id\" href=\"#to\">to</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_prepare_for_shift\">skb_prepare_for_shift</a>(<a class=\"id\" href=\"#skb\">skb</a>) || <a class=\"id\" href=\"#skb_prepare_for_shift\">skb_prepare_for_shift</a>(<a class=\"id\" href=\"#tgt\">tgt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#todo\">todo</a> &gt; 0) && (<a class=\"id\" href=\"#from\">from</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a> == <a class=\"id\" href=\"#MAX_SKB_FRAGS\">MAX_SKB_FRAGS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragfrom\">fragfrom</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#from\">from</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragto\">fragto</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#tgt\">tgt</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#to\">to</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#todo\">todo</a> >= <a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fragto\">fragto</a> = *<a class=\"id\" href=\"#fragfrom\">fragfrom</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#todo\">todo</a> -= <a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragto\">fragto</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragto\">fragto</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a> = <a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragto\">fragto</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#todo\">todo</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a> += <a class=\"id\" href=\"#todo\">todo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#todo\">todo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#todo\">todo</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ready to \"commit\" this state change to tgt */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#tgt\">tgt</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#to\">to</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#merge\">merge</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragfrom\">fragfrom</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragto\">fragto</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#tgt\">tgt</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#merge\">merge</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fragto\">fragto</a>-><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#fragfrom\">fragfrom</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reposition in the original skb */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#from\">from</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#to\">to</a>++] = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#from\">from</a>++];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#to\">to</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#todo\">todo</a> &gt; 0 && !<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>);", 
"", 
"<a class=\"id\" href=\"#onlymerged\">onlymerged</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Most likely the tgt won't ever need its checksum anymore, skb on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the other hand might need it if it needs to be resent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Yak, is it really working this way? Some helper please? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a> -= <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a> -= <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#data_len\">data_len</a> += <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#truesize\">truesize</a> += <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#shiftlen\">shiftlen</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_prepare_seq_read - Prepare a sequential read of skb data</span>", 
"<span class=\"comment\"> * @skb: the buffer to read</span>", 
"<span class=\"comment\"> * @from: lower offset of data to be read</span>", 
"<span class=\"comment\"> * @to: upper offset of data to be read</span>", 
"<span class=\"comment\"> * @st: state variable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initializes the specified state variable. Must be called before</span>", 
"<span class=\"comment\"> * invoking skb_seq_read() for the first time.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_prepare_seq_read\">skb_prepare_seq_read</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#to\">to</a>, struct <a class=\"id\" href=\"#skb_seq_state\">skb_seq_state</a> *<a class=\"id\" href=\"#st\">st</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#lower_offset\">lower_offset</a> = <a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#upper_offset\">upper_offset</a> = <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#root_skb\">root_skb</a> = <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#cur_skb\">cur_skb</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_idx\">frag_idx</a> = <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#stepped_offset\">stepped_offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_prepare_seq_read\">skb_prepare_seq_read</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_seq_read - Sequentially read skb data</span>", 
"<span class=\"comment\"> * @consumed: number of bytes consumed by the caller so far</span>", 
"<span class=\"comment\"> * @data: destination pointer for data to be returned</span>", 
"<span class=\"comment\"> * @st: state variable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads a block of skb data at &amp;consumed relative to the</span>", 
"<span class=\"comment\"> * lower offset specified to skb_prepare_seq_read(). Assigns</span>", 
"<span class=\"comment\"> * the head of the data block to &amp;data and returns the length</span>", 
"<span class=\"comment\"> * of the block or 0 if the end of the skb data or the upper</span>", 
"<span class=\"comment\"> * offset has been reached.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller is not required to consume all of the data</span>", 
"<span class=\"comment\"> * returned, i.e. &amp;consumed is typically set to the number</span>", 
"<span class=\"comment\"> * of bytes already consumed and the next call to</span>", 
"<span class=\"comment\"> * skb_seq_read() will return the remaining part of the block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note 1: The size of each block of data returned can be arbitary,</span>", 
"<span class=\"comment\"> *       this limitation is the cost for zerocopy seqeuental</span>", 
"<span class=\"comment\"> *       reads of potentially non linear data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note 2: Fragment lists within fragments are not implemented</span>", 
"<span class=\"comment\"> *       at the moment, state-&gt;root_skb could be replaced with</span>", 
"<span class=\"comment\"> *       a stack for this purpose.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#skb_seq_read\">skb_seq_read</a>(unsigned int <a class=\"id\" href=\"#consumed\">consumed</a>, const <a class=\"id\" href=\"#u8\">u8</a> **<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#skb_seq_state\">skb_seq_state</a> *<a class=\"id\" href=\"#st\">st</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#block_limit\">block_limit</a>, <a class=\"id\" href=\"#abs_offset\">abs_offset</a> = <a class=\"id\" href=\"#consumed\">consumed</a> + <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#lower_offset\">lower_offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a> *<a class=\"id\" href=\"#frag\">frag</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#abs_offset\">abs_offset</a> >= <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#upper_offset\">upper_offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#next_skb\">next_skb</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_limit\">block_limit</a> = <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#cur_skb\">cur_skb</a>) + <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#stepped_offset\">stepped_offset</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#abs_offset\">abs_offset</a> &lt; <a class=\"id\" href=\"#block_limit\">block_limit</a> && !<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#cur_skb\">cur_skb</a>-><a class=\"id\" href=\"#data\">data</a> + (<a class=\"id\" href=\"#abs_offset\">abs_offset</a> - <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#stepped_offset\">stepped_offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#block_limit\">block_limit</a> - <a class=\"id\" href=\"#abs_offset\">abs_offset</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_idx\">frag_idx</a> == 0 && !<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#stepped_offset\">stepped_offset</a> += <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#cur_skb\">cur_skb</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_idx\">frag_idx</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#cur_skb\">cur_skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#cur_skb\">cur_skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_idx\">frag_idx</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_limit\">block_limit</a> = <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#stepped_offset\">stepped_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#abs_offset\">abs_offset</a> &lt; <a class=\"id\" href=\"#block_limit\">block_limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a> = <a class=\"id\" href=\"#kmap_skb_frag\">kmap_skb_frag</a>(<a class=\"id\" href=\"#frag\">frag</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a> = (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a> + <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#abs_offset\">abs_offset</a> - <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#stepped_offset\">stepped_offset</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#block_limit\">block_limit</a> - <a class=\"id\" href=\"#abs_offset\">abs_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_skb_frag\">kunmap_skb_frag</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_idx\">frag_idx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#stepped_offset\">stepped_offset</a> += <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_skb_frag\">kunmap_skb_frag</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_data\">frag_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#root_skb\">root_skb</a> == <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#cur_skb\">cur_skb</a> && <a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#root_skb\">root_skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#cur_skb\">cur_skb</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#root_skb\">root_skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#frag_idx\">frag_idx</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_skb\">next_skb</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#cur_skb\">cur_skb</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
];
xr_frag_insert('l/e1/db94d530c28bcce658ae0268dd5412ed0f1915.xr', __xr_tmp);
