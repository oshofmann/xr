var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_ftrace_func\">ftrace_update_ftrace_func</a>(<a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a>);", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#command\">command</a> &amp; <a class=\"id\" href=\"#FTRACE_START_FUNC_RET\">FTRACE_START_FUNC_RET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_enable_ftrace_graph_caller\">ftrace_enable_ftrace_graph_caller</a>();", 
"<span class=\"ts\"/>else if (*<a class=\"id\" href=\"#command\">command</a> &amp; <a class=\"id\" href=\"#FTRACE_STOP_FUNC_RET\">FTRACE_STOP_FUNC_RET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_disable_ftrace_graph_caller\">ftrace_disable_ftrace_graph_caller</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_run_update_code\">ftrace_run_update_code</a>(int <a class=\"id\" href=\"#command\">command</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_arch_code_modify_prepare\">ftrace_arch_code_modify_prepare</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_WARN_ON\">FTRACE_WARN_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stop_machine\">stop_machine</a>(<a class=\"id\" href=\"#__ftrace_modify_code\">__ftrace_modify_code</a>, &amp;<a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_arch_code_modify_post_process\">ftrace_arch_code_modify_post_process</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_WARN_ON\">FTRACE_WARN_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ftrace_func_t\">ftrace_func_t</a> <a class=\"id\" href=\"#saved_ftrace_func\">saved_ftrace_func</a>;", 
"static int <a class=\"id\" href=\"#ftrace_start_up\">ftrace_start_up</a>;", 
"", 
"static void <a class=\"id\" href=\"#ftrace_startup_enable\">ftrace_startup_enable</a>(int <a class=\"id\" href=\"#command\">command</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#saved_ftrace_func\">saved_ftrace_func</a> != <a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saved_ftrace_func\">saved_ftrace_func</a> = <a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#command\">command</a> |= <a class=\"id\" href=\"#FTRACE_UPDATE_TRACE_FUNC\">FTRACE_UPDATE_TRACE_FUNC</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#command\">command</a> || !<a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_run_update_code\">ftrace_run_update_code</a>(<a class=\"id\" href=\"#command\">command</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_startup\">ftrace_startup</a>(int <a class=\"id\" href=\"#command\">command</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_start_up\">ftrace_start_up</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#command\">command</a> |= <a class=\"id\" href=\"#FTRACE_ENABLE_CALLS\">FTRACE_ENABLE_CALLS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_startup_enable\">ftrace_startup_enable</a>(<a class=\"id\" href=\"#command\">command</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_shutdown\">ftrace_shutdown</a>(int <a class=\"id\" href=\"#command\">command</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_start_up\">ftrace_start_up</a>--;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Just warn in case of unbalance, no need to kill ftrace, it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * critical but the ftrace_call callers may be never nopped again after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * further ftrace uses.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ftrace_start_up\">ftrace_start_up</a> &lt; 0);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_start_up\">ftrace_start_up</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#command\">command</a> |= <a class=\"id\" href=\"#FTRACE_DISABLE_CALLS\">FTRACE_DISABLE_CALLS</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#saved_ftrace_func\">saved_ftrace_func</a> != <a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saved_ftrace_func\">saved_ftrace_func</a> = <a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#command\">command</a> |= <a class=\"id\" href=\"#FTRACE_UPDATE_TRACE_FUNC\">FTRACE_UPDATE_TRACE_FUNC</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#command\">command</a> || !<a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_run_update_code\">ftrace_run_update_code</a>(<a class=\"id\" href=\"#command\">command</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_startup_sysctl\">ftrace_startup_sysctl</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#FTRACE_ENABLE_MCOUNT\">FTRACE_ENABLE_MCOUNT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Force update next time */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_ftrace_func\">saved_ftrace_func</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* ftrace_start_up is true if we want ftrace running */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_start_up\">ftrace_start_up</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#command\">command</a> |= <a class=\"id\" href=\"#FTRACE_ENABLE_CALLS\">FTRACE_ENABLE_CALLS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_run_update_code\">ftrace_run_update_code</a>(<a class=\"id\" href=\"#command\">command</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_shutdown_sysctl\">ftrace_shutdown_sysctl</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#FTRACE_DISABLE_MCOUNT\">FTRACE_DISABLE_MCOUNT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ftrace_start_up is true if ftrace is running */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_start_up\">ftrace_start_up</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#command\">command</a> |= <a class=\"id\" href=\"#FTRACE_DISABLE_CALLS\">FTRACE_DISABLE_CALLS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_run_update_code\">ftrace_run_update_code</a>(<a class=\"id\" href=\"#command\">command</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_time\">ftrace_update_time</a>;", 
"static unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_cnt\">ftrace_update_cnt</a>;", 
"unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_tot_cnt\">ftrace_update_tot_cnt</a>;", 
"", 
"static int <a class=\"id\" href=\"#ftrace_update_code\">ftrace_update_code</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#stop\">stop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ftrace_now\">ftrace_now</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_cnt\">ftrace_update_cnt</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ftrace_new_addrs\">ftrace_new_addrs</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If something went wrong, bail without enabling anything */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ftrace_new_addrs\">ftrace_new_addrs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_new_addrs\">ftrace_new_addrs</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#newlist\">newlist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0L;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do the initial record convertion from mcount jump</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to the NOP instructions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_code_disable\">ftrace_code_disable</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_free_rec\">ftrace_free_rec</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FTRACE_FL_CONVERTED\">FTRACE_FL_CONVERTED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_cnt\">ftrace_update_cnt</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the tracing is enabled, go ahead and enable the record.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The reason not to enable the record immediatelly is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inherent check of ftrace_make_nop/ftrace_make_call for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * correct previous instructions.  Making first the NOP</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * conversion puts the module to the correct state, thus</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * passing the ftrace_make_call check.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_start_up\">ftrace_start_up</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#failed\">failed</a> = <a class=\"id\" href=\"#__ftrace_replace_code\">__ftrace_replace_code</a>(<a class=\"id\" href=\"#p\">p</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#failed\">failed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_bug\">ftrace_bug</a>(<a class=\"id\" href=\"#failed\">failed</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_free_rec\">ftrace_free_rec</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stop\">stop</a> = <a class=\"id\" href=\"#ftrace_now\">ftrace_now</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_time\">ftrace_update_time</a> = <a class=\"id\" href=\"#stop\">stop</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_tot_cnt\">ftrace_update_tot_cnt</a> += <a class=\"id\" href=\"#ftrace_update_cnt\">ftrace_update_cnt</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ftrace_dyn_table_alloc\">ftrace_dyn_table_alloc</a>(unsigned long <a class=\"id\" href=\"#num_to_init\">num_to_init</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a> *<a class=\"id\" href=\"#pg\">pg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate a few pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_pages_start\">ftrace_pages_start</a> = (void *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_pages_start\">ftrace_pages_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate a few more pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: have some parser search vmlinux before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   final linking to find all calls to ftrace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   Then we can:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    a) know how many pages to allocate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     and/or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    b) set up the table then.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  The dynamic code is still necessary for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  modules.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#ftrace_pages\">ftrace_pages</a> = <a class=\"id\" href=\"#ftrace_pages_start\">ftrace_pages_start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#num_to_init\">num_to_init</a> / <a class=\"id\" href=\"#ENTRIES_PER_PAGE\">ENTRIES_PER_PAGE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"ftrace: allocating %ld entries in %d pages\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_to_init\">num_to_init</a>, <a class=\"id\" href=\"#cnt\">cnt</a> + 1);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#cnt\">cnt</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a> = (void *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we fail, we'll try later anyway */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_ITER_FILTER\">FTRACE_ITER_FILTER</a><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_ITER_NOTRACE\">FTRACE_ITER_NOTRACE</a><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_ITER_FAILURES\">FTRACE_ITER_FAILURES</a><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_ITER_PRINTALL\">FTRACE_ITER_PRINTALL</a><span class=\"ts\"/>= (1 << 3),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_ITER_HASH\">FTRACE_ITER_HASH</a><span class=\"ts\"/>= (1 << 4),", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTRACE_BUFF_MAX\">FTRACE_BUFF_MAX</a> (<a class=\"id\" href=\"#KSYM_SYMBOL_LEN\">KSYM_SYMBOL_LEN</a>+4) <span class=\"comment\">/* room for wildcards */</span>", 
"", 
"struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a><span class=\"ts\"/>*<a class=\"id\" href=\"#pg\">pg</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hidx\">hidx</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_parser\">trace_parser</a><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>;", 
"};", 
"", 
"static void *", 
"<a class=\"id\" href=\"#t_hash_next\">t_hash_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#hnd\">hnd</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhd\">hhd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_HASH\">FTRACE_ITER_HASH</a>));", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#pos\">pos</a>)++;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#hidx\">hidx</a> >= <a class=\"id\" href=\"#FTRACE_FUNC_HASHSIZE\">FTRACE_FUNC_HASHSIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hhd\">hhd</a> = &amp;<a class=\"id\" href=\"#ftrace_func_hash\">ftrace_func_hash</a>[<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#hidx\">hidx</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(<a class=\"id\" href=\"#hhd\">hhd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#hidx\">hidx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hnd\">hnd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hnd\">hnd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hnd\">hnd</a> = <a class=\"id\" href=\"#hhd\">hhd</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hnd\">hnd</a> = <a class=\"id\" href=\"#hnd\">hnd</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hnd\">hnd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#hidx\">hidx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hnd\">hnd</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#t_hash_start\">t_hash_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_HASH\">FTRACE_ITER_HASH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FTRACE_ITER_HASH\">FTRACE_ITER_HASH</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#hidx\">hidx</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#l\">l</a> = 0; <a class=\"id\" href=\"#l\">l</a> <= *<a class=\"id\" href=\"#pos\">pos</a>; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#t_hash_next\">t_hash_next</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#t_hash_show\">t_hash_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_func_probe\">ftrace_func_probe</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#hnd\">hnd</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#hnd\">hnd</a>, struct <a class=\"id\" href=\"#ftrace_func_probe\">ftrace_func_probe</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#print\">print</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#print\">print</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%ps:%ps\", (void *)<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, (void *)<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#func\">func</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \":%p\", <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void *", 
"<a class=\"id\" href=\"#t_next\">t_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_HASH\">FTRACE_ITER_HASH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t_hash_next\">t_hash_next</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#pos\">pos</a>)++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_PRINTALL\">FTRACE_ITER_PRINTALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#index\">index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#records\">records</a>[<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#idx\">idx</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FREE\">FTRACE_FL_FREE</a>) ||", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_FAILURES\">FTRACE_ITER_FAILURES</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FAILED\">FTRACE_FL_FAILED</a>)) ||", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_FAILURES\">FTRACE_ITER_FAILURES</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     !(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FAILED\">FTRACE_FL_FAILED</a>)) ||", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_FILTER\">FTRACE_ITER_FILTER</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     !(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FILTER\">FTRACE_FL_FILTER</a>)) ||", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_NOTRACE\">FTRACE_ITER_NOTRACE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     !(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_NOTRACE\">FTRACE_FL_NOTRACE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rec\">rec</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#t_start\">t_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For set_ftrace_filter reading, if we have the filter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * off, we can short cut and just print out that all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * functions are enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_FILTER\">FTRACE_ITER_FILTER</a> && !<a class=\"id\" href=\"#ftrace_filtered\">ftrace_filtered</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t_hash_start\">t_hash_start</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FTRACE_ITER_PRINTALL\">FTRACE_ITER_PRINTALL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reset in case of seek/pread */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#FTRACE_ITER_HASH\">FTRACE_ITER_HASH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_HASH\">FTRACE_ITER_HASH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t_hash_start\">t_hash_start</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#ftrace_pages_start\">ftrace_pages_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#l\">l</a> = 0; <a class=\"id\" href=\"#l\">l</a> <= *<a class=\"id\" href=\"#pos\">pos</a>; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#t_next\">t_next</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a> && <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_FILTER\">FTRACE_ITER_FILTER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t_hash_start\">t_hash_start</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#t_stop\">t_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#t_show\">t_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_HASH\">FTRACE_ITER_HASH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t_hash_show\">t_hash_show</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_ITER_PRINTALL\">FTRACE_ITER_PRINTALL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"#### all functions enabled ####\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rec\">rec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%ps\\n\", (void *)<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#show_ftrace_seq_ops\">show_ftrace_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#t_start\">t_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#t_next\">t_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a> = <a class=\"id\" href=\"#t_stop\">t_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#t_show\">t_show</a>,", 
"};", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_avail_open\">ftrace_avail_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#iter\">iter</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#ftrace_pages_start\">ftrace_pages_start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#show_ftrace_seq_ops\">show_ftrace_seq_ops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_failures_open\">ftrace_failures_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_avail_open\">ftrace_avail_open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = (struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = (struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *)<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#FTRACE_ITER_FAILURES\">FTRACE_ITER_FAILURES</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#ftrace_filter_reset\">ftrace_filter_reset</a>(int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a> *<a class=\"id\" href=\"#pg\">pg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#enable\">enable</a> ? <a class=\"id\" href=\"#FTRACE_FL_FILTER\">FTRACE_FL_FILTER</a> : <a class=\"id\" href=\"#FTRACE_FL_NOTRACE\">FTRACE_FL_NOTRACE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_filtered\">ftrace_filtered</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_for_each_ftrace_rec\">do_for_each_ftrace_rec</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#rec\">rec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FAILED\">FTRACE_FL_FAILED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_for_each_ftrace_rec\">while_for_each_ftrace_rec</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_regex_open\">ftrace_regex_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_iterator\">ftrace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#iter\">iter</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_parser_get_init\">trace_parser_get_init</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#parser\">parser</a>, <a class=\"id\" href=\"#FTRACE_BUFF_MAX\">FTRACE_BUFF_MAX</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_regex_lock\">ftrace_regex_lock</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_TRUNC\">O_TRUNC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_filter_reset\">ftrace_filter_reset</a>(<a class=\"id\" href=\"#enable\">enable</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#ftrace_pages_start\">ftrace_pages_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#enable\">enable</a> ? <a class=\"id\" href=\"#FTRACE_ITER_FILTER\">FTRACE_ITER_FILTER</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_ITER_NOTRACE\">FTRACE_ITER_NOTRACE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#show_ftrace_seq_ops\">show_ftrace_seq_ops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_parser_put\">trace_parser_put</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#parser\">parser</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_regex_lock\">ftrace_regex_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_filter_open\">ftrace_filter_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_regex_open\">ftrace_regex_open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>, 1);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_notrace_open\">ftrace_notrace_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_regex_open\">ftrace_regex_open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#loff_t\">loff_t</a>", 
"<a class=\"id\" href=\"#ftrace_regex_lseek\">ftrace_regex_lseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#origin\">origin</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#origin\">origin</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> = <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ftrace_match\">ftrace_match</a>(char *<a class=\"id\" href=\"#str\">str</a>, char *<a class=\"id\" href=\"#regex\">regex</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#matched\">matched</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slen\">slen</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MATCH_FULL\">MATCH_FULL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regex\">regex</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#matched\">matched</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MATCH_FRONT_ONLY\">MATCH_FRONT_ONLY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regex\">regex</a>, <a class=\"id\" href=\"#len\">len</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#matched\">matched</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MATCH_MIDDLE_ONLY\">MATCH_MIDDLE_ONLY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regex\">regex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#matched\">matched</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MATCH_END_ONLY\">MATCH_END_ONLY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slen\">slen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slen\">slen</a> >= <a class=\"id\" href=\"#len\">len</a> && <a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#str\">str</a> + <a class=\"id\" href=\"#slen\">slen</a> - <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#regex\">regex</a>, <a class=\"id\" href=\"#len\">len</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#matched\">matched</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#matched\">matched</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_match_record\">ftrace_match_record</a>(struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>, char *<a class=\"id\" href=\"#regex\">regex</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#str\">str</a>[<a class=\"id\" href=\"#KSYM_SYMBOL_LEN\">KSYM_SYMBOL_LEN</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_match\">ftrace_match</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regex\">regex</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ftrace_match_records\">ftrace_match_records</a>(char *<a class=\"id\" href=\"#buff\">buff</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#search_len\">search_len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a> *<a class=\"id\" href=\"#pg\">pg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#search\">search</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#not\">not</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#enable\">enable</a> ? <a class=\"id\" href=\"#FTRACE_FL_FILTER\">FTRACE_FL_FILTER</a> : <a class=\"id\" href=\"#FTRACE_FL_NOTRACE\">FTRACE_FL_NOTRACE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#filter_parse_regex\">filter_parse_regex</a>(<a class=\"id\" href=\"#buff\">buff</a>, <a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#search\">search</a>, &amp;<a class=\"id\" href=\"#not\">not</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#search_len\">search_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#search\">search</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_for_each_ftrace_rec\">do_for_each_ftrace_rec</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#rec\">rec</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FAILED\">FTRACE_FL_FAILED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_match_record\">ftrace_match_record</a>(<a class=\"id\" href=\"#rec\">rec</a>, <a class=\"id\" href=\"#search\">search</a>, <a class=\"id\" href=\"#search_len\">search_len</a>, <a class=\"id\" href=\"#type\">type</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#not\">not</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only enable filtering if we have a function that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is filtered on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a> && (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FILTER\">FTRACE_FL_FILTER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_filtered\">ftrace_filtered</a> = 1;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_for_each_ftrace_rec\">while_for_each_ftrace_rec</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_match_module_record\">ftrace_match_module_record</a>(struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>, char *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char *<a class=\"id\" href=\"#regex\">regex</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#str\">str</a>[<a class=\"id\" href=\"#KSYM_SYMBOL_LEN\">KSYM_SYMBOL_LEN</a>];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#modname\">modname</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#str\">str</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#modname\">modname</a> || <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#mod\">mod</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* blank search means to match all funcs in the mod */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_match\">ftrace_match</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regex\">regex</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ftrace_match_module_records\">ftrace_match_module_records</a>(char *<a class=\"id\" href=\"#buff\">buff</a>, char *<a class=\"id\" href=\"#mod\">mod</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#search_len\">search_len</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a> *<a class=\"id\" href=\"#pg\">pg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MATCH_FULL\">MATCH_FULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#search\">search</a> = <a class=\"id\" href=\"#buff\">buff</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#not\">not</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#enable\">enable</a> ? <a class=\"id\" href=\"#FTRACE_FL_FILTER\">FTRACE_FL_FILTER</a> : <a class=\"id\" href=\"#FTRACE_FL_NOTRACE\">FTRACE_FL_NOTRACE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* blank or '*' mean the same */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#buff\">buff</a>, \"*\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a>[0] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* handle the case of 'dont filter this module' */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#buff\">buff</a>, \"!\") == 0 || <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#buff\">buff</a>, \"!*\") == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#not\">not</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#buff\">buff</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#filter_parse_regex\">filter_parse_regex</a>(<a class=\"id\" href=\"#buff\">buff</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#buff\">buff</a>), &amp;<a class=\"id\" href=\"#search\">search</a>, &amp;<a class=\"id\" href=\"#not\">not</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#search_len\">search_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#search\">search</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_for_each_ftrace_rec\">do_for_each_ftrace_rec</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#rec\">rec</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FAILED\">FTRACE_FL_FAILED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_match_module_record\">ftrace_match_module_record</a>(<a class=\"id\" href=\"#rec\">rec</a>, <a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#search\">search</a>, <a class=\"id\" href=\"#search_len\">search_len</a>, <a class=\"id\" href=\"#type\">type</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#not\">not</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a> && (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FILTER\">FTRACE_FL_FILTER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_filtered\">ftrace_filtered</a> = 1;", 
"", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_for_each_ftrace_rec\">while_for_each_ftrace_rec</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We register the module command as a template to show others how</span>", 
"<span class=\"comment\"> * to register the a command as well.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_mod_callback\">ftrace_mod_callback</a>(char *<a class=\"id\" href=\"#func\">func</a>, char *<a class=\"id\" href=\"#cmd\">cmd</a>, char *<a class=\"id\" href=\"#param\">param</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cmd == 'mod' because we only registered this func</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the 'mod' ftrace_func_command.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But if you register one func with multiple commands,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * you can tell which command was used by the cmd</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parameter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we must have a module name */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#param\">param</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, \":\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#mod\">mod</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_match_module_records\">ftrace_match_module_records</a>(<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#enable\">enable</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_func_command\">ftrace_func_command</a> <a class=\"id\" href=\"#ftrace_mod_cmd\">ftrace_mod_cmd</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"mod\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_mod_callback\">ftrace_mod_callback</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ftrace_mod_cmd_init\">ftrace_mod_cmd_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_ftrace_command\">register_ftrace_command</a>(&amp;<a class=\"id\" href=\"#ftrace_mod_cmd\">ftrace_mod_cmd</a>);", 
"}", 
"<a class=\"id\" href=\"#device_initcall\">device_initcall</a>(<a class=\"id\" href=\"#ftrace_mod_cmd_init\">ftrace_mod_cmd_init</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#function_trace_probe_call\">function_trace_probe_call</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_func_probe\">ftrace_func_probe</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhd\">hhd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#FTRACE_HASH_BITS\">FTRACE_HASH_BITS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hhd\">hhd</a> = &amp;<a class=\"id\" href=\"#ftrace_func_hash\">ftrace_func_hash</a>[<a class=\"id\" href=\"#key\">key</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(<a class=\"id\" href=\"#hhd\">hhd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable preemption for these calls to prevent a RCU grace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * period. This syncs the hash iteration and freeing of items</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the hash. rcu_read_lock is too dangerous here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#hhd\">hhd</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a> == <a class=\"id\" href=\"#ip\">ip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#parent_ip\">parent_ip</a>, &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> <a class=\"id\" href=\"#trace_probe_ops\">trace_probe_ops</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#function_trace_probe_call\">function_trace_probe_call</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#ftrace_probe_registered\">ftrace_probe_registered</a>;", 
"", 
"static void <a class=\"id\" href=\"#__enable_ftrace_function_probe\">__enable_ftrace_function_probe</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_probe_registered\">ftrace_probe_registered</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FTRACE_FUNC_HASHSIZE\">FTRACE_FUNC_HASHSIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhd\">hhd</a> = &amp;<a class=\"id\" href=\"#ftrace_func_hash\">ftrace_func_hash</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hhd\">hhd</a>-><a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Nothing registered? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#FTRACE_FUNC_HASHSIZE\">FTRACE_FUNC_HASHSIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__register_ftrace_function\">__register_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_probe_ops\">trace_probe_ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_startup\">ftrace_startup</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_probe_registered\">ftrace_probe_registered</a> = 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__disable_ftrace_function_probe\">__disable_ftrace_function_probe</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_probe_registered\">ftrace_probe_registered</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FTRACE_FUNC_HASHSIZE\">FTRACE_FUNC_HASHSIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhd\">hhd</a> = &amp;<a class=\"id\" href=\"#ftrace_func_hash\">ftrace_func_hash</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hhd\">hhd</a>-><a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no more funcs left */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unregister_ftrace_function\">__unregister_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_probe_ops\">trace_probe_ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_shutdown\">ftrace_shutdown</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_probe_registered\">ftrace_probe_registered</a> = 0;", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#ftrace_free_entry_rcu\">ftrace_free_entry_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rhp\">rhp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_func_probe\">ftrace_func_probe</a> *<a class=\"id\" href=\"#entry\">entry</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rhp\">rhp</a>, struct <a class=\"id\" href=\"#ftrace_func_probe\">ftrace_func_probe</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free\">free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free\">free</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"", 
"int", 
"<a class=\"id\" href=\"#register_ftrace_function_probe\">register_ftrace_function_probe</a>(char *<a class=\"id\" href=\"#glob\">glob</a>, struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_func_probe\">ftrace_func_probe</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a> *<a class=\"id\" href=\"#pg\">pg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#not\">not</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#search\">search</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#filter_parse_regex\">filter_parse_regex</a>(<a class=\"id\" href=\"#glob\">glob</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#glob\">glob</a>), &amp;<a class=\"id\" href=\"#search\">search</a>, &amp;<a class=\"id\" href=\"#not\">not</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#search\">search</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we do not support '!' for function probes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#not\">not</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_for_each_ftrace_rec\">do_for_each_ftrace_rec</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#rec\">rec</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FAILED\">FTRACE_FL_FAILED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_match_record\">ftrace_match_record</a>(<a class=\"id\" href=\"#rec\">rec</a>, <a class=\"id\" href=\"#search\">search</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#type\">type</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we did not process any, then return error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The caller might want to do something special</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for each function we find. We call the callback</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to give the caller an opportunity to do so.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#callback\">callback</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#callback\">callback</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#data\">data</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* caller does not like this func */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#FTRACE_HASH_BITS\">FTRACE_HASH_BITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#ftrace_func_hash\">ftrace_func_hash</a>[<a class=\"id\" href=\"#key\">key</a>]);", 
"", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_for_each_ftrace_rec\">while_for_each_ftrace_rec</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__enable_ftrace_function_probe\">__enable_ftrace_function_probe</a>();", 
"", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
];
xr_frag_insert('l/e1/f08b4cfec2ea0be43e316af6fe96990f69ea66.xr', __xr_tmp);
