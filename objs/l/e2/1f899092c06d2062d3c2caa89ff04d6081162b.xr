var __xr_tmp = [
"<span class=\"comment\"> * 'count' is the number of tasks holding a reference.</span>", 
"<span class=\"comment\"> * The count for each namespace, then, will be the number</span>", 
"<span class=\"comment\"> * of nsproxies pointing to it, not the number of tasks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The nsproxy is shared by tasks which share all namespaces.</span>", 
"<span class=\"comment\"> * As soon as a single namespace is cloned or unshared, the</span>", 
"<span class=\"comment\"> * nsproxy is copied.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#uts_ns\">uts_ns</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#pid_ns\">pid_ns</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> <span class=\"ts\"/>     *<a class=\"id\" href=\"#net_ns\">net_ns</a>;", 
"};", 
"extern struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> <a class=\"id\" href=\"#init_nsproxy\">init_nsproxy</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the namespaces access rules are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  1. only current task is allowed to change tsk-&gt;nsproxy pointer or</span>", 
"<span class=\"comment\"> *     any pointer on the nsproxy itself</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  2. when accessing (i.e. reading) current task's namespaces - no</span>", 
"<span class=\"comment\"> *     precautions should be taken - just dereference the pointers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  3. the access to other task namespaces is performed like this</span>", 
"<span class=\"comment\"> *     rcu_read_lock();</span>", 
"<span class=\"comment\"> *     nsproxy = task_nsproxy(tsk);</span>", 
"<span class=\"comment\"> *     if (nsproxy != NULL) {</span>", 
"<span class=\"comment\"> *             / *</span>", 
"<span class=\"comment\"> *               * work with the namespaces here</span>", 
"<span class=\"comment\"> *               * e.g. get the reference on one of them</span>", 
"<span class=\"comment\"> *               * /</span>", 
"<span class=\"comment\"> *     } / *</span>", 
"<span class=\"comment\"> *         * NULL task_nsproxy() means that this task is</span>", 
"<span class=\"comment\"> *         * almost dead (zombie)</span>", 
"<span class=\"comment\"> *         * /</span>", 
"<span class=\"comment\"> *     rcu_read_unlock();</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#task_nsproxy\">task_nsproxy</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#copy_namespaces\">copy_namespaces</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"void <a class=\"id\" href=\"#exit_task_namespaces\">exit_task_namespaces</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"void <a class=\"id\" href=\"#switch_task_namespaces\">switch_task_namespaces</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#new\">new</a>);", 
"void <a class=\"id\" href=\"#free_nsproxy\">free_nsproxy</a>(struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"int <a class=\"id\" href=\"#unshare_nsproxy_namespaces\">unshare_nsproxy_namespaces</a>(unsigned long, struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> **,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_nsproxy\">put_nsproxy</a>(struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#count\">count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_nsproxy\">free_nsproxy</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#get_nsproxy\">get_nsproxy</a>(struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_NS\">CONFIG_CGROUP_NS</a>", 
"int <a class=\"id\" href=\"#ns_cgroup_clone\">ns_cgroup_clone</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ns_cgroup_clone\">ns_cgroup_clone</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/e2/1f899092c06d2062d3c2caa89ff04d6081162b.xr', __xr_tmp);
