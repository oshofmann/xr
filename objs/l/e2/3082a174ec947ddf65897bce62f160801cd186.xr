var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Routines to compress and uncompress tcp packets (for transmission</span>", 
"<span class=\"comment\"> * over low speed serial lines).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 1989 Regents of the University of California.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms are permitted</span>", 
"<span class=\"comment\"> * provided that the above copyright notice and this paragraph are</span>", 
"<span class=\"comment\"> * duplicated in all such forms and that any documentation,</span>", 
"<span class=\"comment\"> * advertising materials, and other materials related to such</span>", 
"<span class=\"comment\"> * distribution and use acknowledge that the software was developed</span>", 
"<span class=\"comment\"> * by the University of California, Berkeley.  The name of the</span>", 
"<span class=\"comment\"> * University may not be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> * from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR</span>", 
"<span class=\"comment\"> * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED</span>", 
"<span class=\"comment\"> * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Van Jacobson (van@helios.ee.lbl.gov), Dec 31, 1989:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Initial distribution.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * modified for KA9Q Internet Software Package by</span>", 
"<span class=\"comment\"> * Katie Stevens (dkstevens@ucdavis.edu)</span>", 
"<span class=\"comment\"> * University of California, Davis</span>", 
"<span class=\"comment\"> * Computing Services</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- 01-31-90<span class=\"ts\"/>initial adaptation (from 1.19)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PPP.05<span class=\"ts\"/>02-15-90 [ks]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PPP.08<span class=\"ts\"/>05-02-90 [ks]<span class=\"ts\"/>use PPP protocol field to signal compression</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PPP.15<span class=\"ts\"/>09-90<span class=\"ts\"/> [ks]<span class=\"ts\"/>improve mbuf handling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PPP.16<span class=\"ts\"/>11-02<span class=\"ts\"/> [karn]<span class=\"ts\"/>substantially rewritten to use NOS facilities</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Feb 1991<span class=\"ts\"/>Bill_Simpson@um.cc.umich.edu</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>variable number of conversation slots</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>allow zero or one slots</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>separate routines</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>status display</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Jul 1994<span class=\"ts\"/>Dmitry Gorodchanin</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Fixes for memory leaks.</span>", 
"<span class=\"comment\"> *      - Oct 1994      Dmitry Gorodchanin</span>", 
"<span class=\"comment\"> *                      Modularization.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Jan 1995<span class=\"ts\"/>Bjorn Ekwall</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Use ip_fast_csum from ip.h</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- July 1995<span class=\"ts\"/>Christos A. Polyzols</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Spotted bug in tcp option checking</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This module is a difficult issue. It's clearly inet code but it's also clearly</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>driver code belonging close to PPP and SLIP</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#slhc_vj\">slhc_vj</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INET\">CONFIG_INET</a>", 
"<span class=\"comment\">/* Entire module is for IP only */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sockios\">sockios</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#termios\">termios</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#protocol\">protocol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#icmp\">icmp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static unsigned char *<a class=\"id\" href=\"#encode\">encode</a>(unsigned char *<a class=\"id\" href=\"#cp\">cp</a>, unsigned short <a class=\"id\" href=\"#n\">n</a>);", 
"static long <a class=\"id\" href=\"#decode\">decode</a>(unsigned char **<a class=\"id\" href=\"#cpp\">cpp</a>);", 
"static unsigned char * <a class=\"id\" href=\"#put16\">put16</a>(unsigned char *<a class=\"id\" href=\"#cp\">cp</a>, unsigned short <a class=\"id\" href=\"#x\">x</a>);", 
"static unsigned short <a class=\"id\" href=\"#pull16\">pull16</a>(unsigned char **<a class=\"id\" href=\"#cpp\">cpp</a>);", 
"", 
"<span class=\"comment\">/* Initialize compression data structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>slots must be in range 0 to 255 (zero meaning no compression)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *", 
"<a class=\"id\" href=\"#slhc_init\">slhc_init</a>(int <a class=\"id\" href=\"#rslots\">rslots</a>, int <a class=\"id\" href=\"#tslots\">tslots</a>)", 
"{", 
"<span class=\"ts\"/>register short <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>register struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#slcompress\">slcompress</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (! <a class=\"id\" href=\"#comp\">comp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"", 
"<span class=\"ts\"/>if ( <a class=\"id\" href=\"#rslots\">rslots</a> &gt; 0  &&  <a class=\"id\" href=\"#rslots\">rslots</a> &lt; 256 ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#rsize\">rsize</a> = <a class=\"id\" href=\"#rslots\">rslots</a> * sizeof(struct <a class=\"id\" href=\"#cstate\">cstate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#rsize\">rsize</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (! <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rstate\">rstate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rslot_limit\">rslot_limit</a> = <a class=\"id\" href=\"#rslots\">rslots</a> - 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ( <a class=\"id\" href=\"#tslots\">tslots</a> &gt; 0  &&  <a class=\"id\" href=\"#tslots\">tslots</a> &lt; 256 ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#tsize\">tsize</a> = <a class=\"id\" href=\"#tslots\">tslots</a> * sizeof(struct <a class=\"id\" href=\"#cstate\">cstate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#tstate\">tstate</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#tsize\">tsize</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (! <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#tstate\">tstate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free2\">out_free2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#tslot_limit\">tslot_limit</a> = <a class=\"id\" href=\"#tslots\">tslots</a> - 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#xmit_oldest\">xmit_oldest</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#xmit_current\">xmit_current</a> = 255;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#recv_current\">recv_current</a> = 255;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't accept any packets with implicit index until we get</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one with an explicit index.  Otherwise the uncompress code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will try to use connection 255, which is almost certainly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * out of range</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SLF_TOSS\">SLF_TOSS</a>;", 
"", 
"<span class=\"ts\"/>if ( <a class=\"id\" href=\"#tslots\">tslots</a> &gt; 0 ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#tstate\">tstate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#tslot_limit\">tslot_limit</a>; <a class=\"id\" href=\"#i\">i</a> &gt; 0; --<a class=\"id\" href=\"#i\">i</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#cs_this\">cs_this</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#next\">next</a> = &amp;(<a class=\"id\" href=\"#ts\">ts</a>[<a class=\"id\" href=\"#i\">i</a> - 1]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>[0].<a class=\"id\" href=\"#next\">next</a> = &amp;(<a class=\"id\" href=\"#ts\">ts</a>[<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#tslot_limit\">tslot_limit</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>[0].<a class=\"id\" href=\"#cs_this\">cs_this</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#comp\">comp</a>;", 
"", 
"<a class=\"id\" href=\"#out_free2\">out_free2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rstate\">rstate</a>);", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#comp\">comp</a>);", 
"<a class=\"id\" href=\"#out_fail\">out_fail</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Free a compression data structure */</span>", 
"void", 
"<a class=\"id\" href=\"#slhc_free\">slhc_free</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>)", 
"{", 
"<span class=\"ts\"/>if ( <a class=\"id\" href=\"#comp\">comp</a> == <a class=\"id\" href=\"#NULLSLCOMPR\">NULLSLCOMPR</a> )", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ( <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#tstate\">tstate</a> != <a class=\"id\" href=\"#NULLSLSTATE\">NULLSLSTATE</a> )", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>( <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#tstate\">tstate</a> );", 
"", 
"<span class=\"ts\"/>if ( <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> != <a class=\"id\" href=\"#NULLSLSTATE\">NULLSLSTATE</a> )", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>( <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> );", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>( <a class=\"id\" href=\"#comp\">comp</a> );", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Put a short in host order into a char array in network order */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *", 
"<a class=\"id\" href=\"#put16\">put16</a>(unsigned char *<a class=\"id\" href=\"#cp\">cp</a>, unsigned short <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a>++ = <a class=\"id\" href=\"#x\">x</a> >> 8;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a>++ = <a class=\"id\" href=\"#x\">x</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cp\">cp</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Encode a number */</span>", 
"static unsigned char *", 
"<a class=\"id\" href=\"#encode\">encode</a>(unsigned char *<a class=\"id\" href=\"#cp\">cp</a>, unsigned short <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#n\">n</a> >= 256 || <a class=\"id\" href=\"#n\">n</a> == 0){", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a>++ = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#put16\">put16</a>(<a class=\"id\" href=\"#cp\">cp</a>,<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a>++ = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cp\">cp</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Pull a 16-bit integer in host order from buffer in network byte order */</span>", 
"static unsigned short", 
"<a class=\"id\" href=\"#pull16\">pull16</a>(unsigned char **<a class=\"id\" href=\"#cpp\">cpp</a>)", 
"{", 
"<span class=\"ts\"/>short <a class=\"id\" href=\"#rval\">rval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rval\">rval</a> = *(*<a class=\"id\" href=\"#cpp\">cpp</a>)++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rval\">rval</a> <<= 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rval\">rval</a> |= *(*<a class=\"id\" href=\"#cpp\">cpp</a>)++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rval\">rval</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Decode a number */</span>", 
"static long", 
"<a class=\"id\" href=\"#decode\">decode</a>(unsigned char **<a class=\"id\" href=\"#cpp\">cpp</a>)", 
"{", 
"<span class=\"ts\"/>register int <a class=\"id\" href=\"#x\">x</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = *(*<a class=\"id\" href=\"#cpp\">cpp</a>)++;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#x\">x</a> == 0){", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pull16\">pull16</a>(<a class=\"id\" href=\"#cpp\">cpp</a>) &amp; 0xffff;<span class=\"ts\"/><span class=\"comment\">/* pull16 returns -1 on error */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#x\">x</a> &amp; 0xff;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* -1 if PULLCHAR returned error */</span>", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * icp and isize are the original packet.</span>", 
"<span class=\"comment\"> * ocp is a place to put a copy if necessary.</span>", 
"<span class=\"comment\"> * cpp is initially a pointer to icp.  If the copy is used,</span>", 
"<span class=\"comment\"> *    change it to ocp.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int", 
"<a class=\"id\" href=\"#slhc_compress\">slhc_compress</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>, unsigned char *<a class=\"id\" href=\"#icp\">icp</a>, int <a class=\"id\" href=\"#isize\">isize</a>,", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#ocp\">ocp</a>, unsigned char **<a class=\"id\" href=\"#cpp\">cpp</a>, int <a class=\"id\" href=\"#compress_cid\">compress_cid</a>)", 
"{", 
"<span class=\"ts\"/>register struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#ocs\">ocs</a> = &amp;(<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#tstate\">tstate</a>[<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#xmit_oldest\">xmit_oldest</a>]);", 
"<span class=\"ts\"/>register struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#lcs\">lcs</a> = <a class=\"id\" href=\"#ocs\">ocs</a>;", 
"<span class=\"ts\"/>register struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#lcs\">lcs</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>register unsigned long <a class=\"id\" href=\"#deltaS\">deltaS</a>, <a class=\"id\" href=\"#deltaA\">deltaA</a>;", 
"<span class=\"ts\"/>register short <a class=\"id\" href=\"#changes\">changes</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hlen\">hlen</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#new_seq\">new_seq</a>[16];", 
"<span class=\"ts\"/>register unsigned char *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#new_seq\">new_seq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#th\">th</a>, *<a class=\"id\" href=\"#oth\">oth</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#csum\">csum</a>;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Don't play with runt packets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#isize\">isize</a>&lt;sizeof(struct <a class=\"id\" href=\"#iphdr\">iphdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#isize\">isize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a> = (struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *) <a class=\"id\" href=\"#icp\">icp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Bail if this packet isn't TCP, or is an IP fragment */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#protocol\">protocol</a> != <a class=\"id\" href=\"#IPPROTO_TCP\">IPPROTO_TCP</a> || (<a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#frag_off\">frag_off</a>) &amp; 0x3fff)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Send as regular IP */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#protocol\">protocol</a> != <a class=\"id\" href=\"#IPPROTO_TCP\">IPPROTO_TCP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_o_nontcp\">sls_o_nontcp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_o_tcp\">sls_o_tcp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#isize\">isize</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Extract TCP header */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a> = (struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *)(((unsigned char *)<a class=\"id\" href=\"#ip\">ip</a>) + <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a>*4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlen\">hlen</a> = <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a>*4 + <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#doff\">doff</a>*4;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*  Bail if the TCP packet isn't `compressible' (i.e., ACK isn't set or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  some other control bit is set). Also uncompressible if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  it's a runt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#hlen\">hlen</a> &gt; <a class=\"id\" href=\"#isize\">isize</a> || <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#syn\">syn</a> || <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#fin\">fin</a> || <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#rst\">rst</a> ||", 
"<span class=\"ts\"/>    ! (<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#ack\">ack</a>)){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TCP connection stuff; send as regular IP */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_o_tcp\">sls_o_tcp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#isize\">isize</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Packet is compressible -- we're going to send either a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * COMPRESSED_TCP or UNCOMPRESSED_TCP packet.  Either way,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to locate (or create) the connection state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * States are kept in a circularly linked list with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * xmit_oldest pointing to the end of the list.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list is kept in lru order by moving a state to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * head of the list whenever it is referenced.  Since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the list is short and, empirically, the connection</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we want is almost always near the front, we locate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * states via linear search.  If we don't find a state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the datagram, the oldest state is (re-)used.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if( <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#saddr\">saddr</a> == <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#saddr\">saddr</a>", 
"<span class=\"ts\"/><span class=\"ts\"/> && <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#daddr\">daddr</a> == <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#daddr\">daddr</a>", 
"<span class=\"ts\"/><span class=\"ts\"/> && <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#source\">source</a> == <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>.<a class=\"id\" href=\"#source\">source</a>", 
"<span class=\"ts\"/><span class=\"ts\"/> && <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#dest\">dest</a> == <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>.<a class=\"id\" href=\"#dest\">dest</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if current equal oldest, at end of list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ( <a class=\"id\" href=\"#cs\">cs</a> == <a class=\"id\" href=\"#ocs\">ocs</a> )", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lcs\">lcs</a> = <a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_o_searches\">sls_o_searches</a>++;", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Didn't find it -- re-use oldest cstate.  Send an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uncompressed packet that tells the other side what</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * connection number we're using for this conversation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that since the state list is circular, the oldest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state points to the newest and we only need to set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * xmit_oldest to update the lru linkage.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_o_misses\">sls_o_misses</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#xmit_oldest\">xmit_oldest</a> = <a class=\"id\" href=\"#lcs\">lcs</a>-><a class=\"id\" href=\"#cs_this\">cs_this</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#uncompressed\">uncompressed</a>;", 
"", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Found it -- move to the front on the connection list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#lcs\">lcs</a> == <a class=\"id\" href=\"#ocs\">ocs</a>) {", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* found at most recently used */</span>", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cs\">cs</a> == <a class=\"id\" href=\"#ocs\">ocs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* found at least recently used */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#xmit_oldest\">xmit_oldest</a> = <a class=\"id\" href=\"#lcs\">lcs</a>-><a class=\"id\" href=\"#cs_this\">cs_this</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* more than 2 elements */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lcs\">lcs</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ocs\">ocs</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ocs\">ocs</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure that only what we expect to change changed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check the following:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IP protocol version, header length &amp; type of service.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The \"Don't fragment\" bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The time-to-live field.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The TCP header length.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IP options, if any.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TCP options, if any.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If any of these things are different between the previous &amp;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current datagram, we send the current datagram `uncompressed'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oth\">oth</a> = &amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>;", 
"", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#version\">version</a> != <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#version\">version</a> || <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a> != <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#ihl\">ihl</a>", 
"<span class=\"ts\"/> || <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#tos\">tos</a> != <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#tos\">tos</a>", 
"<span class=\"ts\"/> || (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#frag_off\">frag_off</a> &amp; <a class=\"id\" href=\"#htons\">htons</a>(0x4000)) != (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#frag_off\">frag_off</a> &amp; <a class=\"id\" href=\"#htons\">htons</a>(0x4000))", 
"<span class=\"ts\"/> || <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ttl\">ttl</a> != <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#ttl\">ttl</a>", 
"<span class=\"ts\"/> || <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#doff\">doff</a> != <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>.<a class=\"id\" href=\"#doff\">doff</a>", 
"<span class=\"ts\"/> || (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a> &gt; 5 && <a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#ip\">ip</a>+1,<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ipopt\">cs_ipopt</a>,((<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a>)-5)*4) != 0)", 
"<span class=\"ts\"/> || (<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#doff\">doff</a> &gt; 5 && <a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#th\">th</a>+1,<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcpopt\">cs_tcpopt</a>,((<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#doff\">doff</a>)-5)*4) != 0)){", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#uncompressed\">uncompressed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Figure out which of the changing fields changed.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * receiver expects changes in the order: urgent, window,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ack, seq (the order minimizes the number of temporaries</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * needed in this section of code).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#urg\">urg</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deltaS\">deltaS</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#urg_ptr\">urg_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#encode\">encode</a>(<a class=\"id\" href=\"#cp\">cp</a>,<a class=\"id\" href=\"#deltaS\">deltaS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changes\">changes</a> |= <a class=\"id\" href=\"#NEW_U\">NEW_U</a>;", 
"<span class=\"ts\"/>} else if(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#urg_ptr\">urg_ptr</a> != <a class=\"id\" href=\"#oth\">oth</a>-><a class=\"id\" href=\"#urg_ptr\">urg_ptr</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* argh! URG not set but urp changed -- a sensible</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * implementation should never do this but RFC793</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * doesn't prohibit the change so we have to deal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#uncompressed\">uncompressed</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if((<a class=\"id\" href=\"#deltaS\">deltaS</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#window\">window</a>) - <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#oth\">oth</a>-><a class=\"id\" href=\"#window\">window</a>)) != 0){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#encode\">encode</a>(<a class=\"id\" href=\"#cp\">cp</a>,<a class=\"id\" href=\"#deltaS\">deltaS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changes\">changes</a> |= <a class=\"id\" href=\"#NEW_W\">NEW_W</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if((<a class=\"id\" href=\"#deltaA\">deltaA</a> = <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#ack_seq\">ack_seq</a>) - <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#oth\">oth</a>-><a class=\"id\" href=\"#ack_seq\">ack_seq</a>)) != 0L){", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#deltaA\">deltaA</a> &gt; 0x0000ffff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#uncompressed\">uncompressed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#encode\">encode</a>(<a class=\"id\" href=\"#cp\">cp</a>,<a class=\"id\" href=\"#deltaA\">deltaA</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changes\">changes</a> |= <a class=\"id\" href=\"#NEW_A\">NEW_A</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if((<a class=\"id\" href=\"#deltaS\">deltaS</a> = <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#seq\">seq</a>) - <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#oth\">oth</a>-><a class=\"id\" href=\"#seq\">seq</a>)) != 0L){", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#deltaS\">deltaS</a> &gt; 0x0000ffff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#uncompressed\">uncompressed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#encode\">encode</a>(<a class=\"id\" href=\"#cp\">cp</a>,<a class=\"id\" href=\"#deltaS\">deltaS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changes\">changes</a> |= <a class=\"id\" href=\"#NEW_S\">NEW_S</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#changes\">changes</a>){", 
"<span class=\"ts\"/>case 0:<span class=\"ts\"/><span class=\"comment\">/* Nothing changed. If this packet contains data and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * last one didn't, this is probably a data packet following</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an ack (normal on an interactive connection) and we send</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it compressed.  Otherwise it's probably a retransmit,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * retransmitted ack or window probe.  Send it uncompressed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in case the other side missed the compressed version.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#tot_len\">tot_len</a> != <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#tot_len\">tot_len</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#tot_len\">tot_len</a>) == <a class=\"id\" href=\"#hlen\">hlen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#uncompressed\">uncompressed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SPECIAL_I\">SPECIAL_I</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SPECIAL_D\">SPECIAL_D</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* actual changes match one of our special case encodings --</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * send packet uncompressed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#uncompressed\">uncompressed</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NEW_S\">NEW_S</a>|<a class=\"id\" href=\"#NEW_A\">NEW_A</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#deltaS\">deltaS</a> == <a class=\"id\" href=\"#deltaA\">deltaA</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#deltaS\">deltaS</a> == <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#tot_len\">tot_len</a>) - <a class=\"id\" href=\"#hlen\">hlen</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* special case for echoed terminal traffic */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changes\">changes</a> = <a class=\"id\" href=\"#SPECIAL_I\">SPECIAL_I</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#new_seq\">new_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NEW_S\">NEW_S</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#deltaS\">deltaS</a> == <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#tot_len\">tot_len</a>) - <a class=\"id\" href=\"#hlen\">hlen</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* special case for data xfer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changes\">changes</a> = <a class=\"id\" href=\"#SPECIAL_D\">SPECIAL_D</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#new_seq\">new_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deltaS\">deltaS</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#id\">id</a>) - <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>.<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#deltaS\">deltaS</a> != 1){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#encode\">encode</a>(<a class=\"id\" href=\"#cp\">cp</a>,<a class=\"id\" href=\"#deltaS\">deltaS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changes\">changes</a> |= <a class=\"id\" href=\"#NEW_I\">NEW_I</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#psh\">psh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changes\">changes</a> |= <a class=\"id\" href=\"#TCP_PUSH_BIT\">TCP_PUSH_BIT</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Grab the cksum before we overwrite it below.  Then update our</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state with this packet's header.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#check\">check</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>,<a class=\"id\" href=\"#ip\">ip</a>,20);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>,<a class=\"id\" href=\"#th\">th</a>,20);", 
"<span class=\"ts\"/><span class=\"comment\">/* We want to use the original packet as our compressed packet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (cp - new_seq) is the number of bytes we need for compressed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sequence numbers.  In addition we need one byte for the change</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mask, one for the connection id and two for the tcp checksum.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, (cp - new_seq) + 4 bytes of header are needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deltaS\">deltaS</a> = <a class=\"id\" href=\"#cp\">cp</a> - <a class=\"id\" href=\"#new_seq\">new_seq</a>;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#compress_cid\">compress_cid</a> == 0 || <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#xmit_current\">xmit_current</a> != <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_this\">cs_this</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#ocp\">ocp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cpp\">cpp</a> = <a class=\"id\" href=\"#ocp\">ocp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a>++ = <a class=\"id\" href=\"#changes\">changes</a> | <a class=\"id\" href=\"#NEW_C\">NEW_C</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a>++ = <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_this\">cs_this</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#xmit_current\">xmit_current</a> = <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_this\">cs_this</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#ocp\">ocp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cpp\">cpp</a> = <a class=\"id\" href=\"#ocp\">ocp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a>++ = <a class=\"id\" href=\"#changes\">changes</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#__sum16\">__sum16</a> *)<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += 2;", 
"<span class=\"comment\">/* deltaS is now the size of the change section of the compressed header */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>,<a class=\"id\" href=\"#new_seq\">new_seq</a>,<a class=\"id\" href=\"#deltaS\">deltaS</a>);<span class=\"ts\"/><span class=\"comment\">/* Write list of deltas */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>+<a class=\"id\" href=\"#deltaS\">deltaS</a>,<a class=\"id\" href=\"#icp\">icp</a>+<a class=\"id\" href=\"#hlen\">hlen</a>,<a class=\"id\" href=\"#isize\">isize</a>-<a class=\"id\" href=\"#hlen\">hlen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_o_compressed\">sls_o_compressed</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ocp\">ocp</a>[0] |= <a class=\"id\" href=\"#SL_TYPE_COMPRESSED_TCP\">SL_TYPE_COMPRESSED_TCP</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#isize\">isize</a> - <a class=\"id\" href=\"#hlen\">hlen</a> + <a class=\"id\" href=\"#deltaS\">deltaS</a> + (<a class=\"id\" href=\"#cp\">cp</a> - <a class=\"id\" href=\"#ocp\">ocp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update connection state cs &amp; send uncompressed packet (i.e.,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a regular ip/tcp packet but with the 'conversation id' we hope</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to use on future compressed packets in the protocol field).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#uncompressed\">uncompressed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>,<a class=\"id\" href=\"#ip\">ip</a>,20);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>,<a class=\"id\" href=\"#th\">th</a>,20);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a> &gt; 5)", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ipopt\">cs_ipopt</a>, <a class=\"id\" href=\"#ip\">ip</a>+1, ((<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a>) - 5) * 4);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#doff\">doff</a> &gt; 5)", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcpopt\">cs_tcpopt</a>, <a class=\"id\" href=\"#th\">th</a>+1, ((<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#doff\">doff</a>) - 5) * 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#xmit_current\">xmit_current</a> = <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_this\">cs_this</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_o_uncompressed\">sls_o_uncompressed</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ocp\">ocp</a>, <a class=\"id\" href=\"#icp\">icp</a>, <a class=\"id\" href=\"#isize\">isize</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cpp\">cpp</a> = <a class=\"id\" href=\"#ocp\">ocp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ocp\">ocp</a>[9] = <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_this\">cs_this</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ocp\">ocp</a>[0] |= <a class=\"id\" href=\"#SL_TYPE_UNCOMPRESSED_TCP\">SL_TYPE_UNCOMPRESSED_TCP</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#isize\">isize</a>;", 
"}", 
"", 
"", 
"int", 
"<a class=\"id\" href=\"#slhc_uncompress\">slhc_uncompress</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>, unsigned char *<a class=\"id\" href=\"#icp\">icp</a>, int <a class=\"id\" href=\"#isize\">isize</a>)", 
"{", 
"<span class=\"ts\"/>register int <a class=\"id\" href=\"#changes\">changes</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/>register struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#thp\">thp</a>;", 
"<span class=\"ts\"/>register struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>register struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#hdrlen\">hdrlen</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#icp\">icp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We've got a compressed packet; read the change byte */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_i_compressed\">sls_i_compressed</a>++;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#isize\">isize</a> &lt; 3){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_i_error\">sls_i_error</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#changes\">changes</a> = *<a class=\"id\" href=\"#cp\">cp</a>++;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#changes\">changes</a> &amp; <a class=\"id\" href=\"#NEW_C\">NEW_C</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure the state index is in range, then grab the state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we have a good state index, clear the 'discard' flag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = *<a class=\"id\" href=\"#cp\">cp</a>++;<span class=\"ts\"/><span class=\"comment\">/* Read conn index */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#x\">x</a> &lt; 0 || <a class=\"id\" href=\"#x\">x</a> &gt; <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rslot_limit\">rslot_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#flags\">flags</a> &=~ <a class=\"id\" href=\"#SLF_TOSS\">SLF_TOSS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#recv_current\">recv_current</a> = <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this packet has an implicit state index.  If we've</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * had a line error since the last time we got an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * explicit state index, we have to toss the packet. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLF_TOSS\">SLF_TOSS</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_i_tossed\">sls_i_tossed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a> = &amp;<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rstate\">rstate</a>[<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#recv_current\">recv_current</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a> = &amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a> = &amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#check\">check</a> = *(<a class=\"id\" href=\"#__sum16\">__sum16</a> *)<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#psh\">psh</a> = (<a class=\"id\" href=\"#changes\">changes</a> &amp; <a class=\"id\" href=\"#TCP_PUSH_BIT\">TCP_PUSH_BIT</a>) ? 1 : 0;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * we can use the same number for the length of the saved header and</span>", 
"<span class=\"comment\"> * the current one, because the packet wouldn't have been sent</span>", 
"<span class=\"comment\"> * as compressed unless the options were the same as the previous one</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hdrlen\">hdrlen</a> = <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a> * 4 + <a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#doff\">doff</a> * 4;", 
"", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#changes\">changes</a> &amp; <a class=\"id\" href=\"#SPECIALS_MASK\">SPECIALS_MASK</a>){", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SPECIAL_I\">SPECIAL_I</a>:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Echoed terminal traffic */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>register short <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#tot_len\">tot_len</a>) - <a class=\"id\" href=\"#hdrlen\">hdrlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#ack_seq\">ack_seq</a> = <a class=\"id\" href=\"#htonl\">htonl</a>( <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#ack_seq\">ack_seq</a>) + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#htonl\">htonl</a>( <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#seq\">seq</a>) + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SPECIAL_D\">SPECIAL_D</a>:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unidirectional data */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#htonl\">htonl</a>( <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#seq\">seq</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#tot_len\">tot_len</a>) - <a class=\"id\" href=\"#hdrlen\">hdrlen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#changes\">changes</a> &amp; <a class=\"id\" href=\"#NEW_U\">NEW_U</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#urg\">urg</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if((<a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#decode\">decode</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>)) == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#urg_ptr\">urg_ptr</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#urg\">urg</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#changes\">changes</a> &amp; <a class=\"id\" href=\"#NEW_W\">NEW_W</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if((<a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#decode\">decode</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>)) == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#window\">window</a> = <a class=\"id\" href=\"#htons\">htons</a>( <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#window\">window</a>) + <a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#changes\">changes</a> &amp; <a class=\"id\" href=\"#NEW_A\">NEW_A</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if((<a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#decode\">decode</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>)) == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#ack_seq\">ack_seq</a> = <a class=\"id\" href=\"#htonl\">htonl</a>( <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#ack_seq\">ack_seq</a>) + <a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#changes\">changes</a> &amp; <a class=\"id\" href=\"#NEW_S\">NEW_S</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if((<a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#decode\">decode</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>)) == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#htonl\">htonl</a>( <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#seq\">seq</a>) + <a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#changes\">changes</a> &amp; <a class=\"id\" href=\"#NEW_I\">NEW_I</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/>if((<a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#decode\">decode</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>)) == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#htons\">htons</a> (<a class=\"id\" href=\"#ntohs\">ntohs</a> (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#id\">id</a>) + <a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#htons\">htons</a> (<a class=\"id\" href=\"#ntohs\">ntohs</a> (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#id\">id</a>) + 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point, cp points to the first byte of data in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * packet.  Put the reconstructed TCP and IP headers back on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * packet.  Recalculate IP checksum (but not TCP checksum).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#isize\">isize</a> - (<a class=\"id\" href=\"#cp\">cp</a> - <a class=\"id\" href=\"#icp\">icp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#hdrlen\">hdrlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#tot_len\">tot_len</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#check\">check</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#icp\">icp</a> + <a class=\"id\" href=\"#hdrlen\">hdrlen</a>, <a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#hdrlen\">hdrlen</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#icp\">icp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#ip\">ip</a>, 20);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += 20;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a> &gt; 5) {", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ipopt\">cs_ipopt</a>, (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a> - 5) * 4);", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#cp\">cp</a> += (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a> - 5) * 4;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned\">put_unaligned</a>(<a class=\"id\" href=\"#ip_fast_csum\">ip_fast_csum</a>(<a class=\"id\" href=\"#icp\">icp</a>, <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      &amp;((struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *)<a class=\"id\" href=\"#icp\">icp</a>)-><a class=\"id\" href=\"#check\">check</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#thp\">thp</a>, 20);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += 20;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#doff\">doff</a> &gt; 5) {", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcpopt\">cs_tcpopt</a>, ((<a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#doff\">doff</a>) - 5) * 4);", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#cp\">cp</a> += ((<a class=\"id\" href=\"#thp\">thp</a>-><a class=\"id\" href=\"#doff\">doff</a>) - 5) * 4;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"<a class=\"id\" href=\"#bad\">bad</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_i_error\">sls_i_error</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>( <a class=\"id\" href=\"#comp\">comp</a> );", 
"}", 
"", 
"", 
"int", 
"<a class=\"id\" href=\"#slhc_remember\">slhc_remember</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>, unsigned char *<a class=\"id\" href=\"#icp\">icp</a>, int <a class=\"id\" href=\"#isize\">isize</a>)", 
"{", 
"<span class=\"ts\"/>register struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#ihl\">ihl</a>;", 
"", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#isize\">isize</a> &lt; 20) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The packet is shorter than a legal IP header */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_i_runt\">sls_i_runt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>( <a class=\"id\" href=\"#comp\">comp</a> );", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Peek at the IP header's IHL field to find its length */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ihl\">ihl</a> = <a class=\"id\" href=\"#icp\">icp</a>[0] &amp; 0xf;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#ihl\">ihl</a> &lt; 20 / 4){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The IP header length field is too small */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_i_runt\">sls_i_runt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>( <a class=\"id\" href=\"#comp\">comp</a> );", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#icp\">icp</a>[9];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icp\">icp</a>[9] = <a class=\"id\" href=\"#IPPROTO_TCP\">IPPROTO_TCP</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ip_fast_csum\">ip_fast_csum</a>(<a class=\"id\" href=\"#icp\">icp</a>, <a class=\"id\" href=\"#ihl\">ihl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Bad IP header checksum; discard */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_i_badcheck\">sls_i_badcheck</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>( <a class=\"id\" href=\"#comp\">comp</a> );", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rslot_limit\">rslot_limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_i_error\">sls_i_error</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>(<a class=\"id\" href=\"#comp\">comp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update local state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a> = &amp;<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#rstate\">rstate</a>[<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#recv_current\">recv_current</a> = <a class=\"id\" href=\"#index\">index</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#flags\">flags</a> &=~ <a class=\"id\" href=\"#SLF_TOSS\">SLF_TOSS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ip\">cs_ip</a>,<a class=\"id\" href=\"#icp\">icp</a>,20);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>,<a class=\"id\" href=\"#icp\">icp</a> + <a class=\"id\" href=\"#ihl\">ihl</a>*4,20);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ihl\">ihl</a> &gt; 5)", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_ipopt\">cs_ipopt</a>, <a class=\"id\" href=\"#icp\">icp</a> + sizeof(struct <a class=\"id\" href=\"#iphdr\">iphdr</a>), (<a class=\"id\" href=\"#ihl\">ihl</a> - 5) * 4);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>.<a class=\"id\" href=\"#doff\">doff</a> &gt; 5)", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcpopt\">cs_tcpopt</a>, <a class=\"id\" href=\"#icp\">icp</a> + <a class=\"id\" href=\"#ihl\">ihl</a>*4 + sizeof(struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a>), (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>.<a class=\"id\" href=\"#doff\">doff</a> - 5) * 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_hsize\">cs_hsize</a> = <a class=\"id\" href=\"#ihl\">ihl</a>*2 + <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>.<a class=\"id\" href=\"#doff\">doff</a>*2;", 
"<span class=\"ts\"/><span class=\"comment\">/* Put headers back on packet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Neither header checksum is recalculated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#sls_i_uncompressed\">sls_i_uncompressed</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#isize\">isize</a>;", 
"}", 
"", 
"int", 
"<a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>)", 
"{", 
"<span class=\"ts\"/>if ( <a class=\"id\" href=\"#comp\">comp</a> == <a class=\"id\" href=\"#NULLSLCOMPR\">NULLSLCOMPR</a> )", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SLF_TOSS\">SLF_TOSS</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* VJ header compression */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_init\">slhc_init</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_free\">slhc_free</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_remember\">slhc_remember</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_compress\">slhc_compress</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_uncompress\">slhc_uncompress</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>);", 
"", 
"#else <span class=\"comment\">/* CONFIG_INET */</span>", 
"", 
"", 
"int", 
"<a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>)", 
"{", 
"  <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Called IP function on non IP-system: slhc_toss\");", 
"  return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"int", 
"<a class=\"id\" href=\"#slhc_uncompress\">slhc_uncompress</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>, unsigned char *<a class=\"id\" href=\"#icp\">icp</a>, int <a class=\"id\" href=\"#isize\">isize</a>)", 
"{", 
"  <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Called IP function on non IP-system: slhc_uncompress\");", 
"  return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"int", 
"<a class=\"id\" href=\"#slhc_compress\">slhc_compress</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>, unsigned char *<a class=\"id\" href=\"#icp\">icp</a>, int <a class=\"id\" href=\"#isize\">isize</a>,", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#ocp\">ocp</a>, unsigned char **<a class=\"id\" href=\"#cpp\">cpp</a>, int <a class=\"id\" href=\"#compress_cid\">compress_cid</a>)", 
"{", 
"  <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Called IP function on non IP-system: slhc_compress\");", 
"  return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"int", 
"<a class=\"id\" href=\"#slhc_remember\">slhc_remember</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>, unsigned char *<a class=\"id\" href=\"#icp\">icp</a>, int <a class=\"id\" href=\"#isize\">isize</a>)", 
"{", 
"  <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Called IP function on non IP-system: slhc_remember\");", 
"  return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#slhc_free\">slhc_free</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>)", 
"{", 
"  <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Called IP function on non IP-system: slhc_free\");", 
"}", 
"struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *", 
"<a class=\"id\" href=\"#slhc_init\">slhc_init</a>(int <a class=\"id\" href=\"#rslots\">rslots</a>, int <a class=\"id\" href=\"#tslots\">tslots</a>)", 
"{", 
"  <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Called IP function on non IP-system: slhc_init\");", 
"  return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_init\">slhc_init</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_free\">slhc_free</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_remember\">slhc_remember</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_compress\">slhc_compress</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_uncompress\">slhc_uncompress</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_INET */</span>", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"Dual BSD/GPL\");", 
];
xr_frag_insert('l/e2/3082a174ec947ddf65897bce62f160801cd186.xr', __xr_tmp);
