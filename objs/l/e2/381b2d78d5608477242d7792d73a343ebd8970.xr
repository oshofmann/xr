var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_MODULELOADER_H\">_LINUX_MODULELOADER_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_MODULELOADER_H\">_LINUX_MODULELOADER_H</a>", 
"<span class=\"comment\">/* The stuff needed for archs to support modules. */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elf\">elf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* These must be implemented by the specific architecture */</span>", 
"", 
"<span class=\"comment\">/* Adjust arch-specific sections.  Return 0 on success.  */</span>", 
"int <a class=\"id\" href=\"#module_frob_arch_sections\">module_frob_arch_sections</a>(<a class=\"id\" href=\"#Elf_Ehdr\">Elf_Ehdr</a> *<a class=\"id\" href=\"#hdr\">hdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      char *<a class=\"id\" href=\"#secstrings\">secstrings</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"comment\">/* Additional bytes needed by arch in front of individual sections */</span>", 
"unsigned int <a class=\"id\" href=\"#arch_mod_section_prepend\">arch_mod_section_prepend</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, unsigned int <a class=\"id\" href=\"#section\">section</a>);", 
"", 
"<span class=\"comment\">/* Allocator used for allocating struct module, core sections and init</span>", 
"<span class=\"comment\">   sections.  Returns NULL on failure. */</span>", 
"void *<a class=\"id\" href=\"#module_alloc\">module_alloc</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"comment\">/* Free memory returned from module_alloc. */</span>", 
"void <a class=\"id\" href=\"#module_free\">module_free</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, void *<a class=\"id\" href=\"#module_region\">module_region</a>);", 
"", 
"<span class=\"comment\">/* Apply the given relocation to the (simplified) ELF.  Return -error</span>", 
"<span class=\"comment\">   or 0. */</span>", 
"int <a class=\"id\" href=\"#apply_relocate\">apply_relocate</a>(<a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#strtab\">strtab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#symindex\">symindex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#relsec\">relsec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"comment\">/* Apply the given add relocation to the (simplified) ELF.  Return</span>", 
"<span class=\"comment\">   -error or 0 */</span>", 
"int <a class=\"id\" href=\"#apply_relocate_add\">apply_relocate_add</a>(<a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#strtab\">strtab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#symindex\">symindex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#relsec\">relsec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"comment\">/* Any final processing of module before access.  Return -error or 0. */</span>", 
"int <a class=\"id\" href=\"#module_finalize\">module_finalize</a>(const <a class=\"id\" href=\"#Elf_Ehdr\">Elf_Ehdr</a> *<a class=\"id\" href=\"#hdr\">hdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const <a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"comment\">/* Any cleanup needed when module leaves. */</span>", 
"void <a class=\"id\" href=\"#module_arch_cleanup\">module_arch_cleanup</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/e2/381b2d78d5608477242d7792d73a343ebd8970.xr', __xr_tmp);
