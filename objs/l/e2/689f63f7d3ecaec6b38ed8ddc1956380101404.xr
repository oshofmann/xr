var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implement the default iomap interfaces</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright 2004 Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read/write from/to an (offsettable) iomem cookie. It might be a PIO</span>", 
"<span class=\"comment\"> * access or a MMIO access, these functions don't care. The info is</span>", 
"<span class=\"comment\"> * encoded in the hardware mapping set up by the mapping functions</span>", 
"<span class=\"comment\"> * (or the cookie itself, depending on implementation and hw).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The generic routines don't assume any hardware mappings, and just</span>", 
"<span class=\"comment\"> * encode the PIO/MMIO as part of the cookie. They coldly assume that</span>", 
"<span class=\"comment\"> * the MMIO IO mappings are not in the low address range.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Architectures for which this is not true can't use this generic</span>", 
"<span class=\"comment\"> * implementation and should do their own copy.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#HAVE_ARCH_PIO_SIZE\">HAVE_ARCH_PIO_SIZE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We encode the physical PIO addresses (0-0xffff) into the</span>", 
"<span class=\"comment\"> * pointer by offsetting them with a constant (0x10000) and</span>", 
"<span class=\"comment\"> * assuming that all the low addresses are always PIO. That means</span>", 
"<span class=\"comment\"> * we can do some sanity checks on the low bits, and don't</span>", 
"<span class=\"comment\"> * need to just take things for granted.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PIO_OFFSET\">PIO_OFFSET</a><span class=\"ts\"/>0x10000UL", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PIO_MASK\">PIO_MASK</a><span class=\"ts\"/>0x0ffffUL", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PIO_RESERVED\">PIO_RESERVED</a><span class=\"ts\"/>0x40000UL", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#bad_io_access\">bad_io_access</a>(unsigned long <a class=\"id\" href=\"#port\">port</a>, const char *<a class=\"id\" href=\"#access\">access</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#count\">count</a> = 10;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Bad IO access at port %#lx (%s)\\n\", <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#access\">access</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ugly macros are a way of life.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#is_pio\">is_pio</a>, <a class=\"id\" href=\"#is_mmio\">is_mmio</a>) do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#port\">port</a> = (unsigned long <a class=\"id\" href=\"#__force\">__force</a>)<a class=\"id\" href=\"#addr\">addr</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#port\">port</a> >= <a class=\"id\" href=\"#PIO_RESERVED\">PIO_RESERVED</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_mmio\">is_mmio</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#port\">port</a> &gt; <a class=\"id\" href=\"#PIO_OFFSET\">PIO_OFFSET</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a> &= <a class=\"id\" href=\"#PIO_MASK\">PIO_MASK</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_pio\">is_pio</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_io_access\">bad_io_access</a>(<a class=\"id\" href=\"#port\">port</a>, #<a class=\"id\" href=\"#is_pio\">is_pio</a> );<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#pio_read16be\">pio_read16be</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pio_read16be\">pio_read16be</a>(<a class=\"id\" href=\"#port\">port</a>) <a class=\"id\" href=\"#swab16\">swab16</a>(<a class=\"id\" href=\"#inw\">inw</a>(<a class=\"id\" href=\"#port\">port</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pio_read32be\">pio_read32be</a>(<a class=\"id\" href=\"#port\">port</a>) <a class=\"id\" href=\"#swab32\">swab32</a>(<a class=\"id\" href=\"#inl\">inl</a>(<a class=\"id\" href=\"#port\">port</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#mmio_read16be\">mmio_read16be</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mmio_read16be\">mmio_read16be</a>(<a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#be16_to_cpu\">be16_to_cpu</a>(<a class=\"id\" href=\"#__raw_readw\">__raw_readw</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mmio_read32be\">mmio_read32be</a>(<a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(<a class=\"id\" href=\"#__raw_readl\">__raw_readl</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"unsigned int <a class=\"id\" href=\"#ioread8\">ioread8</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, return <a class=\"id\" href=\"#inb\">inb</a>(<a class=\"id\" href=\"#port\">port</a>), return <a class=\"id\" href=\"#readb\">readb</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/>return 0xff;", 
"}", 
"unsigned int <a class=\"id\" href=\"#ioread16\">ioread16</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, return <a class=\"id\" href=\"#inw\">inw</a>(<a class=\"id\" href=\"#port\">port</a>), return <a class=\"id\" href=\"#readw\">readw</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/>return 0xffff;", 
"}", 
"unsigned int <a class=\"id\" href=\"#ioread16be\">ioread16be</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, return <a class=\"id\" href=\"#pio_read16be\">pio_read16be</a>(<a class=\"id\" href=\"#port\">port</a>), return <a class=\"id\" href=\"#mmio_read16be\">mmio_read16be</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/>return 0xffff;", 
"}", 
"unsigned int <a class=\"id\" href=\"#ioread32\">ioread32</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, return <a class=\"id\" href=\"#inl\">inl</a>(<a class=\"id\" href=\"#port\">port</a>), return <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/>return 0xffffffff;", 
"}", 
"unsigned int <a class=\"id\" href=\"#ioread32be\">ioread32be</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, return <a class=\"id\" href=\"#pio_read32be\">pio_read32be</a>(<a class=\"id\" href=\"#port\">port</a>), return <a class=\"id\" href=\"#mmio_read32be\">mmio_read32be</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/>return 0xffffffff;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioread8\">ioread8</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioread16\">ioread16</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioread16be\">ioread16be</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioread32\">ioread32</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioread32be\">ioread32be</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#pio_write16be\">pio_write16be</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pio_write16be\">pio_write16be</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#port\">port</a>) <a class=\"id\" href=\"#outw\">outw</a>(<a class=\"id\" href=\"#swab16\">swab16</a>(<a class=\"id\" href=\"#val\">val</a>),<a class=\"id\" href=\"#port\">port</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pio_write32be\">pio_write32be</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#port\">port</a>) <a class=\"id\" href=\"#outl\">outl</a>(<a class=\"id\" href=\"#swab32\">swab32</a>(<a class=\"id\" href=\"#val\">val</a>),<a class=\"id\" href=\"#port\">port</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#mmio_write16be\">mmio_write16be</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mmio_write16be\">mmio_write16be</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#port\">port</a>) <a class=\"id\" href=\"#__raw_writew\">__raw_writew</a>(<a class=\"id\" href=\"#be16_to_cpu\">be16_to_cpu</a>(<a class=\"id\" href=\"#val\">val</a>),<a class=\"id\" href=\"#port\">port</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mmio_write32be\">mmio_write32be</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#port\">port</a>) <a class=\"id\" href=\"#__raw_writel\">__raw_writel</a>(<a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(<a class=\"id\" href=\"#val\">val</a>),<a class=\"id\" href=\"#port\">port</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#iowrite8\">iowrite8</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#val\">val</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#port\">port</a>), <a class=\"id\" href=\"#writeb\">writeb</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>));", 
"}", 
"void <a class=\"id\" href=\"#iowrite16\">iowrite16</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#outw\">outw</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#port\">port</a>), <a class=\"id\" href=\"#writew\">writew</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>));", 
"}", 
"void <a class=\"id\" href=\"#iowrite16be\">iowrite16be</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pio_write16be\">pio_write16be</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#port\">port</a>), <a class=\"id\" href=\"#mmio_write16be\">mmio_write16be</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>));", 
"}", 
"void <a class=\"id\" href=\"#iowrite32\">iowrite32</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#outl\">outl</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#port\">port</a>), <a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>));", 
"}", 
"void <a class=\"id\" href=\"#iowrite32be\">iowrite32be</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>, void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pio_write32be\">pio_write32be</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#port\">port</a>), <a class=\"id\" href=\"#mmio_write32be\">mmio_write32be</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iowrite8\">iowrite8</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iowrite16\">iowrite16</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iowrite16be\">iowrite16be</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iowrite32\">iowrite32</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iowrite32be\">iowrite32be</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the \"repeat MMIO read/write\" functions.</span>", 
"<span class=\"comment\"> * Note the \"__raw\" accesses, since we don't want to</span>", 
"<span class=\"comment\"> * convert to CPU byte order. We write in \"IO byte</span>", 
"<span class=\"comment\"> * order\" (we also don't have IO barriers).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#mmio_insb\">mmio_insb</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmio_insb\">mmio_insb</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#count\">count</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#__raw_readb\">__raw_readb</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmio_insw\">mmio_insw</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#count\">count</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#__raw_readw\">__raw_readw</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmio_insl\">mmio_insl</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#count\">count</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#__raw_readl\">__raw_readl</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#mmio_outsb\">mmio_outsb</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmio_outsb\">mmio_outsb</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#count\">count</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raw_writeb\">__raw_writeb</a>(*<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmio_outsw\">mmio_outsw</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#count\">count</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raw_writew\">__raw_writew</a>(*<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmio_outsl\">mmio_outsl</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#count\">count</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raw_writel\">__raw_writel</a>(*<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#ioread8_rep\">ioread8_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#dst\">dst</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#insb\">insb</a>(<a class=\"id\" href=\"#port\">port</a>,<a class=\"id\" href=\"#dst\">dst</a>,<a class=\"id\" href=\"#count\">count</a>), <a class=\"id\" href=\"#mmio_insb\">mmio_insb</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#count\">count</a>));", 
"}", 
"void <a class=\"id\" href=\"#ioread16_rep\">ioread16_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#dst\">dst</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#insw\">insw</a>(<a class=\"id\" href=\"#port\">port</a>,<a class=\"id\" href=\"#dst\">dst</a>,<a class=\"id\" href=\"#count\">count</a>), <a class=\"id\" href=\"#mmio_insw\">mmio_insw</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#count\">count</a>));", 
"}", 
"void <a class=\"id\" href=\"#ioread32_rep\">ioread32_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#dst\">dst</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#insl\">insl</a>(<a class=\"id\" href=\"#port\">port</a>,<a class=\"id\" href=\"#dst\">dst</a>,<a class=\"id\" href=\"#count\">count</a>), <a class=\"id\" href=\"#mmio_insl\">mmio_insl</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#count\">count</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioread8_rep\">ioread8_rep</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioread16_rep\">ioread16_rep</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioread32_rep\">ioread32_rep</a>);", 
"", 
"void <a class=\"id\" href=\"#iowrite8_rep\">iowrite8_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, const void *<a class=\"id\" href=\"#src\">src</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#outsb\">outsb</a>(<a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#count\">count</a>), <a class=\"id\" href=\"#mmio_outsb\">mmio_outsb</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#count\">count</a>));", 
"}", 
"void <a class=\"id\" href=\"#iowrite16_rep\">iowrite16_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, const void *<a class=\"id\" href=\"#src\">src</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#outsw\">outsw</a>(<a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#count\">count</a>), <a class=\"id\" href=\"#mmio_outsw\">mmio_outsw</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#count\">count</a>));", 
"}", 
"void <a class=\"id\" href=\"#iowrite32_rep\">iowrite32_rep</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, const void *<a class=\"id\" href=\"#src\">src</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IO_COND\">IO_COND</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#outsl\">outsl</a>(<a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#src\">src</a>,<a class=\"id\" href=\"#count\">count</a>), <a class=\"id\" href=\"#mmio_outsl\">mmio_outsl</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#count\">count</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iowrite8_rep\">iowrite8_rep</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iowrite16_rep\">iowrite16_rep</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iowrite32_rep\">iowrite32_rep</a>);", 
"", 
"<span class=\"comment\">/* Create a virtual mapping cookie for an IO port range */</span>", 
"void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioport_map\">ioport_map</a>(unsigned long <a class=\"id\" href=\"#port\">port</a>, unsigned int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#port\">port</a> &gt; <a class=\"id\" href=\"#PIO_MASK\">PIO_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return (void <a class=\"id\" href=\"#__iomem\">__iomem</a> *) (unsigned long) (<a class=\"id\" href=\"#port\">port</a> + <a class=\"id\" href=\"#PIO_OFFSET\">PIO_OFFSET</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ioport_unmap\">ioport_unmap</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Nothing to do */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioport_map\">ioport_map</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioport_unmap\">ioport_unmap</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_iomap - create a virtual mapping cookie for a PCI BAR</span>", 
"<span class=\"comment\"> * @dev: PCI device that owns the BAR</span>", 
"<span class=\"comment\"> * @bar: BAR number</span>", 
"<span class=\"comment\"> * @maxlen: length of the memory to map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Using this function you will get a __iomem address to your device BAR.</span>", 
"<span class=\"comment\"> * You can access it using ioread*() and iowrite*(). These functions hide</span>", 
"<span class=\"comment\"> * the details if this is a MMIO or PIO address space and will just do what</span>", 
"<span class=\"comment\"> * you expect from them in the correct way.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @maxlen specifies the maximum length to map. If you want to get access to</span>", 
"<span class=\"comment\"> * the complete BAR without checking for its length first, pass %0 here.</span>", 
"<span class=\"comment\"> * */</span>", 
"void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#pci_iomap\">pci_iomap</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#bar\">bar</a>, unsigned long <a class=\"id\" href=\"#maxlen\">maxlen</a>)", 
"{", 
];
xr_frag_insert('l/e2/689f63f7d3ecaec6b38ed8ddc1956380101404.xr', __xr_tmp);
