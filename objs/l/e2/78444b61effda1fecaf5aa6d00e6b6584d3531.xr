var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_SCATTERLIST_H\">_LINUX_SCATTERLIST_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_SCATTERLIST_H\">_LINUX_SCATTERLIST_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#sg_table\">sg_table</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>;<span class=\"ts\"/><span class=\"comment\">/* the list */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nents\">nents</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of mapped entries */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#orig_nents\">orig_nents</a>;<span class=\"ts\"/><span class=\"comment\">/* original size of list */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Notes on SG table design.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Architectures must provide an unsigned long page_link field in the</span>", 
"<span class=\"comment\"> * scatterlist struct. We use that to place the page pointer AND encode</span>", 
"<span class=\"comment\"> * information about the sg table as well. The two lower bits are reserved</span>", 
"<span class=\"comment\"> * for this information.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If bit 0 is set, then the page_link contains a pointer to the next sg</span>", 
"<span class=\"comment\"> * table list. Otherwise the next entry is at sg + 1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If bit 1 is set, then this sg entry is the last element in a list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See sg_next().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_MAGIC\">SG_MAGIC</a><span class=\"ts\"/>0x87654321", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We overload the LSB of the page pointer to indicate whether it's</span>", 
"<span class=\"comment\"> * a valid sg entry, or whether it points to the start of a new scatterlist.</span>", 
"<span class=\"comment\"> * Those low bits are there for everyone! (thanks mason :-)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sg_is_chain\">sg_is_chain</a>(<a class=\"id\" href=\"#sg\">sg</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#sg\">sg</a>)-><a class=\"id\" href=\"#page_link\">page_link</a> &amp; 0x01)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sg_is_last\">sg_is_last</a>(<a class=\"id\" href=\"#sg\">sg</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#sg\">sg</a>)-><a class=\"id\" href=\"#page_link\">page_link</a> &amp; 0x02)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sg_chain_ptr\">sg_chain_ptr</a>(<a class=\"id\" href=\"#sg\">sg</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *) ((<a class=\"id\" href=\"#sg\">sg</a>)-><a class=\"id\" href=\"#page_link\">page_link</a> &amp; ~0x03))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_assign_page - Assign a given page to an SG entry</span>", 
"<span class=\"comment\"> * @sg:<span class=\"ts\"/><span class=\"ts\"/>    SG entry</span>", 
"<span class=\"comment\"> * @page:<span class=\"ts\"/>    The page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Assign page to sg entry. Also see sg_set_page(), the most commonly used</span>", 
"<span class=\"comment\"> *   variant.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sg_assign_page\">sg_assign_page</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page_link\">page_link</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#page_link\">page_link</a> &amp; 0x3;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In order for the low bit stealing approach to work, pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must be aligned at a 32-bit boundary as a minimum.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned long) <a class=\"id\" href=\"#page\">page</a> &amp; 0x03);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SG\">CONFIG_DEBUG_SG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#sg_magic\">sg_magic</a> != <a class=\"id\" href=\"#SG_MAGIC\">SG_MAGIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sg_is_chain\">sg_is_chain</a>(<a class=\"id\" href=\"#sg\">sg</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#page_link\">page_link</a> = <a class=\"id\" href=\"#page_link\">page_link</a> | (unsigned long) <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_set_page - Set sg entry to point at given page</span>", 
"<span class=\"comment\"> * @sg:<span class=\"ts\"/><span class=\"ts\"/> SG entry</span>", 
"<span class=\"comment\"> * @page:<span class=\"ts\"/> The page</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/> Length of data</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/> Offset into page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Use this function to set an sg entry pointing at a page, never assign</span>", 
"<span class=\"comment\"> *   the page directly. We encode sg table information in the lower bits</span>", 
"<span class=\"comment\"> *   of the page pointer. See sg_page() for looking up the page belonging</span>", 
"<span class=\"comment\"> *   to an sg entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sg_set_page\">sg_set_page</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_assign_page\">sg_assign_page</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#sg_page\">sg_page</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SG\">CONFIG_DEBUG_SG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#sg_magic\">sg_magic</a> != <a class=\"id\" href=\"#SG_MAGIC\">SG_MAGIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sg_is_chain\">sg_is_chain</a>(<a class=\"id\" href=\"#sg\">sg</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#page\">page</a> *)((<a class=\"id\" href=\"#sg\">sg</a>)-><a class=\"id\" href=\"#page_link\">page_link</a> &amp; ~0x3);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_set_buf - Set sg entry to point at given data</span>", 
"<span class=\"comment\"> * @sg:<span class=\"ts\"/><span class=\"ts\"/> SG entry</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/> Data</span>", 
"<span class=\"comment\"> * @buflen:<span class=\"ts\"/> Data length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sg_set_buf\">sg_set_buf</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, const void *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_set_page\">sg_set_page</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#buf\">buf</a>), <a class=\"id\" href=\"#buflen\">buflen</a>, <a class=\"id\" href=\"#offset_in_page\">offset_in_page</a>(<a class=\"id\" href=\"#buf\">buf</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Loop over each sg element, following the pointer to a new list if necessary</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sglist\">sglist</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#__i\">__i</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#__i\">__i</a> = 0, <a class=\"id\" href=\"#sg\">sg</a> = (<a class=\"id\" href=\"#sglist\">sglist</a>); <a class=\"id\" href=\"#__i\">__i</a> &lt; (<a class=\"id\" href=\"#nr\">nr</a>); <a class=\"id\" href=\"#__i\">__i</a>++, <a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#sg_next\">sg_next</a>(<a class=\"id\" href=\"#sg\">sg</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_chain - Chain two sglists together</span>", 
"<span class=\"comment\"> * @prv:<span class=\"ts\"/>First scatterlist</span>", 
"<span class=\"comment\"> * @prv_nents:<span class=\"ts\"/>Number of entries in prv</span>", 
"<span class=\"comment\"> * @sgl:<span class=\"ts\"/>Second scatterlist</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Links @prv@ and @sgl@ together, to form a longer scatterlist.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sg_chain\">sg_chain</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#prv\">prv</a>, unsigned int <a class=\"id\" href=\"#prv_nents\">prv_nents</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_SG_CHAIN\">ARCH_HAS_SG_CHAIN</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * offset and length are unused for chain entry.  Clear them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prv\">prv</a>[<a class=\"id\" href=\"#prv_nents\">prv_nents</a> - 1].<a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prv\">prv</a>[<a class=\"id\" href=\"#prv_nents\">prv_nents</a> - 1].<a class=\"id\" href=\"#length\">length</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set lowest bit to indicate a link pointer, and make sure to clear</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the termination bit if it happens to be set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prv\">prv</a>[<a class=\"id\" href=\"#prv_nents\">prv_nents</a> - 1].<a class=\"id\" href=\"#page_link\">page_link</a> = ((unsigned long) <a class=\"id\" href=\"#sgl\">sgl</a> | 0x01) &amp; ~0x02;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_mark_end - Mark the end of the scatterlist</span>", 
"<span class=\"comment\"> * @sg:<span class=\"ts\"/><span class=\"ts\"/> SG entryScatterlist</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Marks the passed in sg entry as the termination point for the sg</span>", 
"<span class=\"comment\"> *   table. A call to sg_next() on this entry will return NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sg_mark_end\">sg_mark_end</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SG\">CONFIG_DEBUG_SG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#sg_magic\">sg_magic</a> != <a class=\"id\" href=\"#SG_MAGIC\">SG_MAGIC</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set termination bit, clear potential chain bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#page_link\">page_link</a> |= 0x02;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#page_link\">page_link</a> &= ~0x01;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_phys - Return physical address of an sg entry</span>", 
"<span class=\"comment\"> * @sg:<span class=\"ts\"/>     SG entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   This calls page_to_phys() on the page in this sg entry, and adds the</span>", 
"<span class=\"comment\"> *   sg offset. The caller must know that it is legal to call page_to_phys()</span>", 
"<span class=\"comment\"> *   on the sg page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#sg\">sg</a>)) + <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_virt - Return virtual address of an sg entry</span>", 
"<span class=\"comment\"> * @sg:      SG entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   This calls page_address() on the page in this sg entry, and adds the</span>", 
"<span class=\"comment\"> *   sg offset. The caller must know that the sg page has a valid virtual</span>", 
"<span class=\"comment\"> *   mapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#sg_virt\">sg_virt</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#sg\">sg</a>)) + <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg_next\">sg_next</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *);", 
"struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg_last\">sg_last</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#s\">s</a>, unsigned int);", 
"void <a class=\"id\" href=\"#sg_init_table\">sg_init_table</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *, unsigned int);", 
"void <a class=\"id\" href=\"#sg_init_one\">sg_init_one</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *, const void *, unsigned int);", 
"", 
"typedef struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *(<a class=\"id\" href=\"#sg_alloc_fn\">sg_alloc_fn</a>)(unsigned int, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"typedef void (<a class=\"id\" href=\"#sg_free_fn\">sg_free_fn</a>)(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *, unsigned int);", 
"", 
"void <a class=\"id\" href=\"#__sg_free_table\">__sg_free_table</a>(struct <a class=\"id\" href=\"#sg_table\">sg_table</a> *, unsigned int, <a class=\"id\" href=\"#sg_free_fn\">sg_free_fn</a> *);", 
"void <a class=\"id\" href=\"#sg_free_table\">sg_free_table</a>(struct <a class=\"id\" href=\"#sg_table\">sg_table</a> *);", 
"int <a class=\"id\" href=\"#__sg_alloc_table\">__sg_alloc_table</a>(struct <a class=\"id\" href=\"#sg_table\">sg_table</a> *, unsigned int, unsigned int, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sg_alloc_fn\">sg_alloc_fn</a> *);", 
"int <a class=\"id\" href=\"#sg_alloc_table\">sg_alloc_table</a>(struct <a class=\"id\" href=\"#sg_table\">sg_table</a> *, unsigned int, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#sg_copy_from_buffer\">sg_copy_from_buffer</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, unsigned int <a class=\"id\" href=\"#nents\">nents</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#sg_copy_to_buffer\">sg_copy_to_buffer</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, unsigned int <a class=\"id\" href=\"#nents\">nents</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Maximum number of entries that will be allocated in one piece, if</span>", 
"<span class=\"comment\"> * a list larger than this is required then chaining will be utilized.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_MAX_SINGLE_ALLOC\">SG_MAX_SINGLE_ALLOC</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a>))", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mapping sg iterator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterates over sg entries mapping page-by-page.  On each successful</span>", 
"<span class=\"comment\"> * iteration, @miter-&gt;page points to the mapped page and</span>", 
"<span class=\"comment\"> * @miter-&gt;length bytes of data can be accessed at @miter-&gt;addr.  As</span>", 
"<span class=\"comment\"> * long as an interation is enclosed between start and stop, the user</span>", 
"<span class=\"comment\"> * is free to choose control structure and when to stop.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @miter-&gt;consumed is set to @miter-&gt;length on each iteration.  It</span>", 
"<span class=\"comment\"> * can be adjusted if the user can't consume all the bytes in one go.</span>", 
"<span class=\"comment\"> * Also, a stopped iteration can be resumed by calling next on it.</span>", 
"<span class=\"comment\"> * This is useful when iteration needs to release all resources and</span>", 
"<span class=\"comment\"> * continue later (e.g. at the next interrupt).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_MITER_ATOMIC\">SG_MITER_ATOMIC</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 0)<span class=\"ts\"/> <span class=\"comment\">/* use kmap_atomic */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_MITER_TO_SG\">SG_MITER_TO_SG</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 1)<span class=\"ts\"/><span class=\"comment\">/* flush back to phys on unmap */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SG_MITER_FROM_SG\">SG_MITER_FROM_SG</a><span class=\"ts\"/>(1 << 2)<span class=\"ts\"/><span class=\"comment\">/* nop */</span>", 
"", 
"struct <a class=\"id\" href=\"#sg_mapping_iter\">sg_mapping_iter</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* the following three fields can be accessed directly */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#page\">page</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* currently mapped page */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pointer to the mapped area */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* length of the mapped area */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#consumed\">consumed</a>;<span class=\"ts\"/><span class=\"comment\">/* number of consumed bytes */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* these are internal states, keep away */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a><span class=\"ts\"/>*<a class=\"id\" href=\"#__sg\">__sg</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* current entry */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nents\">__nents</a>;<span class=\"ts\"/><span class=\"comment\">/* nr of remaining entries */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__offset\">__offset</a>;<span class=\"ts\"/><span class=\"comment\">/* offset within sg */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__flags\">__flags</a>;", 
"};", 
"", 
"void <a class=\"id\" href=\"#sg_miter_start\">sg_miter_start</a>(struct <a class=\"id\" href=\"#sg_mapping_iter\">sg_mapping_iter</a> *<a class=\"id\" href=\"#miter\">miter</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#nents\">nents</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#sg_miter_next\">sg_miter_next</a>(struct <a class=\"id\" href=\"#sg_mapping_iter\">sg_mapping_iter</a> *<a class=\"id\" href=\"#miter\">miter</a>);", 
"void <a class=\"id\" href=\"#sg_miter_stop\">sg_miter_stop</a>(struct <a class=\"id\" href=\"#sg_mapping_iter\">sg_mapping_iter</a> *<a class=\"id\" href=\"#miter\">miter</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_SCATTERLIST_H */</span>", 
];
xr_frag_insert('l/e2/78444b61effda1fecaf5aa6d00e6b6584d3531.xr', __xr_tmp);
