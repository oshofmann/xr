var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: nsrepair2 - Repair for objects returned by specific</span>", 
"<span class=\"comment\"> *                          predefined methods</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_NAMESPACE\">ACPI_NAMESPACE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"nsrepair2\")", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Information structure and handler for ACPI predefined names that can</span>", 
"<span class=\"comment\"> * be repaired on a per-name basis.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>(*<a class=\"id\" href=\"#acpi_repair_function\">acpi_repair_function</a>) (struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>);", 
"", 
"typedef struct <a class=\"id\" href=\"#acpi_repair_info\">acpi_repair_info</a> {", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_repair_function\">acpi_repair_function</a> <a class=\"id\" href=\"#repair_function\">repair_function</a>;", 
"", 
"} <a class=\"id\" href=\"#acpi_repair_info\">acpi_repair_info</a>;", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"", 
"static const struct <a class=\"id\" href=\"#acpi_repair_info\">acpi_repair_info</a> *<a class=\"id\" href=\"#acpi_ns_match_repairable_name\">acpi_ns_match_repairable_name</a>(struct", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    *<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_repair_ALR\">acpi_ns_repair_ALR</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_repair_FDE\">acpi_ns_repair_FDE</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_repair_PSS\">acpi_ns_repair_PSS</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_repair_TSS\">acpi_ns_repair_TSS</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_check_sorted_list\">acpi_ns_check_sorted_list</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_object\">return_object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#expected_count\">expected_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sort_index\">sort_index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sort_direction\">sort_direction</a>, char *<a class=\"id\" href=\"#sort_key_name\">sort_key_name</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#acpi_ns_sort_list\">acpi_ns_sort_list</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#elements\">elements</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sort_direction\">sort_direction</a>);", 
"", 
"<span class=\"comment\">/* Values for sort_direction above */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_SORT_ASCENDING\">ACPI_SORT_ASCENDING</a>     0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_SORT_DESCENDING\">ACPI_SORT_DESCENDING</a>    1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This table contains the names of the predefined methods for which we can</span>", 
"<span class=\"comment\"> * perform more complex repairs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As necessary:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * _ALR: Sort the list ascending by ambient_illuminance</span>", 
"<span class=\"comment\"> * _FDE: Convert Buffer of BYTEs to a Buffer of DWORDs</span>", 
"<span class=\"comment\"> * _GTM: Convert Buffer of BYTEs to a Buffer of DWORDs</span>", 
"<span class=\"comment\"> * _PSS: Sort the list descending by Power</span>", 
"<span class=\"comment\"> * _TSS: Sort the list descending by Power</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Names that must be packages, but cannot be sorted:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * _BCL: Values are tied to the Package index where they appear, and cannot</span>", 
"<span class=\"comment\"> * be moved or sorted. These index values are used for _BQC and _BCM.</span>", 
"<span class=\"comment\"> * However, we can fix the case where a buffer is returned, by converting</span>", 
"<span class=\"comment\"> * it to a Package of integers.</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#acpi_repair_info\">acpi_repair_info</a> <a class=\"id\" href=\"#acpi_ns_repairable_names\">acpi_ns_repairable_names</a>[] = {", 
"<span class=\"ts\"/>{\"_ALR\", <a class=\"id\" href=\"#acpi_ns_repair_ALR\">acpi_ns_repair_ALR</a>},", 
"<span class=\"ts\"/>{\"_FDE\", <a class=\"id\" href=\"#acpi_ns_repair_FDE\">acpi_ns_repair_FDE</a>},", 
"<span class=\"ts\"/>{\"_GTM\", <a class=\"id\" href=\"#acpi_ns_repair_FDE\">acpi_ns_repair_FDE</a>},<span class=\"ts\"/><span class=\"comment\">/* _GTM has same repair as _FDE */</span>", 
"<span class=\"ts\"/>{\"_PSS\", <a class=\"id\" href=\"#acpi_ns_repair_PSS\">acpi_ns_repair_PSS</a>},", 
"<span class=\"ts\"/>{\"_TSS\", <a class=\"id\" href=\"#acpi_ns_repair_TSS\">acpi_ns_repair_TSS</a>},", 
"<span class=\"ts\"/>{{0, 0, 0, 0}, <a class=\"id\" href=\"#NULL\">NULL</a>}<span class=\"ts\"/><span class=\"comment\">/* Table terminator */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_FDE_FIELD_COUNT\">ACPI_FDE_FIELD_COUNT</a>        5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_FDE_BYTE_BUFFER_SIZE\">ACPI_FDE_BYTE_BUFFER_SIZE</a>   5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_FDE_DWORD_BUFFER_SIZE\">ACPI_FDE_DWORD_BUFFER_SIZE</a>  (<a class=\"id\" href=\"#ACPI_FDE_FIELD_COUNT\">ACPI_FDE_FIELD_COUNT</a> * sizeof (<a class=\"id\" href=\"#u32\">u32</a>))", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_complex_repairs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Data                - Pointer to validation data structure</span>", 
"<span class=\"comment\"> *              Node                - Namespace node for the method/object</span>", 
"<span class=\"comment\"> *              validate_status     - Original status of earlier validation</span>", 
"<span class=\"comment\"> *              return_object_ptr   - Pointer to the object returned from the</span>", 
"<span class=\"comment\"> *                                    evaluation of a method or object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status. AE_OK if repair was successful. If name is not</span>", 
"<span class=\"comment\"> *              matched, validate_status is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Attempt to repair/convert a return object of a type that was</span>", 
"<span class=\"comment\"> *              not expected.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_complex_repairs\">acpi_ns_complex_repairs</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#validate_status\">validate_status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#acpi_repair_info\">acpi_repair_info</a> *<a class=\"id\" href=\"#predefined\">predefined</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if this name is in the list of repairable names */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#predefined\">predefined</a> = <a class=\"id\" href=\"#acpi_ns_match_repairable_name\">acpi_ns_match_repairable_name</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#predefined\">predefined</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#validate_status\">validate_status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#predefined\">predefined</a>-><a class=\"id\" href=\"#repair_function\">repair_function</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_match_repairable_name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Node                - Namespace node for the method/object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Pointer to entry in repair table. NULL indicates not found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check an object name against the repairable object list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"static const struct <a class=\"id\" href=\"#acpi_repair_info\">acpi_repair_info</a> *<a class=\"id\" href=\"#acpi_ns_match_repairable_name\">acpi_ns_match_repairable_name</a>(struct", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#acpi_repair_info\">acpi_repair_info</a> *<a class=\"id\" href=\"#this_name\">this_name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Search info table for a repairable predefined method/object name */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_name\">this_name</a> = <a class=\"id\" href=\"#acpi_ns_repairable_names\">acpi_ns_repairable_names</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#this_name\">this_name</a>-><a class=\"id\" href=\"#repair_function\">repair_function</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_COMPARE_NAME\">ACPI_COMPARE_NAME</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#ascii\">ascii</a>, <a class=\"id\" href=\"#this_name\">this_name</a>-><a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#this_name\">this_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_name\">this_name</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#NULL\">NULL</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not found */</span>", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_repair_ALR</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Data                - Pointer to validation data structure</span>", 
"<span class=\"comment\"> *              return_object_ptr   - Pointer to the object returned from the</span>", 
"<span class=\"comment\"> *                                    evaluation of a method or object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status. AE_OK if object is OK or was repaired successfully</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Repair for the _ALR object. If necessary, sort the object list</span>", 
"<span class=\"comment\"> *              ascending by the ambient illuminance values.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_repair_ALR\">acpi_ns_repair_ALR</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_object\">return_object</a> = *<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_check_sorted_list\">acpi_ns_check_sorted_list</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#return_object\">return_object</a>, 2, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_SORT_ASCENDING\">ACPI_SORT_ASCENDING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"AmbientIlluminance\");", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_repair_FDE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Data                - Pointer to validation data structure</span>", 
"<span class=\"comment\"> *              return_object_ptr   - Pointer to the object returned from the</span>", 
"<span class=\"comment\"> *                                    evaluation of a method or object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status. AE_OK if object is OK or was repaired successfully</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Repair for the _FDE and _GTM objects. The expected return</span>", 
"<span class=\"comment\"> *              value is a Buffer of 5 DWORDs. This function repairs a common</span>", 
"<span class=\"comment\"> *              problem where the return value is a Buffer of BYTEs, not</span>", 
"<span class=\"comment\"> *              DWORDs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_repair_FDE\">acpi_ns_repair_FDE</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_object\">return_object</a> = *<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#buffer_object\">buffer_object</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#byte_buffer\">byte_buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#dword_buffer\">dword_buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#ns_repair_FDE\">ns_repair_FDE</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is the expected type. Length should be (at least) 5 DWORDs */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> >= <a class=\"id\" href=\"#ACPI_FDE_DWORD_BUFFER_SIZE\">ACPI_FDE_DWORD_BUFFER_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We can only repair if we have exactly 5 BYTEs */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> != <a class=\"id\" href=\"#ACPI_FDE_BYTE_BUFFER_SIZE\">ACPI_FDE_BYTE_BUFFER_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARN_PREDEFINED\">ACPI_WARN_PREDEFINED</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#node_flags\">node_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Incorrect return buffer length %u, expected %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_FDE_DWORD_BUFFER_SIZE\">ACPI_FDE_DWORD_BUFFER_SIZE</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_OPERAND_TYPE\">AE_AML_OPERAND_TYPE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Create the new (larger) buffer object */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer_object\">buffer_object</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_create_buffer_object\">acpi_ut_create_buffer_object</a>(<a class=\"id\" href=\"#ACPI_FDE_DWORD_BUFFER_SIZE\">ACPI_FDE_DWORD_BUFFER_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_object\">buffer_object</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Expand each byte to a DWORD */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#byte_buffer\">byte_buffer</a> = <a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dword_buffer\">dword_buffer</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(<a class=\"id\" href=\"#u32\">u32</a>, <a class=\"id\" href=\"#buffer_object\">buffer_object</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_FDE_FIELD_COUNT\">ACPI_FDE_FIELD_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dword_buffer\">dword_buffer</a> = (<a class=\"id\" href=\"#u32\">u32</a>) *<a class=\"id\" href=\"#byte_buffer\">byte_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dword_buffer\">dword_buffer</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#byte_buffer\">byte_buffer</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_REPAIR\">ACPI_DB_REPAIR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%s Expanded Byte Buffer to expected DWord Buffer\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#pathname\">pathname</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_OPERAND_TYPE\">AE_AML_OPERAND_TYPE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Delete the original return object, return the new buffer object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#return_object\">return_object</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a> = <a class=\"id\" href=\"#buffer_object\">buffer_object</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ACPI_OBJECT_REPAIRED\">ACPI_OBJECT_REPAIRED</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_repair_TSS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Data                - Pointer to validation data structure</span>", 
"<span class=\"comment\"> *              return_object_ptr   - Pointer to the object returned from the</span>", 
"<span class=\"comment\"> *                                    evaluation of a method or object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status. AE_OK if object is OK or was repaired successfully</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Repair for the _TSS object. If necessary, sort the object list</span>", 
"<span class=\"comment\"> *              descending by the power dissipation values.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_repair_TSS\">acpi_ns_repair_TSS</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_object\">return_object</a> = *<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_check_sorted_list\">acpi_ns_check_sorted_list</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#return_object\">return_object</a>, 5, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_SORT_DESCENDING\">ACPI_SORT_DESCENDING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"PowerDissipation\");", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_repair_PSS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Data                - Pointer to validation data structure</span>", 
"<span class=\"comment\"> *              return_object_ptr   - Pointer to the object returned from the</span>", 
"<span class=\"comment\"> *                                    evaluation of a method or object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status. AE_OK if object is OK or was repaired successfully</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Repair for the _PSS object. If necessary, sort the object list</span>", 
"<span class=\"comment\"> *              by the CPU frequencies. Check that the power dissipation values</span>", 
"<span class=\"comment\"> *              are all proportional to CPU frequency (i.e., sorting by</span>", 
"<span class=\"comment\"> *              frequency should be the same as sorting by power.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_repair_PSS\">acpi_ns_repair_PSS</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_object\">return_object</a> = *<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#outer_elements\">outer_elements</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#outer_element_count\">outer_element_count</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#elements\">elements</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#previous_value\">previous_value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Entries (sub-packages) in the _PSS Package must be sorted by power</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dissipation, in descending order. If it appears that the list is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * incorrectly sorted, sort it. We sort by cpu_frequency, since this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should be proportional to the power.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_check_sorted_list\">acpi_ns_check_sorted_list</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#return_object\">return_object</a>, 6, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_SORT_DESCENDING\">ACPI_SORT_DESCENDING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"CpuFrequency\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We now know the list is correctly sorted by CPU frequency. Check if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the power dissipation values are proportional.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#previous_value\">previous_value</a> = <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outer_elements\">outer_elements</a> = <a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outer_element_count\">outer_element_count</a> = <a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#outer_element_count\">outer_element_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elements\">elements</a> = (*<a class=\"id\" href=\"#outer_elements\">outer_elements</a>)-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a> = <a class=\"id\" href=\"#elements\">elements</a>[1];<span class=\"ts\"/><span class=\"comment\">/* Index1 = power_dissipation */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> &gt; <a class=\"id\" href=\"#previous_value\">previous_value</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARN_PREDEFINED\">ACPI_WARN_PREDEFINED</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#node_flags\">node_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"SubPackage[%u,%u] - suspicious power dissipation values\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#i\">i</a> - 1, <a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#previous_value\">previous_value</a> = (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outer_elements\">outer_elements</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_check_sorted_list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Data                - Pointer to validation data structure</span>", 
"<span class=\"comment\"> *              return_object       - Pointer to the top-level returned object</span>", 
"<span class=\"comment\"> *              expected_count      - Minimum length of each sub-package</span>", 
"<span class=\"comment\"> *              sort_index          - Sub-package entry to sort on</span>", 
"<span class=\"comment\"> *              sort_direction      - Ascending or descending</span>", 
"<span class=\"comment\"> *              sort_key_name       - Name of the sort_index field</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status. AE_OK if the list is valid and is sorted correctly or</span>", 
"<span class=\"comment\"> *              has been repaired by sorting the list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check if the package list is valid and sorted correctly by the</span>", 
"<span class=\"comment\"> *              sort_index. If not, then sort the list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_check_sorted_list\">acpi_ns_check_sorted_list</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_object\">return_object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#expected_count\">expected_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sort_index\">sort_index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sort_direction\">sort_direction</a>, char *<a class=\"id\" href=\"#sort_key_name\">sort_key_name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#outer_element_count\">outer_element_count</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#outer_elements\">outer_elements</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#elements\">elements</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#previous_value\">previous_value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#ns_check_sorted_list\">ns_check_sorted_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The top-level object must be a package */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_PACKAGE\">ACPI_TYPE_PACKAGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_OPERAND_TYPE\">AE_AML_OPERAND_TYPE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: assumes list of sub-packages contains no NULL elements.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Any NULL elements should have been removed by earlier call</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to acpi_ns_remove_null_elements.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outer_elements\">outer_elements</a> = <a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outer_element_count\">outer_element_count</a> = <a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#outer_element_count\">outer_element_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_PACKAGE_LIMIT\">AE_AML_PACKAGE_LIMIT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#previous_value\">previous_value</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sort_direction\">sort_direction</a> == <a class=\"id\" href=\"#ACPI_SORT_DESCENDING\">ACPI_SORT_DESCENDING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#previous_value\">previous_value</a> = <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Examine each subpackage */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#outer_element_count\">outer_element_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Each element of the top-level package must also be a package */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#outer_elements\">outer_elements</a>)-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_PACKAGE\">ACPI_TYPE_PACKAGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_OPERAND_TYPE\">AE_AML_OPERAND_TYPE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Each sub-package must have the minimum length */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#outer_elements\">outer_elements</a>)-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#expected_count\">expected_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_PACKAGE_LIMIT\">AE_AML_PACKAGE_LIMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elements\">elements</a> = (*<a class=\"id\" href=\"#outer_elements\">outer_elements</a>)-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a> = <a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#sort_index\">sort_index</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_OPERAND_TYPE\">AE_AML_OPERAND_TYPE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The list must be sorted in the specified order. If we detect a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * discrepancy, sort the entire list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#sort_direction\">sort_direction</a> == <a class=\"id\" href=\"#ACPI_SORT_ASCENDING\">ACPI_SORT_ASCENDING</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> &lt; <a class=\"id\" href=\"#previous_value\">previous_value</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#sort_direction\">sort_direction</a> == <a class=\"id\" href=\"#ACPI_SORT_DESCENDING\">ACPI_SORT_DESCENDING</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> &gt; <a class=\"id\" href=\"#previous_value\">previous_value</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_sort_list\">acpi_ns_sort_list</a>(<a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#outer_element_count\">outer_element_count</a>, <a class=\"id\" href=\"#sort_index\">sort_index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sort_direction\">sort_direction</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ACPI_OBJECT_REPAIRED\">ACPI_OBJECT_REPAIRED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_REPAIR\">ACPI_DB_REPAIR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%s: Repaired unsorted list - now sorted by %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#sort_key_name\">sort_key_name</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#previous_value\">previous_value</a> = (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outer_elements\">outer_elements</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_sort_list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Elements            - Package object element list</span>", 
"<span class=\"comment\"> *              Count               - Element count for above</span>", 
"<span class=\"comment\"> *              Index               - Sort by which package element</span>", 
"<span class=\"comment\"> *              sort_direction      - Ascending or Descending sort</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Sort the objects that are in a package element list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: Assumes that all NULL elements have been removed from the package,</span>", 
"<span class=\"comment\"> *       and that all elements have been verified to be of type Integer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#acpi_ns_sort_list\">acpi_ns_sort_list</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#elements\">elements</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sort_direction\">sort_direction</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc1\">obj_desc1</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc2\">obj_desc2</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#temp_obj\">temp_obj</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Simple bubble sort */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = (<a class=\"id\" href=\"#count\">count</a> - 1); <a class=\"id\" href=\"#j\">j</a> >= <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#j\">j</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc1\">obj_desc1</a> = <a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#j\">j</a> - 1]-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc2\">obj_desc2</a> = <a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#j\">j</a>]-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#sort_direction\">sort_direction</a> == <a class=\"id\" href=\"#ACPI_SORT_ASCENDING\">ACPI_SORT_ASCENDING</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#obj_desc1\">obj_desc1</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#obj_desc2\">obj_desc2</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    || ((<a class=\"id\" href=\"#sort_direction\">sort_direction</a> == <a class=\"id\" href=\"#ACPI_SORT_DESCENDING\">ACPI_SORT_DESCENDING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& (<a class=\"id\" href=\"#obj_desc1\">obj_desc1</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc2\">obj_desc2</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp_obj\">temp_obj</a> = <a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#j\">j</a> - 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#j\">j</a> - 1] = <a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#temp_obj\">temp_obj</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/e2/78c00ef1a257d282d5f34747e1b19ed2c0c14d.xr', __xr_tmp);
