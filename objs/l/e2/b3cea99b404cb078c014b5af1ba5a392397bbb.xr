var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read-Copy Update mechanism for mutual exclusion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright IBM Corporation, 2001</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors: Dipankar Sarma &lt;dipankar@in.ibm.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on the original work by Paul McKenney &lt;paulmck@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> * and inputs from Rusty Russell, Andrea Arcangeli and Andi Kleen.</span>", 
"<span class=\"comment\"> * Papers:</span>", 
"<span class=\"comment\"> * http://www.rdrop.com/users/paulmck/paper/rclockpdcsproof.pdf</span>", 
"<span class=\"comment\"> * http://lse.sourceforge.net/locking/rclock_OLS.2001.05.01c.sc.pdf (OLS2001)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For detailed explanation of Read-Copy Update mechanism see -</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>http://lse.sourceforge.net/locking/rcupdate.html</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#rcu_lock_key\">rcu_lock_key</a>;", 
"struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#rcu_lock_map\">rcu_lock_map</a> =", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATIC_LOCKDEP_MAP_INIT\">STATIC_LOCKDEP_MAP_INIT</a>(\"rcu_read_lock\", &amp;<a class=\"id\" href=\"#rcu_lock_key\">rcu_lock_key</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_lock_map\">rcu_lock_map</a>);", 
"", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#rcu_bh_lock_key\">rcu_bh_lock_key</a>;", 
"struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#rcu_bh_lock_map\">rcu_bh_lock_map</a> =", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATIC_LOCKDEP_MAP_INIT\">STATIC_LOCKDEP_MAP_INIT</a>(\"rcu_read_lock_bh\", &amp;<a class=\"id\" href=\"#rcu_bh_lock_key\">rcu_bh_lock_key</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_bh_lock_map\">rcu_bh_lock_map</a>);", 
"", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#rcu_sched_lock_key\">rcu_sched_lock_key</a>;", 
"struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#rcu_sched_lock_map\">rcu_sched_lock_map</a> =", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATIC_LOCKDEP_MAP_INIT\">STATIC_LOCKDEP_MAP_INIT</a>(\"rcu_read_lock_sched\", &amp;<a class=\"id\" href=\"#rcu_sched_lock_key\">rcu_sched_lock_key</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_sched_lock_map\">rcu_sched_lock_map</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"", 
"int <a class=\"id\" href=\"#debug_lockdep_rcu_enabled\">debug_lockdep_rcu_enabled</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_scheduler_active\">rcu_scheduler_active</a> && <a class=\"id\" href=\"#debug_locks\">debug_locks</a> &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#lockdep_recursion\">lockdep_recursion</a> == 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debug_lockdep_rcu_enabled\">debug_lockdep_rcu_enabled</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_read_lock_bh_held - might we be in RCU-bh read-side critical section?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check for bottom half being disabled, which covers both the</span>", 
"<span class=\"comment\"> * CONFIG_PROVE_RCU and not cases.  Note that if someone uses</span>", 
"<span class=\"comment\"> * rcu_read_lock_bh(), but then later enables BH, lockdep (if enabled)</span>", 
"<span class=\"comment\"> * will show the situation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check debug_lockdep_rcu_enabled() to prevent false positives during boot.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#rcu_read_lock_bh_held\">rcu_read_lock_bh_held</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug_lockdep_rcu_enabled\">debug_lockdep_rcu_enabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#in_softirq\">in_softirq</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_read_lock_bh_held\">rcu_read_lock_bh_held</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_DEBUG_LOCK_ALLOC */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Awaken the corresponding synchronize_rcu() instance now that a</span>", 
"<span class=\"comment\"> * grace period has elapsed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wakeme_after_rcu\">wakeme_after_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a>  *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_synchronize\">rcu_synchronize</a> *<a class=\"id\" href=\"#rcu\">rcu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu\">rcu</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#rcu_synchronize\">rcu_synchronize</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>-><a class=\"id\" href=\"#completion\">completion</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_RCU\">CONFIG_PROVE_RCU</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wrapper function to avoid #include problems.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#rcu_my_thread_group_empty\">rcu_my_thread_group_empty</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_my_thread_group_empty\">rcu_my_thread_group_empty</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_PROVE_RCU */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS_RCU_HEAD\">CONFIG_DEBUG_OBJECTS_RCU_HEAD</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_init_rcu_head\">debug_init_rcu_head</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_rcu_head_free\">debug_rcu_head_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_init is called when:</span>", 
"<span class=\"comment\"> * - an active object is initialized</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcuhead_fixup_init\">rcuhead_fixup_init</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ensure that queued callbacks are all executed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we detect that we are nested in a RCU read-side critical</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * section, we should simply fail, otherwise we would deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_preempt_depth\">rcu_preempt_depth</a>() != 0 || <a class=\"id\" href=\"#preempt_count\">preempt_count</a>() != 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier_sched\">rcu_barrier_sched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier_bh\">rcu_barrier_bh</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_activate is called when:</span>", 
"<span class=\"comment\"> * - an active object is activated</span>", 
"<span class=\"comment\"> * - an unknown object is activated (might be a statically initialized object)</span>", 
"<span class=\"comment\"> * Activation is performed internally by call_rcu().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcuhead_fixup_activate\">rcuhead_fixup_activate</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_NOTAVAILABLE\">ODEBUG_STATE_NOTAVAILABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is not really a fixup. We just make sure that it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tracked in the object tracker.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_activate\">debug_object_activate</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ensure that queued callbacks are all executed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we detect that we are nested in a RCU read-side critical</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * section, we should simply fail, otherwise we would deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_preempt_depth\">rcu_preempt_depth</a>() != 0 || <a class=\"id\" href=\"#preempt_count\">preempt_count</a>() != 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier_sched\">rcu_barrier_sched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier_bh\">rcu_barrier_bh</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_activate\">debug_object_activate</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_free is called when:</span>", 
"<span class=\"comment\"> * - an active object is freed</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcuhead_fixup_free\">rcuhead_fixup_free</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ensure that queued callbacks are all executed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we detect that we are nested in a RCU read-side critical</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * section, we should simply fail, otherwise we would deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_preempt_depth\">rcu_preempt_depth</a>() != 0 || <a class=\"id\" href=\"#preempt_count\">preempt_count</a>() != 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier_sched\">rcu_barrier_sched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier_bh\">rcu_barrier_bh</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_rcu_head_on_stack() - initialize on-stack rcu_head for debugobjects</span>", 
"<span class=\"comment\"> * @head: pointer to rcu_head structure to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function informs debugobjects of a new rcu_head structure that</span>", 
"<span class=\"comment\"> * has been allocated as an auto variable on the stack.  This function</span>", 
"<span class=\"comment\"> * is not required for rcu_head structures that are statically defined or</span>", 
"<span class=\"comment\"> * that are dynamically allocated on the heap.  This function has no</span>", 
"<span class=\"comment\"> * effect for !CONFIG_DEBUG_OBJECTS_RCU_HEAD kernel builds.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#init_rcu_head_on_stack\">init_rcu_head_on_stack</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init_on_stack\">debug_object_init_on_stack</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#init_rcu_head_on_stack\">init_rcu_head_on_stack</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * destroy_rcu_head_on_stack() - destroy on-stack rcu_head for debugobjects</span>", 
"<span class=\"comment\"> * @head: pointer to rcu_head structure to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function informs debugobjects that an on-stack rcu_head structure</span>", 
"<span class=\"comment\"> * is about to go out of scope.  As with init_rcu_head_on_stack(), this</span>", 
"<span class=\"comment\"> * function is not required for rcu_head structures that are statically</span>", 
"<span class=\"comment\"> * defined or that are dynamically allocated on the heap.  Also as with</span>", 
"<span class=\"comment\"> * init_rcu_head_on_stack(), this function has no effect for</span>", 
"<span class=\"comment\"> * !CONFIG_DEBUG_OBJECTS_RCU_HEAD kernel builds.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#destroy_rcu_head_on_stack\">destroy_rcu_head_on_stack</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#destroy_rcu_head_on_stack\">destroy_rcu_head_on_stack</a>);", 
"", 
"struct <a class=\"id\" href=\"#debug_obj_descr\">debug_obj_descr</a> <a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"rcu_head\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_init\">fixup_init</a> = <a class=\"id\" href=\"#rcuhead_fixup_init\">rcuhead_fixup_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_activate\">fixup_activate</a> = <a class=\"id\" href=\"#rcuhead_fixup_activate\">rcuhead_fixup_activate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_free\">fixup_free</a> = <a class=\"id\" href=\"#rcuhead_fixup_free\">rcuhead_fixup_free</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcuhead_debug_descr\">rcuhead_debug_descr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_DEBUG_OBJECTS_RCU_HEAD */</span>", 
];
xr_frag_insert('l/e2/b3cea99b404cb078c014b5af1ba5a392397bbb.xr', __xr_tmp);
