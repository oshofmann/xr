var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a> (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>, <a class=\"id\" href=\"#data\">data</a> + 0x24, sizeof (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>[sizeof (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>) - 1] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_start\">bitmap1_start</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a> + 0x2E);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_size\">bitmap1_size</a>  = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a> + 0x36);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a> (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>, <a class=\"id\" href=\"#TOC_BITMAP1\">TOC_BITMAP1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>)) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"TOCBLOCK's first bitmap is '%s', should be '%s'.\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TOC_BITMAP1\">TOC_BITMAP1</a>, <a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a> (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>, <a class=\"id\" href=\"#data\">data</a> + 0x46, sizeof (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>[sizeof (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>) - 1] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap2_start\">bitmap2_start</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a> + 0x50);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap2_size\">bitmap2_size</a>  = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a> + 0x58);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a> (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>, <a class=\"id\" href=\"#TOC_BITMAP2\">TOC_BITMAP2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>)) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"TOCBLOCK's second bitmap is '%s', should be '%s'.\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TOC_BITMAP2\">TOC_BITMAP2</a>, <a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_debug\">ldm_debug</a> (\"Parsed TOCBLOCK successfully.\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_vmdb - Read the LDM Database VMDB structure</span>", 
"<span class=\"comment\"> * @data:  Raw database VMDB structure loaded from the device</span>", 
"<span class=\"comment\"> * @vm:    In-memory vmdb structure in which to return parsed information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This parses the LDM Database VMDB structure supplied in @data and sets up</span>", 
"<span class=\"comment\"> * the in-memory vmdb structure @vm with the obtained information.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * N.B.  The *_start, *_size and *_seq values will be range-checked later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @vm contains VMDB info</span>", 
"<span class=\"comment\"> *          'false'  @vm contents are undefined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_vmdb\">ldm_parse_vmdb</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#vmdb\">vmdb</a> *<a class=\"id\" href=\"#vm\">vm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#data\">data</a> || !<a class=\"id\" href=\"#vm\">vm</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#MAGIC_VMDB\">MAGIC_VMDB</a> != <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Cannot find the VMDB, database may be corrupt.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a> = <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(<a class=\"id\" href=\"#data\">data</a> + 0x12);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a> = <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(<a class=\"id\" href=\"#data\">data</a> + 0x14);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a> != 4) || (<a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a> != 10)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"Expected VMDB version %d.%d, got %d.%d. \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Aborting.\", 4, 10, <a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a>, <a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#vblk_size\">vblk_size</a>     = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#data\">data</a> + 0x08);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#vblk_offset\">vblk_offset</a>   = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#data\">data</a> + 0x0C);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#last_vblk_seq\">last_vblk_seq</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#data\">data</a> + 0x04);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_debug\">ldm_debug</a> (\"Parsed VMDB successfully.\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_compare_privheads - Compare two privhead objects</span>", 
"<span class=\"comment\"> * @ph1:  First privhead</span>", 
"<span class=\"comment\"> * @ph2:  Second privhead</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This compares the two privhead structures @ph1 and @ph2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   Identical</span>", 
"<span class=\"comment\"> *          'false'  Different</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_compare_privheads\">ldm_compare_privheads</a> (const struct <a class=\"id\" href=\"#privhead\">privhead</a> *<a class=\"id\" href=\"#ph1\">ph1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#privhead\">privhead</a> *<a class=\"id\" href=\"#ph2\">ph2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#ph1\">ph1</a> || !<a class=\"id\" href=\"#ph2\">ph2</a>);", 
"", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#ph1\">ph1</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a>          == <a class=\"id\" href=\"#ph2\">ph2</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a>)<span class=\"ts\"/><span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ph1\">ph1</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a>          == <a class=\"id\" href=\"#ph2\">ph2</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a>)<span class=\"ts\"/><span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ph1\">ph1</a>-><a class=\"id\" href=\"#logical_disk_start\">logical_disk_start</a> == <a class=\"id\" href=\"#ph2\">ph2</a>-><a class=\"id\" href=\"#logical_disk_start\">logical_disk_start</a>)<span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ph1\">ph1</a>-><a class=\"id\" href=\"#logical_disk_size\">logical_disk_size</a>  == <a class=\"id\" href=\"#ph2\">ph2</a>-><a class=\"id\" href=\"#logical_disk_size\">logical_disk_size</a>)<span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ph1\">ph1</a>-><a class=\"id\" href=\"#config_start\">config_start</a>       == <a class=\"id\" href=\"#ph2\">ph2</a>-><a class=\"id\" href=\"#config_start\">config_start</a>)<span class=\"ts\"/><span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ph1\">ph1</a>-><a class=\"id\" href=\"#config_size\">config_size</a>        == <a class=\"id\" href=\"#ph2\">ph2</a>-><a class=\"id\" href=\"#config_size\">config_size</a>)<span class=\"ts\"/><span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#memcmp\">memcmp</a> (<a class=\"id\" href=\"#ph1\">ph1</a>-><a class=\"id\" href=\"#disk_id\">disk_id</a>, <a class=\"id\" href=\"#ph2\">ph2</a>-><a class=\"id\" href=\"#disk_id\">disk_id</a>, <a class=\"id\" href=\"#GUID_SIZE\">GUID_SIZE</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_compare_tocblocks - Compare two tocblock objects</span>", 
"<span class=\"comment\"> * @toc1:  First toc</span>", 
"<span class=\"comment\"> * @toc2:  Second toc</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This compares the two tocblock structures @toc1 and @toc2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   Identical</span>", 
"<span class=\"comment\"> *          'false'  Different</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_compare_tocblocks\">ldm_compare_tocblocks</a> (const struct <a class=\"id\" href=\"#tocblock\">tocblock</a> *<a class=\"id\" href=\"#toc1\">toc1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#tocblock\">tocblock</a> *<a class=\"id\" href=\"#toc2\">toc2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#toc1\">toc1</a> || !<a class=\"id\" href=\"#toc2\">toc2</a>);", 
"", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#toc1\">toc1</a>-><a class=\"id\" href=\"#bitmap1_start\">bitmap1_start</a> == <a class=\"id\" href=\"#toc2\">toc2</a>-><a class=\"id\" href=\"#bitmap1_start\">bitmap1_start</a>)<span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#toc1\">toc1</a>-><a class=\"id\" href=\"#bitmap1_size\">bitmap1_size</a>  == <a class=\"id\" href=\"#toc2\">toc2</a>-><a class=\"id\" href=\"#bitmap1_size\">bitmap1_size</a>)<span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#toc1\">toc1</a>-><a class=\"id\" href=\"#bitmap2_start\">bitmap2_start</a> == <a class=\"id\" href=\"#toc2\">toc2</a>-><a class=\"id\" href=\"#bitmap2_start\">bitmap2_start</a>)<span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#toc1\">toc1</a>-><a class=\"id\" href=\"#bitmap2_size\">bitmap2_size</a>  == <a class=\"id\" href=\"#toc2\">toc2</a>-><a class=\"id\" href=\"#bitmap2_size\">bitmap2_size</a>)<span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#strncmp\">strncmp</a> (<a class=\"id\" href=\"#toc1\">toc1</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>, <a class=\"id\" href=\"#toc2\">toc2</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof (<a class=\"id\" href=\"#toc1\">toc1</a>-><a class=\"id\" href=\"#bitmap1_name\">bitmap1_name</a>))<span class=\"ts\"/><span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#strncmp\">strncmp</a> (<a class=\"id\" href=\"#toc1\">toc1</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>, <a class=\"id\" href=\"#toc2\">toc2</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof (<a class=\"id\" href=\"#toc1\">toc1</a>-><a class=\"id\" href=\"#bitmap2_name\">bitmap2_name</a>)));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_validate_privheads - Compare the primary privhead with its backups</span>", 
"<span class=\"comment\"> * @state: Partition check state including device holding the LDM Database</span>", 
"<span class=\"comment\"> * @ph1:   Memory struct to fill with ph contents</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read and compare all three privheads from disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The privheads on disk show the size and location of the main disk area and</span>", 
"<span class=\"comment\"> * the configuration area (the database).  The values are range-checked against</span>", 
"<span class=\"comment\"> * @hd, which contains the real size of the disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   Success</span>", 
"<span class=\"comment\"> *          'false'  Error</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_validate_privheads\">ldm_validate_privheads</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#privhead\">privhead</a> *<a class=\"id\" href=\"#ph1\">ph1</a>)", 
"{", 
"<span class=\"ts\"/>static const int <a class=\"id\" href=\"#off\">off</a>[3] = { <a class=\"id\" href=\"#OFF_PRIV1\">OFF_PRIV1</a>, <a class=\"id\" href=\"#OFF_PRIV2\">OFF_PRIV2</a>, <a class=\"id\" href=\"#OFF_PRIV3\">OFF_PRIV3</a> };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#privhead\">privhead</a> *<a class=\"id\" href=\"#ph\">ph</a>[3] = { <a class=\"id\" href=\"#ph1\">ph1</a> };", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#num_sects\">num_sects</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#state\">state</a> || !<a class=\"id\" href=\"#ph1\">ph1</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>[1] = <a class=\"id\" href=\"#kmalloc\">kmalloc</a> (sizeof (*<a class=\"id\" href=\"#ph\">ph</a>[1]), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>[2] = <a class=\"id\" href=\"#kmalloc\">kmalloc</a> (sizeof (*<a class=\"id\" href=\"#ph\">ph</a>[2]), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ph\">ph</a>[1] || !<a class=\"id\" href=\"#ph\">ph</a>[2]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Out of memory.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* off[1 &amp; 2] are relative to ph[0]-&gt;config_start */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#config_start\">config_start</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read and parse privheads */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 3; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#config_start\">config_start</a> + <a class=\"id\" href=\"#off\">off</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Disk read failed.\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ldm_parse_privhead\">ldm_parse_privhead</a> (<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#ph\">ph</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a> (<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"Cannot find PRIVHEAD %d.\", <a class=\"id\" href=\"#i\">i</a>+1); <span class=\"comment\">/* Log again */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;<span class=\"ts\"/><span class=\"comment\">/* Already logged */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* FIXME ignore for now, 3rd PH can fail on odd-sized disks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_sects\">num_sects</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> >> 9;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#config_start\">config_start</a> &gt; <a class=\"id\" href=\"#num_sects\">num_sects</a>) ||", 
"<span class=\"ts\"/>   ((<a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#config_start\">config_start</a> + <a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#config_size\">config_size</a>) &gt; <a class=\"id\" href=\"#num_sects\">num_sects</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Database extends beyond the end of the disk.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#logical_disk_start\">logical_disk_start</a> &gt; <a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#config_start\">config_start</a>) ||", 
"<span class=\"ts\"/>   ((<a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#logical_disk_start\">logical_disk_start</a> + <a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#logical_disk_size\">logical_disk_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    &gt; <a class=\"id\" href=\"#ph\">ph</a>[0]-><a class=\"id\" href=\"#config_start\">config_start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Disk and database overlap.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_compare_privheads\">ldm_compare_privheads</a> (<a class=\"id\" href=\"#ph\">ph</a>[0], <a class=\"id\" href=\"#ph\">ph</a>[1])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Primary and backup PRIVHEADs don't match.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME ignore this for now</span>", 
"<span class=\"comment\"><span class=\"ts\"/>if (!ldm_compare_privheads (ph[0], ph[2])) {</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>ldm_crit (\"Primary and backup PRIVHEADs don't match.\");</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>goto out;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>}*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_debug\">ldm_debug</a> (\"Validated PRIVHEADs successfully.\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a> (<a class=\"id\" href=\"#ph\">ph</a>[1]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a> (<a class=\"id\" href=\"#ph\">ph</a>[2]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_validate_tocblocks - Validate the table of contents and its backups</span>", 
"<span class=\"comment\"> * @state: Partition check state including device holding the LDM Database</span>", 
"<span class=\"comment\"> * @base:  Offset, into @state-&gt;bdev, of the database</span>", 
"<span class=\"comment\"> * @ldb:   Cache of the database structures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find and compare the four tables of contents of the LDM Database stored on</span>", 
"<span class=\"comment\"> * @state-&gt;bdev and return the parsed information into @toc1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The offsets and sizes of the configs are range-checked against a privhead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @toc1 contains validated TOCBLOCK info</span>", 
"<span class=\"comment\"> *          'false'  @toc1 contents are undefined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_validate_tocblocks\">ldm_validate_tocblocks</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#base\">base</a>, struct <a class=\"id\" href=\"#ldmdb\">ldmdb</a> *<a class=\"id\" href=\"#ldb\">ldb</a>)", 
"{", 
"<span class=\"ts\"/>static const int <a class=\"id\" href=\"#off\">off</a>[4] = { <a class=\"id\" href=\"#OFF_TOCB1\">OFF_TOCB1</a>, <a class=\"id\" href=\"#OFF_TOCB2\">OFF_TOCB2</a>, <a class=\"id\" href=\"#OFF_TOCB3\">OFF_TOCB3</a>, <a class=\"id\" href=\"#OFF_TOCB4\">OFF_TOCB4</a>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tocblock\">tocblock</a> *<a class=\"id\" href=\"#tb\">tb</a>[4];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#privhead\">privhead</a> *<a class=\"id\" href=\"#ph\">ph</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nr_tbs\">nr_tbs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#state\">state</a> || !<a class=\"id\" href=\"#ldb\">ldb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a> = &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#ph\">ph</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tb\">tb</a>[0] = &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#toc\">toc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tb\">tb</a>[1] = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#tb\">tb</a>[1]) * 3, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tb\">tb</a>[1]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a>(\"Out of memory.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tb\">tb</a>[2] = (struct <a class=\"id\" href=\"#tocblock\">tocblock</a>*)((<a class=\"id\" href=\"#u8\">u8</a>*)<a class=\"id\" href=\"#tb\">tb</a>[1] + sizeof(*<a class=\"id\" href=\"#tb\">tb</a>[1]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tb\">tb</a>[3] = (struct <a class=\"id\" href=\"#tocblock\">tocblock</a>*)((<a class=\"id\" href=\"#u8\">u8</a>*)<a class=\"id\" href=\"#tb\">tb</a>[2] + sizeof(*<a class=\"id\" href=\"#tb\">tb</a>[2]));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to read and parse all four TOCBLOCKs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Windows Vista LDM v2.12 does not always have all four TOCBLOCKs so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * skip any that fail as long as we get at least one valid TOCBLOCK.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#nr_tbs\">nr_tbs</a> = <a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#off\">off</a>[<a class=\"id\" href=\"#i\">i</a>], &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"Disk read failed for TOCBLOCK %d.\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ldm_parse_tocblock\">ldm_parse_tocblock</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#tb\">tb</a>[<a class=\"id\" href=\"#nr_tbs\">nr_tbs</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_tbs\">nr_tbs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_tbs\">nr_tbs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a>(\"Failed to find a valid TOCBLOCK.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Range check the TOCBLOCK against a privhead. */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#tb\">tb</a>[0]-><a class=\"id\" href=\"#bitmap1_start\">bitmap1_start</a> + <a class=\"id\" href=\"#tb\">tb</a>[0]-><a class=\"id\" href=\"#bitmap1_size\">bitmap1_size</a>) &gt; <a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#config_size\">config_size</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#tb\">tb</a>[0]-><a class=\"id\" href=\"#bitmap2_start\">bitmap2_start</a> + <a class=\"id\" href=\"#tb\">tb</a>[0]-><a class=\"id\" href=\"#bitmap2_size\">bitmap2_size</a>) &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#config_size\">config_size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a>(\"The bitmaps are out of range.  Giving up.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Compare all loaded TOCBLOCKs. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_tbs\">nr_tbs</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_compare_tocblocks\">ldm_compare_tocblocks</a>(<a class=\"id\" href=\"#tb\">tb</a>[0], <a class=\"id\" href=\"#tb\">tb</a>[<a class=\"id\" href=\"#i\">i</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a>(\"TOCBLOCKs 0 and %d do not match.\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_debug\">ldm_debug</a>(\"Validated %d TOCBLOCKs successfully.\", <a class=\"id\" href=\"#nr_tbs\">nr_tbs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tb\">tb</a>[1]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_validate_vmdb - Read the VMDB and validate it</span>", 
"<span class=\"comment\"> * @state: Partition check state including device holding the LDM Database</span>", 
"<span class=\"comment\"> * @base:  Offset, into @bdev, of the database</span>", 
"<span class=\"comment\"> * @ldb:   Cache of the database structures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the vmdb of the LDM Database stored on @bdev and return the parsed</span>", 
"<span class=\"comment\"> * information in @ldb.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @ldb contains validated VBDB info</span>", 
"<span class=\"comment\"> *          'false'  @ldb contents are undefined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_validate_vmdb\">ldm_validate_vmdb</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#base\">base</a>, struct <a class=\"id\" href=\"#ldmdb\">ldmdb</a> *<a class=\"id\" href=\"#ldb\">ldb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmdb\">vmdb</a> *<a class=\"id\" href=\"#vm\">vm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tocblock\">tocblock</a> *<a class=\"id\" href=\"#toc\">toc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#state\">state</a> || !<a class=\"id\" href=\"#ldb\">ldb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>  = &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#vm\">vm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#toc\">toc</a> = &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#toc\">toc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OFF_VMDB\">OFF_VMDB</a>, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Disk read failed.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_parse_vmdb\">ldm_parse_vmdb</a> (<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#vm\">vm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Already logged */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Are there uncommitted transactions? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(<a class=\"id\" href=\"#data\">data</a> + 0x10) != 0x01) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Database is not in a consistent state.  Aborting.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#vblk_offset\">vblk_offset</a> != 512)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_info\">ldm_info</a> (\"VBLKs start at offset 0x%04x.\", <a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#vblk_offset\">vblk_offset</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The last_vblkd_seq can be before the end of the vmdb, just make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is not out of bounds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#vblk_size\">vblk_size</a> * <a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#last_vblk_seq\">last_vblk_seq</a>) &gt; (<a class=\"id\" href=\"#toc\">toc</a>-><a class=\"id\" href=\"#bitmap1_size\">bitmap1_size</a> << 9)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"VMDB exceeds allowed size specified by TOCBLOCK.  \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Database is corrupt.  Aborting.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a> (<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_validate_partition_table - Determine whether bdev might be a dynamic disk</span>", 
"<span class=\"comment\"> * @state: Partition check state including device holding the LDM Database</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function provides a weak test to decide whether the device is a dynamic</span>", 
"<span class=\"comment\"> * disk or not.  It looks for an MS-DOS-style partition table containing at</span>", 
"<span class=\"comment\"> * least one partition of type 0x42 (formerly SFS, now used by Windows for</span>", 
"<span class=\"comment\"> * dynamic disks).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * N.B.  The only possible error can come from the read_part_sector and that is</span>", 
"<span class=\"comment\"> *       only likely to happen if the underlying device is strange.  If that IS</span>", 
"<span class=\"comment\"> *       the case we should return zero to let someone else try.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @state-&gt;bdev is a dynamic disk</span>", 
"<span class=\"comment\"> *          'false'  @state-&gt;bdev is not a dynamic disk, or an error occurred</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_validate_partition_table\">ldm_validate_partition_table</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, 0, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Disk read failed.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (*(<a class=\"id\" href=\"#__le16\">__le16</a>*) (<a class=\"id\" href=\"#data\">data</a> + 0x01FE) != <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a> (<a class=\"id\" href=\"#MSDOS_LABEL_MAGIC\">MSDOS_LABEL_MAGIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#partition\">partition</a>*)(<a class=\"id\" href=\"#data\">data</a> + 0x01BE);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#SYS_IND\">SYS_IND</a> (<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#LDM_PARTITION\">LDM_PARTITION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_debug\">ldm_debug</a> (\"Found W2K dynamic disk partition type.\");", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a> (<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_get_disk_objid - Search a linked list of vblk's for a given Disk Id</span>", 
"<span class=\"comment\"> * @ldb:  Cache of the database structures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The LDM Database contains a list of all partitions on all dynamic disks.</span>", 
"<span class=\"comment\"> * The primary PRIVHEAD, at the beginning of the physical disk, tells us</span>", 
"<span class=\"comment\"> * the GUID of this disk.  This function searches for the GUID in a linked</span>", 
"<span class=\"comment\"> * list of vblk's.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  Pointer, A matching vblk was found</span>", 
"<span class=\"comment\"> *          NULL,    No match, or an error</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#vblk\">vblk</a> * <a class=\"id\" href=\"#ldm_get_disk_objid\">ldm_get_disk_objid</a> (const struct <a class=\"id\" href=\"#ldmdb\">ldmdb</a> *<a class=\"id\" href=\"#ldb\">ldb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#item\">item</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#ldb\">ldb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a> (<a class=\"id\" href=\"#item\">item</a>, &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_disk\">v_disk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a> (<a class=\"id\" href=\"#item\">item</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a> (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#disk\">disk</a>.<a class=\"id\" href=\"#disk_id\">disk_id</a>, <a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#ph\">ph</a>.<a class=\"id\" href=\"#disk_id\">disk_id</a>, <a class=\"id\" href=\"#GUID_SIZE\">GUID_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_create_data_partitions - Create data partitions for this device</span>", 
"<span class=\"comment\"> * @pp:   List of the partitions parsed so far</span>", 
"<span class=\"comment\"> * @ldb:  Cache of the database structures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The database contains ALL the partitions for ALL disk groups, so we need to</span>", 
"<span class=\"comment\"> * filter out this specific disk. Using the disk's object id, we can find all</span>", 
"<span class=\"comment\"> * the partitions in the database that belong to this disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add each partition in our database, to the parsed_partitions structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * N.B.  This function creates the partitions in the order it finds partition</span>", 
"<span class=\"comment\"> *       objects in the linked list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   Partition created</span>", 
"<span class=\"comment\"> *          'false'  Error, probably a range checking problem</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_create_data_partitions\">ldm_create_data_partitions</a> (struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#pp\">pp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#ldmdb\">ldmdb</a> *<a class=\"id\" href=\"#ldb\">ldb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#item\">item</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk_part\">vblk_part</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#part_num\">part_num</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#pp\">pp</a> || !<a class=\"id\" href=\"#ldb\">ldb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#ldm_get_disk_objid\">ldm_get_disk_objid</a> (<a class=\"id\" href=\"#ldb\">ldb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#disk\">disk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Can't find the ID of this disk in the database.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#pp\">pp</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \" [LDM]\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the data partitions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a> (<a class=\"id\" href=\"#item\">item</a>, &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_part\">v_part</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a> (<a class=\"id\" href=\"#item\">item</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = &amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#part\">part</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#disk_id\">disk_id</a> != <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#obj_id\">obj_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_partition\">put_partition</a> (<a class=\"id\" href=\"#pp\">pp</a>, <a class=\"id\" href=\"#part_num\">part_num</a>, <a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#ph\">ph</a>.<a class=\"id\" href=\"#logical_disk_start\">logical_disk_start</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_num\">part_num</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#pp\">pp</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \"\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
];
xr_frag_insert('l/e2/e421745dbfc2778510111ac2582a06151e143a.xr', __xr_tmp);
