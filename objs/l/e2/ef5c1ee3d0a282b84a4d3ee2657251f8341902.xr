var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>sysctl_lower_zone_reserve_ratio changes.  Ensures that each zone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>has a correct pages reserved value, so an adequate number of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pages are left in the zone after a successful __alloc_pages().</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#setup_per_zone_lowmem_reserve\">setup_per_zone_lowmem_reserve</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_pgdat\">for_each_online_pgdat</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#present_pages\">present_pages</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lowmem_reserve\">lowmem_reserve</a>[<a class=\"id\" href=\"#j\">j</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#idx\">idx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#lower_zone\">lower_zone</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_lowmem_reserve_ratio\">sysctl_lowmem_reserve_ratio</a>[<a class=\"id\" href=\"#idx\">idx</a>] &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_lowmem_reserve_ratio\">sysctl_lowmem_reserve_ratio</a>[<a class=\"id\" href=\"#idx\">idx</a>] = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower_zone\">lower_zone</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower_zone\">lower_zone</a>-><a class=\"id\" href=\"#lowmem_reserve\">lowmem_reserve</a>[<a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#present_pages\">present_pages</a> /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_lowmem_reserve_ratio\">sysctl_lowmem_reserve_ratio</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#present_pages\">present_pages</a> += <a class=\"id\" href=\"#lower_zone\">lower_zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update totalreserve_pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calculate_totalreserve_pages\">calculate_totalreserve_pages</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * setup_per_zone_wmarks - called when min_free_kbytes changes</span>", 
"<span class=\"comment\"> * or when memory is hot-{added|removed}</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Ensures that the watermark[min,low,high] values for each zone are set</span>", 
"<span class=\"comment\"> * correctly with respect to min_free_kbytes.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#setup_per_zone_wmarks\">setup_per_zone_wmarks</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages_min\">pages_min</a> = <a class=\"id\" href=\"#min_free_kbytes\">min_free_kbytes</a> >> (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lowmem_pages\">lowmem_pages</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate total number of !ZONE_HIGHMEM pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone\">for_each_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_highmem\">is_highmem</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lowmem_pages\">lowmem_pages</a> += <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone\">for_each_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#pages_min\">pages_min</a> * <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#lowmem_pages\">lowmem_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_highmem\">is_highmem</a>(<a class=\"id\" href=\"#zone\">zone</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * __GFP_HIGH and PF_MEMALLOC allocations usually don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * need highmem pages, so cap pages_min to a small</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * value here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The WMARK_HIGH-WMARK_LOW and (WMARK_LOW-WMARK_MIN)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * deltas controls asynch page reclaim, and so should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not be capped for highmem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#min_pages\">min_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_pages\">min_pages</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a> / 1024;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#min_pages\">min_pages</a> &lt; <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_pages\">min_pages</a> = <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#min_pages\">min_pages</a> &gt; 128)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_pages\">min_pages</a> = 128;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#watermark\">watermark</a>[<a class=\"id\" href=\"#WMARK_MIN\">WMARK_MIN</a>] = <a class=\"id\" href=\"#min_pages\">min_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If it's a lowmem zone, reserve a number of pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * proportionate to the zone's size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#watermark\">watermark</a>[<a class=\"id\" href=\"#WMARK_MIN\">WMARK_MIN</a>] = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#watermark\">watermark</a>[<a class=\"id\" href=\"#WMARK_LOW\">WMARK_LOW</a>]  = <a class=\"id\" href=\"#min_wmark_pages\">min_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>) + (<a class=\"id\" href=\"#tmp\">tmp</a> >> 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#watermark\">watermark</a>[<a class=\"id\" href=\"#WMARK_HIGH\">WMARK_HIGH</a>] = <a class=\"id\" href=\"#min_wmark_pages\">min_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>) + (<a class=\"id\" href=\"#tmp\">tmp</a> >> 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_zone_migrate_reserve\">setup_zone_migrate_reserve</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update totalreserve_pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calculate_totalreserve_pages\">calculate_totalreserve_pages</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The inactive anon list should be small enough that the VM never has to</span>", 
"<span class=\"comment\"> * do too much work, but large enough that each inactive page has a chance</span>", 
"<span class=\"comment\"> * to be referenced again before it is swapped out.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The inactive_anon ratio is the target ratio of ACTIVE_ANON to</span>", 
"<span class=\"comment\"> * INACTIVE_ANON pages on this zone's LRU, maintained by the</span>", 
"<span class=\"comment\"> * pageout code. A zone-&gt;inactive_ratio of 3 means 3:1 or 25% of</span>", 
"<span class=\"comment\"> * the anonymous pages are kept on the inactive list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * total     target    max</span>", 
"<span class=\"comment\"> * memory    ratio     inactive anon</span>", 
"<span class=\"comment\"> * -------------------------------------</span>", 
"<span class=\"comment\"> *   10MB       1         5MB</span>", 
"<span class=\"comment\"> *  100MB       1        50MB</span>", 
"<span class=\"comment\"> *    1GB       3       250MB</span>", 
"<span class=\"comment\"> *   10GB      10       0.9GB</span>", 
"<span class=\"comment\"> *  100GB      31         3GB</span>", 
"<span class=\"comment\"> *    1TB     101        10GB</span>", 
"<span class=\"comment\"> *   10TB     320        32GB</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#calculate_zone_inactive_ratio\">calculate_zone_inactive_ratio</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#gb\">gb</a>, <a class=\"id\" href=\"#ratio\">ratio</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Zone size in gigabytes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gb\">gb</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a> >> (30 - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gb\">gb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ratio\">ratio</a> = <a class=\"id\" href=\"#int_sqrt\">int_sqrt</a>(10 * <a class=\"id\" href=\"#gb\">gb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ratio\">ratio</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#inactive_ratio\">inactive_ratio</a> = <a class=\"id\" href=\"#ratio\">ratio</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_per_zone_inactive_ratio\">setup_per_zone_inactive_ratio</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone\">for_each_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#calculate_zone_inactive_ratio\">calculate_zone_inactive_ratio</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialise min_free_kbytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For small machines we want it small (128k min).  For large machines</span>", 
"<span class=\"comment\"> * we want it large (64MB max).  But it is not linear, because network</span>", 
"<span class=\"comment\"> * bandwidth does not increase linearly with machine size.  We use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>min_free_kbytes = 4 * sqrt(lowmem_kbytes), for better accuracy:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>min_free_kbytes = sqrt(lowmem_kbytes * 16)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * which yields</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 16MB:<span class=\"ts\"/>512k</span>", 
"<span class=\"comment\"> * 32MB:<span class=\"ts\"/>724k</span>", 
"<span class=\"comment\"> * 64MB:<span class=\"ts\"/>1024k</span>", 
"<span class=\"comment\"> * 128MB:<span class=\"ts\"/>1448k</span>", 
"<span class=\"comment\"> * 256MB:<span class=\"ts\"/>2048k</span>", 
"<span class=\"comment\"> * 512MB:<span class=\"ts\"/>2896k</span>", 
"<span class=\"comment\"> * 1024MB:<span class=\"ts\"/>4096k</span>", 
"<span class=\"comment\"> * 2048MB:<span class=\"ts\"/>5792k</span>", 
"<span class=\"comment\"> * 4096MB:<span class=\"ts\"/>8192k</span>", 
"<span class=\"comment\"> * 8192MB:<span class=\"ts\"/>11584k</span>", 
"<span class=\"comment\"> * 16384MB:<span class=\"ts\"/>16384k</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_per_zone_wmark_min\">init_per_zone_wmark_min</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lowmem_kbytes\">lowmem_kbytes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lowmem_kbytes\">lowmem_kbytes</a> = <a class=\"id\" href=\"#nr_free_buffer_pages\">nr_free_buffer_pages</a>() * (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >> 10);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_free_kbytes\">min_free_kbytes</a> = <a class=\"id\" href=\"#int_sqrt\">int_sqrt</a>(<a class=\"id\" href=\"#lowmem_kbytes\">lowmem_kbytes</a> * 16);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#min_free_kbytes\">min_free_kbytes</a> &lt; 128)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_free_kbytes\">min_free_kbytes</a> = 128;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#min_free_kbytes\">min_free_kbytes</a> &gt; 65536)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_free_kbytes\">min_free_kbytes</a> = 65536;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_per_zone_wmarks\">setup_per_zone_wmarks</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_per_zone_lowmem_reserve\">setup_per_zone_lowmem_reserve</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_per_zone_inactive_ratio\">setup_per_zone_inactive_ratio</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#init_per_zone_wmark_min\">init_per_zone_wmark_min</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * min_free_kbytes_sysctl_handler - just a wrapper around proc_dointvec() so </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that we can call two helper functions whenever min_free_kbytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>changes.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#min_free_kbytes_sysctl_handler\">min_free_kbytes_sysctl_handler</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>, ", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_per_zone_wmarks\">setup_per_zone_wmarks</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/e2/ef5c1ee3d0a282b84a4d3ee2657251f8341902.xr', __xr_tmp);
