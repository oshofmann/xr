var __xr_tmp = [
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @i to @v and returns @i + @v</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#atomic64_add_return\">atomic64_add_return</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__i\">__i</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"xaddq %0, %1;\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+r\" (<a class=\"id\" href=\"#i\">i</a>), \"+m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#__i\">__i</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#atomic64_sub_return\">atomic64_sub_return</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic64_add_return\">atomic64_add_return</a>(-<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#atomic64_inc_return\">atomic64_inc_return</a>(<a class=\"id\" href=\"#v\">v</a>)  (<a class=\"id\" href=\"#atomic64_add_return\">atomic64_add_return</a>(1, (<a class=\"id\" href=\"#v\">v</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#atomic64_dec_return\">atomic64_dec_return</a>(<a class=\"id\" href=\"#v\">v</a>)  (<a class=\"id\" href=\"#atomic64_sub_return\">atomic64_sub_return</a>(1, (<a class=\"id\" href=\"#v\">v</a>)))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#atomic64_cmpxchg\">atomic64_cmpxchg</a>(<a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>, long <a class=\"id\" href=\"#old\">old</a>, long <a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#atomic64_xchg\">atomic64_xchg</a>(<a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>, long <a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_add_unless - add unless the number is a given value</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic64_t</span>", 
"<span class=\"comment\"> * @a: the amount to add to v...</span>", 
"<span class=\"comment\"> * @u: ...unless v is equal to u.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @a to @v, so long as it was not @u.</span>", 
"<span class=\"comment\"> * Returns non-zero if @v was not @u, and zero otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic64_add_unless\">atomic64_add_unless</a>(<a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>, long <a class=\"id\" href=\"#a\">a</a>, long <a class=\"id\" href=\"#u\">u</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(<a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#c\">c</a> == (<a class=\"id\" href=\"#u\">u</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#atomic64_cmpxchg\">atomic64_cmpxchg</a>((<a class=\"id\" href=\"#v\">v</a>), <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#c\">c</a> + (<a class=\"id\" href=\"#a\">a</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#old\">old</a> == <a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> != (<a class=\"id\" href=\"#u\">u</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#atomic64_inc_not_zero\">atomic64_inc_not_zero</a>(<a class=\"id\" href=\"#v\">v</a>) <a class=\"id\" href=\"#atomic64_add_unless\">atomic64_add_unless</a>((<a class=\"id\" href=\"#v\">v</a>), 1, 0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * atomic64_dec_if_positive - decrement by 1 if old value positive</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns the old value of *v minus 1, even if</span>", 
"<span class=\"comment\"> * the atomic variable, v, was not decremented.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#atomic64_dec_if_positive\">atomic64_dec_if_positive</a>(<a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#dec\">dec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(<a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec\">dec</a> = <a class=\"id\" href=\"#c\">c</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dec\">dec</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#atomic64_cmpxchg\">atomic64_cmpxchg</a>((<a class=\"id\" href=\"#v\">v</a>), <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#dec\">dec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#old\">old</a> == <a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dec\">dec</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_ATOMIC64_64_H */</span>", 
];
xr_frag_insert('l/e3/3e4e0a12ce4b034ce682f42081a939b66f0beb.xr', __xr_tmp);
