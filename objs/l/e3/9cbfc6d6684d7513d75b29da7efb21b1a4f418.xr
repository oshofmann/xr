var __xr_tmp = [
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#commit\">commit</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#commit\">commit</a> &lt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#get_event\">get_event</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#__rb_reserve_next\">__rb_reserve_next</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, 0, <a class=\"id\" href=\"#length\">length</a>, &amp;<a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#event\">event</a>) == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rb_event_is_commit\">rb_event_is_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a> = <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"", 
" <a class=\"id\" href=\"#out_fail\">out_fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_end_commit\">rb_end_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_RECURSIVE_DEPTH\">TRACE_RECURSIVE_DEPTH</a> 16", 
"", 
"static int <a class=\"id\" href=\"#trace_recursive_lock\">trace_recursive_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#trace_recursion\">trace_recursion</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#trace_recursion\">trace_recursion</a> &lt; <a class=\"id\" href=\"#TRACE_RECURSIVE_DEPTH\">TRACE_RECURSIVE_DEPTH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable all tracing before we do anything else */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_off_permanent\">tracing_off_permanent</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Tracing recursion: depth[%ld]:\"", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"HC[%lu]:SC[%lu]:NMI[%lu]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#trace_recursion\">trace_recursion</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#hardirq_count\">hardirq_count</a>() >> <a class=\"id\" href=\"#HARDIRQ_SHIFT\">HARDIRQ_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#softirq_count\">softirq_count</a>() >> <a class=\"id\" href=\"#SOFTIRQ_SHIFT\">SOFTIRQ_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#in_nmi\">in_nmi</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#trace_recursive_unlock\">trace_recursive_unlock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#trace_recursion\">trace_recursion</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#trace_recursion\">trace_recursion</a>--;", 
"}", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#trace_recursive_lock\">trace_recursive_lock</a>()<span class=\"ts\"/><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#trace_recursive_unlock\">trace_recursive_unlock</a>()<span class=\"ts\"/>do { } while (0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_lock_reserve - reserve a part of the buffer</span>", 
"<span class=\"comment\"> * @buffer: the ring buffer to reserve from</span>", 
"<span class=\"comment\"> * @length: the length of the data to reserve (excluding event header)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a reseverd event on the ring buffer to copy directly to.</span>", 
"<span class=\"comment\"> * The user of this interface will need to get the body to write into</span>", 
"<span class=\"comment\"> * and can use the ring_buffer_event_data() interface.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The length is the length of the data needed, not the event length</span>", 
"<span class=\"comment\"> * which also includes the event header.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be paired with ring_buffer_unlock_commit, unless NULL is returned.</span>", 
"<span class=\"comment\"> * If NULL is returned, then nothing has been allocated or locked.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#ring_buffer_lock_reserve\">ring_buffer_lock_reserve</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a> != <a class=\"id\" href=\"#RB_BUFFERS_ON\">RB_BUFFERS_ON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are tracing schedule, we don't want to recurse */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nocheck\">out_nocheck</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_recursive_lock\">trace_recursive_lock</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nocheck\">out_nocheck</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#BUF_MAX_DATA_SIZE\">BUF_MAX_DATA_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_reserve_next_event\">rb_reserve_next_event</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_recursive_unlock\">trace_recursive_unlock</a>();", 
"", 
" <a class=\"id\" href=\"#out_nocheck\">out_nocheck</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_lock_reserve\">ring_buffer_lock_reserve</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#rb_update_write_stamp\">rb_update_write_stamp</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The event first in the commit queue updates the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time stamp.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_event_is_commit\">rb_event_is_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#write_stamp\">write_stamp</a> += <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_commit\">rb_commit</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#entries\">entries</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_update_write_stamp\">rb_update_write_stamp</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_end_commit\">rb_end_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_unlock_commit - commit a reserved</span>", 
"<span class=\"comment\"> * @buffer: The buffer to commit to</span>", 
"<span class=\"comment\"> * @event: The event pointer to commit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This commits the data to the ring buffer, and releases any locks held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be paired with ring_buffer_lock_reserve.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_unlock_commit\">ring_buffer_unlock_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_commit\">rb_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_recursive_unlock\">trace_recursive_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_unlock_commit\">ring_buffer_unlock_commit</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rb_event_discard\">rb_event_discard</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* array[0] holds the actual length for the discarded event */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0] = <a class=\"id\" href=\"#rb_event_data_length\">rb_event_data_length</a>(<a class=\"id\" href=\"#event\">event</a>) - <a class=\"id\" href=\"#RB_EVNT_HDR_SIZE\">RB_EVNT_HDR_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> = <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* time delta must be non zero */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decrement the entries to the page that an event is on.</span>", 
"<span class=\"comment\"> * The event does not even need to exist, only the pointer</span>", 
"<span class=\"comment\"> * to the page it is on. This may only be called before the commit</span>", 
"<span class=\"comment\"> * takes place.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#rb_decrement_entry\">rb_decrement_entry</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do the likely case first */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a> == (void *)<a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_dec\">local_dec</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#entries\">entries</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Because the commit page may be on the reader page we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start with the next page and check the end loop there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_page\">rb_inc_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#bpage\">bpage</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a> == (void *)<a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_dec\">local_dec</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#entries\">entries</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_page\">rb_inc_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bpage\">bpage</a> != <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* commit not part of this buffer?? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_commit_discard - discard an event that has not been committed</span>", 
"<span class=\"comment\"> * @buffer: the ring buffer</span>", 
"<span class=\"comment\"> * @event: non committed event to discard</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sometimes an event that is in the ring buffer needs to be ignored.</span>", 
"<span class=\"comment\"> * This function lets the user discard an event in the ring buffer</span>", 
"<span class=\"comment\"> * and then that event will not be read later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function only works if it is called before the the item has been</span>", 
"<span class=\"comment\"> * committed. It will try to free the event from the ring buffer</span>", 
"<span class=\"comment\"> * if another event has not been added behind it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If another event has been added behind it, it will set the event</span>", 
"<span class=\"comment\"> * up as discarded, and perform the commit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this function is called, do not call ring_buffer_unlock_commit on</span>", 
"<span class=\"comment\"> * the event.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_discard_commit\">ring_buffer_discard_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The event is discarded regardless */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_event_discard\">rb_event_discard</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This must only be called if the event has not been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * committed yet. Thus we can assume that preemption</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is still disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, !<a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_decrement_entry\">rb_decrement_entry</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_try_to_discard\">rb_try_to_discard</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The commit is still visible by the reader, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must still update the timestamp.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_update_write_stamp\">rb_update_write_stamp</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_end_commit\">rb_end_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_recursive_unlock\">trace_recursive_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_discard_commit\">ring_buffer_discard_commit</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_write - write data to the buffer without reserving</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to write to.</span>", 
"<span class=\"comment\"> * @length: The length of the data being written (excluding the event header)</span>", 
"<span class=\"comment\"> * @data: The data to write to the buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is like ring_buffer_lock_reserve and ring_buffer_unlock_commit as</span>", 
"<span class=\"comment\"> * one function. If you already have the data to write to the buffer, it</span>", 
"<span class=\"comment\"> * may be easier to simply call this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, like ring_buffer_lock_reserve, the length is the length of the data</span>", 
"<span class=\"comment\"> * and not the length of the event which would hold the header.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_write\">ring_buffer_write</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#body\">body</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a> != <a class=\"id\" href=\"#RB_BUFFERS_ON\">RB_BUFFERS_ON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#BUF_MAX_DATA_SIZE\">BUF_MAX_DATA_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_reserve_next_event\">rb_reserve_next_event</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#body\">body</a> = <a class=\"id\" href=\"#rb_event_data\">rb_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#body\">body</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_commit\">rb_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_write\">ring_buffer_write</a>);", 
"", 
"static int <a class=\"id\" href=\"#rb_per_cpu_empty\">rb_per_cpu_empty</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
];
xr_frag_insert('l/e3/9cbfc6d6684d7513d75b29da7efb21b1a4f418.xr', __xr_tmp);
