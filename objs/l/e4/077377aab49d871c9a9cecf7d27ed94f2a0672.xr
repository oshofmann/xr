var __xr_tmp = [
"    unsigned <a class=\"id\" href=\"#huff\">huff</a>;              <span class=\"comment\">/* Huffman code */</span>", 
"    unsigned <a class=\"id\" href=\"#incr\">incr</a>;              <span class=\"comment\">/* for incrementing code, index */</span>", 
"    unsigned <a class=\"id\" href=\"#fill\">fill</a>;              <span class=\"comment\">/* index for replicating entries */</span>", 
"    unsigned <a class=\"id\" href=\"#low\">low</a>;               <span class=\"comment\">/* low bits for current root entry */</span>", 
"    unsigned <a class=\"id\" href=\"#mask\">mask</a>;              <span class=\"comment\">/* mask for low root bits */</span>", 
"    <a class=\"id\" href=\"#code\">code</a> <a class=\"id\" href=\"#this\">this</a>;                  <span class=\"comment\">/* table entry for duplication */</span>", 
"    <a class=\"id\" href=\"#code\">code</a> *<a class=\"id\" href=\"#next\">next</a>;             <span class=\"comment\">/* next available space in table */</span>", 
"    const unsigned short *<a class=\"id\" href=\"#base\">base</a>;     <span class=\"comment\">/* base value table to use */</span>", 
"    const unsigned short *<a class=\"id\" href=\"#extra\">extra</a>;    <span class=\"comment\">/* extra bits table to use */</span>", 
"    int <a class=\"id\" href=\"#end\">end</a>;                    <span class=\"comment\">/* use base and extra for symbol &gt; end */</span>", 
"    unsigned short <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MAXBITS\">MAXBITS</a>+1];    <span class=\"comment\">/* number of codes of each length */</span>", 
"    unsigned short <a class=\"id\" href=\"#offs\">offs</a>[<a class=\"id\" href=\"#MAXBITS\">MAXBITS</a>+1];     <span class=\"comment\">/* offsets in table for each length */</span>", 
"    static const unsigned short <a class=\"id\" href=\"#lbase\">lbase</a>[31] = { <span class=\"comment\">/* Length codes 257..285 base */</span>", 
"        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,", 
"        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};", 
"    static const unsigned short <a class=\"id\" href=\"#lext\">lext</a>[31] = { <span class=\"comment\">/* Length codes 257..285 extra */</span>", 
"        16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,", 
"        19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 201, 196};", 
"    static const unsigned short <a class=\"id\" href=\"#dbase\">dbase</a>[32] = { <span class=\"comment\">/* Distance codes 0..29 base */</span>", 
"        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,", 
"        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,", 
"        8193, 12289, 16385, 24577, 0, 0};", 
"    static const unsigned short <a class=\"id\" href=\"#dext\">dext</a>[32] = { <span class=\"comment\">/* Distance codes 0..29 extra */</span>", 
"        16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,", 
"        23, 23, 24, 24, 25, 25, 26, 26, 27, 27,", 
"        28, 28, 29, 29, 64, 64};", 
"", 
"    <span class=\"comment\">/*</span>", 
"<span class=\"comment\">       Process a set of code lengths to create a canonical Huffman code.  The</span>", 
"<span class=\"comment\">       code lengths are lens[0..codes-1].  Each length corresponds to the</span>", 
"<span class=\"comment\">       symbols 0..codes-1.  The Huffman code is generated by first sorting the</span>", 
"<span class=\"comment\">       symbols by length from short to long, and retaining the symbol order</span>", 
"<span class=\"comment\">       for codes with equal lengths.  Then the code starts with all zero bits</span>", 
"<span class=\"comment\">       for the first code of the shortest length, and the codes are integer</span>", 
"<span class=\"comment\">       increments for the same length, and zeros are appended as the length</span>", 
"<span class=\"comment\">       increases.  For the deflate format, these bits are stored backwards</span>", 
"<span class=\"comment\">       from their more natural integer increment ordering, and so when the</span>", 
"<span class=\"comment\">       decoding tables are built in the large loop below, the integer codes</span>", 
"<span class=\"comment\">       are incremented backwards.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">       This routine assumes, but does not check, that all of the entries in</span>", 
"<span class=\"comment\">       lens[] are in the range 0..MAXBITS.  The caller must assure this.</span>", 
"<span class=\"comment\">       1..MAXBITS is interpreted as that code length.  zero means that that</span>", 
"<span class=\"comment\">       symbol does not occur in this code.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">       The codes are sorted by computing a count of codes for each length,</span>", 
"<span class=\"comment\">       creating from that a table of starting indices for each length in the</span>", 
"<span class=\"comment\">       sorted table, and then entering the symbols in order in the sorted</span>", 
"<span class=\"comment\">       table.  The sorted table is work[], with that space being provided by</span>", 
"<span class=\"comment\">       the caller.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">       The length counts are used for other purposes as well, i.e. finding</span>", 
"<span class=\"comment\">       the minimum and maximum length codes, determining if there are any</span>", 
"<span class=\"comment\">       codes at all, checking for a valid set of lengths, and looking ahead</span>", 
"<span class=\"comment\">       at length counts to determine sub-table sizes when building the</span>", 
"<span class=\"comment\">       decoding tables.</span>", 
"<span class=\"comment\">     */</span>", 
"", 
"    <span class=\"comment\">/* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */</span>", 
"    for (<a class=\"id\" href=\"#len\">len</a> = 0; <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#MAXBITS\">MAXBITS</a>; <a class=\"id\" href=\"#len\">len</a>++)", 
"        <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#len\">len</a>] = 0;", 
"    for (<a class=\"id\" href=\"#sym\">sym</a> = 0; <a class=\"id\" href=\"#sym\">sym</a> &lt; <a class=\"id\" href=\"#codes\">codes</a>; <a class=\"id\" href=\"#sym\">sym</a>++)", 
"        <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#lens\">lens</a>[<a class=\"id\" href=\"#sym\">sym</a>]]++;", 
"", 
"    <span class=\"comment\">/* bound code lengths, force root to be within code lengths */</span>", 
"    <a class=\"id\" href=\"#root\">root</a> = *<a class=\"id\" href=\"#bits\">bits</a>;", 
"    for (<a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#MAXBITS\">MAXBITS</a>; <a class=\"id\" href=\"#max\">max</a> >= 1; <a class=\"id\" href=\"#max\">max</a>--)", 
"        if (<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#max\">max</a>] != 0) break;", 
"    if (<a class=\"id\" href=\"#root\">root</a> &gt; <a class=\"id\" href=\"#max\">max</a>) <a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"    if (<a class=\"id\" href=\"#max\">max</a> == 0) {                     <span class=\"comment\">/* no symbols to code at all */</span>", 
"        <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> = (unsigned char)64;    <span class=\"comment\">/* invalid code marker */</span>", 
"        <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a> = (unsigned char)1;", 
"        <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> = (unsigned short)0;", 
"        *(*<a class=\"id\" href=\"#table\">table</a>)++ = <a class=\"id\" href=\"#this\">this</a>;             <span class=\"comment\">/* make a table to force an error */</span>", 
"        *(*<a class=\"id\" href=\"#table\">table</a>)++ = <a class=\"id\" href=\"#this\">this</a>;", 
"        *<a class=\"id\" href=\"#bits\">bits</a> = 1;", 
"        return 0;     <span class=\"comment\">/* no symbols, but wait for decoding to report error */</span>", 
"    }", 
"    for (<a class=\"id\" href=\"#min\">min</a> = 1; <a class=\"id\" href=\"#min\">min</a> <= <a class=\"id\" href=\"#MAXBITS\">MAXBITS</a>; <a class=\"id\" href=\"#min\">min</a>++)", 
"        if (<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#min\">min</a>] != 0) break;", 
"    if (<a class=\"id\" href=\"#root\">root</a> &lt; <a class=\"id\" href=\"#min\">min</a>) <a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#min\">min</a>;", 
"", 
"    <span class=\"comment\">/* check for an over-subscribed or incomplete set of lengths */</span>", 
"    <a class=\"id\" href=\"#left\">left</a> = 1;", 
"    for (<a class=\"id\" href=\"#len\">len</a> = 1; <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#MAXBITS\">MAXBITS</a>; <a class=\"id\" href=\"#len\">len</a>++) {", 
"        <a class=\"id\" href=\"#left\">left</a> <<= 1;", 
"        <a class=\"id\" href=\"#left\">left</a> -= <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#len\">len</a>];", 
"        if (<a class=\"id\" href=\"#left\">left</a> &lt; 0) return -1;        <span class=\"comment\">/* over-subscribed */</span>", 
"    }", 
"    if (<a class=\"id\" href=\"#left\">left</a> &gt; 0 && (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#CODES\">CODES</a> || <a class=\"id\" href=\"#max\">max</a> != 1))", 
"        return -1;                      <span class=\"comment\">/* incomplete set */</span>", 
"", 
"    <span class=\"comment\">/* generate offsets into symbol table for each length for sorting */</span>", 
"    <a class=\"id\" href=\"#offs\">offs</a>[1] = 0;", 
"    for (<a class=\"id\" href=\"#len\">len</a> = 1; <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#MAXBITS\">MAXBITS</a>; <a class=\"id\" href=\"#len\">len</a>++)", 
"        <a class=\"id\" href=\"#offs\">offs</a>[<a class=\"id\" href=\"#len\">len</a> + 1] = <a class=\"id\" href=\"#offs\">offs</a>[<a class=\"id\" href=\"#len\">len</a>] + <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#len\">len</a>];", 
"", 
"    <span class=\"comment\">/* sort symbols by length, by symbol order within each length */</span>", 
"    for (<a class=\"id\" href=\"#sym\">sym</a> = 0; <a class=\"id\" href=\"#sym\">sym</a> &lt; <a class=\"id\" href=\"#codes\">codes</a>; <a class=\"id\" href=\"#sym\">sym</a>++)", 
"        if (<a class=\"id\" href=\"#lens\">lens</a>[<a class=\"id\" href=\"#sym\">sym</a>] != 0) <a class=\"id\" href=\"#work\">work</a>[<a class=\"id\" href=\"#offs\">offs</a>[<a class=\"id\" href=\"#lens\">lens</a>[<a class=\"id\" href=\"#sym\">sym</a>]]++] = (unsigned short)<a class=\"id\" href=\"#sym\">sym</a>;", 
"", 
"    <span class=\"comment\">/*</span>", 
"<span class=\"comment\">       Create and fill in decoding tables.  In this loop, the table being</span>", 
"<span class=\"comment\">       filled is at next and has curr index bits.  The code being used is huff</span>", 
"<span class=\"comment\">       with length len.  That code is converted to an index by dropping drop</span>", 
"<span class=\"comment\">       bits off of the bottom.  For codes where len is less than drop + curr,</span>", 
"<span class=\"comment\">       those top drop + curr - len bits are incremented through all values to</span>", 
"<span class=\"comment\">       fill the table with replicated entries.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">       root is the number of index bits for the root table.  When len exceeds</span>", 
"<span class=\"comment\">       root, sub-tables are created pointed to by the root entry with an index</span>", 
"<span class=\"comment\">       of the low root bits of huff.  This is saved in low to check for when a</span>", 
"<span class=\"comment\">       new sub-table should be started.  drop is zero when the root table is</span>", 
"<span class=\"comment\">       being filled, and drop is root when sub-tables are being filled.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">       When a new sub-table is needed, it is necessary to look ahead in the</span>", 
"<span class=\"comment\">       code lengths to determine what size sub-table is needed.  The length</span>", 
"<span class=\"comment\">       counts are used for this, and so count[] is decremented as codes are</span>", 
"<span class=\"comment\">       entered in the tables.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">       used keeps track of how many table entries have been allocated from the</span>", 
"<span class=\"comment\">       provided *table space.  It is checked when a LENS table is being made</span>", 
"<span class=\"comment\">       against the space in *table, ENOUGH, minus the maximum space needed by</span>", 
"<span class=\"comment\">       the worst case distance code, MAXD.  This should never happen, but the</span>", 
"<span class=\"comment\">       sufficiency of ENOUGH has not been proven exhaustively, hence the check.</span>", 
"<span class=\"comment\">       This assumes that when type == LENS, bits == 9.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">       sym increments through all symbols, and the loop terminates when</span>", 
"<span class=\"comment\">       all codes of length max, i.e. all codes, have been processed.  This</span>", 
"<span class=\"comment\">       routine permits incomplete codes, so another loop after this one fills</span>", 
"<span class=\"comment\">       in the rest of the decoding tables with invalid code markers.</span>", 
"<span class=\"comment\">     */</span>", 
"", 
"    <span class=\"comment\">/* set up for code type */</span>", 
"    switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"    case <a class=\"id\" href=\"#CODES\">CODES</a>:", 
"        <a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#extra\">extra</a> = <a class=\"id\" href=\"#work\">work</a>;    <span class=\"comment\">/* dummy value--not used */</span>", 
"        <a class=\"id\" href=\"#end\">end</a> = 19;", 
"        break;", 
"    case <a class=\"id\" href=\"#LENS\">LENS</a>:", 
"        <a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#lbase\">lbase</a>;", 
"        <a class=\"id\" href=\"#base\">base</a> -= 257;", 
"        <a class=\"id\" href=\"#extra\">extra</a> = <a class=\"id\" href=\"#lext\">lext</a>;", 
"        <a class=\"id\" href=\"#extra\">extra</a> -= 257;", 
"        <a class=\"id\" href=\"#end\">end</a> = 256;", 
"        break;", 
"    default:            <span class=\"comment\">/* DISTS */</span>", 
"        <a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#dbase\">dbase</a>;", 
"        <a class=\"id\" href=\"#extra\">extra</a> = <a class=\"id\" href=\"#dext\">dext</a>;", 
"        <a class=\"id\" href=\"#end\">end</a> = -1;", 
"    }", 
"", 
"    <span class=\"comment\">/* initialize state for loop */</span>", 
"    <a class=\"id\" href=\"#huff\">huff</a> = 0;                   <span class=\"comment\">/* starting code */</span>", 
"    <a class=\"id\" href=\"#sym\">sym</a> = 0;                    <span class=\"comment\">/* starting code symbol */</span>", 
"    <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#min\">min</a>;                  <span class=\"comment\">/* starting code length */</span>", 
"    <a class=\"id\" href=\"#next\">next</a> = *<a class=\"id\" href=\"#table\">table</a>;              <span class=\"comment\">/* current table to fill in */</span>", 
"    <a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#root\">root</a>;                <span class=\"comment\">/* current table index bits */</span>", 
"    <a class=\"id\" href=\"#drop\">drop</a> = 0;                   <span class=\"comment\">/* current bits to drop from code for index */</span>", 
"    <a class=\"id\" href=\"#low\">low</a> = (unsigned)(-1);       <span class=\"comment\">/* trigger new sub-table when len &gt; root */</span>", 
"    <a class=\"id\" href=\"#used\">used</a> = 1U << <a class=\"id\" href=\"#root\">root</a>;          <span class=\"comment\">/* use root table entries */</span>", 
"    <a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#used\">used</a> - 1;            <span class=\"comment\">/* mask for comparing low */</span>", 
"", 
"    <span class=\"comment\">/* check available table space */</span>", 
"    if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#LENS\">LENS</a> && <a class=\"id\" href=\"#used\">used</a> >= <a class=\"id\" href=\"#ENOUGH\">ENOUGH</a> - <a class=\"id\" href=\"#MAXD\">MAXD</a>)", 
"        return 1;", 
"", 
"    <span class=\"comment\">/* process all codes and make table entries */</span>", 
"    for (;;) {", 
"        <span class=\"comment\">/* create table entry */</span>", 
"        <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a> = (unsigned char)(<a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#drop\">drop</a>);", 
"        if ((int)(<a class=\"id\" href=\"#work\">work</a>[<a class=\"id\" href=\"#sym\">sym</a>]) &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"            <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> = (unsigned char)0;", 
"            <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#work\">work</a>[<a class=\"id\" href=\"#sym\">sym</a>];", 
"        }", 
"        else if ((int)(<a class=\"id\" href=\"#work\">work</a>[<a class=\"id\" href=\"#sym\">sym</a>]) &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"            <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> = (unsigned char)(<a class=\"id\" href=\"#extra\">extra</a>[<a class=\"id\" href=\"#work\">work</a>[<a class=\"id\" href=\"#sym\">sym</a>]]);", 
"            <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#base\">base</a>[<a class=\"id\" href=\"#work\">work</a>[<a class=\"id\" href=\"#sym\">sym</a>]];", 
"        }", 
"        else {", 
"            <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> = (unsigned char)(32 + 64);         <span class=\"comment\">/* end of block */</span>", 
"            <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> = 0;", 
"        }", 
"", 
"        <span class=\"comment\">/* replicate for those indices with low len bits equal to huff */</span>", 
"        <a class=\"id\" href=\"#incr\">incr</a> = 1U << (<a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#drop\">drop</a>);", 
"        <a class=\"id\" href=\"#fill\">fill</a> = 1U << <a class=\"id\" href=\"#curr\">curr</a>;", 
"        <a class=\"id\" href=\"#min\">min</a> = <a class=\"id\" href=\"#fill\">fill</a>;                 <span class=\"comment\">/* save offset to next table */</span>", 
"        do {", 
"            <a class=\"id\" href=\"#fill\">fill</a> -= <a class=\"id\" href=\"#incr\">incr</a>;", 
"            <a class=\"id\" href=\"#next\">next</a>[(<a class=\"id\" href=\"#huff\">huff</a> >> <a class=\"id\" href=\"#drop\">drop</a>) + <a class=\"id\" href=\"#fill\">fill</a>] = <a class=\"id\" href=\"#this\">this</a>;", 
"        } while (<a class=\"id\" href=\"#fill\">fill</a> != 0);", 
"", 
"        <span class=\"comment\">/* backwards increment the len-bit code huff */</span>", 
"        <a class=\"id\" href=\"#incr\">incr</a> = 1U << (<a class=\"id\" href=\"#len\">len</a> - 1);", 
"        while (<a class=\"id\" href=\"#huff\">huff</a> &amp; <a class=\"id\" href=\"#incr\">incr</a>)", 
"            <a class=\"id\" href=\"#incr\">incr</a> >>= 1;", 
"        if (<a class=\"id\" href=\"#incr\">incr</a> != 0) {", 
"            <a class=\"id\" href=\"#huff\">huff</a> &= <a class=\"id\" href=\"#incr\">incr</a> - 1;", 
"            <a class=\"id\" href=\"#huff\">huff</a> += <a class=\"id\" href=\"#incr\">incr</a>;", 
"        }", 
"        else", 
"            <a class=\"id\" href=\"#huff\">huff</a> = 0;", 
"", 
"        <span class=\"comment\">/* go to next symbol, update count, len */</span>", 
"        <a class=\"id\" href=\"#sym\">sym</a>++;", 
"        if (--(<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#len\">len</a>]) == 0) {", 
"            if (<a class=\"id\" href=\"#len\">len</a> == <a class=\"id\" href=\"#max\">max</a>) break;", 
"            <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#lens\">lens</a>[<a class=\"id\" href=\"#work\">work</a>[<a class=\"id\" href=\"#sym\">sym</a>]];", 
"        }", 
"", 
"        <span class=\"comment\">/* create new sub-table if needed */</span>", 
"        if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#root\">root</a> && (<a class=\"id\" href=\"#huff\">huff</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) != <a class=\"id\" href=\"#low\">low</a>) {", 
"            <span class=\"comment\">/* if first time, transition to sub-tables */</span>", 
"            if (<a class=\"id\" href=\"#drop\">drop</a> == 0)", 
"                <a class=\"id\" href=\"#drop\">drop</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"", 
"            <span class=\"comment\">/* increment past last table */</span>", 
"            <a class=\"id\" href=\"#next\">next</a> += <a class=\"id\" href=\"#min\">min</a>;            <span class=\"comment\">/* here min is 1 &lt;&lt; curr */</span>", 
"", 
"            <span class=\"comment\">/* determine length of next table */</span>", 
"            <a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#drop\">drop</a>;", 
"            <a class=\"id\" href=\"#left\">left</a> = (int)(1 << <a class=\"id\" href=\"#curr\">curr</a>);", 
"            while (<a class=\"id\" href=\"#curr\">curr</a> + <a class=\"id\" href=\"#drop\">drop</a> &lt; <a class=\"id\" href=\"#max\">max</a>) {", 
"                <a class=\"id\" href=\"#left\">left</a> -= <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#curr\">curr</a> + <a class=\"id\" href=\"#drop\">drop</a>];", 
"                if (<a class=\"id\" href=\"#left\">left</a> <= 0) break;", 
"                <a class=\"id\" href=\"#curr\">curr</a>++;", 
"                <a class=\"id\" href=\"#left\">left</a> <<= 1;", 
"            }", 
"", 
"            <span class=\"comment\">/* check for enough space */</span>", 
"            <a class=\"id\" href=\"#used\">used</a> += 1U << <a class=\"id\" href=\"#curr\">curr</a>;", 
"            if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#LENS\">LENS</a> && <a class=\"id\" href=\"#used\">used</a> >= <a class=\"id\" href=\"#ENOUGH\">ENOUGH</a> - <a class=\"id\" href=\"#MAXD\">MAXD</a>)", 
"                return 1;", 
"", 
"            <span class=\"comment\">/* point entry in root table to sub-table */</span>", 
"            <a class=\"id\" href=\"#low\">low</a> = <a class=\"id\" href=\"#huff\">huff</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>;", 
"            (*<a class=\"id\" href=\"#table\">table</a>)[<a class=\"id\" href=\"#low\">low</a>].<a class=\"id\" href=\"#op\">op</a> = (unsigned char)<a class=\"id\" href=\"#curr\">curr</a>;", 
"            (*<a class=\"id\" href=\"#table\">table</a>)[<a class=\"id\" href=\"#low\">low</a>].<a class=\"id\" href=\"#bits\">bits</a> = (unsigned char)<a class=\"id\" href=\"#root\">root</a>;", 
"            (*<a class=\"id\" href=\"#table\">table</a>)[<a class=\"id\" href=\"#low\">low</a>].<a class=\"id\" href=\"#val\">val</a> = (unsigned short)(<a class=\"id\" href=\"#next\">next</a> - *<a class=\"id\" href=\"#table\">table</a>);", 
"        }", 
"    }", 
"", 
"    <span class=\"comment\">/*</span>", 
"<span class=\"comment\">       Fill in rest of table for incomplete codes.  This loop is similar to the</span>", 
"<span class=\"comment\">       loop above in incrementing huff for table indices.  It is assumed that</span>", 
"<span class=\"comment\">       len is equal to curr + drop, so there is no loop needed to increment</span>", 
"<span class=\"comment\">       through high index bits.  When the current sub-table is filled, the loop</span>", 
"<span class=\"comment\">       drops back to the root table to fill in any remaining entries there.</span>", 
"<span class=\"comment\">     */</span>", 
"    <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> = (unsigned char)64;                <span class=\"comment\">/* invalid code marker */</span>", 
"    <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a> = (unsigned char)(<a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#drop\">drop</a>);", 
"    <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> = (unsigned short)0;", 
"    while (<a class=\"id\" href=\"#huff\">huff</a> != 0) {", 
"        <span class=\"comment\">/* when done with sub-table, drop back to root table */</span>", 
"        if (<a class=\"id\" href=\"#drop\">drop</a> != 0 && (<a class=\"id\" href=\"#huff\">huff</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) != <a class=\"id\" href=\"#low\">low</a>) {", 
"            <a class=\"id\" href=\"#drop\">drop</a> = 0;", 
"            <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"            <a class=\"id\" href=\"#next\">next</a> = *<a class=\"id\" href=\"#table\">table</a>;", 
"            <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a> = (unsigned char)<a class=\"id\" href=\"#len\">len</a>;", 
"        }", 
"", 
"        <span class=\"comment\">/* put invalid code marker in table */</span>", 
"        <a class=\"id\" href=\"#next\">next</a>[<a class=\"id\" href=\"#huff\">huff</a> >> <a class=\"id\" href=\"#drop\">drop</a>] = <a class=\"id\" href=\"#this\">this</a>;", 
"", 
"        <span class=\"comment\">/* backwards increment the len-bit code huff */</span>", 
"        <a class=\"id\" href=\"#incr\">incr</a> = 1U << (<a class=\"id\" href=\"#len\">len</a> - 1);", 
"        while (<a class=\"id\" href=\"#huff\">huff</a> &amp; <a class=\"id\" href=\"#incr\">incr</a>)", 
"            <a class=\"id\" href=\"#incr\">incr</a> >>= 1;", 
"        if (<a class=\"id\" href=\"#incr\">incr</a> != 0) {", 
"            <a class=\"id\" href=\"#huff\">huff</a> &= <a class=\"id\" href=\"#incr\">incr</a> - 1;", 
"            <a class=\"id\" href=\"#huff\">huff</a> += <a class=\"id\" href=\"#incr\">incr</a>;", 
"        }", 
"        else", 
"            <a class=\"id\" href=\"#huff\">huff</a> = 0;", 
"    }", 
"", 
"    <span class=\"comment\">/* set return parameters */</span>", 
"    *<a class=\"id\" href=\"#table\">table</a> += <a class=\"id\" href=\"#used\">used</a>;", 
"    *<a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"    return 0;", 
"}", 
];
xr_frag_insert('l/e4/077377aab49d871c9a9cecf7d27ed94f2a0672.xr', __xr_tmp);
