var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_INSN_H\">_ASM_X86_INSN_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_INSN_H\">_ASM_X86_INSN_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86 instruction analysis</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) IBM Corporation, 2009</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* insn_attr_t is defined in inat.h */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#inat\">inat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#insn_field\">insn_field</a> {", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_value_t\">insn_value_t</a> <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>[4];", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"comment\">/* !0 if we've run insn_get_xxx() for this field */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#got\">got</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#insn\">insn</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#prefixes\">prefixes</a>;<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Prefixes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * prefixes.bytes[3]: last prefix</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#rex_prefix\">rex_prefix</a>;<span class=\"ts\"/><span class=\"comment\">/* REX prefix */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>;<span class=\"ts\"/><span class=\"comment\">/* VEX prefix */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#opcode\">opcode</a>;<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * opcode.bytes[0]: opcode1</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * opcode.bytes[1]: opcode2</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * opcode.bytes[2]: opcode3</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#modrm\">modrm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#sib\">sib</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#displacement\">displacement</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#immediate\">immediate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#moffset1\">moffset1</a>;<span class=\"ts\"/><span class=\"comment\">/* for 64bit MOV */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#immediate1\">immediate1</a>;<span class=\"ts\"/><span class=\"comment\">/* for 64bit imm or off16/32 */</span>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#moffset2\">moffset2</a>;<span class=\"ts\"/><span class=\"comment\">/* for 64bit MOV */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> <a class=\"id\" href=\"#immediate2\">immediate2</a>;<span class=\"ts\"/><span class=\"comment\">/* for 64bit imm or seg16 */</span>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_attr_t\">insn_attr_t</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#opnd_bytes\">opnd_bytes</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#addr_bytes\">addr_bytes</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#x86_64\">x86_64</a>;", 
"", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> *<a class=\"id\" href=\"#kaddr\">kaddr</a>;<span class=\"ts\"/><span class=\"comment\">/* kernel address of insn to analyze */</span>", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> *<a class=\"id\" href=\"#next_byte\">next_byte</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_INSN_SIZE\">MAX_INSN_SIZE</a><span class=\"ts\"/>16", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_MODRM_MOD\">X86_MODRM_MOD</a>(<a class=\"id\" href=\"#modrm\">modrm</a>) (((<a class=\"id\" href=\"#modrm\">modrm</a>) &amp; 0xc0) >> 6)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_MODRM_REG\">X86_MODRM_REG</a>(<a class=\"id\" href=\"#modrm\">modrm</a>) (((<a class=\"id\" href=\"#modrm\">modrm</a>) &amp; 0x38) >> 3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_MODRM_RM\">X86_MODRM_RM</a>(<a class=\"id\" href=\"#modrm\">modrm</a>) ((<a class=\"id\" href=\"#modrm\">modrm</a>) &amp; 0x07)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_SIB_SCALE\">X86_SIB_SCALE</a>(<a class=\"id\" href=\"#sib\">sib</a>) (((<a class=\"id\" href=\"#sib\">sib</a>) &amp; 0xc0) >> 6)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_SIB_INDEX\">X86_SIB_INDEX</a>(<a class=\"id\" href=\"#sib\">sib</a>) (((<a class=\"id\" href=\"#sib\">sib</a>) &amp; 0x38) >> 3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_SIB_BASE\">X86_SIB_BASE</a>(<a class=\"id\" href=\"#sib\">sib</a>) ((<a class=\"id\" href=\"#sib\">sib</a>) &amp; 0x07)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_REX_W\">X86_REX_W</a>(<a class=\"id\" href=\"#rex\">rex</a>) ((<a class=\"id\" href=\"#rex\">rex</a>) &amp; 8)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_REX_R\">X86_REX_R</a>(<a class=\"id\" href=\"#rex\">rex</a>) ((<a class=\"id\" href=\"#rex\">rex</a>) &amp; 4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_REX_X\">X86_REX_X</a>(<a class=\"id\" href=\"#rex\">rex</a>) ((<a class=\"id\" href=\"#rex\">rex</a>) &amp; 2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_REX_B\">X86_REX_B</a>(<a class=\"id\" href=\"#rex\">rex</a>) ((<a class=\"id\" href=\"#rex\">rex</a>) &amp; 1)", 
"", 
"<span class=\"comment\">/* VEX bit flags  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX_W\">X86_VEX_W</a>(<a class=\"id\" href=\"#vex\">vex</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#vex\">vex</a>) &amp; 0x80)<span class=\"ts\"/><span class=\"comment\">/* VEX3 Byte2 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX_R\">X86_VEX_R</a>(<a class=\"id\" href=\"#vex\">vex</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#vex\">vex</a>) &amp; 0x80)<span class=\"ts\"/><span class=\"comment\">/* VEX2/3 Byte1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX_X\">X86_VEX_X</a>(<a class=\"id\" href=\"#vex\">vex</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#vex\">vex</a>) &amp; 0x40)<span class=\"ts\"/><span class=\"comment\">/* VEX3 Byte1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX_B\">X86_VEX_B</a>(<a class=\"id\" href=\"#vex\">vex</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#vex\">vex</a>) &amp; 0x20)<span class=\"ts\"/><span class=\"comment\">/* VEX3 Byte1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX_L\">X86_VEX_L</a>(<a class=\"id\" href=\"#vex\">vex</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#vex\">vex</a>) &amp; 0x04)<span class=\"ts\"/><span class=\"comment\">/* VEX3 Byte2, VEX2 Byte1 */</span>", 
"<span class=\"comment\">/* VEX bit fields */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX3_M\">X86_VEX3_M</a>(<a class=\"id\" href=\"#vex\">vex</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#vex\">vex</a>) &amp; 0x1f)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* VEX3 Byte1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX2_M\">X86_VEX2_M</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* VEX2.M always 1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX_V\">X86_VEX_V</a>(<a class=\"id\" href=\"#vex\">vex</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#vex\">vex</a>) &amp; 0x78) >> 3)<span class=\"ts\"/><span class=\"comment\">/* VEX3 Byte2, VEX2 Byte1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX_P\">X86_VEX_P</a>(<a class=\"id\" href=\"#vex\">vex</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#vex\">vex</a>) &amp; 0x03)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* VEX3 Byte2, VEX2 Byte1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VEX_M_MAX\">X86_VEX_M_MAX</a><span class=\"ts\"/>0x1f<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* VEX3.M Maximum value */</span>", 
"", 
"<span class=\"comment\">/* The last prefix is needed for two-byte and three-byte opcodes */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#insn_last_prefix\">insn_last_prefix</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#prefixes\">prefixes</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[3];", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#insn_init\">insn_init</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>, const void *<a class=\"id\" href=\"#kaddr\">kaddr</a>, int <a class=\"id\" href=\"#x86_64\">x86_64</a>);", 
"extern void <a class=\"id\" href=\"#insn_get_prefixes\">insn_get_prefixes</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>);", 
"extern void <a class=\"id\" href=\"#insn_get_opcode\">insn_get_opcode</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>);", 
"extern void <a class=\"id\" href=\"#insn_get_modrm\">insn_get_modrm</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>);", 
"extern void <a class=\"id\" href=\"#insn_get_sib\">insn_get_sib</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>);", 
"extern void <a class=\"id\" href=\"#insn_get_displacement\">insn_get_displacement</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>);", 
"extern void <a class=\"id\" href=\"#insn_get_immediate\">insn_get_immediate</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>);", 
"extern void <a class=\"id\" href=\"#insn_get_length\">insn_get_length</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>);", 
"", 
"<span class=\"comment\">/* Attribute will be determined after getting ModRM (for opcode groups) */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#insn_get_attribute\">insn_get_attribute</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_get_modrm\">insn_get_modrm</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Instruction uses RIP-relative addressing */</span>", 
"extern int <a class=\"id\" href=\"#insn_rip_relative\">insn_rip_relative</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>);", 
"", 
"<span class=\"comment\">/* Init insn for kernel text */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#kernel_insn_init\">kernel_insn_init</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>, const void *<a class=\"id\" href=\"#kaddr\">kaddr</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_init\">insn_init</a>(<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#kaddr\">kaddr</a>, 1);", 
"#else <span class=\"comment\">/* CONFIG_X86_32 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_init\">insn_init</a>(<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#kaddr\">kaddr</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#insn_is_avx\">insn_is_avx</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#prefixes\">prefixes</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_prefixes\">insn_get_prefixes</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#value\">value</a> != 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#insn_vex_m_bits\">insn_vex_m_bits</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> == 2)<span class=\"ts\"/><span class=\"comment\">/* 2 bytes VEX */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#X86_VEX2_M\">X86_VEX2_M</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#X86_VEX3_M\">X86_VEX3_M</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[1]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#insn_vex_p_bits\">insn_vex_p_bits</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> == 2)<span class=\"ts\"/><span class=\"comment\">/* 2 bytes VEX */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#X86_VEX_P\">X86_VEX_P</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[1]);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#X86_VEX_P\">X86_VEX_P</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[2]);", 
"}", 
"", 
"<span class=\"comment\">/* Offset of each field from kaddr */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#insn_offset_rex_prefix\">insn_offset_rex_prefix</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#prefixes\">prefixes</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#insn_offset_vex_prefix\">insn_offset_vex_prefix</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn_offset_rex_prefix\">insn_offset_rex_prefix</a>(<a class=\"id\" href=\"#insn\">insn</a>) + <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#rex_prefix\">rex_prefix</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#insn_offset_opcode\">insn_offset_opcode</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn_offset_vex_prefix\">insn_offset_vex_prefix</a>(<a class=\"id\" href=\"#insn\">insn</a>) + <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#insn_offset_modrm\">insn_offset_modrm</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn_offset_opcode\">insn_offset_opcode</a>(<a class=\"id\" href=\"#insn\">insn</a>) + <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#insn_offset_sib\">insn_offset_sib</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn_offset_modrm\">insn_offset_modrm</a>(<a class=\"id\" href=\"#insn\">insn</a>) + <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#insn_offset_displacement\">insn_offset_displacement</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn_offset_sib\">insn_offset_sib</a>(<a class=\"id\" href=\"#insn\">insn</a>) + <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#sib\">sib</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#insn_offset_immediate\">insn_offset_immediate</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn_offset_displacement\">insn_offset_displacement</a>(<a class=\"id\" href=\"#insn\">insn</a>) + <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_INSN_H */</span>", 
];
xr_frag_insert('l/e4/2a62eaaee8a6f53b0b046e62796d4be0e15229.xr', __xr_tmp);
