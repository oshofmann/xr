var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * DMA Pool allocator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2001 David Brownell</span>", 
"<span class=\"comment\"> * Copyright 2007 Intel Corporation</span>", 
"<span class=\"comment\"> *   Author: Matthew Wilcox &lt;willy@linux.intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This software may be redistributed and/or modified under the terms of</span>", 
"<span class=\"comment\"> * the GNU General Public License (\"GPL\") version 2 as published by the</span>", 
"<span class=\"comment\"> * Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This allocator returns small blocks of a given size which are DMA-able by</span>", 
"<span class=\"comment\"> * the given device.  It uses the dma_alloc_coherent page allocator to get</span>", 
"<span class=\"comment\"> * new pages, then splits them up into blocks of the required size.</span>", 
"<span class=\"comment\"> * Many older drivers still have their own code to do this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The current design of this allocator is fairly simple.  The pool is</span>", 
"<span class=\"comment\"> * represented by the 'struct dma_pool' which keeps a doubly-linked list of</span>", 
"<span class=\"comment\"> * allocated pages.  Each page in the page_list is split into blocks of at</span>", 
"<span class=\"comment\"> * least 'size' bytes.  Free blocks are tracked in an unsorted singly-linked</span>", 
"<span class=\"comment\"> * list of free blocks within the page.  Used blocks aren't tracked, but we</span>", 
"<span class=\"comment\"> * keep a count of how many are currently allocated from each page.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dma\">dma</a>-<a class=\"id\" href=\"#mapping\">mapping</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmapool\">dmapool</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poison\">poison</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SLAB\">CONFIG_DEBUG_SLAB</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SLUB_DEBUG_ON\">CONFIG_SLUB_DEBUG_ON</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMAPOOL_DEBUG\">DMAPOOL_DEBUG</a> 1", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the pool */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#page_list\">page_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#allocation\">allocation</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#boundary\">boundary</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[32];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#waitq\">waitq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#pools\">pools</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dma_page\">dma_page</a> {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cacheable header for 'allocation' bytes */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#page_list\">page_list</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma\">dma</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#in_use\">in_use</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#POOL_TIMEOUT_JIFFIES\">POOL_TIMEOUT_JIFFIES</a><span class=\"ts\"/>((100 <span class=\"comment\">/* msec */</span> * <a class=\"id\" href=\"#HZ\">HZ</a>) / 1000)", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#pools_lock\">pools_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#show_pools\">show_pools</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#temp\">temp</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a> = <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#size\">size</a>, \"poolinfo - 0.1\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#temp\">temp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> += <a class=\"id\" href=\"#temp\">temp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pools_lock\">pools_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pool\">pool</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_pools\">dma_pools</a>, <a class=\"id\" href=\"#pools\">pools</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pages\">pages</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocks\">blocks</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#page_list\">page_list</a>, <a class=\"id\" href=\"#page_list\">page_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocks\">blocks</a> += <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#in_use\">in_use</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* per-pool info, no real statistics yet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a> = <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#size\">size</a>, \"%-16s %4u %4Zu %4Zu %2u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#blocks\">blocks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pages\">pages</a> * (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#allocation\">allocation</a> / <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#size\">size</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#temp\">temp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> += <a class=\"id\" href=\"#temp\">temp</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pools_lock\">pools_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#pools\">pools</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#show_pools\">show_pools</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_pool_create - Creates a pool of consistent memory blocks, for dma.</span>", 
"<span class=\"comment\"> * @name: name of pool, for diagnostics</span>", 
"<span class=\"comment\"> * @dev: device that will be doing the DMA</span>", 
"<span class=\"comment\"> * @size: size of the blocks in this pool.</span>", 
"<span class=\"comment\"> * @align: alignment requirement for blocks; must be a power of two</span>", 
"<span class=\"comment\"> * @boundary: returned blocks won't cross this power of two boundary</span>", 
"<span class=\"comment\"> * Context: !in_interrupt()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a dma allocation pool with the requested characteristics, or</span>", 
"<span class=\"comment\"> * null if one can't be created.  Given one of these pools, dma_pool_alloc()</span>", 
"<span class=\"comment\"> * may be used to allocate memory.  Such memory will all have \"consistent\"</span>", 
"<span class=\"comment\"> * DMA mappings, accessible by the device and its driver without using</span>", 
"<span class=\"comment\"> * cache flushing primitives.  The actual size of blocks allocated may be</span>", 
"<span class=\"comment\"> * larger than requested because of alignment.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @boundary is nonzero, objects returned from dma_pool_alloc() won't</span>", 
"<span class=\"comment\"> * cross that size boundary.  This is useful for devices which have</span>", 
"<span class=\"comment\"> * addressing restrictions on individual DMA transfers, such as not crossing</span>", 
"<span class=\"comment\"> * boundaries of 4KBytes.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#dma_pool_create\">dma_pool_create</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#boundary\">boundary</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#allocation\">allocation</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#align\">align</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = 1;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#align\">align</a> &amp; (<a class=\"id\" href=\"#align\">align</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#size\">size</a> &lt; 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 4;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#size\">size</a> % <a class=\"id\" href=\"#align\">align</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allocation\">allocation</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#boundary\">boundary</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boundary\">boundary</a> = <a class=\"id\" href=\"#allocation\">allocation</a>;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#boundary\">boundary</a> &lt; <a class=\"id\" href=\"#size\">size</a>) || (<a class=\"id\" href=\"#boundary\">boundary</a> &amp; (<a class=\"id\" href=\"#boundary\">boundary</a> - 1))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(*<a class=\"id\" href=\"#retval\">retval</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#dev_to_node\">dev_to_node</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#boundary\">boundary</a> = <a class=\"id\" href=\"#boundary\">boundary</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#allocation\">allocation</a> = <a class=\"id\" href=\"#allocation\">allocation</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#waitq\">waitq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pools_lock\">pools_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_pools\">dma_pools</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#device_create_file\">device_create_file</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev_attr_pools\">dev_attr_pools</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* note:  not currently insisting \"name\" be unique */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#pools\">pools</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_pools\">dma_pools</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#retval\">retval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pools_lock\">pools_lock</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#retval\">retval</a>-><a class=\"id\" href=\"#pools\">pools</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_pool_create\">dma_pool_create</a>);", 
"", 
"static void <a class=\"id\" href=\"#pool_initialise_page\">pool_initialise_page</a>(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>, struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#next_boundary\">next_boundary</a> = <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#boundary\">boundary</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#next\">next</a> + <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#size\">size</a>) >= <a class=\"id\" href=\"#next_boundary\">next_boundary</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next_boundary\">next_boundary</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_boundary\">next_boundary</a> += <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#boundary\">boundary</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*(int *)(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#offset\">offset</a>) = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#allocation\">allocation</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#pool_alloc_page\">pool_alloc_page</a>(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mem_flags\">mem_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#mem_flags\">mem_flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#dma_alloc_coherent\">dma_alloc_coherent</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#allocation\">allocation</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#dma\">dma</a>, <a class=\"id\" href=\"#mem_flags\">mem_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#DMAPOOL_DEBUG\">DMAPOOL_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#POOL_POISON_FREED\">POOL_POISON_FREED</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#allocation\">allocation</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool_initialise_page\">pool_initialise_page</a>(<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#page_list\">page_list</a>, &amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#in_use\">in_use</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_page_busy\">is_page_busy</a>(struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#in_use\">in_use</a> != 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pool_free_page\">pool_free_page</a>(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>, struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma\">dma</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#dma\">dma</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#DMAPOOL_DEBUG\">DMAPOOL_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#POOL_POISON_FREED\">POOL_POISON_FREED</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#allocation\">allocation</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_free_coherent\">dma_free_coherent</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#allocation\">allocation</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_pool_destroy - destroys a pool of dma memory blocks.</span>", 
"<span class=\"comment\"> * @pool: dma pool that will be destroyed</span>", 
"<span class=\"comment\"> * Context: !in_interrupt()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller guarantees that no more memory from the pool is in use,</span>", 
"<span class=\"comment\"> * and that nothing will try to use the pool after this call.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dma_pool_destroy\">dma_pool_destroy</a>(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pools_lock\">pools_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#pools\">pools</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_pools\">dma_pools</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_remove_file\">device_remove_file</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev_attr_pools\">dev_attr_pools</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pools_lock\">pools_lock</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#page_list\">page_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#page_list\">page_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dma_page\">dma_page</a>, <a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_page_busy\">is_page_busy</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"dma_pool_destroy %s, %p busy\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"dma_pool_destroy %s, %p busy\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* leak the still-in-use consistent memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool_free_page\">pool_free_page</a>(<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_pool_destroy\">dma_pool_destroy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_pool_alloc - get a block of consistent memory</span>", 
"<span class=\"comment\"> * @pool: dma pool that will produce the block</span>", 
"<span class=\"comment\"> * @mem_flags: GFP_* bitmask</span>", 
"<span class=\"comment\"> * @handle: pointer to dma address of block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This returns the kernel virtual address of a currently unused block,</span>", 
"<span class=\"comment\"> * and reports its dma address through the handle.</span>", 
"<span class=\"comment\"> * If such a memory block can't be allocated, %NULL is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#dma_pool_alloc\">dma_pool_alloc</a>(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mem_flags\">mem_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
" <a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#page_list\">page_list</a>, <a class=\"id\" href=\"#page_list\">page_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#allocation\">allocation</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ready\">ready</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pool_alloc_page\">pool_alloc_page</a>(<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_flags\">mem_flags</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue\">__add_wait_queue</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#waitq\">waitq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#POOL_TIMEOUT_JIFFIES\">POOL_TIMEOUT_JIFFIES</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#waitq\">waitq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#ready\">ready</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#in_use\">in_use</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#offset\">offset</a> = *(int *)(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#dma\">dma</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#DMAPOOL_DEBUG\">DMAPOOL_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#POOL_POISON_ALLOCATED\">POOL_POISON_ALLOCATED</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
" <a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_pool_alloc\">dma_pool_alloc</a>);", 
"", 
"static struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#pool_find_page\">pool_find_page</a>(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma\">dma</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#page_list\">page_list</a>, <a class=\"id\" href=\"#page_list\">page_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma\">dma</a> &lt; <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#dma\">dma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma\">dma</a> &lt; (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#dma\">dma</a> + <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#allocation\">allocation</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
" <a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_pool_free - put block back into dma pool</span>", 
"<span class=\"comment\"> * @pool: the dma pool holding the block</span>", 
"<span class=\"comment\"> * @vaddr: virtual address of block</span>", 
"<span class=\"comment\"> * @dma: dma address of block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller promises neither device nor driver will again touch this block</span>", 
"<span class=\"comment\"> * unless it is first re-allocated.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dma_pool_free\">dma_pool_free</a>(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>, void *<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma\">dma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_page\">dma_page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pool_find_page\">pool_find_page</a>(<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"dma_pool_free %s, %p/%lx (bad dma)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>, (unsigned long)<a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dma_pool_free %s, %p/%lx (bad dma)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>, (unsigned long)<a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#vaddr\">vaddr</a> - <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#DMAPOOL_DEBUG\">DMAPOOL_DEBUG</a>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dma\">dma</a> - <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#dma\">dma</a>) != <a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"dma_pool_free %s, %p (bad vaddr)/%Lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>, (unsigned long long)<a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"dma_pool_free %s, %p (bad vaddr)/%Lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>, (unsigned long long)<a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#chain\">chain</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#chain\">chain</a> &lt; <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#allocation\">allocation</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chain\">chain</a> != <a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chain\">chain</a> = *(int *)(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#chain\">chain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"dma_pool_free %s, dma %Lx \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"already free\\n\", <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dma_pool_free %s, dma %Lx \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"already free\\n\", <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#POOL_POISON_FREED\">POOL_POISON_FREED</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#in_use\">in_use</a>--;", 
"<span class=\"ts\"/>*(int *)<a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#waitq\">waitq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked\">wake_up_locked</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#waitq\">waitq</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Resist a temptation to do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    if (!is_page_busy(page)) pool_free_page(pool, page);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Better have a few empty pages hang around.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_pool_free\">dma_pool_free</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Managed DMA pool</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dmam_pool_release\">dmam_pool_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a> = *(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> **)<a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_pool_destroy\">dma_pool_destroy</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dmam_pool_match\">dmam_pool_match</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#res\">res</a>, void *<a class=\"id\" href=\"#match_data\">match_data</a>)", 
"{", 
"<span class=\"ts\"/>return *(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> **)<a class=\"id\" href=\"#res\">res</a> == <a class=\"id\" href=\"#match_data\">match_data</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dmam_pool_create - Managed dma_pool_create()</span>", 
"<span class=\"comment\"> * @name: name of pool, for diagnostics</span>", 
"<span class=\"comment\"> * @dev: device that will be doing the DMA</span>", 
"<span class=\"comment\"> * @size: size of the blocks in this pool.</span>", 
"<span class=\"comment\"> * @align: alignment requirement for blocks; must be a power of two</span>", 
"<span class=\"comment\"> * @allocation: returned blocks won't cross this boundary (or zero)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Managed dma_pool_create().  DMA pool created with this function is</span>", 
"<span class=\"comment\"> * automatically destroyed on driver detach.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#dmam_pool_create\">dmam_pool_create</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#allocation\">allocation</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> **<a class=\"id\" href=\"#ptr\">ptr</a>, *<a class=\"id\" href=\"#pool\">pool</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#devres_alloc\">devres_alloc</a>(<a class=\"id\" href=\"#dmam_pool_release\">dmam_pool_release</a>, sizeof(*<a class=\"id\" href=\"#ptr\">ptr</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a> = *<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#dma_pool_create\">dma_pool_create</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#allocation\">allocation</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pool\">pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_add\">devres_add</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_free\">devres_free</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pool\">pool</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmam_pool_create\">dmam_pool_create</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dmam_pool_destroy - Managed dma_pool_destroy()</span>", 
"<span class=\"comment\"> * @pool: dma pool that will be destroyed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Managed dma_pool_destroy().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dmam_pool_destroy\">dmam_pool_destroy</a>(struct <a class=\"id\" href=\"#dma_pool\">dma_pool</a> *<a class=\"id\" href=\"#pool\">pool</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_pool_destroy\">dma_pool_destroy</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#devres_destroy\">devres_destroy</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dmam_pool_release\">dmam_pool_release</a>, <a class=\"id\" href=\"#dmam_pool_match\">dmam_pool_match</a>, <a class=\"id\" href=\"#pool\">pool</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmam_pool_destroy\">dmam_pool_destroy</a>);", 
];
xr_frag_insert('l/e4/5f0f798b7b1c56f475de04668336717486a4c6.xr', __xr_tmp);
