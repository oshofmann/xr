var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_RECIPROCAL_DIV_H\">_LINUX_RECIPROCAL_DIV_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_RECIPROCAL_DIV_H\">_LINUX_RECIPROCAL_DIV_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This file describes reciprocical division.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This optimizes the (A/B) problem, when A and B are two u32</span>", 
"<span class=\"comment\"> * and B is a known value (but not known at compile time)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The math principle used is :</span>", 
"<span class=\"comment\"> *   Let RECIPROCAL_VALUE(B) be (((1LL &lt;&lt; 32) + (B - 1))/ B)</span>", 
"<span class=\"comment\"> *   Then A / B = (u32)(((u64)(A) * (R)) &gt;&gt; 32)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This replaces a divide by a multiply (and a shift), and</span>", 
"<span class=\"comment\"> * is generally less expensive in CPU cycles.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Computes the reciprocal value (R) for the value B of the divisor.</span>", 
"<span class=\"comment\"> * Should not be called before each reciprocal_divide(),</span>", 
"<span class=\"comment\"> * or else the performance is slower than a normal divide.</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#reciprocal_value\">reciprocal_value</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#B\">B</a>);", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#reciprocal_divide\">reciprocal_divide</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#A\">A</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#R\">R</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u32\">u32</a>)(((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#A\">A</a> * <a class=\"id\" href=\"#R\">R</a>) >> 32);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/e5/24a6db7879ded5ee78aff0e7ad41b92b678283.xr', __xr_tmp);
