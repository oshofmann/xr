var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#stop_one_cpu_nowait_workfn\">stop_one_cpu_nowait_workfn</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> *<a class=\"id\" href=\"#stwork\">stwork</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stwork\">stwork</a>-><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#stwork\">stwork</a>-><a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#stop_one_cpu_nowait\">stop_one_cpu_nowait</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpu_stop_fn_t\">cpu_stop_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> *<a class=\"id\" href=\"#work_buf\">work_buf</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#work_buf\">work_buf</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#stop_one_cpu_nowait_workfn\">stop_one_cpu_nowait_workfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work_buf\">work_buf</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#fn\">fn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work_buf\">work_buf</a>-><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#work_buf\">work_buf</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#stop_cpus\">stop_cpus</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_stop_fn_t\">cpu_stop_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>(), <a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#stop_one_cpu\">stop_one_cpu</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>(), <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#try_stop_cpus\">try_stop_cpus</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_fn_t\">cpu_stop_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#stop_cpus\">stop_cpus</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * stop_machine \"Bogolock\": stop the entire machine, disable</span>", 
"<span class=\"comment\"> * interrupts.  This is a very heavy lock, which is equivalent to</span>", 
"<span class=\"comment\"> * grabbing every spinlock (and more).  So the \"read\" side to such a</span>", 
"<span class=\"comment\"> * lock is anything which disables preeempt.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_STOP_MACHINE\">CONFIG_STOP_MACHINE</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * stop_machine: freeze the machine on all CPUs and run this function</span>", 
"<span class=\"comment\"> * @fn: the function to run</span>", 
"<span class=\"comment\"> * @data: the data ptr for the @fn()</span>", 
"<span class=\"comment\"> * @cpus: the cpus to run the @fn() on (NULL = any online cpu)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: This causes a thread to be scheduled on every cpu,</span>", 
"<span class=\"comment\"> * each of which disables interrupts.  The result is that noone is</span>", 
"<span class=\"comment\"> * holding a spinlock or inside any other preempt-disabled region when</span>", 
"<span class=\"comment\"> * @fn() runs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This can be thought of as a very heavy write lock, equivalent to</span>", 
"<span class=\"comment\"> * grabbing every spinlock in the kernel. */</span>", 
"int <a class=\"id\" href=\"#stop_machine\">stop_machine</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#data\">data</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __stop_machine: freeze the machine on all CPUs and run this function</span>", 
"<span class=\"comment\"> * @fn: the function to run</span>", 
"<span class=\"comment\"> * @data: the data ptr for the @fn</span>", 
"<span class=\"comment\"> * @cpus: the cpus to run the @fn() on (NULL = any online cpu)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: This is a special version of the above, which assumes cpus</span>", 
"<span class=\"comment\"> * won't come or go while it's being called.  Used by hotplug cpu.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__stop_machine\">__stop_machine</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#data\">data</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>);", 
"", 
"#else<span class=\"ts\"/> <span class=\"comment\">/* CONFIG_STOP_MACHINE &amp;&amp; CONFIG_SMP */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#stop_machine\">stop_machine</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_STOP_MACHINE &amp;&amp; CONFIG_SMP */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_STOP_MACHINE */</span>", 
];
xr_frag_insert('l/e5/615b596624efae9d173ab175608ddca5e2f297.xr', __xr_tmp);
