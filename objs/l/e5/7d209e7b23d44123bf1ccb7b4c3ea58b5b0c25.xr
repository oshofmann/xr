var __xr_tmp = [
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__journal_abort_soft\">__journal_abort_soft</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#errno\">errno</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int jbd2_journal_errno () - returns the journal's error state.</span>", 
"<span class=\"comment\"> * @journal: journal to examine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the errno number set with jbd2_journal_abort(), the last</span>", 
"<span class=\"comment\"> * time the journal was mounted - if the journal was stopped</span>", 
"<span class=\"comment\"> * without calling abort this will be 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the journal has been aborted on this mount time -EROFS will</span>", 
"<span class=\"comment\"> * be returned.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_errno\">jbd2_journal_errno</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_flags\">j_flags</a> &amp; <a class=\"id\" href=\"#JBD2_ABORT\">JBD2_ABORT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_errno\">j_errno</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int jbd2_journal_clear_err () - clears the journal's error state</span>", 
"<span class=\"comment\"> * @journal: journal to act on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An error must be cleared or acked to take a FS out of readonly</span>", 
"<span class=\"comment\"> * mode.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_clear_err\">jbd2_journal_clear_err</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_flags\">j_flags</a> &amp; <a class=\"id\" href=\"#JBD2_ABORT\">JBD2_ABORT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_errno\">j_errno</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * void jbd2_journal_ack_err() - Ack journal err.</span>", 
"<span class=\"comment\"> * @journal: journal to act on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An error must be cleared or acked to take a FS out of readonly</span>", 
"<span class=\"comment\"> * mode.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#jbd2_journal_ack_err\">jbd2_journal_ack_err</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_errno\">j_errno</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_flags\">j_flags</a> |= <a class=\"id\" href=\"#JBD2_ACK_ERR\">JBD2_ACK_ERR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#jbd2_journal_blocks_per_page\">jbd2_journal_blocks_per_page</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return 1 << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * helper functions to deal with 32 or 64bit block numbers.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#journal_tag_bytes\">journal_tag_bytes</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#JBD2_HAS_INCOMPAT_FEATURE\">JBD2_HAS_INCOMPAT_FEATURE</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#JBD2_FEATURE_INCOMPAT_64BIT\">JBD2_FEATURE_INCOMPAT_64BIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#JBD2_TAG_SIZE64\">JBD2_TAG_SIZE64</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#JBD2_TAG_SIZE32\">JBD2_TAG_SIZE32</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * JBD memory management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These functions are used to allocate block-sized chunks of memory</span>", 
"<span class=\"comment\"> * used for making copies of buffer_head data.  Very often it will be</span>", 
"<span class=\"comment\"> * page-sized chunks of data, but sometimes it will be in</span>", 
"<span class=\"comment\"> * sub-page-size chunks.  (For example, 16k pages on Power systems</span>", 
"<span class=\"comment\"> * with a 4k block file system.)  For blocks smaller than a page, we</span>", 
"<span class=\"comment\"> * use a SLAB allocator.  There are slab caches for each block size,</span>", 
"<span class=\"comment\"> * which are allocated at mount time, if necessary, and we only free</span>", 
"<span class=\"comment\"> * (all of) the slab caches when/if the jbd2 module is unloaded.  For</span>", 
"<span class=\"comment\"> * this reason we don't need to a mutex to protect access to</span>", 
"<span class=\"comment\"> * jbd2_slab[] allocating or releasing memory; only in</span>", 
"<span class=\"comment\"> * jbd2_journal_create_slab().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#JBD2_MAX_SLABS\">JBD2_MAX_SLABS</a> 8", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#jbd2_slab\">jbd2_slab</a>[<a class=\"id\" href=\"#JBD2_MAX_SLABS\">JBD2_MAX_SLABS</a>];", 
"static <a class=\"id\" href=\"#DECLARE_MUTEX\">DECLARE_MUTEX</a>(<a class=\"id\" href=\"#jbd2_slab_create_sem\">jbd2_slab_create_sem</a>);", 
"", 
"static const char *<a class=\"id\" href=\"#jbd2_slab_names\">jbd2_slab_names</a>[<a class=\"id\" href=\"#JBD2_MAX_SLABS\">JBD2_MAX_SLABS</a>] = {", 
"<span class=\"ts\"/>\"jbd2_1k\", \"jbd2_2k\", \"jbd2_4k\", \"jbd2_8k\",", 
"<span class=\"ts\"/>\"jbd2_16k\", \"jbd2_32k\", \"jbd2_64k\", \"jbd2_128k\"", 
"};", 
"", 
"", 
];
xr_frag_insert('l/e5/7d209e7b23d44123bf1ccb7b4c3ea58b5b0c25.xr', __xr_tmp);
