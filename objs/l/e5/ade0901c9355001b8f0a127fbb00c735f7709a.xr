var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This provides the callbacks and functions that KGDB needs to share between</span>", 
"<span class=\"comment\"> * the core, I/O and arch-specific portions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Amit Kale &lt;amitkale@linsyssoft.com&gt; and</span>", 
"<span class=\"comment\"> *         Tom Rini &lt;trini@kernel.crashing.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2001-2004 (c) Amit S. Kale and 2003-2005 (c) MontaVista Software, Inc.</span>", 
"<span class=\"comment\"> * This file is licensed under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * version 2. This program is licensed \"as is\" without any warranty of any</span>", 
"<span class=\"comment\"> * kind, whether express or implied.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_KGDB_H_\">_KGDB_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_KGDB_H_\">_KGDB_H_</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#serial_8250\">serial_8250</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_ARCH_KGDB\">CONFIG_HAVE_ARCH_KGDB</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#kgdb\">kgdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB\">CONFIG_KGDB</a>", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_skipexception - (optional) exit kgdb_handle_exception early</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@exception: Exception vector number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: Current &amp;struct pt_regs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On some architectures it is required to skip a breakpoint</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>exception when it occurs after a breakpoint has been removed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This can be implemented in the architecture specific portion of kgdb.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#kgdb_skipexception\">kgdb_skipexception</a>(int <a class=\"id\" href=\"#exception\">exception</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_disable_hw_debug - (optional) Disable hardware debugging hook</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: Current &amp;struct pt_regs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function will be called if the particular architecture must</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disable hardware debugging while it is processing gdb packets or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>handling exception.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#kgdb_disable_hw_debug\">kgdb_disable_hw_debug</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a>;", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"struct <a class=\"id\" href=\"#uart_port\">uart_port</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_breakpoint - compiled in breakpoint</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This will be implemented as a static inline per architecture.  This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function is called by the kgdb core to execute an architecture</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>specific trap to cause kgdb to enter the exception processing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kgdb_breakpoint\">kgdb_breakpoint</a>(void);", 
"", 
"extern int <a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a>;", 
"extern int <a class=\"id\" href=\"#kgdb_io_module_registered\">kgdb_io_module_registered</a>;", 
"", 
"extern <a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_setting_breakpoint\">kgdb_setting_breakpoint</a>;", 
"extern <a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_cpu_doing_single_step\">kgdb_cpu_doing_single_step</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#kgdb_usethread\">kgdb_usethread</a>;", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#kgdb_contthread\">kgdb_contthread</a>;", 
"", 
"enum <a class=\"id\" href=\"#kgdb_bptype\">kgdb_bptype</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BP_BREAKPOINT\">BP_BREAKPOINT</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BP_HARDWARE_BREAKPOINT\">BP_HARDWARE_BREAKPOINT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BP_WRITE_WATCHPOINT\">BP_WRITE_WATCHPOINT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BP_READ_WATCHPOINT\">BP_READ_WATCHPOINT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BP_ACCESS_WATCHPOINT\">BP_ACCESS_WATCHPOINT</a>", 
"};", 
"", 
"enum <a class=\"id\" href=\"#kgdb_bpstate\">kgdb_bpstate</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BP_UNDEFINED\">BP_UNDEFINED</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BP_REMOVED\">BP_REMOVED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BP_SET\">BP_SET</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BP_ACTIVE\">BP_ACTIVE</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#kgdb_bkpt\">kgdb_bkpt</a> {", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpt_addr\">bpt_addr</a>;", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saved_instr\">saved_instr</a>[<a class=\"id\" href=\"#BREAK_INSTR_SIZE\">BREAK_INSTR_SIZE</a>];", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#kgdb_bptype\">kgdb_bptype</a><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#kgdb_bpstate\">kgdb_bpstate</a><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dbg_reg_def_t\">dbg_reg_def_t</a> {", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#DBG_MAX_REG_NUM\">DBG_MAX_REG_NUM</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DBG_MAX_REG_NUM\">DBG_MAX_REG_NUM</a> 0", 
"#else", 
"extern struct <a class=\"id\" href=\"#dbg_reg_def_t\">dbg_reg_def_t</a> <a class=\"id\" href=\"#dbg_reg_def\">dbg_reg_def</a>[];", 
"extern char *<a class=\"id\" href=\"#dbg_get_reg\">dbg_get_reg</a>(int <a class=\"id\" href=\"#regno\">regno</a>, void *<a class=\"id\" href=\"#mem\">mem</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"extern int <a class=\"id\" href=\"#dbg_set_reg\">dbg_set_reg</a>(int <a class=\"id\" href=\"#regno\">regno</a>, void *<a class=\"id\" href=\"#mem\">mem</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a><span class=\"ts\"/>1000", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KGDB_HW_BREAKPOINT\">KGDB_HW_BREAKPOINT</a><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions each KGDB-supporting architecture must provide:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_arch_init - Perform any architecture specific initalization.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function will handle the initalization of any architecture</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>specific callbacks.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#kgdb_arch_init\">kgdb_arch_init</a>(void);", 
];
xr_frag_insert('l/e5/ade0901c9355001b8f0a127fbb00c735f7709a.xr', __xr_tmp);
