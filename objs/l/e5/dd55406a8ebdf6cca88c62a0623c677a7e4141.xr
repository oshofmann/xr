var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * User-mode machine state access</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Red Hat, Inc.  All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This copyrighted material is made available to anyone wishing to use,</span>", 
"<span class=\"comment\"> * modify, copy, or redistribute it subject to the terms and conditions</span>", 
"<span class=\"comment\"> * of the GNU General Public License v.2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Red Hat Author: Roland McGrath.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_REGSET_H\">_LINUX_REGSET_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_REGSET_H\">_LINUX_REGSET_H</a><span class=\"ts\"/>1", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"struct <a class=\"id\" href=\"#user_regset\">user_regset</a>;", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * user_regset_active_fn - type of @active function in &amp;struct user_regset</span>", 
"<span class=\"comment\"> * @target:<span class=\"ts\"/>thread being examined</span>", 
"<span class=\"comment\"> * @regset:<span class=\"ts\"/>regset being examined</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return -%ENODEV if not available on the hardware found.</span>", 
"<span class=\"comment\"> * Return %0 if no interesting state in this thread.</span>", 
"<span class=\"comment\"> * Return &gt;%0 number of @size units of interesting state.</span>", 
"<span class=\"comment\"> * Any get call fetching state beyond that number will</span>", 
"<span class=\"comment\"> * see the default initialization state for this data,</span>", 
"<span class=\"comment\"> * so a caller that knows what the default state is need</span>", 
"<span class=\"comment\"> * not copy it all out.</span>", 
"<span class=\"comment\"> * This call is optional; the pointer is %NULL if there</span>", 
"<span class=\"comment\"> * is no inexpensive check to yield a value &lt; @n.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int <a class=\"id\" href=\"#user_regset_active_fn\">user_regset_active_fn</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * user_regset_get_fn - type of @get function in &amp;struct user_regset</span>", 
"<span class=\"comment\"> * @target:<span class=\"ts\"/>thread being examined</span>", 
"<span class=\"comment\"> * @regset:<span class=\"ts\"/>regset being examined</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>offset into the regset data to access, in bytes</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/>amount of data to copy, in bytes</span>", 
"<span class=\"comment\"> * @kbuf:<span class=\"ts\"/>if not %NULL, a kernel-space pointer to copy into</span>", 
"<span class=\"comment\"> * @ubuf:<span class=\"ts\"/>if @kbuf is %NULL, a user-space pointer to copy into</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fetch register values.  Return %0 on success; -%EIO or -%ENODEV</span>", 
"<span class=\"comment\"> * are usual failure returns.  The @pos and @count values are in</span>", 
"<span class=\"comment\"> * bytes, but must be properly aligned.  If @kbuf is non-null, that</span>", 
"<span class=\"comment\"> * buffer is used and @ubuf is ignored.  If @kbuf is %NULL, then</span>", 
"<span class=\"comment\"> * ubuf gives a userland pointer to access directly, and an -%EFAULT</span>", 
"<span class=\"comment\"> * return value is possible.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int <a class=\"id\" href=\"#user_regset_get_fn\">user_regset_get_fn</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#pos\">pos</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#kbuf\">kbuf</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * user_regset_set_fn - type of @set function in &amp;struct user_regset</span>", 
"<span class=\"comment\"> * @target:<span class=\"ts\"/>thread being examined</span>", 
"<span class=\"comment\"> * @regset:<span class=\"ts\"/>regset being examined</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>offset into the regset data to access, in bytes</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/>amount of data to copy, in bytes</span>", 
"<span class=\"comment\"> * @kbuf:<span class=\"ts\"/>if not %NULL, a kernel-space pointer to copy from</span>", 
"<span class=\"comment\"> * @ubuf:<span class=\"ts\"/>if @kbuf is %NULL, a user-space pointer to copy from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Store register values.  Return %0 on success; -%EIO or -%ENODEV</span>", 
"<span class=\"comment\"> * are usual failure returns.  The @pos and @count values are in</span>", 
"<span class=\"comment\"> * bytes, but must be properly aligned.  If @kbuf is non-null, that</span>", 
"<span class=\"comment\"> * buffer is used and @ubuf is ignored.  If @kbuf is %NULL, then</span>", 
"<span class=\"comment\"> * ubuf gives a userland pointer to access directly, and an -%EFAULT</span>", 
"<span class=\"comment\"> * return value is possible.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int <a class=\"id\" href=\"#user_regset_set_fn\">user_regset_set_fn</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#pos\">pos</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const void *<a class=\"id\" href=\"#kbuf\">kbuf</a>, const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * user_regset_writeback_fn - type of @writeback function in &amp;struct user_regset</span>", 
"<span class=\"comment\"> * @target:<span class=\"ts\"/>thread being examined</span>", 
"<span class=\"comment\"> * @regset:<span class=\"ts\"/>regset being examined</span>", 
"<span class=\"comment\"> * @immediate:<span class=\"ts\"/>zero if writeback at completion of next context switch is OK</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call is optional; usually the pointer is %NULL.  When</span>", 
"<span class=\"comment\"> * provided, there is some user memory associated with this regset's</span>", 
"<span class=\"comment\"> * hardware, such as memory backing cached register data on register</span>", 
"<span class=\"comment\"> * window machines; the regset's data controls what user memory is</span>", 
"<span class=\"comment\"> * used (e.g. via the stack pointer value).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Write register data back to user memory.  If the @immediate flag</span>", 
"<span class=\"comment\"> * is nonzero, it must be written to the user memory so uaccess or</span>", 
"<span class=\"comment\"> * access_process_vm() can see it when this call returns; if zero,</span>", 
"<span class=\"comment\"> * then it must be written back by the time the task completes a</span>", 
"<span class=\"comment\"> * context switch (as synchronized with wait_task_inactive()).</span>", 
"<span class=\"comment\"> * Return %0 on success or if there was nothing to do, -%EFAULT for</span>", 
"<span class=\"comment\"> * a memory problem (bad stack pointer or whatever), or -%EIO for a</span>", 
"<span class=\"comment\"> * hardware problem.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int <a class=\"id\" href=\"#user_regset_writeback_fn\">user_regset_writeback_fn</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#immediate\">immediate</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct user_regset - accessible thread CPU state</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Number of slots (registers).</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/><span class=\"ts\"/>Size in bytes of a slot (register).</span>", 
"<span class=\"comment\"> * @align:<span class=\"ts\"/><span class=\"ts\"/>Required alignment, in bytes.</span>", 
"<span class=\"comment\"> * @bias:<span class=\"ts\"/><span class=\"ts\"/>Bias from natural indexing.</span>", 
"<span class=\"comment\"> * @core_note_type:<span class=\"ts\"/>ELF note @n_type value used in core dumps.</span>", 
"<span class=\"comment\"> * @get:<span class=\"ts\"/><span class=\"ts\"/>Function to fetch values.</span>", 
"<span class=\"comment\"> * @set:<span class=\"ts\"/><span class=\"ts\"/>Function to store values.</span>", 
"<span class=\"comment\"> * @active:<span class=\"ts\"/><span class=\"ts\"/>Function to report if regset is active, or %NULL.</span>", 
"<span class=\"comment\"> * @writeback:<span class=\"ts\"/><span class=\"ts\"/>Function to write data back to user memory, or %NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This data structure describes a machine resource we call a register set.</span>", 
"<span class=\"comment\"> * This is part of the state of an individual thread, not necessarily</span>", 
"<span class=\"comment\"> * actual CPU registers per se.  A register set consists of a number of</span>", 
"<span class=\"comment\"> * similar slots, given by @n.  Each slot is @size bytes, and aligned to</span>", 
"<span class=\"comment\"> * @align bytes (which is at least @size).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These functions must be called only on the current thread or on a</span>", 
"<span class=\"comment\"> * thread that is in %TASK_STOPPED or %TASK_TRACED state, that we are</span>", 
"<span class=\"comment\"> * guaranteed will not be woken up and return to user mode, and that we</span>", 
"<span class=\"comment\"> * have called wait_task_inactive() on.  (The target thread always might</span>", 
"<span class=\"comment\"> * wake up for SIGKILL while these functions are working, in which case</span>", 
"<span class=\"comment\"> * that thread's user_regset state might be scrambled.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @pos argument must be aligned according to @align; the @count</span>", 
"<span class=\"comment\"> * argument must be a multiple of @size.  These functions are not</span>", 
"<span class=\"comment\"> * responsible for checking for invalid arguments.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When there is a natural value to use as an index, @bias gives the</span>", 
"<span class=\"comment\"> * difference between the natural index and the slot index for the</span>", 
"<span class=\"comment\"> * register set.  For example, x86 GDT segment descriptors form a regset;</span>", 
"<span class=\"comment\"> * the segment selector produces a natural index, but only a subset of</span>", 
"<span class=\"comment\"> * that index space is available as a regset (the TLS slots); subtracting</span>", 
"<span class=\"comment\"> * @bias from a segment selector index value computes the regset slot.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If nonzero, @core_note_type gives the n_type field (NT_* value)</span>", 
"<span class=\"comment\"> * of the core file note in which this regset's data appears.</span>", 
"<span class=\"comment\"> * NT_PRSTATUS is a special case in that the regset data starts at</span>", 
"<span class=\"comment\"> * offsetof(struct elf_prstatus, pr_reg) into the note data; that is</span>", 
"<span class=\"comment\"> * part of the per-machine ELF formats userland knows about.  In</span>", 
"<span class=\"comment\"> * other cases, the core file note contains exactly the whole regset</span>", 
"<span class=\"comment\"> * (@n * @size) and nothing else.  The core file note is normally</span>", 
"<span class=\"comment\"> * omitted when there is an @active function and it returns zero.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#user_regset\">user_regset</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_regset_get_fn\">user_regset_get_fn</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#get\">get</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_regset_set_fn\">user_regset_set_fn</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#set\">set</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_regset_active_fn\">user_regset_active_fn</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_regset_writeback_fn\">user_regset_writeback_fn</a><span class=\"ts\"/>*<a class=\"id\" href=\"#writeback\">writeback</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>unsigned int <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>unsigned int <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a>;", 
"<span class=\"ts\"/>unsigned int <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bias\">bias</a>;", 
"<span class=\"ts\"/>unsigned int <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#core_note_type\">core_note_type</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct user_regset_view - available regsets</span>", 
"<span class=\"comment\"> * @name:<span class=\"ts\"/>Identifier, e.g. UTS_MACHINE string.</span>", 
"<span class=\"comment\"> * @regsets:<span class=\"ts\"/>Array of @n regsets available in this view.</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>Number of elements in @regsets.</span>", 
"<span class=\"comment\"> * @e_machine:<span class=\"ts\"/>ELF header @e_machine %EM_* value written in core dumps.</span>", 
"<span class=\"comment\"> * @e_flags:<span class=\"ts\"/>ELF header @e_flags value written in core dumps.</span>", 
"<span class=\"comment\"> * @ei_osabi:<span class=\"ts\"/>ELF header @e_ident[%EI_OSABI] value written in core dumps.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A regset view is a collection of regsets (&amp;struct user_regset,</span>", 
"<span class=\"comment\"> * above).  This describes all the state of a thread that can be seen</span>", 
"<span class=\"comment\"> * from a given architecture/ABI environment.  More than one view might</span>", 
"<span class=\"comment\"> * refer to the same &amp;struct user_regset, or more than one regset</span>", 
"<span class=\"comment\"> * might refer to the same machine-specific state in the thread.  For</span>", 
"<span class=\"comment\"> * example, a 32-bit thread's state could be examined from the 32-bit</span>", 
"<span class=\"comment\"> * view or from the 64-bit view.  Either method reaches the same thread</span>", 
"<span class=\"comment\"> * register state, doing appropriate widening or truncation.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#user_regset_view\">user_regset_view</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regsets\">regsets</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#e_flags\">e_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#e_machine\">e_machine</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ei_osabi\">ei_osabi</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is documented here rather than at the definition sites because its</span>", 
"<span class=\"comment\"> * implementation is machine-dependent but its interface is universal.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * task_user_regset_view - Return the process's native regset view.</span>", 
"<span class=\"comment\"> * @tsk: a thread of the process in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the &amp;struct user_regset_view that is native for the given process.</span>", 
"<span class=\"comment\"> * For example, what it would access when it called ptrace().</span>", 
"<span class=\"comment\"> * Throughout the life of the process, this only changes at exec.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#user_regset_view\">user_regset_view</a> *<a class=\"id\" href=\"#task_user_regset_view\">task_user_regset_view</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are helpers for writing regset get/set functions in arch code.</span>", 
"<span class=\"comment\"> * Because @start_pos and @end_pos are always compile-time constants,</span>", 
"<span class=\"comment\"> * these are inlined into very little code though they look large.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use one or more calls sequentially for each chunk of regset data stored</span>", 
"<span class=\"comment\"> * contiguously in memory.  Call with constants for @start_pos and @end_pos,</span>", 
"<span class=\"comment\"> * giving the range of byte positions in the regset that data corresponds</span>", 
"<span class=\"comment\"> * to; @end_pos can be -1 if this chunk is at the end of the regset layout.</span>", 
"<span class=\"comment\"> * Each call updates the arguments to point past its chunk.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#user_regset_copyout\">user_regset_copyout</a>(unsigned int *<a class=\"id\" href=\"#pos\">pos</a>, unsigned int *<a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void **<a class=\"id\" href=\"#kbuf\">kbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void <a class=\"id\" href=\"#__user\">__user</a> **<a class=\"id\" href=\"#ubuf\">ubuf</a>, const void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const int <a class=\"id\" href=\"#start_pos\">start_pos</a>, const int <a class=\"id\" href=\"#end_pos\">end_pos</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(*<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#start_pos\">start_pos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pos\">end_pos</a> &lt; 0 || *<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#end_pos\">end_pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#copy\">copy</a> = (<a class=\"id\" href=\"#end_pos\">end_pos</a> &lt; 0 ? *<a class=\"id\" href=\"#count\">count</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#min\">min</a>(*<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#end_pos\">end_pos</a> - *<a class=\"id\" href=\"#pos\">pos</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> += *<a class=\"id\" href=\"#pos\">pos</a> - <a class=\"id\" href=\"#start_pos\">start_pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#kbuf\">kbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(*<a class=\"id\" href=\"#kbuf\">kbuf</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#kbuf\">kbuf</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#__copy_to_user\">__copy_to_user</a>(*<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ubuf\">ubuf</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#user_regset_copyin\">user_regset_copyin</a>(unsigned int *<a class=\"id\" href=\"#pos\">pos</a>, unsigned int *<a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void **<a class=\"id\" href=\"#kbuf\">kbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void <a class=\"id\" href=\"#__user\">__user</a> **<a class=\"id\" href=\"#ubuf\">ubuf</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const int <a class=\"id\" href=\"#start_pos\">start_pos</a>, const int <a class=\"id\" href=\"#end_pos\">end_pos</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(*<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#start_pos\">start_pos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pos\">end_pos</a> &lt; 0 || *<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#end_pos\">end_pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#copy\">copy</a> = (<a class=\"id\" href=\"#end_pos\">end_pos</a> &lt; 0 ? *<a class=\"id\" href=\"#count\">count</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#min\">min</a>(*<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#end_pos\">end_pos</a> - *<a class=\"id\" href=\"#pos\">pos</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> += *<a class=\"id\" href=\"#pos\">pos</a> - <a class=\"id\" href=\"#start_pos\">start_pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#kbuf\">kbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#data\">data</a>, *<a class=\"id\" href=\"#kbuf\">kbuf</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#kbuf\">kbuf</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#__copy_from_user\">__copy_from_user</a>(<a class=\"id\" href=\"#data\">data</a>, *<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ubuf\">ubuf</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These two parallel the two above, but for portions of a regset layout</span>", 
"<span class=\"comment\"> * that always read as all-zero or for which writes are ignored.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#user_regset_copyout_zero\">user_regset_copyout_zero</a>(unsigned int *<a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int *<a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void **<a class=\"id\" href=\"#kbuf\">kbuf</a>, void <a class=\"id\" href=\"#__user\">__user</a> **<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const int <a class=\"id\" href=\"#start_pos\">start_pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const int <a class=\"id\" href=\"#end_pos\">end_pos</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(*<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#start_pos\">start_pos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pos\">end_pos</a> &lt; 0 || *<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#end_pos\">end_pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#copy\">copy</a> = (<a class=\"id\" href=\"#end_pos\">end_pos</a> &lt; 0 ? *<a class=\"id\" href=\"#count\">count</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#min\">min</a>(*<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#end_pos\">end_pos</a> - *<a class=\"id\" href=\"#pos\">pos</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#kbuf\">kbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(*<a class=\"id\" href=\"#kbuf\">kbuf</a>, 0, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#kbuf\">kbuf</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#__clear_user\">__clear_user</a>(*<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ubuf\">ubuf</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#user_regset_copyin_ignore\">user_regset_copyin_ignore</a>(unsigned int *<a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int *<a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const void **<a class=\"id\" href=\"#kbuf\">kbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const void <a class=\"id\" href=\"#__user\">__user</a> **<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const int <a class=\"id\" href=\"#start_pos\">start_pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const int <a class=\"id\" href=\"#end_pos\">end_pos</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(*<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#start_pos\">start_pos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pos\">end_pos</a> &lt; 0 || *<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#end_pos\">end_pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#copy\">copy</a> = (<a class=\"id\" href=\"#end_pos\">end_pos</a> &lt; 0 ? *<a class=\"id\" href=\"#count\">count</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#min\">min</a>(*<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#end_pos\">end_pos</a> - *<a class=\"id\" href=\"#pos\">pos</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#kbuf\">kbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#kbuf\">kbuf</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ubuf\">ubuf</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * copy_regset_to_user - fetch a thread's user_regset data into user memory</span>", 
"<span class=\"comment\"> * @target:<span class=\"ts\"/>thread to be examined</span>", 
"<span class=\"comment\"> * @view:<span class=\"ts\"/>&amp;struct user_regset_view describing user thread machine state</span>", 
"<span class=\"comment\"> * @setno:<span class=\"ts\"/>index in @view-&gt;regsets</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/>offset into the regset data, in bytes</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/>amount of data to copy, in bytes</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>user-mode pointer to copy into</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#copy_regset_to_user\">copy_regset_to_user</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#user_regset_view\">user_regset_view</a> *<a class=\"id\" href=\"#view\">view</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#setno\">setno</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#offset\">offset</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a> = &amp;<a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#regsets\">regsets</a>[<a class=\"id\" href=\"#setno\">setno</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#regset\">regset</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * copy_regset_from_user - store into thread's user_regset data from user memory</span>", 
"<span class=\"comment\"> * @target:<span class=\"ts\"/>thread to be examined</span>", 
"<span class=\"comment\"> * @view:<span class=\"ts\"/>&amp;struct user_regset_view describing user thread machine state</span>", 
"<span class=\"comment\"> * @setno:<span class=\"ts\"/>index in @view-&gt;regsets</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/>offset into the regset data, in bytes</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/>amount of data to copy, in bytes</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>user-mode pointer to copy from</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#copy_regset_from_user\">copy_regset_from_user</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#user_regset_view\">user_regset_view</a> *<a class=\"id\" href=\"#view\">view</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#setno\">setno</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a> = &amp;<a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#regsets\">regsets</a>[<a class=\"id\" href=\"#setno\">setno</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#set\">set</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#regset\">regset</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* &lt;linux/regset.h&gt; */</span>", 
];
xr_frag_insert('l/e5/dd55406a8ebdf6cca88c62a0623c677a7e4141.xr', __xr_tmp);
