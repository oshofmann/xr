var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_NODEMASK_H\">__LINUX_NODEMASK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_NODEMASK_H\">__LINUX_NODEMASK_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Nodemasks provide a bitmap suitable for representing the</span>", 
"<span class=\"comment\"> * set of Node's in a system, one bit position per Node number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See detailed comments in the file linux/bitmap.h describing the</span>", 
"<span class=\"comment\"> * data type on which these nodemasks are based.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For details of nodemask_scnprintf() and nodemask_parse_user(),</span>", 
"<span class=\"comment\"> * see bitmap_scnprintf() and bitmap_parse_user() in lib/bitmap.c.</span>", 
"<span class=\"comment\"> * For details of nodelist_scnprintf() and nodelist_parse(), see</span>", 
"<span class=\"comment\"> * bitmap_scnlistprintf() and bitmap_parselist(), also in bitmap.c.</span>", 
"<span class=\"comment\"> * For details of node_remap(), see bitmap_bitremap in lib/bitmap.c.</span>", 
"<span class=\"comment\"> * For details of nodes_remap(), see bitmap_remap in lib/bitmap.c.</span>", 
"<span class=\"comment\"> * For details of nodes_onto(), see bitmap_onto in lib/bitmap.c.</span>", 
"<span class=\"comment\"> * For details of nodes_fold(), see bitmap_fold in lib/bitmap.c.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The available nodemask operations are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void node_set(node, mask)<span class=\"ts\"/><span class=\"ts\"/>turn on bit 'node' in mask</span>", 
"<span class=\"comment\"> * void node_clear(node, mask)<span class=\"ts\"/><span class=\"ts\"/>turn off bit 'node' in mask</span>", 
"<span class=\"comment\"> * void nodes_setall(mask)<span class=\"ts\"/><span class=\"ts\"/>set all bits</span>", 
"<span class=\"comment\"> * void nodes_clear(mask)<span class=\"ts\"/><span class=\"ts\"/>clear all bits</span>", 
"<span class=\"comment\"> * int node_isset(node, mask)<span class=\"ts\"/><span class=\"ts\"/>true iff bit 'node' set in mask</span>", 
"<span class=\"comment\"> * int node_test_and_set(node, mask)<span class=\"ts\"/>test and set bit 'node' in mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void nodes_and(dst, src1, src2)<span class=\"ts\"/>dst = src1 &amp; src2  [intersection]</span>", 
"<span class=\"comment\"> * void nodes_or(dst, src1, src2)<span class=\"ts\"/>dst = src1 | src2  [union]</span>", 
"<span class=\"comment\"> * void nodes_xor(dst, src1, src2)<span class=\"ts\"/>dst = src1 ^ src2</span>", 
"<span class=\"comment\"> * void nodes_andnot(dst, src1, src2)<span class=\"ts\"/>dst = src1 &amp; ~src2</span>", 
"<span class=\"comment\"> * void nodes_complement(dst, src)<span class=\"ts\"/>dst = ~src</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int nodes_equal(mask1, mask2)<span class=\"ts\"/>Does mask1 == mask2?</span>", 
"<span class=\"comment\"> * int nodes_intersects(mask1, mask2)<span class=\"ts\"/>Do mask1 and mask2 intersect?</span>", 
"<span class=\"comment\"> * int nodes_subset(mask1, mask2)<span class=\"ts\"/>Is mask1 a subset of mask2?</span>", 
"<span class=\"comment\"> * int nodes_empty(mask)<span class=\"ts\"/><span class=\"ts\"/>Is mask empty (no bits sets)?</span>", 
"<span class=\"comment\"> * int nodes_full(mask)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Is mask full (all bits sets)?</span>", 
"<span class=\"comment\"> * int nodes_weight(mask)<span class=\"ts\"/><span class=\"ts\"/>Hamming weight - number of set bits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void nodes_shift_right(dst, src, n)<span class=\"ts\"/>Shift right</span>", 
"<span class=\"comment\"> * void nodes_shift_left(dst, src, n)<span class=\"ts\"/>Shift left</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int first_node(mask)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Number lowest set bit, or MAX_NUMNODES</span>", 
"<span class=\"comment\"> * int next_node(node, mask)<span class=\"ts\"/><span class=\"ts\"/>Next node past 'node', or MAX_NUMNODES</span>", 
"<span class=\"comment\"> * int first_unset_node(mask)<span class=\"ts\"/><span class=\"ts\"/>First node not set in mask, or </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>MAX_NUMNODES.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * nodemask_t nodemask_of_node(node)<span class=\"ts\"/>Return nodemask with bit 'node' set</span>", 
"<span class=\"comment\"> * NODE_MASK_ALL<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Initializer - all bits set</span>", 
"<span class=\"comment\"> * NODE_MASK_NONE<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Initializer - no bits set</span>", 
"<span class=\"comment\"> * unsigned long *nodes_addr(mask)<span class=\"ts\"/>Array of unsigned long's in mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int nodemask_scnprintf(buf, len, mask) Format nodemask for printing</span>", 
"<span class=\"comment\"> * int nodemask_parse_user(ubuf, ulen, mask)<span class=\"ts\"/>Parse ascii string as nodemask</span>", 
"<span class=\"comment\"> * int nodelist_scnprintf(buf, len, mask) Format nodemask as list for printing</span>", 
"<span class=\"comment\"> * int nodelist_parse(buf, map)<span class=\"ts\"/><span class=\"ts\"/>Parse ascii string as nodelist</span>", 
"<span class=\"comment\"> * int node_remap(oldbit, old, new)<span class=\"ts\"/>newbit = map(old, new)(oldbit)</span>", 
"<span class=\"comment\"> * void nodes_remap(dst, src, old, new)<span class=\"ts\"/>*dst = map(old, new)(src)</span>", 
"<span class=\"comment\"> * void nodes_onto(dst, orig, relmap)<span class=\"ts\"/>*dst = orig relative to relmap</span>", 
"<span class=\"comment\"> * void nodes_fold(dst, orig, sz)<span class=\"ts\"/>dst bits = orig bits mod sz</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * for_each_node_mask(node, mask)<span class=\"ts\"/>for-loop node over mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int num_online_nodes()<span class=\"ts\"/><span class=\"ts\"/>Number of online Nodes</span>", 
"<span class=\"comment\"> * int num_possible_nodes()<span class=\"ts\"/><span class=\"ts\"/>Number of all possible Nodes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int node_online(node)<span class=\"ts\"/><span class=\"ts\"/>Is some node online?</span>", 
"<span class=\"comment\"> * int node_possible(node)<span class=\"ts\"/><span class=\"ts\"/>Is some node possible?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * node_set_online(node)<span class=\"ts\"/><span class=\"ts\"/>set bit 'node' in node_online_map</span>", 
"<span class=\"comment\"> * node_set_offline(node)<span class=\"ts\"/><span class=\"ts\"/>clear bit 'node' in node_online_map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * for_each_node(node)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for-loop node over node_possible_map</span>", 
"<span class=\"comment\"> * for_each_online_node(node)<span class=\"ts\"/><span class=\"ts\"/>for-loop node over node_online_map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Subtlety:</span>", 
"<span class=\"comment\"> * 1) The 'type-checked' form of node_isset() causes gcc (3.3.2, anyway)</span>", 
"<span class=\"comment\"> *    to generate slightly worse code.  So use a simple one-line #define</span>", 
"<span class=\"comment\"> *    for node_isset(), instead of wrapping an inline inside a macro, the</span>", 
"<span class=\"comment\"> *    way we do the other calls.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NODEMASK_SCRATCH</span>", 
"<span class=\"comment\"> * When doing above logical AND, OR, XOR, Remap operations the callers tend to</span>", 
"<span class=\"comment\"> * need temporary nodemask_t's on the stack. But if NODES_SHIFT is large,</span>", 
"<span class=\"comment\"> * nodemask_t's consume too much stack space.  NODEMASK_SCRATCH is a helper</span>", 
"<span class=\"comment\"> * for such situations. See below and CPUMASK_ALLOC also.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#threads\">threads</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitmap\">bitmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#numa\">numa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"typedef struct { <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>); } <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>;", 
"extern <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#_unused_nodemask_arg_\">_unused_nodemask_arg_</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#dst\">dst</a>) <a class=\"id\" href=\"#__node_set\">__node_set</a>((<a class=\"id\" href=\"#node\">node</a>), &amp;(<a class=\"id\" href=\"#dst\">dst</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__node_set\">__node_set</a>(int <a class=\"id\" href=\"#node\">node</a>, volatile <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_clear\">node_clear</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#dst\">dst</a>) <a class=\"id\" href=\"#__node_clear\">__node_clear</a>((<a class=\"id\" href=\"#node\">node</a>), &amp;(<a class=\"id\" href=\"#dst\">dst</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__node_clear\">__node_clear</a>(int <a class=\"id\" href=\"#node\">node</a>, volatile <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_setall\">nodes_setall</a>(<a class=\"id\" href=\"#dst\">dst</a>) <a class=\"id\" href=\"#__nodes_setall\">__nodes_setall</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_setall\">__nodes_setall</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_fill\">bitmap_fill</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#dst\">dst</a>) <a class=\"id\" href=\"#__nodes_clear\">__nodes_clear</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_clear\">__nodes_clear</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"<span class=\"comment\">/* No static inline type checking - see Subtlety (1) above. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>) <a class=\"id\" href=\"#test_bit\">test_bit</a>((<a class=\"id\" href=\"#node\">node</a>), (<a class=\"id\" href=\"#nodemask\">nodemask</a>).<a class=\"id\" href=\"#bits\">bits</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_test_and_set\">node_test_and_set</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__node_test_and_set\">__node_test_and_set</a>((<a class=\"id\" href=\"#node\">node</a>), &amp;(<a class=\"id\" href=\"#nodemask\">nodemask</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__node_test_and_set\">__node_test_and_set</a>(int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#addr\">addr</a>-><a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_and\">nodes_and</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src1\">src1</a>, <a class=\"id\" href=\"#src2\">src2</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_and\">__nodes_and</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#src1\">src1</a>), &amp;(<a class=\"id\" href=\"#src2\">src2</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_and\">__nodes_and</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src2p\">src2p</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_and\">bitmap_and</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src1p\">src1p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src2p\">src2p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_or\">nodes_or</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src1\">src1</a>, <a class=\"id\" href=\"#src2\">src2</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_or\">__nodes_or</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#src1\">src1</a>), &amp;(<a class=\"id\" href=\"#src2\">src2</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_or\">__nodes_or</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src2p\">src2p</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_or\">bitmap_or</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src1p\">src1p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src2p\">src2p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_xor\">nodes_xor</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src1\">src1</a>, <a class=\"id\" href=\"#src2\">src2</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_xor\">__nodes_xor</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#src1\">src1</a>), &amp;(<a class=\"id\" href=\"#src2\">src2</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_xor\">__nodes_xor</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src2p\">src2p</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_xor\">bitmap_xor</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src1p\">src1p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src2p\">src2p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_andnot\">nodes_andnot</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src1\">src1</a>, <a class=\"id\" href=\"#src2\">src2</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_andnot\">__nodes_andnot</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#src1\">src1</a>), &amp;(<a class=\"id\" href=\"#src2\">src2</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_andnot\">__nodes_andnot</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src2p\">src2p</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_andnot\">bitmap_andnot</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src1p\">src1p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src2p\">src2p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_complement\">nodes_complement</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_complement\">__nodes_complement</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#src\">src</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_complement\">__nodes_complement</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_complement\">bitmap_complement</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_equal\">nodes_equal</a>(<a class=\"id\" href=\"#src1\">src1</a>, <a class=\"id\" href=\"#src2\">src2</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_equal\">__nodes_equal</a>(&amp;(<a class=\"id\" href=\"#src1\">src1</a>), &amp;(<a class=\"id\" href=\"#src2\">src2</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodes_equal\">__nodes_equal</a>(const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src2p\">src2p</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_equal\">bitmap_equal</a>(<a class=\"id\" href=\"#src1p\">src1p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src2p\">src2p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_intersects\">nodes_intersects</a>(<a class=\"id\" href=\"#src1\">src1</a>, <a class=\"id\" href=\"#src2\">src2</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_intersects\">__nodes_intersects</a>(&amp;(<a class=\"id\" href=\"#src1\">src1</a>), &amp;(<a class=\"id\" href=\"#src2\">src2</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodes_intersects\">__nodes_intersects</a>(const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src2p\">src2p</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_intersects\">bitmap_intersects</a>(<a class=\"id\" href=\"#src1p\">src1p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src2p\">src2p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_subset\">nodes_subset</a>(<a class=\"id\" href=\"#src1\">src1</a>, <a class=\"id\" href=\"#src2\">src2</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_subset\">__nodes_subset</a>(&amp;(<a class=\"id\" href=\"#src1\">src1</a>), &amp;(<a class=\"id\" href=\"#src2\">src2</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodes_subset\">__nodes_subset</a>(const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#src2p\">src2p</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_subset\">bitmap_subset</a>(<a class=\"id\" href=\"#src1p\">src1p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#src2p\">src2p</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#src\">src</a>) <a class=\"id\" href=\"#__nodes_empty\">__nodes_empty</a>(&amp;(<a class=\"id\" href=\"#src\">src</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodes_empty\">__nodes_empty</a>(const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_empty\">bitmap_empty</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_full\">nodes_full</a>(<a class=\"id\" href=\"#nodemask\">nodemask</a>) <a class=\"id\" href=\"#__nodes_full\">__nodes_full</a>(&amp;(<a class=\"id\" href=\"#nodemask\">nodemask</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodes_full\">__nodes_full</a>(const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_full\">bitmap_full</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#nodemask\">nodemask</a>) <a class=\"id\" href=\"#__nodes_weight\">__nodes_weight</a>(&amp;(<a class=\"id\" href=\"#nodemask\">nodemask</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
];
xr_frag_insert('l/e6/28c3f633bb908e862fdb4eb485f9cfc7f5480e.xr', __xr_tmp);
