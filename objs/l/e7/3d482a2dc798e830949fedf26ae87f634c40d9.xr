var __xr_tmp = [
"int <a class=\"id\" href=\"#kmmio_handler\">kmmio_handler</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_context\">kmmio_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#faultpage\">faultpage</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0; <span class=\"comment\">/* default to fault not handled */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Preemption is now disabled to prevent process switch during</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single stepping. We can only handle one active kmmio trace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * per cpu, so ensure that we finish it before something else</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gets to run. We also hold the RCU read lock over single</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stepping to avoid looking up the probe and kmmio_fault_page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#faultpage\">faultpage</a> = <a class=\"id\" href=\"#get_kmmio_fault_page\">get_kmmio_fault_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#faultpage\">faultpage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Either this page fault is not caused by kmmio, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * another CPU just pulled the kmmio probe from under</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * our feet. The latter case should not be possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_kmmio\">no_kmmio</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#kmmio_ctx\">kmmio_ctx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#active\">active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * A second fault on the same page means some other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * condition needs handling by do_page_fault(), the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page really not being present is the most common.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"secondary hit for 0x%08lx CPU %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#faultpage\">faultpage</a>-><a class=\"id\" href=\"#old_presence\">old_presence</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"unexpected secondary hit for address 0x%08lx on CPU %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Prevent overwriting already in-flight context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This should not happen, let's hope disarming at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * least prevents a panic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"recursive probe hit on CPU %d, for address 0x%08lx. Ignoring.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"previous hit was at 0x%08lx.\\n\", <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disarm_kmmio_fault_page\">disarm_kmmio_fault_page</a>(<a class=\"id\" href=\"#faultpage\">faultpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_kmmio_ctx\">no_kmmio_ctx</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#active\">active</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#fpage\">fpage</a> = <a class=\"id\" href=\"#faultpage\">faultpage</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#probe\">probe</a> = <a class=\"id\" href=\"#get_kmmio_probe\">get_kmmio_probe</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#saved_flags\">saved_flags</a> = (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a> | <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#probe\">probe</a> && <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#probe\">probe</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#probe\">probe</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#probe\">probe</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable single-stepping and disable interrupts for the faulting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * context. Local interrupts must not get enabled during stepping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now we set present bit in PTE and single step. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disarm_kmmio_fault_page\">disarm_kmmio_fault_page</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#fpage\">fpage</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If another cpu accesses the same page while we are stepping,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the access will not be caught. It will simply succeed and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only downside is we lose the event. If this becomes a problem,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the user should drop to single cpu before tracing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#kmmio_ctx\">kmmio_ctx</a>);", 
"<span class=\"ts\"/>return 1; <span class=\"comment\">/* fault handled */</span>", 
"", 
"<a class=\"id\" href=\"#no_kmmio_ctx\">no_kmmio_ctx</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#kmmio_ctx\">kmmio_ctx</a>);", 
"<a class=\"id\" href=\"#no_kmmio\">no_kmmio</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interrupts are disabled on entry as trap1 is an interrupt gate</span>", 
"<span class=\"comment\"> * and they remain disabled throughout this function.</span>", 
"<span class=\"comment\"> * This must always get called as the pair to kmmio_handler().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#post_kmmio_handler\">post_kmmio_handler</a>(unsigned long <a class=\"id\" href=\"#condition\">condition</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_context\">kmmio_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#kmmio_ctx\">kmmio_ctx</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#active\">active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * debug traps without an active context are due to either</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * something external causing them (f.e. using a debugger while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mmio tracing enabled), or erroneous behaviour</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"unexpected debug trap on CPU %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#probe\">probe</a> && <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#probe\">probe</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#probe\">probe</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#probe\">probe</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prevent racing against release_kmmio_fault_page(). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kmmio_lock\">kmmio_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#fpage\">fpage</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arm_kmmio_fault_page\">arm_kmmio_fault_page</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#fpage\">fpage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kmmio_lock\">kmmio_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#saved_flags\">saved_flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* These were acquired in kmmio_handler(). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#active\">active</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#active\">active</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if somebody else is singlestepping across a probe point, flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will have TF set, in which case, continue the remaining processing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of do_debug, as if this is not a probe hit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#kmmio_ctx\">kmmio_ctx</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* You must be holding kmmio_lock. */</span>", 
"static int <a class=\"id\" href=\"#add_kmmio_fault_page\">add_kmmio_fault_page</a>(unsigned long <a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#get_kmmio_fault_page\">get_kmmio_fault_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arm_kmmio_fault_page\">arm_kmmio_fault_page</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#f\">f</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arm_kmmio_fault_page\">arm_kmmio_fault_page</a>(<a class=\"id\" href=\"#f\">f</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#kmmio_page_list\">kmmio_page_list</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* You must be holding kmmio_lock. */</span>", 
"static void <a class=\"id\" href=\"#release_kmmio_fault_page\">release_kmmio_fault_page</a>(unsigned long <a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> **<a class=\"id\" href=\"#release_list\">release_list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#get_kmmio_fault_page\">get_kmmio_fault_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#count\">count</a> &lt; 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disarm_kmmio_fault_page\">disarm_kmmio_fault_page</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#scheduled_for_release\">scheduled_for_release</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#release_next\">release_next</a> = *<a class=\"id\" href=\"#release_list\">release_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#release_list\">release_list</a> = <a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#scheduled_for_release\">scheduled_for_release</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * With page-unaligned ioremaps, one or two armed pages may contain</span>", 
"<span class=\"comment\"> * addresses from outside the intended mapping. Events for these addresses</span>", 
"<span class=\"comment\"> * are currently silently dropped. The events may result only from programming</span>", 
"<span class=\"comment\"> * mistakes by accessing addresses before the beginning or past the end of a</span>", 
"<span class=\"comment\"> * mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_kmmio_probe\">register_kmmio_probe</a>(struct <a class=\"id\" href=\"#kmmio_probe\">kmmio_probe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#size_lim\">size_lim</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a> + (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#kmmio_lock\">kmmio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_kmmio_probe\">get_kmmio_probe</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmmio_count\">kmmio_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#kmmio_probes\">kmmio_probes</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#size_lim\">size_lim</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#add_kmmio_fault_page\">add_kmmio_fault_page</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Unable to set page fault.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#kmmio_lock\">kmmio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX: What should I do here?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here was a call to global_flush_tlb(), but it does not exist</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anymore. It seems it's not needed after all.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_kmmio_probe\">register_kmmio_probe</a>);", 
"", 
"static void <a class=\"id\" href=\"#rcu_free_kmmio_fault_pages\">rcu_free_kmmio_fault_pages</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_delayed_release\">kmmio_delayed_release</a> *<a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_delayed_release\">kmmio_delayed_release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#release_list\">release_list</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#f\">f</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#release_next\">release_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dr\">dr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#remove_kmmio_fault_pages\">remove_kmmio_fault_pages</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_delayed_release\">kmmio_delayed_release</a> *<a class=\"id\" href=\"#dr\">dr</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#kmmio_delayed_release\">kmmio_delayed_release</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#release_list\">release_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> **<a class=\"id\" href=\"#prevp\">prevp</a> = &amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#release_list\">release_list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#kmmio_lock\">kmmio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#f\">f</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prevp\">prevp</a> = &amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#release_next\">release_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#prevp\">prevp</a> = <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#release_next\">release_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#release_next\">release_next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#scheduled_for_release\">scheduled_for_release</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = *<a class=\"id\" href=\"#prevp\">prevp</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#kmmio_lock\">kmmio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is the real RCU destroy call. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#rcu_free_kmmio_fault_pages\">rcu_free_kmmio_fault_pages</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a kmmio probe. You have to synchronize_rcu() before you can be</span>", 
"<span class=\"comment\"> * sure that the callbacks will not be called anymore. Only after that</span>", 
"<span class=\"comment\"> * you may actually release your struct kmmio_probe.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unregistering a kmmio fault page has three steps:</span>", 
"<span class=\"comment\"> * 1. release_kmmio_fault_page()</span>", 
"<span class=\"comment\"> *    Disarm the page, wait a grace period to let all faults finish.</span>", 
"<span class=\"comment\"> * 2. remove_kmmio_fault_pages()</span>", 
"<span class=\"comment\"> *    Remove the pages from kmmio_page_table.</span>", 
"<span class=\"comment\"> * 3. rcu_free_kmmio_fault_pages()</span>", 
"<span class=\"comment\"> *    Actually free the kmmio_fault_page structs as with RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_kmmio_probe\">unregister_kmmio_probe</a>(struct <a class=\"id\" href=\"#kmmio_probe\">kmmio_probe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#size_lim\">size_lim</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a> + (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#release_list\">release_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_delayed_release\">kmmio_delayed_release</a> *<a class=\"id\" href=\"#drelease\">drelease</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#kmmio_lock\">kmmio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#size_lim\">size_lim</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_kmmio_fault_page\">release_kmmio_fault_page</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#release_list\">release_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmmio_count\">kmmio_count</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#kmmio_lock\">kmmio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#release_list\">release_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drelease\">drelease</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#drelease\">drelease</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drelease\">drelease</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_crit\">pr_crit</a>(\"leaking kmmio_fault_page objects.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drelease\">drelease</a>-><a class=\"id\" href=\"#release_list\">release_list</a> = <a class=\"id\" href=\"#release_list\">release_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is not really RCU here. We have just disarmed a set of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages so that they cannot trigger page faults anymore. However,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we cannot remove the pages from kmmio_page_table,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because a probe hit might be in flight on another CPU. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages are collected into a list, and they will be removed from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmmio_page_table when it is certain that no probe hit related to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * these pages can be in flight. RCU grace period sounds like a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * good choice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we removed the pages too early, kmmio page fault handler might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not find the respective kmmio_fault_page and determine it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a kmmio fault, when it actually is. This would lead to madness.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#drelease\">drelease</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#remove_kmmio_fault_pages\">remove_kmmio_fault_pages</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_kmmio_probe\">unregister_kmmio_probe</a>);", 
"", 
"static int", 
"<a class=\"id\" href=\"#kmmio_die_notifier\">kmmio_die_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>, unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#die_args\">die_args</a> *<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>unsigned long* <a class=\"id\" href=\"#dr6_p\">dr6_p</a> = (unsigned long *)<a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#DIE_DEBUG\">DIE_DEBUG</a> && (*<a class=\"id\" href=\"#dr6_p\">dr6_p</a> &amp; <a class=\"id\" href=\"#DR_STEP\">DR_STEP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#post_kmmio_handler\">post_kmmio_handler</a>(*<a class=\"id\" href=\"#dr6_p\">dr6_p</a>, <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#regs\">regs</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Reset the BS bit in dr6 (pointed by args-&gt;err) to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * denote completion of processing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dr6_p\">dr6_p</a> &= ~<a class=\"id\" href=\"#DR_STEP\">DR_STEP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#nb_die\">nb_die</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#kmmio_die_notifier\">kmmio_die_notifier</a>", 
"};", 
"", 
"int <a class=\"id\" href=\"#kmmio_init\">kmmio_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KMMIO_PAGE_TABLE_SIZE\">KMMIO_PAGE_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#kmmio_page_table\">kmmio_page_table</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_die_notifier\">register_die_notifier</a>(&amp;<a class=\"id\" href=\"#nb_die\">nb_die</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#kmmio_cleanup\">kmmio_cleanup</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_die_notifier\">unregister_die_notifier</a>(&amp;<a class=\"id\" href=\"#nb_die\">nb_die</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KMMIO_PAGE_TABLE_SIZE\">KMMIO_PAGE_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#kmmio_page_table\">kmmio_page_table</a>[<a class=\"id\" href=\"#i\">i</a>]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kmmio_page_table not empty at cleanup, any further tracing will leak memory.\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/e7/3d482a2dc798e830949fedf26ae87f634c40d9.xr', __xr_tmp);
