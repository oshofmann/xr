var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_TRACE_POINTS\">CREATE_TRACE_POINTS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#kmem\">kmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kstrdup - allocate space for and copy an existing string</span>", 
"<span class=\"comment\"> * @s: the string to duplicate</span>", 
"<span class=\"comment\"> * @gfp: the GFP mask used in the kmalloc() call when allocating memory</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#kstrdup\">kstrdup</a>(const char *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s\">s</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc_track_caller\">kmalloc_track_caller</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kstrdup\">kstrdup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kstrndup - allocate space for and copy an existing string</span>", 
"<span class=\"comment\"> * @s: the string to duplicate</span>", 
"<span class=\"comment\"> * @max: read at most @max chars from @s</span>", 
"<span class=\"comment\"> * @gfp: the GFP mask used in the kmalloc() call when allocating memory</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#kstrndup\">kstrndup</a>(const char *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strnlen\">strnlen</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc_track_caller\">kmalloc_track_caller</a>(<a class=\"id\" href=\"#len\">len</a>+1, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#len\">len</a>] = '\\0';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kstrndup\">kstrndup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmemdup - duplicate region of memory</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @src: memory region to duplicate</span>", 
"<span class=\"comment\"> * @len: memory region length</span>", 
"<span class=\"comment\"> * @gfp: GFP mask to use</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#kmemdup\">kmemdup</a>(const void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kmalloc_track_caller\">kmalloc_track_caller</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmemdup\">kmemdup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * memdup_user - duplicate memory region from user space</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @src: source address in user space</span>", 
"<span class=\"comment\"> * @len: number of bytes to copy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an ERR_PTR() on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#memdup_user\">memdup_user</a>(const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always use GFP_KERNEL, since copy_from_user() can sleep and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cause pagefault, which makes it pointless to use GFP_NOFS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or GFP_ATOMIC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kmalloc_track_caller\">kmalloc_track_caller</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#memdup_user\">memdup_user</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __krealloc - like krealloc() but don't free @p.</span>", 
"<span class=\"comment\"> * @p: object to reallocate memory for.</span>", 
"<span class=\"comment\"> * @new_size: how many bytes of memory are required.</span>", 
"<span class=\"comment\"> * @flags: the type of memory to allocate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is like krealloc() except it never frees the originally</span>", 
"<span class=\"comment\"> * allocated buffer. Use this if you don't want to free the buffer immediately</span>", 
"<span class=\"comment\"> * like, for example, with RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#__krealloc\">__krealloc</a>(const void *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#new_size\">new_size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ks\">ks</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#new_size\">new_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZERO_SIZE_PTR\">ZERO_SIZE_PTR</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a> = <a class=\"id\" href=\"#ksize\">ksize</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ks\">ks</a> >= <a class=\"id\" href=\"#new_size\">new_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kmalloc_track_caller\">kmalloc_track_caller</a>(<a class=\"id\" href=\"#new_size\">new_size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ks\">ks</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__krealloc\">__krealloc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * krealloc - reallocate memory. The contents will remain unchanged.</span>", 
"<span class=\"comment\"> * @p: object to reallocate memory for.</span>", 
"<span class=\"comment\"> * @new_size: how many bytes of memory are required.</span>", 
"<span class=\"comment\"> * @flags: the type of memory to allocate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The contents of the object pointed to are preserved up to the</span>", 
"<span class=\"comment\"> * lesser of the new and old sizes.  If @p is %NULL, krealloc()</span>", 
"<span class=\"comment\"> * behaves exactly like kmalloc().  If @size is 0 and @p is not a</span>", 
"<span class=\"comment\"> * %NULL pointer, the object pointed to is freed.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#krealloc\">krealloc</a>(const void *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#new_size\">new_size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#new_size\">new_size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZERO_SIZE_PTR\">ZERO_SIZE_PTR</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__krealloc\">__krealloc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#new_size\">new_size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#krealloc\">krealloc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kzfree - like kfree but zero memory</span>", 
"<span class=\"comment\"> * @p: object to free memory of</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The memory of the object @p points to is zeroed before freed.</span>", 
"<span class=\"comment\"> * If @p is %NULL, kzfree() does nothing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: this function zeroes the whole allocated buffer which can be a good</span>", 
"<span class=\"comment\"> * deal bigger than the requested buffer size passed to kmalloc(). So be</span>", 
"<span class=\"comment\"> * careful when using this function in performance sensitive code.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kzfree\">kzfree</a>(const void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ks\">ks</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#mem\">mem</a> = (void *)<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ZERO_OR_NULL_PTR\">ZERO_OR_NULL_PTR</a>(<a class=\"id\" href=\"#mem\">mem</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a> = <a class=\"id\" href=\"#ksize\">ksize</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#mem\">mem</a>, 0, <a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kzfree\">kzfree</a>);", 
"", 
"int <a class=\"id\" href=\"#kern_ptr_validate\">kern_ptr_validate</a>(const void *<a class=\"id\" href=\"#ptr\">ptr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_addr\">min_addr</a> = <a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#align_mask\">align_mask</a> = sizeof(void *) - 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#min_addr\">min_addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#addr\">addr</a> &gt; (unsigned long)<a class=\"id\" href=\"#high_memory\">high_memory</a> - <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#align_mask\">align_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#kern_addr_valid\">kern_addr_valid</a>(<a class=\"id\" href=\"#addr\">addr</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#kern_addr_valid\">kern_addr_valid</a>(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> - 1)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>return 1;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * strndup_user - duplicate an existing string from user space</span>", 
"<span class=\"comment\"> * @s: The string to duplicate</span>", 
"<span class=\"comment\"> * @n: Maximum number of bytes to copy, including the trailing NUL.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strndup_user\">strndup_user</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#s\">s</a>, long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#strnlen_user\">strnlen_user</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#memdup_user\">memdup_user</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#length\">length</a> - 1] = '\\0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strndup_user\">strndup_user</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#HAVE_ARCH_PICK_MMAP_LAYOUT\">HAVE_ARCH_PICK_MMAP_LAYOUT</a>)", 
"void <a class=\"id\" href=\"#arch_pick_mmap_layout\">arch_pick_mmap_layout</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a> = <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a> = <a class=\"id\" href=\"#arch_get_unmapped_area\">arch_get_unmapped_area</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#unmap_area\">unmap_area</a> = <a class=\"id\" href=\"#arch_unmap_area\">arch_unmap_area</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_user_pages_fast() - pin user pages in memory</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/>starting user address</span>", 
"<span class=\"comment\"> * @nr_pages:<span class=\"ts\"/>number of pages from start to pin</span>", 
"<span class=\"comment\"> * @write:<span class=\"ts\"/>whether pages will be written to</span>", 
"<span class=\"comment\"> * @pages:<span class=\"ts\"/>array that receives pointers to the pages pinned.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Should be at least nr_pages long.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of pages pinned. This may be fewer than the number</span>", 
"<span class=\"comment\"> * requested. If nr_pages is 0 or negative, returns 0. If no pages</span>", 
"<span class=\"comment\"> * were pinned, returns -errno.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * get_user_pages_fast provides equivalent functionality to get_user_pages,</span>", 
"<span class=\"comment\"> * operating on current and current-&gt;mm, with force=0 and vma=NULL. However</span>", 
"<span class=\"comment\"> * unlike get_user_pages, it must be called without mmap_sem held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * get_user_pages_fast may take mmap_sem and page table locks, so no</span>", 
"<span class=\"comment\"> * assumptions can be made about lack of locking. get_user_pages_fast is to be</span>", 
"<span class=\"comment\"> * implemented in a way that is advantageous (vs get_user_pages()) when the</span>", 
"<span class=\"comment\"> * user memory area is already faulted in and present in ptes. However if the</span>", 
"<span class=\"comment\"> * pages have to be faulted in, it may turn out to be slightly slower so</span>", 
"<span class=\"comment\"> * callers need to carefully consider what to use. On many architectures,</span>", 
"<span class=\"comment\"> * get_user_pages_fast simply falls back to get_user_pages.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#get_user_pages_fast\">get_user_pages_fast</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, int <a class=\"id\" href=\"#write\">write</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write\">write</a>, 0, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#get_user_pages_fast\">get_user_pages_fast</a>);", 
"", 
"<span class=\"comment\">/* Tracepoints definitions. */</span>", 
"<a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL\">EXPORT_TRACEPOINT_SYMBOL</a>(<a class=\"id\" href=\"#kmalloc\">kmalloc</a>);", 
"<a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL\">EXPORT_TRACEPOINT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>);", 
"<a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL\">EXPORT_TRACEPOINT_SYMBOL</a>(<a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>);", 
"<a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL\">EXPORT_TRACEPOINT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>);", 
"<a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL\">EXPORT_TRACEPOINT_SYMBOL</a>(<a class=\"id\" href=\"#kfree\">kfree</a>);", 
"<a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL\">EXPORT_TRACEPOINT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>);", 
];
xr_frag_insert('l/e7/a319868bd4032f088a2660bd29701381d643a8.xr', __xr_tmp);
