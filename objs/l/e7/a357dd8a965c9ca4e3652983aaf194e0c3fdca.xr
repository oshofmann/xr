var __xr_tmp = [
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_get_reclaim_stat\">mem_cgroup_get_reclaim_stat</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, <a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#zone_nr_lru_pages\">zone_nr_lru_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>, enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#lru\">lru</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_zone_nr_pages\">mem_cgroup_zone_nr_pages</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_LRU_BASE\">NR_LRU_BASE</a> + <a class=\"id\" href=\"#lru\">lru</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a shrinker callback to be called from the vm</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#register_shrinker\">register_shrinker</a>(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *<a class=\"id\" href=\"#shrinker\">shrinker</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#shrinker_rwsem\">shrinker_rwsem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#shrinker_list\">shrinker_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#shrinker_rwsem\">shrinker_rwsem</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_shrinker\">register_shrinker</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove one</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_shrinker\">unregister_shrinker</a>(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *<a class=\"id\" href=\"#shrinker\">shrinker</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#shrinker_rwsem\">shrinker_rwsem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#shrinker_rwsem\">shrinker_rwsem</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_shrinker\">unregister_shrinker</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHRINK_BATCH\">SHRINK_BATCH</a> 128", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call the shrink functions to age shrinkable caches</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Here we assume it costs one seek to replace a lru page and that it also</span>", 
"<span class=\"comment\"> * takes a seek to recreate a cache object.  With this in mind we age equal</span>", 
"<span class=\"comment\"> * percentages of the lru and ageable caches.  This should balance the seeks</span>", 
"<span class=\"comment\"> * generated by these structures.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the vm encountered mapped pages on the LRU it increase the pressure on</span>", 
"<span class=\"comment\"> * slab to avoid swapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We do weird things to avoid (scanned*seeks*entries) overflowing 32 bits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * `lru_pages' represents the number of on-LRU pages in all the zones which</span>", 
"<span class=\"comment\"> * are eligible for the caller's allocation attempt.  It is used for balancing</span>", 
"<span class=\"comment\"> * slab reclaim versus page reclaim.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of slab objects which we shrunk.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#shrink_slab\">shrink_slab</a>(unsigned long <a class=\"id\" href=\"#scanned\">scanned</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lru_pages\">lru_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *<a class=\"id\" href=\"#shrinker\">shrinker</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scanned\">scanned</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scanned\">scanned</a> = <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#down_read_trylock\">down_read_trylock</a>(&amp;<a class=\"id\" href=\"#shrinker_rwsem\">shrinker_rwsem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;<span class=\"ts\"/><span class=\"comment\">/* Assume we'll be able to shrink next time */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#shrinker\">shrinker</a>, &amp;<a class=\"id\" href=\"#shrinker_list\">shrinker_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_scan\">total_scan</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_pass\">max_pass</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_pass\">max_pass</a> = (*<a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#shrink\">shrink</a>)(<a class=\"id\" href=\"#shrinker\">shrinker</a>, 0, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = (4 * <a class=\"id\" href=\"#scanned\">scanned</a>) / <a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#seeks\">seeks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> *= <a class=\"id\" href=\"#max_pass\">max_pass</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#lru_pages\">lru_pages</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"shrink_slab: %pF negative objects to \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"delete nr=%ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#shrink\">shrink</a>, <a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#max_pass\">max_pass</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Avoid risking looping forever due to too large nr value:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * never try to free more than twice the estimate number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * freeable entries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a> &gt; <a class=\"id\" href=\"#max_pass\">max_pass</a> * 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#max_pass\">max_pass</a> * 2;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_scan\">total_scan</a> = <a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#total_scan\">total_scan</a> >= <a class=\"id\" href=\"#SHRINK_BATCH\">SHRINK_BATCH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#this_scan\">this_scan</a> = <a class=\"id\" href=\"#SHRINK_BATCH\">SHRINK_BATCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#shrink_ret\">shrink_ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_before\">nr_before</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_before\">nr_before</a> = (*<a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#shrink\">shrink</a>)(<a class=\"id\" href=\"#shrinker\">shrinker</a>, 0, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_ret\">shrink_ret</a> = (*<a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#shrink\">shrink</a>)(<a class=\"id\" href=\"#shrinker\">shrinker</a>, <a class=\"id\" href=\"#this_scan\">this_scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shrink_ret\">shrink_ret</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shrink_ret\">shrink_ret</a> &lt; <a class=\"id\" href=\"#nr_before\">nr_before</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#nr_before\">nr_before</a> - <a class=\"id\" href=\"#shrink_ret\">shrink_ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_events\">count_vm_events</a>(<a class=\"id\" href=\"#SLABS_SCANNED\">SLABS_SCANNED</a>, <a class=\"id\" href=\"#this_scan\">this_scan</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_scan\">total_scan</a> -= <a class=\"id\" href=\"#this_scan\">this_scan</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrinker\">shrinker</a>-><a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#total_scan\">total_scan</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#shrinker_rwsem\">shrinker_rwsem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_page_cache_freeable\">is_page_cache_freeable</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A freeable page cache page is referenced only by the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that isolated the page, the page cache radix tree and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * optional buffer heads at page-&gt;private.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) - <a class=\"id\" href=\"#page_has_private\">page_has_private</a>(<a class=\"id\" href=\"#page\">page</a>) == 2;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#may_write_to_queue\">may_write_to_queue</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdi_write_congested\">bdi_write_congested</a>(<a class=\"id\" href=\"#bdi\">bdi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi\">bdi</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We detected a synchronous write error writing a page out.  Probably</span>", 
"<span class=\"comment\"> * -ENOSPC.  We need to propagate that into the address_space for a subsequent</span>", 
"<span class=\"comment\"> * fsync(), msync() or close().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The tricky part is that after writepage we cannot touch the mapping: nothing</span>", 
"<span class=\"comment\"> * prevents it from being freed up.  But we have a ref on the page and once</span>", 
"<span class=\"comment\"> * that page is locked, the mapping is pinned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We're allowed to run sleeping lock_page() here because we know the caller has</span>", 
"<span class=\"comment\"> * __GFP_FS.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#handle_write_error\">handle_write_error</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_nosync\">lock_page_nosync</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>) == <a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping_set_error\">mapping_set_error</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Request for sync pageout. */</span>", 
"enum <a class=\"id\" href=\"#pageout_io\">pageout_io</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGEOUT_IO_ASYNC\">PAGEOUT_IO_ASYNC</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGEOUT_IO_SYNC\">PAGEOUT_IO_SYNC</a>,", 
"};", 
"", 
"<span class=\"comment\">/* possible outcome of pageout() */</span>", 
"typedef enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* failed to write page out, page is locked */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGE_KEEP\">PAGE_KEEP</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* move page to the active list, page is locked */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGE_ACTIVATE\">PAGE_ACTIVATE</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* page has been sent to the disk successfully, page is unlocked */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGE_SUCCESS\">PAGE_SUCCESS</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* page is clean and locked */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGE_CLEAN\">PAGE_CLEAN</a>,", 
"} <a class=\"id\" href=\"#pageout_t\">pageout_t</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pageout is called by shrink_page_list() for each dirty page.</span>", 
"<span class=\"comment\"> * Calls -&gt;writepage().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#pageout_t\">pageout_t</a> <a class=\"id\" href=\"#pageout\">pageout</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#pageout_io\">pageout_io</a> <a class=\"id\" href=\"#sync_writeback\">sync_writeback</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the page is dirty, only perform writeback if that write</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will be non-blocking.  To prevent this allocation from being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stalled by pagecache activity.  But note that there may be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stalls if we need to run get_block().  We could test</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PagePrivate for that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this process is currently in __generic_file_aio_write() against</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this page's queue, we can perform writeback even if that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the page is swapcache, write it back even if that would</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block, for some throttling. This happens by accident, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * swap_backing_dev_info is bust: it doesn't reflect the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * congestion state of the swapdevs.  Easy to fix, if needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_page_cache_freeable\">is_page_cache_freeable</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_KEEP\">PAGE_KEEP</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Some data journaling orphaned pages can have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page-&gt;mapping == NULL while being dirty with clean buffers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_private\">page_has_private</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageDirty\">ClearPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: orphaned page\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_CLEAN\">PAGE_CLEAN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_KEEP\">PAGE_KEEP</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#writepage\">writepage</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_ACTIVATE\">PAGE_ACTIVATE</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#may_write_to_queue\">may_write_to_queue</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_KEEP\">PAGE_KEEP</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_page_dirty_for_io\">clear_page_dirty_for_io</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a> = <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> = <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_start\">range_start</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_end\">range_end</a> = <a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nonblocking\">nonblocking</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#for_reclaim\">for_reclaim</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageReclaim\">SetPageReclaim</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#writepage\">writepage</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_write_error\">handle_write_error</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == <a class=\"id\" href=\"#AOP_WRITEPAGE_ACTIVATE\">AOP_WRITEPAGE_ACTIVATE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageReclaim\">ClearPageReclaim</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_ACTIVATE\">PAGE_ACTIVATE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wait on writeback if requested to. This happens when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * direct reclaiming a large contiguous area and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first attempt to free a range of pages fails.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#sync_writeback\">sync_writeback</a> == <a class=\"id\" href=\"#PAGEOUT_IO_SYNC\">PAGEOUT_IO_SYNC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* synchronous write or broken a_ops? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageReclaim\">ClearPageReclaim</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_writepage\">trace_mm_vmscan_writepage</a>(<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_reclaim_flags\">trace_reclaim_flags</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#sync_writeback\">sync_writeback</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_VMSCAN_WRITE\">NR_VMSCAN_WRITE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_SUCCESS\">PAGE_SUCCESS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_CLEAN\">PAGE_CLEAN</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Same as remove_mapping, but if the page is removed from the mapping, it</span>", 
"<span class=\"comment\"> * gets returned with a refcount of 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__remove_mapping\">__remove_mapping</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The non racy check for a busy page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must be careful with the order of the tests. When someone has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a ref to the page, it may be possible that they dirty it then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drop the reference. So if PageDirty is tested before page_count</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here, then the following race may occur:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_user_pages(&amp;page);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [user mapping goes away]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write_to(page);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!PageDirty(page)    [good]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SetPageDirty(page);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * put_page(page);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!page_count(page)   [good, discard it]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [oops, our write_to data is lost]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reversing the order of the tests ensures such a situation cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * escape unnoticed. The smp_rmb is needed to ensure the page-&gt;flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * load is not satisfied before that of page-&gt;_count.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that if SetPageDirty is always performed via set_page_dirty,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and thus under tree_lock, then this ordering is not required.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_freeze_refs\">page_freeze_refs</a>(<a class=\"id\" href=\"#page\">page</a>, 2))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cannot_free\">cannot_free</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* note: atomic_cmpxchg in page_freeze_refs provides the smp_rmb */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_unfreeze_refs\">page_unfreeze_refs</a>(<a class=\"id\" href=\"#page\">page</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cannot_free\">cannot_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#swap\">swap</a> = { .<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>) };", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__delete_from_swap_cache\">__delete_from_swap_cache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swapcache_free\">swapcache_free</a>(<a class=\"id\" href=\"#swap\">swap</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_from_page_cache\">__remove_from_page_cache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_cache_page\">mem_cgroup_uncharge_cache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#cannot_free\">cannot_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attempt to detach a locked page from its -&gt;mapping.  If it is dirty or if</span>", 
"<span class=\"comment\"> * someone else has a ref on the page, abort and return 0.  If it was</span>", 
"<span class=\"comment\"> * successfully detached, return 1.  Assumes the caller has a single ref on</span>", 
"<span class=\"comment\"> * this page.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#remove_mapping\">remove_mapping</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__remove_mapping\">__remove_mapping</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Unfreezing the refcount with 1 rather than 2 effectively</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * drops the pagecache ref for us without requiring another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * atomic operation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_unfreeze_refs\">page_unfreeze_refs</a>(<a class=\"id\" href=\"#page\">page</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * putback_lru_page - put previously isolated page onto appropriate LRU list</span>", 
"<span class=\"comment\"> * @page: page to be put back to appropriate lru list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add previously isolated @page to appropriate LRU list.</span>", 
"<span class=\"comment\"> * Page may still be unevictable for other reasons.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * lru_lock must not be held, interrupts must be enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lru\">lru</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#active\">active</a> = !!<a class=\"id\" href=\"#TestClearPageActive\">TestClearPageActive</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#was_unevictable\">was_unevictable</a> = <a class=\"id\" href=\"#PageUnevictable\">PageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<a class=\"id\" href=\"#redo\">redo</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageUnevictable\">ClearPageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_evictable\">page_evictable</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For evictable pages, we can use the cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In event of a race, worst case is we end up with an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unevictable page on [in]active list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We know how to handle that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a> = <a class=\"id\" href=\"#active\">active</a> + <a class=\"id\" href=\"#page_lru_base_type\">page_lru_base_type</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_cache_add_lru\">lru_cache_add_lru</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Put unevictable pages directly on zone's unevictable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a> = <a class=\"id\" href=\"#LRU_UNEVICTABLE\">LRU_UNEVICTABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_page_to_unevictable_list\">add_page_to_unevictable_list</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When racing with an mlock clearing (page is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unlocked), make sure that if the other thread does</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not observe our setting of PG_lru and fails</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * isolation, we see PG_mlocked cleared below and move</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the page back to the evictable list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The other side is TestClearPageMlocked().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page's status can change while we move it among lru. If an evictable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page is on unevictable list, it never be freed. To avoid that,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check after we added it to the list, again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lru\">lru</a> == <a class=\"id\" href=\"#LRU_UNEVICTABLE\">LRU_UNEVICTABLE</a> && <a class=\"id\" href=\"#page_evictable\">page_evictable</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#redo\">redo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This means someone else dropped this page from LRU</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So, it will be freed or putback to LRU again. There is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nothing to do here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#was_unevictable\">was_unevictable</a> && <a class=\"id\" href=\"#lru\">lru</a> != <a class=\"id\" href=\"#LRU_UNEVICTABLE\">LRU_UNEVICTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGRESCUED\">UNEVICTABLE_PGRESCUED</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#was_unevictable\">was_unevictable</a> && <a class=\"id\" href=\"#lru\">lru</a> == <a class=\"id\" href=\"#LRU_UNEVICTABLE\">LRU_UNEVICTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGCULLED\">UNEVICTABLE_PGCULLED</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drop ref from isolate */</span>", 
"}", 
"", 
"enum <a class=\"id\" href=\"#page_references\">page_references</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGEREF_RECLAIM\">PAGEREF_RECLAIM</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGEREF_RECLAIM_CLEAN\">PAGEREF_RECLAIM_CLEAN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGEREF_KEEP\">PAGEREF_KEEP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAGEREF_ACTIVATE\">PAGEREF_ACTIVATE</a>,", 
"};", 
"", 
"static enum <a class=\"id\" href=\"#page_references\">page_references</a> <a class=\"id\" href=\"#page_check_references\">page_check_references</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#referenced_ptes\">referenced_ptes</a>, <a class=\"id\" href=\"#referenced_page\">referenced_page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#referenced_ptes\">referenced_ptes</a> = <a class=\"id\" href=\"#page_referenced\">page_referenced</a>(<a class=\"id\" href=\"#page\">page</a>, 1, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, &amp;<a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#referenced_page\">referenced_page</a> = <a class=\"id\" href=\"#TestClearPageReferenced\">TestClearPageReferenced</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lumpy reclaim - ignore references */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#lumpy_reclaim_mode\">lumpy_reclaim_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGEREF_RECLAIM\">PAGEREF_RECLAIM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mlock lost the isolation race with us.  Let try_to_unmap()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * move the page to the unevictable list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGEREF_RECLAIM\">PAGEREF_RECLAIM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#referenced_ptes\">referenced_ptes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGEREF_ACTIVATE\">PAGEREF_ACTIVATE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * All mapped pages start out with page table</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * references from the instantiating fault, so we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to look twice if a mapped file page is used more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * than once.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Mark it and spare it for another trip around the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inactive list.  Another page table reference will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lead to its activation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: the mark is set for activated pages as well</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so that recently deactivated but used pages are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * quickly recovered.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageReferenced\">SetPageReferenced</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#referenced_page\">referenced_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGEREF_ACTIVATE\">PAGEREF_ACTIVATE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGEREF_KEEP\">PAGEREF_KEEP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reclaim if clean, defer dirty pages to writeback */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#referenced_page\">referenced_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGEREF_RECLAIM_CLEAN\">PAGEREF_RECLAIM_CLEAN</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGEREF_RECLAIM\">PAGEREF_RECLAIM</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> void <a class=\"id\" href=\"#free_page_list\">free_page_list</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#free_pages\">free_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pagevec\">pagevec</a> <a class=\"id\" href=\"#freed_pvec\">freed_pvec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagevec_init\">pagevec_init</a>(&amp;<a class=\"id\" href=\"#freed_pvec\">freed_pvec</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#free_pages\">free_pages</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pagevec_add\">pagevec_add</a>(&amp;<a class=\"id\" href=\"#freed_pvec\">freed_pvec</a>, <a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pagevec_free\">__pagevec_free</a>(&amp;<a class=\"id\" href=\"#freed_pvec\">freed_pvec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagevec_reinit\">pagevec_reinit</a>(&amp;<a class=\"id\" href=\"#freed_pvec\">freed_pvec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagevec_free\">pagevec_free</a>(&amp;<a class=\"id\" href=\"#freed_pvec\">freed_pvec</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * shrink_page_list() returns the number of reclaimed pages</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#shrink_page_list\">shrink_page_list</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#page_list\">page_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#pageout_io\">pageout_io</a> <a class=\"id\" href=\"#sync_writeback\">sync_writeback</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#ret_pages\">ret_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#free_pages\">free_pages</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pgactivate\">pgactivate</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#page_list\">page_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#page_references\">page_references</a> <a class=\"id\" href=\"#references\">references</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#may_enter_fs\">may_enter_fs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#lru_to_page\">lru_to_page</a>(<a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep\">keep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageActive\">PageActive</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page_evictable\">page_evictable</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cull_mlocked\">cull_mlocked</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#may_unmap\">may_unmap</a> && <a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Double the slab pressure for mapped and swapcache pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_enter_fs\">may_enter_fs</a> = (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>) && (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Synchronous reclaim is performed in two passes,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * first an asynchronous pass over the list to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * start parallel writeback, and a second synchronous</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pass to wait for the IO to complete.  Wait here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for any page for which writeback has already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * started.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sync_writeback\">sync_writeback</a> == <a class=\"id\" href=\"#PAGEOUT_IO_SYNC\">PAGEOUT_IO_SYNC</a> && <a class=\"id\" href=\"#may_enter_fs\">may_enter_fs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#references\">references</a> = <a class=\"id\" href=\"#page_check_references\">page_check_references</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#references\">references</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PAGEREF_ACTIVATE\">PAGEREF_ACTIVATE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#activate_locked\">activate_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PAGEREF_KEEP\">PAGEREF_KEEP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PAGEREF_RECLAIM\">PAGEREF_RECLAIM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PAGEREF_RECLAIM_CLEAN\">PAGEREF_RECLAIM_CLEAN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>; <span class=\"comment\">/* try to reclaim the page below */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Anonymous process memory has backing store?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Try to allocate it some swap space here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>) && !<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#add_to_swap\">add_to_swap</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#activate_locked\">activate_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_enter_fs\">may_enter_fs</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The page is mapped into the page tables of one or more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * processes. Try to unmap it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#try_to_unmap\">try_to_unmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#TTU_UNMAP\">TTU_UNMAP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SWAP_FAIL\">SWAP_FAIL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#activate_locked\">activate_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SWAP_AGAIN\">SWAP_AGAIN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SWAP_MLOCK\">SWAP_MLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cull_mlocked\">cull_mlocked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SWAP_SUCCESS\">SWAP_SUCCESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>; <span class=\"comment\">/* try to free the page below */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#references\">references</a> == <a class=\"id\" href=\"#PAGEREF_RECLAIM_CLEAN\">PAGEREF_RECLAIM_CLEAN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#may_enter_fs\">may_enter_fs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#may_writepage\">may_writepage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page is dirty, try to write it out here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#pageout\">pageout</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#sync_writeback\">sync_writeback</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PAGE_KEEP\">PAGE_KEEP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PAGE_ACTIVATE\">PAGE_ACTIVATE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#activate_locked\">activate_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PAGE_SUCCESS\">PAGE_SUCCESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep\">keep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * A synchronous write - probably a ramdisk.  Go</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ahead and try to reclaim the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep\">keep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PAGE_CLEAN\">PAGE_CLEAN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>; <span class=\"comment\">/* try to free the page below */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the page has buffers, try to free the buffer mappings</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * associated with this page. If we succeed we try to free</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the page as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We do this even if the page is PageDirty().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * try_to_release_page() does not perform I/O, but it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * possible for a page to have PageDirty set, but it is actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * clean (all its buffers are clean).  This happens if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * buffers were written out directly, with submit_bh(). ext3</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will do this, as well as the blockdev mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * try_to_release_page() will discover that cleanness and will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * drop the buffers and mark the page clean - it can be freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Rarely, pages can have buffers and no -&gt;mapping.  These are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the pages which were not successfully invalidated in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * truncate_complete_page().  We try to drop those buffers here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and if that worked, and the page is no longer mapped into</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * process address space (page_count == 1) it can be freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Otherwise, leave the page on the LRU so it is swappable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_private\">page_has_private</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_to_release_page\">try_to_release_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#activate_locked\">activate_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a> && <a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_page_testzero\">put_page_testzero</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_it\">free_it</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * rare race with speculative reference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the speculative reference will free</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this page shortly, so we may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * increment nr_reclaimed here (and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * leave it off the LRU).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a> || !<a class=\"id\" href=\"#__remove_mapping\">__remove_mapping</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#keep_locked\">keep_locked</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * At this point, we have no other references and there is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no way to pick any more up (removed from LRU, removed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from pagecache). Can use non-atomic bitops now (and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we obviously don't have to worry about waking up a process</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiting on the page lock, because there are no references.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_page_locked\">__clear_page_locked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#free_it\">free_it</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Is there need to periodically free_page_list? It would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * appear not as the counts should be low</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#free_pages\">free_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<a class=\"id\" href=\"#cull_mlocked\">cull_mlocked</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_free_swap\">try_to_free_swap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<a class=\"id\" href=\"#activate_locked\">activate_locked</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not a candidate for swapping, so reclaim swap space. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#vm_swap_full\">vm_swap_full</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_free_swap\">try_to_free_swap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageActive\">PageActive</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageActive\">SetPageActive</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgactivate\">pgactivate</a>++;", 
"<a class=\"id\" href=\"#keep_locked\">keep_locked</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#keep\">keep</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#ret_pages\">ret_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageUnevictable\">PageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page_list\">free_page_list</a>(&amp;<a class=\"id\" href=\"#free_pages\">free_pages</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#ret_pages\">ret_pages</a>, <a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count_vm_events\">count_vm_events</a>(<a class=\"id\" href=\"#PGACTIVATE\">PGACTIVATE</a>, <a class=\"id\" href=\"#pgactivate\">pgactivate</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attempt to remove the specified page from its LRU.  Only take this page</span>", 
"<span class=\"comment\"> * if it is of the appropriate PageActive status.  Pages which are being</span>", 
"<span class=\"comment\"> * freed elsewhere are also ignored.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * page:<span class=\"ts\"/>page to consider</span>", 
"<span class=\"comment\"> * mode:<span class=\"ts\"/>one of the LRU isolation modes defined above</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns 0 on success, -ve errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__isolate_lru_page\">__isolate_lru_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only take pages on the LRU. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When checking the active state, we need to be sure we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dealing with comparible boolean values.  Take the logical not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of each.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#ISOLATE_BOTH\">ISOLATE_BOTH</a> && (!<a class=\"id\" href=\"#PageActive\">PageActive</a>(<a class=\"id\" href=\"#page\">page</a>) != !<a class=\"id\" href=\"#mode\">mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#ISOLATE_BOTH\">ISOLATE_BOTH</a> && <a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When this function is being called for lumpy reclaim, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initially look into all LRU pages, active, inactive and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unevictable; only give shrink_page_list evictable pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUnevictable\">PageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Be careful not to clear PageLRU until after we're</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sure the page is not being freed elsewhere -- the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page release code relies on it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageLRU\">ClearPageLRU</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * zone-&gt;lru_lock is heavily contended.  Some of the functions that</span>", 
"<span class=\"comment\"> * shrink the lists perform better by taking out a batch of pages</span>", 
"<span class=\"comment\"> * and working on them outside the LRU lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For pagecache intensive workloads, this function is the hottest</span>", 
"<span class=\"comment\"> * spot in the kernel (apart from copy_*_user functions).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Appropriate locks must be held before calling this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @nr_to_scan:<span class=\"ts\"/>The number of pages to look through on the list.</span>", 
"<span class=\"comment\"> * @src:<span class=\"ts\"/>The LRU list to pull pages off.</span>", 
"<span class=\"comment\"> * @dst:<span class=\"ts\"/>The temp list to put pages on to.</span>", 
"<span class=\"comment\"> * @scanned:<span class=\"ts\"/>The number of pages that were scanned.</span>", 
"<span class=\"comment\"> * @order:<span class=\"ts\"/>The caller's attempted allocation order</span>", 
"<span class=\"comment\"> * @mode:<span class=\"ts\"/>One of the LRU isolation modes</span>", 
"<span class=\"comment\"> * @file:<span class=\"ts\"/>True [1] if isolating file [!anon] pages</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns how many pages were moved onto *@dst.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#isolate_lru_pages\">isolate_lru_pages</a>(unsigned long <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#src\">src</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#scanned\">scanned</a>, int <a class=\"id\" href=\"#order\">order</a>, int <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_taken\">nr_taken</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_lumpy_taken\">nr_lumpy_taken</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_lumpy_dirty\">nr_lumpy_dirty</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_lumpy_failed\">nr_lumpy_failed</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#scan\">scan</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#scan\">scan</a> = 0; <a class=\"id\" href=\"#scan\">scan</a> &lt; <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a> && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#src\">src</a>); <a class=\"id\" href=\"#scan\">scan</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page_pfn\">page_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#zone_id\">zone_id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#lru_to_page\">lru_to_page</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetchw_prev_lru_page\">prefetchw_prev_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#__isolate_lru_page\">__isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#file\">file</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_del_lru\">mem_cgroup_del_lru</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_taken\">nr_taken</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* else it is being freed elsewhere */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_rotate_lru_list\">mem_cgroup_rotate_lru_list</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page_lru\">page_lru</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#order\">order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Attempt to take all pages in the order aligned region</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * surrounding the tag page.  Only take those pages of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the same active state as that tag page.  We may safely</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * round the target page pfn down to the requested order</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as the mem_map is guarenteed valid out to MAX_ORDER,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * where that page is in a different zone we will detect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it from its zone id and abort this block scan.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_id\">zone_id</a> = <a class=\"id\" href=\"#page_zone_id\">page_zone_id</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_pfn\">page_pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_pfn\">page_pfn</a> &amp; ~((1 << <a class=\"id\" href=\"#order\">order</a>) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a> + (1 << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#cursor_page\">cursor_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The target page is in the block, ignore it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pfn\">pfn</a> == <a class=\"id\" href=\"#page_pfn\">page_pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Avoid holes within the zone. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cursor_page\">cursor_page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check that we have not crossed a zone boundary. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page_zone_id\">page_zone_id</a>(<a class=\"id\" href=\"#cursor_page\">cursor_page</a>) != <a class=\"id\" href=\"#zone_id\">zone_id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we don't have enough swap space, reclaiming of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * anon page which don't already have a swap slot is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pointless.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> <= 0 && <a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#cursor_page\">cursor_page</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#cursor_page\">cursor_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__isolate_lru_page\">__isolate_lru_page</a>(<a class=\"id\" href=\"#cursor_page\">cursor_page</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#file\">file</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#cursor_page\">cursor_page</a>-><a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_del_lru\">mem_cgroup_del_lru</a>(<a class=\"id\" href=\"#cursor_page\">cursor_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_taken\">nr_taken</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_lumpy_taken\">nr_lumpy_taken</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#cursor_page\">cursor_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_lumpy_dirty\">nr_lumpy_dirty</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#ISOLATE_BOTH\">ISOLATE_BOTH</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#cursor_page\">cursor_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_lumpy_failed\">nr_lumpy_failed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#scanned\">scanned</a> = <a class=\"id\" href=\"#scan\">scan</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_lru_isolate\">trace_mm_vmscan_lru_isolate</a>(<a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>, <a class=\"id\" href=\"#scan\">scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_taken\">nr_taken</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_lumpy_taken\">nr_lumpy_taken</a>, <a class=\"id\" href=\"#nr_lumpy_dirty\">nr_lumpy_dirty</a>, <a class=\"id\" href=\"#nr_lumpy_failed\">nr_lumpy_failed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_taken\">nr_taken</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#isolate_pages_global\">isolate_pages_global</a>(unsigned long <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#scanned\">scanned</a>, int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mode\">mode</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#active\">active</a>, int <a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lru\">lru</a> = <a class=\"id\" href=\"#LRU_BASE\">LRU_BASE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#active\">active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a> += <a class=\"id\" href=\"#LRU_ACTIVE\">LRU_ACTIVE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a> += <a class=\"id\" href=\"#LRU_FILE\">LRU_FILE</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#isolate_lru_pages\">isolate_lru_pages</a>(<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#lru\">lru</a>[<a class=\"id\" href=\"#lru\">lru</a>].<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#scanned\">scanned</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * clear_active_flags() is a helper for shrink_active_list(), clearing</span>", 
"<span class=\"comment\"> * any active bits from the pages in the list.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#clear_active_flags\">clear_active_flags</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#page_list\">page_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_active\">nr_active</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lru\">lru</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page_list\">page_list</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a> = <a class=\"id\" href=\"#page_lru_base_type\">page_lru_base_type</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageActive\">PageActive</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a> += <a class=\"id\" href=\"#LRU_ACTIVE\">LRU_ACTIVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageActive\">ClearPageActive</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_active\">nr_active</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#lru\">lru</a>]++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_active\">nr_active</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * isolate_lru_page - tries to isolate a page from its LRU list</span>", 
"<span class=\"comment\"> * @page: page to isolate from its LRU list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Isolates a @page from an LRU list, clears PageLRU and adjusts the</span>", 
"<span class=\"comment\"> * vmstat statistic corresponding to whatever LRU list the page was on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if the page was removed from an LRU list.</span>", 
"<span class=\"comment\"> * Returns -EBUSY if the page was not on an LRU list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The returned page will have PageLRU() cleared.  If it was found on</span>", 
"<span class=\"comment\"> * the active list, it will have PageActive set.  If it was found on</span>", 
"<span class=\"comment\"> * the unevictable list, it will have the PageUnevictable bit set. That flag</span>", 
"<span class=\"comment\"> * may need to be cleared by the caller before letting the page go.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The vmstat statistic corresponding to the list on which the page was</span>", 
"<span class=\"comment\"> * found will be decremented.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Restrictions:</span>", 
"<span class=\"comment\"> * (1) Must be called with an elevated refcount on the page. This is a</span>", 
"<span class=\"comment\"> *     fundamentnal difference from isolate_lru_pages (which is called</span>", 
"<span class=\"comment\"> *     without a stable reference).</span>", 
"<span class=\"comment\"> * (2) the lru_lock must not be held.</span>", 
"<span class=\"comment\"> * (3) interrupts must be enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#lru\">lru</a> = <a class=\"id\" href=\"#page_lru\">page_lru</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageLRU\">ClearPageLRU</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_page_from_lru_list\">del_page_from_lru_list</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Are there way too many processes in the direct reclaim path already?</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#too_many_isolated\">too_many_isolated</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, int <a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#inactive\">inactive</a>, <a class=\"id\" href=\"#isolated\">isolated</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_is_kswapd\">current_is_kswapd</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inactive\">inactive</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isolated\">isolated</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_FILE\">NR_ISOLATED_FILE</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inactive\">inactive</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_ANON\">NR_INACTIVE_ANON</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isolated\">isolated</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#isolated\">isolated</a> &gt; <a class=\"id\" href=\"#inactive\">inactive</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TODO: Try merging with migrations version of putback_lru_pages</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> void", 
"<a class=\"id\" href=\"#putback_lru_pages\">putback_lru_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_anon\">nr_anon</a>, unsigned long <a class=\"id\" href=\"#nr_file\">nr_file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#page_list\">page_list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pagevec\">pagevec</a> <a class=\"id\" href=\"#pvec\">pvec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone_reclaim_stat\">zone_reclaim_stat</a> *<a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a> = <a class=\"id\" href=\"#get_reclaim_stat\">get_reclaim_stat</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagevec_init\">pagevec_init</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Put back any unfreeable pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#page_list\">page_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#lru\">lru</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#lru_to_page\">lru_to_page</a>(<a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page_evictable\">page_evictable</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageLRU\">SetPageLRU</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a> = <a class=\"id\" href=\"#page_lru\">page_lru</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_page_to_lru_list\">add_page_to_lru_list</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_active_lru\">is_active_lru</a>(<a class=\"id\" href=\"#lru\">lru</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#is_file_lru\">is_file_lru</a>(<a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[<a class=\"id\" href=\"#file\">file</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pagevec_add\">pagevec_add</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, <a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pagevec_release\">__pagevec_release</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a>, -<a class=\"id\" href=\"#nr_anon\">nr_anon</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_FILE\">NR_ISOLATED_FILE</a>, -<a class=\"id\" href=\"#nr_file\">nr_file</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagevec_release\">pagevec_release</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> void <a class=\"id\" href=\"#update_isolated_counts\">update_isolated_counts</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#nr_anon\">nr_anon</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#nr_file\">nr_file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#isolated_list\">isolated_list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_active\">nr_active</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#NR_LRU_LISTS\">NR_LRU_LISTS</a>] = { 0, };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone_reclaim_stat\">zone_reclaim_stat</a> *<a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a> = <a class=\"id\" href=\"#get_reclaim_stat\">get_reclaim_stat</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_active\">nr_active</a> = <a class=\"id\" href=\"#clear_active_flags\">clear_active_flags</a>(<a class=\"id\" href=\"#isolated_list\">isolated_list</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_events\">__count_vm_events</a>(<a class=\"id\" href=\"#PGDEACTIVATE\">PGDEACTIVATE</a>, <a class=\"id\" href=\"#nr_active\">nr_active</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_FILE\">NR_ACTIVE_FILE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      -<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#LRU_ACTIVE_FILE\">LRU_ACTIVE_FILE</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      -<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#LRU_INACTIVE_FILE\">LRU_INACTIVE_FILE</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_ANON\">NR_ACTIVE_ANON</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      -<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#LRU_ACTIVE_ANON\">LRU_ACTIVE_ANON</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_ANON\">NR_INACTIVE_ANON</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      -<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#LRU_INACTIVE_ANON\">LRU_INACTIVE_ANON</a>]);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#nr_anon\">nr_anon</a> = <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#LRU_ACTIVE_ANON\">LRU_ACTIVE_ANON</a>] + <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#LRU_INACTIVE_ANON\">LRU_INACTIVE_ANON</a>];", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#nr_file\">nr_file</a> = <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#LRU_ACTIVE_FILE\">LRU_ACTIVE_FILE</a>] + <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#LRU_INACTIVE_FILE\">LRU_INACTIVE_FILE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a>, *<a class=\"id\" href=\"#nr_anon\">nr_anon</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_FILE\">NR_ISOLATED_FILE</a>, *<a class=\"id\" href=\"#nr_file\">nr_file</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[0] += *<a class=\"id\" href=\"#nr_anon\">nr_anon</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[1] += *<a class=\"id\" href=\"#nr_file\">nr_file</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns true if the caller should wait to clean dirty/writeback pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we are direct reclaiming for contiguous pages and we do not reclaim</span>", 
"<span class=\"comment\"> * everything in the list, try again and wait for writeback IO to complete.</span>", 
"<span class=\"comment\"> * This will stall high-order allocations noticeably. Only do that when really</span>", 
"<span class=\"comment\"> * need to free the pages under high memory pressure.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#should_reclaim_stall\">should_reclaim_stall</a>(unsigned long <a class=\"id\" href=\"#nr_taken\">nr_taken</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_freed\">nr_freed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#priority\">priority</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lumpy_stall_priority\">lumpy_stall_priority</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* kswapd should not stall on sync IO */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_is_kswapd\">current_is_kswapd</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only stall on lumpy reclaim */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#lumpy_reclaim_mode\">lumpy_reclaim_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we have relaimed everything on the isolated list, no stall */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_freed\">nr_freed</a> == <a class=\"id\" href=\"#nr_taken\">nr_taken</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For high-order allocations, there are two stall thresholds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * High-cost allocations stall immediately where as lower</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * order allocations such as stacks require the scanning</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * priority to be much higher before stalling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#order\">order</a> &gt; <a class=\"id\" href=\"#PAGE_ALLOC_COSTLY_ORDER\">PAGE_ALLOC_COSTLY_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lumpy_stall_priority\">lumpy_stall_priority</a> = <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lumpy_stall_priority\">lumpy_stall_priority</a> = <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a> / 3;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#priority\">priority</a> <= <a class=\"id\" href=\"#lumpy_stall_priority\">lumpy_stall_priority</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * shrink_inactive_list() is a helper for shrink_zone().  It returns the number</span>", 
"<span class=\"comment\"> * of reclaimed pages</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> unsigned long", 
"<a class=\"id\" href=\"#shrink_inactive_list\">shrink_inactive_list</a>(unsigned long <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>, int <a class=\"id\" href=\"#priority\">priority</a>, int <a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_taken\">nr_taken</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_active\">nr_active</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_anon\">nr_anon</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_file\">nr_file</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#too_many_isolated\">too_many_isolated</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#sc\">sc</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>(<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>, <a class=\"id\" href=\"#HZ\">HZ</a>/10);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We are about to die and free our memory. Return now. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>;", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_taken\">nr_taken</a> = <a class=\"id\" href=\"#isolate_pages_global\">isolate_pages_global</a>(<a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#page_list\">page_list</a>, &amp;<a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#lumpy_reclaim_mode\">lumpy_reclaim_mode</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ISOLATE_BOTH\">ISOLATE_BOTH</a> : <a class=\"id\" href=\"#ISOLATE_INACTIVE\">ISOLATE_INACTIVE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>, 0, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pages_scanned\">pages_scanned</a> += <a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current_is_kswapd\">current_is_kswapd</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__count_zone_vm_events\">__count_zone_vm_events</a>(<a class=\"id\" href=\"#PGSCAN_KSWAPD\">PGSCAN_KSWAPD</a>, <a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__count_zone_vm_events\">__count_zone_vm_events</a>(<a class=\"id\" href=\"#PGSCAN_DIRECT\">PGSCAN_DIRECT</a>, <a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_taken\">nr_taken</a> = <a class=\"id\" href=\"#mem_cgroup_isolate_pages\">mem_cgroup_isolate_pages</a>(<a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#page_list\">page_list</a>, &amp;<a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#lumpy_reclaim_mode\">lumpy_reclaim_mode</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ISOLATE_BOTH\">ISOLATE_BOTH</a> : <a class=\"id\" href=\"#ISOLATE_INACTIVE\">ISOLATE_INACTIVE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mem_cgroup_isolate_pages() keeps track of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * scanned pages on its own.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_taken\">nr_taken</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_isolated_counts\">update_isolated_counts</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, &amp;<a class=\"id\" href=\"#nr_anon\">nr_anon</a>, &amp;<a class=\"id\" href=\"#nr_file\">nr_file</a>, &amp;<a class=\"id\" href=\"#page_list\">page_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = <a class=\"id\" href=\"#shrink_page_list\">shrink_page_list</a>(&amp;<a class=\"id\" href=\"#page_list\">page_list</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#PAGEOUT_IO_ASYNC\">PAGEOUT_IO_ASYNC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if we should syncronously wait for writeback */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#should_reclaim_stall\">should_reclaim_stall</a>(<a class=\"id\" href=\"#nr_taken\">nr_taken</a>, <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>, <a class=\"id\" href=\"#priority\">priority</a>, <a class=\"id\" href=\"#sc\">sc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>(<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>, <a class=\"id\" href=\"#HZ\">HZ</a>/10);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The attempt at page out may have made some</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the pages active, mark them inactive again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_active\">nr_active</a> = <a class=\"id\" href=\"#clear_active_flags\">clear_active_flags</a>(&amp;<a class=\"id\" href=\"#page_list\">page_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_events\">count_vm_events</a>(<a class=\"id\" href=\"#PGDEACTIVATE\">PGDEACTIVATE</a>, <a class=\"id\" href=\"#nr_active\">nr_active</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> += <a class=\"id\" href=\"#shrink_page_list\">shrink_page_list</a>(&amp;<a class=\"id\" href=\"#page_list\">page_list</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#PAGEOUT_IO_SYNC\">PAGEOUT_IO_SYNC</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_is_kswapd\">current_is_kswapd</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_events\">__count_vm_events</a>(<a class=\"id\" href=\"#KSWAPD_STEAL\">KSWAPD_STEAL</a>, <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__count_zone_vm_events\">__count_zone_vm_events</a>(<a class=\"id\" href=\"#PGSTEAL\">PGSTEAL</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_pages\">putback_lru_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#nr_anon\">nr_anon</a>, <a class=\"id\" href=\"#nr_file\">nr_file</a>, &amp;<a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This moves pages from the active list to the inactive list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We move them the other way if the page is referenced by one or more</span>", 
"<span class=\"comment\"> * processes, from rmap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the pages are mostly unmapped, the processing is fast and it is</span>", 
"<span class=\"comment\"> * appropriate to hold zone-&gt;lru_lock across the whole operation.  But if</span>", 
"<span class=\"comment\"> * the pages are mapped, the processing is slow (page_referenced()) so we</span>", 
"<span class=\"comment\"> * should drop zone-&gt;lru_lock around each page.  It's impossible to balance</span>", 
"<span class=\"comment\"> * this, so instead we remove the pages from the LRU while processing them.</span>", 
"<span class=\"comment\"> * It is safe to rely on PG_active against the non-LRU pages in here because</span>", 
"<span class=\"comment\"> * nobody will play with that bit on a non-LRU page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The downside is that we have to touch page-&gt;_count against each page.</span>", 
"<span class=\"comment\"> * But we had to alter page-&gt;flags anyway.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#move_active_pages_to_lru\">move_active_pages_to_lru</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#lru\">lru</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pgmoved\">pgmoved</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pagevec\">pagevec</a> <a class=\"id\" href=\"#pvec\">pvec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagevec_init\">pagevec_init</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, 1);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#lru_to_page\">lru_to_page</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageLRU\">SetPageLRU</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru\">lru</a>[<a class=\"id\" href=\"#lru\">lru</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_add_lru_list\">mem_cgroup_add_lru_list</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgmoved\">pgmoved</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pagevec_add\">pagevec_add</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, <a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_heads_over_limit\">buffer_heads_over_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagevec_strip\">pagevec_strip</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pagevec_release\">__pagevec_release</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_LRU_BASE\">NR_LRU_BASE</a> + <a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#pgmoved\">pgmoved</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_active_lru\">is_active_lru</a>(<a class=\"id\" href=\"#lru\">lru</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_events\">__count_vm_events</a>(<a class=\"id\" href=\"#PGDEACTIVATE\">PGDEACTIVATE</a>, <a class=\"id\" href=\"#pgmoved\">pgmoved</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#shrink_active_list\">shrink_active_list</a>(unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>, int <a class=\"id\" href=\"#priority\">priority</a>, int <a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_taken\">nr_taken</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pgscanned\">pgscanned</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#l_hold\">l_hold</a>);<span class=\"ts\"/><span class=\"comment\">/* The pages which were snipped off */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#l_active\">l_active</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#l_inactive\">l_inactive</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone_reclaim_stat\">zone_reclaim_stat</a> *<a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a> = <a class=\"id\" href=\"#get_reclaim_stat\">get_reclaim_stat</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_rotated\">nr_rotated</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_taken\">nr_taken</a> = <a class=\"id\" href=\"#isolate_pages_global\">isolate_pages_global</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, &amp;<a class=\"id\" href=\"#l_hold\">l_hold</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#pgscanned\">pgscanned</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ISOLATE_ACTIVE\">ISOLATE_ACTIVE</a>, <a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pages_scanned\">pages_scanned</a> += <a class=\"id\" href=\"#pgscanned\">pgscanned</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_taken\">nr_taken</a> = <a class=\"id\" href=\"#mem_cgroup_isolate_pages\">mem_cgroup_isolate_pages</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, &amp;<a class=\"id\" href=\"#l_hold\">l_hold</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#pgscanned\">pgscanned</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ISOLATE_ACTIVE\">ISOLATE_ACTIVE</a>, <a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, 1, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mem_cgroup_isolate_pages() keeps track of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * scanned pages on its own.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[<a class=\"id\" href=\"#file\">file</a>] += <a class=\"id\" href=\"#nr_taken\">nr_taken</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__count_zone_vm_events\">__count_zone_vm_events</a>(<a class=\"id\" href=\"#PGREFILL\">PGREFILL</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pgscanned\">pgscanned</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_FILE\">NR_ACTIVE_FILE</a>, -<a class=\"id\" href=\"#nr_taken\">nr_taken</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_ANON\">NR_ACTIVE_ANON</a>, -<a class=\"id\" href=\"#nr_taken\">nr_taken</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a> + <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#nr_taken\">nr_taken</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#l_hold\">l_hold</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#lru_to_page\">lru_to_page</a>(&amp;<a class=\"id\" href=\"#l_hold\">l_hold</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page_evictable\">page_evictable</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_referenced\">page_referenced</a>(<a class=\"id\" href=\"#page\">page</a>, 0, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, &amp;<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_rotated\">nr_rotated</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Identify referenced, file-backed active pages and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * give them one more trip around the active list. So</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that executable code get better chances to stay in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * memory under moderate memory pressure.  Anon pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * are not likely to be evicted by use-once streaming</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * IO, plus JVM can create lots of anon VM_EXEC pages,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so we ignore them here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>) && <a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#l_active\">l_active</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageActive\">ClearPageActive</a>(<a class=\"id\" href=\"#page\">page</a>);<span class=\"ts\"/><span class=\"comment\">/* we are de-activating */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#l_inactive\">l_inactive</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Move pages back to the lru list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Count referenced pages from currently used mappings as rotated,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even though only some of them are actually re-activated.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * helps balance scan pressure between file and anonymous pages in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_scan_ratio.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[<a class=\"id\" href=\"#file\">file</a>] += <a class=\"id\" href=\"#nr_rotated\">nr_rotated</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#move_active_pages_to_lru\">move_active_pages_to_lru</a>(<a class=\"id\" href=\"#zone\">zone</a>, &amp;<a class=\"id\" href=\"#l_active\">l_active</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LRU_ACTIVE\">LRU_ACTIVE</a> + <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#LRU_FILE\">LRU_FILE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#move_active_pages_to_lru\">move_active_pages_to_lru</a>(<a class=\"id\" href=\"#zone\">zone</a>, &amp;<a class=\"id\" href=\"#l_inactive\">l_inactive</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LRU_BASE\">LRU_BASE</a>   + <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#LRU_FILE\">LRU_FILE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a> + <a class=\"id\" href=\"#file\">file</a>, -<a class=\"id\" href=\"#nr_taken\">nr_taken</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#inactive_anon_is_low_global\">inactive_anon_is_low_global</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#active\">active</a>, <a class=\"id\" href=\"#inactive\">inactive</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active\">active</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_ANON\">NR_ACTIVE_ANON</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inactive\">inactive</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_ANON\">NR_INACTIVE_ANON</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inactive\">inactive</a> * <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#inactive_ratio\">inactive_ratio</a> &lt; <a class=\"id\" href=\"#active\">active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * inactive_anon_is_low - check if anonymous pages need to be deactivated</span>", 
"<span class=\"comment\"> * @zone: zone to check</span>", 
"<span class=\"comment\"> * @sc:   scan control of this context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the zone does not have enough inactive anon pages,</span>", 
"<span class=\"comment\"> * meaning some active anon pages need to be deactivated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#inactive_anon_is_low\">inactive_anon_is_low</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#low\">low</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> = <a class=\"id\" href=\"#inactive_anon_is_low_global\">inactive_anon_is_low_global</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> = <a class=\"id\" href=\"#mem_cgroup_inactive_anon_is_low\">mem_cgroup_inactive_anon_is_low</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#low\">low</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#inactive_file_is_low_global\">inactive_file_is_low_global</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#active\">active</a>, <a class=\"id\" href=\"#inactive\">inactive</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active\">active</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_FILE\">NR_ACTIVE_FILE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inactive\">inactive</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#active\">active</a> &gt; <a class=\"id\" href=\"#inactive\">inactive</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * inactive_file_is_low - check if file pages need to be deactivated</span>", 
"<span class=\"comment\"> * @zone: zone to check</span>", 
"<span class=\"comment\"> * @sc:   scan control of this context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the system is doing streaming IO, memory pressure here</span>", 
"<span class=\"comment\"> * ensures that active file pages get deactivated, until more</span>", 
"<span class=\"comment\"> * than half of the file pages are on the inactive list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Once we get to that situation, protect the system's working</span>", 
"<span class=\"comment\"> * set from being evicted by disabling active file page aging.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This uses a different ratio than the anonymous pages, because</span>", 
"<span class=\"comment\"> * the page cache uses a use-once replacement algorithm.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#inactive_file_is_low\">inactive_file_is_low</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#low\">low</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> = <a class=\"id\" href=\"#inactive_file_is_low_global\">inactive_file_is_low_global</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> = <a class=\"id\" href=\"#mem_cgroup_inactive_file_is_low\">mem_cgroup_inactive_file_is_low</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#low\">low</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#inactive_list_is_low\">inactive_list_is_low</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inactive_file_is_low\">inactive_file_is_low</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inactive_anon_is_low\">inactive_anon_is_low</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#shrink_list\">shrink_list</a>(enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#lru\">lru</a>, unsigned long <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>, int <a class=\"id\" href=\"#priority\">priority</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#is_file_lru\">is_file_lru</a>(<a class=\"id\" href=\"#lru\">lru</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_active_lru\">is_active_lru</a>(<a class=\"id\" href=\"#lru\">lru</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inactive_list_is_low\">inactive_list_is_low</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#shrink_active_list\">shrink_active_list</a>(<a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#priority\">priority</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#shrink_inactive_list\">shrink_inactive_list</a>(<a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#priority\">priority</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Smallish @nr_to_scan's are deposited in @nr_saved_scan,</span>", 
"<span class=\"comment\"> * until we collected @swap_cluster_max pages to scan.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#nr_scan_try_batch\">nr_scan_try_batch</a>(unsigned long <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#nr_saved_scan\">nr_saved_scan</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#nr_saved_scan\">nr_saved_scan</a> += <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = *<a class=\"id\" href=\"#nr_saved_scan\">nr_saved_scan</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> >= <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nr_saved_scan\">nr_saved_scan</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine how aggressively the anon and file LRU lists should be</span>", 
"<span class=\"comment\"> * scanned.  The relative value of each set of LRU lists is determined</span>", 
"<span class=\"comment\"> * by looking at the fraction of the pages scanned we did rotate back</span>", 
"<span class=\"comment\"> * onto the active list instead of evict.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * nr[0] = anon pages to scan; nr[1] = file pages to scan</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#get_scan_count\">get_scan_count</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#nr\">nr</a>, int <a class=\"id\" href=\"#priority\">priority</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#anon\">anon</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#anon_prio\">anon_prio</a>, <a class=\"id\" href=\"#file_prio\">file_prio</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#fp\">fp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone_reclaim_stat\">zone_reclaim_stat</a> *<a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a> = <a class=\"id\" href=\"#get_reclaim_stat\">get_reclaim_stat</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#fraction\">fraction</a>[2], <a class=\"id\" href=\"#denominator\">denominator</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#noswap\">noswap</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we have no swap space, do not bother scanning anon pages. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#may_swap\">may_swap</a> || (<a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> <= 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#noswap\">noswap</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fraction\">fraction</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fraction\">fraction</a>[1] = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#denominator\">denominator</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon\">anon</a>  = <a class=\"id\" href=\"#zone_nr_lru_pages\">zone_nr_lru_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#LRU_ACTIVE_ANON\">LRU_ACTIVE_ANON</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_nr_lru_pages\">zone_nr_lru_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#LRU_INACTIVE_ANON\">LRU_INACTIVE_ANON</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>  = <a class=\"id\" href=\"#zone_nr_lru_pages\">zone_nr_lru_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#LRU_ACTIVE_FILE\">LRU_ACTIVE_FILE</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_nr_lru_pages\">zone_nr_lru_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#LRU_INACTIVE_FILE\">LRU_INACTIVE_FILE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>  = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we have very few page cache pages,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   force-scan anon pages. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#file\">file</a> + <a class=\"id\" href=\"#free\">free</a> <= <a class=\"id\" href=\"#high_wmark_pages\">high_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fraction\">fraction</a>[0] = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fraction\">fraction</a>[1] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#denominator\">denominator</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With swappiness at 100, anonymous and file have the same priority.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This scanning priority is essentially the inverse of IO cost.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_prio\">anon_prio</a> = <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#swappiness\">swappiness</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_prio\">file_prio</a> = 200 - <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#swappiness\">swappiness</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, so we have swap space and a fair amount of page cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages.  We use the recently rotated / recently scanned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ratios to determine how valuable each cache is.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Because workloads change over time (and to avoid overflow)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we keep these statistics as a floating average, which ends</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up weighing recent references more than old ones.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anon in [0], file in [1]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[0] &gt; <a class=\"id\" href=\"#anon\">anon</a> / 4)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[0] /= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[0] /= 2;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[1] &gt; <a class=\"id\" href=\"#file\">file</a> / 4)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[1] /= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[1] /= 2;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The amount of pressure on anon vs file pages is inversely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * proportional to the fraction of recently scanned pages on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * each list that were recently referenced and in active use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = (<a class=\"id\" href=\"#anon_prio\">anon_prio</a> + 1) * (<a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[0] + 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> /= <a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[0] + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = (<a class=\"id\" href=\"#file_prio\">file_prio</a> + 1) * (<a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[1] + 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> /= <a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[1] + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fraction\">fraction</a>[0] = <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fraction\">fraction</a>[1] = <a class=\"id\" href=\"#fp\">fp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#denominator\">denominator</a> = <a class=\"id\" href=\"#ap\">ap</a> + <a class=\"id\" href=\"#fp\">fp</a> + 1;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_evictable_lru\">for_each_evictable_lru</a>(<a class=\"id\" href=\"#l\">l</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#is_file_lru\">is_file_lru</a>(<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#scan\">scan</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a> = <a class=\"id\" href=\"#zone_nr_lru_pages\">zone_nr_lru_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priority\">priority</a> || <a class=\"id\" href=\"#noswap\">noswap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a> >>= <a class=\"id\" href=\"#priority\">priority</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a> = <a class=\"id\" href=\"#div64_u64\">div64_u64</a>(<a class=\"id\" href=\"#scan\">scan</a> * <a class=\"id\" href=\"#fraction\">fraction</a>[<a class=\"id\" href=\"#file\">file</a>], <a class=\"id\" href=\"#denominator\">denominator</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#l\">l</a>] = <a class=\"id\" href=\"#nr_scan_try_batch\">nr_scan_try_batch</a>(<a class=\"id\" href=\"#scan\">scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>-><a class=\"id\" href=\"#nr_saved_scan\">nr_saved_scan</a>[<a class=\"id\" href=\"#l\">l</a>]);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_lumpy_reclaim_mode\">set_lumpy_reclaim_mode</a>(int <a class=\"id\" href=\"#priority\">priority</a>, struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we need a large contiguous chunk of memory, or have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trouble getting a small set of contiguous pages, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will reclaim both active and inactive pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#order\">order</a> &gt; <a class=\"id\" href=\"#PAGE_ALLOC_COSTLY_ORDER\">PAGE_ALLOC_COSTLY_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#lumpy_reclaim_mode\">lumpy_reclaim_mode</a> = 1;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#order\">order</a> && <a class=\"id\" href=\"#priority\">priority</a> &lt; <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a> - 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#lumpy_reclaim_mode\">lumpy_reclaim_mode</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#lumpy_reclaim_mode\">lumpy_reclaim_mode</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a basic per-zone page freer.  Used by both kswapd and direct reclaim.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#shrink_zone\">shrink_zone</a>(int <a class=\"id\" href=\"#priority\">priority</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#NR_LRU_LISTS\">NR_LRU_LISTS</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> = <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_scan_count\">get_scan_count</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#priority\">priority</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_lumpy_reclaim_mode\">set_lumpy_reclaim_mode</a>(<a class=\"id\" href=\"#priority\">priority</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#LRU_INACTIVE_ANON\">LRU_INACTIVE_ANON</a>] || <a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#LRU_ACTIVE_FILE\">LRU_ACTIVE_FILE</a>] ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#LRU_INACTIVE_FILE\">LRU_INACTIVE_FILE</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_evictable_lru\">for_each_evictable_lru</a>(<a class=\"id\" href=\"#l\">l</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#l\">l</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#l\">l</a>], <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#l\">l</a>] -= <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> += <a class=\"id\" href=\"#shrink_list\">shrink_list</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#priority\">priority</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * On large memory systems, scan &gt;&gt; priority can become</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * really large. This is fine for the starting priority;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we want to put equal scanning pressure on each zone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However, if the VM has a harder time of freeing pages,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with multiple processes reclaiming pages, the total</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * freeing target can get unreasonably large.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> >= <a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> && <a class=\"id\" href=\"#priority\">priority</a> &lt; <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Even if we did not try to evict anon pages at all, we want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rebalance the anon lru active/inactive ratio.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inactive_anon_is_low\">inactive_anon_is_low</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>) && <a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_active_list\">shrink_active_list</a>(<a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#priority\">priority</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#throttle_vm_writeout\">throttle_vm_writeout</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the direct reclaim path, for page-allocating processes.  We only</span>", 
"<span class=\"comment\"> * try to reclaim pages from zones which will satisfy the caller's allocation</span>", 
"<span class=\"comment\"> * request.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We reclaim from a zone even if that zone is over high_wmark_pages(zone).</span>", 
"<span class=\"comment\"> * Because:</span>", 
"<span class=\"comment\"> * a) The caller may be trying to free *extra* pages to satisfy a higher-order</span>", 
"<span class=\"comment\"> *    allocation or</span>", 
"<span class=\"comment\"> * b) The target zone may be at high_wmark_pages(zone) but the lower zones</span>", 
"<span class=\"comment\"> *    must go *over* high_wmark_pages(zone) to satisfy the `incremental min'</span>", 
"<span class=\"comment\"> *    zone defense algorithm.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If a zone is deemed to be full of pinned pages then just give it a light</span>", 
"<span class=\"comment\"> * scan then give up on it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#shrink_zones\">shrink_zones</a>(int <a class=\"id\" href=\"#priority\">priority</a>, struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist_nodemask\">for_each_zone_zonelist_nodemask</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>), <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Take care memory controller reclaiming has small influence</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to global LRU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuset_zone_allowed_hardwall\">cpuset_zone_allowed_hardwall</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a> && <a class=\"id\" href=\"#priority\">priority</a> != <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"comment\">/* Let kswapd poll it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_zone\">shrink_zone</a>(<a class=\"id\" href=\"#priority\">priority</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#zone_reclaimable\">zone_reclaimable</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pages_scanned\">pages_scanned</a> &lt; <a class=\"id\" href=\"#zone_reclaimable_pages\">zone_reclaimable_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>) * 6;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * As hibernation is going on, kswapd is freezed so that it can't mark</span>", 
"<span class=\"comment\"> * the zone into all_unreclaimable. It can't handle OOM during hibernation.</span>", 
"<span class=\"comment\"> * So let's check zone's unreclaimable in direct reclaim as well as kswapd.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist_nodemask\">for_each_zone_zonelist_nodemask</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>), <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuset_zone_allowed_hardwall\">cpuset_zone_allowed_hardwall</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_reclaimable\">zone_reclaimable</a>(<a class=\"id\" href=\"#zone\">zone</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the main entry point to direct page reclaim.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If a full scan of the inactive list fails to free enough memory then we</span>", 
"<span class=\"comment\"> * are \"out of memory\" and something needs to be killed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the caller is !__GFP_FS then the probability of a failure is reasonably</span>", 
"<span class=\"comment\"> * high - the zone may be full of dirty or under-writeback pages, which this</span>", 
"<span class=\"comment\"> * caller can't do much about.  We kick the writeback threads and take explicit</span>", 
"<span class=\"comment\"> * naps in the hope that some of these pages can be written.  But if the</span>", 
"<span class=\"comment\"> * allocating task holds filesystem locks which prevent writeout this might not</span>", 
"<span class=\"comment\"> * work, and the allocation attempt will fail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns:<span class=\"ts\"/>0, if no pages reclaimed</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>else, the number of pages reclaimed</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#do_try_to_free_pages\">do_try_to_free_pages</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#priority\">priority</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_scanned\">total_scanned</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> *<a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#writeback_threshold\">writeback_threshold</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_mems_allowed\">get_mems_allowed</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_freepages_start\">delayacct_freepages_start</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#ALLOCSTALL\">ALLOCSTALL</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#priority\">priority</a> = <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a>; <a class=\"id\" href=\"#priority\">priority</a> >= 0; <a class=\"id\" href=\"#priority\">priority</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_scanned\">nr_scanned</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#priority\">priority</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_swap_token\">disable_swap_token</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_zones\">shrink_zones</a>(<a class=\"id\" href=\"#priority\">priority</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't shrink slabs when reclaiming memory from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * over limit cgroups</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lru_pages\">lru_pages</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist\">for_each_zone_zonelist</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuset_zone_allowed_hardwall\">cpuset_zone_allowed_hardwall</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_pages\">lru_pages</a> += <a class=\"id\" href=\"#zone_reclaimable_pages\">zone_reclaimable_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_slab\">shrink_slab</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>, <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#lru_pages\">lru_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> += <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>-><a class=\"id\" href=\"#reclaimed_slab\">reclaimed_slab</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>-><a class=\"id\" href=\"#reclaimed_slab\">reclaimed_slab</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_scanned\">total_scanned</a> += <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> >= <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Try to write back as many pages as we just scanned.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tends to cause slow streaming writers to write data to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disk smoothly, at the dirtying rate, which is nice.   But</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that's undesirable in laptop mode, where we *want* lumpy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * writeout.  So in laptop mode, write out the whole world.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeback_threshold\">writeback_threshold</a> = <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> + <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> / 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#total_scanned\">total_scanned</a> &gt; <a class=\"id\" href=\"#writeback_threshold\">writeback_threshold</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup_flusher_threads\">wakeup_flusher_threads</a>(<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a> ? 0 : <a class=\"id\" href=\"#total_scanned\">total_scanned</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#may_writepage\">may_writepage</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Take a nap, wait for some writeback to complete */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> && <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_scanned\">nr_scanned</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#priority\">priority</a> &lt; <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a> - 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>(<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>, <a class=\"id\" href=\"#HZ\">HZ</a>/10);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that we've scanned all the zones at this priority level, note</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that level within the zone so that the next thread which performs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scanning of this zone will immediately start out at this priority</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * level.  This affects only the decision whether or not to bring</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mapped pages onto the inactive list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#priority\">priority</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priority\">priority</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_freepages_end\">delayacct_freepages_end</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* top priority shrink_zones still had more to do? don't OOM, then */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scanning_global_lru\">scanning_global_lru</a>(<a class=\"id\" href=\"#sc\">sc</a>) && !<a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#sc\">sc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#try_to_free_pages\">try_to_free_pages</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> <a class=\"id\" href=\"#sc\">sc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a> = !<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> = <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_unmap\">may_unmap</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_swap\">may_swap</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#swappiness\">swappiness</a> = <a class=\"id\" href=\"#vm_swappiness\">vm_swappiness</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nodemask\">nodemask</a> = <a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_direct_reclaim_begin\">trace_mm_vmscan_direct_reclaim_begin</a>(<a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = <a class=\"id\" href=\"#do_try_to_free_pages\">do_try_to_free_pages</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, &amp;<a class=\"id\" href=\"#sc\">sc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_direct_reclaim_end\">trace_mm_vmscan_direct_reclaim_end</a>(<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR\">CONFIG_CGROUP_MEM_RES_CTLR</a>", 
"", 
"unsigned long <a class=\"id\" href=\"#mem_cgroup_shrink_node_zone\">mem_cgroup_shrink_node_zone</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#noswap\">noswap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#swappiness\">swappiness</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> <a class=\"id\" href=\"#sc\">sc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> = <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a> = !<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_unmap\">may_unmap</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_swap\">may_swap</a> = !<a class=\"id\" href=\"#noswap\">noswap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#swappiness\">swappiness</a> = <a class=\"id\" href=\"#swappiness\">swappiness</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#order\">order</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> = <a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a> &amp; ~<a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_memcg_softlimit_reclaim_begin\">trace_mm_vmscan_memcg_softlimit_reclaim_begin</a>(0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: Although we can get the priority field, using it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here is not a good idea, since it limits the pages we can scan.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we don't reclaim here, the shrink_zone from balance_pgdat</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will pick up pages from other mem cgroup's as well. We hack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the priority and make it zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shrink_zone\">shrink_zone</a>(0, <a class=\"id\" href=\"#zone\">zone</a>, &amp;<a class=\"id\" href=\"#sc\">sc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_memcg_softlimit_reclaim_end\">trace_mm_vmscan_memcg_softlimit_reclaim_end</a>(<a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#try_to_free_mem_cgroup_pages\">try_to_free_mem_cgroup_pages</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cont\">mem_cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#noswap\">noswap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#swappiness\">swappiness</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> <a class=\"id\" href=\"#sc\">sc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a> = !<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_unmap\">may_unmap</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_swap\">may_swap</a> = !<a class=\"id\" href=\"#noswap\">noswap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> = <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#swappiness\">swappiness</a> = <a class=\"id\" href=\"#swappiness\">swappiness</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#order\">order</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> = <a class=\"id\" href=\"#mem_cont\">mem_cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nodemask\">nodemask</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, <span class=\"comment\">/* we don't care the placement */</span>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a> &amp; ~<a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>())-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_memcg_reclaim_begin\">trace_mm_vmscan_memcg_reclaim_begin</a>(0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = <a class=\"id\" href=\"#do_try_to_free_pages\">do_try_to_free_pages</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, &amp;<a class=\"id\" href=\"#sc\">sc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_memcg_reclaim_end\">trace_mm_vmscan_memcg_reclaim_end</a>(<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* is kswapd sleeping prematurely? */</span>", 
"static int <a class=\"id\" href=\"#sleeping_prematurely\">sleeping_prematurely</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, int <a class=\"id\" href=\"#order\">order</a>, long <a class=\"id\" href=\"#remaining\">remaining</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If a direct reclaimer woke kswapd within HZ/10, it's premature */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remaining\">remaining</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If after HZ/10, a zone is below the high mark, it's premature */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#nr_zones\">nr_zones</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#high_wmark_pages\">high_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For kswapd, balance_pgdat() will work across all this node's zones until</span>", 
"<span class=\"comment\"> * they are all at high_wmark_pages(zone).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of pages which were actually freed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is special handling here for zones which are full of pinned pages.</span>", 
"<span class=\"comment\"> * This can happen if the pages are all mlocked, or if they are all used by</span>", 
"<span class=\"comment\"> * device drivers (say, ZONE_DMA).  Or if they are all in use by hugetlb.</span>", 
"<span class=\"comment\"> * What we do is to detect the case where all pages in the zone have been</span>", 
"<span class=\"comment\"> * scanned twice and there has been zero successful reclaim.  Mark the zone as</span>", 
"<span class=\"comment\"> * dead and from now on, only perform a short scan.  Basically we're polling</span>", 
"<span class=\"comment\"> * the zone for when the problem goes away.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * kswapd scans the zones in the highmem-&gt;normal-&gt;dma direction.  It skips</span>", 
"<span class=\"comment\"> * zones which have free_pages &gt; high_wmark_pages(zone), but once a zone is</span>", 
"<span class=\"comment\"> * found to have free_pages &lt;= high_wmark_pages(zone), we scan that zone and the</span>", 
"<span class=\"comment\"> * lower zones regardless of the number of free pages in the lower zones. This</span>", 
"<span class=\"comment\"> * interoperates with the page allocator fallback scheme to ensure that aging</span>", 
"<span class=\"comment\"> * of pages is balanced across the zones.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#balance_pgdat\">balance_pgdat</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#all_zones_ok\">all_zones_ok</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#priority\">priority</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_scanned\">total_scanned</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> *<a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> <a class=\"id\" href=\"#sc\">sc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_unmap\">may_unmap</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_swap\">may_swap</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kswapd doesn't want to be bailed out while reclaim. because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we want to put equal scanning pressure on each zone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#swappiness\">swappiness</a> = <a class=\"id\" href=\"#vm_swappiness\">vm_swappiness</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/>};", 
"<a class=\"id\" href=\"#loop_again\">loop_again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_scanned\">total_scanned</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a> = !<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#PAGEOUTRUN\">PAGEOUTRUN</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#priority\">priority</a> = <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a>; <a class=\"id\" href=\"#priority\">priority</a> >= 0; <a class=\"id\" href=\"#priority\">priority</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end_zone\">end_zone</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* Inclusive.  0 = ZONE_DMA */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lru_pages\">lru_pages</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#has_under_min_watermark_zone\">has_under_min_watermark_zone</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The swap token gets in the way of swapout... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#priority\">priority</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_swap_token\">disable_swap_token</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all_zones_ok\">all_zones_ok</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Scan in the highmem-&gt;dma direction for the highest</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * zone which needs scanning</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#nr_zones\">nr_zones</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a> && <a class=\"id\" href=\"#priority\">priority</a> != <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Do some background aging of the anon list, to give</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pages a chance to be referenced before reclaiming.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inactive_anon_is_low\">inactive_anon_is_low</a>(<a class=\"id\" href=\"#zone\">zone</a>, &amp;<a class=\"id\" href=\"#sc\">sc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_active_list\">shrink_active_list</a>(<a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>, <a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#priority\">priority</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#high_wmark_pages\">high_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>), 0, 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_zone\">end_zone</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#end_zone\">end_zone</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_pages\">lru_pages</a> += <a class=\"id\" href=\"#zone_reclaimable_pages\">zone_reclaimable_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Now scan the zone in the dma-&gt;highmem direction, stopping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * at the last zone which needs scanning.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We do this because the page allocator works in the opposite</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * direction.  This prevents the page allocator from allocating</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pages behind kswapd's direction of progress, which would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cause too much scanning of the lower zones.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#end_zone\">end_zone</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_slab\">nr_slab</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a> && <a class=\"id\" href=\"#priority\">priority</a> != <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_scanned\">nr_scanned</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Call soft limit reclaim before calling shrink_zone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * For now we ignore the return value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_soft_limit_reclaim\">mem_cgroup_soft_limit_reclaim</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We put equal pressure on every zone, unless one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * zone has way too many pages free already.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>8*<a class=\"id\" href=\"#high_wmark_pages\">high_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>), <a class=\"id\" href=\"#end_zone\">end_zone</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_zone\">shrink_zone</a>(<a class=\"id\" href=\"#priority\">priority</a>, <a class=\"id\" href=\"#zone\">zone</a>, &amp;<a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>-><a class=\"id\" href=\"#reclaimed_slab\">reclaimed_slab</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_slab\">nr_slab</a> = <a class=\"id\" href=\"#shrink_slab\">shrink_slab</a>(<a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_pages\">lru_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> += <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>-><a class=\"id\" href=\"#reclaimed_slab\">reclaimed_slab</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_scanned\">total_scanned</a> += <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_slab\">nr_slab</a> == 0 && !<a class=\"id\" href=\"#zone_reclaimable\">zone_reclaimable</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we've done a decent amount of scanning and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the reclaim ratio is low, start doing writepage</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * even in laptop mode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#total_scanned\">total_scanned</a> &gt; <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a> * 2 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#total_scanned\">total_scanned</a> &gt; <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> + <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> / 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#high_wmark_pages\">high_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>), <a class=\"id\" href=\"#end_zone\">end_zone</a>, 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all_zones_ok\">all_zones_ok</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We are still under min water mark.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * means that we have a GFP_ATOMIC allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * failure risk. Hurry up!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#min_wmark_pages\">min_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>), <a class=\"id\" href=\"#end_zone\">end_zone</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#has_under_min_watermark_zone\">has_under_min_watermark_zone</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#all_zones_ok\">all_zones_ok</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kswapd: all done */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * OK, kswapd is getting into trouble.  Take a nap, then take</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * another pass across the zones.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#total_scanned\">total_scanned</a> && (<a class=\"id\" href=\"#priority\">priority</a> &lt; <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a> - 2)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#has_under_min_watermark_zone\">has_under_min_watermark_zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#KSWAPD_SKIP_CONGESTION_WAIT\">KSWAPD_SKIP_CONGESTION_WAIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>(<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>, <a class=\"id\" href=\"#HZ\">HZ</a>/10);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We do this so kswapd doesn't build up large priorities for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * example when it is freeing in parallel with allocators. It</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * matches the direct reclaim path behaviour in terms of impact</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on zone-&gt;*_priority.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> >= <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#all_zones_ok\">all_zones_ok</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Fragmentation may mean that the system cannot be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rebalanced for high-order allocations in all zones.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * At this point, if nr_reclaimed &lt; SWAP_CLUSTER_MAX,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it means the zones have been fully scanned and are still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not balanced. For high-order allocations, there is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * little point trying all over again as kswapd may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * infinite loop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Instead, recheck all watermarks at order-0 as they</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are the most important. If watermarks are ok, kswapd will go</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * back to sleep. High-order users can still perform direct</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reclaim if they wish.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> &lt; <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#order\">order</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#loop_again\">loop_again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The background pageout daemon, started as a kernel thread</span>", 
"<span class=\"comment\"> * from the init process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This basically trickles out pages so that we have _some_</span>", 
"<span class=\"comment\"> * free memory available even if there is no other activity</span>", 
"<span class=\"comment\"> * that frees anything up. This is needed for things like routing</span>", 
"<span class=\"comment\"> * etc, where we otherwise might have all activity going on in</span>", 
"<span class=\"comment\"> * asynchronous contexts that cannot page things out.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If there are applications that are active memory-allocators</span>", 
"<span class=\"comment\"> * (most normal use), this basically shouldn't matter.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#kswapd\">kswapd</a>(void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = (<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a>*)<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#reclaimed_slab\">reclaimed_slab</a> = 0,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a> = <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_current_reclaim_state\">lockdep_set_current_reclaim_state</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#cpumask\">cpumask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = &amp;<a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tell the memory management that we're a \"memory allocator\",</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and that if we need more memory we should get access to it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * regardless (see \"__alloc_pages()\"). \"kswapd\" should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * never get caught in the normal page freeing logic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (Kswapd normally doesn't need memory anyway, but sometimes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * you need a small amount of memory in order to be able to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page out something else, and this flag essentially protects</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * us from recursively trying to free more memory as we're</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trying to free the first piece of memory in the first place).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a> | <a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a> | <a class=\"id\" href=\"#PF_KSWAPD\">PF_KSWAPD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_freezable\">set_freezable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = 0;", 
"<span class=\"ts\"/>for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_order\">new_order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_wait\">kswapd_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_order\">new_order</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_max_order\">kswapd_max_order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_max_order\">kswapd_max_order</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#new_order\">new_order</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Don't sleep if someone wants a larger 'order'</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#new_order\">new_order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#freezing\">freezing</a>(<a class=\"id\" href=\"#current\">current</a>) && !<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#remaining\">remaining</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to sleep for a short interval */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sleeping_prematurely\">sleeping_prematurely</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#remaining\">remaining</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#HZ\">HZ</a>/10);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_wait\">kswapd_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_wait\">kswapd_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * After a short sleep, check if it was a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * premature sleep. If not, then go fully</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to sleep until explicitly woken up</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sleeping_prematurely\">sleeping_prematurely</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#remaining\">remaining</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_kswapd_sleep\">trace_mm_vmscan_kswapd_sleep</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remaining\">remaining</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#KSWAPD_LOW_WMARK_HIT_QUICKLY\">KSWAPD_LOW_WMARK_HIT_QUICKLY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#KSWAPD_HIGH_WMARK_HIT_QUICKLY\">KSWAPD_HIGH_WMARK_HIT_QUICKLY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_max_order\">kswapd_max_order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_wait\">kswapd_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can speed up thawing tasks if we don't call balance_pgdat</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * after returning from the refrigerator</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_kswapd_wake\">trace_mm_vmscan_kswapd_wake</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_pgdat\">balance_pgdat</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A zone is low on free memory, so wake its kswapd task to service it.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wakeup_kswapd\">wakeup_kswapd</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#low_wmark_pages\">low_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>), 0, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_max_order\">kswapd_max_order</a> &lt; <a class=\"id\" href=\"#order\">order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_max_order\">kswapd_max_order</a> = <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_wakeup_kswapd\">trace_mm_vmscan_wakeup_kswapd</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#zone_idx\">zone_idx</a>(<a class=\"id\" href=\"#zone\">zone</a>), <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuset_zone_allowed_hardwall\">cpuset_zone_allowed_hardwall</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_wait\">kswapd_wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_wait\">kswapd_wait</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The reclaimable count would be mostly accurate.</span>", 
"<span class=\"comment\"> * The less reclaimable pages may be</span>", 
"<span class=\"comment\"> * - mlocked pages, which will be moved to unevictable list when encountered</span>", 
"<span class=\"comment\"> * - mapped pages, which may require several travels to be reclaimed</span>", 
"<span class=\"comment\"> * - dirty pages, which is not \"instantly\" reclaimable</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#global_reclaimable_pages\">global_reclaimable_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_ACTIVE_FILE\">NR_ACTIVE_FILE</a>) +", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_ACTIVE_ANON\">NR_ACTIVE_ANON</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_INACTIVE_ANON\">NR_INACTIVE_ANON</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#zone_reclaimable_pages\">zone_reclaimable_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_FILE\">NR_ACTIVE_FILE</a>) +", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_ANON\">NR_ACTIVE_ANON</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_ANON\">NR_INACTIVE_ANON</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to free `nr_to_reclaim' of memory, system-wide, and return the number of</span>", 
"<span class=\"comment\"> * freed pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Rather than trying to age LRUs the aim is to preserve the overall</span>", 
"<span class=\"comment\"> * LRU order by reclaiming preferentially</span>", 
"<span class=\"comment\"> * inactive &gt; active &gt; active referenced &gt; active mapped</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#shrink_all_memory\">shrink_all_memory</a>(unsigned long <a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> <a class=\"id\" href=\"#sc\">sc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = <a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_swap\">may_swap</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_unmap\">may_unmap</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> = <a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#swappiness\">swappiness</a> = <a class=\"id\" href=\"#vm_swappiness\">vm_swappiness</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#order\">order</a> = 0,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> * <a class=\"id\" href=\"#zonelist\">zonelist</a> = <a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>(), <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_current_reclaim_state\">lockdep_set_current_reclaim_state</a>(<a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>.<a class=\"id\" href=\"#reclaimed_slab\">reclaimed_slab</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = &amp;<a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = <a class=\"id\" href=\"#do_try_to_free_pages\">do_try_to_free_pages</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, &amp;<a class=\"id\" href=\"#sc\">sc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_clear_current_reclaim_state\">lockdep_clear_current_reclaim_state</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIBERNATION */</span>", 
"", 
"<span class=\"comment\">/* It's optimal to keep kswapds on the same CPUs as their memory, but</span>", 
"<span class=\"comment\">   not required for correctness.  So if the last cpu in a node goes</span>", 
"<span class=\"comment\">   away, we get changed to run anywhere: as the first one comes back,</span>", 
"<span class=\"comment\">   restore their cpu bindings. */</span>", 
"static int <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#cpu_callback\">cpu_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a> || <a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_ONLINE_FROZEN\">CPU_ONLINE_FROZEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_any_and\">cpumask_any_and</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#mask\">mask</a>) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* One of our CPUs online: restore mask */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd\">kswapd</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This kswapd start function will be called by init and node-hot-add.</span>", 
"<span class=\"comment\"> * On node-hot-add, kswapd will moved to proper cpus if cpus are hot-added.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kswapd_run\">kswapd_run</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd\">kswapd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd\">kswapd</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#kswapd\">kswapd</a>, <a class=\"id\" href=\"#pgdat\">pgdat</a>, \"kswapd%d\", <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd\">kswapd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* failure at boot is fatal */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Failed to start kswapd on node %d\\n\",<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called by memory hotplug when all memory in a node is offlined.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kswapd_stop\">kswapd_stop</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#kswapd\">kswapd</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#kswapd\">kswapd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kswapd\">kswapd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#kswapd\">kswapd</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kswapd_init\">kswapd_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_setup\">swap_setup</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>)", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kswapd_run\">kswapd_run</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#cpu_callback\">cpu_callback</a>, 0);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#kswapd_init\">kswapd_init</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Zone reclaim mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If non-zero call zone_reclaim when the number of free pages falls below</span>", 
"<span class=\"comment\"> * the watermarks.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#zone_reclaim_mode\">zone_reclaim_mode</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RECLAIM_OFF\">RECLAIM_OFF</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RECLAIM_ZONE\">RECLAIM_ZONE</a> (1<<0)<span class=\"ts\"/><span class=\"comment\">/* Run shrink_inactive_list on the zone */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RECLAIM_WRITE\">RECLAIM_WRITE</a> (1<<1)<span class=\"ts\"/><span class=\"comment\">/* Writeout pages during reclaim */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RECLAIM_SWAP\">RECLAIM_SWAP</a> (1<<2)<span class=\"ts\"/><span class=\"comment\">/* Swap pages out during reclaim */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Priority for ZONE_RECLAIM. This determines the fraction of pages</span>", 
"<span class=\"comment\"> * of a node considered for each zone_reclaim. 4 scans 1/16th of</span>", 
"<span class=\"comment\"> * a zone.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONE_RECLAIM_PRIORITY\">ZONE_RECLAIM_PRIORITY</a> 4", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Percentage of pages in a zone that must be unmapped for zone_reclaim to</span>", 
"<span class=\"comment\"> * occur.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sysctl_min_unmapped_ratio\">sysctl_min_unmapped_ratio</a> = 1;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the number of slab pages in a zone grows beyond this percentage then</span>", 
"<span class=\"comment\"> * slab reclaim needs to occur.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sysctl_min_slab_ratio\">sysctl_min_slab_ratio</a> = 5;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#zone_unmapped_file_pages\">zone_unmapped_file_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#file_mapped\">file_mapped</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FILE_MAPPED\">NR_FILE_MAPPED</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#file_lru\">file_lru</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_FILE\">NR_ACTIVE_FILE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's possible for there to be more file mapped pages than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * accounted for by the pages on the file LRU lists because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tmpfs pages accounted for as ANON can also be FILE_MAPPED</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#file_lru\">file_lru</a> &gt; <a class=\"id\" href=\"#file_mapped\">file_mapped</a>) ? (<a class=\"id\" href=\"#file_lru\">file_lru</a> - <a class=\"id\" href=\"#file_mapped\">file_mapped</a>) : 0;", 
"}", 
"", 
"<span class=\"comment\">/* Work out how many page cache pages we can reclaim in this reclaim_mode */</span>", 
"static long <a class=\"id\" href=\"#zone_pagecache_reclaimable\">zone_pagecache_reclaimable</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nr_pagecache_reclaimable\">nr_pagecache_reclaimable</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If RECLAIM_SWAP is set, then all file pages are considered</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * potentially reclaimable. Otherwise, we have to worry about</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages like swapcache and zone_unmapped_file_pages() provides</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a better estimate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_reclaim_mode\">zone_reclaim_mode</a> &amp; <a class=\"id\" href=\"#RECLAIM_SWAP\">RECLAIM_SWAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pagecache_reclaimable\">nr_pagecache_reclaimable</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FILE_PAGES\">NR_FILE_PAGES</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pagecache_reclaimable\">nr_pagecache_reclaimable</a> = <a class=\"id\" href=\"#zone_unmapped_file_pages\">zone_unmapped_file_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we can't clean pages, remove dirty pages from consideration */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#zone_reclaim_mode\">zone_reclaim_mode</a> &amp; <a class=\"id\" href=\"#RECLAIM_WRITE\">RECLAIM_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> += <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Watch for any possible underflows due to delta */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#nr_pagecache_reclaimable\">nr_pagecache_reclaimable</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#nr_pagecache_reclaimable\">nr_pagecache_reclaimable</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_pagecache_reclaimable\">nr_pagecache_reclaimable</a> - <a class=\"id\" href=\"#delta\">delta</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to free up some pages from this zone through reclaim.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__zone_reclaim\">__zone_reclaim</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Minimum pages needed in order to stay on node */</span>", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#priority\">priority</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scan_control\">scan_control</a> <a class=\"id\" href=\"#sc\">sc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_writepage\">may_writepage</a> = !!(<a class=\"id\" href=\"#zone_reclaim_mode\">zone_reclaim_mode</a> &amp; <a class=\"id\" href=\"#RECLAIM_WRITE\">RECLAIM_WRITE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_unmap\">may_unmap</a> = !!(<a class=\"id\" href=\"#zone_reclaim_mode\">zone_reclaim_mode</a> &amp; <a class=\"id\" href=\"#RECLAIM_SWAP\">RECLAIM_SWAP</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#may_swap\">may_swap</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_reclaim\">nr_to_reclaim</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(unsigned long, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SWAP_CLUSTER_MAX\">SWAP_CLUSTER_MAX</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#swappiness\">swappiness</a> = <a class=\"id\" href=\"#vm_swappiness\">vm_swappiness</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_slab_pages0\">nr_slab_pages0</a>, <a class=\"id\" href=\"#nr_slab_pages1\">nr_slab_pages1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to be able to allocate from the reserves for RECLAIM_SWAP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and we also need to be able to write out pages for RECLAIM_WRITE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and RECLAIM_SWAP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a> | <a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_current_reclaim_state\">lockdep_set_current_reclaim_state</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>.<a class=\"id\" href=\"#reclaimed_slab\">reclaimed_slab</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = &amp;<a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_pagecache_reclaimable\">zone_pagecache_reclaimable</a>(<a class=\"id\" href=\"#zone\">zone</a>) &gt; <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#min_unmapped_pages\">min_unmapped_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Free memory by calling shrink zone with increasing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * priorities until we have enough memory freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priority\">priority</a> = <a class=\"id\" href=\"#ZONE_RECLAIM_PRIORITY\">ZONE_RECLAIM_PRIORITY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_zone\">shrink_zone</a>(<a class=\"id\" href=\"#priority\">priority</a>, <a class=\"id\" href=\"#zone\">zone</a>, &amp;<a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priority\">priority</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#priority\">priority</a> >= 0 && <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_slab_pages0\">nr_slab_pages0</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_slab_pages0\">nr_slab_pages0</a> &gt; <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#min_slab_pages\">min_slab_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * shrink_slab() does not currently allow us to determine how</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * many pages were freed in this zone. So we take the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * number of slab pages and shake the slab until it is reduced</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by the same nr_pages that we used for reclaiming unmapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note that shrink_slab will free memory on all zones and may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * take a long time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lru_pages\">lru_pages</a> = <a class=\"id\" href=\"#zone_reclaimable_pages\">zone_reclaimable_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No reclaimable slab or very low memory pressure */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#shrink_slab\">shrink_slab</a>(<a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#lru_pages\">lru_pages</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Freed enough memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_slab_pages1\">nr_slab_pages1</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_slab_pages1\">nr_slab_pages1</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a> <= <a class=\"id\" href=\"#nr_slab_pages0\">nr_slab_pages0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Update nr_reclaimed by the number of slab pages we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reclaimed from this zone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_slab_pages1\">nr_slab_pages1</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_slab_pages1\">nr_slab_pages1</a> &lt; <a class=\"id\" href=\"#nr_slab_pages0\">nr_slab_pages0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> += <a class=\"id\" href=\"#nr_slab_pages0\">nr_slab_pages0</a> - <a class=\"id\" href=\"#nr_slab_pages1\">nr_slab_pages1</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a> | <a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_clear_current_reclaim_state\">lockdep_clear_current_reclaim_state</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sc\">sc</a>.<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> >= <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#zone_reclaim\">zone_reclaim</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node_id\">node_id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Zone reclaim reclaims unmapped file backed pages and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slab pages if we are over the defined limits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A small portion of unmapped file backed pages is needed for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * file I/O otherwise pages read by file I/O will be immediately</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thrown out if the zone is overallocated. So we do not reclaim</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if less than a specified percentage of the zone is used by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unmapped file backed pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_pagecache_reclaimable\">zone_pagecache_reclaimable</a>(<a class=\"id\" href=\"#zone\">zone</a>) <= <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#min_unmapped_pages\">min_unmapped_pages</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>) <= <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#min_slab_pages\">min_slab_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZONE_RECLAIM_FULL\">ZONE_RECLAIM_FULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZONE_RECLAIM_FULL\">ZONE_RECLAIM_FULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not scan if the allocation should not be delayed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>) || (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZONE_RECLAIM_NOSCAN\">ZONE_RECLAIM_NOSCAN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only run zone reclaim on the local zone or on zones that do not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have associated processors. This will favor the local processor</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * over remote processors and spread off node memory allocations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as wide as possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_id\">node_id</a> = <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node_state\">node_state</a>(<a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#N_CPU\">N_CPU</a>) && <a class=\"id\" href=\"#node_id\">node_id</a> != <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZONE_RECLAIM_NOSCAN\">ZONE_RECLAIM_NOSCAN</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_test_and_set_flag\">zone_test_and_set_flag</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#ZONE_RECLAIM_LOCKED\">ZONE_RECLAIM_LOCKED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZONE_RECLAIM_NOSCAN\">ZONE_RECLAIM_NOSCAN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__zone_reclaim\">__zone_reclaim</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_clear_flag\">zone_clear_flag</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#ZONE_RECLAIM_LOCKED\">ZONE_RECLAIM_LOCKED</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#PGSCAN_ZONE_RECLAIM_FAILED\">PGSCAN_ZONE_RECLAIM_FAILED</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * page_evictable - test whether a page is evictable</span>", 
"<span class=\"comment\"> * @page: the page to test</span>", 
"<span class=\"comment\"> * @vma: the VMA in which the page is or will be mapped, may be NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test whether page is evictable--i.e., should be placed on active/inactive</span>", 
"<span class=\"comment\"> * lists vs unevictable list.  The vma argument is !NULL when called from the</span>", 
"<span class=\"comment\"> * fault path to determine how to instantate a new page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reasons page might not be evictable:</span>", 
"<span class=\"comment\"> * (1) page's mapping marked unevictable</span>", 
"<span class=\"comment\"> * (2) page is part of an mlocked VMA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#page_evictable\">page_evictable</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping_unevictable\">mapping_unevictable</a>(<a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageMlocked\">PageMlocked</a>(<a class=\"id\" href=\"#page\">page</a>) || (<a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#is_mlocked_vma\">is_mlocked_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * check_move_unevictable_page - check page for evictability and move to appropriate zone lru list</span>", 
"<span class=\"comment\"> * @page: page to check evictability and move to appropriate lru list</span>", 
"<span class=\"comment\"> * @zone: zone page is in</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Checks a page for evictability and moves the page to the appropriate</span>", 
"<span class=\"comment\"> * zone lru list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Restrictions: zone-&gt;lru_lock must be held, page must be on LRU and must</span>", 
"<span class=\"comment\"> * have PageUnevictable set.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#check_move_unevictable_page\">check_move_unevictable_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageActive\">PageActive</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageUnevictable\">ClearPageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_evictable\">page_evictable</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#page_lru_base_type\">page_lru_base_type</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_state\">__dec_zone_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_UNEVICTABLE\">NR_UNEVICTABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru\">lru</a>[<a class=\"id\" href=\"#l\">l</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_move_lists\">mem_cgroup_move_lists</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#LRU_UNEVICTABLE\">LRU_UNEVICTABLE</a>, <a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_ANON\">NR_INACTIVE_ANON</a> + <a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_event\">__count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGRESCUED\">UNEVICTABLE_PGRESCUED</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rotate unevictable list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUnevictable\">SetPageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru\">lru</a>[<a class=\"id\" href=\"#LRU_UNEVICTABLE\">LRU_UNEVICTABLE</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_rotate_lru_list\">mem_cgroup_rotate_lru_list</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#LRU_UNEVICTABLE\">LRU_UNEVICTABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_evictable\">page_evictable</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scan_mapping_unevictable_pages - scan an address space for evictable pages</span>", 
"<span class=\"comment\"> * @mapping: struct address_space to scan for evictable pages</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Scan all pages in mapping.  Check unevictable pages for</span>", 
"<span class=\"comment\"> * evictability and move them to the appropriate zone lru list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scan_mapping_unevictable_pages\">scan_mapping_unevictable_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#next\">next</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#end\">end</a>   = (<a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>) + <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1) >>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pagevec\">pagevec</a> <a class=\"id\" href=\"#pvec\">pvec</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#nrpages\">nrpages</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagevec_init\">pagevec_init</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, 0);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a> &lt; <a class=\"id\" href=\"#end\">end</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagevec_lookup\">pagevec_lookup</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#PAGEVEC_SIZE\">PAGEVEC_SIZE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#pg_scanned\">pg_scanned</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pagevec_count\">pagevec_count</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pvec\">pvec</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#page_index\">page_index</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#pagezone\">pagezone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg_scanned\">pg_scanned</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_index\">page_index</a> &gt; <a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#page_index\">page_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pagezone\">pagezone</a> != <a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#pagezone\">pagezone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#PageUnevictable\">PageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_move_unevictable_page\">check_move_unevictable_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagevec_release\">pagevec_release</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_events\">count_vm_events</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGSCANNED\">UNEVICTABLE_PGSCANNED</a>, <a class=\"id\" href=\"#pg_scanned\">pg_scanned</a>);", 
"<span class=\"ts\"/>}", 
"", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scan_zone_unevictable_pages - check unevictable list for evictable pages</span>", 
"<span class=\"comment\"> * @zone - zone of which to scan the unevictable list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Scan @zone's unevictable LRU lists to check for pages that have become</span>", 
"<span class=\"comment\"> * evictable.  Move those that have to @zone's inactive list where they</span>", 
"<span class=\"comment\"> * become candidates for reclaim, unless shrink_inactive_zone() decides</span>", 
"<span class=\"comment\"> * to reactivate them.  Pages that are still unevictable are rotated</span>", 
"<span class=\"comment\"> * back onto @zone's unevictable list.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCAN_UNEVICTABLE_BATCH_SIZE\">SCAN_UNEVICTABLE_BATCH_SIZE</a> 16UL <span class=\"comment\">/* arbitrary lock hold batch size */</span>", 
"static void <a class=\"id\" href=\"#scan_zone_unevictable_pages\">scan_zone_unevictable_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l_unevictable\">l_unevictable</a> = &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru\">lru</a>[<a class=\"id\" href=\"#LRU_UNEVICTABLE\">LRU_UNEVICTABLE</a>].<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#scan\">scan</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_UNEVICTABLE\">NR_UNEVICTABLE</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#batch_size\">batch_size</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCAN_UNEVICTABLE_BATCH_SIZE\">SCAN_UNEVICTABLE_BATCH_SIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#scan\">scan</a> = 0;  <a class=\"id\" href=\"#scan\">scan</a> &lt; <a class=\"id\" href=\"#batch_size\">batch_size</a>; <a class=\"id\" href=\"#scan\">scan</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#lru_to_page\">lru_to_page</a>(<a class=\"id\" href=\"#l_unevictable\">l_unevictable</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetchw_prev_lru_page\">prefetchw_prev_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#l_unevictable\">l_unevictable</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#PageUnevictable\">PageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_move_unevictable_page\">check_move_unevictable_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a> -= <a class=\"id\" href=\"#batch_size\">batch_size</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scan_all_zones_unevictable_pages - scan all unevictable lists for evictable pages</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A really big hammer:  scan all zones' unevictable LRU lists to check for</span>", 
"<span class=\"comment\"> * pages that have become evictable.  Move those back to the zones'</span>", 
"<span class=\"comment\"> * inactive list where they become candidates for reclaim.</span>", 
"<span class=\"comment\"> * This occurs when, e.g., we have unswappable pages on the unevictable lists,</span>", 
"<span class=\"comment\"> * and we add swap to the system.  As such, it runs in the context of a task</span>", 
"<span class=\"comment\"> * that has possibly/probably made some previously unevictable pages</span>", 
"<span class=\"comment\"> * evictable.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scan_all_zones_unevictable_pages\">scan_all_zones_unevictable_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone\">for_each_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan_zone_unevictable_pages\">scan_zone_unevictable_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * scan_unevictable_pages [vm] sysctl handler.  On demand re-scan of</span>", 
"<span class=\"comment\"> * all nodes' unevictable lists for evictable pages</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#scan_unevictable_pages\">scan_unevictable_pages</a>;", 
"", 
"int <a class=\"id\" href=\"#scan_unevictable_handler\">scan_unevictable_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a> && *(unsigned long *)<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan_all_zones_unevictable_pages\">scan_all_zones_unevictable_pages</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scan_unevictable_pages\">scan_unevictable_pages</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * per node 'scan_unevictable_pages' attribute.  On demand re-scan of</span>", 
"<span class=\"comment\"> * a specified node's per zone unevictable lists for evictable pages.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#read_scan_unevictable_node\">read_scan_unevictable_node</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sysdev_attribute\">sysdev_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"0\\n\");<span class=\"ts\"/><span class=\"comment\">/* always zero; should fit... */</span>", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#write_scan_unevictable_node\">write_scan_unevictable_node</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sysdev_attribute\">sysdev_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#node_zones\">node_zones</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>)-><a class=\"id\" href=\"#node_zones\">node_zones</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, 10, &amp;<a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#req\">req</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;<span class=\"ts\"/><span class=\"comment\">/* zero is no-op */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#node_zones\">node_zones</a>; <a class=\"id\" href=\"#zone\">zone</a> - <a class=\"id\" href=\"#node_zones\">node_zones</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; ++<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan_zone_unevictable_pages\">scan_zone_unevictable_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#SYSDEV_ATTR\">SYSDEV_ATTR</a>(<a class=\"id\" href=\"#scan_unevictable_pages\">scan_unevictable_pages</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_scan_unevictable_node\">read_scan_unevictable_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_scan_unevictable_node\">write_scan_unevictable_node</a>);", 
"", 
"int <a class=\"id\" href=\"#scan_unevictable_register_node\">scan_unevictable_register_node</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysdev_create_file\">sysdev_create_file</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>, &amp;<a class=\"id\" href=\"#attr_scan_unevictable_pages\">attr_scan_unevictable_pages</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#scan_unevictable_unregister_node\">scan_unevictable_unregister_node</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev_remove_file\">sysdev_remove_file</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>, &amp;<a class=\"id\" href=\"#attr_scan_unevictable_pages\">attr_scan_unevictable_pages</a>);", 
"}", 
"", 
];
xr_frag_insert('l/e7/a357dd8a965c9ca4e3652983aaf194e0c3fdca.xr', __xr_tmp);
