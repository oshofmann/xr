var __xr_tmp = [
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tag_map\">tag_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tags\">tags</a>-><a class=\"id\" href=\"#real_max_depth\">real_max_depth</a> = <a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tags\">tags</a>-><a class=\"id\" href=\"#max_depth\">max_depth</a> = <a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tags\">tags</a>-><a class=\"id\" href=\"#tag_index\">tag_index</a> = <a class=\"id\" href=\"#tag_index\">tag_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tags\">tags</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a> = <a class=\"id\" href=\"#tag_map\">tag_map</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tag_index\">tag_index</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#__blk_queue_init_tags\">__blk_queue_init_tags</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#tags\">tags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tags\">tags</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tags\">tags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#init_tag_map\">init_tag_map</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#tags\">tags</a>, <a class=\"id\" href=\"#depth\">depth</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#tags\">tags</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tags\">tags</a>;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tags\">tags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_init_tags - initialize the tag info for an external tag map</span>", 
"<span class=\"comment\"> * @depth:<span class=\"ts\"/>the maximum queue depth supported</span>", 
"<span class=\"comment\"> **/</span>", 
"struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#blk_init_tags\">blk_init_tags</a>(int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__blk_queue_init_tags\">__blk_queue_init_tags</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#depth\">depth</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_init_tags\">blk_init_tags</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_init_tags - initialize the queue tag info</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @depth:  the maximum queue depth supported</span>", 
"<span class=\"comment\"> * @tags: the tag to use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Queue lock must be held here if the function is called to resize an</span>", 
"<span class=\"comment\"> * existing map.</span>", 
"<span class=\"comment\"> **/</span>", 
"int <a class=\"id\" href=\"#blk_queue_init_tags\">blk_queue_init_tags</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#depth\">depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#tags\">tags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#tags\">tags</a> && <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a> && <a class=\"id\" href=\"#tags\">tags</a> != <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tags\">tags</a> && !<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tags\">tags</a> = <a class=\"id\" href=\"#__blk_queue_init_tags\">__blk_queue_init_tags</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#depth\">depth</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tags\">tags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#blk_queue_resize_tags\">blk_queue_resize_tags</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set\">queue_flag_set</a>(<a class=\"id\" href=\"#QUEUE_FLAG_QUEUED\">QUEUE_FLAG_QUEUED</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#tags\">tags</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * assign it, all done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a> = <a class=\"id\" href=\"#tags\">tags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set_unlocked\">queue_flag_set_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_QUEUED\">QUEUE_FLAG_QUEUED</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#tag_busy_list\">tag_busy_list</a>);", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tags\">tags</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_init_tags\">blk_queue_init_tags</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_resize_tags - change the queueing depth</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @new_depth: the new max command queueing depth</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Notes:</span>", 
"<span class=\"comment\"> *    Must be called with the queue lock held.</span>", 
"<span class=\"comment\"> **/</span>", 
"int <a class=\"id\" href=\"#blk_queue_resize_tags\">blk_queue_resize_tags</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#new_depth\">new_depth</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#bqt\">bqt</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> **<a class=\"id\" href=\"#tag_index\">tag_index</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#tag_map\">tag_map</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_depth\">max_depth</a>, <a class=\"id\" href=\"#nr_ulongs\">nr_ulongs</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bqt\">bqt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we already have large enough real_max_depth.  just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * adjust max_depth.  *NOTE* as requests with tag value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * between new_depth and real_max_depth can be in-flight, tag</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * map can not be shrunk blindly here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_depth\">new_depth</a> <= <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#real_max_depth\">real_max_depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#max_depth\">max_depth</a> = <a class=\"id\" href=\"#new_depth\">new_depth</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Currently cannot replace a shared tag map with a new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one, so error out if this is the case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * save the old state info, so we can copy it back</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tag_index\">tag_index</a> = <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_index\">tag_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tag_map\">tag_map</a> = <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_depth\">max_depth</a> = <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#real_max_depth\">real_max_depth</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#init_tag_map\">init_tag_map</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bqt\">bqt</a>, <a class=\"id\" href=\"#new_depth\">new_depth</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_index\">tag_index</a>, <a class=\"id\" href=\"#tag_index\">tag_index</a>, <a class=\"id\" href=\"#max_depth\">max_depth</a> * sizeof(struct <a class=\"id\" href=\"#request\">request</a> *));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_ulongs\">nr_ulongs</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#max_depth\">max_depth</a>, <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>) / <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a>, <a class=\"id\" href=\"#tag_map\">tag_map</a>, <a class=\"id\" href=\"#nr_ulongs\">nr_ulongs</a> * sizeof(unsigned long));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tag_index\">tag_index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tag_map\">tag_map</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_resize_tags\">blk_queue_resize_tags</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_end_tag - end tag operations for a request</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @rq: the request that has completed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Description:</span>", 
"<span class=\"comment\"> *    Typically called when end_that_request_first() returns %0, meaning</span>", 
"<span class=\"comment\"> *    all transfers have been done for a request. It's important to call</span>", 
"<span class=\"comment\"> *    this function before end_that_request_last(), as that will put the</span>", 
"<span class=\"comment\"> *    request back on the free list thus corrupting the internal tag list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Notes:</span>", 
"<span class=\"comment\"> *   queue lock must be held.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_end_tag\">blk_queue_end_tag</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#bqt\">bqt</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#tag\">tag</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#tag\">tag</a> == -1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tag\">tag</a> >= <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#real_max_depth\">real_max_depth</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This can happen after tag depth has been reduced.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * FIXME: how about a warning or info message here?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#queuelist\">queuelist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &= ~<a class=\"id\" href=\"#REQ_QUEUED\">REQ_QUEUED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#tag\">tag</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_index\">tag_index</a>[<a class=\"id\" href=\"#tag\">tag</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: tag %d is missing\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_index\">tag_index</a>[<a class=\"id\" href=\"#tag\">tag</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: attempt to clear non-busy tag (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The tag_map bit acts as a lock for tag_index[bit], so we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unlock memory barrier semantics.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit_unlock\">clear_bit_unlock</a>(<a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_end_tag\">blk_queue_end_tag</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_start_tag - find a free tag and assign it</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @rq:  the block request that needs tagging</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Description:</span>", 
"<span class=\"comment\"> *    This can either be used as a stand-alone helper, or possibly be</span>", 
"<span class=\"comment\"> *    assigned as the queue &amp;prep_rq_fn (in which case &amp;struct request</span>", 
"<span class=\"comment\"> *    automagically gets a tag assigned). Note that this function</span>", 
"<span class=\"comment\"> *    assumes that any type of request can be queued! if this is not</span>", 
"<span class=\"comment\"> *    true for your device, you must check the request type before</span>", 
"<span class=\"comment\"> *    calling this function.  The request will also be removed from</span>", 
"<span class=\"comment\"> *    the request queue, so it's the drivers responsibility to readd</span>", 
"<span class=\"comment\"> *    it if it should need to be restarted for some reason.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Notes:</span>", 
"<span class=\"comment\"> *   queue lock must be held.</span>", 
"<span class=\"comment\"> **/</span>", 
"int <a class=\"id\" href=\"#blk_queue_start_tag\">blk_queue_start_tag</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#bqt\">bqt</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#max_depth\">max_depth</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tag\">tag</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_QUEUED\">REQ_QUEUED</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"%s: request %p for device [%s] already tagged %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a> ? <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a> : \"?\", <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protect against shared tag maps, as we may not have exclusive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * access to the tag map.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We reserve a few tags just for sync IO, since we don't want</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to starve sync IO on behalf of flooding async IO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_depth\">max_depth</a> = <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#max_depth\">max_depth</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq\">rq</a>) && <a class=\"id\" href=\"#max_depth\">max_depth</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_depth\">max_depth</a> -= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#max_depth\">max_depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_depth\">max_depth</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#in_flight\">in_flight</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>] &gt; <a class=\"id\" href=\"#max_depth\">max_depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#find_first_zero_bit\">find_first_zero_bit</a>(<a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a>, <a class=\"id\" href=\"#max_depth\">max_depth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tag\">tag</a> >= <a class=\"id\" href=\"#max_depth\">max_depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#test_and_set_bit_lock\">test_and_set_bit_lock</a>(<a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need lock ordering semantics given by test_and_set_bit_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See blk_queue_end_tag for details.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_QUEUED\">REQ_QUEUED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#tag\">tag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_index\">tag_index</a>[<a class=\"id\" href=\"#tag\">tag</a>] = <a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_start_request\">blk_start_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#queuelist\">queuelist</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#tag_busy_list\">tag_busy_list</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_start_tag\">blk_queue_start_tag</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_invalidate_tags - invalidate all pending tags</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Description:</span>", 
"<span class=\"comment\"> *   Hardware conditions may dictate a need to stop all pending requests.</span>", 
"<span class=\"comment\"> *   In this case, we will safely clear the block side of the tag queue and</span>", 
"<span class=\"comment\"> *   readd all requests to the request queue in the right order.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Notes:</span>", 
"<span class=\"comment\"> *   queue lock must be held.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_invalidate_tags\">blk_queue_invalidate_tags</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#tag_busy_list\">tag_busy_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_requeue_request\">blk_requeue_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#list_entry_rq\">list_entry_rq</a>(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_invalidate_tags\">blk_queue_invalidate_tags</a>);", 
];
xr_frag_insert('l/e8/17619b70cb4b773f5af5bb06fc288319cfea84.xr', __xr_tmp);
