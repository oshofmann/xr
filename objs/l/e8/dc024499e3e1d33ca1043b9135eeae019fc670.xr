var __xr_tmp = [
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Leading and trailing whitespaces are removed.</span>", 
"<span class=\"comment\"> * Multiple whitespaces are packed into single space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tomoyo_normalize_line\">tomoyo_normalize_line</a>(unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tomoyo_invalid\">tomoyo_invalid</a>(*<a class=\"id\" href=\"#sp\">sp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>++;", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#sp\">sp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dp\">dp</a>++ = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#tomoyo_valid\">tomoyo_valid</a>(*<a class=\"id\" href=\"#sp\">sp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dp\">dp</a>++ = *<a class=\"id\" href=\"#sp\">sp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#tomoyo_invalid\">tomoyo_invalid</a>(*<a class=\"id\" href=\"#sp\">sp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dp\">dp</a> = '\\0';", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_tokenize - Tokenize string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @buffer: The line to tokenize.</span>", 
"<span class=\"comment\"> * @w:      Pointer to \"char *\".</span>", 
"<span class=\"comment\"> * @size:   Sizeof @w .</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true on success, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_tokenize\">tomoyo_tokenize</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, char *<a class=\"id\" href=\"#w\">w</a>[], <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#size\">size</a> / sizeof(char *);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a>[<a class=\"id\" href=\"#i\">i</a>] = \"\";", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, ' ');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#cp\">cp</a> + 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a> || !*<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_correct_word2 - Validate a string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @string: The string to check. May be non-'\\0'-terminated.</span>", 
"<span class=\"comment\"> * @len:    Length of @string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check whether the given string follows the naming rules.</span>", 
"<span class=\"comment\"> * Returns true if @string follows the naming rules, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_correct_word2\">tomoyo_correct_word2</a>(const char *<a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>const char *const <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#string\">string</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#in_repetition\">in_repetition</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#e\">e</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#string\">string</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == '\\\\') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#string\">string</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#c\">c</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '\\\\':  <span class=\"comment\">/* \"\\\\\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '$':   <span class=\"comment\">/* \"\\$\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '+':   <span class=\"comment\">/* \"\\+\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '?':   <span class=\"comment\">/* \"\\?\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '*':   <span class=\"comment\">/* \"\\*\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '@':   <span class=\"comment\">/* \"\\@\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'x':   <span class=\"comment\">/* \"\\x\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'X':   <span class=\"comment\">/* \"\\X\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'a':   <span class=\"comment\">/* \"\\a\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'A':   <span class=\"comment\">/* \"\\A\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '-':   <span class=\"comment\">/* \"\\-\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '{':   <span class=\"comment\">/* \"/\\{\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#string\">string</a> - 3 &lt; <a class=\"id\" href=\"#start\">start</a> || *(<a class=\"id\" href=\"#string\">string</a> - 3) != '/')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_repetition\">in_repetition</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '}':   <span class=\"comment\">/* \"\\}/\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#string\">string</a> != '/')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_repetition\">in_repetition</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_repetition\">in_repetition</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '0':   <span class=\"comment\">/* \"\\ooo\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '1':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '2':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '3':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>-- || !<a class=\"id\" href=\"#len\">len</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = *<a class=\"id\" href=\"#string\">string</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = *<a class=\"id\" href=\"#string\">string</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a> &lt; '0' || <a class=\"id\" href=\"#d\">d</a> &gt; '7' || <a class=\"id\" href=\"#e\">e</a> &lt; '0' || <a class=\"id\" href=\"#e\">e</a> &gt; '7')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#tomoyo_make_byte\">tomoyo_make_byte</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#e\">e</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tomoyo_invalid\">tomoyo_invalid</a>(<a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue; <span class=\"comment\">/* pattern is not \\000 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#in_repetition\">in_repetition</a> && <a class=\"id\" href=\"#c\">c</a> == '/') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#tomoyo_invalid\">tomoyo_invalid</a>(<a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_repetition\">in_repetition</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_correct_word - Validate a string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @string: The string to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check whether the given string follows the naming rules.</span>", 
"<span class=\"comment\"> * Returns true if @string follows the naming rules, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_correct_word\">tomoyo_correct_word</a>(const char *<a class=\"id\" href=\"#string\">string</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tomoyo_correct_word2\">tomoyo_correct_word2</a>(<a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#string\">string</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_correct_path - Validate a pathname.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @filename: The pathname to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check whether the given pathname follows the naming rules.</span>", 
"<span class=\"comment\"> * Returns true if @filename follows the naming rules, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_correct_path\">tomoyo_correct_path</a>(const char *<a class=\"id\" href=\"#filename\">filename</a>)", 
"{", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#filename\">filename</a> == '/' && <a class=\"id\" href=\"#tomoyo_correct_word\">tomoyo_correct_word</a>(<a class=\"id\" href=\"#filename\">filename</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_correct_domain - Check whether the given domainname follows the naming rules.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @domainname: The domainname to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @domainname follows the naming rules, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_correct_domain\">tomoyo_correct_domain</a>(const unsigned char *<a class=\"id\" href=\"#domainname\">domainname</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domainname\">domainname</a> || <a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#domainname\">domainname</a>, <a class=\"id\" href=\"#TOMOYO_ROOT_NAME\">TOMOYO_ROOT_NAME</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#TOMOYO_ROOT_NAME_LEN\">TOMOYO_ROOT_NAME_LEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domainname\">domainname</a> += <a class=\"id\" href=\"#TOMOYO_ROOT_NAME_LEN\">TOMOYO_ROOT_NAME_LEN</a>;", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#domainname\">domainname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#domainname\">domainname</a>++ != ' ')", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#domainname\">domainname</a>, ' ');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#domainname\">domainname</a> != '/' ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#tomoyo_correct_word2\">tomoyo_correct_word2</a>(<a class=\"id\" href=\"#domainname\">domainname</a>, <a class=\"id\" href=\"#cp\">cp</a> - <a class=\"id\" href=\"#domainname\">domainname</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domainname\">domainname</a> = <a class=\"id\" href=\"#cp\">cp</a> + 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tomoyo_correct_path\">tomoyo_correct_path</a>(<a class=\"id\" href=\"#domainname\">domainname</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_domain_def - Check whether the given token can be a domainname.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @buffer: The token to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @buffer possibly be a domainname, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_domain_def\">tomoyo_domain_def</a>(const unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#TOMOYO_ROOT_NAME\">TOMOYO_ROOT_NAME</a>, <a class=\"id\" href=\"#TOMOYO_ROOT_NAME_LEN\">TOMOYO_ROOT_NAME_LEN</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_find_domain - Find a domain by the given name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @domainname: The domainname to find.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns pointer to \"struct tomoyo_domain_info\" if found, NULL otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller holds tomoyo_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#tomoyo_find_domain\">tomoyo_find_domain</a>(const char *<a class=\"id\" href=\"#domainname\">domainname</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> <a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#domainname\">domainname</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_fill_path_info\">tomoyo_fill_path_info</a>(&amp;<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#domain\">domain</a>, &amp;<a class=\"id\" href=\"#tomoyo_domain_list\">tomoyo_domain_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#is_deleted\">is_deleted</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#tomoyo_pathcmp\">tomoyo_pathcmp</a>(&amp;<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#domainname\">domainname</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_const_part_length - Evaluate the initial length without a pattern in a token.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @filename: The string to evaluate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the initial length without a pattern in @filename.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tomoyo_const_part_length\">tomoyo_const_part_length</a>(const char *<a class=\"id\" href=\"#filename\">filename</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filename\">filename</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#filename\">filename</a>++) != '\\0') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> != '\\\\') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#filename\">filename</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#c\">c</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case '\\\\':  <span class=\"comment\">/* \"\\\\\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>case '0':   <span class=\"comment\">/* \"\\ooo\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case '1':", 
"<span class=\"ts\"/><span class=\"ts\"/>case '2':", 
"<span class=\"ts\"/><span class=\"ts\"/>case '3':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#filename\">filename</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> &lt; '0' || <a class=\"id\" href=\"#c\">c</a> &gt; '7')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#filename\">filename</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> &lt; '0' || <a class=\"id\" href=\"#c\">c</a> &gt; '7')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_fill_path_info - Fill in \"struct tomoyo_path_info\" members.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ptr: Pointer to \"struct tomoyo_path_info\" to fill in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller sets \"struct tomoyo_path_info\"-&gt;name.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tomoyo_fill_path_info\">tomoyo_fill_path_info</a>(struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#const_len\">const_len</a> = <a class=\"id\" href=\"#tomoyo_const_part_length\">tomoyo_const_part_length</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#is_dir\">is_dir</a> = <a class=\"id\" href=\"#len\">len</a> && (<a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#len\">len</a> - 1] == '/');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#is_patterned\">is_patterned</a> = (<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#const_len\">const_len</a> &lt; <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#full_name_hash\">full_name_hash</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_file_matches_pattern2 - Pattern matching without '/' character and \"\\-\" pattern.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @filename:     The start of string to check.</span>", 
"<span class=\"comment\"> * @filename_end: The end of string to check.</span>", 
"<span class=\"comment\"> * @pattern:      The start of pattern to compare.</span>", 
"<span class=\"comment\"> * @pattern_end:  The end of pattern to compare.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @filename matches @pattern, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_file_matches_pattern2\">tomoyo_file_matches_pattern2</a>(const char *<a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#filename_end\">filename_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#pattern\">pattern</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#pattern_end\">pattern_end</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#filename\">filename</a> &lt; <a class=\"id\" href=\"#filename_end\">filename_end</a> && <a class=\"id\" href=\"#pattern\">pattern</a> &lt; <a class=\"id\" href=\"#pattern_end\">pattern_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pattern\">pattern</a> != '\\\\') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#filename\">filename</a>++ != *<a class=\"id\" href=\"#pattern\">pattern</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#filename\">filename</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pattern\">pattern</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (*<a class=\"id\" href=\"#pattern\">pattern</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case '?':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == '/') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#c\">c</a> == '\\\\') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filename\">filename</a>[1] == '\\\\')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filename\">filename</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#tomoyo_byte_range\">tomoyo_byte_range</a>(<a class=\"id\" href=\"#filename\">filename</a> + 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filename\">filename</a> += 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case '\\\\':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> != '\\\\')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*++<a class=\"id\" href=\"#filename\">filename</a> != '\\\\')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case '+':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'x':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isxdigit\">isxdigit</a>(<a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'a':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_alphabet_char\">tomoyo_alphabet_char</a>(<a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case '0':", 
"<span class=\"ts\"/><span class=\"ts\"/>case '1':", 
"<span class=\"ts\"/><span class=\"ts\"/>case '2':", 
"<span class=\"ts\"/><span class=\"ts\"/>case '3':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == '\\\\' && <a class=\"id\" href=\"#tomoyo_byte_range\">tomoyo_byte_range</a>(<a class=\"id\" href=\"#filename\">filename</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#filename\">filename</a> + 1, <a class=\"id\" href=\"#pattern\">pattern</a>, 3) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filename\">filename</a> += 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pattern\">pattern</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>; <span class=\"comment\">/* Not matched. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case '*':", 
"<span class=\"ts\"/><span class=\"ts\"/>case '@':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#filename_end\">filename_end</a> - <a class=\"id\" href=\"#filename\">filename</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tomoyo_file_matches_pattern2\">tomoyo_file_matches_pattern2</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#filename\">filename</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#filename_end\">filename_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pattern\">pattern</a> + 1, <a class=\"id\" href=\"#pattern_end\">pattern_end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#filename\">filename</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == '.' && *<a class=\"id\" href=\"#pattern\">pattern</a> == '@')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> != '\\\\')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filename\">filename</a>[<a class=\"id\" href=\"#i\">i</a> + 1] == '\\\\')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#tomoyo_byte_range\">tomoyo_byte_range</a>(<a class=\"id\" href=\"#filename\">filename</a> + <a class=\"id\" href=\"#i\">i</a> + 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break; <span class=\"comment\">/* Bad pattern. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>; <span class=\"comment\">/* Not matched. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#pattern\">pattern</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == '$') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#filename\">filename</a>[<a class=\"id\" href=\"#j\">j</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#c\">c</a> == 'X') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#isxdigit\">isxdigit</a>(<a class=\"id\" href=\"#filename\">filename</a>[<a class=\"id\" href=\"#j\">j</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#c\">c</a> == 'A') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#tomoyo_alphabet_char\">tomoyo_alphabet_char</a>(<a class=\"id\" href=\"#filename\">filename</a>[<a class=\"id\" href=\"#j\">j</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#j\">j</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tomoyo_file_matches_pattern2\">tomoyo_file_matches_pattern2</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#filename\">filename</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#filename_end\">filename_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pattern\">pattern</a> + 1, <a class=\"id\" href=\"#pattern_end\">pattern_end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>; <span class=\"comment\">/* Not matched or bad pattern. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filename\">filename</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pattern\">pattern</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#pattern\">pattern</a> == '\\\\' &&", 
"<span class=\"ts\"/>       (*(<a class=\"id\" href=\"#pattern\">pattern</a> + 1) == '*' || *(<a class=\"id\" href=\"#pattern\">pattern</a> + 1) == '@'))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pattern\">pattern</a> += 2;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#filename\">filename</a> == <a class=\"id\" href=\"#filename_end\">filename_end</a> && <a class=\"id\" href=\"#pattern\">pattern</a> == <a class=\"id\" href=\"#pattern_end\">pattern_end</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_file_matches_pattern - Pattern matching without '/' character.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @filename:     The start of string to check.</span>", 
"<span class=\"comment\"> * @filename_end: The end of string to check.</span>", 
"<span class=\"comment\"> * @pattern:      The start of pattern to compare.</span>", 
"<span class=\"comment\"> * @pattern_end:  The end of pattern to compare.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @filename matches @pattern, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_file_matches_pattern\">tomoyo_file_matches_pattern</a>(const char *<a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#filename_end\">filename_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#pattern\">pattern</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#pattern_end\">pattern_end</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#pattern_start\">pattern_start</a> = <a class=\"id\" href=\"#pattern\">pattern</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pattern\">pattern</a> &lt; <a class=\"id\" href=\"#pattern_end\">pattern_end</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Split at \"\\-\" pattern. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pattern\">pattern</a>++ != '\\\\' || *<a class=\"id\" href=\"#pattern\">pattern</a>++ != '-')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#tomoyo_file_matches_pattern2\">tomoyo_file_matches_pattern2</a>(<a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#filename_end\">filename_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pattern_start\">pattern_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pattern\">pattern</a> - 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = !<a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pattern_start\">pattern_start</a> = <a class=\"id\" href=\"#pattern\">pattern</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#tomoyo_file_matches_pattern2\">tomoyo_file_matches_pattern2</a>(<a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#filename_end\">filename_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pattern_start\">pattern_start</a>, <a class=\"id\" href=\"#pattern_end\">pattern_end</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#first\">first</a> ? <a class=\"id\" href=\"#result\">result</a> : !<a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_path_matches_pattern2 - Do pathname pattern matching.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @f: The start of string to check.</span>", 
"<span class=\"comment\"> * @p: The start of pattern to compare.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @f matches @p, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_path_matches_pattern2\">tomoyo_path_matches_pattern2</a>(const char *<a class=\"id\" href=\"#f\">f</a>, const char *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#f_delimiter\">f_delimiter</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#p_delimiter\">p_delimiter</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#f\">f</a> && *<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_delimiter\">f_delimiter</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#f\">f</a>, '/');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#f_delimiter\">f_delimiter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_delimiter\">f_delimiter</a> = <a class=\"id\" href=\"#f\">f</a> + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p_delimiter\">p_delimiter</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#p\">p</a>, '/');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p_delimiter\">p_delimiter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p_delimiter\">p_delimiter</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == '\\\\' && *(<a class=\"id\" href=\"#p\">p</a> + 1) == '{')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#recursive\">recursive</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_file_matches_pattern\">tomoyo_file_matches_pattern</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#f_delimiter\">f_delimiter</a>, <a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#p_delimiter\">p_delimiter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#f_delimiter\">f_delimiter</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#f\">f</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p_delimiter\">p_delimiter</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Ignore trailing \"\\*\" and \"\\@\" in @pattern. */</span>", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a> == '\\\\' &&", 
"<span class=\"ts\"/>       (*(<a class=\"id\" href=\"#p\">p</a> + 1) == '*' || *(<a class=\"id\" href=\"#p\">p</a> + 1) == '@'))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 2;", 
"<span class=\"ts\"/>return !*<a class=\"id\" href=\"#f\">f</a> && !*<a class=\"id\" href=\"#p\">p</a>;", 
" <a class=\"id\" href=\"#recursive\">recursive</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The \"\\{\" pattern is permitted only after '/' character.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This guarantees that below \"*(p - 1)\" is safe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also, the \"\\}\" pattern is permitted only before '/' character</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that \"\\{\" + \"\\}\" pair will not break the \"\\-\" operator.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*(<a class=\"id\" href=\"#p\">p</a> - 1) != '/' || <a class=\"id\" href=\"#p_delimiter\">p_delimiter</a> <= <a class=\"id\" href=\"#p\">p</a> + 3 || *<a class=\"id\" href=\"#p_delimiter\">p_delimiter</a> != '/' ||", 
"<span class=\"ts\"/>    *(<a class=\"id\" href=\"#p_delimiter\">p_delimiter</a> - 1) != '}' || *(<a class=\"id\" href=\"#p_delimiter\">p_delimiter</a> - 2) != '\\\\')", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>; <span class=\"comment\">/* Bad pattern. */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Compare current component with pattern. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_file_matches_pattern\">tomoyo_file_matches_pattern</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#f_delimiter\">f_delimiter</a>, <a class=\"id\" href=\"#p\">p</a> + 2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#p_delimiter\">p_delimiter</a> - 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Proceed to next component. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#f_delimiter\">f_delimiter</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#f\">f</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Continue comparison. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tomoyo_path_matches_pattern2\">tomoyo_path_matches_pattern2</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#p_delimiter\">p_delimiter</a> + 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_delimiter\">f_delimiter</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#f\">f</a>, '/');", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#f_delimiter\">f_delimiter</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>; <span class=\"comment\">/* Not matched. */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_path_matches_pattern - Check whether the given filename matches the given pattern.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @filename: The filename to check.</span>", 
"<span class=\"comment\"> * @pattern:  The pattern to compare.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if matches, false otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The following patterns are available.</span>", 
"<span class=\"comment\"> *   \\\\     \\ itself.</span>", 
"<span class=\"comment\"> *   \\ooo   Octal representation of a byte.</span>", 
"<span class=\"comment\"> *   \\*     Zero or more repetitions of characters other than '/'.</span>", 
"<span class=\"comment\"> *   \\@     Zero or more repetitions of characters other than '/' or '.'.</span>", 
"<span class=\"comment\"> *   \\?     1 byte character other than '/'.</span>", 
"<span class=\"comment\"> *   \\$     One or more repetitions of decimal digits.</span>", 
"<span class=\"comment\"> *   \\+     1 decimal digit.</span>", 
"<span class=\"comment\"> *   \\X     One or more repetitions of hexadecimal digits.</span>", 
"<span class=\"comment\"> *   \\x     1 hexadecimal digit.</span>", 
"<span class=\"comment\"> *   \\A     One or more repetitions of alphabet characters.</span>", 
"<span class=\"comment\"> *   \\a     1 alphabet character.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   \\-     Subtraction operator.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   /\\{dir\\}/   '/' + 'One or more repetitions of dir/' (e.g. /dir/ /dir/dir/</span>", 
"<span class=\"comment\"> *               /dir/dir/dir/ ).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_path_matches_pattern\">tomoyo_path_matches_pattern</a>(const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#pattern\">pattern</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#filename\">filename</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pattern\">pattern</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#pattern\">pattern</a>-><a class=\"id\" href=\"#const_len\">const_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If @pattern doesn't contain pattern, I can use strcmp(). */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pattern\">pattern</a>-><a class=\"id\" href=\"#is_patterned\">is_patterned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return !<a class=\"id\" href=\"#tomoyo_pathcmp\">tomoyo_pathcmp</a>(<a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#pattern\">pattern</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't compare directory and non-directory. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filename\">filename</a>-><a class=\"id\" href=\"#is_dir\">is_dir</a> != <a class=\"id\" href=\"#pattern\">pattern</a>-><a class=\"id\" href=\"#is_dir\">is_dir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Compare the initial length without patterns. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tomoyo_path_matches_pattern2\">tomoyo_path_matches_pattern2</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_get_exe - Get tomoyo_realpath() of current process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the tomoyo_realpath() of current process on success, NULL otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function uses kzalloc(), so the caller must call kfree()</span>", 
"<span class=\"comment\"> * if this function didn't return NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"const char *<a class=\"id\" href=\"#tomoyo_get_exe\">tomoyo_get_exe</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#vma\">vma</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXECUTABLE\">VM_EXECUTABLE</a>) && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#tomoyo_realpath_from_path\">tomoyo_realpath_from_path</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cp\">cp</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_get_mode - Get MAC mode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @profile: Profile number.</span>", 
"<span class=\"comment\"> * @index:   Index number of functionality.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns mode.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tomoyo_get_mode\">tomoyo_get_mode</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#profile\">profile</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#category\">category</a> = <a class=\"id\" href=\"#TOMOYO_MAC_CATEGORY_FILE\">TOMOYO_MAC_CATEGORY_FILE</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_policy_loaded\">tomoyo_policy_loaded</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TOMOYO_CONFIG_DISABLED\">TOMOYO_CONFIG_DISABLED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#tomoyo_profile\">tomoyo_profile</a>(<a class=\"id\" href=\"#profile\">profile</a>)-><a class=\"id\" href=\"#config\">config</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TOMOYO_CONFIG_USE_DEFAULT\">TOMOYO_CONFIG_USE_DEFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#tomoyo_profile\">tomoyo_profile</a>(<a class=\"id\" href=\"#profile\">profile</a>)-><a class=\"id\" href=\"#config\">config</a>[<a class=\"id\" href=\"#category\">category</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TOMOYO_CONFIG_USE_DEFAULT\">TOMOYO_CONFIG_USE_DEFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#tomoyo_profile\">tomoyo_profile</a>(<a class=\"id\" href=\"#profile\">profile</a>)-><a class=\"id\" href=\"#default_config\">default_config</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mode\">mode</a> &amp; 3;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_init_request_info - Initialize \"struct tomoyo_request_info\" members.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @r:      Pointer to \"struct tomoyo_request_info\" to initialize.</span>", 
"<span class=\"comment\"> * @domain: Pointer to \"struct tomoyo_domain_info\". NULL for tomoyo_domain().</span>", 
"<span class=\"comment\"> * @index:  Index number of functionality.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns mode.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tomoyo_init_request_info\">tomoyo_init_request_info</a>(struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *<a class=\"id\" href=\"#r\">r</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#profile\">profile</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#r\">r</a>, 0, sizeof(*<a class=\"id\" href=\"#r\">r</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#tomoyo_domain\">tomoyo_domain</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#profile\">profile</a> = <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#profile\">profile</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#profile\">profile</a> = <a class=\"id\" href=\"#profile\">profile</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#tomoyo_get_mode\">tomoyo_get_mode</a>(<a class=\"id\" href=\"#profile\">profile</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_last_word - Get last component of a line.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @line: A line.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the last word of a line.</span>", 
"<span class=\"comment\"> */</span>", 
"const char *<a class=\"id\" href=\"#tomoyo_last_word\">tomoyo_last_word</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#strrchr\">strrchr</a>(<a class=\"id\" href=\"#name\">name</a>, ' ');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cp\">cp</a> + 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#name\">name</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_warn_log - Print warning or error message on console.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @r:   Pointer to \"struct tomoyo_request_info\".</span>", 
"<span class=\"comment\"> * @fmt: The printf()'s format string, followed by parameters.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tomoyo_warn_log\">tomoyo_warn_log</a>(struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *<a class=\"id\" href=\"#r\">r</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> * const <a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_profile\">tomoyo_profile</a> *<a class=\"id\" href=\"#profile\">profile</a> = <a class=\"id\" href=\"#tomoyo_profile\">tomoyo_profile</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#profile\">profile</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TOMOYO_CONFIG_ENFORCING\">TOMOYO_CONFIG_ENFORCING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#profile\">profile</a>-><a class=\"id\" href=\"#enforcing\">enforcing</a>-><a class=\"id\" href=\"#enforcing_verbose\">enforcing_verbose</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TOMOYO_CONFIG_PERMISSIVE\">TOMOYO_CONFIG_PERMISSIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#profile\">profile</a>-><a class=\"id\" href=\"#permissive\">permissive</a>-><a class=\"id\" href=\"#permissive_verbose\">permissive_verbose</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TOMOYO_CONFIG_LEARNING\">TOMOYO_CONFIG_LEARNING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#profile\">profile</a>-><a class=\"id\" href=\"#learning\">learning</a>-><a class=\"id\" href=\"#learning_verbose\">learning_verbose</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(4096, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, 4095, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[4095] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: Access %s denied for %s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TOMOYO_CONFIG_ENFORCING\">TOMOYO_CONFIG_ENFORCING</a> ? \"ERROR\" : \"WARNING\", <a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#tomoyo_last_word\">tomoyo_last_word</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#domainname\">domainname</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_domain_quota_is_ok - Check for domain's quota.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @r: Pointer to \"struct tomoyo_request_info\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the domain is not exceeded quota, false otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller holds tomoyo_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_domain_quota_is_ok\">tomoyo_domain_quota_is_ok</a>(struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *<a class=\"id\" href=\"#r\">r</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#TOMOYO_CONFIG_LEARNING\">TOMOYO_CONFIG_LEARNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#acl_info_list\">acl_info_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#is_deleted\">is_deleted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TOMOYO_TYPE_PATH_ACL\">TOMOYO_TYPE_PATH_ACL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#tomoyo_path_acl\">tomoyo_path_acl</a>, <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-><a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#TOMOYO_MAX_PATH_OPERATION\">TOMOYO_MAX_PATH_OPERATION</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perm\">perm</a> &amp; (1 << <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perm\">perm</a> &amp; (1 << <a class=\"id\" href=\"#TOMOYO_TYPE_READ_WRITE\">TOMOYO_TYPE_READ_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TOMOYO_TYPE_PATH2_ACL\">TOMOYO_TYPE_PATH2_ACL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#tomoyo_path2_acl\">tomoyo_path2_acl</a>, <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-><a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#TOMOYO_MAX_PATH2_OPERATION\">TOMOYO_MAX_PATH2_OPERATION</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perm\">perm</a> &amp; (1 << <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TOMOYO_TYPE_PATH_NUMBER_ACL\">TOMOYO_TYPE_PATH_NUMBER_ACL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#tomoyo_path_number_acl\">tomoyo_path_number_acl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#TOMOYO_MAX_PATH_NUMBER_OPERATION\">TOMOYO_MAX_PATH_NUMBER_OPERATION</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perm\">perm</a> &amp; (1 << <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TOMOYO_TYPE_MKDEV_ACL\">TOMOYO_TYPE_MKDEV_ACL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#tomoyo_mkdev_acl\">tomoyo_mkdev_acl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#TOMOYO_MAX_MKDEV_OPERATION\">TOMOYO_MAX_MKDEV_OPERATION</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perm\">perm</a> &amp; (1 << <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#tomoyo_profile\">tomoyo_profile</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#profile\">profile</a>)-><a class=\"id\" href=\"#learning\">learning</a>->", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#learning_max_entry\">learning_max_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#quota_warned\">quota_warned</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#quota_warned\">quota_warned</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"TOMOYO-WARNING: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Domain '%s' has so many ACLs to hold. \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Stopped learning mode.\\n\", <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#domainname\">domainname</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
];
xr_frag_insert('l/e8/dc024499e3e1d33ca1043b9135eeae019fc670.xr', __xr_tmp);
