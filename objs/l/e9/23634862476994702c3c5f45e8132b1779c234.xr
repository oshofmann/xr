var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright 2002, 2003 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> * Subject to the GNU Public License v.2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wrappers of assembly checksum functions for x86-64.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * csum_partial_copy_from_user - Copy and checksum from user space.</span>", 
"<span class=\"comment\"> * @src: source address (user space)</span>", 
"<span class=\"comment\"> * @dst: destination address</span>", 
"<span class=\"comment\"> * @len: number of bytes to be copied.</span>", 
"<span class=\"comment\"> * @isum: initial sum that is added into the result (32bit unfolded)</span>", 
"<span class=\"comment\"> * @errp: set to -EFAULT for an bad source address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an 32bit unfolded checksum of the buffer.</span>", 
"<span class=\"comment\"> * src and dst are best aligned to 64bits.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__wsum\">__wsum</a>", 
"<a class=\"id\" href=\"#csum_partial_copy_from_user\">csum_partial_copy_from_user</a>(const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#src\">src</a>, void *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#isum\">isum</a>, int *<a class=\"id\" href=\"#errp\">errp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Why 6, not 7? To handle odd addresses aligned we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would need to do considerable complications to fix the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * checksum which is defined as an 16bit accumulator. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fix alignment code is primarily for performance</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * compatibility with 32bit and that will handle odd</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * addresses slowly too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((unsigned long)<a class=\"id\" href=\"#src\">src</a> &amp; 6)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (((unsigned long)<a class=\"id\" href=\"#src\">src</a> &amp; 6) && <a class=\"id\" href=\"#len\">len</a> >= 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#val16\">val16</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#val16\">val16</a>, (const <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#errp\">errp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#isum\">isum</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#__u16\">__u16</a> *)<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#val16\">val16</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isum\">isum</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__wsum\">__wsum</a>)<a class=\"id\" href=\"#add32_with_carry\">add32_with_carry</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__force\">__force</a> unsigned)<a class=\"id\" href=\"#isum\">isum</a>, <a class=\"id\" href=\"#val16\">val16</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isum\">isum</a> = <a class=\"id\" href=\"#csum_partial_copy_generic\">csum_partial_copy_generic</a>((<a class=\"id\" href=\"#__force\">__force</a> const void *)<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#isum\">isum</a>, <a class=\"id\" href=\"#errp\">errp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(*<a class=\"id\" href=\"#errp\">errp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#isum\">isum</a>;", 
"", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dst\">dst</a>, 0, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#isum\">isum</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#csum_partial_copy_from_user\">csum_partial_copy_from_user</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * csum_partial_copy_to_user - Copy and checksum to user space.</span>", 
"<span class=\"comment\"> * @src: source address</span>", 
"<span class=\"comment\"> * @dst: destination address (user space)</span>", 
"<span class=\"comment\"> * @len: number of bytes to be copied.</span>", 
"<span class=\"comment\"> * @isum: initial sum that is added into the result (32bit unfolded)</span>", 
"<span class=\"comment\"> * @errp: set to -EFAULT for an bad destination address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an 32bit unfolded checksum of the buffer.</span>", 
"<span class=\"comment\"> * src and dst are best aligned to 64bits.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__wsum\">__wsum</a>", 
"<a class=\"id\" href=\"#csum_partial_copy_to_user\">csum_partial_copy_to_user</a>(const void *<a class=\"id\" href=\"#src\">src</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#isum\">isum</a>, int *<a class=\"id\" href=\"#errp\">errp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#len\">len</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((unsigned long)<a class=\"id\" href=\"#dst\">dst</a> &amp; 6)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (((unsigned long)<a class=\"id\" href=\"#dst\">dst</a> &amp; 6) && <a class=\"id\" href=\"#len\">len</a> >= 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#val16\">val16</a> = *(<a class=\"id\" href=\"#__u16\">__u16</a> *)<a class=\"id\" href=\"#src\">src</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isum\">isum</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__wsum\">__wsum</a>)<a class=\"id\" href=\"#add32_with_carry\">add32_with_carry</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__force\">__force</a> unsigned)<a class=\"id\" href=\"#isum\">isum</a>, <a class=\"id\" href=\"#val16\">val16</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#val16\">val16</a>, (<a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#errp\">errp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#isum\">isum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum_partial_copy_generic\">csum_partial_copy_generic</a>(<a class=\"id\" href=\"#src\">src</a>, (void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#isum\">isum</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#errp\">errp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#csum_partial_copy_to_user\">csum_partial_copy_to_user</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * csum_partial_copy_nocheck - Copy and checksum.</span>", 
"<span class=\"comment\"> * @src: source address</span>", 
"<span class=\"comment\"> * @dst: destination address</span>", 
"<span class=\"comment\"> * @len: number of bytes to be copied.</span>", 
"<span class=\"comment\"> * @isum: initial sum that is added into the result (32bit unfolded)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an 32bit unfolded checksum of the buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__wsum\">__wsum</a>", 
"<a class=\"id\" href=\"#csum_partial_copy_nocheck\">csum_partial_copy_nocheck</a>(const void *<a class=\"id\" href=\"#src\">src</a>, void *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum_partial_copy_generic\">csum_partial_copy_generic</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#sum\">sum</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#csum_partial_copy_nocheck\">csum_partial_copy_nocheck</a>);", 
"", 
"<a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#csum_ipv6_magic\">csum_ipv6_magic</a>(const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#len\">len</a>, unsigned short <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#rest\">rest</a>, <a class=\"id\" href=\"#sum64\">sum64</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rest\">rest</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u64\">__u64</a>)<a class=\"id\" href=\"#htonl\">htonl</a>(<a class=\"id\" href=\"#len\">len</a>) + (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u64\">__u64</a>)<a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#proto\">proto</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u64\">__u64</a>)<a class=\"id\" href=\"#sum\">sum</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\" addq (%[saddr]),%[sum]\\n\"", 
"<span class=\"ts\"/>    \" adcq 8(%[saddr]),%[sum]\\n\"", 
"<span class=\"ts\"/>    \" adcq (%[daddr]),%[sum]\\n\"", 
"<span class=\"ts\"/>    \" adcq 8(%[daddr]),%[sum]\\n\"", 
"<span class=\"ts\"/>    \" adcq $0,%[sum]\\n\"", 
"", 
"<span class=\"ts\"/>    : [<a class=\"id\" href=\"#sum\">sum</a>] \"=r\" (<a class=\"id\" href=\"#sum64\">sum64</a>)", 
"<span class=\"ts\"/>    : \"[sum]\" (<a class=\"id\" href=\"#rest\">rest</a>), [<a class=\"id\" href=\"#saddr\">saddr</a>] \"r\" (<a class=\"id\" href=\"#saddr\">saddr</a>), [<a class=\"id\" href=\"#daddr\">daddr</a>] \"r\" (<a class=\"id\" href=\"#daddr\">daddr</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum_fold\">csum_fold</a>(", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__wsum\">__wsum</a>)<a class=\"id\" href=\"#add32_with_carry\">add32_with_carry</a>(<a class=\"id\" href=\"#sum64\">sum64</a> &amp; 0xffffffff, <a class=\"id\" href=\"#sum64\">sum64</a>>>32));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#csum_ipv6_magic\">csum_ipv6_magic</a>);", 
];
xr_frag_insert('l/e9/23634862476994702c3c5f45e8132b1779c234.xr', __xr_tmp);
