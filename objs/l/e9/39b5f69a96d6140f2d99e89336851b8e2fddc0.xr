var __xr_tmp = [
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usb_driver\">usb_driver</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#probe\">probe</a>) (struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#usb_device_id\">usb_device_id</a> *<a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#disconnect\">disconnect</a>) (struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a>) (struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#suspend\">suspend</a>) (struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#resume\">resume</a>) (struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#reset_resume\">reset_resume</a>)(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#pre_reset\">pre_reset</a>)(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#post_reset\">post_reset</a>)(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_device_id\">usb_device_id</a> *<a class=\"id\" href=\"#id_table\">id_table</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_dynids\">usb_dynids</a> <a class=\"id\" href=\"#dynids\">dynids</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usbdrv_wrap\">usbdrv_wrap</a> <a class=\"id\" href=\"#drvwrap\">drvwrap</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#no_dynamic_id\">no_dynamic_id</a>:1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#supports_autosuspend\">supports_autosuspend</a>:1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#soft_unbind\">soft_unbind</a>:1;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#to_usb_driver\">to_usb_driver</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#usb_driver\">usb_driver</a>, <a class=\"id\" href=\"#drvwrap\">drvwrap</a>.<a class=\"id\" href=\"#driver\">driver</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct usb_device_driver - identifies USB device driver to usbcore</span>", 
"<span class=\"comment\"> * @name: The driver name should be unique among USB drivers,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and should normally be the same as the module name.</span>", 
"<span class=\"comment\"> * @probe: Called to see if the driver is willing to manage a particular</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device.  If it is, probe returns zero and uses dev_set_drvdata()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to associate driver-specific data with the device.  If unwilling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to manage the device, return a negative errno value.</span>", 
"<span class=\"comment\"> * @disconnect: Called when the device is no longer accessible, usually</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>because it has been (or is being) disconnected or the driver's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>module is being unloaded.</span>", 
"<span class=\"comment\"> * @suspend: Called when the device is going to be suspended by the system.</span>", 
"<span class=\"comment\"> * @resume: Called when the device is being resumed by the system.</span>", 
"<span class=\"comment\"> * @drvwrap: Driver-model core structure wrapper.</span>", 
"<span class=\"comment\"> * @supports_autosuspend: if set to 0, the USB core will not allow autosuspend</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for devices bound to this driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * USB drivers must provide all the fields listed above except drvwrap.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usb_device_driver\">usb_device_driver</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#probe\">probe</a>) (struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#disconnect\">disconnect</a>) (struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#suspend\">suspend</a>) (struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#resume\">resume</a>) (struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usbdrv_wrap\">usbdrv_wrap</a> <a class=\"id\" href=\"#drvwrap\">drvwrap</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#supports_autosuspend\">supports_autosuspend</a>:1;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#to_usb_device_driver\">to_usb_device_driver</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#usb_device_driver\">usb_device_driver</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drvwrap\">drvwrap</a>.<a class=\"id\" href=\"#driver\">driver</a>)", 
"", 
"extern struct <a class=\"id\" href=\"#bus_type\">bus_type</a> <a class=\"id\" href=\"#usb_bus_type\">usb_bus_type</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct usb_class_driver - identifies a USB driver that wants to use the USB major number</span>", 
"<span class=\"comment\"> * @name: the usb class device name for this driver.  Will show up in sysfs.</span>", 
"<span class=\"comment\"> * @devnode: Callback to provide a naming hint for a possible</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device node to create.</span>", 
"<span class=\"comment\"> * @fops: pointer to the struct file_operations of this driver.</span>", 
"<span class=\"comment\"> * @minor_base: the start of the minor range for this driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure is used for the usb_register_dev() and</span>", 
"<span class=\"comment\"> * usb_unregister_dev() functions, to consolidate a number of the</span>", 
"<span class=\"comment\"> * parameters used for them.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usb_class_driver\">usb_class_driver</a> {", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>char *(*<a class=\"id\" href=\"#devnode\">devnode</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> *<a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#minor_base\">minor_base</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * use these in module_init()/module_exit()</span>", 
"<span class=\"comment\"> * and don't forget MODULE_DEVICE_TABLE(usb, ...)</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#usb_register_driver\">usb_register_driver</a>(struct <a class=\"id\" href=\"#usb_driver\">usb_driver</a> *, struct <a class=\"id\" href=\"#module\">module</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *);", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_register\">usb_register</a>(struct <a class=\"id\" href=\"#usb_driver\">usb_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#usb_register_driver\">usb_register_driver</a>(<a class=\"id\" href=\"#driver\">driver</a>, <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, <a class=\"id\" href=\"#KBUILD_MODNAME\">KBUILD_MODNAME</a>);", 
"}", 
"extern void <a class=\"id\" href=\"#usb_deregister\">usb_deregister</a>(struct <a class=\"id\" href=\"#usb_driver\">usb_driver</a> *);", 
"", 
"extern int <a class=\"id\" href=\"#usb_register_device_driver\">usb_register_device_driver</a>(struct <a class=\"id\" href=\"#usb_device_driver\">usb_device_driver</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *);", 
"extern void <a class=\"id\" href=\"#usb_deregister_device_driver\">usb_deregister_device_driver</a>(struct <a class=\"id\" href=\"#usb_device_driver\">usb_device_driver</a> *);", 
"", 
"extern int <a class=\"id\" href=\"#usb_register_dev\">usb_register_dev</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#usb_class_driver\">usb_class_driver</a> *<a class=\"id\" href=\"#class_driver\">class_driver</a>);", 
"extern void <a class=\"id\" href=\"#usb_deregister_dev\">usb_deregister_dev</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#usb_class_driver\">usb_class_driver</a> *<a class=\"id\" href=\"#class_driver\">class_driver</a>);", 
"", 
"extern int <a class=\"id\" href=\"#usb_disabled\">usb_disabled</a>(void);", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * URB support, for asynchronous request completions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * urb-&gt;transfer_flags:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: URB_DIR_IN/OUT is automatically set in usb_submit_urb().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_SHORT_NOT_OK\">URB_SHORT_NOT_OK</a><span class=\"ts\"/>0x0001<span class=\"ts\"/><span class=\"comment\">/* report short reads as errors */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_ISO_ASAP\">URB_ISO_ASAP</a><span class=\"ts\"/><span class=\"ts\"/>0x0002<span class=\"ts\"/><span class=\"comment\">/* iso-only, urb-&gt;start_frame</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ignored */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_NO_TRANSFER_DMA_MAP\">URB_NO_TRANSFER_DMA_MAP</a><span class=\"ts\"/>0x0004<span class=\"ts\"/><span class=\"comment\">/* urb-&gt;transfer_dma valid on submit */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_NO_FSBR\">URB_NO_FSBR</a><span class=\"ts\"/><span class=\"ts\"/>0x0020<span class=\"ts\"/><span class=\"comment\">/* UHCI-specific */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_ZERO_PACKET\">URB_ZERO_PACKET</a><span class=\"ts\"/><span class=\"ts\"/>0x0040<span class=\"ts\"/><span class=\"comment\">/* Finish bulk OUT with short packet */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_NO_INTERRUPT\">URB_NO_INTERRUPT</a><span class=\"ts\"/>0x0080<span class=\"ts\"/><span class=\"comment\">/* HINT: no non-error interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * needed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_FREE_BUFFER\">URB_FREE_BUFFER</a><span class=\"ts\"/><span class=\"ts\"/>0x0100<span class=\"ts\"/><span class=\"comment\">/* Free transfer buffer with the URB */</span>", 
"", 
"<span class=\"comment\">/* The following flags are used internally by usbcore and HCDs */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_DIR_IN\">URB_DIR_IN</a><span class=\"ts\"/><span class=\"ts\"/>0x0200<span class=\"ts\"/><span class=\"comment\">/* Transfer from device to host */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_DIR_OUT\">URB_DIR_OUT</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_DIR_MASK\">URB_DIR_MASK</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#URB_DIR_IN\">URB_DIR_IN</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_DMA_MAP_SINGLE\">URB_DMA_MAP_SINGLE</a><span class=\"ts\"/>0x00010000<span class=\"ts\"/><span class=\"comment\">/* Non-scatter-gather mapping */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_DMA_MAP_PAGE\">URB_DMA_MAP_PAGE</a><span class=\"ts\"/>0x00020000<span class=\"ts\"/><span class=\"comment\">/* HCD-unsupported S-G */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_DMA_MAP_SG\">URB_DMA_MAP_SG</a><span class=\"ts\"/><span class=\"ts\"/>0x00040000<span class=\"ts\"/><span class=\"comment\">/* HCD-supported S-G */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_MAP_LOCAL\">URB_MAP_LOCAL</a><span class=\"ts\"/><span class=\"ts\"/>0x00080000<span class=\"ts\"/><span class=\"comment\">/* HCD-local-memory mapping */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_SETUP_MAP_SINGLE\">URB_SETUP_MAP_SINGLE</a><span class=\"ts\"/>0x00100000<span class=\"ts\"/><span class=\"comment\">/* Setup packet DMA mapped */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_SETUP_MAP_LOCAL\">URB_SETUP_MAP_LOCAL</a><span class=\"ts\"/>0x00200000<span class=\"ts\"/><span class=\"comment\">/* HCD-local setup packet */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#URB_DMA_SG_COMBINED\">URB_DMA_SG_COMBINED</a><span class=\"ts\"/>0x00400000<span class=\"ts\"/><span class=\"comment\">/* S-G entries were combined */</span>", 
"", 
"struct <a class=\"id\" href=\"#usb_iso_packet_descriptor\">usb_iso_packet_descriptor</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#length\">length</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* expected length */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#actual_length\">actual_length</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#urb\">urb</a>;", 
"", 
"struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#urb_list\">urb_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#poisoned\">poisoned</a>:1;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_usb_anchor\">init_usb_anchor</a>(struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#anchor\">anchor</a>-><a class=\"id\" href=\"#urb_list\">urb_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#anchor\">anchor</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#anchor\">anchor</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"typedef void (*<a class=\"id\" href=\"#usb_complete_t\">usb_complete_t</a>)(struct <a class=\"id\" href=\"#urb\">urb</a> *);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct urb - USB Request Block</span>", 
"<span class=\"comment\"> * @urb_list: For use by current owner of the URB.</span>", 
"<span class=\"comment\"> * @anchor_list: membership in the list of an anchor</span>", 
"<span class=\"comment\"> * @anchor: to anchor URBs to a common mooring</span>", 
"<span class=\"comment\"> * @ep: Points to the endpoint's data structure.  Will eventually</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>replace @pipe.</span>", 
"<span class=\"comment\"> * @pipe: Holds endpoint number, direction, type, and more.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Create these values with the eight macros available;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>usb_{snd,rcv}TYPEpipe(dev,endpoint), where the TYPE is \"ctrl\"</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(control), \"bulk\", \"int\" (interrupt), or \"iso\" (isochronous).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>For example usb_sndbulkpipe() or usb_rcvintpipe().  Endpoint</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>numbers range from zero to fifteen.  Note that \"in\" endpoint two</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is a different endpoint (and pipe) from \"out\" endpoint two.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The current configuration controls the existence, type, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>maximum packet size of any given endpoint.</span>", 
"<span class=\"comment\"> * @stream_id: the endpoint's stream ID for bulk streams</span>", 
"<span class=\"comment\"> * @dev: Identifies the USB device to perform the request.</span>", 
"<span class=\"comment\"> * @status: This is read in non-iso completion functions to get the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>status of the particular request.  ISO requests only use it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to tell whether the URB was unlinked; detailed status for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>each frame is in the fields of the iso_frame-desc.</span>", 
"<span class=\"comment\"> * @transfer_flags: A variety of flags may be used to affect how URB</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>submission, unlinking, or operation are handled.  Different</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kinds of URB can use different flags.</span>", 
"<span class=\"comment\"> * @transfer_buffer:  This identifies the buffer to (or from) which the I/O</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>request will be performed unless URB_NO_TRANSFER_DMA_MAP is set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(however, do not leave garbage in transfer_buffer even then).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This buffer must be suitable for DMA; allocate it with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kmalloc() or equivalent.  For transfers to \"in\" endpoints, contents</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of this buffer will be modified.  This buffer is used for the data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>stage of control transfers.</span>", 
"<span class=\"comment\"> * @transfer_dma: When transfer_flags includes URB_NO_TRANSFER_DMA_MAP,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the device driver is saying that it provided this DMA address,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>which the host controller driver should use in preference to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>transfer_buffer.</span>", 
"<span class=\"comment\"> * @sg: scatter gather buffer list</span>", 
"<span class=\"comment\"> * @num_sgs: number of entries in the sg list</span>", 
"<span class=\"comment\"> * @transfer_buffer_length: How big is transfer_buffer.  The transfer may</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be broken up into chunks according to the current maximum packet</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>size for the endpoint, which is a function of the configuration</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and is encoded in the pipe.  When the length is zero, neither</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>transfer_buffer nor transfer_dma is used.</span>", 
"<span class=\"comment\"> * @actual_length: This is read in non-iso completion functions, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it tells how many bytes (out of transfer_buffer_length) were</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>transferred.  It will normally be the same as requested, unless</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>either an error was reported or a short read was performed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The URB_SHORT_NOT_OK transfer flag may be used to make such</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>short reads be reported as errors.</span>", 
"<span class=\"comment\"> * @setup_packet: Only used for control transfers, this points to eight bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of setup data.  Control transfers always start by sending this data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to the device.  Then transfer_buffer is read or written, if needed.</span>", 
"<span class=\"comment\"> * @setup_dma: DMA pointer for the setup packet.  The caller must not use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this field; setup_packet must point to a valid buffer.</span>", 
"<span class=\"comment\"> * @start_frame: Returns the initial frame for isochronous transfers.</span>", 
"<span class=\"comment\"> * @number_of_packets: Lists the number of ISO transfer buffers.</span>", 
"<span class=\"comment\"> * @interval: Specifies the polling interval for interrupt or isochronous</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>transfers.  The units are frames (milliseconds) for full and low</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>speed devices, and microframes (1/8 millisecond) for highspeed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and SuperSpeed devices.</span>", 
"<span class=\"comment\"> * @error_count: Returns the number of ISO transfers that reported errors.</span>", 
"<span class=\"comment\"> * @context: For use in completion functions.  This normally points to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>request-specific driver context.</span>", 
"<span class=\"comment\"> * @complete: Completion handler. This URB is passed as the parameter to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>completion function.  The completion function may then do what</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it likes with the URB, including resubmitting or freeing it.</span>", 
"<span class=\"comment\"> * @iso_frame_desc: Used to provide arrays of ISO transfer buffers and to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>collect the transfer status for each buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure identifies USB transfer requests.  URBs must be allocated by</span>", 
"<span class=\"comment\"> * calling usb_alloc_urb() and freed with a call to usb_free_urb().</span>", 
"<span class=\"comment\"> * Initialization may be done using various usb_fill_*_urb() functions.  URBs</span>", 
"<span class=\"comment\"> * are submitted using usb_submit_urb(), and pending requests may be canceled</span>", 
"<span class=\"comment\"> * using usb_unlink_urb() or usb_kill_urb().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Data Transfer Buffers:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Normally drivers provide I/O buffers allocated with kmalloc() or otherwise</span>", 
"<span class=\"comment\"> * taken from the general page pool.  That is provided by transfer_buffer</span>", 
"<span class=\"comment\"> * (control requests also use setup_packet), and host controller drivers</span>", 
"<span class=\"comment\"> * perform a dma mapping (and unmapping) for each buffer transferred.  Those</span>", 
"<span class=\"comment\"> * mapping operations can be expensive on some platforms (perhaps using a dma</span>", 
"<span class=\"comment\"> * bounce buffer or talking to an IOMMU),</span>", 
"<span class=\"comment\"> * although they're cheap on commodity x86 and ppc hardware.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, drivers may pass the URB_NO_TRANSFER_DMA_MAP transfer flag,</span>", 
"<span class=\"comment\"> * which tells the host controller driver that no such mapping is needed for</span>", 
"<span class=\"comment\"> * the transfer_buffer since</span>", 
"<span class=\"comment\"> * the device driver is DMA-aware.  For example, a device driver might</span>", 
"<span class=\"comment\"> * allocate a DMA buffer with usb_alloc_coherent() or call usb_buffer_map().</span>", 
"<span class=\"comment\"> * When this transfer flag is provided, host controller drivers will</span>", 
"<span class=\"comment\"> * attempt to use the dma address found in the transfer_dma</span>", 
"<span class=\"comment\"> * field rather than determining a dma address themselves.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that transfer_buffer must still be set if the controller</span>", 
"<span class=\"comment\"> * does not support DMA (as indicated by bus.uses_dma) and when talking</span>", 
"<span class=\"comment\"> * to root hub. If you have to trasfer between highmem zone and the device</span>", 
"<span class=\"comment\"> * on such controller, create a bounce buffer or bail out with an error.</span>", 
"<span class=\"comment\"> * If transfer_buffer cannot be set (is in highmem) and the controller is DMA</span>", 
"<span class=\"comment\"> * capable, assign NULL to it, so that usbmon knows not to use the value.</span>", 
"<span class=\"comment\"> * The setup_packet must always be set, so it cannot be located in highmem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialization:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All URBs submitted must initialize the dev, pipe, transfer_flags (may be</span>", 
"<span class=\"comment\"> * zero), and complete fields.  All URBs must also initialize</span>", 
"<span class=\"comment\"> * transfer_buffer and transfer_buffer_length.  They may provide the</span>", 
"<span class=\"comment\"> * URB_SHORT_NOT_OK transfer flag, indicating that short reads are</span>", 
"<span class=\"comment\"> * to be treated as errors; that flag is invalid for write requests.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Bulk URBs may</span>", 
"<span class=\"comment\"> * use the URB_ZERO_PACKET transfer flag, indicating that bulk OUT transfers</span>", 
"<span class=\"comment\"> * should always terminate with a short packet, even if it means adding an</span>", 
"<span class=\"comment\"> * extra zero length packet.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Control URBs must provide a valid pointer in the setup_packet field.</span>", 
"<span class=\"comment\"> * Unlike the transfer_buffer, the setup_packet may not be mapped for DMA</span>", 
"<span class=\"comment\"> * beforehand.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Interrupt URBs must provide an interval, saying how often (in milliseconds</span>", 
"<span class=\"comment\"> * or, for highspeed devices, 125 microsecond units)</span>", 
"<span class=\"comment\"> * to poll for transfers.  After the URB has been submitted, the interval</span>", 
"<span class=\"comment\"> * field reflects how the transfer was actually scheduled.</span>", 
"<span class=\"comment\"> * The polling interval may be more frequent than requested.</span>", 
"<span class=\"comment\"> * For example, some controllers have a maximum interval of 32 milliseconds,</span>", 
"<span class=\"comment\"> * while others support intervals of up to 1024 milliseconds.</span>", 
"<span class=\"comment\"> * Isochronous URBs also have transfer intervals.  (Note that for isochronous</span>", 
"<span class=\"comment\"> * endpoints, as well as high speed interrupt endpoints, the encoding of</span>", 
"<span class=\"comment\"> * the transfer interval in the endpoint descriptor is logarithmic.</span>", 
"<span class=\"comment\"> * Device drivers must convert that value to linear units themselves.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Isochronous URBs normally use the URB_ISO_ASAP transfer flag, telling</span>", 
"<span class=\"comment\"> * the host controller to schedule the transfer as soon as bandwidth</span>", 
"<span class=\"comment\"> * utilization allows, and then set start_frame to reflect the actual frame</span>", 
"<span class=\"comment\"> * selected during submission.  Otherwise drivers must specify the start_frame</span>", 
"<span class=\"comment\"> * and handle the case where the transfer can't begin then.  However, drivers</span>", 
"<span class=\"comment\"> * won't know how bandwidth is currently allocated, and while they can</span>", 
"<span class=\"comment\"> * find the current frame using usb_get_current_frame_number () they can't</span>", 
"<span class=\"comment\"> * know the range for that frame number.  (Ranges for frame counter values</span>", 
"<span class=\"comment\"> * are HC-specific, and can go from 256 to 65536 frames from \"now\".)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Isochronous URBs have a different data transfer model, in part because</span>", 
"<span class=\"comment\"> * the quality of service is only \"best effort\".  Callers provide specially</span>", 
"<span class=\"comment\"> * allocated URBs, with number_of_packets worth of iso_frame_desc structures</span>", 
"<span class=\"comment\"> * at the end.  Each such packet is an individual ISO transfer.  Isochronous</span>", 
"<span class=\"comment\"> * URBs are normally queued, submitted by drivers to arrange that</span>", 
"<span class=\"comment\"> * transfers are at least double buffered, and then explicitly resubmitted</span>", 
"<span class=\"comment\"> * in completion handlers, so</span>", 
"<span class=\"comment\"> * that data (such as audio or video) streams at as constant a rate as the</span>", 
"<span class=\"comment\"> * host controller scheduler can support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Completion Callbacks:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The completion callback is made in_interrupt(), and one of the first</span>", 
"<span class=\"comment\"> * things that a completion handler should do is check the status field.</span>", 
"<span class=\"comment\"> * The status field is provided for all URBs.  It is used to report</span>", 
"<span class=\"comment\"> * unlinked URBs, and status for all non-ISO transfers.  It should not</span>", 
"<span class=\"comment\"> * be examined before the URB is returned to the completion handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The context field is normally used to link URBs back to the relevant</span>", 
"<span class=\"comment\"> * driver or request state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the completion callback is invoked for non-isochronous URBs, the</span>", 
"<span class=\"comment\"> * actual_length field tells how many bytes were transferred.  This field</span>", 
"<span class=\"comment\"> * is updated even when the URB terminated with an error or was unlinked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ISO transfer status is reported in the status and actual_length fields</span>", 
"<span class=\"comment\"> * of the iso_frame_desc array, and the number of errors is reported in</span>", 
"<span class=\"comment\"> * error_count.  Completion callbacks for ISO transfers will normally</span>", 
"<span class=\"comment\"> * (re)submit URBs to ensure a constant transfer rate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that even fields marked \"public\" should not be touched by the driver</span>", 
"<span class=\"comment\"> * when the urb is owned by the hcd, that is, since the call to</span>", 
"<span class=\"comment\"> * usb_submit_urb() till the entry into the completion routine.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#urb\">urb</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* private: usb core and host controller only fields in the urb */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a> <a class=\"id\" href=\"#kref\">kref</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reference count of the URB */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#hcpriv\">hcpriv</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* private data for host controller */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#use_count\">use_count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* concurrent submissions counter */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#reject\">reject</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* submissions will fail */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unlinked\">unlinked</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unlink error code */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* public: documented fields in the urb that can be used by drivers */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#urb_list\">urb_list</a>;<span class=\"ts\"/><span class=\"comment\">/* list head for use by the urb's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * current owner */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#anchor_list\">anchor_list</a>;<span class=\"ts\"/><span class=\"comment\">/* the URB may be anchored */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) pointer to associated device */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_endpoint\">usb_host_endpoint</a> *<a class=\"id\" href=\"#ep\">ep</a>;<span class=\"ts\"/><span class=\"comment\">/* (internal) pointer to endpoint */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pipe\">pipe</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) pipe information */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#stream_id\">stream_id</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) stream ID */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (return) non-ISO status */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#transfer_flags\">transfer_flags</a>;<span class=\"ts\"/><span class=\"comment\">/* (in) URB_SHORT_NOT_OK | ...*/</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) associated data buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#transfer_dma\">transfer_dma</a>;<span class=\"ts\"/><span class=\"comment\">/* (in) dma addr for transfer_buffer */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) scatter gather buffer list */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_sgs\">num_sgs</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) number of entries in the sg list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#transfer_buffer_length\">transfer_buffer_length</a>;<span class=\"ts\"/><span class=\"comment\">/* (in) data buffer length */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#actual_length\">actual_length</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (return) actual transfer length */</span>", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#setup_packet\">setup_packet</a>;<span class=\"ts\"/><span class=\"comment\">/* (in) setup packet (control only) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#setup_dma\">setup_dma</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) dma addr for setup_packet */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start_frame\">start_frame</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (modify) start frame (ISO) */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#number_of_packets\">number_of_packets</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) number of ISO packets */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#interval\">interval</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (modify) transfer interval</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (INT/ISO) */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error_count\">error_count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (return) number of ISO errors */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#context\">context</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) context for completion */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usb_complete_t\">usb_complete_t</a> <a class=\"id\" href=\"#complete\">complete</a>;<span class=\"ts\"/><span class=\"comment\">/* (in) completion routine */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_iso_packet_descriptor\">usb_iso_packet_descriptor</a> <a class=\"id\" href=\"#iso_frame_desc\">iso_frame_desc</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (in) ISO ONLY */</span>", 
"};", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_fill_control_urb - initializes a control urb</span>", 
"<span class=\"comment\"> * @urb: pointer to the urb to initialize.</span>", 
"<span class=\"comment\"> * @dev: pointer to the struct usb_device for this urb.</span>", 
"<span class=\"comment\"> * @pipe: the endpoint pipe</span>", 
"<span class=\"comment\"> * @setup_packet: pointer to the setup_packet buffer</span>", 
"<span class=\"comment\"> * @transfer_buffer: pointer to the transfer buffer</span>", 
"<span class=\"comment\"> * @buffer_length: length of the transfer buffer</span>", 
"<span class=\"comment\"> * @complete_fn: pointer to the usb_complete_t function</span>", 
"<span class=\"comment\"> * @context: what to set the urb context to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initializes a control urb with the proper information needed to submit</span>", 
"<span class=\"comment\"> * it to a device.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_fill_control_urb\">usb_fill_control_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#setup_packet\">setup_packet</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#buffer_length\">buffer_length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usb_complete_t\">usb_complete_t</a> <a class=\"id\" href=\"#complete_fn\">complete_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#setup_packet\">setup_packet</a> = <a class=\"id\" href=\"#setup_packet\">setup_packet</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a> = <a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#transfer_buffer_length\">transfer_buffer_length</a> = <a class=\"id\" href=\"#buffer_length\">buffer_length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#complete\">complete</a> = <a class=\"id\" href=\"#complete_fn\">complete_fn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#context\">context</a> = <a class=\"id\" href=\"#context\">context</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_fill_bulk_urb - macro to help initialize a bulk urb</span>", 
"<span class=\"comment\"> * @urb: pointer to the urb to initialize.</span>", 
"<span class=\"comment\"> * @dev: pointer to the struct usb_device for this urb.</span>", 
"<span class=\"comment\"> * @pipe: the endpoint pipe</span>", 
"<span class=\"comment\"> * @transfer_buffer: pointer to the transfer buffer</span>", 
"<span class=\"comment\"> * @buffer_length: length of the transfer buffer</span>", 
"<span class=\"comment\"> * @complete_fn: pointer to the usb_complete_t function</span>", 
"<span class=\"comment\"> * @context: what to set the urb context to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initializes a bulk urb with the proper information needed to submit it</span>", 
"<span class=\"comment\"> * to a device.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_fill_bulk_urb\">usb_fill_bulk_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#buffer_length\">buffer_length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#usb_complete_t\">usb_complete_t</a> <a class=\"id\" href=\"#complete_fn\">complete_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a> = <a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#transfer_buffer_length\">transfer_buffer_length</a> = <a class=\"id\" href=\"#buffer_length\">buffer_length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#complete\">complete</a> = <a class=\"id\" href=\"#complete_fn\">complete_fn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#context\">context</a> = <a class=\"id\" href=\"#context\">context</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_fill_int_urb - macro to help initialize a interrupt urb</span>", 
"<span class=\"comment\"> * @urb: pointer to the urb to initialize.</span>", 
"<span class=\"comment\"> * @dev: pointer to the struct usb_device for this urb.</span>", 
"<span class=\"comment\"> * @pipe: the endpoint pipe</span>", 
"<span class=\"comment\"> * @transfer_buffer: pointer to the transfer buffer</span>", 
"<span class=\"comment\"> * @buffer_length: length of the transfer buffer</span>", 
"<span class=\"comment\"> * @complete_fn: pointer to the usb_complete_t function</span>", 
"<span class=\"comment\"> * @context: what to set the urb context to.</span>", 
"<span class=\"comment\"> * @interval: what to set the urb interval to, encoded like</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the endpoint descriptor's bInterval value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initializes a interrupt urb with the proper information needed to submit</span>", 
"<span class=\"comment\"> * it to a device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that High Speed and SuperSpeed interrupt endpoints use a logarithmic</span>", 
"<span class=\"comment\"> * encoding of the endpoint interval, and express polling intervals in</span>", 
"<span class=\"comment\"> * microframes (eight per millisecond) rather than in frames (one per</span>", 
"<span class=\"comment\"> * millisecond).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wireless USB also uses the logarithmic encoding, but specifies it in units of</span>", 
"<span class=\"comment\"> * 128us instead of 125us.  For Wireless USB devices, the interval is passed</span>", 
"<span class=\"comment\"> * through to the host controller, rather than being translated into microframe</span>", 
"<span class=\"comment\"> * units.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_fill_int_urb\">usb_fill_int_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#buffer_length\">buffer_length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#usb_complete_t\">usb_complete_t</a> <a class=\"id\" href=\"#complete_fn\">complete_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#context\">context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#interval\">interval</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a> = <a class=\"id\" href=\"#transfer_buffer\">transfer_buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#transfer_buffer_length\">transfer_buffer_length</a> = <a class=\"id\" href=\"#buffer_length\">buffer_length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#complete\">complete</a> = <a class=\"id\" href=\"#complete_fn\">complete_fn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#context\">context</a> = <a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#speed\">speed</a> == <a class=\"id\" href=\"#USB_SPEED_HIGH\">USB_SPEED_HIGH</a> || <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#speed\">speed</a> == <a class=\"id\" href=\"#USB_SPEED_SUPER\">USB_SPEED_SUPER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#interval\">interval</a> = 1 << (<a class=\"id\" href=\"#interval\">interval</a> - 1);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#interval\">interval</a> = <a class=\"id\" href=\"#interval\">interval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#start_frame\">start_frame</a> = -1;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#usb_init_urb\">usb_init_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"extern struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#usb_alloc_urb\">usb_alloc_urb</a>(int <a class=\"id\" href=\"#iso_packets\">iso_packets</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mem_flags\">mem_flags</a>);", 
"extern void <a class=\"id\" href=\"#usb_free_urb\">usb_free_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_put_urb\">usb_put_urb</a> <a class=\"id\" href=\"#usb_free_urb\">usb_free_urb</a>", 
"extern struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#usb_get_urb\">usb_get_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"extern int <a class=\"id\" href=\"#usb_submit_urb\">usb_submit_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mem_flags\">mem_flags</a>);", 
"extern int <a class=\"id\" href=\"#usb_unlink_urb\">usb_unlink_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"extern void <a class=\"id\" href=\"#usb_kill_urb\">usb_kill_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"extern void <a class=\"id\" href=\"#usb_poison_urb\">usb_poison_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"extern void <a class=\"id\" href=\"#usb_unpoison_urb\">usb_unpoison_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"extern void <a class=\"id\" href=\"#usb_kill_anchored_urbs\">usb_kill_anchored_urbs</a>(struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>);", 
"extern void <a class=\"id\" href=\"#usb_poison_anchored_urbs\">usb_poison_anchored_urbs</a>(struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>);", 
"extern void <a class=\"id\" href=\"#usb_unpoison_anchored_urbs\">usb_unpoison_anchored_urbs</a>(struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>);", 
"extern void <a class=\"id\" href=\"#usb_unlink_anchored_urbs\">usb_unlink_anchored_urbs</a>(struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>);", 
"extern void <a class=\"id\" href=\"#usb_anchor_urb\">usb_anchor_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>, struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>);", 
"extern void <a class=\"id\" href=\"#usb_unanchor_urb\">usb_unanchor_urb</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"extern int <a class=\"id\" href=\"#usb_wait_anchor_empty_timeout\">usb_wait_anchor_empty_timeout</a>(struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#usb_get_from_anchor\">usb_get_from_anchor</a>(struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>);", 
"extern void <a class=\"id\" href=\"#usb_scuttle_anchored_urbs\">usb_scuttle_anchored_urbs</a>(struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>);", 
"extern int <a class=\"id\" href=\"#usb_anchor_empty\">usb_anchor_empty</a>(struct <a class=\"id\" href=\"#usb_anchor\">usb_anchor</a> *<a class=\"id\" href=\"#anchor\">anchor</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_urb_dir_in - check if an URB describes an IN transfer</span>", 
"<span class=\"comment\"> * @urb: URB to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if @urb describes an IN transfer (device-to-host),</span>", 
"<span class=\"comment\"> * otherwise 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_urb_dir_in\">usb_urb_dir_in</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#transfer_flags\">transfer_flags</a> &amp; <a class=\"id\" href=\"#URB_DIR_MASK\">URB_DIR_MASK</a>) == <a class=\"id\" href=\"#URB_DIR_IN\">URB_DIR_IN</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_urb_dir_out - check if an URB describes an OUT transfer</span>", 
"<span class=\"comment\"> * @urb: URB to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if @urb describes an OUT transfer (host-to-device),</span>", 
"<span class=\"comment\"> * otherwise 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_urb_dir_out\">usb_urb_dir_out</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#urb\">urb</a>-><a class=\"id\" href=\"#transfer_flags\">transfer_flags</a> &amp; <a class=\"id\" href=\"#URB_DIR_MASK\">URB_DIR_MASK</a>) == <a class=\"id\" href=\"#URB_DIR_OUT\">URB_DIR_OUT</a>;", 
"}", 
"", 
"void *<a class=\"id\" href=\"#usb_alloc_coherent\">usb_alloc_coherent</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mem_flags\">mem_flags</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#dma\">dma</a>);", 
"void <a class=\"id\" href=\"#usb_free_coherent\">usb_free_coherent</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma\">dma</a>);", 
"", 
"#if 0", 
"struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#usb_buffer_map\">usb_buffer_map</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"void <a class=\"id\" href=\"#usb_buffer_dmasync\">usb_buffer_dmasync</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"void <a class=\"id\" href=\"#usb_buffer_unmap\">usb_buffer_unmap</a>(struct <a class=\"id\" href=\"#urb\">urb</a> *<a class=\"id\" href=\"#urb\">urb</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a>;", 
"int <a class=\"id\" href=\"#usb_buffer_map_sg\">usb_buffer_map_sg</a>(const struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#is_in\">is_in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, int <a class=\"id\" href=\"#nents\">nents</a>);", 
"#if 0", 
"void <a class=\"id\" href=\"#usb_buffer_dmasync_sg\">usb_buffer_dmasync_sg</a>(const struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#is_in\">is_in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, int <a class=\"id\" href=\"#n_hw_ents\">n_hw_ents</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"void <a class=\"id\" href=\"#usb_buffer_unmap_sg\">usb_buffer_unmap_sg</a>(const struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#is_in\">is_in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, int <a class=\"id\" href=\"#n_hw_ents\">n_hw_ents</a>);", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------*</span>", 
"<span class=\"comment\"> *                         SYNCHRONOUS CALL SUPPORT                  *</span>", 
"<span class=\"comment\"> *-------------------------------------------------------------------*/</span>", 
"", 
"extern int <a class=\"id\" href=\"#usb_control_msg\">usb_control_msg</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#request\">request</a>, <a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#requesttype\">requesttype</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern int <a class=\"id\" href=\"#usb_interrupt_msg\">usb_interrupt_msg</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#usb_dev\">usb_dev</a>, unsigned int <a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#len\">len</a>, int *<a class=\"id\" href=\"#actual_length\">actual_length</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern int <a class=\"id\" href=\"#usb_bulk_msg\">usb_bulk_msg</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#usb_dev\">usb_dev</a>, unsigned int <a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#len\">len</a>, int *<a class=\"id\" href=\"#actual_length\">actual_length</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"<span class=\"comment\">/* wrappers around usb_control_msg() for the most common standard requests */</span>", 
"extern int <a class=\"id\" href=\"#usb_get_descriptor\">usb_get_descriptor</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char <a class=\"id\" href=\"#desctype\">desctype</a>,", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#descindex\">descindex</a>, void *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"extern int <a class=\"id\" href=\"#usb_get_status\">usb_get_status</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#target\">target</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern int <a class=\"id\" href=\"#usb_string\">usb_string</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"comment\">/* wrappers that also update important state inside usbcore */</span>", 
"extern int <a class=\"id\" href=\"#usb_clear_halt\">usb_clear_halt</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#pipe\">pipe</a>);", 
"extern int <a class=\"id\" href=\"#usb_reset_configuration\">usb_reset_configuration</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern int <a class=\"id\" href=\"#usb_set_interface\">usb_set_interface</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#ifnum\">ifnum</a>, int <a class=\"id\" href=\"#alternate\">alternate</a>);", 
"extern void <a class=\"id\" href=\"#usb_reset_endpoint\">usb_reset_endpoint</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#epaddr\">epaddr</a>);", 
"", 
"<span class=\"comment\">/* this request isn't really synchronous, but it belongs with the others */</span>", 
"extern int <a class=\"id\" href=\"#usb_driver_set_configuration\">usb_driver_set_configuration</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>, int <a class=\"id\" href=\"#config\">config</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * timeouts, in milliseconds, used for sending/receiving control messages</span>", 
"<span class=\"comment\"> * they typically complete within a few frames (msec) after they're issued</span>", 
"<span class=\"comment\"> * USB identifies 5 second timeouts, maybe more in a few cases, and a few</span>", 
"<span class=\"comment\"> * slow devices (like some MGE Ellipse UPSes) actually push that limit.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_CTRL_GET_TIMEOUT\">USB_CTRL_GET_TIMEOUT</a><span class=\"ts\"/>5000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_CTRL_SET_TIMEOUT\">USB_CTRL_SET_TIMEOUT</a><span class=\"ts\"/>5000", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct usb_sg_request - support for scatter/gather I/O</span>", 
"<span class=\"comment\"> * @status: zero indicates success, else negative errno</span>", 
"<span class=\"comment\"> * @bytes: counts bytes transferred.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These requests are initialized using usb_sg_init(), and then are used</span>", 
"<span class=\"comment\"> * as request handles passed to usb_sg_wait() or usb_sg_cancel().  Most</span>", 
"<span class=\"comment\"> * members of the request object aren't for driver access.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The status and bytecount values are valid only after usb_sg_wait()</span>", 
"<span class=\"comment\"> * returns.  If the status is zero, then the bytecount matches the total</span>", 
"<span class=\"comment\"> * from the request.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After an error completion, drivers may need to clear a halt condition</span>", 
"<span class=\"comment\"> * on the endpoint.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usb_sg_request\">usb_sg_request</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* private:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * members below are private to usbcore,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and are not provided for driver access!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_device\">usb_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#urb\">urb</a><span class=\"ts\"/><span class=\"ts\"/>**<a class=\"id\" href=\"#urbs\">urbs</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#usb_sg_init\">usb_sg_init</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_sg_request\">usb_sg_request</a><span class=\"ts\"/>*<a class=\"id\" href=\"#io\">io</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_device\">usb_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a><span class=\"ts\"/>*<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nents\">nents</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_flags\">mem_flags</a>", 
");", 
"void <a class=\"id\" href=\"#usb_sg_cancel\">usb_sg_cancel</a>(struct <a class=\"id\" href=\"#usb_sg_request\">usb_sg_request</a> *<a class=\"id\" href=\"#io\">io</a>);", 
"void <a class=\"id\" href=\"#usb_sg_wait\">usb_sg_wait</a>(struct <a class=\"id\" href=\"#usb_sg_request\">usb_sg_request</a> *<a class=\"id\" href=\"#io\">io</a>);", 
"", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For various legacy reasons, Linux has a small cookie that's paired with</span>", 
"<span class=\"comment\"> * a struct usb_device to identify an endpoint queue.  Queue characteristics</span>", 
"<span class=\"comment\"> * are defined by the endpoint's descriptor.  This cookie is called a \"pipe\",</span>", 
"<span class=\"comment\"> * an unsigned int encoded as:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - direction:<span class=\"ts\"/>bit 7<span class=\"ts\"/><span class=\"ts\"/>(0 = Host-to-Device [Out],</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 1 = Device-to-Host [In] ...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>like endpoint bEndpointAddress)</span>", 
"<span class=\"comment\"> *  - device address:<span class=\"ts\"/>bits 8-14       ... bit positions known to uhci-hcd</span>", 
"<span class=\"comment\"> *  - endpoint:<span class=\"ts\"/><span class=\"ts\"/>bits 15-18      ... bit positions known to uhci-hcd</span>", 
"<span class=\"comment\"> *  - pipe type:<span class=\"ts\"/>bits 30-31<span class=\"ts\"/>(00 = isochronous, 01 = interrupt,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 10 = control, 11 = bulk)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given the device address and endpoint descriptor, pipes are redundant.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* NOTE:  these are not the standard USB_ENDPOINT_XFER_* values!! */</span>", 
"<span class=\"comment\">/* (yet ... they're the values used by usbfs) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PIPE_ISOCHRONOUS\">PIPE_ISOCHRONOUS</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PIPE_INTERRUPT\">PIPE_INTERRUPT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PIPE_CONTROL\">PIPE_CONTROL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PIPE_BULK\">PIPE_BULK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>3", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_pipein\">usb_pipein</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#pipe\">pipe</a>) &amp; <a class=\"id\" href=\"#USB_DIR_IN\">USB_DIR_IN</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_pipeout\">usb_pipeout</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)<span class=\"ts\"/>(!<a class=\"id\" href=\"#usb_pipein\">usb_pipein</a>(<a class=\"id\" href=\"#pipe\">pipe</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_pipedevice\">usb_pipedevice</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#pipe\">pipe</a>) >> 8) &amp; 0x7f)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_pipeendpoint\">usb_pipeendpoint</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#pipe\">pipe</a>) >> 15) &amp; 0xf)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_pipetype\">usb_pipetype</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#pipe\">pipe</a>) >> 30) &amp; 3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_pipeisoc\">usb_pipeisoc</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#usb_pipetype\">usb_pipetype</a>((<a class=\"id\" href=\"#pipe\">pipe</a>)) == <a class=\"id\" href=\"#PIPE_ISOCHRONOUS\">PIPE_ISOCHRONOUS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_pipeint\">usb_pipeint</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#usb_pipetype\">usb_pipetype</a>((<a class=\"id\" href=\"#pipe\">pipe</a>)) == <a class=\"id\" href=\"#PIPE_INTERRUPT\">PIPE_INTERRUPT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_pipecontrol\">usb_pipecontrol</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#usb_pipetype\">usb_pipetype</a>((<a class=\"id\" href=\"#pipe\">pipe</a>)) == <a class=\"id\" href=\"#PIPE_CONTROL\">PIPE_CONTROL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_pipebulk\">usb_pipebulk</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#usb_pipetype\">usb_pipetype</a>((<a class=\"id\" href=\"#pipe\">pipe</a>)) == <a class=\"id\" href=\"#PIPE_BULK\">PIPE_BULK</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#__create_pipe\">__create_pipe</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#endpoint\">endpoint</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devnum\">devnum</a> << 8) | (<a class=\"id\" href=\"#endpoint\">endpoint</a> << 15);", 
"}", 
"", 
"<span class=\"comment\">/* Create various pipes... */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_sndctrlpipe\">usb_sndctrlpipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#PIPE_CONTROL\">PIPE_CONTROL</a> << 30) | <a class=\"id\" href=\"#__create_pipe\">__create_pipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_rcvctrlpipe\">usb_rcvctrlpipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#PIPE_CONTROL\">PIPE_CONTROL</a> << 30) | <a class=\"id\" href=\"#__create_pipe\">__create_pipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>) | <a class=\"id\" href=\"#USB_DIR_IN\">USB_DIR_IN</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_sndisocpipe\">usb_sndisocpipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#PIPE_ISOCHRONOUS\">PIPE_ISOCHRONOUS</a> << 30) | <a class=\"id\" href=\"#__create_pipe\">__create_pipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_rcvisocpipe\">usb_rcvisocpipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#PIPE_ISOCHRONOUS\">PIPE_ISOCHRONOUS</a> << 30) | <a class=\"id\" href=\"#__create_pipe\">__create_pipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>) | <a class=\"id\" href=\"#USB_DIR_IN\">USB_DIR_IN</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_sndbulkpipe\">usb_sndbulkpipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#PIPE_BULK\">PIPE_BULK</a> << 30) | <a class=\"id\" href=\"#__create_pipe\">__create_pipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_rcvbulkpipe\">usb_rcvbulkpipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#PIPE_BULK\">PIPE_BULK</a> << 30) | <a class=\"id\" href=\"#__create_pipe\">__create_pipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>) | <a class=\"id\" href=\"#USB_DIR_IN\">USB_DIR_IN</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_sndintpipe\">usb_sndintpipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#PIPE_INTERRUPT\">PIPE_INTERRUPT</a> << 30) | <a class=\"id\" href=\"#__create_pipe\">__create_pipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_rcvintpipe\">usb_rcvintpipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#PIPE_INTERRUPT\">PIPE_INTERRUPT</a> << 30) | <a class=\"id\" href=\"#__create_pipe\">__create_pipe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#endpoint\">endpoint</a>) | <a class=\"id\" href=\"#USB_DIR_IN\">USB_DIR_IN</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#usb_host_endpoint\">usb_host_endpoint</a> *", 
"<a class=\"id\" href=\"#usb_pipe_endpoint\">usb_pipe_endpoint</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#pipe\">pipe</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_endpoint\">usb_host_endpoint</a> **<a class=\"id\" href=\"#eps\">eps</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eps\">eps</a> = <a class=\"id\" href=\"#usb_pipein\">usb_pipein</a>(<a class=\"id\" href=\"#pipe\">pipe</a>) ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ep_in\">ep_in</a> : <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ep_out\">ep_out</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#eps\">eps</a>[<a class=\"id\" href=\"#usb_pipeendpoint\">usb_pipeendpoint</a>(<a class=\"id\" href=\"#pipe\">pipe</a>)];", 
"}", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__u16\">__u16</a>", 
"<a class=\"id\" href=\"#usb_maxpacket\">usb_maxpacket</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>, int <a class=\"id\" href=\"#pipe\">pipe</a>, int <a class=\"id\" href=\"#is_out\">is_out</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_endpoint\">usb_host_endpoint</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ep\">ep</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epnum\">epnum</a> = <a class=\"id\" href=\"#usb_pipeendpoint\">usb_pipeendpoint</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_out\">is_out</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#usb_pipein\">usb_pipein</a>(<a class=\"id\" href=\"#pipe\">pipe</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#udev\">udev</a>-><a class=\"id\" href=\"#ep_out\">ep_out</a>[<a class=\"id\" href=\"#epnum\">epnum</a>];", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#usb_pipeout\">usb_pipeout</a>(<a class=\"id\" href=\"#pipe\">pipe</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#udev\">udev</a>-><a class=\"id\" href=\"#ep_in\">ep_in</a>[<a class=\"id\" href=\"#epnum\">epnum</a>];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ep\">ep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE:  only 0x07ff bits are for packet size... */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#wMaxPacketSize\">wMaxPacketSize</a>);", 
"}", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/* Events from the usb core */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_ADD\">USB_DEVICE_ADD</a><span class=\"ts\"/><span class=\"ts\"/>0x0001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_REMOVE\">USB_DEVICE_REMOVE</a><span class=\"ts\"/>0x0002", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_BUS_ADD\">USB_BUS_ADD</a><span class=\"ts\"/><span class=\"ts\"/>0x0003", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_BUS_REMOVE\">USB_BUS_REMOVE</a><span class=\"ts\"/><span class=\"ts\"/>0x0004", 
"extern void <a class=\"id\" href=\"#usb_register_notify\">usb_register_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>);", 
"extern void <a class=\"id\" href=\"#usb_unregister_notify\">usb_unregister_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dbg\">dbg</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#arg\">arg</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%s: \" <a class=\"id\" href=\"#format\">format</a> \"\\n\", <a class=\"id\" href=\"#__FILE__\">__FILE__</a>, ##<a class=\"id\" href=\"#arg\">arg</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dbg\">dbg</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#arg\">arg</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (0)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%s: \" <a class=\"id\" href=\"#format\">format</a> \"\\n\", <a class=\"id\" href=\"#__FILE__\">__FILE__</a>, ##<a class=\"id\" href=\"#arg\">arg</a>); \\", 
"} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#err\">err</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#arg\">arg</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#KBUILD_MODNAME\">KBUILD_MODNAME</a> \": \" <a class=\"id\" href=\"#format\">format</a> \"\\n\", ##<a class=\"id\" href=\"#arg\">arg</a>)", 
"", 
"<span class=\"comment\">/* debugfs stuff */</span>", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#usb_debug_root\">usb_debug_root</a>;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/e9/39b5f69a96d6140f2d99e89336851b8e2fddc0.xr', __xr_tmp);
