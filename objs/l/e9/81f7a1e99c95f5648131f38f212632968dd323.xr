var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mm/rmap.c - physical to virtual reverse mappings</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2001, Rik van Riel &lt;riel@conectiva.com.br&gt;</span>", 
"<span class=\"comment\"> * Released under the General Public License (GPL).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Simple, low overhead reverse mapping scheme.</span>", 
"<span class=\"comment\"> * Please try to keep this thing as modular as possible.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Provides methods for unmapping each kind of mapped page:</span>", 
"<span class=\"comment\"> * the anon methods track anonymous pages, and</span>", 
"<span class=\"comment\"> * the file methods track pages belonging to an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Original design by Rik van Riel &lt;riel@conectiva.com.br&gt; 2001</span>", 
"<span class=\"comment\"> * File methods by Dave McCracken &lt;dmccr@us.ibm.com&gt; 2003, 2004</span>", 
"<span class=\"comment\"> * Anonymous methods by Andrea Arcangeli &lt;andrea@suse.de&gt; 2004</span>", 
"<span class=\"comment\"> * Contributions by Hugh Dickins 2003, 2004</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lock ordering in mm:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * inode-&gt;i_mutex<span class=\"ts\"/>(while writing or truncating, not reading or faulting)</span>", 
"<span class=\"comment\"> *   inode-&gt;i_alloc_sem (vmtruncate_range)</span>", 
"<span class=\"comment\"> *   mm-&gt;mmap_sem</span>", 
"<span class=\"comment\"> *     page-&gt;flags PG_locked (lock_page)</span>", 
"<span class=\"comment\"> *       mapping-&gt;i_mmap_lock</span>", 
"<span class=\"comment\"> *         anon_vma-&gt;lock</span>", 
"<span class=\"comment\"> *           mm-&gt;page_table_lock or pte_lock</span>", 
"<span class=\"comment\"> *             zone-&gt;lru_lock (in mark_page_accessed, isolate_lru_page)</span>", 
"<span class=\"comment\"> *             swap_lock (in swap_duplicate, swap_info_get)</span>", 
"<span class=\"comment\"> *               mmlist_lock (in mmput, drain_mmlist and others)</span>", 
"<span class=\"comment\"> *               mapping-&gt;private_lock (in __set_page_dirty_buffers)</span>", 
"<span class=\"comment\"> *               inode_lock (in set_page_dirty's __mark_inode_dirty)</span>", 
"<span class=\"comment\"> *                 sb_lock (within inode_lock in fs/fs-writeback.c)</span>", 
"<span class=\"comment\"> *                 mapping-&gt;tree_lock (widely used, in set_page_dirty,</span>", 
"<span class=\"comment\"> *                           in arch-dependent flush_dcache_mmap_lock,</span>", 
"<span class=\"comment\"> *                           within inode_lock in __sync_single_inode)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (code doesn't rely on that order so it could be switched around)</span>", 
"<span class=\"comment\"> * -&gt;tasklist_lock</span>", 
"<span class=\"comment\"> *   anon_vma-&gt;lock      (memory_failure, collect_procs_anon)</span>", 
"<span class=\"comment\"> *     pte map lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swapops\">swapops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ksm\">ksm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memcontrol\">memcontrol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#migrate\">migrate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#anon_vma_cachep\">anon_vma_cachep</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#anon_vma_chain_cachep\">anon_vma_chain_cachep</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma_alloc\">anon_vma_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#anon_vma_cachep\">anon_vma_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#anon_vma_free\">anon_vma_free</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#anon_vma_cachep\">anon_vma_cachep</a>, <a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#anon_vma_chain_alloc\">anon_vma_chain_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#anon_vma_chain_cachep\">anon_vma_chain_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#anon_vma_chain_free\">anon_vma_chain_free</a>(struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#anon_vma_chain_cachep\">anon_vma_chain_cachep</a>, <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * anon_vma_prepare - attach an anon_vma to a memory region</span>", 
"<span class=\"comment\"> * @vma: the memory region in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This makes sure the memory mapping described by 'vma' has</span>", 
"<span class=\"comment\"> * an 'anon_vma' attached to it, so that we can associate the</span>", 
"<span class=\"comment\"> * anonymous pages mapped into it with that anon_vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The common case will be that we already have one, but if</span>", 
"<span class=\"comment\"> * if not we either need to find an adjacent mapping that we</span>", 
"<span class=\"comment\"> * can re-use the anon_vma from (very common when the only</span>", 
"<span class=\"comment\"> * reason for splitting a vma has been mprotect()), or we</span>", 
"<span class=\"comment\"> * allocate a new one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Anon-vma allocations are very subtle, because we may have</span>", 
"<span class=\"comment\"> * optimistically looked up an anon_vma in page_lock_anon_vma()</span>", 
"<span class=\"comment\"> * and that may actually touch the spinlock even in the newly</span>", 
"<span class=\"comment\"> * allocated vma (it depends on RCU to make sure that the</span>", 
"<span class=\"comment\"> * anon_vma isn't actually destroyed).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As a result, we need to do proper anon_vma locking even</span>", 
"<span class=\"comment\"> * for the new allocation. At the same time, we do not want</span>", 
"<span class=\"comment\"> * to do any locking for the common case of already having</span>", 
"<span class=\"comment\"> * an anon_vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This must be called with the mmap_sem held for reading.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#avc\">avc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#allocated\">allocated</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc\">avc</a> = <a class=\"id\" href=\"#anon_vma_chain_alloc\">anon_vma_chain_alloc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#avc\">avc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_enomem\">out_enomem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#find_mergeable_anon_vma\">find_mergeable_anon_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allocated\">allocated</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#anon_vma\">anon_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#anon_vma_alloc\">anon_vma_alloc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#anon_vma\">anon_vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_enomem_free_avc\">out_enomem_free_avc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allocated\">allocated</a> = <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This VMA had no anon_vma yet.  This anon_vma is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the root of any anon_vma tree that might form.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_lock\">anon_vma_lock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* page_table_lock to protect against threads */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#same_vma\">same_vma</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#same_anon_vma\">same_anon_vma</a>, &amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allocated\">allocated</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc\">avc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_unlock\">anon_vma_unlock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#allocated\">allocated</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_free\">anon_vma_free</a>(<a class=\"id\" href=\"#allocated\">allocated</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#avc\">avc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_chain_free\">anon_vma_chain_free</a>(<a class=\"id\" href=\"#avc\">avc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#out_enomem_free_avc\">out_enomem_free_avc</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_chain_free\">anon_vma_chain_free</a>(<a class=\"id\" href=\"#avc\">avc</a>);", 
" <a class=\"id\" href=\"#out_enomem\">out_enomem</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#anon_vma_chain_link\">anon_vma_chain_link</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#avc\">avc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#same_vma\">same_vma</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_lock\">anon_vma_lock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#same_anon_vma\">same_anon_vma</a>, &amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_unlock\">anon_vma_unlock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach the anon_vmas from src to dst.</span>", 
"<span class=\"comment\"> * Returns 0 on success, -ENOMEM on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#anon_vma_clone\">anon_vma_clone</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#avc\">avc</a>, *<a class=\"id\" href=\"#pavc\">pavc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_reverse\">list_for_each_entry_reverse</a>(<a class=\"id\" href=\"#pavc\">pavc</a>, &amp;<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>, <a class=\"id\" href=\"#same_vma\">same_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc\">avc</a> = <a class=\"id\" href=\"#anon_vma_chain_alloc\">anon_vma_chain_alloc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#avc\">avc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#enomem_failure\">enomem_failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_chain_link\">anon_vma_chain_link</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#avc\">avc</a>, <a class=\"id\" href=\"#pavc\">pavc</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#enomem_failure\">enomem_failure</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlink_anon_vmas\">unlink_anon_vmas</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach vma to its own anon_vma, as well as to the anon_vmas that</span>", 
"<span class=\"comment\"> * the corresponding VMA in the parent process is attached to.</span>", 
"<span class=\"comment\"> * Returns 0 on success, non-zero on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#anon_vma_fork\">anon_vma_fork</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#pvma\">pvma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#avc\">avc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't bother if the parent process has no anon_vma here. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pvma\">pvma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First, attach the new VMA to the parent VMA's anon_vmas,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so rmap can find non-COWed pages in child processes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma_clone\">anon_vma_clone</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pvma\">pvma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Then add our own anon_vma. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#anon_vma_alloc\">anon_vma_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_error\">out_error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avc\">avc</a> = <a class=\"id\" href=\"#anon_vma_chain_alloc\">anon_vma_chain_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#avc\">avc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_error_free_anon_vma\">out_error_free_anon_vma</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The root anon_vma's spinlock is the lock actually used when we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock any of the anon_vmas in this anon_vma tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#pvma\">pvma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With KSM refcounts, an anon_vma can stay around longer than the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * process it belongs to.  The root anon_vma needs to be pinned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * until this anon_vma is freed, because the lock lives in the root.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_anon_vma\">get_anon_vma</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Mark this anon_vma as the one where our new (COWed) pages go. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_chain_link\">anon_vma_chain_link</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#avc\">avc</a>, <a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#out_error_free_anon_vma\">out_error_free_anon_vma</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_free\">anon_vma_free</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
" <a class=\"id\" href=\"#out_error\">out_error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlink_anon_vmas\">unlink_anon_vmas</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#anon_vma_unlink\">anon_vma_unlink</a>(struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#empty\">empty</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If anon_vma_fork fails, we can get an empty anon_vma_chain. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_lock\">anon_vma_lock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>-><a class=\"id\" href=\"#same_anon_vma\">same_anon_vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We must garbage collect the anon_vma if it's empty */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#empty\">empty</a> = <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#head\">head</a>) && !<a class=\"id\" href=\"#anonvma_external_refcount\">anonvma_external_refcount</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_unlock\">anon_vma_unlock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#empty\">empty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We no longer need the root anon_vma */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a> != <a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_anon_vma\">drop_anon_vma</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_free\">anon_vma_free</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#unlink_anon_vmas\">unlink_anon_vmas</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#avc\">avc</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unlink each anon_vma chained to the VMA.  This list is ordered</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from newest to oldest, ensuring the root anon_vma gets freed last.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#avc\">avc</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>, <a class=\"id\" href=\"#same_vma\">same_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_unlink\">anon_vma_unlink</a>(<a class=\"id\" href=\"#avc\">avc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#same_vma\">same_vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_chain_free\">anon_vma_chain_free</a>(<a class=\"id\" href=\"#avc\">avc</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#anon_vma_ctor\">anon_vma_ctor</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anonvma_external_refcount_init\">anonvma_external_refcount_init</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#anon_vma_init\">anon_vma_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_cachep\">anon_vma_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"anon_vma\", sizeof(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, <a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#anon_vma_ctor\">anon_vma_ctor</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_chain_cachep\">anon_vma_chain_cachep</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Getting a lock on a stable anon_vma from a page off the LRU is</span>", 
"<span class=\"comment\"> * tricky: page_lock_anon_vma rely on RCU to guard against the races.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#page_lock_anon_vma\">page_lock_anon_vma</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>, *<a class=\"id\" href=\"#root_anon_vma\">root_anon_vma</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#anon_mapping\">anon_mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_mapping\">anon_mapping</a> = (unsigned long) <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#anon_mapping\">anon_mapping</a> &amp; <a class=\"id\" href=\"#PAGE_MAPPING_FLAGS\">PAGE_MAPPING_FLAGS</a>) != <a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = (struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *) (<a class=\"id\" href=\"#anon_mapping\">anon_mapping</a> - <a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_anon_vma\">root_anon_vma</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#root_anon_vma\">root_anon_vma</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this page is still mapped, then its anon_vma cannot have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * freed.  But if it has been unmapped, we have no security against</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the anon_vma structure being freed and reused (for another anon_vma:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SLAB_DESTROY_BY_RCU guarantees that - so the spin_lock above cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * corrupt): with anon_vma_prepare() or anon_vma_fork() redirecting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anon_vma-&gt;root before page_unlock_anon_vma() is called to unlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#root_anon_vma\">root_anon_vma</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#page_unlock_anon_vma\">page_unlock_anon_vma</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_unlock\">anon_vma_unlock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * At what user virtual address is page expected in @vma?</span>", 
"<span class=\"comment\"> * Returns virtual address or -EFAULT if page's index/offset is not</span>", 
"<span class=\"comment\"> * within the range mapped the @vma.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#vma_address\">vma_address</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << <a class=\"id\" href=\"#huge_page_order\">huge_page_order</a>(<a class=\"id\" href=\"#page_hstate\">page_hstate</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> + ((<a class=\"id\" href=\"#pgoff\">pgoff</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> || <a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* page should be within @vma mapping range */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#address\">address</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * At what user virtual address is page expected in vma?</span>", 
"<span class=\"comment\"> * Caller should check the page is actually part of the vma.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#page_address_in_vma\">page_address_in_vma</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#page__anon_vma\">page__anon_vma</a> = <a class=\"id\" href=\"#page_anon_vma\">page_anon_vma</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: swapoff's unuse_vma() is more efficient with this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * check, and needs it to match anon_vma when KSM is active.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> || !<a class=\"id\" href=\"#page__anon_vma\">page__anon_vma</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a> != <a class=\"id\" href=\"#page__anon_vma\">page__anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> && !(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_NONLINEAR\">VM_NONLINEAR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a> != <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma_address\">vma_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check that @page is mapped at @address into @mm.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @sync is false, page_check_address may perform a racy check to avoid</span>", 
"<span class=\"comment\"> * the page table lock when the pte is not present (helpful when reclaiming</span>", 
"<span class=\"comment\"> * highly shared pages).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On success returns with pte mapped and locked.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#page_check_address\">page_check_address</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> **<a class=\"id\" href=\"#ptlp\">ptlp</a>, int <a class=\"id\" href=\"#sync\">sync</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageHuge\">PageHuge</a>(<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#huge_pte_offset\">huge_pte_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptl\">ptl</a> = &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#check\">check</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud_present\">pud_present</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Make a quick check before getting the lock */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sync\">sync</a> && !<a class=\"id\" href=\"#pte_present\">pte_present</a>(*<a class=\"id\" href=\"#pte\">pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#pte_lockptr\">pte_lockptr</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<a class=\"id\" href=\"#check\">check</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_present\">pte_present</a>(*<a class=\"id\" href=\"#pte\">pte</a>) && <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>) == <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#pte\">pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptlp\">ptlp</a> = <a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_mapped_in_vma - check whether a page is really mapped in a VMA</span>", 
"<span class=\"comment\"> * @page: the page to test</span>", 
"<span class=\"comment\"> * @vma: the VMA to test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if the page is mapped into the page tables of the VMA, 0</span>", 
"<span class=\"comment\"> * if the page is not mapped into the page tables of this VMA.  Only</span>", 
"<span class=\"comment\"> * valid for normal file or anonymous VMAs.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#page_mapped_in_vma\">page_mapped_in_vma</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#vma_address\">vma_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* out of vma range */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#page_check_address\">page_check_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>, 1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the page is not in this mm */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Subfunctions of page_referenced: page_referenced_one called</span>", 
"<span class=\"comment\"> * repeatedly from either page_referenced_anon or page_referenced_file.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#page_referenced_one\">page_referenced_one</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, unsigned int *<a class=\"id\" href=\"#mapcount\">mapcount</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#referenced\">referenced</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#page_check_address\">page_check_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't want to elevate referenced for mlocked page that gets this far,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in order that it progresses to try_to_unmap and is moved to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unevictable list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#mapcount\">mapcount</a> = 1;<span class=\"ts\"/><span class=\"comment\">/* break early from loop */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unmap\">out_unmap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptep_clear_flush_young_notify\">ptep_clear_flush_young_notify</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte\">pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't treat a reference through a sequentially read</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mapping as such.  If the page has been used in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * another mapping, we will catch it; if this other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mapping is already gone, the unmap path will have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * set PG_referenced or activated the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#VM_SequentialReadHint\">VM_SequentialReadHint</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#referenced\">referenced</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pretend the page is referenced if the task has the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   swap token and is in the middle of a page fault. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a> != <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a> && <a class=\"id\" href=\"#has_swap_token\">has_swap_token</a>(<a class=\"id\" href=\"#mm\">mm</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rwsem_is_locked\">rwsem_is_locked</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#referenced\">referenced</a>++;", 
"", 
"<a class=\"id\" href=\"#out_unmap\">out_unmap</a>:", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#mapcount\">mapcount</a>)--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#referenced\">referenced</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#referenced\">referenced</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#page_referenced_anon\">page_referenced_anon</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cont\">mem_cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mapcount\">mapcount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#avc\">avc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#referenced\">referenced</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#page_lock_anon_vma\">page_lock_anon_vma</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#referenced\">referenced</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapcount\">mapcount</a> = <a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#avc\">avc</a>, &amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#same_anon_vma\">same_anon_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#vma_address\">vma_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we are reclaiming on behalf of a cgroup, skip</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * counting on behalf of references from different</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cgroups</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cont\">mem_cont</a> && !<a class=\"id\" href=\"#mm_match_cgroup\">mm_match_cgroup</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#mem_cont\">mem_cont</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#referenced\">referenced</a> += <a class=\"id\" href=\"#page_referenced_one\">page_referenced_one</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#mapcount\">mapcount</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapcount\">mapcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_unlock_anon_vma\">page_unlock_anon_vma</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#referenced\">referenced</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_referenced_file - referenced check for object-based rmap</span>", 
"<span class=\"comment\"> * @page: the page we're checking references on.</span>", 
"<span class=\"comment\"> * @mem_cont: target memory controller</span>", 
"<span class=\"comment\"> * @vm_flags: collect encountered vma-&gt;vm_flags who actually referenced the page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For an object-based mapped page, find all the places it is mapped and</span>", 
"<span class=\"comment\"> * check/clear the referenced flag.  This is done by following the page-&gt;mapping</span>", 
"<span class=\"comment\"> * pointer, then walking the chain of vmas it holds.  It returns the number</span>", 
"<span class=\"comment\"> * of references it found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is only called from page_referenced for object-based pages.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#page_referenced_file\">page_referenced_file</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cont\">mem_cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mapcount\">mapcount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#referenced\">referenced</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The caller's checks on page-&gt;mapping and !PageAnon have made</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sure that this is a file page: the check for page-&gt;mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * excludes the case just before it gets set on an anon page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The page lock not only makes sure that page-&gt;mapping cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * suddenly be NULLified by truncation, it makes sure that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structure at mapping cannot be freed and reused yet,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we can safely take mapping-&gt;i_mmap_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_mmap_lock does not stabilize mapcount at all, but mapcount</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is more likely to be accurate if we note it after spinning.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapcount\">mapcount</a> = <a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_foreach\">vma_prio_tree_foreach</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#vma_address\">vma_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we are reclaiming on behalf of a cgroup, skip</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * counting on behalf of references from different</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cgroups</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cont\">mem_cont</a> && !<a class=\"id\" href=\"#mm_match_cgroup\">mm_match_cgroup</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#mem_cont\">mem_cont</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#referenced\">referenced</a> += <a class=\"id\" href=\"#page_referenced_one\">page_referenced_one</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#mapcount\">mapcount</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapcount\">mapcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#referenced\">referenced</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_referenced - test if the page was referenced</span>", 
"<span class=\"comment\"> * @page: the page to test</span>", 
"<span class=\"comment\"> * @is_locked: caller holds lock on the page</span>", 
"<span class=\"comment\"> * @mem_cont: target memory controller</span>", 
"<span class=\"comment\"> * @vm_flags: collect encountered vma-&gt;vm_flags who actually referenced the page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Quick test_and_clear_referenced for all mappings to a page,</span>", 
"<span class=\"comment\"> * returns the number of ptes which referenced the page.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#page_referenced\">page_referenced</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#is_locked\">is_locked</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cont\">mem_cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#referenced\">referenced</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#we_locked\">we_locked</a> = 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#vm_flags\">vm_flags</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#page_rmapping\">page_rmapping</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_locked\">is_locked</a> && (!<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#we_locked\">we_locked</a> = <a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#we_locked\">we_locked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#referenced\">referenced</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#referenced\">referenced</a> += <a class=\"id\" href=\"#page_referenced_ksm\">page_referenced_ksm</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mem_cont\">mem_cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#referenced\">referenced</a> += <a class=\"id\" href=\"#page_referenced_anon\">page_referenced_anon</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mem_cont\">mem_cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#referenced\">referenced</a> += <a class=\"id\" href=\"#page_referenced_file\">page_referenced_file</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mem_cont\">mem_cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#we_locked\">we_locked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_test_and_clear_young\">page_test_and_clear_young</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#referenced\">referenced</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#referenced\">referenced</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#page_mkclean_one\">page_mkclean_one</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
];
xr_frag_insert('l/e9/81f7a1e99c95f5648131f38f212632968dd323.xr', __xr_tmp);
