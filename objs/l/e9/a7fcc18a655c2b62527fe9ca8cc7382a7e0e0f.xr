var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_dbg\">scsi_dbg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_device\">scsi_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_driver\">scsi_driver</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_eh\">scsi_eh</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_host\">scsi_host</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_ioctl\">scsi_ioctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsicam\">scsicam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"sd.h\"", 
"", 
"typedef <a class=\"id\" href=\"#__u16\">__u16</a> (<a class=\"id\" href=\"#csum_fn\">csum_fn</a>) (void *, unsigned int);", 
"", 
"static <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#sd_dif_crc_fn\">sd_dif_crc_fn</a>(void *<a class=\"id\" href=\"#data\">data</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_to_be16\">cpu_to_be16</a>(<a class=\"id\" href=\"#crc_t10dif\">crc_t10dif</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#len\">len</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#sd_dif_ip_fn\">sd_dif_ip_fn</a>(void *<a class=\"id\" href=\"#data\">data</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ip_compute_csum\">ip_compute_csum</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Type 1 and Type 2 protection use the same format: 16 bit guard tag,</span>", 
"<span class=\"comment\"> * 16 bit app tag, 32 bit reference tag.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_dif_type1_generate\">sd_dif_type1_generate</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#csum_fn\">csum_fn</a> *<a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#data_buf\">data_buf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#prot_buf\">prot_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#data_size\">data_size</a> ; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#guard_tag\">guard_tag</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> = <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#sector\">sector</a> &amp; 0xffffffff);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sd_dif_type1_generate_crc\">sd_dif_type1_generate_crc</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_dif_type1_generate\">sd_dif_type1_generate</a>(<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#sd_dif_crc_fn\">sd_dif_crc_fn</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sd_dif_type1_generate_ip\">sd_dif_type1_generate_ip</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_dif_type1_generate\">sd_dif_type1_generate</a>(<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#sd_dif_ip_fn\">sd_dif_ip_fn</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_dif_type1_verify\">sd_dif_type1_verify</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#csum_fn\">csum_fn</a> *<a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#data_buf\">data_buf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#prot_buf\">prot_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#csum\">csum</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#data_size\">data_size</a> ; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unwritten sectors */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> == 0xffff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Bad ref tag received from disk */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> == 0xffffffff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s: bad phys ref tag on sector %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>, (unsigned long)<a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a>) != (<a class=\"id\" href=\"#sector\">sector</a> &amp; 0xffffffff)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s: ref tag error on sector %lu (rcvd %u)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>, (unsigned long)<a class=\"id\" href=\"#sector\">sector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#guard_tag\">guard_tag</a> != <a class=\"id\" href=\"#csum\">csum</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: guard tag error on sector %lu \" \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"(rcvd %04x, data %04x)\\n\", <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned long)<a class=\"id\" href=\"#sector\">sector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#be16_to_cpu\">be16_to_cpu</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#guard_tag\">guard_tag</a>), <a class=\"id\" href=\"#be16_to_cpu\">be16_to_cpu</a>(<a class=\"id\" href=\"#csum\">csum</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_dif_type1_verify_crc\">sd_dif_type1_verify_crc</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd_dif_type1_verify\">sd_dif_type1_verify</a>(<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#sd_dif_crc_fn\">sd_dif_crc_fn</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_dif_type1_verify_ip\">sd_dif_type1_verify_ip</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd_dif_type1_verify\">sd_dif_type1_verify</a>(<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#sd_dif_ip_fn\">sd_dif_ip_fn</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions for interleaving and deinterleaving application tags</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_dif_type1_set_tag\">sd_dif_type1_set_tag</a>(void *<a class=\"id\" href=\"#prot\">prot</a>, void *<a class=\"id\" href=\"#tag_buf\">tag_buf</a>, unsigned int <a class=\"id\" href=\"#sectors\">sectors</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#prot\">prot</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#tag_buf\">tag_buf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#j\">j</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sectors\">sectors</a> ; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#j\">j</a> += 2, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> = <a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>] << 8 | <a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+1];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> == 0xffff);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sd_dif_type1_get_tag\">sd_dif_type1_get_tag</a>(void *<a class=\"id\" href=\"#prot\">prot</a>, void *<a class=\"id\" href=\"#tag_buf\">tag_buf</a>, unsigned int <a class=\"id\" href=\"#sectors\">sectors</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#prot\">prot</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#tag_buf\">tag_buf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#j\">j</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sectors\">sectors</a> ; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#j\">j</a> += 2, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>] = (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> &amp; 0xff00) >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+1] = <a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> &amp; 0xff;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#blk_integrity\">blk_integrity</a> <a class=\"id\" href=\"#dif_type1_integrity_crc\">dif_type1_integrity_crc</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"T10-DIF-TYPE1-CRC\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#generate_fn\">generate_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type1_generate_crc\">sd_dif_type1_generate_crc</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#verify_fn\">verify_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type1_verify_crc\">sd_dif_type1_verify_crc</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_tag_fn\">get_tag_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type1_get_tag\">sd_dif_type1_get_tag</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_tag_fn\">set_tag_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type1_set_tag\">sd_dif_type1_set_tag</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tuple_size\">tuple_size</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tag_size\">tag_size</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#blk_integrity\">blk_integrity</a> <a class=\"id\" href=\"#dif_type1_integrity_ip\">dif_type1_integrity_ip</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"T10-DIF-TYPE1-IP\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#generate_fn\">generate_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type1_generate_ip\">sd_dif_type1_generate_ip</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#verify_fn\">verify_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type1_verify_ip\">sd_dif_type1_verify_ip</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_tag_fn\">get_tag_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type1_get_tag\">sd_dif_type1_get_tag</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_tag_fn\">set_tag_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type1_set_tag\">sd_dif_type1_set_tag</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tuple_size\">tuple_size</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tag_size\">tag_size</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Type 3 protection has a 16-bit guard tag and 16 + 32 bits of opaque</span>", 
"<span class=\"comment\"> * tag space.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_dif_type3_generate\">sd_dif_type3_generate</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#csum_fn\">csum_fn</a> *<a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#data_buf\">data_buf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#prot_buf\">prot_buf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#data_size\">data_size</a> ; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#guard_tag\">guard_tag</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sd_dif_type3_generate_crc\">sd_dif_type3_generate_crc</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_dif_type3_generate\">sd_dif_type3_generate</a>(<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#sd_dif_crc_fn\">sd_dif_crc_fn</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sd_dif_type3_generate_ip\">sd_dif_type3_generate_ip</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_dif_type3_generate\">sd_dif_type3_generate</a>(<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#sd_dif_ip_fn\">sd_dif_ip_fn</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_dif_type3_verify\">sd_dif_type3_verify</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#csum_fn\">csum_fn</a> *<a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#data_buf\">data_buf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#prot_buf\">prot_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a> = <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#csum\">csum</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#data_size\">data_size</a> ; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unwritten sectors */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> == 0xffff && <a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> == 0xffffffff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#guard_tag\">guard_tag</a> != <a class=\"id\" href=\"#csum\">csum</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: guard tag error on sector %lu \" \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"(rcvd %04x, data %04x)\\n\", <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned long)<a class=\"id\" href=\"#sector\">sector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#be16_to_cpu\">be16_to_cpu</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#guard_tag\">guard_tag</a>), <a class=\"id\" href=\"#be16_to_cpu\">be16_to_cpu</a>(<a class=\"id\" href=\"#csum\">csum</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#bix\">bix</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_dif_type3_verify_crc\">sd_dif_type3_verify_crc</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd_dif_type3_verify\">sd_dif_type3_verify</a>(<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#sd_dif_crc_fn\">sd_dif_crc_fn</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_dif_type3_verify_ip\">sd_dif_type3_verify_ip</a>(struct <a class=\"id\" href=\"#blk_integrity_exchg\">blk_integrity_exchg</a> *<a class=\"id\" href=\"#bix\">bix</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd_dif_type3_verify\">sd_dif_type3_verify</a>(<a class=\"id\" href=\"#bix\">bix</a>, <a class=\"id\" href=\"#sd_dif_ip_fn\">sd_dif_ip_fn</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sd_dif_type3_set_tag\">sd_dif_type3_set_tag</a>(void *<a class=\"id\" href=\"#prot\">prot</a>, void *<a class=\"id\" href=\"#tag_buf\">tag_buf</a>, unsigned int <a class=\"id\" href=\"#sectors\">sectors</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#prot\">prot</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#tag_buf\">tag_buf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#j\">j</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sectors\">sectors</a> ; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#j\">j</a> += 6, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> = <a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>] << 8 | <a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+1];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> = <a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+2] << 24 | <a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+3] << 16 |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+4] << 8 | <a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+5];", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sd_dif_type3_get_tag\">sd_dif_type3_get_tag</a>(void *<a class=\"id\" href=\"#prot\">prot</a>, void *<a class=\"id\" href=\"#tag_buf\">tag_buf</a>, unsigned int <a class=\"id\" href=\"#sectors\">sectors</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#prot\">prot</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#tag_buf\">tag_buf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#j\">j</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sectors\">sectors</a> ; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#j\">j</a> += 2, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>] = (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> &amp; 0xff00) >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+1] = <a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+2] = (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> &amp; 0xff000000) >> 24;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+3] = (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> &amp; 0xff0000) >> 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+4] = (<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> &amp; 0xff00) >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a>[<a class=\"id\" href=\"#j\">j</a>+5] = <a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> == 0xffff || <a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> == 0xffffffff);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#blk_integrity\">blk_integrity</a> <a class=\"id\" href=\"#dif_type3_integrity_crc\">dif_type3_integrity_crc</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"T10-DIF-TYPE3-CRC\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#generate_fn\">generate_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type3_generate_crc\">sd_dif_type3_generate_crc</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#verify_fn\">verify_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type3_verify_crc\">sd_dif_type3_verify_crc</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_tag_fn\">get_tag_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type3_get_tag\">sd_dif_type3_get_tag</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_tag_fn\">set_tag_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type3_set_tag\">sd_dif_type3_set_tag</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tuple_size\">tuple_size</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tag_size\">tag_size</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#blk_integrity\">blk_integrity</a> <a class=\"id\" href=\"#dif_type3_integrity_ip\">dif_type3_integrity_ip</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"T10-DIF-TYPE3-IP\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#generate_fn\">generate_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type3_generate_ip\">sd_dif_type3_generate_ip</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#verify_fn\">verify_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type3_verify_ip\">sd_dif_type3_verify_ip</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_tag_fn\">get_tag_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type3_get_tag\">sd_dif_type3_get_tag</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_tag_fn\">set_tag_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sd_dif_type3_set_tag\">sd_dif_type3_set_tag</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tuple_size\">tuple_size</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tag_size\">tag_size</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Configure exchange of protection information between OS and HBA.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sd_dif_config_host\">sd_dif_config_host</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#protection_type\">protection_type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dif\">dif</a>, <a class=\"id\" href=\"#dix\">dix</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dif\">dif</a> = <a class=\"id\" href=\"#scsi_host_dif_capable\">scsi_host_dif_capable</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dix\">dix</a> = <a class=\"id\" href=\"#scsi_host_dix_capable\">scsi_host_dix_capable</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dix\">dix</a> && <a class=\"id\" href=\"#scsi_host_dix_capable\">scsi_host_dix_capable</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#host\">host</a>, 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dif\">dif</a> = 0; <a class=\"id\" href=\"#dix\">dix</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dix\">dix</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enable DMA of protection information */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_get_guard\">scsi_host_get_guard</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>) &amp; <a class=\"id\" href=\"#SHOST_DIX_GUARD_IP\">SHOST_DIX_GUARD_IP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#SD_DIF_TYPE3_PROTECTION\">SD_DIF_TYPE3_PROTECTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_integrity_register\">blk_integrity_register</a>(<a class=\"id\" href=\"#disk\">disk</a>, &amp;<a class=\"id\" href=\"#dif_type3_integrity_ip\">dif_type3_integrity_ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_integrity_register\">blk_integrity_register</a>(<a class=\"id\" href=\"#disk\">disk</a>, &amp;<a class=\"id\" href=\"#dif_type1_integrity_ip\">dif_type1_integrity_ip</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#SD_DIF_TYPE3_PROTECTION\">SD_DIF_TYPE3_PROTECTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_integrity_register\">blk_integrity_register</a>(<a class=\"id\" href=\"#disk\">disk</a>, &amp;<a class=\"id\" href=\"#dif_type3_integrity_crc\">dif_type3_integrity_crc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_integrity_register\">blk_integrity_register</a>(<a class=\"id\" href=\"#disk\">disk</a>, &amp;<a class=\"id\" href=\"#dif_type1_integrity_crc\">dif_type1_integrity_crc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  \"Enabling DIX %s protection\\n\", <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#integrity\">integrity</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Signal to block layer that we support sector tagging */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dif\">dif</a> && <a class=\"id\" href=\"#type\">type</a> && <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#ATO\">ATO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#SD_DIF_TYPE3_PROTECTION\">SD_DIF_TYPE3_PROTECTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#integrity\">integrity</a>-><a class=\"id\" href=\"#tag_size\">tag_size</a> = sizeof(<a class=\"id\" href=\"#u16\">u16</a>) + sizeof(<a class=\"id\" href=\"#u32\">u32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#integrity\">integrity</a>-><a class=\"id\" href=\"#tag_size\">tag_size</a> = sizeof(<a class=\"id\" href=\"#u16\">u16</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"DIF application tag size %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#integrity\">integrity</a>-><a class=\"id\" href=\"#tag_size\">tag_size</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The virtual start sector is the one that was originally submitted</span>", 
"<span class=\"comment\"> * by the block layer.<span class=\"ts\"/>Due to partitioning, MD/DM cloning, etc. the</span>", 
"<span class=\"comment\"> * actual physical start sector is likely to be different.  Remap</span>", 
"<span class=\"comment\"> * protection information to match the physical LBA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * From a protocol perspective there's a slight difference between</span>", 
"<span class=\"comment\"> * Type 1 and 2.  The latter uses 32-byte CDBs exclusively, and the</span>", 
"<span class=\"comment\"> * reference tag is seeded in the CDB.  This gives us the potential to</span>", 
"<span class=\"comment\"> * avoid virt-&gt;phys remapping during write.  However, at read time we</span>", 
"<span class=\"comment\"> * don't know whether the virt sector is the same as when we wrote it</span>", 
"<span class=\"comment\"> * (we could be reading from real disk as opposed to MD/DM device.  So</span>", 
"<span class=\"comment\"> * we always remap Type 2 making it identical to Type 1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Type 3 does not have a reference tag so no remapping is required.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sd_dif_prepare\">sd_dif_prepare</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#hw_sector\">hw_sector</a>, unsigned int <a class=\"id\" href=\"#sector_sz\">sector_sz</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#tuple_sz\">tuple_sz</a> = sizeof(struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#virt\">virt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Already remapped? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_INTEGRITY\">REQ_INTEGRITY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#protection_type\">protection_type</a> == <a class=\"id\" href=\"#SD_DIF_TYPE3_PROTECTION\">SD_DIF_TYPE3_PROTECTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_INTEGRITY\">REQ_INTEGRITY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#hw_sector\">hw_sector</a> &amp; 0xffffffff;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rq_for_each_bio\">__rq_for_each_bio</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#rq\">rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#iv\">iv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#virt\">virt</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a>-><a class=\"id\" href=\"#bip_sector\">bip_sector</a> &amp; 0xffffffff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip_for_each_vec\">bip_for_each_vec</a>(<a class=\"id\" href=\"#iv\">iv</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#iv\">iv</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#iv\">iv</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0 ; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#iv\">iv</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a> ; <a class=\"id\" href=\"#j\">j</a> += <a class=\"id\" href=\"#tuple_sz\">tuple_sz</a>, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a>) != <a class=\"id\" href=\"#virt\">virt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> = <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#phys\">phys</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#virt\">virt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys\">phys</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#sdt\">sdt</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#sdt\">sdt</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"%s: virt %u, phys %u, ref %u, app %4x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#virt\">virt</a>, <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#be16_to_cpu\">be16_to_cpu</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a>));", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EILSEQ\">EILSEQ</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remap physical sector values in the reference tag to the virtual</span>", 
"<span class=\"comment\"> * values expected by the block layer.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sd_dif_complete\">sd_dif_complete</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, unsigned int <a class=\"id\" href=\"#good_bytes\">good_bytes</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#tuple_sz\">tuple_sz</a> = sizeof(struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> *<a class=\"id\" href=\"#sdt\">sdt</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#sectors\">sectors</a>, <a class=\"id\" href=\"#sector_sz\">sector_sz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#virt\">virt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#protection_type\">protection_type</a> == <a class=\"id\" href=\"#SD_DIF_TYPE3_PROTECTION\">SD_DIF_TYPE3_PROTECTION</a> || <a class=\"id\" href=\"#good_bytes\">good_bytes</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_sz\">sector_sz</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> = <a class=\"id\" href=\"#good_bytes\">good_bytes</a> / <a class=\"id\" href=\"#sector_sz\">sector_sz</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>) &amp; 0xffffffff;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_sz\">sector_sz</a> == 4096)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys\">phys</a> >>= 3;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rq_for_each_bio\">__rq_for_each_bio</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#iv\">iv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#virt\">virt</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a>-><a class=\"id\" href=\"#bip_sector\">bip_sector</a> &amp; 0xffffffff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip_for_each_vec\">bip_for_each_vec</a>(<a class=\"id\" href=\"#iv\">iv</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#iv\">iv</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#iv\">iv</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0 ; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#iv\">iv</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a> ; <a class=\"id\" href=\"#j\">j</a> += <a class=\"id\" href=\"#tuple_sz\">tuple_sz</a>, <a class=\"id\" href=\"#sdt\">sdt</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sectors\">sectors</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#sdt\">sdt</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(<a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a>) != <a class=\"id\" href=\"#phys\">phys</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#app_tag\">app_tag</a> != 0xffff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> = 0xffffffff; <span class=\"comment\">/* Bad ref */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdt\">sdt</a>-><a class=\"id\" href=\"#ref_tag\">ref_tag</a> = <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#virt\">virt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#virt\">virt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys\">phys</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#sdt\">sdt</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
];
xr_frag_insert('l/e9/a7fcc18a655c2b62527fe9ca8cc7382a7e0e0f.xr', __xr_tmp);
