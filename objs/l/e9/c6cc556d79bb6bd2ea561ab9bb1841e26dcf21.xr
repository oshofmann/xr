var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>__dev_alloc_name - allocate a name for a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: network namespace to allocate the device name in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: name format string</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf:  scratch buffer and result name string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Passed a format string - eg \"lt%d\" it will try and find a suitable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>id. It scans list of devices to build up a free map, then chooses</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the first empty slot. The caller must hold the dev_base or rtnl lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>while allocating the name and adding the device in order to avoid</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>duplicates.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Limited to bits_per_byte * page size devices (ie 32K on most platforms).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the number of the unit assigned or a negative errno code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#__dev_alloc_name\">__dev_alloc_name</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#max_netdevices\">max_netdevices</a> = 8*<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#inuse\">inuse</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#strnchr\">strnchr</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>-1, '%');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Verify the string as this thing may have come from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the user.  There must be either one \"%d\" and no other \"%\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * characters.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>[1] != 'd' || <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#p\">p</a> + 2, '%'))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Use one page as a bit array of possible slots */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inuse\">inuse</a> = (unsigned long *) <a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inuse\">inuse</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev\">for_each_netdev</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#d\">d</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 0 || <a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#max_netdevices\">max_netdevices</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  avoid cases where sscanf is not exact inverse of printf */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#inuse\">inuse</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_first_zero_bit\">find_first_zero_bit</a>(<a class=\"id\" href=\"#inuse\">inuse</a>, <a class=\"id\" href=\"#max_netdevices\">max_netdevices</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long) <a class=\"id\" href=\"#inuse\">inuse</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> != <a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__dev_get_by_name\">__dev_get_by_name</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#buf\">buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* It is possible to run out of possible slots</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when the name is long and there isn't enough space left</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the digits, or if all bits are used.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENFILE\">ENFILE</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_alloc_name - allocate a name for a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: name format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Passed a format string - eg \"lt%d\" it will try and find a suitable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>id. It scans list of devices to build up a free map, then chooses</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the first empty slot. The caller must hold the dev_base or rtnl lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>while allocating the name and adding the device in order to avoid</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>duplicates.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Limited to bits_per_byte * page size devices (ie 32K on most platforms).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the number of the unit assigned or a negative errno code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#dev_alloc_name\">dev_alloc_name</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__dev_alloc_name\">__dev_alloc_name</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_alloc_name\">dev_alloc_name</a>);", 
"", 
"static int <a class=\"id\" href=\"#dev_get_valid_name\">dev_get_valid_name</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev_valid_name\">dev_valid_name</a>(<a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fmt\">fmt</a> && <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#name\">name</a>, '%'))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev_alloc_name\">dev_alloc_name</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#__dev_get_by_name\">__dev_get_by_name</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> != <a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_change_name - change name of a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newname: name (or format string) must be at least IFNAMSIZ</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Change name of a device, can pass format strings \"eth%d\".</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for wildcarding.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_change_name\">dev_change_name</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#newname\">newname</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#oldname\">oldname</a>[<a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#newname\">newname</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#oldname\">oldname</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dev_get_valid_name\">dev_get_valid_name</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#newname\">newname</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#rollback\">rollback</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#device_rename\">device_rename</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#oldname\">oldname</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_bh\">write_lock_bh</a>(&amp;<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name_hlist\">name_hlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_bh\">write_lock_bh</a>(&amp;<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name_hlist\">name_hlist</a>, <a class=\"id\" href=\"#dev_name_hash\">dev_name_hash</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_CHANGENAME\">NETDEV_CHANGENAME</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_to_errno\">notifier_to_errno</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* err &gt;= 0 after dev_alloc_name() or stores the first errno */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#oldname\">oldname</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#rollback\">rollback</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s: name change rollback failed: %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_set_alias - change ifalias of a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@alias: name up to IFALIASZ</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: limit of bytes to copy from info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set ifalias for a device,</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_set_alias\">dev_set_alias</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#alias\">alias</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#IFALIASZ\">IFALIASZ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifalias\">ifalias</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifalias\">ifalias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifalias\">ifalias</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifalias\">ifalias</a> = <a class=\"id\" href=\"#krealloc\">krealloc</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifalias\">ifalias</a>, <a class=\"id\" href=\"#len\">len</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifalias\">ifalias</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifalias\">ifalias</a>, <a class=\"id\" href=\"#alias\">alias</a>, <a class=\"id\" href=\"#len\">len</a>+1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_features_change - device changes features</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to cause notification</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called to indicate a device has changed features.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netdev_features_change\">netdev_features_change</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_FEAT_CHANGE\">NETDEV_FEAT_CHANGE</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netdev_features_change\">netdev_features_change</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_state_change - device changes state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to cause notification</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called to indicate a device has changed state. This function calls</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the notifier chains for netdev_chain and sends a NEWLINK message</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to the routing socket.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netdev_state_change\">netdev_state_change</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_CHANGE\">NETDEV_CHANGE</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtmsg_ifinfo\">rtmsg_ifinfo</a>(<a class=\"id\" href=\"#RTM_NEWLINK\">RTM_NEWLINK</a>, <a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netdev_state_change\">netdev_state_change</a>);", 
"", 
"int <a class=\"id\" href=\"#netdev_bonding_change\">netdev_bonding_change</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned long <a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netdev_bonding_change\">netdev_bonding_change</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_load <span class=\"ts\"/>- load a network module</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: name of interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If a network interface is not present and the process has suitable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>privileges this function loads the module. If module loading is not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>available in this kernel then it becomes a nop.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#dev_load\">dev_load</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_get_by_name_rcu\">dev_get_by_name_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_NET_ADMIN\">CAP_NET_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_load\">dev_load</a>);", 
"", 
"static int <a class=\"id\" href=\"#__dev_open\">__dev_open</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device_ops\">net_device_ops</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Is it even present?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#netif_device_present\">netif_device_present</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_PRE_UP\">NETDEV_PRE_UP</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_to_errno\">notifier_to_errno</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Call device private open method</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_START\">__LINK_STATE_START</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_validate_addr\">ndo_validate_addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_validate_addr\">ndo_validate_addr</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_open\">ndo_open</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_open\">ndo_open</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>If it went open OK then:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_START\">__LINK_STATE_START</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Set the flags.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Enable NET_DMA</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_dmaengine_get\">net_dmaengine_get</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Initialize multicasting status</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_set_rx_mode\">dev_set_rx_mode</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Wakeup transmit queue engine</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_activate\">dev_activate</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_open<span class=\"ts\"/>- prepare an interface for use.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev:<span class=\"ts\"/>device to open</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Takes a device from down to up state. The device's private open</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function is invoked and then the multicast lists are loaded. Finally</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the device is moved into the up state and a %NETDEV_UP message is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sent to the netdev notifier chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Calling this function on an active interface is a nop. On a failure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a negative errno code is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_open\">dev_open</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Is it already up?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Open device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__dev_open\">__dev_open</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>... and announce new interface.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtmsg_ifinfo\">rtmsg_ifinfo</a>(<a class=\"id\" href=\"#RTM_NEWLINK\">RTM_NEWLINK</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>|<a class=\"id\" href=\"#IFF_RUNNING\">IFF_RUNNING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_UP\">NETDEV_UP</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_open\">dev_open</a>);", 
"", 
"static int <a class=\"id\" href=\"#__dev_close\">__dev_close</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device_ops\">net_device_ops</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Tell people we are going down, so that they can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>prepare to death, when device is still operating.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_GOING_DOWN\">NETDEV_GOING_DOWN</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_START\">__LINK_STATE_START</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Synchronize to scheduled poll. We cannot touch poll list,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it can be even on different cpu. So just clear netif_running().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dev-&gt;stop() will invoke napi_disable() on all of it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * napi_struct instances on this device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_clear_bit\">smp_mb__after_clear_bit</a>(); <span class=\"comment\">/* Commit netif_running(). */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_deactivate\">dev_deactivate</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Call the device specific close. This cannot fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Only if device is UP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>We allow it to be called even after a DETACH hot-plug</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_stop\">ndo_stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_stop\">ndo_stop</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Device is now down.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Shutdown NET_DMA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net_dmaengine_put\">net_dmaengine_put</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_close - shutdown an interface.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to shutdown</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function moves an active device into down state. A</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%NETDEV_GOING_DOWN is sent to the netdev notifier chain. The device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is then deactivated and finally a %NETDEV_DOWN is sent to the notifier</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>chain.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_close\">dev_close</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dev_close\">__dev_close</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tell people we are down</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtmsg_ifinfo\">rtmsg_ifinfo</a>(<a class=\"id\" href=\"#RTM_NEWLINK\">RTM_NEWLINK</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>|<a class=\"id\" href=\"#IFF_RUNNING\">IFF_RUNNING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_DOWN\">NETDEV_DOWN</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_close\">dev_close</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_disable_lro - disable Large Receive Offload on a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Disable Large Receive Offload (LRO) on a net device.  Must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called under RTNL.  This is needed if received packets may be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>forwarded to another interface.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_disable_lro\">dev_disable_lro</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a>-><a class=\"id\" href=\"#get_flags\">get_flags</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a>-><a class=\"id\" href=\"#set_flags\">set_flags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a>-><a class=\"id\" href=\"#get_flags\">get_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ETH_FLAG_LRO\">ETH_FLAG_LRO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ETH_FLAG_LRO\">ETH_FLAG_LRO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a>-><a class=\"id\" href=\"#set_flags\">set_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_LRO\">NETIF_F_LRO</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_disable_lro\">dev_disable_lro</a>);", 
"", 
"", 
"static int <a class=\"id\" href=\"#dev_boot_phase\">dev_boot_phase</a> = 1;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Device change register/unregister. These are not inline or static</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as we export them to the world.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_netdevice_notifier - register a network notifier block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nb: notifier</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Register a notifier to be called when network device events occur.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The notifier passed is linked into the kernel structures and must</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not be reused until it has been unregistered. A negative errno code</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned on a failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>When registered all registration and up events are replayed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to the new notifier to allow device to have a race free</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>view of the network device list.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#register_netdevice_notifier\">register_netdevice_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#raw_notifier_chain_register\">raw_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#netdev_chain\">netdev_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_boot_phase\">dev_boot_phase</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_net\">for_each_net</a>(<a class=\"id\" href=\"#net\">net</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev\">for_each_netdev</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#notifier_call\">notifier_call</a>(<a class=\"id\" href=\"#nb\">nb</a>, <a class=\"id\" href=\"#NETDEV_REGISTER\">NETDEV_REGISTER</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#notifier_to_errno\">notifier_to_errno</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#rollback\">rollback</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#notifier_call\">notifier_call</a>(<a class=\"id\" href=\"#nb\">nb</a>, <a class=\"id\" href=\"#NETDEV_UP\">NETDEV_UP</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#rollback\">rollback</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_net\">for_each_net</a>(<a class=\"id\" href=\"#net\">net</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev\">for_each_netdev</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#notifier_call\">notifier_call</a>(<a class=\"id\" href=\"#nb\">nb</a>, <a class=\"id\" href=\"#NETDEV_GOING_DOWN\">NETDEV_GOING_DOWN</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#notifier_call\">notifier_call</a>(<a class=\"id\" href=\"#nb\">nb</a>, <a class=\"id\" href=\"#NETDEV_DOWN\">NETDEV_DOWN</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#notifier_call\">notifier_call</a>(<a class=\"id\" href=\"#nb\">nb</a>, <a class=\"id\" href=\"#NETDEV_UNREGISTER\">NETDEV_UNREGISTER</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#notifier_call\">notifier_call</a>(<a class=\"id\" href=\"#nb\">nb</a>, <a class=\"id\" href=\"#NETDEV_UNREGISTER_BATCH\">NETDEV_UNREGISTER_BATCH</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_notifier_chain_unregister\">raw_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#netdev_chain\">netdev_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_netdevice_notifier\">register_netdevice_notifier</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unregister_netdevice_notifier - unregister a network notifier block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nb: notifier</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unregister a notifier previously registered by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_netdevice_notifier(). The notifier is unlinked into the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kernel structures and may then be reused. A negative errno code</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned on a failure.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#unregister_netdevice_notifier\">unregister_netdevice_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#raw_notifier_chain_unregister\">raw_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#netdev_chain\">netdev_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_netdevice_notifier\">unregister_netdevice_notifier</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>call_netdevice_notifiers - call all network notifier blocks</span>", 
"<span class=\"comment\"> *      @val: value passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *      @dev: net_device pointer passed unmodified to notifier function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Call all network notifier blocks.  Parameters and return value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are as for raw_notifier_call_chain().</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_notifier_call_chain\">raw_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#netdev_chain\">netdev_chain</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/* When &gt; 0 there are consumers of rx skb time stamps */</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#netstamp_needed\">netstamp_needed</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"", 
"void <a class=\"id\" href=\"#net_enable_timestamp\">net_enable_timestamp</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#netstamp_needed\">netstamp_needed</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#net_enable_timestamp\">net_enable_timestamp</a>);", 
"", 
"void <a class=\"id\" href=\"#net_disable_timestamp\">net_disable_timestamp</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#netstamp_needed\">netstamp_needed</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#net_disable_timestamp\">net_disable_timestamp</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#net_timestamp_set\">net_timestamp_set</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#netstamp_needed\">netstamp_needed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__net_timestamp\">__net_timestamp</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#net_timestamp_check\">net_timestamp_check</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> && <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#netstamp_needed\">netstamp_needed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__net_timestamp\">__net_timestamp</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dev_forward_skb - loopback an skb to another netif</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: destination network device</span>", 
"<span class=\"comment\"> * @skb: buffer to forward</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return values:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NET_RX_SUCCESS<span class=\"ts\"/>(no congestion)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NET_RX_DROP     (packet was dropped, but freed)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * dev_forward_skb can be used for injecting an skb from the</span>", 
"<span class=\"comment\"> * start_xmit function of one device into the receive queue</span>", 
"<span class=\"comment\"> * of another device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The receiving device may be in another namespace, so</span>", 
"<span class=\"comment\"> * we have to clear all information in the skb that could</span>", 
"<span class=\"comment\"> * impact namespace isolation.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_forward_skb\">dev_forward_skb</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_orphan\">skb_orphan</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_reset\">nf_reset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mtu\">mtu</a> + <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NET_RX_DROP\">NET_RX_DROP</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_set_dev\">skb_set_dev</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> = <a class=\"id\" href=\"#PACKET_HOST\">PACKET_HOST</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#eth_type_trans\">eth_type_trans</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#netif_rx\">netif_rx</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dev_forward_skb\">dev_forward_skb</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Support routine. Sends outgoing frames to any network</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>taps currently in use.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#dev_queue_xmit_nit\">dev_queue_xmit_nit</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#ptype\">ptype</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ACT\">CONFIG_NET_CLS_ACT</a>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> && (<a class=\"id\" href=\"#G_TC_FROM\">G_TC_FROM</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a>) &amp; <a class=\"id\" href=\"#AT_INGRESS\">AT_INGRESS</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_timestamp_set\">net_timestamp_set</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net_timestamp_set\">net_timestamp_set</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ptype\">ptype</a>, &amp;<a class=\"id\" href=\"#ptype_all\">ptype_all</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Never send packets back to the socket</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * they originated from - MvS (miquels@drinkel.ow.org)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#dev\">dev</a> || !<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#af_packet_priv\">af_packet_priv</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     (struct <a class=\"id\" href=\"#sock\">sock</a> *)<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#af_packet_priv\">af_packet_priv</a> != <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb2\">skb2</a> = <a class=\"id\" href=\"#skb_clone\">skb_clone</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb2\">skb2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skb-&gt;nh should be correctly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   set by sender, so that the second statement is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   just protection against buggy protocols.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_mac_header\">skb_reset_mac_header</a>(<a class=\"id\" href=\"#skb2\">skb2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#skb2\">skb2</a>) &lt; <a class=\"id\" href=\"#skb2\">skb2</a>-><a class=\"id\" href=\"#data\">data</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#skb2\">skb2</a>-><a class=\"id\" href=\"#network_header\">network_header</a> &gt; <a class=\"id\" href=\"#skb2\">skb2</a>-><a class=\"id\" href=\"#tail\">tail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"protocol %04x is \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"buggy, dev %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#skb2\">skb2</a>-><a class=\"id\" href=\"#protocol\">protocol</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_network_header\">skb_reset_network_header</a>(<a class=\"id\" href=\"#skb2\">skb2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb2\">skb2</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> = <a class=\"id\" href=\"#skb2\">skb2</a>-><a class=\"id\" href=\"#network_header\">network_header</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb2\">skb2</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> = <a class=\"id\" href=\"#PACKET_OUTGOING\">PACKET_OUTGOING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#skb2\">skb2</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ptype\">ptype</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Routine to help set real_num_tx_queues. To avoid skbs mapped to queues</span>", 
"<span class=\"comment\"> * greater then real_num_tx_queues stale skbs on the qdisc must be flushed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netif_set_real_num_tx_queues\">netif_set_real_num_tx_queues</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#txq\">txq</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#real_num\">real_num</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#txq\">txq</a> &gt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_tx_queues\">num_tx_queues</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#txq\">txq</a> &gt; <a class=\"id\" href=\"#real_num\">real_num</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a> = <a class=\"id\" href=\"#txq\">txq</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#txq\">txq</a> &lt; <a class=\"id\" href=\"#real_num\">real_num</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a> = <a class=\"id\" href=\"#txq\">txq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qdisc_reset_all_tx_gt\">qdisc_reset_all_tx_gt</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#txq\">txq</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netif_set_real_num_tx_queues\">netif_set_real_num_tx_queues</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__netif_reschedule\">__netif_reschedule</a>(struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#next_sched\">next_sched</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue_tailp\">output_queue_tailp</a> = <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue_tailp\">output_queue_tailp</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#next_sched\">next_sched</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq_irqoff\">raise_softirq_irqoff</a>(<a class=\"id\" href=\"#NET_TX_SOFTIRQ\">NET_TX_SOFTIRQ</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__netif_schedule\">__netif_schedule</a>(struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#__QDISC_STATE_SCHED\">__QDISC_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__netif_reschedule\">__netif_reschedule</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__netif_schedule\">__netif_schedule</a>);", 
"", 
"void <a class=\"id\" href=\"#dev_kfree_skb_irq\">dev_kfree_skb_irq</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#completion_queue\">completion_queue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#completion_queue\">completion_queue</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq_irqoff\">raise_softirq_irqoff</a>(<a class=\"id\" href=\"#NET_TX_SOFTIRQ\">NET_TX_SOFTIRQ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_kfree_skb_irq\">dev_kfree_skb_irq</a>);", 
"", 
"void <a class=\"id\" href=\"#dev_kfree_skb_any\">dev_kfree_skb_any</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_irq\">in_irq</a>() || <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_kfree_skb_irq\">dev_kfree_skb_irq</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_kfree_skb\">dev_kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_kfree_skb_any\">dev_kfree_skb_any</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netif_device_detach - mark device as removed</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mark device as removed from system and therefore no longer available.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netif_device_detach\">netif_device_detach</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_PRESENT\">__LINK_STATE_PRESENT</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#netif_running\">netif_running</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_tx_stop_all_queues\">netif_tx_stop_all_queues</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netif_device_detach\">netif_device_detach</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netif_device_attach - mark device as attached</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mark device as attached from system and restart if needed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netif_device_attach\">netif_device_attach</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_PRESENT\">__LINK_STATE_PRESENT</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#netif_running\">netif_running</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_tx_wake_all_queues\">netif_tx_wake_all_queues</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__netdev_watchdog_up\">__netdev_watchdog_up</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netif_device_attach\">netif_device_attach</a>);", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#can_checksum_protocol\">can_checksum_protocol</a>(unsigned long <a class=\"id\" href=\"#features\">features</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#protocol\">protocol</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_GEN_CSUM\">NETIF_F_GEN_CSUM</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_IP_CSUM\">NETIF_F_IP_CSUM</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_IP\">ETH_P_IP</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_IPV6_CSUM\">NETIF_F_IPV6_CSUM</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_IPV6\">ETH_P_IPV6</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_FCOE_CRC\">NETIF_F_FCOE_CRC</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_FCOE\">ETH_P_FCOE</a>)));", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dev_can_checksum\">dev_can_checksum</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#can_checksum_protocol\">can_checksum_protocol</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_8021Q\">ETH_P_8021Q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vlan_ethhdr\">vlan_ethhdr</a> *<a class=\"id\" href=\"#veh\">veh</a> = (struct <a class=\"id\" href=\"#vlan_ethhdr\">vlan_ethhdr</a> *)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#can_checksum_protocol\">can_checksum_protocol</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vlan_features\">vlan_features</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#veh\">veh</a>-><a class=\"id\" href=\"#h_vlan_encapsulated_proto\">h_vlan_encapsulated_proto</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_dev_set -- assign a new device to a buffer</span>", 
"<span class=\"comment\"> * @skb: buffer for the new device</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If an skb is owned by a device already, we have to reset</span>", 
"<span class=\"comment\"> * all data private to the namespace a device belongs to</span>", 
"<span class=\"comment\"> * before assigning it a new device.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"void <a class=\"id\" href=\"#skb_set_dev\">skb_set_dev</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_drop\">skb_dst_drop</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> && !<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#secpath_reset\">secpath_reset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nf_reset\">nf_reset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_init_secmark\">skb_init_secmark</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mark\">mark</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#priority\">priority</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_trace\">nf_trace</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ipvs_property\">ipvs_property</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_SCHED\">CONFIG_NET_SCHED</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_index\">tc_index</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_set_dev\">skb_set_dev</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NET_NS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Invalidate hardware checksum when packet is to be mangled, and</span>", 
"<span class=\"comment\"> * complete checksum manually on outgoing path.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#skb_checksum_help\">skb_checksum_help</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_set_summed\">out_set_summed</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Let GSO fix up the checksum. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_set_summed\">out_set_summed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_start\">csum_start</a> - <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#skb_checksum\">skb_checksum</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#offset\">offset</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_offset\">csum_offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#offset\">offset</a> + sizeof(<a class=\"id\" href=\"#__sum16\">__sum16</a>) &gt; <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#skb_clone_writable\">skb_clone_writable</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#offset\">offset</a> + sizeof(<a class=\"id\" href=\"#__sum16\">__sum16</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#__sum16\">__sum16</a> *)(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a>) = <a class=\"id\" href=\"#csum_fold\">csum_fold</a>(<a class=\"id\" href=\"#csum\">csum</a>);", 
"<a class=\"id\" href=\"#out_set_summed\">out_set_summed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_checksum_help\">skb_checksum_help</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_gso_segment - Perform segmentation on skb.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to segment</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@features: features for the output path (see dev-&gt;features)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function segments the given skb and returns a list of segments.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It may return NULL if the skb requires no segmentation.  This is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>only possible when GSO is used for verifying header integrity.</span>", 
];
xr_frag_insert('l/e9/c6cc556d79bb6bd2ea561ab9bb1841e26dcf21.xr', __xr_tmp);
