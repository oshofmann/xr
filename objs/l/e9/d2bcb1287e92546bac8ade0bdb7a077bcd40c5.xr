var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  fs/eventpoll.c (Efficient event retrieval implementation)</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001,...,2009<span class=\"ts\"/> Davide Libenzi</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> *  (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Davide Libenzi &lt;davidel@xmailserver.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rbtree\">rbtree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#eventpoll\">eventpoll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#anon_inodes\">anon_inodes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * There are three level of locking required by epoll :</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) epmutex (mutex)</span>", 
"<span class=\"comment\"> * 2) ep-&gt;mtx (mutex)</span>", 
"<span class=\"comment\"> * 3) ep-&gt;lock (spinlock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The acquire order is the one listed above, from 1 to 3.</span>", 
"<span class=\"comment\"> * We need a spinlock (ep-&gt;lock) because we manipulate objects</span>", 
"<span class=\"comment\"> * from inside the poll callback, that might be triggered from</span>", 
"<span class=\"comment\"> * a wake_up() that in turn might be called from IRQ context.</span>", 
"<span class=\"comment\"> * So we can't sleep inside the poll callback and hence we need</span>", 
"<span class=\"comment\"> * a spinlock. During the event transfer loop (from kernel to</span>", 
"<span class=\"comment\"> * user space) we could end up sleeping due a copy_to_user(), so</span>", 
"<span class=\"comment\"> * we need a lock that will allow us to sleep. This lock is a</span>", 
"<span class=\"comment\"> * mutex (ep-&gt;mtx). It is acquired during the event transfer loop,</span>", 
"<span class=\"comment\"> * during epoll_ctl(EPOLL_CTL_DEL) and during eventpoll_release_file().</span>", 
"<span class=\"comment\"> * Then we also need a global mutex to serialize eventpoll_release_file()</span>", 
"<span class=\"comment\"> * and ep_free().</span>", 
"<span class=\"comment\"> * This mutex is acquired by ep_free() during the epoll file</span>", 
"<span class=\"comment\"> * cleanup path and it is also acquired by eventpoll_release_file()</span>", 
"<span class=\"comment\"> * if a file has been pushed inside an epoll set and it is then</span>", 
"<span class=\"comment\"> * close()d without a previous call toepoll_ctl(EPOLL_CTL_DEL).</span>", 
"<span class=\"comment\"> * It is possible to drop the \"ep-&gt;mtx\" and to use the global</span>", 
"<span class=\"comment\"> * mutex \"epmutex\" (together with \"ep-&gt;lock\") to have it working,</span>", 
"<span class=\"comment\"> * but having \"ep-&gt;mtx\" will make the interface more scalable.</span>", 
"<span class=\"comment\"> * Events that require holding \"epmutex\" are very rare, while for</span>", 
"<span class=\"comment\"> * normal operations the epoll private \"ep-&gt;mtx\" will guarantee</span>", 
"<span class=\"comment\"> * a better scalability.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Epoll private bits inside the event mask */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EP_PRIVATE_BITS\">EP_PRIVATE_BITS</a> (<a class=\"id\" href=\"#EPOLLONESHOT\">EPOLLONESHOT</a> | <a class=\"id\" href=\"#EPOLLET\">EPOLLET</a>)", 
"", 
"<span class=\"comment\">/* Maximum number of nesting allowed inside epoll sets */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EP_MAX_NESTS\">EP_MAX_NESTS</a> 4", 
"", 
"<span class=\"comment\">/* Maximum msec timeout value storeable in a long int */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EP_MAX_MSTIMEO\">EP_MAX_MSTIMEO</a> <a class=\"id\" href=\"#min\">min</a>(1000ULL * <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a> / <a class=\"id\" href=\"#HZ\">HZ</a>, (<a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a> - 999ULL) / <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EP_MAX_EVENTS\">EP_MAX_EVENTS</a> (<a class=\"id\" href=\"#INT_MAX\">INT_MAX</a> / sizeof(struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EP_UNACTIVE_PTR\">EP_UNACTIVE_PTR</a> ((void *) -1L)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EP_ITEM_COST\">EP_ITEM_COST</a> (sizeof(struct <a class=\"id\" href=\"#epitem\">epitem</a>) + sizeof(struct <a class=\"id\" href=\"#eppoll_entry\">eppoll_entry</a>))", 
"", 
"struct <a class=\"id\" href=\"#epoll_filefd\">epoll_filefd</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fd\">fd</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure used to track possible nested calls, for too deep recursions</span>", 
"<span class=\"comment\"> * and loop cycles.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#nested_call_node\">nested_call_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#llink\">llink</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This structure is used as collector for nested calls, to check for</span>", 
"<span class=\"comment\"> * maximum recursion dept and loop cycles.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#nested_calls\">nested_calls</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tasks_call_list\">tasks_call_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each file descriptor added to the eventpoll interface will</span>", 
"<span class=\"comment\"> * have an entry of this type linked to the \"rbr\" RB tree.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#epitem\">epitem</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* RB tree node used to link this structure to the eventpoll RB tree */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> <a class=\"id\" href=\"#rbn\">rbn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* List header used to link this structure to the eventpoll ready list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#rdllink\">rdllink</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Works together \"struct eventpoll\"-&gt;ovflist in keeping the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single linked chain of items.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The file descriptor information this item refers to */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epoll_filefd\">epoll_filefd</a> <a class=\"id\" href=\"#ffd\">ffd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of active wait queue attached to poll operations */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nwait\">nwait</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* List containing poll wait queues */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#pwqlist\">pwqlist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The \"container\" of this item */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* List header used to link this item to the \"struct file\" items list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#fllink\">fllink</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The structure that describe the interested events and the source fd */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> <a class=\"id\" href=\"#event\">event</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This structure is stored inside the \"private_data\" member of the file</span>", 
"<span class=\"comment\"> * structure and rapresent the main data sructure for the eventpoll</span>", 
"<span class=\"comment\"> * interface.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Protect the this structure access */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This mutex is used to ensure that files are not removed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while epoll is using them. This is held during the event</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * collection loop, the file cleanup path, the epoll file exit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * code and the ctl operations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#mtx\">mtx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait queue used by sys_epoll_wait() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#wq\">wq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait queue used by file-&gt;poll() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#poll_wait\">poll_wait</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* List of ready file descriptors */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#rdllist\">rdllist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* RB tree root used to store monitored fd structs */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#rbr\">rbr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is a single linked list that chains all the \"struct epitem\" that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * happened while transfering ready events to userspace w/out</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding -&gt;lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#ovflist\">ovflist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The user that created the eventpoll descriptor */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#user\">user</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Wait structure used by the poll hooks */</span>", 
"struct <a class=\"id\" href=\"#eppoll_entry\">eppoll_entry</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* List header used to link this structure to the \"struct epitem\" */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#llink\">llink</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The \"base\" pointer is set to the container \"struct epitem\" */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait queue item that will be linked to the target file wait</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue head.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The wait queue head that linked the \"wait\" wait queue item */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#whead\">whead</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Wrapper struct used by poll queueing */</span>", 
"struct <a class=\"id\" href=\"#ep_pqueue\">ep_pqueue</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_table\">poll_table</a> <a class=\"id\" href=\"#pt\">pt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Used by the ep_send_events() function as callback private data */</span>", 
"struct <a class=\"id\" href=\"#ep_send_events_data\">ep_send_events_data</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxevents\">maxevents</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#events\">events</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Configuration options available inside /proc/sys/fs/epoll/</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* Maximum number of epoll watched descriptors, per user */</span>", 
"static int <a class=\"id\" href=\"#max_user_watches\">max_user_watches</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This mutex is used to serialize ep_free() and eventpoll_release_file().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#epmutex\">epmutex</a>);", 
"", 
"<span class=\"comment\">/* Used for safe wake up implementation */</span>", 
"static struct <a class=\"id\" href=\"#nested_calls\">nested_calls</a> <a class=\"id\" href=\"#poll_safewake_ncalls\">poll_safewake_ncalls</a>;", 
"", 
"<span class=\"comment\">/* Used to call file's f_op-&gt;poll() under the nested calls boundaries */</span>", 
"static struct <a class=\"id\" href=\"#nested_calls\">nested_calls</a> <a class=\"id\" href=\"#poll_readywalk_ncalls\">poll_readywalk_ncalls</a>;", 
"", 
"<span class=\"comment\">/* Slab cache used to allocate \"struct epitem\" */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#epi_cache\">epi_cache</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/* Slab cache used to allocate \"struct eppoll_entry\" */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#pwq_cache\">pwq_cache</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int <a class=\"id\" href=\"#zero\">zero</a>;", 
"", 
"<a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#epoll_table\">epoll_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"max_user_watches\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#max_user_watches\">max_user_watches</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#zero\">zero</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{ }", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSCTL */</span>", 
"", 
"", 
"<span class=\"comment\">/* Setup the structure that is used as key for the RB tree */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ep_set_ffd\">ep_set_ffd</a>(struct <a class=\"id\" href=\"#epoll_filefd\">epoll_filefd</a> *<a class=\"id\" href=\"#ffd\">ffd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ffd\">ffd</a>-><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ffd\">ffd</a>-><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#fd\">fd</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Compare RB tree keys */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ep_cmp_ffd\">ep_cmp_ffd</a>(struct <a class=\"id\" href=\"#epoll_filefd\">epoll_filefd</a> *<a class=\"id\" href=\"#p1\">p1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#epoll_filefd\">epoll_filefd</a> *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#file\">file</a> &gt; <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#file\">file</a> ? +1:", 
"<span class=\"ts\"/>        (<a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#file\">file</a> &lt; <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#file\">file</a> ? -1 : <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#fd\">fd</a> - <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#fd\">fd</a>));", 
"}", 
"", 
"<span class=\"comment\">/* Tells us if the item is currently linked */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ep_is_linked\">ep_is_linked</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Get the \"struct epitem\" from a wait queue pointer */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#ep_item_from_wait\">ep_item_from_wait</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#eppoll_entry\">eppoll_entry</a>, <a class=\"id\" href=\"#wait\">wait</a>)-><a class=\"id\" href=\"#base\">base</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Get the \"struct epitem\" from an epoll queue wrapper */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#ep_item_from_epqueue\">ep_item_from_epqueue</a>(<a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#ep_pqueue\">ep_pqueue</a>, <a class=\"id\" href=\"#pt\">pt</a>)-><a class=\"id\" href=\"#epi\">epi</a>;", 
"}", 
];
xr_frag_insert('l/e9/d2bcb1287e92546bac8ade0bdb7a077bcd40c5.xr', __xr_tmp);
