var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#poll_select_copy_remaining\">poll_select_copy_remaining</a>(&amp;<a class=\"id\" href=\"#end_time\">end_time</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, 0, <a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ERESTARTNOHAND\">ERESTARTNOHAND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't restore the signal mask yet. Let do_signal() deliver</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the signal on the way back to userspace, before the signal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mask is restored.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sigmask\">sigmask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#saved_sigmask\">saved_sigmask</a>, &amp;<a class=\"id\" href=\"#sigsaved\">sigsaved</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#sigsaved\">sigsaved</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_restore_sigmask\">set_restore_sigmask</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#sigmask\">sigmask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigprocmask\">sigprocmask</a>(<a class=\"id\" href=\"#SIG_SETMASK\">SIG_SETMASK</a>, &amp;<a class=\"id\" href=\"#sigsaved\">sigsaved</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Most architectures can't handle 7-argument syscalls. So we provide a</span>", 
"<span class=\"comment\"> * 6-argument version where the sixth argument is a pointer to a structure</span>", 
"<span class=\"comment\"> * which has a pointer to the sigset_t itself followed by a size_t containing</span>", 
"<span class=\"comment\"> * the sigset size.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE6\">SYSCALL_DEFINE6</a>(<a class=\"id\" href=\"#pselect6\">pselect6</a>, int, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#fd_set\">fd_set</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#inp\">inp</a>, <a class=\"id\" href=\"#fd_set\">fd_set</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#outp\">outp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd_set\">fd_set</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#exp\">exp</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tsp\">tsp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#sigsetsize\">sigsetsize</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sig\">sig</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#sig\">sig</a>, sizeof(void *)+sizeof(<a class=\"id\" href=\"#size_t\">size_t</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#up\">up</a>, (<a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#sig\">sig</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#sigsetsize\">sigsetsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)(<a class=\"id\" href=\"#sig\">sig</a>+sizeof(void *))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_pselect\">do_pselect</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#inp\">inp</a>, <a class=\"id\" href=\"#outp\">outp</a>, <a class=\"id\" href=\"#exp\">exp</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, <a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#sigsetsize\">sigsetsize</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* HAVE_SET_RESTORE_SIGMASK */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_SYS_OLD_SELECT\">__ARCH_WANT_SYS_OLD_SELECT</a>", 
"struct <a class=\"id\" href=\"#sel_arg_struct\">sel_arg_struct</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd_set\">fd_set</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#inp\">inp</a>, *<a class=\"id\" href=\"#outp\">outp</a>, *<a class=\"id\" href=\"#exp\">exp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#tvp\">tvp</a>;", 
"};", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#old_select\">old_select</a>, struct <a class=\"id\" href=\"#sel_arg_struct\">sel_arg_struct</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_arg_struct\">sel_arg_struct</a> <a class=\"id\" href=\"#a\">a</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#arg\">arg</a>, sizeof(<a class=\"id\" href=\"#a\">a</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_select\">sys_select</a>(<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#inp\">inp</a>, <a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#outp\">outp</a>, <a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#exp\">exp</a>, <a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#tvp\">tvp</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#poll_list\">poll_list</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_list\">poll_list</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pollfd\">pollfd</a> <a class=\"id\" href=\"#entries\">entries</a>[0];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#POLLFD_PER_PAGE\">POLLFD_PER_PAGE</a>  ((<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-sizeof(struct <a class=\"id\" href=\"#poll_list\">poll_list</a>)) / sizeof(struct <a class=\"id\" href=\"#pollfd\">pollfd</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fish for pollable events on the pollfd-&gt;fd file descriptor. We're only</span>", 
"<span class=\"comment\"> * interested in events matching the pollfd-&gt;events mask, and the result</span>", 
"<span class=\"comment\"> * matching that mask is both recorded in pollfd-&gt;revents and returned. The</span>", 
"<span class=\"comment\"> * pwait poll_table will be used by the fd-provided poll handler for waiting,</span>", 
"<span class=\"comment\"> * if non-NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#do_pollfd\">do_pollfd</a>(struct <a class=\"id\" href=\"#pollfd\">pollfd</a> *<a class=\"id\" href=\"#pollfd\">pollfd</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#pwait\">pwait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fd\">fd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#pollfd\">pollfd</a>-><a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fd\">fd</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#fput_needed\">fput_needed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget_light\">fget_light</a>(<a class=\"id\" href=\"#fd\">fd</a>, &amp;<a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#POLLNVAL\">POLLNVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#DEFAULT_POLLMASK\">DEFAULT_POLLMASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#poll\">poll</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pwait\">pwait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwait\">pwait</a>-><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#pollfd\">pollfd</a>-><a class=\"id\" href=\"#events\">events</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#POLLERR\">POLLERR</a> | <a class=\"id\" href=\"#POLLHUP\">POLLHUP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#poll\">poll</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pwait\">pwait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mask out unneeded events. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> &= <a class=\"id\" href=\"#pollfd\">pollfd</a>-><a class=\"id\" href=\"#events\">events</a> | <a class=\"id\" href=\"#POLLERR\">POLLERR</a> | <a class=\"id\" href=\"#POLLHUP\">POLLHUP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pollfd\">pollfd</a>-><a class=\"id\" href=\"#revents\">revents</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_poll\">do_poll</a>(unsigned int <a class=\"id\" href=\"#nfds\">nfds</a>,  struct <a class=\"id\" href=\"#poll_list\">poll_list</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#poll_wqueues\">poll_wqueues</a> *<a class=\"id\" href=\"#wait\">wait</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#end_time\">end_time</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_table\">poll_table</a>* <a class=\"id\" href=\"#pt\">pt</a> = &amp;<a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#pt\">pt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expire\">expire</a>, *<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#timed_out\">timed_out</a> = 0, <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#slack\">slack</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Optimise the no-wait case */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_time\">end_time</a> && !<a class=\"id\" href=\"#end_time\">end_time</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> && !<a class=\"id\" href=\"#end_time\">end_time</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt\">pt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timed_out\">timed_out</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_time\">end_time</a> && !<a class=\"id\" href=\"#timed_out\">timed_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slack\">slack</a> = <a class=\"id\" href=\"#estimate_accuracy\">estimate_accuracy</a>(<a class=\"id\" href=\"#end_time\">end_time</a>);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_list\">poll_list</a> *<a class=\"id\" href=\"#walk\">walk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#list\">list</a>; <a class=\"id\" href=\"#walk\">walk</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pollfd\">pollfd</a> * <a class=\"id\" href=\"#pfd\">pfd</a>, * <a class=\"id\" href=\"#pfd_end\">pfd_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfd\">pfd</a> = <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfd_end\">pfd_end</a> = <a class=\"id\" href=\"#pfd\">pfd</a> + <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#pfd\">pfd</a> != <a class=\"id\" href=\"#pfd_end\">pfd_end</a>; <a class=\"id\" href=\"#pfd\">pfd</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Fish for events. If we found one, record it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and kill the poll_table, so we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * needlessly register any other waiters after</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this. They'll get immediately deregistered</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * when we break out and return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_pollfd\">do_pollfd</a>(<a class=\"id\" href=\"#pfd\">pfd</a>, <a class=\"id\" href=\"#pt\">pt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt\">pt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * All waiters have already been registered, so don't provide</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a poll_table to them on the next loop iteration.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt\">pt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> || <a class=\"id\" href=\"#timed_out\">timed_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is the first loop and we have a timeout</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * given, then we convert to ktime_t and set the to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pointer to the expiry value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_time\">end_time</a> && !<a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expire\">expire</a> = <a class=\"id\" href=\"#timespec_to_ktime\">timespec_to_ktime</a>(*<a class=\"id\" href=\"#end_time\">end_time</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = &amp;<a class=\"id\" href=\"#expire\">expire</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#poll_schedule_timeout\">poll_schedule_timeout</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#slack\">slack</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timed_out\">timed_out</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#N_STACK_PPS\">N_STACK_PPS</a> ((sizeof(<a class=\"id\" href=\"#stack_pps\">stack_pps</a>) - sizeof(struct <a class=\"id\" href=\"#poll_list\">poll_list</a>))  / \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#pollfd\">pollfd</a>))", 
"", 
"int <a class=\"id\" href=\"#do_sys_poll\">do_sys_poll</a>(struct <a class=\"id\" href=\"#pollfd\">pollfd</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ufds\">ufds</a>, unsigned int <a class=\"id\" href=\"#nfds\">nfds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#end_time\">end_time</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_wqueues\">poll_wqueues</a> <a class=\"id\" href=\"#table\">table</a>;", 
" <span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>, <a class=\"id\" href=\"#fdcount\">fdcount</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate small arguments on the stack to save memory and be</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   faster - use long to make sure the buffer is aligned properly</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   on 64 bit archs to avoid unaligned access */</span>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#stack_pps\">stack_pps</a>[<a class=\"id\" href=\"#POLL_STACK_ALLOC\">POLL_STACK_ALLOC</a>/sizeof(long)];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_list\">poll_list</a> *const <a class=\"id\" href=\"#head\">head</a> = (struct <a class=\"id\" href=\"#poll_list\">poll_list</a> *)<a class=\"id\" href=\"#stack_pps\">stack_pps</a>;", 
" <span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_list\">poll_list</a> *<a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#head\">head</a>;", 
" <span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#todo\">todo</a> = <a class=\"id\" href=\"#nfds\">nfds</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nfds\">nfds</a> &gt; <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_NOFILE\">RLIMIT_NOFILE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, <a class=\"id\" href=\"#nfds\">nfds</a>, <a class=\"id\" href=\"#N_STACK_PPS\">N_STACK_PPS</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#entries\">entries</a>, <a class=\"id\" href=\"#ufds\">ufds</a> + <a class=\"id\" href=\"#nfds\">nfds</a>-<a class=\"id\" href=\"#todo\">todo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#pollfd\">pollfd</a>) * <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fds\">out_fds</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#todo\">todo</a> -= <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#todo\">todo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#todo\">todo</a>, <a class=\"id\" href=\"#POLLFD_PER_PAGE\">POLLFD_PER_PAGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#poll_list\">poll_list</a>) + sizeof(struct <a class=\"id\" href=\"#pollfd\">pollfd</a>) * <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#walk\">walk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fds\">out_fds</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_initwait\">poll_initwait</a>(&amp;<a class=\"id\" href=\"#table\">table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdcount\">fdcount</a> = <a class=\"id\" href=\"#do_poll\">do_poll</a>(<a class=\"id\" href=\"#nfds\">nfds</a>, <a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#end_time\">end_time</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_freewait\">poll_freewait</a>(&amp;<a class=\"id\" href=\"#table\">table</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#head\">head</a>; <a class=\"id\" href=\"#walk\">walk</a>; <a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pollfd\">pollfd</a> *<a class=\"id\" href=\"#fds\">fds</a> = <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#j\">j</a>++, <a class=\"id\" href=\"#ufds\">ufds</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#fds\">fds</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#revents\">revents</a>, &amp;<a class=\"id\" href=\"#ufds\">ufds</a>-><a class=\"id\" href=\"#revents\">revents</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fds\">out_fds</a>;", 
"  <span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fdcount\">fdcount</a>;", 
"<a class=\"id\" href=\"#out_fds\">out_fds</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#walk\">walk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_list\">poll_list</a> *<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#walk\">walk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#do_restart_poll\">do_restart_poll</a>(struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#restart_block\">restart_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pollfd\">pollfd</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ufds\">ufds</a> = <a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#ufds\">ufds</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nfds\">nfds</a> = <a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#nfds\">nfds</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#end_time\">end_time</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#has_timeout\">has_timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_time\">end_time</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_time\">end_time</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = &amp;<a class=\"id\" href=\"#end_time\">end_time</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_sys_poll\">do_sys_poll</a>(<a class=\"id\" href=\"#ufds\">ufds</a>, <a class=\"id\" href=\"#nfds\">nfds</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EINTR\">EINTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#do_restart_poll\">do_restart_poll</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTART_RESTARTBLOCK\">ERESTART_RESTARTBLOCK</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#poll\">poll</a>, struct <a class=\"id\" href=\"#pollfd\">pollfd</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#ufds\">ufds</a>, unsigned int, <a class=\"id\" href=\"#nfds\">nfds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>long, <a class=\"id\" href=\"#timeout_msecs\">timeout_msecs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#end_time\">end_time</a>, *<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout_msecs\">timeout_msecs</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = &amp;<a class=\"id\" href=\"#end_time\">end_time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_select_set_timeout\">poll_select_set_timeout</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#timeout_msecs\">timeout_msecs</a> / <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NSEC_PER_MSEC\">NSEC_PER_MSEC</a> * (<a class=\"id\" href=\"#timeout_msecs\">timeout_msecs</a> % <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_sys_poll\">do_sys_poll</a>(<a class=\"id\" href=\"#ufds\">ufds</a>, <a class=\"id\" href=\"#nfds\">nfds</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EINTR\">EINTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#restart_block\">restart_block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a> = &amp;<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#restart_block\">restart_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#do_restart_poll\">do_restart_poll</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#ufds\">ufds</a> = <a class=\"id\" href=\"#ufds\">ufds</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#nfds\">nfds</a> = <a class=\"id\" href=\"#nfds\">nfds</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout_msecs\">timeout_msecs</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#end_time\">end_time</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#end_time\">end_time</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#has_timeout\">has_timeout</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#has_timeout\">has_timeout</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTART_RESTARTBLOCK\">ERESTART_RESTARTBLOCK</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#HAVE_SET_RESTORE_SIGMASK\">HAVE_SET_RESTORE_SIGMASK</a>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE5\">SYSCALL_DEFINE5</a>(<a class=\"id\" href=\"#ppoll\">ppoll</a>, struct <a class=\"id\" href=\"#pollfd\">pollfd</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#ufds\">ufds</a>, unsigned int, <a class=\"id\" href=\"#nfds\">nfds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tsp\">tsp</a>, const <a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#sigmask\">sigmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#sigsetsize\">sigsetsize</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#ksigmask\">ksigmask</a>, <a class=\"id\" href=\"#sigsaved\">sigsaved</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#end_time\">end_time</a>, *<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsp\">tsp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, sizeof(<a class=\"id\" href=\"#ts\">ts</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = &amp;<a class=\"id\" href=\"#end_time\">end_time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#poll_select_set_timeout\">poll_select_set_timeout</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>, <a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sigmask\">sigmask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XXX: Don't preclude handling different sized sigset_t's.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sigsetsize\">sigsetsize</a> != sizeof(<a class=\"id\" href=\"#sigset_t\">sigset_t</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#ksigmask\">ksigmask</a>, <a class=\"id\" href=\"#sigmask\">sigmask</a>, sizeof(<a class=\"id\" href=\"#ksigmask\">ksigmask</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigdelsetmask\">sigdelsetmask</a>(&amp;<a class=\"id\" href=\"#ksigmask\">ksigmask</a>, <a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>)|<a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGSTOP\">SIGSTOP</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigprocmask\">sigprocmask</a>(<a class=\"id\" href=\"#SIG_SETMASK\">SIG_SETMASK</a>, &amp;<a class=\"id\" href=\"#ksigmask\">ksigmask</a>, &amp;<a class=\"id\" href=\"#sigsaved\">sigsaved</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_sys_poll\">do_sys_poll</a>(<a class=\"id\" href=\"#ufds\">ufds</a>, <a class=\"id\" href=\"#nfds\">nfds</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We can restart this syscall, usually */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EINTR\">EINTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't restore the signal mask yet. Let do_signal() deliver</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the signal on the way back to userspace, before the signal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mask is restored.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sigmask\">sigmask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#saved_sigmask\">saved_sigmask</a>, &amp;<a class=\"id\" href=\"#sigsaved\">sigsaved</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#sigsaved\">sigsaved</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_restore_sigmask\">set_restore_sigmask</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTNOHAND\">ERESTARTNOHAND</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#sigmask\">sigmask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigprocmask\">sigprocmask</a>(<a class=\"id\" href=\"#SIG_SETMASK\">SIG_SETMASK</a>, &amp;<a class=\"id\" href=\"#sigsaved\">sigsaved</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#poll_select_copy_remaining\">poll_select_copy_remaining</a>(&amp;<a class=\"id\" href=\"#end_time\">end_time</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, 0, <a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* HAVE_SET_RESTORE_SIGMASK */</span>", 
];
xr_frag_insert('l/e9/ee1461a788eb20e1f8847f28b0ba61ccfa0559.xr', __xr_tmp);
