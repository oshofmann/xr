var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RTC related functions</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#platform_device\">platform_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mc146818rtc\">mc146818rtc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bcd\">bcd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pnp\">pnp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#vsyscall\">vsyscall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a special lock that is owned by the CPU and holds the index</span>", 
"<span class=\"comment\"> * register we are working with.  It is required for NMI access to the</span>", 
"<span class=\"comment\"> * CMOS/RTC registers.  See include/asm-i386/mc146818rtc.h for details.</span>", 
"<span class=\"comment\"> */</span>", 
"volatile unsigned long <a class=\"id\" href=\"#cmos_lock\">cmos_lock</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cmos_lock\">cmos_lock</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_32 */</span>", 
"", 
"<span class=\"comment\">/* For two digit years assume time is always after that */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CMOS_YEARS_OFFS\">CMOS_YEARS_OFFS</a> 2000", 
"", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#rtc_lock\">rtc_lock</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#rtc_lock\">rtc_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In order to set the CMOS clock precisely, set_rtc_mmss has to be</span>", 
"<span class=\"comment\"> * called 500 ms after the second nowtime has started, because when</span>", 
"<span class=\"comment\"> * nowtime is written into the registers of the CMOS clock, it will</span>", 
"<span class=\"comment\"> * jump to the next second precisely 500 ms later. Check the Motorola</span>", 
"<span class=\"comment\"> * MC146818A or Dallas DS12887 data sheet for details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * BUG: This routine does not handle hour overflow properly; it just</span>", 
"<span class=\"comment\"> *      sets the minutes. Usually you'll only notice that after reboot!</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mach_set_rtc_mmss\">mach_set_rtc_mmss</a>(unsigned long <a class=\"id\" href=\"#nowtime\">nowtime</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#real_seconds\">real_seconds</a>, <a class=\"id\" href=\"#real_minutes\">real_minutes</a>, <a class=\"id\" href=\"#cmos_minutes\">cmos_minutes</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#save_control\">save_control</a>, <a class=\"id\" href=\"#save_freq_select\">save_freq_select</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/> <span class=\"comment\">/* tell the clock it's being set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_control\">save_control</a> = <a class=\"id\" href=\"#CMOS_READ\">CMOS_READ</a>(<a class=\"id\" href=\"#RTC_CONTROL\">RTC_CONTROL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CMOS_WRITE\">CMOS_WRITE</a>((<a class=\"id\" href=\"#save_control\">save_control</a>|<a class=\"id\" href=\"#RTC_SET\">RTC_SET</a>), <a class=\"id\" href=\"#RTC_CONTROL\">RTC_CONTROL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* stop and reset prescaler */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_freq_select\">save_freq_select</a> = <a class=\"id\" href=\"#CMOS_READ\">CMOS_READ</a>(<a class=\"id\" href=\"#RTC_FREQ_SELECT\">RTC_FREQ_SELECT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CMOS_WRITE\">CMOS_WRITE</a>((<a class=\"id\" href=\"#save_freq_select\">save_freq_select</a>|<a class=\"id\" href=\"#RTC_DIV_RESET2\">RTC_DIV_RESET2</a>), <a class=\"id\" href=\"#RTC_FREQ_SELECT\">RTC_FREQ_SELECT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmos_minutes\">cmos_minutes</a> = <a class=\"id\" href=\"#CMOS_READ\">CMOS_READ</a>(<a class=\"id\" href=\"#RTC_MINUTES\">RTC_MINUTES</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#save_control\">save_control</a> &amp; <a class=\"id\" href=\"#RTC_DM_BINARY\">RTC_DM_BINARY</a>) || <a class=\"id\" href=\"#RTC_ALWAYS_BCD\">RTC_ALWAYS_BCD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmos_minutes\">cmos_minutes</a> = <a class=\"id\" href=\"#bcd2bin\">bcd2bin</a>(<a class=\"id\" href=\"#cmos_minutes\">cmos_minutes</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since we're only adjusting minutes and seconds,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't interfere with hour overflow. This avoids</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * messing with unknown time zones but requires your</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RTC not to be off by more than 15 minutes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#real_seconds\">real_seconds</a> = <a class=\"id\" href=\"#nowtime\">nowtime</a> % 60;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#real_minutes\">real_minutes</a> = <a class=\"id\" href=\"#nowtime\">nowtime</a> / 60;", 
"<span class=\"ts\"/><span class=\"comment\">/* correct for half hour time zone */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#real_minutes\">real_minutes</a> - <a class=\"id\" href=\"#cmos_minutes\">cmos_minutes</a>) + 15)/30) &amp; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_minutes\">real_minutes</a> += 30;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#real_minutes\">real_minutes</a> %= 60;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#real_minutes\">real_minutes</a> - <a class=\"id\" href=\"#cmos_minutes\">cmos_minutes</a>) &lt; 30) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#save_control\">save_control</a> &amp; <a class=\"id\" href=\"#RTC_DM_BINARY\">RTC_DM_BINARY</a>) || <a class=\"id\" href=\"#RTC_ALWAYS_BCD\">RTC_ALWAYS_BCD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_seconds\">real_seconds</a> = <a class=\"id\" href=\"#bin2bcd\">bin2bcd</a>(<a class=\"id\" href=\"#real_seconds\">real_seconds</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_minutes\">real_minutes</a> = <a class=\"id\" href=\"#bin2bcd\">bin2bcd</a>(<a class=\"id\" href=\"#real_minutes\">real_minutes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CMOS_WRITE\">CMOS_WRITE</a>(<a class=\"id\" href=\"#real_seconds\">real_seconds</a>, <a class=\"id\" href=\"#RTC_SECONDS\">RTC_SECONDS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CMOS_WRITE\">CMOS_WRITE</a>(<a class=\"id\" href=\"#real_minutes\">real_minutes</a>, <a class=\"id\" href=\"#RTC_MINUTES\">RTC_MINUTES</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"set_rtc_mmss: can't update from %d to %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cmos_minutes\">cmos_minutes</a>, <a class=\"id\" href=\"#real_minutes\">real_minutes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -1;", 
"<span class=\"ts\"/>}", 
];
xr_frag_insert('l/ea/0a361b262f95d5fcedad757e20d111e695fef7.xr', __xr_tmp);
