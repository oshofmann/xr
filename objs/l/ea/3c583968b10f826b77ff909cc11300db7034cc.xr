var __xr_tmp = [
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: utmisc - common utility procedures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_UTILITIES\">ACPI_UTILITIES</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"utmisc\")", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Common suffix for messages</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_COMMON_MSG_SUFFIX\">ACPI_COMMON_MSG_SUFFIX</a> \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\" (%8.8X/%s-%u)\\n\", <a class=\"id\" href=\"#ACPI_CA_VERSION\">ACPI_CA_VERSION</a>, <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#line_number\">line_number</a>)", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_validate_exception</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Status       - The acpi_status code to be formatted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      A string containing the exception text. NULL if exception is</span>", 
"<span class=\"comment\"> *              not valid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: This function validates and translates an ACPI exception into</span>", 
"<span class=\"comment\"> *              an ASCII string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"const char *<a class=\"id\" href=\"#acpi_ut_validate_exception\">acpi_ut_validate_exception</a>(<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sub_status\">sub_status</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#exception\">exception</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Status is composed of two parts, a \"type\" and an actual code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_status\">sub_status</a> = (<a class=\"id\" href=\"#status\">status</a> &amp; ~<a class=\"id\" href=\"#AE_CODE_MASK\">AE_CODE_MASK</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#AE_CODE_MASK\">AE_CODE_MASK</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AE_CODE_ENVIRONMENTAL\">AE_CODE_ENVIRONMENTAL</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sub_status\">sub_status</a> <= <a class=\"id\" href=\"#AE_CODE_ENV_MAX\">AE_CODE_ENV_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exception\">exception</a> = <a class=\"id\" href=\"#acpi_gbl_exception_names_env\">acpi_gbl_exception_names_env</a>[<a class=\"id\" href=\"#sub_status\">sub_status</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AE_CODE_PROGRAMMER\">AE_CODE_PROGRAMMER</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sub_status\">sub_status</a> <= <a class=\"id\" href=\"#AE_CODE_PGM_MAX\">AE_CODE_PGM_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exception\">exception</a> = <a class=\"id\" href=\"#acpi_gbl_exception_names_pgm\">acpi_gbl_exception_names_pgm</a>[<a class=\"id\" href=\"#sub_status\">sub_status</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AE_CODE_ACPI_TABLES\">AE_CODE_ACPI_TABLES</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sub_status\">sub_status</a> <= <a class=\"id\" href=\"#AE_CODE_TBL_MAX\">AE_CODE_TBL_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exception\">exception</a> = <a class=\"id\" href=\"#acpi_gbl_exception_names_tbl\">acpi_gbl_exception_names_tbl</a>[<a class=\"id\" href=\"#sub_status\">sub_status</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AE_CODE_AML\">AE_CODE_AML</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sub_status\">sub_status</a> <= <a class=\"id\" href=\"#AE_CODE_AML_MAX\">AE_CODE_AML_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exception\">exception</a> = <a class=\"id\" href=\"#acpi_gbl_exception_names_aml\">acpi_gbl_exception_names_aml</a>[<a class=\"id\" href=\"#sub_status\">sub_status</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AE_CODE_CONTROL\">AE_CODE_CONTROL</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sub_status\">sub_status</a> <= <a class=\"id\" href=\"#AE_CODE_CTRL_MAX\">AE_CODE_CTRL_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exception\">exception</a> = <a class=\"id\" href=\"#acpi_gbl_exception_names_ctrl\">acpi_gbl_exception_names_ctrl</a>[<a class=\"id\" href=\"#sub_status\">sub_status</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(const char, <a class=\"id\" href=\"#exception\">exception</a>));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_is_pci_root_bridge</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Id              - The HID/CID in string format</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if the Id is a match for a PCI/PCI-Express Root Bridge</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Determine if the input ID is a PCI Root Bridge ID.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ut_is_pci_root_bridge\">acpi_ut_is_pci_root_bridge</a>(char *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if this is a PCI root bridge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ACPI 3.0+: check for a PCI Express root also.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ACPI_STRCMP\">ACPI_STRCMP</a>(<a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#PCI_ROOT_HID_STRING\">PCI_ROOT_HID_STRING</a>)) ||", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#ACPI_STRCMP\">ACPI_STRCMP</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#PCI_EXPRESS_ROOT_HID_STRING\">PCI_EXPRESS_ROOT_HID_STRING</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_is_aml_table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Table               - An ACPI table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if table contains executable AML; FALSE otherwise</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check ACPI Signature for a table that contains AML code.</span>", 
"<span class=\"comment\"> *              Currently, these are DSDT,SSDT,PSDT. All other table types are</span>", 
"<span class=\"comment\"> *              data tables that do not contain AML code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ut_is_aml_table\">acpi_ut_is_aml_table</a>(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* These are the only tables that contain executable AML */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_COMPARE_NAME\">ACPI_COMPARE_NAME</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#signature\">signature</a>, <a class=\"id\" href=\"#ACPI_SIG_DSDT\">ACPI_SIG_DSDT</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_COMPARE_NAME\">ACPI_COMPARE_NAME</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#signature\">signature</a>, <a class=\"id\" href=\"#ACPI_SIG_PSDT\">ACPI_SIG_PSDT</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_COMPARE_NAME\">ACPI_COMPARE_NAME</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#signature\">signature</a>, <a class=\"id\" href=\"#ACPI_SIG_SSDT\">ACPI_SIG_SSDT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_allocate_owner_id</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  owner_id        - Where the new owner ID is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Allocate a table or method owner ID. The owner ID is used to</span>", 
"<span class=\"comment\"> *              track objects created by the table or method, to be deleted</span>", 
"<span class=\"comment\"> *              when the method exits or the table is unloaded.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ut_allocate_owner_id\">acpi_ut_allocate_owner_id</a>(<a class=\"id\" href=\"#acpi_owner_id\">acpi_owner_id</a> * <a class=\"id\" href=\"#owner_id\">owner_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ut_allocate_owner_id\">ut_allocate_owner_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Guard against multiple allocations of ID to the same location */</span>", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#owner_id\">owner_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Owner ID [0x%2.2X] already exists\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    *<a class=\"id\" href=\"#owner_id\">owner_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_ALREADY_EXISTS\">AE_ALREADY_EXISTS</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Mutex for the global ID mask */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_CACHES\">ACPI_MTX_CACHES</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find a free owner ID, cycle through all possible IDs on repeated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocations. (ACPI_NUM_OWNERID_MASKS + 1) because first index may have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be scanned twice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#acpi_gbl_last_owner_id_index\">acpi_gbl_last_owner_id_index</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a> &lt; (<a class=\"id\" href=\"#ACPI_NUM_OWNERID_MASKS\">ACPI_NUM_OWNERID_MASKS</a> + 1); <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> >= <a class=\"id\" href=\"#ACPI_NUM_OWNERID_MASKS\">ACPI_NUM_OWNERID_MASKS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* Wraparound to start of mask array */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#acpi_gbl_next_owner_id_offset\">acpi_gbl_next_owner_id_offset</a>; <a class=\"id\" href=\"#k\">k</a> &lt; 32; <a class=\"id\" href=\"#k\">k</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_owner_id_mask\">acpi_gbl_owner_id_mask</a>[<a class=\"id\" href=\"#j\">j</a>] == <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There are no free IDs in this mask */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#acpi_gbl_owner_id_mask\">acpi_gbl_owner_id_mask</a>[<a class=\"id\" href=\"#j\">j</a>] &amp; (1 << <a class=\"id\" href=\"#k\">k</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Found a free ID. The actual ID is the bit index plus one,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * making zero an invalid Owner ID. Save this as the last ID</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * allocated and update the global ID mask.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_owner_id_mask\">acpi_gbl_owner_id_mask</a>[<a class=\"id\" href=\"#j\">j</a>] |= (1 << <a class=\"id\" href=\"#k\">k</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_last_owner_id_index\">acpi_gbl_last_owner_id_index</a> = (<a class=\"id\" href=\"#u8\">u8</a>) <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_next_owner_id_offset\">acpi_gbl_next_owner_id_offset</a> = (<a class=\"id\" href=\"#u8\">u8</a>) (<a class=\"id\" href=\"#k\">k</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Construct encoded ID from the index and bit position</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Note: Last [j].k (bit 255) is never used and is marked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * permanently allocated (prevents +1 overflow)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#owner_id\">owner_id</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#acpi_owner_id\">acpi_owner_id</a>) ((<a class=\"id\" href=\"#k\">k</a> + 1) + <a class=\"id\" href=\"#ACPI_MUL_32\">ACPI_MUL_32</a>(<a class=\"id\" href=\"#j\">j</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_VALUES\">ACPI_DB_VALUES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Allocated OwnerId: %2.2X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (unsigned int)*<a class=\"id\" href=\"#owner_id\">owner_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_next_owner_id_offset\">acpi_gbl_next_owner_id_offset</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All owner_ids have been allocated. This typically should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not happen since the IDs are reused after deallocation. The IDs are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated upon table load (one per table) and method execution, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they are released when a table is unloaded or a method completes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * execution.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this error happens, there may be very deep nesting of invoked control</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * methods, or there may be a bug where the IDs are not released.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OWNER_ID_LIMIT\">AE_OWNER_ID_LIMIT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"Could not allocate new OwnerId (255 max), AE_OWNER_ID_LIMIT\"));", 
"", 
"      <a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_CACHES\">ACPI_MTX_CACHES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_release_owner_id</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  owner_id_ptr        - Pointer to a previously allocated owner_iD</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None. No error is returned because we are either exiting a</span>", 
"<span class=\"comment\"> *              control method or unloading a table. Either way, we would</span>", 
"<span class=\"comment\"> *              ignore any error anyway.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Release a table or method owner ID.  Valid IDs are 1 - 255</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ut_release_owner_id\">acpi_ut_release_owner_id</a>(<a class=\"id\" href=\"#acpi_owner_id\">acpi_owner_id</a> * <a class=\"id\" href=\"#owner_id_ptr\">owner_id_ptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_owner_id\">acpi_owner_id</a> <a class=\"id\" href=\"#owner_id\">owner_id</a> = *<a class=\"id\" href=\"#owner_id_ptr\">owner_id_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_U32\">ACPI_FUNCTION_TRACE_U32</a>(<a class=\"id\" href=\"#ut_release_owner_id\">ut_release_owner_id</a>, <a class=\"id\" href=\"#owner_id\">owner_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always clear the input owner_id (zero is an invalid ID) */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#owner_id_ptr\">owner_id_ptr</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Zero is not a valid owner_iD */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#owner_id\">owner_id</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid OwnerId: 0x%2.2X\", <a class=\"id\" href=\"#owner_id\">owner_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Mutex for the global ID mask */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_CACHES\">ACPI_MTX_CACHES</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Normalize the ID to zero */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owner_id\">owner_id</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Decode ID to index/offset pair */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#ACPI_DIV_32\">ACPI_DIV_32</a>(<a class=\"id\" href=\"#owner_id\">owner_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = 1 << <a class=\"id\" href=\"#ACPI_MOD_32\">ACPI_MOD_32</a>(<a class=\"id\" href=\"#owner_id\">owner_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the owner ID only if it is valid */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_owner_id_mask\">acpi_gbl_owner_id_mask</a>[<a class=\"id\" href=\"#index\">index</a>] &amp; <a class=\"id\" href=\"#bit\">bit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_owner_id_mask\">acpi_gbl_owner_id_mask</a>[<a class=\"id\" href=\"#index\">index</a>] ^= <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Release of non-allocated OwnerId: 0x%2.2X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#owner_id\">owner_id</a> + 1));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_CACHES\">ACPI_MTX_CACHES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_strupr (strupr)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  src_string      - The source string to convert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Convert string to uppercase</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: This is not a POSIX function, so it appears here, not in utclib.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ut_strupr\">acpi_ut_strupr</a>(char *<a class=\"id\" href=\"#src_string\">src_string</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#string\">string</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#src_string\">src_string</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk entire string, uppercasing the letters */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#string\">string</a> = <a class=\"id\" href=\"#src_string\">src_string</a>; *<a class=\"id\" href=\"#string\">string</a>; <a class=\"id\" href=\"#string\">string</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#string\">string</a> = (char)<a class=\"id\" href=\"#ACPI_TOUPPER\">ACPI_TOUPPER</a>(*<a class=\"id\" href=\"#string\">string</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_print_string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  String          - Null terminated ASCII string</span>", 
"<span class=\"comment\"> *              max_length      - Maximum output length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Dump an ASCII string with support for ACPI-defined escape</span>", 
"<span class=\"comment\"> *              sequences.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ut_print_string\">acpi_ut_print_string</a>(char *<a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#max_length\">max_length</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#string\">string</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"<\\\"NULL STRING PTR\\\">\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\"\");", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>] && (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_length\">max_length</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Escape sequences */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x07:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\\a\");<span class=\"ts\"/><span class=\"comment\">/* BELL */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x08:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\\b\");<span class=\"ts\"/><span class=\"comment\">/* BACKSPACE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x0C:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\\f\");<span class=\"ts\"/><span class=\"comment\">/* FORMFEED */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x0A:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\\n\");<span class=\"ts\"/><span class=\"comment\">/* LINEFEED */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x0D:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\\r\");<span class=\"ts\"/><span class=\"comment\">/* CARRIAGE RETURN */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x09:", 
];
xr_frag_insert('l/ea/3c583968b10f826b77ff909cc11300db7034cc.xr', __xr_tmp);
