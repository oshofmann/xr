var __xr_tmp = [
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#finish_lock_switch\">finish_lock_switch</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * After -&gt;oncpu is cleared, the task can be moved to a different CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must ensure this doesn't happen until the switch is completely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * finished.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_WANT_INTERRUPTS_ON_CTXSW\">__ARCH_WANT_INTERRUPTS_ON_CTXSW</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ARCH_WANT_UNLOCKED_CTXSW */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check whether the task is waking, we use this to synchronize -&gt;cpus_allowed</span>", 
"<span class=\"comment\"> * against ttwu().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_is_waking\">task_is_waking</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_WAKING\">TASK_WAKING</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __task_rq_lock - lock the runqueue a given task resides on.</span>", 
"<span class=\"comment\"> * Must be called interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#__task_rq_lock\">__task_rq_lock</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rq\">rq</a> == <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * task_rq_lock - lock the runqueue a given task resides on and disable</span>", 
"<span class=\"comment\"> * interrupts. Note the ordering: we can safely lookup the task_rq without</span>", 
"<span class=\"comment\"> * explicitly disabling preemption.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(*<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rq\">rq</a> == <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__task_rq_unlock\">__task_rq_unlock</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * this_rq_lock - lock this runqueue and disable interrupts.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq_lock\">this_rq_lock</a>(void)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_HRTICK\">CONFIG_SCHED_HRTICK</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use HR-timers to deliver accurate preemption points.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Its all a bit involved since we cannot program an hrt while holding the</span>", 
"<span class=\"comment\"> * rq-&gt;lock. So what we do is store a state in in rq-&gt;hrtick_* and ask for a</span>", 
"<span class=\"comment\"> * reschedule event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When we get rescheduled we reprogram the hrtick_timer outside of the</span>", 
"<span class=\"comment\"> * rq-&gt;lock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use hrtick when:</span>", 
"<span class=\"comment\"> *  - enabled by features</span>", 
"<span class=\"comment\"> *  - hrtimer is actually high res</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hrtick_enabled\">hrtick_enabled</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#HRTICK\">HRTICK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_active\">cpu_active</a>(<a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#rq\">rq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hrtimer_is_hres_active\">hrtimer_is_hres_active</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hrtick_clear\">hrtick_clear</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hrtimer_active\">hrtimer_active</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * High-resolution timer tick.</span>", 
"<span class=\"comment\"> * Runs from hardirq context with interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a> <a class=\"id\" href=\"#hrtick\">hrtick</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#timer\">timer</a>, struct <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#rq\">rq</a>) != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_tick\">task_tick</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#HRTIMER_NORESTART\">HRTIMER_NORESTART</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * called from hardirq (IPI) context</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__hrtick_start\">__hrtick_start</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_csd_pending\">hrtick_csd_pending</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called to set the hrtick timer state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * called with rq-&gt;lock held and irqs disabled</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#hrtick_start\">hrtick_start</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delay\">delay</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a> = &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#get_time\">get_time</a>(), <a class=\"id\" href=\"#delay\">delay</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_set_expires\">hrtimer_set_expires</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#time\">time</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a> == <a class=\"id\" href=\"#this_rq\">this_rq</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_csd_pending\">hrtick_csd_pending</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__smp_call_function_single\">__smp_call_function_single</a>(<a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#rq\">rq</a>), &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_csd\">hrtick_csd</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_csd_pending\">hrtick_csd_pending</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#hotplug_hrtick\">hotplug_hrtick</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = (int)(long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED_FROZEN\">CPU_UP_CANCELED_FROZEN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE_FROZEN\">CPU_DOWN_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtick_clear\">hrtick_clear</a>(<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#init_hrtick\">init_hrtick</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#hotplug_hrtick\">hotplug_hrtick</a>, 0);", 
"}", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called to set the hrtick timer state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * called with rq-&gt;lock held and irqs disabled</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#hrtick_start\">hrtick_start</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delay\">delay</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hrtimer_start_range_ns\">__hrtimer_start_range_ns</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>, <a class=\"id\" href=\"#ns_to_ktime\">ns_to_ktime</a>(<a class=\"id\" href=\"#delay\">delay</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HRTIMER_MODE_REL_PINNED\">HRTIMER_MODE_REL_PINNED</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_hrtick\">init_hrtick</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"static void <a class=\"id\" href=\"#init_rq_hrtick\">init_rq_hrtick</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_csd_pending\">hrtick_csd_pending</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_csd\">hrtick_csd</a>.<a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_csd\">hrtick_csd</a>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#__hrtick_start\">__hrtick_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_csd\">hrtick_csd</a>.<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#rq\">rq</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init\">hrtimer_init</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>, <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>, <a class=\"id\" href=\"#HRTIMER_MODE_REL\">HRTIMER_MODE_REL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#hrtick\">hrtick</a>;", 
"}", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CONFIG_SCHED_HRTICK */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hrtick_clear\">hrtick_clear</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_rq_hrtick\">init_rq_hrtick</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_hrtick\">init_hrtick</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_SCHED_HRTICK */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * resched_task - mark a task 'to be rescheduled now'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On UP this means the setting of the need_resched flag, on SMP it</span>", 
"<span class=\"comment\"> * might also involve a cross-CPU call to trigger the scheduler on</span>", 
"<span class=\"comment\"> * the target CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#tsk_is_polling\">tsk_is_polling</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tsk_is_polling\">tsk_is_polling</a>(<a class=\"id\" href=\"#t\">t</a>) <a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#TIF_POLLING_NRFLAG\">TIF_POLLING_NRFLAG</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#resched_task\">resched_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_raw_spin_locked\">assert_raw_spin_locked</a>(&amp;<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_need_resched\">test_tsk_need_resched</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_need_resched\">set_tsk_need_resched</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NEED_RESCHED must be visible before we test polling */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk_is_polling\">tsk_is_polling</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_send_reschedule\">smp_send_reschedule</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#resched_cpu\">resched_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#raw_spin_trylock_irqsave\">raw_spin_trylock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#cpu_curr\">cpu_curr</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In the semi idle case, use the nearest busy cpu for migrating timers</span>", 
"<span class=\"comment\"> * from an idle cpu.  This is good for power-savings.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We don't do similar optimization for completely idle system, as</span>", 
"<span class=\"comment\"> * selecting an idle cpu will add more delays to the timers than intended</span>", 
"<span class=\"comment\"> * (as that cpu's timer base may not be uptodate wrt jiffies etc).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#get_nohz_timer_target\">get_nohz_timer_target</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When add_timer_on() enqueues a timer into the timer wheel of an</span>", 
"<span class=\"comment\"> * idle CPU then this timer might expire before the next timer event</span>", 
"<span class=\"comment\"> * which is scheduled to wake up that CPU. In case of a completely</span>", 
"<span class=\"comment\"> * idle system the next event might even be infinite time into the</span>", 
"<span class=\"comment\"> * future. wake_up_idle_cpu() ensures that the CPU is woken up and</span>", 
"<span class=\"comment\"> * leaves the inner idle loop so the newly added timer is taken into</span>", 
"<span class=\"comment\"> * account when the CPU goes back to idle and evaluates the timer</span>", 
"<span class=\"comment\"> * wheel for the next timer event.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wake_up_idle_cpu\">wake_up_idle_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is safe, as this function is called with the timer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wheel base lock of (cpu) held. When the CPU is on the way</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to idle and has not yet set rq-&gt;curr to idle then it will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be serialized on the timer wheel base lock and take the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timer into account automatically.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a> != <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can set TIF_RESCHED on the idle task of the other CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lockless. The worst case is that the other CPU runs the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * idle task through an additional NOOP schedule()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_need_resched\">set_tsk_need_resched</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NEED_RESCHED must be visible before we test polling */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk_is_polling\">tsk_is_polling</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_send_reschedule\">smp_send_reschedule</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NO_HZ */</span>", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sched_avg_period\">sched_avg_period</a>(void)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#sysctl_sched_time_avg\">sysctl_sched_time_avg</a> * <a class=\"id\" href=\"#NSEC_PER_MSEC\">NSEC_PER_MSEC</a> / 2;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sched_avg_update\">sched_avg_update</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#sched_avg_period\">sched_avg_period</a>();", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#clock\">clock</a> - <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#age_stamp\">age_stamp</a>) &gt; <a class=\"id\" href=\"#period\">period</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Inline assembly required to prevent the compiler</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * optimising this loop into a divmod call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * See __iter_div_u64_rem() for another example of this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"\" : \"+rm\" (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#age_stamp\">age_stamp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#age_stamp\">age_stamp</a> += <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt_avg\">rt_avg</a> /= 2;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sched_rt_avg_update\">sched_rt_avg_update</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_delta\">rt_delta</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt_avg\">rt_avg</a> += <a class=\"id\" href=\"#rt_delta\">rt_delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_avg_update\">sched_avg_update</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_SMP */</span>", 
"static void <a class=\"id\" href=\"#resched_task\">resched_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_raw_spin_locked\">assert_raw_spin_locked</a>(&amp;<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_need_resched\">set_tsk_need_resched</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sched_rt_avg_update\">sched_rt_avg_update</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_delta\">rt_delta</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sched_avg_update\">sched_avg_update</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WMULT_CONST\">WMULT_CONST</a><span class=\"ts\"/>(~0UL)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WMULT_CONST\">WMULT_CONST</a><span class=\"ts\"/>(1UL << 32)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WMULT_SHIFT\">WMULT_SHIFT</a><span class=\"ts\"/>32", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Shift right and round:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SRR\">SRR</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) (((<a class=\"id\" href=\"#x\">x</a>) + (1UL << ((<a class=\"id\" href=\"#y\">y</a>) - 1))) >> (<a class=\"id\" href=\"#y\">y</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * delta *= weight / lw</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long", 
"<a class=\"id\" href=\"#calc_delta_mine\">calc_delta_mine</a>(unsigned long <a class=\"id\" href=\"#delta_exec\">delta_exec</a>, unsigned long <a class=\"id\" href=\"#weight\">weight</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#load_weight\">load_weight</a> *<a class=\"id\" href=\"#lw\">lw</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#inv_weight\">inv_weight</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> &gt; 32 && <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#weight\">weight</a> >= <a class=\"id\" href=\"#WMULT_CONST\">WMULT_CONST</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#inv_weight\">inv_weight</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#inv_weight\">inv_weight</a> = 1 + (<a class=\"id\" href=\"#WMULT_CONST\">WMULT_CONST</a>-<a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#weight\">weight</a>/2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>/ (<a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#weight\">weight</a>+1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#delta_exec\">delta_exec</a> * <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check whether we'd overflow the 64-bit multiplication:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tmp\">tmp</a> &gt; <a class=\"id\" href=\"#WMULT_CONST\">WMULT_CONST</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#SRR\">SRR</a>(<a class=\"id\" href=\"#SRR\">SRR</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#WMULT_SHIFT\">WMULT_SHIFT</a>/2) * <a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#inv_weight\">inv_weight</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WMULT_SHIFT\">WMULT_SHIFT</a>/2);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#SRR\">SRR</a>(<a class=\"id\" href=\"#tmp\">tmp</a> * <a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#inv_weight\">inv_weight</a>, <a class=\"id\" href=\"#WMULT_SHIFT\">WMULT_SHIFT</a>);", 
"", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, (<a class=\"id\" href=\"#u64\">u64</a>)(unsigned long)<a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_load_add\">update_load_add</a>(struct <a class=\"id\" href=\"#load_weight\">load_weight</a> *<a class=\"id\" href=\"#lw\">lw</a>, unsigned long <a class=\"id\" href=\"#inc\">inc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#weight\">weight</a> += <a class=\"id\" href=\"#inc\">inc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#inv_weight\">inv_weight</a> = 0;", 
"}", 
];
xr_frag_insert('l/ea/bcfe3b5b0a33a376c2c1ebd176b657a174d37a.xr', __xr_tmp);
