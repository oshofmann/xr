var __xr_tmp = [
"<span class=\"comment\"> *              Op              - The control Op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Handles all control ops encountered during control method</span>", 
"<span class=\"comment\"> *              execution.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ds_exec_begin_control_op\">acpi_ds_exec_begin_control_op</a>(struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#control_state\">control_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#ds_exec_begin_control_op\">ds_exec_begin_control_op</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>, \"Op=%p Opcode=%2.2X State=%p\\n\", <a class=\"id\" href=\"#op\">op</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>));", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_WHILE_OP\">AML_WHILE_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is an additional iteration of a while loop, continue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There is no need to allocate a new control state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.<a class=\"id\" href=\"#aml_predicate_start\">aml_predicate_start</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#aml\">aml</a> - 1)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reset the state to start-of-loop */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#state\">state</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CONTROL_CONDITIONAL_EXECUTING\">ACPI_CONTROL_CONDITIONAL_EXECUTING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*lint -fallthrough */</span>", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_IF_OP\">AML_IF_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * IF/WHILE: Create a new control state to manage these</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * constructs. We need to manage these as a stack, in order</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to handle nesting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control_state\">control_state</a> = <a class=\"id\" href=\"#acpi_ut_create_control_state\">acpi_ut_create_control_state</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#control_state\">control_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Save a pointer to the predicate for multiple executions</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of a loop</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.<a class=\"id\" href=\"#aml_predicate_start\">aml_predicate_start</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#aml\">aml</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.<a class=\"id\" href=\"#package_end\">package_end</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#pkg_end\">pkg_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.<a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Push the control state on this walk's control stack */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_push_generic_state\">acpi_ut_push_generic_state</a>(&amp;<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#control_state\">control_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_ELSE_OP\">AML_ELSE_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Predicate is in the state object */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If predicate is true, the IF was executed, ignore ELSE part */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#last_predicate\">last_predicate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_CTRL_TRUE\">AE_CTRL_TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_RETURN_OP\">AML_RETURN_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_exec_end_control_op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  walk_list       - The list that owns the walk stack</span>", 
"<span class=\"comment\"> *              Op              - The control Op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Handles all control ops encountered during control method</span>", 
"<span class=\"comment\"> *              execution.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ds_exec_end_control_op\">acpi_ds_exec_end_control_op</a>(struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> * <a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> * <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#control_state\">control_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#ds_exec_end_control_op\">ds_exec_end_control_op</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_IF_OP\">AML_IF_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>, \"[IF_OP] Op=%p\\n\", <a class=\"id\" href=\"#op\">op</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Save the result of the predicate in case there is an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ELSE to come</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#last_predicate\">last_predicate</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#u8\">u8</a>) <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Pop the control state that was created at the start</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the IF and free it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control_state\">control_state</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_pop_generic_state\">acpi_ut_pop_generic_state</a>(&amp;<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_generic_state\">acpi_ut_delete_generic_state</a>(<a class=\"id\" href=\"#control_state\">control_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_ELSE_OP\">AML_ELSE_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_WHILE_OP\">AML_WHILE_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>, \"[WHILE_OP] Op=%p\\n\", <a class=\"id\" href=\"#op\">op</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control_state\">control_state</a> = <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Predicate was true, the body of the loop was just executed */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This loop counter mechanism allows the interpreter to escape</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * possibly infinite loops. This can occur in poorly written AML</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * when the hardware does not respond within a while loop and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * loop does not implement a timeout.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.<a class=\"id\" href=\"#loop_count\">loop_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.<a class=\"id\" href=\"#loop_count\">loop_count</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MAX_LOOP_ITERATIONS\">ACPI_MAX_LOOP_ITERATIONS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_INFINITE_LOOP\">AE_AML_INFINITE_LOOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Go back and evaluate the predicate and maybe execute the loop</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * another time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_CTRL_PENDING\">AE_CTRL_PENDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#aml_last_while\">aml_last_while</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.<a class=\"id\" href=\"#aml_predicate_start\">aml_predicate_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Predicate was false, terminate this while loop */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[WHILE_OP] termination! Op=%p\\n\", <a class=\"id\" href=\"#op\">op</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pop this control state and free it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control_state\">control_state</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_pop_generic_state\">acpi_ut_pop_generic_state</a>(&amp;<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_generic_state\">acpi_ut_delete_generic_state</a>(<a class=\"id\" href=\"#control_state\">control_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_RETURN_OP\">AML_RETURN_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[RETURN_OP] Op=%p Arg=%p\\n\", <a class=\"id\" href=\"#op\">op</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#arg\">arg</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * One optional operand -- the return value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It can be either an immediate operand or a result that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has been bubbled up the tree</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#arg\">arg</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Since we have a real Return(), delete any implicit return */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_clear_implicit_return\">acpi_ds_clear_implicit_return</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return statement has an immediate operand */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ds_create_operands\">acpi_ds_create_operands</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If value being returned is a Reference (such as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * an arg or local), resolve it now because it may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cease to exist at the end of the method.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ex_resolve_to_value\">acpi_ex_resolve_to_value</a>(&amp;<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#operands\">operands</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Get the return value and save as the last result</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * value.  This is the only place where walk_state-&gt;return_desc</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is set to anything other than zero!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#return_desc\">return_desc</a> = <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#operands\">operands</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#result_count\">result_count</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Since we have a real Return(), delete any implicit return */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_clear_implicit_return\">acpi_ds_clear_implicit_return</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The return value has come from a previous calculation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If value being returned is a Reference (such as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * an arg or local), resolve it now because it may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cease to exist at the end of the method.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Allow references created by the Index operator to return unchanged.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ACPI_GET_DESCRIPTOR_TYPE\">ACPI_GET_DESCRIPTOR_TYPE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#results\">results</a>-><a class=\"id\" href=\"#results\">results</a>.<a class=\"id\" href=\"#obj_desc\">obj_desc</a>[0]) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_DESC_TYPE_OPERAND\">ACPI_DESC_TYPE_OPERAND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && ((<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#results\">results</a>-><a class=\"id\" href=\"#results\">results</a>.<a class=\"id\" href=\"#obj_desc\">obj_desc</a>[0])->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_LOCAL_REFERENCE\">ACPI_TYPE_LOCAL_REFERENCE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && ((<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#results\">results</a>-><a class=\"id\" href=\"#results\">results</a>.<a class=\"id\" href=\"#obj_desc\">obj_desc</a>[0])->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reference\">reference</a>.<a class=\"id\" href=\"#class\">class</a> != <a class=\"id\" href=\"#ACPI_REFCLASS_INDEX\">ACPI_REFCLASS_INDEX</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ex_resolve_to_value\">acpi_ex_resolve_to_value</a>(&amp;<a class=\"id\" href=\"#walk_state\">walk_state</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#results\">results</a>-><a class=\"id\" href=\"#results\">results</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#obj_desc\">obj_desc</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#return_desc\">return_desc</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#results\">results</a>-><a class=\"id\" href=\"#results\">results</a>.<a class=\"id\" href=\"#obj_desc\">obj_desc</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No return operand */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#num_operands\">num_operands</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#operands\">operands</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#operands\">operands</a>[0] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#num_operands\">num_operands</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#return_desc\">return_desc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Completed RETURN_OP State=%p, RetVal=%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#walk_state\">walk_state</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#return_desc\">return_desc</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* End the control method execution right now */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_CTRL_TERMINATE\">AE_CTRL_TERMINATE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_NOOP_OP\">AML_NOOP_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Just do nothing! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_BREAK_POINT_OP\">AML_BREAK_POINT_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Set the single-step flag. This will cause the debugger (if present)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to break to the console within the AML debugger at the start of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * next AML instruction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUGGER_EXEC\">ACPI_DEBUGGER_EXEC</a>(<a class=\"id\" href=\"#acpi_gbl_cm_single_step\">acpi_gbl_cm_single_step</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUGGER_EXEC\">ACPI_DEBUGGER_EXEC</a>(<a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (\"**break** Executed AML BreakPoint opcode\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Call to the OSL in case OS wants a piece of the action */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_signal\">acpi_os_signal</a>(<a class=\"id\" href=\"#ACPI_SIGNAL_BREAKPOINT\">ACPI_SIGNAL_BREAKPOINT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Executed AML Breakpoint opcode\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_BREAK_OP\">AML_BREAK_OP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_CONTINUE_OP\">AML_CONTINUE_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* ACPI 2.0 */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pop and delete control states until we find a while */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.<a class=\"id\" href=\"#opcode\">opcode</a> !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#AML_WHILE_OP\">AML_WHILE_OP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control_state\">control_state</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_pop_generic_state\">acpi_ut_pop_generic_state</a>(&amp;<a class=\"id\" href=\"#walk_state\">walk_state</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#control_state\">control_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_generic_state\">acpi_ut_delete_generic_state</a>(<a class=\"id\" href=\"#control_state\">control_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No while found? */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_NO_WHILE\">AE_AML_NO_WHILE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Was: walk_state-&gt;aml_last_while = walk_state-&gt;control_state-&gt;Control.aml_predicate_start; */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#aml_last_while\">aml_last_while</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.<a class=\"id\" href=\"#package_end\">package_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return status depending on opcode */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> == <a class=\"id\" href=\"#AML_BREAK_OP\">AML_BREAK_OP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_CTRL_BREAK\">AE_CTRL_BREAK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_CTRL_CONTINUE\">AE_CTRL_CONTINUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Unknown control opcode=0x%X Op=%p\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>, <a class=\"id\" href=\"#op\">op</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_BAD_OPCODE\">AE_AML_BAD_OPCODE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
];
xr_frag_insert('l/ea/c2de78221b47653c6a11954cdf72eb555e0849.xr', __xr_tmp);
