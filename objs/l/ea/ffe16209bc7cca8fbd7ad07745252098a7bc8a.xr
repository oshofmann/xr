var __xr_tmp = [
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_lock\">cgroup_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If under hierarchy, only empty-root can set this value */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a> && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#children\">children</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#reclaim_param_lock\">reclaim_param_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#swappiness\">swappiness</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#reclaim_param_lock\">reclaim_param_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__mem_cgroup_threshold\">__mem_cgroup_threshold</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#swap\">swap</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_threshold_ary\">mem_cgroup_threshold_ary</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#usage\">usage</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#swap\">swap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#thresholds\">thresholds</a>.<a class=\"id\" href=\"#primary\">primary</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw_thresholds\">memsw_thresholds</a>.<a class=\"id\" href=\"#primary\">primary</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usage\">usage</a> = <a class=\"id\" href=\"#mem_cgroup_usage\">mem_cgroup_usage</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#swap\">swap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current_threshold points to threshold just below usage.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it's not true, a threshold was crossed after last</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call of __mem_cgroup_threshold().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#current_threshold\">current_threshold</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Iterate backward over array of thresholds starting from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current_threshold and check if a threshold is crossed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If none of thresholds below usage is crossed, we read</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only one element of the array here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> >= 0 && <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#threshold\">threshold</a> &gt; <a class=\"id\" href=\"#usage\">usage</a>); <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#eventfd\">eventfd</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* i = current_threshold + 1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Iterate forward over array of thresholds starting from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current_threshold+1 and check if a threshold is crossed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If none of thresholds above usage is crossed, we read</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only one element of the array here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#size\">size</a> && <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#threshold\">threshold</a> <= <a class=\"id\" href=\"#usage\">usage</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#eventfd\">eventfd</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update current_threshold */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#current_threshold\">current_threshold</a> = <a class=\"id\" href=\"#i\">i</a> - 1;", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#memcg\">memcg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_threshold\">__mem_cgroup_threshold</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_threshold\">__mem_cgroup_threshold</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#parent_mem_cgroup\">parent_mem_cgroup</a>(<a class=\"id\" href=\"#memcg\">memcg</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#compare_thresholds\">compare_thresholds</a>(const void *<a class=\"id\" href=\"#a\">a</a>, const void *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a> *<a class=\"id\" href=\"#_a\">_a</a> = <a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a> *<a class=\"id\" href=\"#_b\">_b</a> = <a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_a\">_a</a>-><a class=\"id\" href=\"#threshold\">threshold</a> - <a class=\"id\" href=\"#_b\">_b</a>-><a class=\"id\" href=\"#threshold\">threshold</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_oom_notify_cb\">mem_cgroup_oom_notify_cb</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_eventfd_list\">mem_cgroup_eventfd_list</a> *<a class=\"id\" href=\"#ev\">ev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ev\">ev</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_notify\">oom_notify</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>(<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>, 1);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_oom_notify\">mem_cgroup_oom_notify</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_walk_tree\">mem_cgroup_walk_tree</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#mem_cgroup_oom_notify_cb\">mem_cgroup_oom_notify_cb</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_usage_register_event\">mem_cgroup_usage_register_event</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd\">eventfd</a>, const char *<a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_thresholds\">mem_cgroup_thresholds</a> *<a class=\"id\" href=\"#thresholds\">thresholds</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_threshold_ary\">mem_cgroup_threshold_ary</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MEMFILE_TYPE\">MEMFILE_TYPE</a>(<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#threshold\">threshold</a>, <a class=\"id\" href=\"#usage\">usage</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_memparse_write_strategy\">res_counter_memparse_write_strategy</a>(<a class=\"id\" href=\"#args\">args</a>, &amp;<a class=\"id\" href=\"#threshold\">threshold</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#thresholds_lock\">thresholds_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEM\">_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thresholds\">thresholds</a> = &amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#thresholds\">thresholds</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thresholds\">thresholds</a> = &amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw_thresholds\">memsw_thresholds</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usage\">usage</a> = <a class=\"id\" href=\"#mem_cgroup_usage\">mem_cgroup_usage</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if a threshold crossed before adding a new one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_threshold\">__mem_cgroup_threshold</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a> ? <a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>-><a class=\"id\" href=\"#size\">size</a> + 1 : 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate memory for new array of thresholds */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#new\">new</a>) + <a class=\"id\" href=\"#size\">size</a> * sizeof(struct <a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy thresholds (if any) to new array */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#entries\">entries</a>, <a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>-><a class=\"id\" href=\"#entries\">entries</a>, (<a class=\"id\" href=\"#size\">size</a> - 1) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add new threshold */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#size\">size</a> - 1].<a class=\"id\" href=\"#eventfd\">eventfd</a> = <a class=\"id\" href=\"#eventfd\">eventfd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#size\">size</a> - 1].<a class=\"id\" href=\"#threshold\">threshold</a> = <a class=\"id\" href=\"#threshold\">threshold</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sort thresholds. Registering of new threshold isn't time-critical */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort\">sort</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#entries\">entries</a>, <a class=\"id\" href=\"#size\">size</a>, sizeof(struct <a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#compare_thresholds\">compare_thresholds</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find current threshold */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#current_threshold\">current_threshold</a> = -1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#threshold\">threshold</a> &lt; <a class=\"id\" href=\"#usage\">usage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * new-&gt;current_threshold will not be used until</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * rcu_assign_pointer(), so it's safe to increment</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#current_threshold\">current_threshold</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free old spare buffer and save old primary buffer as spare */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#spare\">spare</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#spare\">spare</a> = <a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* To be sure that nobody uses thresholds */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#thresholds_lock\">thresholds_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_usage_unregister_event\">mem_cgroup_usage_unregister_event</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd\">eventfd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_thresholds\">mem_cgroup_thresholds</a> *<a class=\"id\" href=\"#thresholds\">thresholds</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_threshold_ary\">mem_cgroup_threshold_ary</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MEMFILE_TYPE\">MEMFILE_TYPE</a>(<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#usage\">usage</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#thresholds_lock\">thresholds_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEM\">_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thresholds\">thresholds</a> = &amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#thresholds\">thresholds</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thresholds\">thresholds</a> = &amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw_thresholds\">memsw_thresholds</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Something went wrong if we trying to unregister a threshold</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we don't have thresholds</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#thresholds\">thresholds</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usage\">usage</a> = <a class=\"id\" href=\"#mem_cgroup_usage\">mem_cgroup_usage</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if a threshold crossed before removing */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_threshold\">__mem_cgroup_threshold</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate new number of threshold */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>-><a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#eventfd\">eventfd</a> != <a class=\"id\" href=\"#eventfd\">eventfd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#spare\">spare</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set thresholds array to NULL if we don't have thresholds */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#swap_buffers\">swap_buffers</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy thresholds and find current threshold */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#current_threshold\">current_threshold</a> = -1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>-><a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#eventfd\">eventfd</a> == <a class=\"id\" href=\"#eventfd\">eventfd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#threshold\">threshold</a> &lt; <a class=\"id\" href=\"#usage\">usage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * new-&gt;current_threshold will not be used</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * until rcu_assign_pointer(), so it's safe to increment</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#current_threshold\">current_threshold</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#swap_buffers\">swap_buffers</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Swap primary and spare array */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#spare\">spare</a> = <a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#thresholds\">thresholds</a>-><a class=\"id\" href=\"#primary\">primary</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* To be sure that nobody uses thresholds */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#thresholds_lock\">thresholds_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_oom_register_event\">mem_cgroup_oom_register_event</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd\">eventfd</a>, const char *<a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_eventfd_list\">mem_cgroup_eventfd_list</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MEMFILE_TYPE\">MEMFILE_TYPE</a>(<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#_OOM_TYPE\">_OOM_TYPE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#event\">event</a>),<span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#memcg_oom_mutex\">memcg_oom_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a> = <a class=\"id\" href=\"#eventfd\">eventfd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#oom_notify\">oom_notify</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* already in OOM ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#oom_lock\">oom_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>(<a class=\"id\" href=\"#eventfd\">eventfd</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#memcg_oom_mutex\">memcg_oom_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_oom_unregister_event\">mem_cgroup_oom_unregister_event</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd\">eventfd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_eventfd_list\">mem_cgroup_eventfd_list</a> *<a class=\"id\" href=\"#ev\">ev</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MEMFILE_TYPE\">MEMFILE_TYPE</a>(<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#_OOM_TYPE\">_OOM_TYPE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#memcg_oom_mutex\">memcg_oom_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#ev\">ev</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_notify\">oom_notify</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a> == <a class=\"id\" href=\"#eventfd\">eventfd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ev\">ev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#memcg_oom_mutex\">memcg_oom_mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_oom_control_read\">mem_cgroup_oom_control_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,  struct <a class=\"id\" href=\"#cgroup_map_cb\">cgroup_map_cb</a> *<a class=\"id\" href=\"#cb\">cb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"oom_kill_disable\", <a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_kill_disable\">oom_kill_disable</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_lock\">oom_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"under_oom\", 1);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"under_oom\", 0);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_oom_control_write\">mem_cgroup_oom_control_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cannot set to root cgroup and only 0 and 1 are allowed */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a> || !((<a class=\"id\" href=\"#val\">val</a> == 0) || (<a class=\"id\" href=\"#val\">val</a> == 1)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_lock\">cgroup_lock</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* oom-kill-disable is a flag for subhierarchy. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a> && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#children\">children</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_kill_disable\">oom_kill_disable</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg_oom_recover\">memcg_oom_recover</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#mem_cgroup_files\">mem_cgroup_files</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"usage_in_bytes\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_MEM\">_MEM</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#register_event\">register_event</a> = <a class=\"id\" href=\"#mem_cgroup_usage_register_event\">mem_cgroup_usage_register_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#unregister_event\">unregister_event</a> = <a class=\"id\" href=\"#mem_cgroup_usage_unregister_event\">mem_cgroup_usage_unregister_event</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"max_usage_in_bytes\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_MEM\">_MEM</a>, <a class=\"id\" href=\"#RES_MAX_USAGE\">RES_MAX_USAGE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#trigger\">trigger</a> = <a class=\"id\" href=\"#mem_cgroup_reset\">mem_cgroup_reset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"limit_in_bytes\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_MEM\">_MEM</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_string\">write_string</a> = <a class=\"id\" href=\"#mem_cgroup_write\">mem_cgroup_write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"soft_limit_in_bytes\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_MEM\">_MEM</a>, <a class=\"id\" href=\"#RES_SOFT_LIMIT\">RES_SOFT_LIMIT</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_string\">write_string</a> = <a class=\"id\" href=\"#mem_cgroup_write\">mem_cgroup_write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"failcnt\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_MEM\">_MEM</a>, <a class=\"id\" href=\"#RES_FAILCNT\">RES_FAILCNT</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#trigger\">trigger</a> = <a class=\"id\" href=\"#mem_cgroup_reset\">mem_cgroup_reset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"stat\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_map\">read_map</a> = <a class=\"id\" href=\"#mem_control_stat_show\">mem_control_stat_show</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"force_empty\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#trigger\">trigger</a> = <a class=\"id\" href=\"#mem_cgroup_force_empty_write\">mem_cgroup_force_empty_write</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"use_hierarchy\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#mem_cgroup_hierarchy_write\">mem_cgroup_hierarchy_write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_hierarchy_read\">mem_cgroup_hierarchy_read</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"swappiness\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_swappiness_read\">mem_cgroup_swappiness_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#mem_cgroup_swappiness_write\">mem_cgroup_swappiness_write</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"move_charge_at_immigrate\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_move_charge_read\">mem_cgroup_move_charge_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#mem_cgroup_move_charge_write\">mem_cgroup_move_charge_write</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"oom_control\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_map\">read_map</a> = <a class=\"id\" href=\"#mem_cgroup_oom_control_read\">mem_cgroup_oom_control_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#mem_cgroup_oom_control_write\">mem_cgroup_oom_control_write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#register_event\">register_event</a> = <a class=\"id\" href=\"#mem_cgroup_oom_register_event\">mem_cgroup_oom_register_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#unregister_event\">unregister_event</a> = <a class=\"id\" href=\"#mem_cgroup_oom_unregister_event\">mem_cgroup_oom_unregister_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_OOM_TYPE\">_OOM_TYPE</a>, <a class=\"id\" href=\"#OOM_CONTROL\">OOM_CONTROL</a>),", 
"<span class=\"ts\"/>},", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR_SWAP\">CONFIG_CGROUP_MEM_RES_CTLR_SWAP</a>", 
"static struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#memsw_cgroup_files\">memsw_cgroup_files</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"memsw.usage_in_bytes\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#register_event\">register_event</a> = <a class=\"id\" href=\"#mem_cgroup_usage_register_event\">mem_cgroup_usage_register_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#unregister_event\">unregister_event</a> = <a class=\"id\" href=\"#mem_cgroup_usage_unregister_event\">mem_cgroup_usage_unregister_event</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"memsw.max_usage_in_bytes\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>, <a class=\"id\" href=\"#RES_MAX_USAGE\">RES_MAX_USAGE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#trigger\">trigger</a> = <a class=\"id\" href=\"#mem_cgroup_reset\">mem_cgroup_reset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"memsw.limit_in_bytes\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_string\">write_string</a> = <a class=\"id\" href=\"#mem_cgroup_write\">mem_cgroup_write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"memsw.failcnt\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>, <a class=\"id\" href=\"#RES_FAILCNT\">RES_FAILCNT</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#trigger\">trigger</a> = <a class=\"id\" href=\"#mem_cgroup_reset\">mem_cgroup_reset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>,", 
"<span class=\"ts\"/>},", 
"};", 
"", 
"static int <a class=\"id\" href=\"#register_memsw_files\">register_memsw_files</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_add_files\">cgroup_add_files</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#memsw_cgroup_files\">memsw_cgroup_files</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#memsw_cgroup_files\">memsw_cgroup_files</a>));", 
"};", 
"#else", 
"static int <a class=\"id\" href=\"#register_memsw_files\">register_memsw_files</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#alloc_mem_cgroup_per_zone_info\">alloc_mem_cgroup_per_zone_info</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_node\">mem_cgroup_per_node</a> *<a class=\"id\" href=\"#pn\">pn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This routine is called against possible nodes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But it's BUG to call kmalloc() against offline node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: this routine can waste much memory for nodes which will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       never be onlined. It's better to use memory hotplug callback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_state\">node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_NORMAL_MEMORY\">N_NORMAL_MEMORY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(*<a class=\"id\" href=\"#pn\">pn</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pn\">pn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#nodeinfo\">nodeinfo</a>[<a class=\"id\" href=\"#node\">node</a>] = <a class=\"id\" href=\"#pn\">pn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#pn\">pn</a>, 0, sizeof(*<a class=\"id\" href=\"#pn\">pn</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#zone\">zone</a> = 0; <a class=\"id\" href=\"#zone\">zone</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#zone\">zone</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = &amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#zoneinfo\">zoneinfo</a>[<a class=\"id\" href=\"#zone\">zone</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_lru\">for_each_lru</a>(<a class=\"id\" href=\"#l\">l</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#l\">l</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#usage_in_excess\">usage_in_excess</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#on_tree\">on_tree</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_mem_cgroup_per_zone_info\">free_mem_cgroup_per_zone_info</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#nodeinfo\">nodeinfo</a>[<a class=\"id\" href=\"#node\">node</a>]);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cgroup_alloc\">mem_cgroup_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can be very big if MAX_NUMNODES is very big */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#mem\">mem</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#mem_cgroup_stat_cpu\">mem_cgroup_stat_cpu</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * At destroying mem_cgroup, references from swap_cgroup can remain.</span>", 
"<span class=\"comment\"> * (scanning all at force_empty is too costly...)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Instead of clearing all references at force_empty, we remember</span>", 
"<span class=\"comment\"> * the number of reference from swap_cgroup and free mem_cgroup when</span>", 
"<span class=\"comment\"> * it goes down to 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Removal of cgroup itself succeeds regardless of refs from swap.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#__mem_cgroup_free\">__mem_cgroup_free</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_remove_from_trees\">mem_cgroup_remove_from_trees</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_css_id\">free_css_id</a>(&amp;<a class=\"id\" href=\"#mem_cgroup_subsys\">mem_cgroup_subsys</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_mem_cgroup_per_zone_info\">free_mem_cgroup_per_zone_info</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>);", 
"<span class=\"ts\"/>if (sizeof(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>) &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_get\">mem_cgroup_get</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__mem_cgroup_put\">__mem_cgroup_put</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_sub_and_test\">atomic_sub_and_test</a>(<a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent_mem_cgroup\">parent_mem_cgroup</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_free\">__mem_cgroup_free</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_put\">mem_cgroup_put</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_put\">mem_cgroup_put</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_put\">__mem_cgroup_put</a>(<a class=\"id\" href=\"#mem\">mem</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns the parent mem_cgroup in memcgroup hierarchy with hierarchy enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#parent_mem_cgroup\">parent_mem_cgroup</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_from_res_counter\">mem_cgroup_from_res_counter</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR_SWAP\">CONFIG_CGROUP_MEM_RES_CTLR_SWAP</a>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#enable_swap_cgroup\">enable_swap_cgroup</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>() && <a class=\"id\" href=\"#really_do_swap_account\">really_do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_swap_account\">do_swap_account</a> = 1;", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#enable_swap_cgroup\">enable_swap_cgroup</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_soft_limit_tree_init\">mem_cgroup_soft_limit_tree_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_node\">mem_cgroup_tree_per_node</a> *<a class=\"id\" href=\"#rtpn\">rtpn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *<a class=\"id\" href=\"#rtpz\">rtpz</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_state\">node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_NORMAL_MEMORY\">N_NORMAL_MEMORY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtpn\">rtpn</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(sizeof(*<a class=\"id\" href=\"#rtpn\">rtpn</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rtpn\">rtpn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#soft_limit_tree\">soft_limit_tree</a>.<a class=\"id\" href=\"#rb_tree_per_node\">rb_tree_per_node</a>[<a class=\"id\" href=\"#node\">node</a>] = <a class=\"id\" href=\"#rtpn\">rtpn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#zone\">zone</a> = 0; <a class=\"id\" href=\"#zone\">zone</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#zone\">zone</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtpz\">rtpz</a> = &amp;<a class=\"id\" href=\"#rtpn\">rtpn</a>-><a class=\"id\" href=\"#rb_tree_per_zone\">rb_tree_per_zone</a>[<a class=\"id\" href=\"#zone\">zone</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtpz\">rtpz</a>-><a class=\"id\" href=\"#rb_root\">rb_root</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#rtpz\">rtpz</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> * <a class=\"id\" href=\"#__ref\">__ref</a>", 
"<a class=\"id\" href=\"#mem_cgroup_create\">mem_cgroup_create</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_alloc\">mem_cgroup_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_mem_cgroup_per_zone_info\">alloc_mem_cgroup_per_zone_info</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_out\">free_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* root ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_swap_cgroup\">enable_swap_cgroup</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_mem_cgroup\">root_mem_cgroup</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_soft_limit_tree_init\">mem_cgroup_soft_limit_tree_init</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_out\">free_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#memcg_stock_pcp\">memcg_stock_pcp</a> *<a class=\"id\" href=\"#stock\">stock</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#memcg_stock\">memcg_stock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#drain_local_stock\">drain_local_stock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#memcg_stock_cpu_callback\">memcg_stock_cpu_callback</a>, 0);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_kill_disable\">oom_kill_disable</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#oom_kill_disable\">oom_kill_disable</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a> && <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_init\">res_counter_init</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_init\">res_counter_init</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#memsw\">memsw</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We increment refcnt of the parent to ensure that we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * safely access it on res_counter_charge/uncharge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This refcnt will be decremented when freeing this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mem_cgroup(see mem_cgroup_put).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_get\">mem_cgroup_get</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_init\">res_counter_init</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_init\">res_counter_init</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#last_scanned_child\">last_scanned_child</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#reclaim_param_lock\">reclaim_param_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_notify\">oom_notify</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#swappiness\">swappiness</a> = <a class=\"id\" href=\"#get_swappiness\">get_swappiness</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#move_charge_at_immigrate\">move_charge_at_immigrate</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#thresholds_lock\">thresholds_lock</a>);", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>;", 
"<a class=\"id\" href=\"#free_out\">free_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_free\">__mem_cgroup_free</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_mem_cgroup\">root_mem_cgroup</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_pre_destroy\">mem_cgroup_pre_destroy</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_force_empty\">mem_cgroup_force_empty</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_destroy\">mem_cgroup_destroy</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_put\">mem_cgroup_put</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_populate\">mem_cgroup_populate</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cgroup_add_files\">cgroup_add_files</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#mem_cgroup_files\">mem_cgroup_files</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#mem_cgroup_files\">mem_cgroup_files</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_memsw_files\">register_memsw_files</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#ss\">ss</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<span class=\"comment\">/* Handlers for move charge at task migration. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PRECHARGE_COUNT_AT_ONCE\">PRECHARGE_COUNT_AT_ONCE</a><span class=\"ts\"/>256", 
"static int <a class=\"id\" href=\"#mem_cgroup_do_precharge\">mem_cgroup_do_precharge</a>(unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#batch_count\">batch_count</a> = <a class=\"id\" href=\"#PRECHARGE_COUNT_AT_ONCE\">PRECHARGE_COUNT_AT_ONCE</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#mem\">mem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a> += <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we don't need css_get for root */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* try to charge at once */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#dummy\">dummy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"mem\" cannot be under rmdir() because we've already checked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by cgroup_lock_live_cgroup() that it is not removed and we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are still under the same cgroup_mutex. So we can postpone</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * css_get().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res_counter_charge\">res_counter_charge</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#dummy\">dummy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#one_by_one\">one_by_one</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a> && <a class=\"id\" href=\"#res_counter_charge\">res_counter_charge</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#dummy\">dummy</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#one_by_one\">one_by_one</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a> += <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#one_by_one\">one_by_one</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* fall back to one by one charge */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#batch_count\">batch_count</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#batch_count\">batch_count</a> = <a class=\"id\" href=\"#PRECHARGE_COUNT_AT_ONCE\">PRECHARGE_COUNT_AT_ONCE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__mem_cgroup_try_charge\">__mem_cgroup_try_charge</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || !<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mem_cgroup_clear_mc() will do uncharge later */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_target_pte_for_mc - check a pte whether it is valid for move charge</span>", 
"<span class=\"comment\"> * @vma: the vma the pte to be checked belongs</span>", 
"<span class=\"comment\"> * @addr: the address corresponding to the pte to be checked</span>", 
"<span class=\"comment\"> * @ptent: the pte to be checked</span>", 
"<span class=\"comment\"> * @target: the pointer the target page or swap ent will be stored(can be NULL)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns</span>", 
"<span class=\"comment\"> *   0(MC_TARGET_NONE): if the pte is not a target for move charge.</span>", 
"<span class=\"comment\"> *   1(MC_TARGET_PAGE): if the page corresponding to this pte is a target for</span>", 
"<span class=\"comment\"> *     move charge. if @target is not NULL, the page is stored in target-&gt;page</span>", 
"<span class=\"comment\"> *     with extra refcnt got(Callers should handle it).</span>", 
"<span class=\"comment\"> *   2(MC_TARGET_SWAP): if the swap entry corresponding to this pte is a</span>", 
"<span class=\"comment\"> *     target for charge migration. if @target is not NULL, the entry is stored</span>", 
"<span class=\"comment\"> *     in target-&gt;ent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with pte lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"union <a class=\"id\" href=\"#mc_target\">mc_target</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a><span class=\"ts\"/>*<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>;", 
"};", 
"", 
"enum <a class=\"id\" href=\"#mc_target_type\">mc_target_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MC_TARGET_NONE\">MC_TARGET_NONE</a>,<span class=\"ts\"/><span class=\"comment\">/* not used */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MC_TARGET_PAGE\">MC_TARGET_PAGE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MC_TARGET_SWAP\">MC_TARGET_SWAP</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#mc_handle_present_pte\">mc_handle_present_pte</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#ptent\">ptent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vm_normal_page\">vm_normal_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptent\">ptent</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a> || !<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we don't move shared anon */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#move_anon\">move_anon</a>() || <a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>) &gt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#move_file\">move_file</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we ignore mapcount for file pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#mc_handle_swap_pte\">mc_handle_swap_pte</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#ptent\">ptent</a>, <a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#usage_count\">usage_count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#pte_to_swp_entry\">pte_to_swp_entry</a>(<a class=\"id\" href=\"#ptent\">ptent</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#move_anon\">move_anon</a>() || <a class=\"id\" href=\"#non_swap_entry\">non_swap_entry</a>(<a class=\"id\" href=\"#ent\">ent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usage_count\">usage_count</a> = <a class=\"id\" href=\"#mem_cgroup_count_swap_user\">mem_cgroup_count_swap_user</a>(<a class=\"id\" href=\"#ent\">ent</a>, &amp;<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usage_count\">usage_count</a> &gt; 1) { <span class=\"comment\">/* we don't move shared anon */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#mc_handle_file_pte\">mc_handle_file_pte</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#ptent\">ptent</a>, <a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>) <span class=\"comment\">/* anonymous vma */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#move_file\">move_file</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_none\">pte_none</a>(<a class=\"id\" href=\"#ptent\">ptent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#linear_page_index\">linear_page_index</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>else <span class=\"comment\">/* pte_file(ptent) is true */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#pte_to_pgoff\">pte_to_pgoff</a>(<a class=\"id\" href=\"#ptent\">ptent</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* page is moved even if it's not RSS of this task(page-faulted). */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping_cap_swap_backed\">mapping_cap_swap_backed</a>(<a class=\"id\" href=\"#mapping\">mapping</a>)) { <span class=\"comment\">/* normal file */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>);", 
"<span class=\"ts\"/>} else { <span class=\"comment\">/* shmem/tmpfs file. we should take account of swap too. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_get_shmem_target\">mem_cgroup_get_shmem_target</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, &amp;<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#is_target_pte_for_mc\">is_target_pte_for_mc</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#ptent\">ptent</a>, union <a class=\"id\" href=\"#mc_target\">mc_target</a> *<a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#ent\">ent</a> = { .<a class=\"id\" href=\"#val\">val</a> = 0 };", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_present\">pte_present</a>(<a class=\"id\" href=\"#ptent\">ptent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#mc_handle_present_pte\">mc_handle_present_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptent\">ptent</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#is_swap_pte\">is_swap_pte</a>(<a class=\"id\" href=\"#ptent\">ptent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#mc_handle_swap_pte\">mc_handle_swap_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptent\">ptent</a>, &amp;<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pte_none\">pte_none</a>(<a class=\"id\" href=\"#ptent\">ptent</a>) || <a class=\"id\" href=\"#pte_file\">pte_file</a>(<a class=\"id\" href=\"#ptent\">ptent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#mc_handle_file_pte\">mc_handle_file_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptent\">ptent</a>, &amp;<a class=\"id\" href=\"#ent\">ent</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a> && !<a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do only loose check w/o page_cgroup lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mem_cgroup_move_account() checks the pc is valid or not under</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>) && <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> == <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#MC_TARGET_PAGE\">MC_TARGET_PAGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#target\">target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> || !<a class=\"id\" href=\"#target\">target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* There is a swap entry and a page doesn't exist or isn't charged */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#val\">val</a> && !<a class=\"id\" href=\"#ret\">ret</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_id\">css_id</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#css\">css</a>) == <a class=\"id\" href=\"#lookup_swap_cgroup\">lookup_swap_cgroup</a>(<a class=\"id\" href=\"#ent\">ent</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#MC_TARGET_SWAP\">MC_TARGET_SWAP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#target\">target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_count_precharge_pte_range\">mem_cgroup_count_precharge_pte_range</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> *<a class=\"id\" href=\"#walk\">walk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#pte\">pte</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_target_pte_for_mc\">is_target_pte_for_mc</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a>++;<span class=\"ts\"/><span class=\"comment\">/* increment precharge temporarily */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a> - 1, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#mem_cgroup_count_precharge\">mem_cgroup_count_precharge</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#precharge\">precharge</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#vma\">vma</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> <a class=\"id\" href=\"#mem_cgroup_count_precharge_walk\">mem_cgroup_count_precharge_walk</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pmd_entry\">pmd_entry</a> = <a class=\"id\" href=\"#mem_cgroup_count_precharge_pte_range\">mem_cgroup_count_precharge_pte_range</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_page_range\">walk_page_range</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mem_cgroup_count_precharge_walk\">mem_cgroup_count_precharge_walk</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#precharge\">precharge</a> = <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#precharge\">precharge</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_precharge_mc\">mem_cgroup_precharge_mc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_do_precharge\">mem_cgroup_do_precharge</a>(<a class=\"id\" href=\"#mem_cgroup_count_precharge\">mem_cgroup_count_precharge</a>(<a class=\"id\" href=\"#mm\">mm</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_clear_mc\">mem_cgroup_clear_mc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we must uncharge all the leftover precharges from mc.to */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_cancel_charge\">__mem_cgroup_cancel_charge</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we didn't uncharge from mc.from at mem_cgroup_move_account(), so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we must uncharge here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_charge\">moved_charge</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_cancel_charge\">__mem_cgroup_cancel_charge</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_charge\">moved_charge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_charge\">moved_charge</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* we must fixup refcnts and charges */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_swap\">moved_swap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* uncharge swap account from the old cgroup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#memsw\">memsw</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_swap\">moved_swap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_put\">__mem_cgroup_put</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_swap\">moved_swap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we charged both to-&gt;res and to-&gt;memsw, so we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * uncharge to-&gt;res.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#res\">res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_swap\">moved_swap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we've already done mem_cgroup_get(mc.to) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_swap\">moved_swap</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moving_task\">moving_task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg_oom_recover\">memcg_oom_recover</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg_oom_recover\">memcg_oom_recover</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#waitq\">waitq</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_can_attach\">mem_cgroup_can_attach</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#threadgroup\">threadgroup</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#move_charge_at_immigrate\">move_charge_at_immigrate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#mem_cgroup_from_task\">mem_cgroup_from_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#from\">from</a> == <a class=\"id\" href=\"#mem\">mem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We move charges only when we move a owner of the mm */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#owner\">owner</a> == <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_charge\">moved_charge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_swap\">moved_swap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moving_task\">moving_task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#precharge\">precharge</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_charge\">moved_charge</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moved_swap\">moved_swap</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moving_task\">moving_task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_precharge_mc\">mem_cgroup_precharge_mc</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_clear_mc\">mem_cgroup_clear_mc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_cancel_attach\">mem_cgroup_cancel_attach</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>,", 
];
xr_frag_insert('l/ea/ffe16209bc7cca8fbd7ad07745252098a7bc8a.xr', __xr_tmp);
