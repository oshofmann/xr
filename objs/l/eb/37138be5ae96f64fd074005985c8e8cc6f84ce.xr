var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Written by: Matthew Dobson, IBM Corporation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002, IBM Corp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or</span>", 
"<span class=\"comment\"> * NON INFRINGEMENT.  See the GNU General Public License for more</span>", 
"<span class=\"comment\"> * details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Send feedback to &lt;colpatch@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_TOPOLOGY_H\">_ASM_X86_TOPOLOGY_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_TOPOLOGY_H\">_ASM_X86_TOPOLOGY_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_HT\">CONFIG_X86_HT</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ENABLE_TOPO_DEFINES\">ENABLE_TOPO_DEFINES</a>", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"#else", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ENABLE_TOPO_DEFINES\">ENABLE_TOPO_DEFINES</a>", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * to preserve the visibility of NUMA_NO_NODE definition,</span>", 
"<span class=\"comment\"> * moved to there from here.  May be used independent of</span>", 
"<span class=\"comment\"> * CONFIG_NUMA.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#numa\">numa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mpspec\">mpspec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"", 
"<span class=\"comment\">/* Mappings between logical cpu number and node number */</span>", 
"extern int <a class=\"id\" href=\"#cpu_to_node_map\">cpu_to_node_map</a>[];", 
"", 
"<span class=\"comment\">/* Returns the number of the node containing CPU 'cpu' */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__cpu_to_node\">__cpu_to_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_to_node_map\">cpu_to_node_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a> <a class=\"id\" href=\"#__cpu_to_node\">__cpu_to_node</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a> <a class=\"id\" href=\"#__cpu_to_node\">__cpu_to_node</a>", 
"", 
"#else <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"<span class=\"comment\">/* Mappings between logical cpu number and node number */</span>", 
"<a class=\"id\" href=\"#DECLARE_EARLY_PER_CPU\">DECLARE_EARLY_PER_CPU</a>(int, <a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PER_CPU_MAPS\">CONFIG_DEBUG_PER_CPU_MAPS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * override generic percpu implementation of cpu_to_node</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#__cpu_to_node\">__cpu_to_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a> <a class=\"id\" href=\"#__cpu_to_node\">__cpu_to_node</a>", 
"", 
"extern int <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* !CONFIG_DEBUG_PER_CPU_MAPS */</span>", 
"", 
"<span class=\"comment\">/* Same function but used if called before per_cpu areas are setup */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#early_per_cpu\">early_per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_DEBUG_PER_CPU_MAPS */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"<span class=\"comment\">/* Mappings between node number and cpus on that node. */</span>", 
"extern <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PER_CPU_MAPS\">CONFIG_DEBUG_PER_CPU_MAPS</a>", 
"extern const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(int <a class=\"id\" href=\"#node\">node</a>);", 
"#else", 
"<span class=\"comment\">/* Returns a pointer to the cpumask of CPUs on Node 'node'. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#setup_node_to_cpumask_map\">setup_node_to_cpumask_map</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns the number of the node containing Node 'node'. This</span>", 
"<span class=\"comment\"> * architecture is flat, so it is a pretty simple function!</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#parent_node\">parent_node</a>(<a class=\"id\" href=\"#node\">node</a>) (<a class=\"id\" href=\"#node\">node</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcibus_to_node\">pcibus_to_node</a>(<a class=\"id\" href=\"#bus\">bus</a>) <a class=\"id\" href=\"#__pcibus_to_node\">__pcibus_to_node</a>(<a class=\"id\" href=\"#bus\">bus</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"extern unsigned long <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>[];", 
"extern unsigned long <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>[];", 
"extern unsigned long <a class=\"id\" href=\"#node_remap_size\">node_remap_size</a>[];", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_has_online_mem\">node_has_online_mem</a>(<a class=\"id\" href=\"#nid\">nid</a>) (<a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>] != <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>])", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_CACHE_NICE_TRIES\">SD_CACHE_NICE_TRIES</a><span class=\"ts\"/>1", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_IDLE_IDX\">SD_IDLE_IDX</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"", 
"#else", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_CACHE_NICE_TRIES\">SD_CACHE_NICE_TRIES</a><span class=\"ts\"/>2", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_IDLE_IDX\">SD_IDLE_IDX</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* sched_domains SD_NODE_INIT for NUMA machines */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_NODE_INIT\">SD_NODE_INIT</a> (struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#min_interval\">min_interval</a><span class=\"ts\"/><span class=\"ts\"/>= 8,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#max_interval\">max_interval</a><span class=\"ts\"/><span class=\"ts\"/>= 32,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#busy_factor\">busy_factor</a><span class=\"ts\"/><span class=\"ts\"/>= 32,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#imbalance_pct\">imbalance_pct</a><span class=\"ts\"/><span class=\"ts\"/>= 125,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cache_nice_tries\">cache_nice_tries</a><span class=\"ts\"/>= <a class=\"id\" href=\"#SD_CACHE_NICE_TRIES\">SD_CACHE_NICE_TRIES</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#busy_idx\">busy_idx</a><span class=\"ts\"/><span class=\"ts\"/>= 3,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#idle_idx\">idle_idx</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#SD_IDLE_IDX\">SD_IDLE_IDX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#newidle_idx\">newidle_idx</a><span class=\"ts\"/><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#wake_idx\">wake_idx</a><span class=\"ts\"/><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#forkexec_idx\">forkexec_idx</a><span class=\"ts\"/><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1*<a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 1*<a class=\"id\" href=\"#SD_BALANCE_NEWIDLE\">SD_BALANCE_NEWIDLE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 1*<a class=\"id\" href=\"#SD_BALANCE_EXEC\">SD_BALANCE_EXEC</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 1*<a class=\"id\" href=\"#SD_BALANCE_FORK\">SD_BALANCE_FORK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 0*<a class=\"id\" href=\"#SD_BALANCE_WAKE\">SD_BALANCE_WAKE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 1*<a class=\"id\" href=\"#SD_WAKE_AFFINE\">SD_WAKE_AFFINE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 0*<a class=\"id\" href=\"#SD_PREFER_LOCAL\">SD_PREFER_LOCAL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 0*<a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 0*<a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 0*<a class=\"id\" href=\"#SD_SHARE_PKG_RESOURCES\">SD_SHARE_PKG_RESOURCES</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 1*<a class=\"id\" href=\"#SD_SERIALIZE\">SD_SERIALIZE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| 0*<a class=\"id\" href=\"#SD_PREFER_SIBLING\">SD_PREFER_SIBLING</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#last_balance\">last_balance</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#jiffies\">jiffies</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#balance_interval\">balance_interval</a><span class=\"ts\"/>= 1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64_ACPI_NUMA\">CONFIG_X86_64_ACPI_NUMA</a>", 
"extern int <a class=\"id\" href=\"#__node_distance\">__node_distance</a>(int, int);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_distance\">node_distance</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) <a class=\"id\" href=\"#__node_distance\">__node_distance</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#else <span class=\"comment\">/* !CONFIG_NUMA */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * indicate override:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a> <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#setup_node_to_cpumask_map\">setup_node_to_cpumask_map</a>(void) { }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_coregroup_mask\">cpu_coregroup_mask</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ENABLE_TOPO_DEFINES\">ENABLE_TOPO_DEFINES</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#topology_physical_package_id\">topology_physical_package_id</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#topology_core_id\">topology_core_id</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#topology_core_cpumask\">topology_core_cpumask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_core_map\">cpu_core_map</a>, <a class=\"id\" href=\"#cpu\">cpu</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#topology_thread_cpumask\">topology_thread_cpumask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_sibling_map\">cpu_sibling_map</a>, <a class=\"id\" href=\"#cpu\">cpu</a>))", 
"", 
"<span class=\"comment\">/* indicates that pointers to the topology cpumask_t maps are valid */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_provides_topology_pointers\">arch_provides_topology_pointers</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#yes\">yes</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_fix_phys_package_id\">arch_fix_phys_package_id</a>(int <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#slot\">slot</a>)", 
"{", 
"}", 
"", 
"struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a>;", 
"void <a class=\"id\" href=\"#x86_pci_root_bus_res_quirks\">x86_pci_root_bus_res_quirks</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#b\">b</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mc_capable\">mc_capable</a>()<span class=\"ts\"/>((<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> &gt; 1) && \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(0)) != <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smt_capable\">smt_capable</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> &gt; 1)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"extern int <a class=\"id\" href=\"#get_mp_bus_to_node\">get_mp_bus_to_node</a>(int <a class=\"id\" href=\"#busnum\">busnum</a>);", 
"extern void <a class=\"id\" href=\"#set_mp_bus_to_node\">set_mp_bus_to_node</a>(int <a class=\"id\" href=\"#busnum\">busnum</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_mp_bus_to_node\">get_mp_bus_to_node</a>(int <a class=\"id\" href=\"#busnum\">busnum</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_mp_bus_to_node\">set_mp_bus_to_node</a>(int <a class=\"id\" href=\"#busnum\">busnum</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_TOPOLOGY_H */</span>", 
];
xr_frag_insert('l/eb/37138be5ae96f64fd074005985c8e8cc6f84ce.xr', __xr_tmp);
