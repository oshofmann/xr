var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AMD K8 NUMA support.</span>", 
"<span class=\"comment\"> * Discover the memory map and associated nodes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This version reads it directly from the K8 northbridge.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2002,2003 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nodemask\">nodemask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci_ids\">pci_ids</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pci\">pci</a>-<a class=\"id\" href=\"#direct\">direct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#numa\">numa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mpspec\">mpspec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#k8\">k8</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct <a class=\"id\" href=\"#bootnode\">bootnode</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#nodes\">nodes</a>[8];", 
"static <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a> = <a class=\"id\" href=\"#NODE_MASK_NONE\">NODE_MASK_NONE</a>;", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#find_northbridge\">find_northbridge</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#num\">num</a> = 0; <a class=\"id\" href=\"#num\">num</a> &lt; 32; <a class=\"id\" href=\"#num\">num</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#header\">header</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(0, <a class=\"id\" href=\"#num\">num</a>, 0, 0x00);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#header\">header</a> != (<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a> | (0x1100<<16)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> != (<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a> | (0x1200<<16)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> != (<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a> | (0x1300<<16)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(0, <a class=\"id\" href=\"#num\">num</a>, 1, 0x00);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#header\">header</a> != (<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a> | (0x1101<<16)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> != (<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a> | (0x1201<<16)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> != (<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a> | (0x1301<<16)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#early_get_boot_cpu_id\">early_get_boot_cpu_id</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to get boot_cpu_id so can use that to create apicid_to_node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in k8_scan_nodes()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_MPPARSE\">CONFIG_X86_MPPARSE</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get boot-time SMP configuration:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_found_config\">smp_found_config</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_get_smp_config\">early_get_smp_config</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_init_lapic_mapping\">early_init_lapic_mapping</a>();", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#k8_get_nodes\">k8_get_nodes</a>(struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#physnodes\">physnodes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#k8_numa_init\">k8_numa_init</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#numnodes\">numnodes</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prevbase\">prevbase</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nb\">nb</a>, <a class=\"id\" href=\"#found\">found</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#reg\">reg</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#early_pci_allowed\">early_pci_allowed</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#find_northbridge\">find_northbridge</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nb\">nb</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#nb\">nb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Scanning NUMA topology in Northbridge %d\\n\", <a class=\"id\" href=\"#nb\">nb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(0, <a class=\"id\" href=\"#nb\">nb</a>, 0, 0x60);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numnodes\">numnodes</a> = ((<a class=\"id\" href=\"#reg\">reg</a> >> 4) &amp; 0xF) + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#numnodes\">numnodes</a> <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Number of physical nodes %d\\n\", <a class=\"id\" href=\"#numnodes\">numnodes</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prevbase\">prevbase</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 8; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#limit\">limit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(0, <a class=\"id\" href=\"#nb\">nb</a>, 1, 0x40 + <a class=\"id\" href=\"#i\">i</a>*8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(0, <a class=\"id\" href=\"#nb\">nb</a>, 1, 0x44 + <a class=\"id\" href=\"#i\">i</a>*8);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid\">nodeid</a> = <a class=\"id\" href=\"#limit\">limit</a> &amp; 7;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#base\">base</a> &amp; 3) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#numnodes\">numnodes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Skipping disabled node %d\\n\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodeid\">nodeid</a> >= <a class=\"id\" href=\"#numnodes\">numnodes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Ignoring excess node %d (%lx:%lx)\\n\", <a class=\"id\" href=\"#nodeid\">nodeid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#limit\">limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Skipping node entry %d (base %lx)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#base\">base</a> >> 8) &amp; 3 || (<a class=\"id\" href=\"#limit\">limit</a> >> 8) &amp; 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Node %d using interleaving mode %lx/%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#nodeid\">nodeid</a>, (<a class=\"id\" href=\"#base\">base</a> >> 8) &amp; 3, (<a class=\"id\" href=\"#limit\">limit</a> >> 8) &amp; 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Node %d already present, skipping\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> >>= 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> <<= 24;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> |= (1<<24)-1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> &gt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> <= <a class=\"id\" href=\"#base\">base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> >>= 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> <<= 24;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> &lt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> &gt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> == <a class=\"id\" href=\"#base\">base</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Empty node %d\\n\", <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> &lt; <a class=\"id\" href=\"#base\">base</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Node %d bogus settings %lx-%lx.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Could sort here, but pun for now. Should not happen anyroads. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prevbase\">prevbase</a> &gt; <a class=\"id\" href=\"#base\">base</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Node map not sorted %lx,%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#prevbase\">prevbase</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Node %d MemBase %016lx Limit %016lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#limit\">limit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prevbase\">prevbase</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#k8_scan_nodes\">k8_scan_nodes</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cores\">cores</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apicid_base\">apicid_base</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_possible_map\">node_possible_map</a> = <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memnode_shift\">memnode_shift</a> = <a class=\"id\" href=\"#compute_hash_shift\">compute_hash_shift</a>(<a class=\"id\" href=\"#nodes\">nodes</a>, 8, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memnode_shift\">memnode_shift</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"No NUMA node hash function found. Contact maintainer\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Using node hash shift of %d\\n\", <a class=\"id\" href=\"#memnode_shift\">memnode_shift</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* use the coreid bits from early_identify_cpu */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_coreid_bits\">x86_coreid_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cores\">cores</a> = (1<<<a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apicid_base\">apicid_base</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* need to get boot_cpu_id early for system with apicid lifting */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_get_boot_cpu_id\">early_get_boot_cpu_id</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"BSP APIC ID: %02x\\n\", <a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apicid_base\">apicid_base</a> = <a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e820_register_active_regions\">e820_register_active_regions</a>(<a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#apicid_base\">apicid_base</a>; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#cores\">cores</a> + <a class=\"id\" href=\"#apicid_base\">apicid_base</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[(<a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#bits\">bits</a>) + <a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_node_bootmem\">setup_node_bootmem</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_init_array\">numa_init_array</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/eb/c9db5ea83ab65c991800b978e7a69aaa613c2b.xr', __xr_tmp);
