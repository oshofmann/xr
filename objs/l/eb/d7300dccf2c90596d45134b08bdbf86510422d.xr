var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_KERNEL_H\">_LINUX_KERNEL_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_KERNEL_H\">_LINUX_KERNEL_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 'kernel.h' contains some often-used function prototypes etc</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__ALIGN_KERNEL\">__ALIGN_KERNEL</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ALIGN_KERNEL_MASK\">__ALIGN_KERNEL_MASK</a>(<a class=\"id\" href=\"#x\">x</a>, (<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#x\">x</a>))(<a class=\"id\" href=\"#a\">a</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__ALIGN_KERNEL_MASK\">__ALIGN_KERNEL_MASK</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#x\">x</a>) + (<a class=\"id\" href=\"#mask\">mask</a>)) &amp; ~(<a class=\"id\" href=\"#mask\">mask</a>))", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#stdarg\">stdarg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#log2\">log2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#typecheck\">typecheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dynamic_debug\">dynamic_debug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#bug\">bug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern const char <a class=\"id\" href=\"#linux_banner\">linux_banner</a>[];", 
"extern const char <a class=\"id\" href=\"#linux_proc_banner\">linux_proc_banner</a>[];", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a><span class=\"ts\"/>((<a class=\"id\" href=\"#u16\">u16</a>)(~0U))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHRT_MAX\">SHRT_MAX</a><span class=\"ts\"/>((<a class=\"id\" href=\"#s16\">s16</a>)(<a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a>>>1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SHRT_MIN\">SHRT_MIN</a><span class=\"ts\"/>((<a class=\"id\" href=\"#s16\">s16</a>)(-<a class=\"id\" href=\"#SHRT_MAX\">SHRT_MAX</a> - 1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a><span class=\"ts\"/><span class=\"ts\"/>((int)(~0U>>1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INT_MIN\">INT_MIN</a><span class=\"ts\"/><span class=\"ts\"/>(-<a class=\"id\" href=\"#INT_MAX\">INT_MAX</a> - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a><span class=\"ts\"/>(~0U)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a><span class=\"ts\"/>((long)(~0UL>>1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LONG_MIN\">LONG_MIN</a><span class=\"ts\"/>(-<a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a> - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a><span class=\"ts\"/>(~0UL)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a><span class=\"ts\"/>((long long)(~0ULL>>1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LLONG_MIN\">LLONG_MIN</a><span class=\"ts\"/>(-<a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a> - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a><span class=\"ts\"/>(~0ULL)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_MAGIC\">STACK_MAGIC</a><span class=\"ts\"/>0xdeadbeef", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ALIGN_KERNEL\">__ALIGN_KERNEL</a>((<a class=\"id\" href=\"#x\">x</a>), (<a class=\"id\" href=\"#a\">a</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__ALIGN_MASK\">__ALIGN_MASK</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__ALIGN_KERNEL_MASK\">__ALIGN_KERNEL_MASK</a>((<a class=\"id\" href=\"#x\">x</a>), (<a class=\"id\" href=\"#mask\">mask</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTR_ALIGN\">PTR_ALIGN</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#p\">p</a>))<a class=\"id\" href=\"#ALIGN\">ALIGN</a>((unsigned long)(<a class=\"id\" href=\"#p\">p</a>), (<a class=\"id\" href=\"#a\">a</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_ALIGNED\">IS_ALIGNED</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><span class=\"ts\"/>(((<a class=\"id\" href=\"#x\">x</a>) &amp; ((<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#x\">x</a>))(<a class=\"id\" href=\"#a\">a</a>) - 1)) == 0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#arr\">arr</a>) (sizeof(<a class=\"id\" href=\"#arr\">arr</a>) / sizeof((<a class=\"id\" href=\"#arr\">arr</a>)[0]) + <a class=\"id\" href=\"#__must_be_array\">__must_be_array</a>(<a class=\"id\" href=\"#arr\">arr</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This looks more complex than it should be. But we need to</span>", 
"<span class=\"comment\"> * get the type for the ~ right in round_down (it needs to be</span>", 
"<span class=\"comment\"> * as wide as the result!), and we want to evaluate the macro</span>", 
"<span class=\"comment\"> * arguments just once each.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__round_mask\">__round_mask</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) ((<a class=\"id\" href=\"#__typeof__\">__typeof__</a>(<a class=\"id\" href=\"#x\">x</a>))((<a class=\"id\" href=\"#y\">y</a>)-1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#round_up\">round_up</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) ((((<a class=\"id\" href=\"#x\">x</a>)-1) | <a class=\"id\" href=\"#__round_mask\">__round_mask</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>))+1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#round_down\">round_down</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) ((<a class=\"id\" href=\"#x\">x</a>) &amp; ~<a class=\"id\" href=\"#__round_mask\">__round_mask</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIELD_SIZEOF\">FIELD_SIZEOF</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#f\">f</a>) (sizeof(((<a class=\"id\" href=\"#t\">t</a>*)0)-><a class=\"id\" href=\"#f\">f</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#n\">n</a>,<a class=\"id\" href=\"#d\">d</a>) (((<a class=\"id\" href=\"#n\">n</a>) + (<a class=\"id\" href=\"#d\">d</a>) - 1) / (<a class=\"id\" href=\"#d\">d</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) ((((<a class=\"id\" href=\"#x\">x</a>) + ((<a class=\"id\" href=\"#y\">y</a>) - 1)) / (<a class=\"id\" href=\"#y\">y</a>)) * (<a class=\"id\" href=\"#y\">y</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DIV_ROUND_CLOSEST\">DIV_ROUND_CLOSEST</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#divisor\">divisor</a>)(<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#divisor\">divisor</a>) <a class=\"id\" href=\"#__divisor\">__divisor</a> = <a class=\"id\" href=\"#divisor\">divisor</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#x\">x</a>) + ((<a class=\"id\" href=\"#__divisor\">__divisor</a>) / 2)) / (<a class=\"id\" href=\"#__divisor\">__divisor</a>));<span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
")", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>  ({ <a class=\"id\" href=\"#__label__\">__label__</a> <a class=\"id\" href=\"#__here\">__here</a>; <a class=\"id\" href=\"#__here\">__here</a>: (unsigned long)&&<a class=\"id\" href=\"#__here\">__here</a>; })", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LBDAF\">CONFIG_LBDAF</a>", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#div64\">div64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sector_div\">sector_div</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sector_div\">sector_div</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#b\">b</a>)( \\", 
"{ \\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#_res\">_res</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_res\">_res</a> = (<a class=\"id\" href=\"#n\">n</a>) % (<a class=\"id\" href=\"#b\">b</a>); \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) /= (<a class=\"id\" href=\"#b\">b</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_res\">_res</a>; \\", 
"} \\", 
")", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * upper_32_bits - return bits 32-63 of a number</span>", 
"<span class=\"comment\"> * @n: the number we're accessing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A basic shift-right of a 64- or 32-bit quantity.  Use this to suppress</span>", 
"<span class=\"comment\"> * the \"right shift count &gt;= width of type\" warning when that quantity is</span>", 
"<span class=\"comment\"> * 32-bits.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#upper_32_bits\">upper_32_bits</a>(<a class=\"id\" href=\"#n\">n</a>) ((<a class=\"id\" href=\"#u32\">u32</a>)(((<a class=\"id\" href=\"#n\">n</a>) >> 16) >> 16))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * lower_32_bits - return bits 0-31 of a number</span>", 
"<span class=\"comment\"> * @n: the number we're accessing</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lower_32_bits\">lower_32_bits</a>(<a class=\"id\" href=\"#n\">n</a>) ((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#n\">n</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a><span class=\"ts\"/>\"<0>\"<span class=\"ts\"/><span class=\"comment\">/* system is unusable<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a><span class=\"ts\"/>\"<1>\"<span class=\"ts\"/><span class=\"comment\">/* action must be taken immediately<span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a><span class=\"ts\"/>\"<2>\"<span class=\"ts\"/><span class=\"comment\">/* critical conditions<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a><span class=\"ts\"/>\"<3>\"<span class=\"ts\"/><span class=\"comment\">/* error conditions<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a><span class=\"ts\"/>\"<4>\"<span class=\"ts\"/><span class=\"comment\">/* warning conditions<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a><span class=\"ts\"/>\"<5>\"<span class=\"ts\"/><span class=\"comment\">/* normal but significant condition<span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a><span class=\"ts\"/>\"<6>\"<span class=\"ts\"/><span class=\"comment\">/* informational<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a><span class=\"ts\"/>\"<7>\"<span class=\"ts\"/><span class=\"comment\">/* debug-level messages<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"", 
"<span class=\"comment\">/* Use the default kernel loglevel */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KERN_DEFAULT\">KERN_DEFAULT</a><span class=\"ts\"/>\"<d>\"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Annotation for a \"continued\" line of log printout (only done after a</span>", 
"<span class=\"comment\"> * line that had no enclosing \\n). Only to be used by core/arch code</span>", 
"<span class=\"comment\"> * during early bootup (a continued line is not SMP-safe otherwise).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a><span class=\"ts\"/>\"<c>\"", 
"", 
"extern int <a class=\"id\" href=\"#console_printk\">console_printk</a>[];", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#console_loglevel\">console_loglevel</a> (<a class=\"id\" href=\"#console_printk\">console_printk</a>[0])", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#default_message_loglevel\">default_message_loglevel</a> (<a class=\"id\" href=\"#console_printk\">console_printk</a>[1])", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#minimum_console_loglevel\">minimum_console_loglevel</a> (<a class=\"id\" href=\"#console_printk\">console_printk</a>[2])", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#default_console_loglevel\">default_console_loglevel</a> (<a class=\"id\" href=\"#console_printk\">console_printk</a>[3])", 
"", 
"struct <a class=\"id\" href=\"#completion\">completion</a>;", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>;", 
"struct <a class=\"id\" href=\"#user\">user</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT_VOLUNTARY\">CONFIG_PREEMPT_VOLUNTARY</a>", 
"extern int <a class=\"id\" href=\"#_cond_resched\">_cond_resched</a>(void);", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#might_resched\">might_resched</a>() <a class=\"id\" href=\"#_cond_resched\">_cond_resched</a>()", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#might_resched\">might_resched</a>() do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK_SLEEP\">CONFIG_DEBUG_SPINLOCK_SLEEP</a>", 
"  void <a class=\"id\" href=\"#__might_sleep\">__might_sleep</a>(const char *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#line\">line</a>, int <a class=\"id\" href=\"#preempt_offset\">preempt_offset</a>);", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * might_sleep - annotation for functions that can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this macro will print a stack trace if it is executed in an atomic</span>", 
"<span class=\"comment\"> * context (spinlock, irq-handler, ...).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a useful debugging help to be able to catch problems early and not</span>", 
"<span class=\"comment\"> * be bitten later when the calling function happens to sleep when it is not</span>", 
"<span class=\"comment\"> * supposed to.</span>", 
"<span class=\"comment\"> */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#might_sleep\">might_sleep</a>() \\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#__might_sleep\">__might_sleep</a>(<a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, 0); <a class=\"id\" href=\"#might_resched\">might_resched</a>(); } while (0)", 
"#else", 
"  static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__might_sleep\">__might_sleep</a>(const char *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#line\">line</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#preempt_offset\">preempt_offset</a>) { }", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#might_sleep\">might_sleep</a>() do { <a class=\"id\" href=\"#might_resched\">might_resched</a>(); } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#might_sleep_if\">might_sleep_if</a>(<a class=\"id\" href=\"#cond\">cond</a>) do { if (<a class=\"id\" href=\"#cond\">cond</a>) <a class=\"id\" href=\"#might_sleep\">might_sleep</a>(); } while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#x\">x</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#__x\">__x</a> = (<a class=\"id\" href=\"#x\">x</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__x\">__x</a> &lt; 0) ? -<a class=\"id\" href=\"#__x\">__x</a> : <a class=\"id\" href=\"#__x\">__x</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>})", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"void <a class=\"id\" href=\"#might_fault\">might_fault</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#might_fault\">might_fault</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#va_format\">va_format</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#atomic_notifier_head\">atomic_notifier_head</a> <a class=\"id\" href=\"#panic_notifier_list\">panic_notifier_list</a>;", 
"extern long (*<a class=\"id\" href=\"#panic_blink\">panic_blink</a>)(int <a class=\"id\" href=\"#state\">state</a>);", 
"<a class=\"id\" href=\"#NORET_TYPE\">NORET_TYPE</a> void <a class=\"id\" href=\"#panic\">panic</a>(const char * <a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#NORET_AND\">NORET_AND</a> <a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 2))) <a class=\"id\" href=\"#__cold\">__cold</a>;", 
"extern void <a class=\"id\" href=\"#oops_enter\">oops_enter</a>(void);", 
"extern void <a class=\"id\" href=\"#oops_exit\">oops_exit</a>(void);", 
"void <a class=\"id\" href=\"#print_oops_end_marker\">print_oops_end_marker</a>(void);", 
"extern int <a class=\"id\" href=\"#oops_may_print\">oops_may_print</a>(void);", 
"<a class=\"id\" href=\"#NORET_TYPE\">NORET_TYPE</a> void <a class=\"id\" href=\"#do_exit\">do_exit</a>(long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATTRIB_NORET\">ATTRIB_NORET</a>;", 
"<a class=\"id\" href=\"#NORET_TYPE\">NORET_TYPE</a> void <a class=\"id\" href=\"#complete_and_exit\">complete_and_exit</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *, long)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATTRIB_NORET\">ATTRIB_NORET</a>;", 
"extern unsigned long <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(const char *,char **,unsigned int);", 
"extern long <a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(const char *,char **,unsigned int);", 
"extern unsigned long long <a class=\"id\" href=\"#simple_strtoull\">simple_strtoull</a>(const char *,char **,unsigned int);", 
"extern long long <a class=\"id\" href=\"#simple_strtoll\">simple_strtoll</a>(const char *,char **,unsigned int);", 
"extern int <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(const char *, unsigned int, unsigned long *);", 
"extern int <a class=\"id\" href=\"#strict_strtol\">strict_strtol</a>(const char *, unsigned int, long *);", 
"extern int <a class=\"id\" href=\"#strict_strtoull\">strict_strtoull</a>(const char *, unsigned int, unsigned long long *);", 
"extern int <a class=\"id\" href=\"#strict_strtoll\">strict_strtoll</a>(const char *, unsigned int, long long *);", 
"extern int <a class=\"id\" href=\"#sprintf\">sprintf</a>(char * <a class=\"id\" href=\"#buf\">buf</a>, const char * <a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 2, 3)));", 
"extern int <a class=\"id\" href=\"#vsprintf\">vsprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, const char *, <a class=\"id\" href=\"#va_list\">va_list</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 2, 0)));", 
"extern int <a class=\"id\" href=\"#snprintf\">snprintf</a>(char * <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char * <a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 3, 4)));", 
"extern int <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 3, 0)));", 
"extern int <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(char * <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char * <a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 3, 4)));", 
"extern int <a class=\"id\" href=\"#vscnprintf\">vscnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 3, 0)));", 
"extern char *<a class=\"id\" href=\"#kasprintf\">kasprintf</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 2, 3)));", 
"extern char *<a class=\"id\" href=\"#kvasprintf\">kvasprintf</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>);", 
"", 
"extern int <a class=\"id\" href=\"#sscanf\">sscanf</a>(const char *, const char *, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#scanf\">scanf</a>, 2, 3)));", 
"extern int <a class=\"id\" href=\"#vsscanf\">vsscanf</a>(const char *, const char *, <a class=\"id\" href=\"#va_list\">va_list</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#scanf\">scanf</a>, 2, 0)));", 
"", 
"extern int <a class=\"id\" href=\"#get_option\">get_option</a>(char **<a class=\"id\" href=\"#str\">str</a>, int *<a class=\"id\" href=\"#pint\">pint</a>);", 
"extern char *<a class=\"id\" href=\"#get_options\">get_options</a>(const char *<a class=\"id\" href=\"#str\">str</a>, int <a class=\"id\" href=\"#nints\">nints</a>, int *<a class=\"id\" href=\"#ints\">ints</a>);", 
"extern unsigned long long <a class=\"id\" href=\"#memparse\">memparse</a>(const char *<a class=\"id\" href=\"#ptr\">ptr</a>, char **<a class=\"id\" href=\"#retptr\">retptr</a>);", 
"", 
"extern int <a class=\"id\" href=\"#core_kernel_text\">core_kernel_text</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"extern int <a class=\"id\" href=\"#__kernel_text_address\">__kernel_text_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"extern int <a class=\"id\" href=\"#kernel_text_address\">kernel_text_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"extern int <a class=\"id\" href=\"#func_ptr_is_kernel_text\">func_ptr_is_kernel_text</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"struct <a class=\"id\" href=\"#pid\">pid</a>;", 
"extern struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#session_of_pgrp\">session_of_pgrp</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pgrp\">pgrp</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * FW_BUG</span>", 
"<span class=\"comment\"> * Add this to a message where you are sure the firmware is buggy or behaves</span>", 
"<span class=\"comment\"> * really stupid or out of spec. Be aware that the responsible BIOS developer</span>", 
"<span class=\"comment\"> * should be able to fix this issue or at least get a concrete idea of the</span>", 
"<span class=\"comment\"> * problem by reading your message without the need of looking at the kernel</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Use it for definite and high priority BIOS bugs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FW_WARN</span>", 
"<span class=\"comment\"> * Use it for not that clear (e.g. could the kernel messed up things already?)</span>", 
"<span class=\"comment\"> * and medium priority BIOS bugs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FW_INFO</span>", 
"<span class=\"comment\"> * Use this one if you want to tell the user or vendor about something</span>", 
"<span class=\"comment\"> * suspicious, but generally harmless related to the firmware.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use it for information or very low priority BIOS bugs.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FW_BUG\">FW_BUG</a><span class=\"ts\"/><span class=\"ts\"/>\"[Firmware Bug]: \"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FW_WARN\">FW_WARN</a><span class=\"ts\"/><span class=\"ts\"/>\"[Firmware Warn]: \"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FW_INFO\">FW_INFO</a><span class=\"ts\"/><span class=\"ts\"/>\"[Firmware Info]: \"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * HW_ERR</span>", 
"<span class=\"comment\"> * Add this to a message for hardware errors, so that user can report</span>", 
"<span class=\"comment\"> * it to hardware vendor instead of LKML or software vendor.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HW_ERR\">HW_ERR</a><span class=\"ts\"/><span class=\"ts\"/>\"[Hardware Error]: \"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PRINTK\">CONFIG_PRINTK</a>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> int <a class=\"id\" href=\"#vprintk\">vprintk</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 0)));", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> int <a class=\"id\" href=\"#printk\">printk</a>(const char * <a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 2))) <a class=\"id\" href=\"#__cold\">__cold</a>;", 
"", 
"extern int <a class=\"id\" href=\"#__printk_ratelimit\">__printk_ratelimit</a>(const char *<a class=\"id\" href=\"#func\">func</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>() <a class=\"id\" href=\"#__printk_ratelimit\">__printk_ratelimit</a>(<a class=\"id\" href=\"#__func__\">__func__</a>)", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#printk_timed_ratelimit\">printk_timed_ratelimit</a>(unsigned long *<a class=\"id\" href=\"#caller_jiffies\">caller_jiffies</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#interval_msec\">interval_msec</a>);", 
"", 
"extern int <a class=\"id\" href=\"#printk_delay_msec\">printk_delay_msec</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Print a one-time message (analogous to WARN_ONCE() et al):</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#x\">x</a>...) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__print_once\">__print_once</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__print_once\">__print_once</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__print_once\">__print_once</a> = <a class=\"id\" href=\"#true\">true</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#x\">x</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"void <a class=\"id\" href=\"#log_buf_kexec_setup\">log_buf_kexec_setup</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vprintk\">vprintk</a>(const char *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 0)));", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vprintk\">vprintk</a>(const char *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#printk\">printk</a>(const char *<a class=\"id\" href=\"#s\">s</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 2)));", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__cold\">__cold</a> <a class=\"id\" href=\"#printk\">printk</a>(const char *<a class=\"id\" href=\"#s\">s</a>, ...) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>(void) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#printk_timed_ratelimit\">printk_timed_ratelimit</a>(unsigned long *<a class=\"id\" href=\"#caller_jiffies\">caller_jiffies</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#interval_msec\">interval_msec</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ return <a class=\"id\" href=\"#false\">false</a>; }", 
"", 
"<span class=\"comment\">/* No effect, but we still get type checking even in the !PRINTK case: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#x\">x</a>...) <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#log_buf_kexec_setup\">log_buf_kexec_setup</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dummy printk for disabled debugging statements to use whilst maintaining</span>", 
"<span class=\"comment\"> * gcc's format and side-effect checking.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 2)))", 
"int <a class=\"id\" href=\"#no_printk\">no_printk</a>(const char *<a class=\"id\" href=\"#s\">s</a>, ...) { return 0; }", 
"", 
"extern int <a class=\"id\" href=\"#printk_needs_cpu\">printk_needs_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern void <a class=\"id\" href=\"#printk_tick\">printk_tick</a>(void);", 
"", 
"extern void <a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#format\">format</a>(<a class=\"id\" href=\"#printf\">printf</a>, 1, 2)))", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_printk\">early_printk</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...);", 
"", 
"unsigned long <a class=\"id\" href=\"#int_sqrt\">int_sqrt</a>(unsigned long);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#console_silent\">console_silent</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_loglevel\">console_loglevel</a> = 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#console_verbose\">console_verbose</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_loglevel\">console_loglevel</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_loglevel\">console_loglevel</a> = 15;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#bust_spinlocks\">bust_spinlocks</a>(int <a class=\"id\" href=\"#yes\">yes</a>);", 
"extern void <a class=\"id\" href=\"#wake_up_klogd\">wake_up_klogd</a>(void);", 
"extern int <a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If set, an oops, panic(), BUG() or die() is in progress */</span>", 
"extern int <a class=\"id\" href=\"#panic_timeout\">panic_timeout</a>;", 
"extern int <a class=\"id\" href=\"#panic_on_oops\">panic_on_oops</a>;", 
"extern int <a class=\"id\" href=\"#panic_on_unrecovered_nmi\">panic_on_unrecovered_nmi</a>;", 
"extern int <a class=\"id\" href=\"#panic_on_io_nmi\">panic_on_io_nmi</a>;", 
"extern const char *<a class=\"id\" href=\"#print_tainted\">print_tainted</a>(void);", 
"extern void <a class=\"id\" href=\"#add_taint\">add_taint</a>(unsigned <a class=\"id\" href=\"#flag\">flag</a>);", 
"extern int <a class=\"id\" href=\"#test_taint\">test_taint</a>(unsigned <a class=\"id\" href=\"#flag\">flag</a>);", 
"extern unsigned long <a class=\"id\" href=\"#get_taint\">get_taint</a>(void);", 
"extern int <a class=\"id\" href=\"#root_mountflags\">root_mountflags</a>;", 
"", 
"<span class=\"comment\">/* Values used for system_state */</span>", 
"extern enum <a class=\"id\" href=\"#system_states\">system_states</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYSTEM_RUNNING\">SYSTEM_RUNNING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYSTEM_HALT\">SYSTEM_HALT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYSTEM_POWER_OFF\">SYSTEM_POWER_OFF</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYSTEM_RESTART\">SYSTEM_RESTART</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYSTEM_SUSPEND_DISK\">SYSTEM_SUSPEND_DISK</a>,", 
"} <a class=\"id\" href=\"#system_state\">system_state</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_PROPRIETARY_MODULE\">TAINT_PROPRIETARY_MODULE</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_FORCED_MODULE\">TAINT_FORCED_MODULE</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_UNSAFE_SMP\">TAINT_UNSAFE_SMP</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_FORCED_RMMOD\">TAINT_FORCED_RMMOD</a><span class=\"ts\"/><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_MACHINE_CHECK\">TAINT_MACHINE_CHECK</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_BAD_PAGE\">TAINT_BAD_PAGE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_USER\">TAINT_USER</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_DIE\">TAINT_DIE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_OVERRIDDEN_ACPI_TABLE\">TAINT_OVERRIDDEN_ACPI_TABLE</a><span class=\"ts\"/>8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_WARN\">TAINT_WARN</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>9", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_CRAP\">TAINT_CRAP</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TAINT_FIRMWARE_WORKAROUND\">TAINT_FIRMWARE_WORKAROUND</a><span class=\"ts\"/>11", 
"", 
"extern void <a class=\"id\" href=\"#dump_stack\">dump_stack</a>(void) <a class=\"id\" href=\"#__cold\">__cold</a>;", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_PREFIX_NONE\">DUMP_PREFIX_NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_PREFIX_ADDRESS\">DUMP_PREFIX_ADDRESS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_PREFIX_OFFSET\">DUMP_PREFIX_OFFSET</a>", 
"};", 
"extern void <a class=\"id\" href=\"#hex_dump_to_buffer\">hex_dump_to_buffer</a>(const void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rowsize\">rowsize</a>, int <a class=\"id\" href=\"#groupsize\">groupsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#linebuf\">linebuf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#linebuflen\">linebuflen</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ascii\">ascii</a>);", 
"extern void <a class=\"id\" href=\"#print_hex_dump\">print_hex_dump</a>(const char *<a class=\"id\" href=\"#level\">level</a>, const char *<a class=\"id\" href=\"#prefix_str\">prefix_str</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#prefix_type\">prefix_type</a>, int <a class=\"id\" href=\"#rowsize\">rowsize</a>, int <a class=\"id\" href=\"#groupsize\">groupsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ascii\">ascii</a>);", 
"extern void <a class=\"id\" href=\"#print_hex_dump_bytes\">print_hex_dump_bytes</a>(const char *<a class=\"id\" href=\"#prefix_str\">prefix_str</a>, int <a class=\"id\" href=\"#prefix_type\">prefix_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"extern const char <a class=\"id\" href=\"#hex_asc\">hex_asc</a>[];", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hex_asc_lo\">hex_asc_lo</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#hex_asc\">hex_asc</a>[((<a class=\"id\" href=\"#x\">x</a>) &amp; 0x0f)]", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hex_asc_hi\">hex_asc_hi</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#hex_asc\">hex_asc</a>[((<a class=\"id\" href=\"#x\">x</a>) &amp; 0xf0) >> 4]", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> char *<a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#byte\">byte</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#hex_asc_hi\">hex_asc_hi</a>(<a class=\"id\" href=\"#byte\">byte</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#hex_asc_lo\">hex_asc_lo</a>(<a class=\"id\" href=\"#byte\">byte</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(char <a class=\"id\" href=\"#ch\">ch</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) <a class=\"id\" href=\"#fmt\">fmt</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"        <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_alert\">pr_alert</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"        <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_crit\">pr_crit</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"        <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_err\">pr_err</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"        <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_warning\">pr_warning</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"        <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_warn\">pr_warn</a> <a class=\"id\" href=\"#pr_warning\">pr_warning</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_notice\">pr_notice</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"        <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_info\">pr_info</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"        <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_cont\">pr_cont</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> <a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"", 
"<span class=\"comment\">/* pr_devel() should produce zero code unless DEBUG is defined */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_devel\">pr_devel</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_devel\">pr_devel</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/>({ if (0) <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>); 0; })", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* If you are writing a driver, please use dev_dbg instead */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#DEBUG\">DEBUG</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_debug\">pr_debug</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DYNAMIC_DEBUG\">CONFIG_DYNAMIC_DEBUG</a>)", 
"<span class=\"comment\">/* dynamic_pr_debug() uses pr_fmt() internally so we don't need it here */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_debug\">pr_debug</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dynamic_pr_debug\">dynamic_pr_debug</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_debug\">pr_debug</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/>({ if (0) <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>); 0; })", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ratelimited messages with local ratelimit_state,</span>", 
"<span class=\"comment\"> * no local ratelimit_state used in the !PRINTK case</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PRINTK\">CONFIG_PRINTK</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...)  ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_RATELIMIT_STATE\">DEFINE_RATELIMIT_STATE</a>(<a class=\"id\" href=\"#_rs\">_rs</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#DEFAULT_RATELIMIT_INTERVAL\">DEFAULT_RATELIMIT_INTERVAL</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#DEFAULT_RATELIMIT_BURST\">DEFAULT_RATELIMIT_BURST</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__ratelimit\">__ratelimit</a>(&amp;<a class=\"id\" href=\"#_rs\">_rs</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#else", 
"<span class=\"comment\">/* No effect, but we still get type checking even in the !PRINTK case: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a> <a class=\"id\" href=\"#printk\">printk</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_emerg_ratelimited\">pr_emerg_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_alert_ratelimited\">pr_alert_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_crit_ratelimited\">pr_crit_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_err_ratelimited\">pr_err_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_warning_ratelimited\">pr_warning_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_warn_ratelimited\">pr_warn_ratelimited</a> <a class=\"id\" href=\"#pr_warning_ratelimited\">pr_warning_ratelimited</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_notice_ratelimited\">pr_notice_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_info_ratelimited\">pr_info_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"<span class=\"comment\">/* no pr_cont_ratelimited, don't do that... */</span>", 
"<span class=\"comment\">/* If you are writing a driver, please use dev_dbg instead */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#DEBUG\">DEBUG</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_debug_ratelimited\">pr_debug_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_debug_ratelimited\">pr_debug_ratelimited</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ...) \\", 
"<span class=\"ts\"/>({ if (0) <a class=\"id\" href=\"#printk_ratelimited\">printk_ratelimited</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>), \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>); 0; })", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * General tracing related utility functions - trace_printk(),</span>", 
"<span class=\"comment\"> * tracing_on/tracing_off and tracing_start()/tracing_stop</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use tracing_on/tracing_off when you want to quickly turn on or off</span>", 
"<span class=\"comment\"> * tracing. It simply enables or disables the recording of the trace events.</span>", 
"<span class=\"comment\"> * This also corresponds to the user space /sys/kernel/debug/tracing/tracing_on</span>", 
"<span class=\"comment\"> * file, which gives a means for the kernel and userspace to interact.</span>", 
"<span class=\"comment\"> * Place a tracing_off() in the kernel where you want tracing to end.</span>", 
"<span class=\"comment\"> * From user space, examine the trace, and then echo 1 &gt; tracing_on</span>", 
"<span class=\"comment\"> * to continue tracing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * tracing_stop/tracing_start has slightly more overhead. It is used</span>", 
"<span class=\"comment\"> * by things like suspend to ram where disabling the recording of the</span>", 
"<span class=\"comment\"> * trace is not enough, but tracing must actually stop because things</span>", 
"<span class=\"comment\"> * like calling smp_processor_id() may crash the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Most likely, you want to use tracing_on/tracing_off.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RING_BUFFER\">CONFIG_RING_BUFFER</a>", 
"void <a class=\"id\" href=\"#tracing_on\">tracing_on</a>(void);", 
"void <a class=\"id\" href=\"#tracing_off\">tracing_off</a>(void);", 
"<span class=\"comment\">/* trace_off_permanent stops recording with no way to bring it back */</span>", 
"void <a class=\"id\" href=\"#tracing_off_permanent\">tracing_off_permanent</a>(void);", 
"int <a class=\"id\" href=\"#tracing_is_on\">tracing_is_on</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tracing_on\">tracing_on</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tracing_off\">tracing_off</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tracing_off_permanent\">tracing_off_permanent</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tracing_is_on\">tracing_is_on</a>(void) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"enum <a class=\"id\" href=\"#ftrace_dump_mode\">ftrace_dump_mode</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_NONE\">DUMP_NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_ALL\">DUMP_ALL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_ORIG\">DUMP_ORIG</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"extern void <a class=\"id\" href=\"#tracing_start\">tracing_start</a>(void);", 
"extern void <a class=\"id\" href=\"#tracing_stop\">tracing_stop</a>(void);", 
"extern void <a class=\"id\" href=\"#ftrace_off_permanent\">ftrace_off_permanent</a>(void);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 2)))", 
"<a class=\"id\" href=\"#____trace_printk_check_format\">____trace_printk_check_format</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__trace_printk_check_format\">__trace_printk_check_format</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (0)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#____trace_printk_check_format\">____trace_printk_check_format</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * trace_printk - printf formatting in the ftrace buffer</span>", 
"<span class=\"comment\"> * @fmt: the printf format for printing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: __trace_printk is an internal function for trace_printk and</span>", 
"<span class=\"comment\"> *       the @ip is passed in via the trace_printk macro.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function allows a kernel developer to debug fast path sections</span>", 
"<span class=\"comment\"> * that printk is not appropriate for. By scattering in various</span>", 
"<span class=\"comment\"> * printk like tracing in the code, a developer can quickly see</span>", 
"<span class=\"comment\"> * where problems are occurring.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is intended as a debugging tool for the developer only.</span>", 
"<span class=\"comment\"> * Please refrain from leaving trace_printks scattered around in</span>", 
"<span class=\"comment\"> * your code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#trace_printk\">trace_printk</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__trace_printk_check_format\">__trace_printk_check_format</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#fmt\">fmt</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>static const char *<a class=\"id\" href=\"#trace_printk_fmt\">trace_printk_fmt</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"__trace_printk_fmt\"))) =<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) ? <a class=\"id\" href=\"#fmt\">fmt</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__trace_bprintk\">__trace_bprintk</a>(<a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>, <a class=\"id\" href=\"#trace_printk_fmt\">trace_printk_fmt</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__trace_printk\">__trace_printk</a>(<a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"extern int", 
"<a class=\"id\" href=\"#__trace_bprintk\">__trace_bprintk</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 2, 3)));", 
"", 
"extern int", 
"<a class=\"id\" href=\"#__trace_printk\">__trace_printk</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 2, 3)));", 
"", 
"extern void <a class=\"id\" href=\"#trace_dump_stack\">trace_dump_stack</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The double __builtin_constant_p is because gcc will give us an error</span>", 
"<span class=\"comment\"> * if we try to allocate the static variable to fmt if it is not a</span>", 
"<span class=\"comment\"> * constant. Even with the outer if statement.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ftrace_vprintk\">ftrace_vprintk</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#vargs\">vargs</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#fmt\">fmt</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>static const char *<a class=\"id\" href=\"#trace_printk_fmt\">trace_printk_fmt</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"__trace_printk_fmt\"))) =<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) ? <a class=\"id\" href=\"#fmt\">fmt</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_vbprintk\">__ftrace_vbprintk</a>(<a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>, <a class=\"id\" href=\"#trace_printk_fmt\">trace_printk_fmt</a>, <a class=\"id\" href=\"#vargs\">vargs</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_vprintk\">__ftrace_vprintk</a>(<a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#vargs\">vargs</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"extern int", 
"<a class=\"id\" href=\"#__ftrace_vbprintk\">__ftrace_vbprintk</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"extern int", 
"<a class=\"id\" href=\"#__ftrace_vprintk\">__ftrace_vprintk</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"extern void <a class=\"id\" href=\"#ftrace_dump\">ftrace_dump</a>(enum <a class=\"id\" href=\"#ftrace_dump_mode\">ftrace_dump_mode</a> <a class=\"id\" href=\"#oops_dump_mode\">oops_dump_mode</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#trace_printk\">trace_printk</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...) <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 1, 2)));", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tracing_start\">tracing_start</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tracing_stop\">tracing_stop</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ftrace_off_permanent\">ftrace_off_permanent</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trace_dump_stack\">trace_dump_stack</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#trace_printk\">trace_printk</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#ftrace_vprintk\">ftrace_vprintk</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ftrace_dump\">ftrace_dump</a>(enum <a class=\"id\" href=\"#ftrace_dump_mode\">ftrace_dump_mode</a> <a class=\"id\" href=\"#oops_dump_mode\">oops_dump_mode</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_TRACING */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * min()/max()/clamp() macros that also do</span>", 
"<span class=\"comment\"> * strict type-checking.. See the</span>", 
"<span class=\"comment\"> * \"unnecessary\" pointer comparison.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#_min1\">_min1</a> = (<a class=\"id\" href=\"#x\">x</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#y\">y</a>) <a class=\"id\" href=\"#_min2\">_min2</a> = (<a class=\"id\" href=\"#y\">y</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(void) (&amp;<a class=\"id\" href=\"#_min1\">_min1</a> == &amp;<a class=\"id\" href=\"#_min2\">_min2</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_min1\">_min1</a> &lt; <a class=\"id\" href=\"#_min2\">_min2</a> ? <a class=\"id\" href=\"#_min1\">_min1</a> : <a class=\"id\" href=\"#_min2\">_min2</a>; })", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#_max1\">_max1</a> = (<a class=\"id\" href=\"#x\">x</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#y\">y</a>) <a class=\"id\" href=\"#_max2\">_max2</a> = (<a class=\"id\" href=\"#y\">y</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(void) (&amp;<a class=\"id\" href=\"#_max1\">_max1</a> == &amp;<a class=\"id\" href=\"#_max2\">_max2</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_max1\">_max1</a> &gt; <a class=\"id\" href=\"#_max2\">_max2</a> ? <a class=\"id\" href=\"#_max1\">_max1</a> : <a class=\"id\" href=\"#_max2\">_max2</a>; })", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clamp - return a value clamped to a given range with strict typechecking</span>", 
"<span class=\"comment\"> * @val: current value</span>", 
"<span class=\"comment\"> * @min: minimum allowable value</span>", 
"<span class=\"comment\"> * @max: maximum allowable value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro does strict typechecking of min/max to make sure they are of the</span>", 
"<span class=\"comment\"> * same type as val.  See the unnecessary pointer comparisons.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clamp\">clamp</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#max\">max</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#val\">val</a>) <a class=\"id\" href=\"#__val\">__val</a> = (<a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#min\">min</a>) <a class=\"id\" href=\"#__min\">__min</a> = (<a class=\"id\" href=\"#min\">min</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#max\">max</a>) <a class=\"id\" href=\"#__max\">__max</a> = (<a class=\"id\" href=\"#max\">max</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(void) (&amp;<a class=\"id\" href=\"#__val\">__val</a> == &amp;<a class=\"id\" href=\"#__min\">__min</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(void) (&amp;<a class=\"id\" href=\"#__val\">__val</a> == &amp;<a class=\"id\" href=\"#__max\">__max</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__val\">__val</a> = <a class=\"id\" href=\"#__val\">__val</a> &lt; <a class=\"id\" href=\"#__min\">__min</a> ? <a class=\"id\" href=\"#__min\">__min</a>: <a class=\"id\" href=\"#__val\">__val</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__val\">__val</a> &gt; <a class=\"id\" href=\"#__max\">__max</a> ? <a class=\"id\" href=\"#__max\">__max</a>: <a class=\"id\" href=\"#__val\">__val</a>; })", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ..and if you can't take the strict</span>", 
"<span class=\"comment\"> * types, you can specify one yourself.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Or not use min/max/clamp at all, of course.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#__min1\">__min1</a> = (<a class=\"id\" href=\"#x\">x</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#__min2\">__min2</a> = (<a class=\"id\" href=\"#y\">y</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__min1\">__min1</a> &lt; <a class=\"id\" href=\"#__min2\">__min2</a> ? <a class=\"id\" href=\"#__min1\">__min1</a>: <a class=\"id\" href=\"#__min2\">__min2</a>; })", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#__max1\">__max1</a> = (<a class=\"id\" href=\"#x\">x</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#__max2\">__max2</a> = (<a class=\"id\" href=\"#y\">y</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__max1\">__max1</a> &gt; <a class=\"id\" href=\"#__max2\">__max2</a> ? <a class=\"id\" href=\"#__max1\">__max1</a>: <a class=\"id\" href=\"#__max2\">__max2</a>; })", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clamp_t - return a value clamped to a given range using a given type</span>", 
"<span class=\"comment\"> * @type: the type of variable to use</span>", 
"<span class=\"comment\"> * @val: current value</span>", 
"<span class=\"comment\"> * @min: minimum allowable value</span>", 
"<span class=\"comment\"> * @max: maximum allowable value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro does no typechecking and uses temporary variables of type</span>", 
"<span class=\"comment\"> * 'type' to make all the comparisons.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clamp_t\">clamp_t</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#max\">max</a>) ({<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#__val\">__val</a> = (<a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#__min\">__min</a> = (<a class=\"id\" href=\"#min\">min</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#__max\">__max</a> = (<a class=\"id\" href=\"#max\">max</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__val\">__val</a> = <a class=\"id\" href=\"#__val\">__val</a> &lt; <a class=\"id\" href=\"#__min\">__min</a> ? <a class=\"id\" href=\"#__min\">__min</a>: <a class=\"id\" href=\"#__val\">__val</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__val\">__val</a> &gt; <a class=\"id\" href=\"#__max\">__max</a> ? <a class=\"id\" href=\"#__max\">__max</a>: <a class=\"id\" href=\"#__val\">__val</a>; })", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clamp_val - return a value clamped to a given range using val's type</span>", 
"<span class=\"comment\"> * @val: current value</span>", 
"<span class=\"comment\"> * @min: minimum allowable value</span>", 
"<span class=\"comment\"> * @max: maximum allowable value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro does no typechecking and uses temporary variables of whatever</span>", 
"<span class=\"comment\"> * type the input argument 'val' is.  This is useful when val is an unsigned</span>", 
"<span class=\"comment\"> * type and min and max are literals that will otherwise be assigned a signed</span>", 
"<span class=\"comment\"> * integer type.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clamp_val\">clamp_val</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#max\">max</a>) ({<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#val\">val</a>) <a class=\"id\" href=\"#__val\">__val</a> = (<a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#val\">val</a>) <a class=\"id\" href=\"#__min\">__min</a> = (<a class=\"id\" href=\"#min\">min</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#val\">val</a>) <a class=\"id\" href=\"#__max\">__max</a> = (<a class=\"id\" href=\"#max\">max</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__val\">__val</a> = <a class=\"id\" href=\"#__val\">__val</a> &lt; <a class=\"id\" href=\"#__min\">__min</a> ? <a class=\"id\" href=\"#__min\">__min</a>: <a class=\"id\" href=\"#__val\">__val</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__val\">__val</a> &gt; <a class=\"id\" href=\"#__max\">__max</a> ? <a class=\"id\" href=\"#__max\">__max</a>: <a class=\"id\" href=\"#__val\">__val</a>; })", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * swap - swap value of @a and @b</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#swap\">swap</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) \\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#a\">a</a>); (<a class=\"id\" href=\"#a\">a</a>) = (<a class=\"id\" href=\"#b\">b</a>); (<a class=\"id\" href=\"#b\">b</a>) = <a class=\"id\" href=\"#__tmp\">__tmp</a>; } while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * container_of - cast a member of a structure out to the containing structure</span>", 
"<span class=\"comment\"> * @ptr:<span class=\"ts\"/>the pointer to the member.</span>", 
"<span class=\"comment\"> * @type:<span class=\"ts\"/>the type of the container struct this is embedded in.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the member within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#typeof\">typeof</a>( ((<a class=\"id\" href=\"#type\">type</a> *)0)-><a class=\"id\" href=\"#member\">member</a> ) *<a class=\"id\" href=\"#__mptr\">__mptr</a> = (<a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#type\">type</a> *)( (char *)<a class=\"id\" href=\"#__mptr\">__mptr</a> - <a class=\"id\" href=\"#offsetof\">offsetof</a>(<a class=\"id\" href=\"#type\">type</a>,<a class=\"id\" href=\"#member\">member</a>) );})", 
"", 
"struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a>;", 
"extern int <a class=\"id\" href=\"#do_sysinfo\">do_sysinfo</a>(struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SI_LOAD_SHIFT\">SI_LOAD_SHIFT</a><span class=\"ts\"/>16", 
"struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> {", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#uptime\">uptime</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Seconds since boot */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#loads\">loads</a>[3];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1, 5, and 15 minute load averages */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#totalram\">totalram</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Total usable main memory size */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#freeram\">freeram</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Available memory size */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sharedram\">sharedram</a>;<span class=\"ts\"/><span class=\"comment\">/* Amount of shared memory */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bufferram\">bufferram</a>;<span class=\"ts\"/><span class=\"comment\">/* Memory used by buffers */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#totalswap\">totalswap</a>;<span class=\"ts\"/><span class=\"comment\">/* Total swap space size */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#freeswap\">freeswap</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* swap space still available */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#procs\">procs</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Number of current processes */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#pad\">pad</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* explicit padding for m68k */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#totalhigh\">totalhigh</a>;<span class=\"ts\"/><span class=\"comment\">/* Total high memory size */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#freehigh\">freehigh</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Available high memory size */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mem_unit\">mem_unit</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Memory unit size in bytes */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#_f\">_f</a>[20-2*sizeof(long)-sizeof(int)];<span class=\"ts\"/><span class=\"comment\">/* Padding: libc5 uses this.. */</span>", 
"};", 
"", 
"<span class=\"comment\">/* Force a compilation error if condition is true */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#condition\">condition</a>) ((void)<a class=\"id\" href=\"#BUILD_BUG_ON_ZERO\">BUILD_BUG_ON_ZERO</a>(<a class=\"id\" href=\"#condition\">condition</a>))", 
"", 
"<span class=\"comment\">/* Force a compilation error if condition is constant and true */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAYBE_BUILD_BUG_ON\">MAYBE_BUILD_BUG_ON</a>(<a class=\"id\" href=\"#cond\">cond</a>) ((void)sizeof(char[1 - 2 * !!(<a class=\"id\" href=\"#cond\">cond</a>)]))", 
"", 
"<span class=\"comment\">/* Force a compilation error if a constant expression is not a power of 2 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUILD_BUG_ON_NOT_POWER_OF_2\">BUILD_BUG_ON_NOT_POWER_OF_2</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>((<a class=\"id\" href=\"#n\">n</a>) == 0 || (((<a class=\"id\" href=\"#n\">n</a>) &amp; ((<a class=\"id\" href=\"#n\">n</a>) - 1)) != 0))", 
"", 
"<span class=\"comment\">/* Force a compilation error if condition is true, but also produce a</span>", 
"<span class=\"comment\">   result (of value 0 and type size_t), so the expression can be used</span>", 
"<span class=\"comment\">   e.g. in a structure initializer (or where-ever else comma expressions</span>", 
"<span class=\"comment\">   aren't permitted). */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUILD_BUG_ON_ZERO\">BUILD_BUG_ON_ZERO</a>(<a class=\"id\" href=\"#e\">e</a>) (sizeof(struct { int:-!!(<a class=\"id\" href=\"#e\">e</a>); }))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUILD_BUG_ON_NULL\">BUILD_BUG_ON_NULL</a>(<a class=\"id\" href=\"#e\">e</a>) ((void *)sizeof(struct { int:-!!(<a class=\"id\" href=\"#e\">e</a>); }))", 
"", 
"<span class=\"comment\">/* Trap pasters of __FUNCTION__ at compile-time */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__FUNCTION__\">__FUNCTION__</a> (<a class=\"id\" href=\"#__func__\">__func__</a>)", 
"", 
"<span class=\"comment\">/* This helps us to avoid #ifdef CONFIG_NUMA */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a> 1", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Rebuild everything on CONFIG_FTRACE_MCOUNT_RECORD */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FTRACE_MCOUNT_RECORD\">CONFIG_FTRACE_MCOUNT_RECORD</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD\">REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/eb/d7300dccf2c90596d45134b08bdbf86510422d.xr', __xr_tmp);
