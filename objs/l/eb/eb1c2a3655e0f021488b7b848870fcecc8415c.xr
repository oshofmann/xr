var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#module_notify_list\">module_notify_list</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_module_notifier\">unregister_module_notifier</a>);", 
"", 
"struct <a class=\"id\" href=\"#load_info\">load_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Ehdr\">Elf_Ehdr</a> *<a class=\"id\" href=\"#hdr\">hdr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#secstrings\">secstrings</a>, *<a class=\"id\" href=\"#strtab\">strtab</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#strmap\">strmap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#symoffs\">symoffs</a>, <a class=\"id\" href=\"#stroffs\">stroffs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#_ddebug\">_ddebug</a> *<a class=\"id\" href=\"#debug\">debug</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_debug\">num_debug</a>;", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#vers\">vers</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#pcpu\">pcpu</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#index\">index</a>;", 
"};", 
"", 
"<span class=\"comment\">/* We require a truly strong try_module_get(): 0 means failure due to</span>", 
"<span class=\"comment\">   ongoing or failed initialization etc. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#strong_try_module_get\">strong_try_module_get</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a> && <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#mod\">mod</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_taint_module\">add_taint_module</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, unsigned <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a> |= (1U << <a class=\"id\" href=\"#flag\">flag</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A thread that wants to hold a reference to a module only while it</span>", 
"<span class=\"comment\"> * is running can call this to safely exit.  nfsd and lockd use this.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__module_put_and_exit\">__module_put_and_exit</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, long <a class=\"id\" href=\"#code\">code</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_exit\">do_exit</a>(<a class=\"id\" href=\"#code\">code</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__module_put_and_exit\">__module_put_and_exit</a>);", 
"", 
"<span class=\"comment\">/* Find a module section: 0 means not found. */</span>", 
"static unsigned int <a class=\"id\" href=\"#find_sec\">find_sec</a>(const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#shdr\">shdr</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Alloc bit cleared means \"ignore it.\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> + <a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_name\">sh_name</a>, <a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Find a module section, or NULL. */</span>", 
"static void *<a class=\"id\" href=\"#section_addr\">section_addr</a>(const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Section 0 has sh_addr 0. */</span>", 
"<span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#find_sec\">find_sec</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#name\">name</a>)].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Find a module section, or NULL.  Fill in number of \"objects\" in section. */</span>", 
"static void *<a class=\"id\" href=\"#section_objs\">section_objs</a>(const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#object_size\">object_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int *<a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sec\">sec</a> = <a class=\"id\" href=\"#find_sec\">find_sec</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Section 0 has sh_addr 0 and sh_size 0. */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sec\">sec</a>].<a class=\"id\" href=\"#sh_size\">sh_size</a> / <a class=\"id\" href=\"#object_size\">object_size</a>;", 
"<span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sec\">sec</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Provided by the linker */</span>", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__start___ksymtab\">__start___ksymtab</a>[];", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__stop___ksymtab\">__stop___ksymtab</a>[];", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__start___ksymtab_gpl\">__start___ksymtab_gpl</a>[];", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__stop___ksymtab_gpl\">__stop___ksymtab_gpl</a>[];", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__start___ksymtab_gpl_future\">__start___ksymtab_gpl_future</a>[];", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__stop___ksymtab_gpl_future\">__stop___ksymtab_gpl_future</a>[];", 
"extern const unsigned long <a class=\"id\" href=\"#__start___kcrctab\">__start___kcrctab</a>[];", 
"extern const unsigned long <a class=\"id\" href=\"#__start___kcrctab_gpl\">__start___kcrctab_gpl</a>[];", 
"extern const unsigned long <a class=\"id\" href=\"#__start___kcrctab_gpl_future\">__start___kcrctab_gpl_future</a>[];", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNUSED_SYMBOLS\">CONFIG_UNUSED_SYMBOLS</a>", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__start___ksymtab_unused\">__start___ksymtab_unused</a>[];", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__stop___ksymtab_unused\">__stop___ksymtab_unused</a>[];", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__start___ksymtab_unused_gpl\">__start___ksymtab_unused_gpl</a>[];", 
"extern const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__stop___ksymtab_unused_gpl\">__stop___ksymtab_unused_gpl</a>[];", 
"extern const unsigned long <a class=\"id\" href=\"#__start___kcrctab_unused\">__start___kcrctab_unused</a>[];", 
"extern const unsigned long <a class=\"id\" href=\"#__start___kcrctab_unused_gpl\">__start___kcrctab_unused_gpl</a>[];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MODVERSIONS\">CONFIG_MODVERSIONS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#symversion\">symversion</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#idx\">idx</a>) <a class=\"id\" href=\"#NULL\">NULL</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#symversion\">symversion</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#idx\">idx</a>) ((<a class=\"id\" href=\"#base\">base</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) ? ((<a class=\"id\" href=\"#base\">base</a>) + (<a class=\"id\" href=\"#idx\">idx</a>)) : <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#each_symbol_in_section\">each_symbol_in_section</a>(const struct <a class=\"id\" href=\"#symsearch\">symsearch</a> *<a class=\"id\" href=\"#arr\">arr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#arrsize\">arrsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#fn\">fn</a>)(const struct <a class=\"id\" href=\"#symsearch\">symsearch</a> *<a class=\"id\" href=\"#syms\">syms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#symnum\">symnum</a>, void *<a class=\"id\" href=\"#data\">data</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#arrsize\">arrsize</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#stop\">stop</a> - <a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fn\">fn</a>(&amp;<a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#j\">j</a>], <a class=\"id\" href=\"#owner\">owner</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Returns true as soon as fn returns true, otherwise false. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#each_symbol\">each_symbol</a>(<a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#fn\">fn</a>)(const struct <a class=\"id\" href=\"#symsearch\">symsearch</a> *<a class=\"id\" href=\"#arr\">arr</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#symnum\">symnum</a>, void *<a class=\"id\" href=\"#data\">data</a>), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#symsearch\">symsearch</a> <a class=\"id\" href=\"#arr\">arr</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#__start___ksymtab\">__start___ksymtab</a>, <a class=\"id\" href=\"#__stop___ksymtab\">__stop___ksymtab</a>, <a class=\"id\" href=\"#__start___kcrctab\">__start___kcrctab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#NOT_GPL_ONLY\">NOT_GPL_ONLY</a>, <a class=\"id\" href=\"#false\">false</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#__start___ksymtab_gpl\">__start___ksymtab_gpl</a>, <a class=\"id\" href=\"#__stop___ksymtab_gpl\">__stop___ksymtab_gpl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__start___kcrctab_gpl\">__start___kcrctab_gpl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GPL_ONLY\">GPL_ONLY</a>, <a class=\"id\" href=\"#false\">false</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#__start___ksymtab_gpl_future\">__start___ksymtab_gpl_future</a>, <a class=\"id\" href=\"#__stop___ksymtab_gpl_future\">__stop___ksymtab_gpl_future</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__start___kcrctab_gpl_future\">__start___kcrctab_gpl_future</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#WILL_BE_GPL_ONLY\">WILL_BE_GPL_ONLY</a>, <a class=\"id\" href=\"#false\">false</a> },", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNUSED_SYMBOLS\">CONFIG_UNUSED_SYMBOLS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#__start___ksymtab_unused\">__start___ksymtab_unused</a>, <a class=\"id\" href=\"#__stop___ksymtab_unused\">__stop___ksymtab_unused</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__start___kcrctab_unused\">__start___kcrctab_unused</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#NOT_GPL_ONLY\">NOT_GPL_ONLY</a>, <a class=\"id\" href=\"#true\">true</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#__start___ksymtab_unused_gpl\">__start___ksymtab_unused_gpl</a>, <a class=\"id\" href=\"#__stop___ksymtab_unused_gpl\">__stop___ksymtab_unused_gpl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__start___kcrctab_unused_gpl\">__start___kcrctab_unused_gpl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GPL_ONLY\">GPL_ONLY</a>, <a class=\"id\" href=\"#true\">true</a> },", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#each_symbol_in_section\">each_symbol_in_section</a>(<a class=\"id\" href=\"#arr\">arr</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#arr\">arr</a>), <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#symsearch\">symsearch</a> <a class=\"id\" href=\"#arr\">arr</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#syms\">syms</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#syms\">syms</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_syms\">num_syms</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#crcs\">crcs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#NOT_GPL_ONLY\">NOT_GPL_ONLY</a>, <a class=\"id\" href=\"#false\">false</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_syms\">gpl_syms</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_syms\">gpl_syms</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_gpl_syms\">num_gpl_syms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_crcs\">gpl_crcs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GPL_ONLY\">GPL_ONLY</a>, <a class=\"id\" href=\"#false\">false</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_future_syms\">gpl_future_syms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_future_syms\">gpl_future_syms</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_gpl_future_syms\">num_gpl_future_syms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_future_crcs\">gpl_future_crcs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#WILL_BE_GPL_ONLY\">WILL_BE_GPL_ONLY</a>, <a class=\"id\" href=\"#false\">false</a> },", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNUSED_SYMBOLS\">CONFIG_UNUSED_SYMBOLS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_syms\">unused_syms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_syms\">unused_syms</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_unused_syms\">num_unused_syms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_crcs\">unused_crcs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#NOT_GPL_ONLY\">NOT_GPL_ONLY</a>, <a class=\"id\" href=\"#true\">true</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_gpl_syms\">unused_gpl_syms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_gpl_syms\">unused_gpl_syms</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_unused_gpl_syms\">num_unused_gpl_syms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_gpl_crcs\">unused_gpl_crcs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GPL_ONLY\">GPL_ONLY</a>, <a class=\"id\" href=\"#true\">true</a> },", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#each_symbol_in_section\">each_symbol_in_section</a>(<a class=\"id\" href=\"#arr\">arr</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#arr\">arr</a>), <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#each_symbol\">each_symbol</a>);", 
"", 
"struct <a class=\"id\" href=\"#find_symbol_arg\">find_symbol_arg</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Input */</span>", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#gplok\">gplok</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#warn\">warn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Output */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#crc\">crc</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#sym\">sym</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#find_symbol_in_section\">find_symbol_in_section</a>(const struct <a class=\"id\" href=\"#symsearch\">symsearch</a> *<a class=\"id\" href=\"#syms\">syms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#symnum\">symnum</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#find_symbol_arg\">find_symbol_arg</a> *<a class=\"id\" href=\"#fsa\">fsa</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#syms\">syms</a>-><a class=\"id\" href=\"#start\">start</a>[<a class=\"id\" href=\"#symnum\">symnum</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#fsa\">fsa</a>-><a class=\"id\" href=\"#name\">name</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fsa\">fsa</a>-><a class=\"id\" href=\"#gplok\">gplok</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#syms\">syms</a>-><a class=\"id\" href=\"#licence\">licence</a> == <a class=\"id\" href=\"#GPL_ONLY\">GPL_ONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#syms\">syms</a>-><a class=\"id\" href=\"#licence\">licence</a> == <a class=\"id\" href=\"#WILL_BE_GPL_ONLY\">WILL_BE_GPL_ONLY</a> && <a class=\"id\" href=\"#fsa\">fsa</a>-><a class=\"id\" href=\"#warn\">warn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Symbol %s is being used \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"by a non-GPL module, which will not \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"be allowed in the future\\n\", <a class=\"id\" href=\"#fsa\">fsa</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Please see the file \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Documentation/feature-removal-schedule.txt \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"in the kernel source tree for more details.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNUSED_SYMBOLS\">CONFIG_UNUSED_SYMBOLS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#syms\">syms</a>-><a class=\"id\" href=\"#unused\">unused</a> && <a class=\"id\" href=\"#fsa\">fsa</a>-><a class=\"id\" href=\"#warn\">warn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Symbol %s is marked as UNUSED, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"however this module is using it.\\n\", <a class=\"id\" href=\"#fsa\">fsa</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"This symbol will go away in the future.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Please evalute if this is the right api to use and if \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"it really is, submit a report the linux kernel \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"mailinglist together with submitting your code for \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"inclusion.\\n\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsa\">fsa</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsa\">fsa</a>-><a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#symversion\">symversion</a>(<a class=\"id\" href=\"#syms\">syms</a>-><a class=\"id\" href=\"#crcs\">crcs</a>, <a class=\"id\" href=\"#symnum\">symnum</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsa\">fsa</a>-><a class=\"id\" href=\"#sym\">sym</a> = &amp;<a class=\"id\" href=\"#syms\">syms</a>-><a class=\"id\" href=\"#start\">start</a>[<a class=\"id\" href=\"#symnum\">symnum</a>];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Find a symbol and return it, along with, (optional) crc and</span>", 
"<span class=\"comment\"> * (optional) module which owns it.  Needs preempt disabled or module_mutex. */</span>", 
"const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#find_symbol\">find_symbol</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> **<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long **<a class=\"id\" href=\"#crc\">crc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#gplok\">gplok</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#warn\">warn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#find_symbol_arg\">find_symbol_arg</a> <a class=\"id\" href=\"#fsa\">fsa</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsa\">fsa</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsa\">fsa</a>.<a class=\"id\" href=\"#gplok\">gplok</a> = <a class=\"id\" href=\"#gplok\">gplok</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsa\">fsa</a>.<a class=\"id\" href=\"#warn\">warn</a> = <a class=\"id\" href=\"#warn\">warn</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#each_symbol\">each_symbol</a>(<a class=\"id\" href=\"#find_symbol_in_section\">find_symbol_in_section</a>, &amp;<a class=\"id\" href=\"#fsa\">fsa</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#owner\">owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#fsa\">fsa</a>.<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#crc\">crc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#fsa\">fsa</a>.<a class=\"id\" href=\"#crc\">crc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fsa\">fsa</a>.<a class=\"id\" href=\"#sym\">sym</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Failed to find symbol %s\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#find_symbol\">find_symbol</a>);", 
"", 
"<span class=\"comment\">/* Search for module by name: must hold module_mutex. */</span>", 
"struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#find_module\">find_module</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#find_module\">find_module</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#mod_percpu\">mod_percpu</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#percpu\">percpu</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#percpu_modalloc\">percpu_modalloc</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#align\">align</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: per-cpu alignment %li > %li\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#percpu\">percpu</a> = <a class=\"id\" href=\"#__alloc_reserved_percpu\">__alloc_reserved_percpu</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#percpu\">percpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"%s: Could not allocate %lu bytes percpu data\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#percpu_size\">percpu_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#percpu_modfree\">percpu_modfree</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#percpu\">percpu</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#find_pcpusec\">find_pcpusec</a>(struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_sec\">find_sec</a>(<a class=\"id\" href=\"#info\">info</a>, \".data..percpu\");", 
"}", 
"", 
"static void <a class=\"id\" href=\"#percpu_modcopy\">percpu_modcopy</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const void *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#percpu\">percpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_module_percpu_address - test whether address is from module static percpu</span>", 
"<span class=\"comment\"> * @addr: address to test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test whether @addr belongs to module static percpu area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * %true if @addr is from module static percpu area</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_percpu_address\">is_module_percpu_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#percpu_size\">percpu_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#percpu\">percpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((void *)<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#start\">start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (void *)<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#percpu_size\">percpu_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"#else <span class=\"comment\">/* ... !CONFIG_SMP */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#mod_percpu\">mod_percpu</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#percpu_modalloc\">percpu_modalloc</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#percpu_modfree\">percpu_modfree</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"}", 
"static unsigned int <a class=\"id\" href=\"#find_pcpusec\">find_pcpusec</a>(struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#percpu_modcopy\">percpu_modcopy</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const void *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* pcpusec should be 0, and size of that section should be 0. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> != 0);", 
"}", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_percpu_address\">is_module_percpu_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODINFO_ATTR\">MODINFO_ATTR</a>(<a class=\"id\" href=\"#field\">field</a>)<span class=\"ts\"/>\\", 
"static void <a class=\"id\" href=\"#setup_modinfo_\">setup_modinfo_</a>##<a class=\"id\" href=\"#field\">field</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const char *<a class=\"id\" href=\"#s\">s</a>)  \\", 
"{                                                                     \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#field\">field</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);                          \\", 
"}                                                                     \\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_modinfo_\">show_modinfo_</a>##<a class=\"id\" href=\"#field\">field</a>(struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#mattr\">mattr</a>,   \\", 
"<span class=\"ts\"/>                struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>)             \\", 
"{                                                                     \\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"%s\\n\", <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#field\">field</a>);                   \\", 
"}                                                                     \\", 
"static int <a class=\"id\" href=\"#modinfo_\">modinfo_</a>##<a class=\"id\" href=\"#field\">field</a>##<a class=\"id\" href=\"#_exists\">_exists</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)               \\", 
"{                                                                     \\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#field\">field</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;                                    \\", 
"}                                                                     \\", 
"static void <a class=\"id\" href=\"#free_modinfo_\">free_modinfo_</a>##<a class=\"id\" href=\"#field\">field</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)                  \\", 
"{                                                                     \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#field\">field</a>);                                            \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#field\">field</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;                                            \\", 
"}                                                                     \\", 
"static struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> <a class=\"id\" href=\"#modinfo_\">modinfo_</a>##<a class=\"id\" href=\"#field\">field</a> = {                    \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attr\">attr</a> = { .<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#field\">field</a>), .<a class=\"id\" href=\"#mode\">mode</a> = 0444 },         \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#show_modinfo_\">show_modinfo_</a>##<a class=\"id\" href=\"#field\">field</a>,                                 \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#setup\">setup</a> = <a class=\"id\" href=\"#setup_modinfo_\">setup_modinfo_</a>##<a class=\"id\" href=\"#field\">field</a>,                               \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#test\">test</a> = <a class=\"id\" href=\"#modinfo_\">modinfo_</a>##<a class=\"id\" href=\"#field\">field</a>##<a class=\"id\" href=\"#_exists\">_exists</a>,                             \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#free_modinfo_\">free_modinfo_</a>##<a class=\"id\" href=\"#field\">field</a>,                                 \\", 
"};", 
"", 
"<a class=\"id\" href=\"#MODINFO_ATTR\">MODINFO_ATTR</a>(<a class=\"id\" href=\"#version\">version</a>);", 
"<a class=\"id\" href=\"#MODINFO_ATTR\">MODINFO_ATTR</a>(<a class=\"id\" href=\"#srcversion\">srcversion</a>);", 
"", 
"static char <a class=\"id\" href=\"#last_unloaded_module\">last_unloaded_module</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>+1];", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_UNLOAD\">CONFIG_MODULE_UNLOAD</a>", 
"", 
"<a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL\">EXPORT_TRACEPOINT_SYMBOL</a>(<a class=\"id\" href=\"#module_get\">module_get</a>);", 
"", 
"<span class=\"comment\">/* Init the unload section of the module. */</span>", 
"static int <a class=\"id\" href=\"#module_unload_init\">module_unload_init</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#refptr\">refptr</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#module_ref\">module_ref</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#refptr\">refptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#source_list\">source_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#target_list\">target_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hold reference count during initialization. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_write\">__this_cpu_write</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#refptr\">refptr</a>-><a class=\"id\" href=\"#incs\">incs</a>, 1);", 
"<span class=\"ts\"/><span class=\"comment\">/* Backwards compatibility macros put refcount during init. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Does a already use b? */</span>", 
"static int <a class=\"id\" href=\"#already_uses\">already_uses</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_use\">module_use</a> *<a class=\"id\" href=\"#use\">use</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#use\">use</a>, &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#source_list\">source_list</a>, <a class=\"id\" href=\"#source_list\">source_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#source\">source</a> == <a class=\"id\" href=\"#a\">a</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"%s uses %s!\\n\", <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"%s does not use %s!\\n\", <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Module a uses b</span>", 
"<span class=\"comment\"> *  - we add 'a' as a \"source\", 'b' as a \"target\" of module use</span>", 
"<span class=\"comment\"> *  - the module_use is added to the list of 'b' sources (so</span>", 
"<span class=\"comment\"> *    'b' can walk the list to see who sourced them), and of 'a'</span>", 
"<span class=\"comment\"> *    targets (so 'a' can see what modules it targets).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#add_module_usage\">add_module_usage</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_use\">module_use</a> *<a class=\"id\" href=\"#use\">use</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Allocating new usage for %s.\\n\", <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#use\">use</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#use\">use</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#use\">use</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: out of memory loading\\n\", <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#source\">source</a> = <a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#source_list\">source_list</a>, &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#source_list\">source_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#target_list\">target_list</a>, &amp;<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#target_list\">target_list</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Module a uses b: caller needs module_mutex() */</span>", 
"int <a class=\"id\" href=\"#ref_module\">ref_module</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#already_uses\">already_uses</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If module isn't available, we fail. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#strong_try_module_get\">strong_try_module_get</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_module_usage\">add_module_usage</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ref_module\">ref_module</a>);", 
"", 
"<span class=\"comment\">/* Clear the unload stuff of the module. */</span>", 
"static void <a class=\"id\" href=\"#module_unload_free\">module_unload_free</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_use\">module_use</a> *<a class=\"id\" href=\"#use\">use</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#use\">use</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#target_list\">target_list</a>, <a class=\"id\" href=\"#target_list\">target_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"%s unusing %s\\n\", <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#source_list\">source_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#target_list\">target_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#use\">use</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#refptr\">refptr</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_FORCE_UNLOAD\">CONFIG_MODULE_FORCE_UNLOAD</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#try_force_unload\">try_force_unload</a>(unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#O_TRUNC\">O_TRUNC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#TAINT_FORCED_RMMOD\">TAINT_FORCED_RMMOD</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#try_force_unload\">try_force_unload</a>(unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MODULE_FORCE_UNLOAD */</span>", 
"", 
"struct <a class=\"id\" href=\"#stopref\">stopref</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#forced\">forced</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Whole machine is stopped with interrupts off when this runs. */</span>", 
"static int <a class=\"id\" href=\"#__try_stop_module\">__try_stop_module</a>(void *<a class=\"id\" href=\"#_sref\">_sref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stopref\">stopref</a> *<a class=\"id\" href=\"#sref\">sref</a> = <a class=\"id\" href=\"#_sref\">_sref</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If it's not unused, quit unless we're forcing. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#module_refcount\">module_refcount</a>(<a class=\"id\" href=\"#sref\">sref</a>-><a class=\"id\" href=\"#mod\">mod</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(*<a class=\"id\" href=\"#sref\">sref</a>-><a class=\"id\" href=\"#forced\">forced</a> = <a class=\"id\" href=\"#try_force_unload\">try_force_unload</a>(<a class=\"id\" href=\"#sref\">sref</a>-><a class=\"id\" href=\"#flags\">flags</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EWOULDBLOCK\">EWOULDBLOCK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Mark it as dying. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sref\">sref</a>-><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#try_stop_module\">try_stop_module</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, int <a class=\"id\" href=\"#flags\">flags</a>, int *<a class=\"id\" href=\"#forced\">forced</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#stopref\">stopref</a> <a class=\"id\" href=\"#sref\">sref</a> = { <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#forced\">forced</a> };", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#stop_machine\">stop_machine</a>(<a class=\"id\" href=\"#__try_stop_module\">__try_stop_module</a>, &amp;<a class=\"id\" href=\"#sref\">sref</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We don't need to stop the machine for this. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"unsigned int <a class=\"id\" href=\"#module_refcount\">module_refcount</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#incs\">incs</a> = 0, <a class=\"id\" href=\"#decs\">decs</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#decs\">decs</a> += <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#refptr\">refptr</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#decs\">decs</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ensure the incs are added up after the decs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * module_put ensures incs are visible before decs with smp_wmb.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This 2-count scheme avoids the situation where the refcount</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for CPU0 is read, then CPU0 increments the module refcount,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then CPU1 drops that refcount, then the refcount for CPU1 is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * read. We would record a decrement but not its corresponding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * increment so we would see a low count (disaster).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Rare situation? But module_refcount can be preempted, and we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might be tallying up 4096+ CPUs. So it is not impossible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#incs\">incs</a> += <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#refptr\">refptr</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#incs\">incs</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#incs\">incs</a> - <a class=\"id\" href=\"#decs\">decs</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#module_refcount\">module_refcount</a>);", 
"", 
"<span class=\"comment\">/* This exists whether we can unload or not */</span>", 
"static void <a class=\"id\" href=\"#free_module\">free_module</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"static void <a class=\"id\" href=\"#wait_for_zero_refcount\">wait_for_zero_refcount</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Since we might sleep for some time, release the mutex first */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Looking at refcount...\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#module_refcount\">module_refcount</a>(<a class=\"id\" href=\"#mod\">mod</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#delete_module\">delete_module</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#name_user\">name_user</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#forced\">forced</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_MODULE\">CAP_SYS_MODULE</a>) || <a class=\"id\" href=\"#modules_disabled\">modules_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncpy_from_user\">strncpy_from_user</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name_user\">name_user</a>, <a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>-1) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>-1] = '\\0';", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#find_module\">find_module</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#source_list\">source_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Other modules depend on us: get rid of them first. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EWOULDBLOCK\">EWOULDBLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Doing init or already dying? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#MODULE_STATE_LIVE\">MODULE_STATE_LIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: if (force), slam module count and wake up</span>", 
"<span class=\"comment\">                   waiter --RR */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"%s already dying\\n\", <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If it has an init func, it must have an exit func to unload */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init\">init</a> && !<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#exit\">exit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#forced\">forced</a> = <a class=\"id\" href=\"#try_force_unload\">try_force_unload</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#forced\">forced</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This module can't be removed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set this up before setting mod-&gt;state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Stop the machine so refcounts can't move and disable module. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_stop_module\">try_stop_module</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#flags\">flags</a>, &amp;<a class=\"id\" href=\"#forced\">forced</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Never wait if forced. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#forced\">forced</a> && <a class=\"id\" href=\"#module_refcount\">module_refcount</a>(<a class=\"id\" href=\"#mod\">mod</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_zero_refcount\">wait_for_zero_refcount</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Final destruction now noone is using it. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#exit\">exit</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#exit\">exit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#module_notify_list\">module_notify_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_full\">async_synchronize_full</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Store the name of the last unloaded module for diagnostic purposes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#last_unloaded_module\">last_unloaded_module</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#last_unloaded_module\">last_unloaded_module</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_module\">free_module</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#print_unload_info\">print_unload_info</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_use\">module_use</a> *<a class=\"id\" href=\"#use\">use</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#printed_something\">printed_something</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" %u \", <a class=\"id\" href=\"#module_refcount\">module_refcount</a>(<a class=\"id\" href=\"#mod\">mod</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always include a trailing , so userspace can differentiate</span>", 
"<span class=\"comment\">           between this and the old multi-field proc format. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#use\">use</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#source_list\">source_list</a>, <a class=\"id\" href=\"#source_list\">source_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printed_something\">printed_something</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%s,\", <a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#source\">source</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init\">init</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#exit\">exit</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printed_something\">printed_something</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"[permanent],\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#printed_something\">printed_something</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"-\");", 
"}", 
"", 
"void <a class=\"id\" href=\"#__symbol_put\">__symbol_put</a>(const char *<a class=\"id\" href=\"#symbol\">symbol</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#find_symbol\">find_symbol</a>(<a class=\"id\" href=\"#symbol\">symbol</a>, &amp;<a class=\"id\" href=\"#owner\">owner</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#false\">false</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__symbol_put\">__symbol_put</a>);", 
"", 
"<span class=\"comment\">/* Note this assumes addr is a function, which it currently always is. */</span>", 
"void <a class=\"id\" href=\"#symbol_put_addr\">symbol_put_addr</a>(void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#modaddr\">modaddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#a\">a</a> = (unsigned long)<a class=\"id\" href=\"#dereference_function_descriptor\">dereference_function_descriptor</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#core_kernel_text\">core_kernel_text</a>(<a class=\"id\" href=\"#a\">a</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* module_text_address is safe here: we're supposed to have reference</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to module from symbol_get, so it can't go away. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#modaddr\">modaddr</a> = <a class=\"id\" href=\"#__module_text_address\">__module_text_address</a>(<a class=\"id\" href=\"#a\">a</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#modaddr\">modaddr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#modaddr\">modaddr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#symbol_put_addr\">symbol_put_addr</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_refcnt\">show_refcnt</a>(struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#mattr\">mattr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"%u\\n\", <a class=\"id\" href=\"#module_refcount\">module_refcount</a>(<a class=\"id\" href=\"#mod\">mod</a>));", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> <a class=\"id\" href=\"#refcnt\">refcnt</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attr\">attr</a> = { .<a class=\"id\" href=\"#name\">name</a> = \"refcnt\", .<a class=\"id\" href=\"#mode\">mode</a> = 0444 },", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#show_refcnt\">show_refcnt</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#module_put\">module_put</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#module\">module</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); <span class=\"comment\">/* see comment in module_refcount */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#module\">module</a>-><a class=\"id\" href=\"#refptr\">refptr</a>-><a class=\"id\" href=\"#decs\">decs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_module_put\">trace_module_put</a>(<a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Maybe they're waiting for us to drop reference? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#module_is_live\">module_is_live</a>(<a class=\"id\" href=\"#module\">module</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#module\">module</a>-><a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#module_put\">module_put</a>);", 
"", 
"#else <span class=\"comment\">/* !CONFIG_MODULE_UNLOAD */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#print_unload_info\">print_unload_info</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't know the usage count, or what modules are using. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" - -\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#module_unload_free\">module_unload_free</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"}", 
"", 
"int <a class=\"id\" href=\"#ref_module\">ref_module</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#strong_try_module_get\">strong_try_module_get</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ref_module\">ref_module</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#module_unload_init\">module_unload_init</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MODULE_UNLOAD */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_initstate\">show_initstate</a>(struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#mattr\">mattr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#state\">state</a> = \"unknown\";", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MODULE_STATE_LIVE\">MODULE_STATE_LIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = \"live\";", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = \"coming\";", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = \"going\";", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"%s\\n\", <a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> <a class=\"id\" href=\"#initstate\">initstate</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attr\">attr</a> = { .<a class=\"id\" href=\"#name\">name</a> = \"initstate\", .<a class=\"id\" href=\"#mode\">mode</a> = 0444 },", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#show_initstate\">show_initstate</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#modinfo_version\">modinfo_version</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#modinfo_srcversion\">modinfo_srcversion</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#initstate\">initstate</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_UNLOAD\">CONFIG_MODULE_UNLOAD</a>", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#refcnt\">refcnt</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"static const char <a class=\"id\" href=\"#vermagic\">vermagic</a>[] = <a class=\"id\" href=\"#VERMAGIC_STRING\">VERMAGIC_STRING</a>;", 
"", 
"static int <a class=\"id\" href=\"#try_to_force_load\">try_to_force_load</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const char *<a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_FORCE_LOAD\">CONFIG_MODULE_FORCE_LOAD</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_taint\">test_taint</a>(<a class=\"id\" href=\"#TAINT_FORCED_MODULE\">TAINT_FORCED_MODULE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: %s: kernel tainted.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#reason\">reason</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_taint_module\">add_taint_module</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#TAINT_FORCED_MODULE\">TAINT_FORCED_MODULE</a>);", 
"<span class=\"ts\"/>return 0;", 
"#else", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODVERSIONS\">CONFIG_MODVERSIONS</a>", 
"<span class=\"comment\">/* If the arch applies (non-zero) relocations to kernel kcrctab, unapply it. */</span>", 
"static unsigned long <a class=\"id\" href=\"#maybe_relocated\">maybe_relocated</a>(unsigned long <a class=\"id\" href=\"#crc\">crc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#crc_owner\">crc_owner</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_RELOCATES_KCRCTAB\">ARCH_RELOCATES_KCRCTAB</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#crc_owner\">crc_owner</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a> - (unsigned long)<a class=\"id\" href=\"#reloc_start\">reloc_start</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#check_version\">check_version</a>(<a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#versindex\">versindex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#symname\">symname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const unsigned long *<a class=\"id\" href=\"#crc\">crc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#crc_owner\">crc_owner</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#num_versions\">num_versions</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#modversion_info\">modversion_info</a> *<a class=\"id\" href=\"#versions\">versions</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exporting module didn't supply crcs?  OK, we're already tainted. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#crc\">crc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No versions at all?  modprobe --force does this. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#versindex\">versindex</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#try_to_force_load\">try_to_force_load</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#symname\">symname</a>) == 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#versions\">versions</a> = (void *) <a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#versindex\">versindex</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_versions\">num_versions</a> = <a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#versindex\">versindex</a>].<a class=\"id\" href=\"#sh_size\">sh_size</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>/ sizeof(struct <a class=\"id\" href=\"#modversion_info\">modversion_info</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_versions\">num_versions</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#versions\">versions</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#symname\">symname</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#versions\">versions</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#crc\">crc</a> == <a class=\"id\" href=\"#maybe_relocated\">maybe_relocated</a>(*<a class=\"id\" href=\"#crc\">crc</a>, <a class=\"id\" href=\"#crc_owner\">crc_owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Found checksum %lX vs module %lX\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#maybe_relocated\">maybe_relocated</a>(*<a class=\"id\" href=\"#crc\">crc</a>, <a class=\"id\" href=\"#crc_owner\">crc_owner</a>), <a class=\"id\" href=\"#versions\">versions</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#crc\">crc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_version\">bad_version</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: no symbol version for %s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#symname\">symname</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#bad_version\">bad_version</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: disagrees about version of symbol %s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#symname\">symname</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_modstruct_version\">check_modstruct_version</a>(<a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#versindex\">versindex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#crc\">crc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Since this should be found in kernel (which can't be removed),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no locking is necessary. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#find_symbol\">find_symbol</a>(<a class=\"id\" href=\"#MODULE_SYMBOL_PREFIX\">MODULE_SYMBOL_PREFIX</a> \"module_layout\", <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#crc\">crc</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#false\">false</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#check_version\">check_version</a>(<a class=\"id\" href=\"#sechdrs\">sechdrs</a>, <a class=\"id\" href=\"#versindex\">versindex</a>, \"module_layout\", <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#crc\">crc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/* First part is kernel version, which we ignore if module has crcs. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#same_magic\">same_magic</a>(const char *<a class=\"id\" href=\"#amagic\">amagic</a>, const char *<a class=\"id\" href=\"#bmagic\">bmagic</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#has_crcs\">has_crcs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#has_crcs\">has_crcs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amagic\">amagic</a> += <a class=\"id\" href=\"#strcspn\">strcspn</a>(<a class=\"id\" href=\"#amagic\">amagic</a>, \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bmagic\">bmagic</a> += <a class=\"id\" href=\"#strcspn\">strcspn</a>(<a class=\"id\" href=\"#bmagic\">bmagic</a>, \" \");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#amagic\">amagic</a>, <a class=\"id\" href=\"#bmagic\">bmagic</a>) == 0;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_version\">check_version</a>(<a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#versindex\">versindex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#symname\">symname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#crc\">crc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#crc_owner\">crc_owner</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_modstruct_version\">check_modstruct_version</a>(<a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#versindex\">versindex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#same_magic\">same_magic</a>(const char *<a class=\"id\" href=\"#amagic\">amagic</a>, const char *<a class=\"id\" href=\"#bmagic\">bmagic</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#has_crcs\">has_crcs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#amagic\">amagic</a>, <a class=\"id\" href=\"#bmagic\">bmagic</a>) == 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MODVERSIONS */</span>", 
"", 
"<span class=\"comment\">/* Resolve a symbol for this module.  I.e. if we find one, record usage. */</span>", 
"static const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#resolve_symbol\">resolve_symbol</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char <a class=\"id\" href=\"#ownername\">ownername</a>[])", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#sym\">sym</a>;", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#crc\">crc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#find_symbol\">find_symbol</a>(<a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#owner\">owner</a>, &amp;<a class=\"id\" href=\"#crc\">crc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  !(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a> &amp; (1 << <a class=\"id\" href=\"#TAINT_PROPRIETARY_MODULE\">TAINT_PROPRIETARY_MODULE</a>)), <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sym\">sym</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_version\">check_version</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#vers\">vers</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#crc\">crc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#owner\">owner</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#getname\">getname</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ref_module\">ref_module</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#getname\">getname</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#getname\">getname</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* We must make copy under the lock if we failed to get ref. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#ownername\">ownername</a>, <a class=\"id\" href=\"#module_name\">module_name</a>(<a class=\"id\" href=\"#owner\">owner</a>), <a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>);", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sym\">sym</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *", 
"<a class=\"id\" href=\"#resolve_symbol_wait\">resolve_symbol_wait</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#ksym\">ksym</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#owner\">owner</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait_event_interruptible_timeout\">wait_event_interruptible_timeout</a>(<a class=\"id\" href=\"#module_wq\">module_wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ksym\">ksym</a> = <a class=\"id\" href=\"#resolve_symbol\">resolve_symbol</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>|| <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ksym\">ksym</a>) != -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     30 * <a class=\"id\" href=\"#HZ\">HZ</a>) <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: gave up waiting for init of module %s.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ksym\">ksym</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * /sys/module/foo/sections stuff</span>", 
"<span class=\"comment\"> * J. Corbet &lt;corbet@lwn.net&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KALLSYMS\">CONFIG_KALLSYMS</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#sect_empty\">sect_empty</a>(const <a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sect\">sect</a>)", 
"{", 
"<span class=\"ts\"/>return !(<a class=\"id\" href=\"#sect\">sect</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>) || <a class=\"id\" href=\"#sect\">sect</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a> == 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#module_sect_attr\">module_sect_attr</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> <a class=\"id\" href=\"#mattr\">mattr</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#module_sect_attrs\">module_sect_attrs</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nsections\">nsections</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_sect_attr\">module_sect_attr</a> <a class=\"id\" href=\"#attrs\">attrs</a>[0];", 
"};", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#module_sect_show\">module_sect_show</a>(struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#mattr\">mattr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_sect_attr\">module_sect_attr</a> *<a class=\"id\" href=\"#sattr\">sattr</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#mattr\">mattr</a>, struct <a class=\"id\" href=\"#module_sect_attr\">module_sect_attr</a>, <a class=\"id\" href=\"#mattr\">mattr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"0x%lx\\n\", <a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_sect_attrs\">free_sect_attrs</a>(struct <a class=\"id\" href=\"#module_sect_attrs\">module_sect_attrs</a> *<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#section\">section</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#section\">section</a> = 0; <a class=\"id\" href=\"#section\">section</a> &lt; <a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#nsections\">nsections</a>; <a class=\"id\" href=\"#section\">section</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#section\">section</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#add_sect_attrs\">add_sect_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nloaded\">nloaded</a> = 0, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#size\">size</a>[2];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_sect_attrs\">module_sect_attrs</a> *<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_sect_attr\">module_sect_attr</a> *<a class=\"id\" href=\"#sattr\">sattr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute\">attribute</a> **<a class=\"id\" href=\"#gattr\">gattr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Count loaded sections and allocate structures */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sect_empty\">sect_empty</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nloaded\">nloaded</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>[0] = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(*<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#nloaded\">nloaded</a> * sizeof(<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[0]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a>[0]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>[1] = (<a class=\"id\" href=\"#nloaded\">nloaded</a> + 1) * sizeof(<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a>[0] + <a class=\"id\" href=\"#size\">size</a>[1], <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup section attributes. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#name\">name</a> = \"sections\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a> = (void *)<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a> + <a class=\"id\" href=\"#size\">size</a>[0];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#nsections\">nsections</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sattr\">sattr</a> = &amp;<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gattr\">gattr</a> = &amp;<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a>[0];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sec\">sec</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sect_empty\">sect_empty</a>(<a class=\"id\" href=\"#sec\">sec</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#sec\">sec</a>-><a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> + <a class=\"id\" href=\"#sec\">sec</a>-><a class=\"id\" href=\"#sh_name\">sh_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#name\">name</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#nsections\">nsections</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_attr_init\">sysfs_attr_init</a>(&amp;<a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#module_sect_show\">module_sect_show</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#store\">store</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sattr\">sattr</a>-><a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#gattr\">gattr</a>++) = &amp;(<a class=\"id\" href=\"#sattr\">sattr</a>++)-><a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#gattr\">gattr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysfs_create_group\">sysfs_create_group</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#grp\">grp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a> = <a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>;", 
"<span class=\"ts\"/>return;", 
"  <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_sect_attrs\">free_sect_attrs</a>(<a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#remove_sect_attrs\">remove_sect_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_group\">sysfs_remove_group</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#grp\">grp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We are positive that no one is using any sect attrs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * at this point.  Deallocate immediately. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_sect_attrs\">free_sect_attrs</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * /sys/module/foo/notes/.section.name gives contents of SHT_NOTE sections.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#module_notes_attrs\">module_notes_attrs</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#dir\">dir</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#notes\">notes</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bin_attribute\">bin_attribute</a> <a class=\"id\" href=\"#attrs\">attrs</a>[0];", 
"};", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#module_notes_read\">module_notes_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#bin_attribute\">bin_attribute</a> *<a class=\"id\" href=\"#bin_attr\">bin_attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The caller checked the pos and count against our size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bin_attr\">bin_attr</a>-><a class=\"id\" href=\"#private\">private</a> + <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_notes_attrs\">free_notes_attrs</a>(struct <a class=\"id\" href=\"#module_notes_attrs\">module_notes_attrs</a> *<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#dir\">dir</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>-- &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_bin_file\">sysfs_remove_bin_file</a>(<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#add_notes_attrs\">add_notes_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#notes\">notes</a>, <a class=\"id\" href=\"#loaded\">loaded</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_notes_attrs\">module_notes_attrs</a> *<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bin_attribute\">bin_attribute</a> *<a class=\"id\" href=\"#nattr\">nattr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* failed to create section attributes, so can't create notes */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Count notes sections and allocate structures.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sect_empty\">sect_empty</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>]) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_type\">sh_type</a> == <a class=\"id\" href=\"#SHT_NOTE\">SHT_NOTE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#notes\">notes</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notes\">notes</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes_attrs\">notes_attrs</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      + <a class=\"id\" href=\"#notes\">notes</a> * sizeof(<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[0]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#notes\">notes</a> = <a class=\"id\" href=\"#notes\">notes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nattr\">nattr</a> = &amp;<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[0];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#loaded\">loaded</a> = <a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sect_empty\">sect_empty</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_type\">sh_type</a> == <a class=\"id\" href=\"#SHT_NOTE\">SHT_NOTE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_bin_attr_init\">sysfs_bin_attr_init</a>(<a class=\"id\" href=\"#nattr\">nattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nattr\">nattr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#sect_attrs\">sect_attrs</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#loaded\">loaded</a>].<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nattr\">nattr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nattr\">nattr</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_size\">sh_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nattr\">nattr</a>-><a class=\"id\" href=\"#private\">private</a> = (void *) <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nattr\">nattr</a>-><a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#module_notes_read\">module_notes_read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#nattr\">nattr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#loaded\">loaded</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#dir\">dir</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"notes\", &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#dir\">dir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#notes\">notes</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sysfs_create_bin_file\">sysfs_create_bin_file</a>(<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#notes_attrs\">notes_attrs</a> = <a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>;", 
"<span class=\"ts\"/>return;", 
"", 
"  <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_notes_attrs\">free_notes_attrs</a>(<a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#remove_notes_attrs\">remove_notes_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_notes_attrs\">free_notes_attrs</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#notes_attrs\">notes_attrs</a>-><a class=\"id\" href=\"#notes\">notes</a>);", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_sect_attrs\">add_sect_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#remove_sect_attrs\">remove_sect_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_notes_attrs\">add_notes_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#remove_notes_attrs\">remove_notes_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KALLSYMS */</span>", 
"", 
"static void <a class=\"id\" href=\"#add_usage_links\">add_usage_links</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_UNLOAD\">CONFIG_MODULE_UNLOAD</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_use\">module_use</a> *<a class=\"id\" href=\"#use\">use</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nowarn\">nowarn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#use\">use</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#target_list\">target_list</a>, <a class=\"id\" href=\"#target_list\">target_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nowarn\">nowarn</a> = <a class=\"id\" href=\"#sysfs_create_link\">sysfs_create_link</a>(<a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#holders_dir\">holders_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#del_usage_links\">del_usage_links</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULE_UNLOAD\">CONFIG_MODULE_UNLOAD</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_use\">module_use</a> *<a class=\"id\" href=\"#use\">use</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#use\">use</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#target_list\">target_list</a>, <a class=\"id\" href=\"#target_list\">target_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_link\">sysfs_remove_link</a>(<a class=\"id\" href=\"#use\">use</a>-><a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#holders_dir\">holders_dir</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#module_add_modinfo_attrs\">module_add_modinfo_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#temp_attr\">temp_attr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>((sizeof(struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a>) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>) + 1)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#temp_attr\">temp_attr</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; (<a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]) && !<a class=\"id\" href=\"#error\">error</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#test\">test</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#test\">test</a> && <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#test\">test</a>(<a class=\"id\" href=\"#mod\">mod</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#temp_attr\">temp_attr</a>, <a class=\"id\" href=\"#attr\">attr</a>, sizeof(*<a class=\"id\" href=\"#temp_attr\">temp_attr</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_attr_init\">sysfs_attr_init</a>(&amp;<a class=\"id\" href=\"#temp_attr\">temp_attr</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,&amp;<a class=\"id\" href=\"#temp_attr\">temp_attr</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#temp_attr\">temp_attr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#module_remove_modinfo_attrs\">module_remove_modinfo_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; (<a class=\"id\" href=\"#attr\">attr</a> = &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pick a field to test for end of list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_file\">sysfs_remove_file</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,&amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#free\">free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mod_sysfs_init\">mod_sysfs_init</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#module_sysfs_initialized\">module_sysfs_initialized</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: module sysfs not initialized\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kset_find_obj\">kset_find_obj</a>(<a class=\"id\" href=\"#module_kset\">module_kset</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: module is already loaded\\n\", <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, 0, sizeof(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>.<a class=\"id\" href=\"#kset\">kset</a> = <a class=\"id\" href=\"#module_kset\">module_kset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kobject_init_and_add\">kobject_init_and_add</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#module_ktype\">module_ktype</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"%s\", <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* delay uevent until full sysfs population */</span>", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mod_sysfs_setup\">mod_sysfs_setup</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kparam\">kparam</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#num_params\">num_params</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mod_sysfs_init\">mod_sysfs_init</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#holders_dir\">holders_dir</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"holders\", &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#holders_dir\">holders_dir</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unreg\">out_unreg</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#module_param_sysfs_setup\">module_param_sysfs_setup</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#kparam\">kparam</a>, <a class=\"id\" href=\"#num_params\">num_params</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unreg_holders\">out_unreg_holders</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#module_add_modinfo_attrs\">module_add_modinfo_attrs</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unreg_param\">out_unreg_param</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_usage_links\">add_usage_links</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_sect_attrs\">add_sect_attrs</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_notes_attrs\">add_notes_attrs</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent\">kobject_uevent</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_ADD\">KOBJ_ADD</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_unreg_param\">out_unreg_param</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_param_sysfs_remove\">module_param_sysfs_remove</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<a class=\"id\" href=\"#out_unreg_holders\">out_unreg_holders</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#holders_dir\">holders_dir</a>);", 
"<a class=\"id\" href=\"#out_unreg\">out_unreg</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mod_sysfs_fini\">mod_sysfs_fini</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_notes_attrs\">remove_notes_attrs</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_sect_attrs\">remove_sect_attrs</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_SYSFS */</span>", 
"", 
"static int <a class=\"id\" href=\"#mod_sysfs_setup\">mod_sysfs_setup</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kparam\">kparam</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#num_params\">num_params</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mod_sysfs_fini\">mod_sysfs_fini</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#module_remove_modinfo_attrs\">module_remove_modinfo_attrs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#del_usage_links\">del_usage_links</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSFS */</span>", 
"", 
"static void <a class=\"id\" href=\"#mod_sysfs_teardown\">mod_sysfs_teardown</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_usage_links\">del_usage_links</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_remove_modinfo_attrs\">module_remove_modinfo_attrs</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_param_sysfs_remove\">module_param_sysfs_remove</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#drivers_dir\">drivers_dir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#holders_dir\">holders_dir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_sysfs_fini\">mod_sysfs_fini</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * unlink the module with the whole machine is stopped with interrupts off</span>", 
"<span class=\"comment\"> * - this defends against kallsyms not taking locks</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__unlink_module\">__unlink_module</a>(void *<a class=\"id\" href=\"#_mod\">_mod</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#_mod\">_mod</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_bug_cleanup\">module_bug_cleanup</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Free a module, remove from lists, etc. */</span>", 
"static void <a class=\"id\" href=\"#free_module\">free_module</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_module_free\">trace_module_free</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Delete from various lists */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stop_machine\">stop_machine</a>(<a class=\"id\" href=\"#__unlink_module\">__unlink_module</a>, <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_sysfs_teardown\">mod_sysfs_teardown</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove dynamic debug info */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ddebug_remove_module\">ddebug_remove_module</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Arch-specific cleanup. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_arch_cleanup\">module_arch_cleanup</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Module unload stuff */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_unload_free\">module_unload_free</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free any allocated parameters. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_params\">destroy_params</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_kp\">num_kp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This may be NULL, but that's OK */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_free\">module_free</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_modfree\">percpu_modfree</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free lock-classes: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_free_key_range\">lockdep_free_key_range</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally, free the core (containing the module structure) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_free\">module_free</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MPU\">CONFIG_MPU</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_protections\">update_protections</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"void *<a class=\"id\" href=\"#__symbol_get\">__symbol_get</a>(const char *<a class=\"id\" href=\"#symbol\">symbol</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#sym\">sym</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#find_symbol\">find_symbol</a>(<a class=\"id\" href=\"#symbol\">symbol</a>, &amp;<a class=\"id\" href=\"#owner\">owner</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sym\">sym</a> && <a class=\"id\" href=\"#strong_try_module_get\">strong_try_module_get</a>(<a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sym\">sym</a> ? (void *)<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#value\">value</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__symbol_get\">__symbol_get</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ensure that an exported symbol [global namespace] does not already exist</span>", 
"<span class=\"comment\"> * in the kernel or in some other module's exported symbol table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You must hold the module_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#verify_export_symbols\">verify_export_symbols</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#sym\">sym</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#arr\">arr</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#syms\">syms</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_syms\">num_syms</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_syms\">gpl_syms</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_gpl_syms\">num_gpl_syms</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_future_syms\">gpl_future_syms</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_gpl_future_syms\">num_gpl_future_syms</a> },", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNUSED_SYMBOLS\">CONFIG_UNUSED_SYMBOLS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_syms\">unused_syms</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_unused_syms\">num_unused_syms</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_gpl_syms\">unused_gpl_syms</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_unused_gpl_syms\">num_unused_gpl_syms</a> },", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#arr\">arr</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sym\">sym</a>; <a class=\"id\" href=\"#s\">s</a> &lt; <a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sym\">sym</a> + <a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#s\">s</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#find_symbol\">find_symbol</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#owner\">owner</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#false\">false</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s: exports duplicate symbol %s\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" (owned by %s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>(<a class=\"id\" href=\"#owner\">owner</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Change all symbols so that st_value encodes the pointer directly. */</span>", 
"static int <a class=\"id\" href=\"#simplify_symbols\">simplify_symbols</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#symsec\">symsec</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#sym\">sym</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a> *<a class=\"id\" href=\"#sym\">sym</a> = (void *)<a class=\"id\" href=\"#symsec\">symsec</a>-><a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#secbase\">secbase</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#ksym\">ksym</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#symsec\">symsec</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a> / sizeof(<a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strtab\">strtab</a> + <a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_name\">st_name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_shndx\">st_shndx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SHN_COMMON\">SHN_COMMON</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We compiled with -fno-common.  These are not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   supposed to happen.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Common symbol: %s\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: please compile with -fno-common\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SHN_ABS\">SHN_ABS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't need to do anything */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Absolute symbol: 0x%08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (long)<a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SHN_UNDEF\">SHN_UNDEF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksym\">ksym</a> = <a class=\"id\" href=\"#resolve_symbol_wait\">resolve_symbol_wait</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ok if resolved.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ksym\">ksym</a> && !<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ksym\">ksym</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a> = <a class=\"id\" href=\"#ksym\">ksym</a>-><a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ok if weak.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ksym\">ksym</a> && <a class=\"id\" href=\"#ELF_ST_BIND\">ELF_ST_BIND</a>(<a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_info\">st_info</a>) == <a class=\"id\" href=\"#STB_WEAK\">STB_WEAK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: Unknown symbol %s (err %li)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ksym\">ksym</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ksym\">ksym</a>) ?: -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Divert to percpu allocation if a percpu var. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_shndx\">st_shndx</a> == <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#pcpu\">pcpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#secbase\">secbase</a> = (unsigned long)<a class=\"id\" href=\"#mod_percpu\">mod_percpu</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#secbase\">secbase</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_shndx\">st_shndx</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a> += <a class=\"id\" href=\"#secbase\">secbase</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#apply_relocations\">apply_relocations</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now do relocations. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#infosec\">infosec</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_info\">sh_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not a valid relocation section? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#infosec\">infosec</a> >= <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't bother with non-allocated sections */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#infosec\">infosec</a>].<a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_type\">sh_type</a> == <a class=\"id\" href=\"#SHT_REL\">SHT_REL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#apply_relocate\">apply_relocate</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strtab\">strtab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_type\">sh_type</a> == <a class=\"id\" href=\"#SHT_RELA\">SHT_RELA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#apply_relocate_add\">apply_relocate_add</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strtab\">strtab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Additional bytes needed by arch in front of individual sections */</span>", 
"unsigned int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_mod_section_prepend\">arch_mod_section_prepend</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* default implementation just returns zero */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Update size with this section: return offset. */</span>", 
"static long <a class=\"id\" href=\"#get_offset\">get_offset</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, unsigned int *<a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdr\">sechdr</a>, unsigned int <a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#arch_mod_section_prepend\">arch_mod_section_prepend</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#section\">section</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(*<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#sechdr\">sechdr</a>-><a class=\"id\" href=\"#sh_addralign\">sh_addralign</a> ?: 1);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ret\">ret</a> + <a class=\"id\" href=\"#sechdr\">sechdr</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Lay out the SHF_ALLOC sections in a way not dissimilar to how ld</span>", 
"<span class=\"comment\">   might -- code, read-only data, read-write data, small data.  Tally</span>", 
"<span class=\"comment\">   sizes, and place the offsets into sh_entsize fields: high bit means it</span>", 
"<span class=\"comment\">   belongs in init. */</span>", 
"static void <a class=\"id\" href=\"#layout_sections\">layout_sections</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned long const <a class=\"id\" href=\"#masks\">masks</a>[][2] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* NOTE: all executable code must be the first section</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in this array; otherwise modify the text_size</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * finder in the two loops below */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#SHF_EXECINSTR\">SHF_EXECINSTR</a> | <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>, <a class=\"id\" href=\"#ARCH_SHF_SMALL\">ARCH_SHF_SMALL</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>, <a class=\"id\" href=\"#SHF_WRITE\">SHF_WRITE</a> | <a class=\"id\" href=\"#ARCH_SHF_SMALL\">ARCH_SHF_SMALL</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#SHF_WRITE\">SHF_WRITE</a> | <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>, <a class=\"id\" href=\"#ARCH_SHF_SMALL\">ARCH_SHF_SMALL</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#ARCH_SHF_SMALL\">ARCH_SHF_SMALL</a> | <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>, 0 }", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> = ~0UL;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Core section allocation order:\\n\");", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#m\">m</a> = 0; <a class=\"id\" href=\"#m\">m</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#masks\">masks</a>); ++<a class=\"id\" href=\"#m\">m</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#sname\">sname</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> + <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_name\">sh_name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#masks\">masks</a>[<a class=\"id\" href=\"#m\">m</a>][0]) != <a class=\"id\" href=\"#masks\">masks</a>[<a class=\"id\" href=\"#m\">m</a>][0]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#masks\">masks</a>[<a class=\"id\" href=\"#m\">m</a>][1])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> != ~0UL", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#strstarts\">strstarts</a>(<a class=\"id\" href=\"#sname\">sname</a>, \".init\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> = <a class=\"id\" href=\"#get_offset\">get_offset</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"\\t%s\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_text_size\">core_text_size</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Init section allocation order:\\n\");", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#m\">m</a> = 0; <a class=\"id\" href=\"#m\">m</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#masks\">masks</a>); ++<a class=\"id\" href=\"#m\">m</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#sname\">sname</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> + <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_name\">sh_name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#masks\">masks</a>[<a class=\"id\" href=\"#m\">m</a>][0]) != <a class=\"id\" href=\"#masks\">masks</a>[<a class=\"id\" href=\"#m\">m</a>][0]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#masks\">masks</a>[<a class=\"id\" href=\"#m\">m</a>][1])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> != ~0UL", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    || !<a class=\"id\" href=\"#strstarts\">strstarts</a>(<a class=\"id\" href=\"#sname\">sname</a>, \".init\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> = (<a class=\"id\" href=\"#get_offset\">get_offset</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> | <a class=\"id\" href=\"#INIT_OFFSET_MASK\">INIT_OFFSET_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"\\t%s\\n\", <a class=\"id\" href=\"#sname\">sname</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_text_size\">init_text_size</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_license\">set_license</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const char *<a class=\"id\" href=\"#license\">license</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#license\">license</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#license\">license</a> = \"unspecified\";", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#license_is_gpl_compatible\">license_is_gpl_compatible</a>(<a class=\"id\" href=\"#license\">license</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_taint\">test_taint</a>(<a class=\"id\" href=\"#TAINT_PROPRIETARY_MODULE\">TAINT_PROPRIETARY_MODULE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: module license '%s' taints \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"kernel.\\n\", <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#license\">license</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint_module\">add_taint_module</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#TAINT_PROPRIETARY_MODULE\">TAINT_PROPRIETARY_MODULE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Parse tag=value strings from .modinfo section */</span>", 
"static char *<a class=\"id\" href=\"#next_string\">next_string</a>(char *<a class=\"id\" href=\"#string\">string</a>, unsigned long *<a class=\"id\" href=\"#secsize\">secsize</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip non-zero chars */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#string\">string</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#secsize\">secsize</a>)-- <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip any zero padding. */</span>", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#string\">string</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#secsize\">secsize</a>)-- <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#string\">string</a>;", 
"}", 
"", 
"static char *<a class=\"id\" href=\"#get_modinfo\">get_modinfo</a>(struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>, const char *<a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#taglen\">taglen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#infosec\">infosec</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#info\">info</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#infosec\">infosec</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = (char *)<a class=\"id\" href=\"#infosec\">infosec</a>-><a class=\"id\" href=\"#sh_addr\">sh_addr</a>; <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next_string\">next_string</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#taglen\">taglen</a>) == 0 && <a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#taglen\">taglen</a>] == '=')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#taglen\">taglen</a> + 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#setup_modinfo\">setup_modinfo</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; (<a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#setup\">setup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#setup\">setup</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#get_modinfo\">get_modinfo</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_modinfo\">free_modinfo</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; (<a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#free\">free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KALLSYMS\">CONFIG_KALLSYMS</a>", 
"", 
"<span class=\"comment\">/* lookup symbol in given range of kernel_symbols */</span>", 
"static const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#lookup_symbol\">lookup_symbol</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#stop\">stop</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#ks\">ks</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#ks\">ks</a> &lt; <a class=\"id\" href=\"#stop\">stop</a>; <a class=\"id\" href=\"#ks\">ks</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ks\">ks</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#is_exported\">is_exported</a>(const char *<a class=\"id\" href=\"#name\">name</a>, unsigned long <a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#ks\">ks</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a> = <a class=\"id\" href=\"#lookup_symbol\">lookup_symbol</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#__start___ksymtab\">__start___ksymtab</a>, <a class=\"id\" href=\"#__stop___ksymtab\">__stop___ksymtab</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a> = <a class=\"id\" href=\"#lookup_symbol\">lookup_symbol</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#syms\">syms</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#syms\">syms</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_syms\">num_syms</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ks\">ks</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"<span class=\"comment\">/* As per nm */</span>", 
"static char <a class=\"id\" href=\"#elf_type\">elf_type</a>(const <a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a> *<a class=\"id\" href=\"#sym\">sym</a>, const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ELF_ST_BIND\">ELF_ST_BIND</a>(<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_info\">st_info</a>) == <a class=\"id\" href=\"#STB_WEAK\">STB_WEAK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ELF_ST_TYPE\">ELF_ST_TYPE</a>(<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_info\">st_info</a>) == <a class=\"id\" href=\"#STT_OBJECT\">STT_OBJECT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 'v';", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 'w';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a> == <a class=\"id\" href=\"#SHN_UNDEF\">SHN_UNDEF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 'U';", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a> == <a class=\"id\" href=\"#SHN_ABS\">SHN_ABS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 'a';", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a> >= <a class=\"id\" href=\"#SHN_LORESERVE\">SHN_LORESERVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return '?';", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a>].<a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_EXECINSTR\">SHF_EXECINSTR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 't';", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a>].<a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a>].<a class=\"id\" href=\"#sh_type\">sh_type</a> != <a class=\"id\" href=\"#SHT_NOBITS\">SHT_NOBITS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a>].<a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_WRITE\">SHF_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 'r';", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a>].<a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#ARCH_SHF_SMALL\">ARCH_SHF_SMALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 'g';", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 'd';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a>].<a class=\"id\" href=\"#sh_type\">sh_type</a> == <a class=\"id\" href=\"#SHT_NOBITS\">SHT_NOBITS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a>].<a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#ARCH_SHF_SMALL\">ARCH_SHF_SMALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 's';", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 'b';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strstarts\">strstarts</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> + <a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#sym\">sym</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a>].<a class=\"id\" href=\"#sh_name\">sh_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      \".debug\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 'n';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return '?';", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_core_symbol\">is_core_symbol</a>(const <a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a> *<a class=\"id\" href=\"#src\">src</a>, const <a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"                           unsigned int <a class=\"id\" href=\"#shnum\">shnum</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sec\">sec</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a> == <a class=\"id\" href=\"#SHN_UNDEF\">SHN_UNDEF</a>", 
"<span class=\"ts\"/>    || <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a> >= <a class=\"id\" href=\"#shnum\">shnum</a>", 
"<span class=\"ts\"/>    || !<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#st_name\">st_name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sec\">sec</a> = <a class=\"id\" href=\"#sechdrs\">sechdrs</a> + <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#st_shndx\">st_shndx</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sec\">sec</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>)", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_KALLSYMS_ALL\">CONFIG_KALLSYMS_ALL</a>", 
"<span class=\"ts\"/>    || !(<a class=\"id\" href=\"#sec\">sec</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_EXECINSTR\">SHF_EXECINSTR</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>    || (<a class=\"id\" href=\"#sec\">sec</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> &amp; <a class=\"id\" href=\"#INIT_OFFSET_MASK\">INIT_OFFSET_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#layout_symtab\">layout_symtab</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#symsect\">symsect</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a> + <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#sym\">sym</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#strsect\">strsect</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a> + <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a> *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nsrc\">nsrc</a>, <a class=\"id\" href=\"#ndst\">ndst</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put symbol section at end of init part of module. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#symsect\">symsect</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> |= <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#symsect\">symsect</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> = <a class=\"id\" href=\"#get_offset\">get_offset</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a>, <a class=\"id\" href=\"#symsect\">symsect</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#sym\">sym</a>) | <a class=\"id\" href=\"#INIT_OFFSET_MASK\">INIT_OFFSET_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"\\t%s\\n\", <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> + <a class=\"id\" href=\"#symsect\">symsect</a>-><a class=\"id\" href=\"#sh_name\">sh_name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = (void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a> + <a class=\"id\" href=\"#symsect\">symsect</a>-><a class=\"id\" href=\"#sh_offset\">sh_offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsrc\">nsrc</a> = <a class=\"id\" href=\"#symsect\">symsect</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a> / sizeof(*<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#ndst\">ndst</a> = <a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nsrc\">nsrc</a>; ++<a class=\"id\" href=\"#i\">i</a>, ++<a class=\"id\" href=\"#src\">src</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_core_symbol\">is_core_symbol</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#st_name\">st_name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#__test_and_set_bit\">__test_and_set_bit</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strmap\">strmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       && <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strtab\">strtab</a>[<a class=\"id\" href=\"#j\">j</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#ndst\">ndst</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Append room for core symbols at end of core part. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#symoffs\">symoffs</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>, <a class=\"id\" href=\"#symsect\">symsect</a>-><a class=\"id\" href=\"#sh_addralign\">sh_addralign</a> ?: 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#symoffs\">symoffs</a> + <a class=\"id\" href=\"#ndst\">ndst</a> * sizeof(<a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put string table section at end of init part of module. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strsect\">strsect</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> |= <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strsect\">strsect</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> = <a class=\"id\" href=\"#get_offset\">get_offset</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a>, <a class=\"id\" href=\"#strsect\">strsect</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#str\">str</a>) | <a class=\"id\" href=\"#INIT_OFFSET_MASK\">INIT_OFFSET_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"\\t%s\\n\", <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> + <a class=\"id\" href=\"#strsect\">strsect</a>-><a class=\"id\" href=\"#sh_name\">sh_name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Append room for core symbols' strings at end of core part. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#stroffs\">stroffs</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(0, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strmap\">strmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a> += <a class=\"id\" href=\"#bitmap_weight\">bitmap_weight</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strmap\">strmap</a>, <a class=\"id\" href=\"#strsect\">strsect</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#add_kallsyms\">add_kallsyms</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ndst\">ndst</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a> *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a> *<a class=\"id\" href=\"#dst\">dst</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#symsec\">symsec</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#sym\">sym</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a> = (void *)<a class=\"id\" href=\"#symsec\">symsec</a>-><a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_symtab\">num_symtab</a> = <a class=\"id\" href=\"#symsec\">symsec</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a> / sizeof(<a class=\"id\" href=\"#Elf_Sym\">Elf_Sym</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure we get permanent strtab: don't use info-&gt;strtab. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a> = (void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#str\">str</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set types up while we still have access to sections. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_symtab\">num_symtab</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_info\">st_info</a> = <a class=\"id\" href=\"#elf_type\">elf_type</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_symtab\">core_symtab</a> = <a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a> + <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#symoffs\">symoffs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#ndst\">ndst</a> = <a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_symtab\">num_symtab</a>; ++<a class=\"id\" href=\"#i\">i</a>, ++<a class=\"id\" href=\"#src\">src</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_core_symbol\">is_core_symbol</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#ndst\">ndst</a>] = *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#ndst\">ndst</a>].<a class=\"id\" href=\"#st_name\">st_name</a> = <a class=\"id\" href=\"#bitmap_weight\">bitmap_weight</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strmap\">strmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#ndst\">ndst</a>].<a class=\"id\" href=\"#st_name\">st_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#ndst\">ndst</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_num_syms\">core_num_syms</a> = <a class=\"id\" href=\"#ndst\">ndst</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_strtab\">core_strtab</a> = <a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a> + <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#stroffs\">stroffs</a>;", 
"<span class=\"ts\"/>for (*<a class=\"id\" href=\"#s\">s</a> = 0, <a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#str\">str</a>].<a class=\"id\" href=\"#sh_size\">sh_size</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strmap\">strmap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*++<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#layout_symtab\">layout_symtab</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#add_kallsyms\">add_kallsyms</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KALLSYMS */</span>", 
"", 
"static void <a class=\"id\" href=\"#dynamic_debug_setup\">dynamic_debug_setup</a>(struct <a class=\"id\" href=\"#_ddebug\">_ddebug</a> *<a class=\"id\" href=\"#debug\">debug</a>, unsigned int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug\">debug</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DYNAMIC_DEBUG\">CONFIG_DYNAMIC_DEBUG</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ddebug_add_module\">ddebug_add_module</a>(<a class=\"id\" href=\"#debug\">debug</a>, <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#debug\">debug</a>-><a class=\"id\" href=\"#modname\">modname</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dynamic debug error adding module: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug\">debug</a>-><a class=\"id\" href=\"#modname\">modname</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dynamic_debug_remove\">dynamic_debug_remove</a>(struct <a class=\"id\" href=\"#_ddebug\">_ddebug</a> *<a class=\"id\" href=\"#debug\">debug</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#debug\">debug</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ddebug_remove_module\">ddebug_remove_module</a>(<a class=\"id\" href=\"#debug\">debug</a>-><a class=\"id\" href=\"#modname\">modname</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#module_alloc_update_bounds\">module_alloc_update_bounds</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#module_alloc\">module_alloc</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update module bounds. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long)<a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#module_addr_min\">module_addr_min</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_addr_min\">module_addr_min</a> = (unsigned long)<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long)<a class=\"id\" href=\"#ret\">ret</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#module_addr_max\">module_addr_max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_addr_max\">module_addr_max</a> = (unsigned long)<a class=\"id\" href=\"#ret\">ret</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_KMEMLEAK\">CONFIG_DEBUG_KMEMLEAK</a>", 
"static void <a class=\"id\" href=\"#kmemleak_load_module\">kmemleak_load_module</a>(const struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* only scan the sections containing data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_scan_area\">kmemleak_scan_area</a>(<a class=\"id\" href=\"#mod\">mod</a>, sizeof(struct <a class=\"id\" href=\"#module\">module</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> + <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_name\">sh_name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strstarts\">strstarts</a>(<a class=\"id\" href=\"#name\">name</a>, \".data\") && !<a class=\"id\" href=\"#strstarts\">strstarts</a>(<a class=\"id\" href=\"#name\">name</a>, \".bss\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_scan_area\">kmemleak_scan_area</a>((void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_size\">sh_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#kmemleak_load_module\">kmemleak_load_module</a>(const struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Sets info-&gt;hdr and info-&gt;len. */</span>", 
"static int <a class=\"id\" href=\"#copy_and_check\">copy_and_check</a>(struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#umod\">umod</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uargs\">uargs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Ehdr\">Elf_Ehdr</a> *<a class=\"id\" href=\"#hdr\">hdr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; sizeof(*<a class=\"id\" href=\"#hdr\">hdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Suck in entire file: we'll want most of it. */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* vmalloc barfs on \"unusual\" numbers.  Check here */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 64 * 1024 * 1024 || (<a class=\"id\" href=\"#hdr\">hdr</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#len\">len</a>)) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#hdr\">hdr</a>, <a class=\"id\" href=\"#umod\">umod</a>, <a class=\"id\" href=\"#len\">len</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_hdr\">free_hdr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sanity checks against insmoding binaries or wrong arch,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   weird elf version */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#ELFMAG\">ELFMAG</a>, <a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>) != 0", 
"<span class=\"ts\"/>    || <a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_type\">e_type</a> != <a class=\"id\" href=\"#ET_REL\">ET_REL</a>", 
"<span class=\"ts\"/>    || !<a class=\"id\" href=\"#elf_check_arch\">elf_check_arch</a>(<a class=\"id\" href=\"#hdr\">hdr</a>)", 
"<span class=\"ts\"/>    || <a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shentsize\">e_shentsize</a> != sizeof(<a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_hdr\">free_hdr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shoff\">e_shoff</a> + <a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a> * sizeof(<a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_hdr\">free_hdr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a> = <a class=\"id\" href=\"#hdr\">hdr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#free_hdr\">free_hdr</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#hdr\">hdr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_copy\">free_copy</a>(struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rewrite_section_headers\">rewrite_section_headers</a>(struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This should always be true, but let's be sure. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[0].<a class=\"id\" href=\"#sh_addr\">sh_addr</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#shdr\">shdr</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_type\">sh_type</a> != <a class=\"id\" href=\"#SHT_NOBITS\">SHT_NOBITS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_offset\">sh_offset</a> + <a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Module len %lu truncated\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mark all sections sh_addr with their address in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   temporary image. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_addr\">sh_addr</a> = (<a class=\"id\" href=\"#size_t\">size_t</a>)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a> + <a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_offset\">sh_offset</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MODULE_UNLOAD\">CONFIG_MODULE_UNLOAD</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't load .exit sections */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strstarts\">strstarts</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a>+<a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_name\">sh_name</a>, \".exit\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &= ~(unsigned long)<a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Track but don't keep modinfo and version sections. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#vers\">vers</a> = <a class=\"id\" href=\"#find_sec\">find_sec</a>(<a class=\"id\" href=\"#info\">info</a>, \"__versions\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#find_sec\">find_sec</a>(<a class=\"id\" href=\"#info\">info</a>, \".modinfo\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#info\">info</a>].<a class=\"id\" href=\"#sh_flags\">sh_flags</a> &= ~(unsigned long)<a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#vers\">vers</a>].<a class=\"id\" href=\"#sh_flags\">sh_flags</a> &= ~(unsigned long)<a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set up our basic convenience variables (pointers to section headers,</span>", 
"<span class=\"comment\"> * search for module section index etc), and do some basic section</span>", 
"<span class=\"comment\"> * verification.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the temporary module pointer (we'll replace it with the final</span>", 
"<span class=\"comment\"> * one when we move the module sections around).</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#setup_load_info\">setup_load_info</a>(struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up the convenience variables */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a> = (void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a> + <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shoff\">e_shoff</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> = (void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shstrndx\">e_shstrndx</a>].<a class=\"id\" href=\"#sh_offset\">sh_offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#rewrite_section_headers\">rewrite_section_headers</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find internal symbols and strings. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_type\">sh_type</a> == <a class=\"id\" href=\"#SHT_SYMTAB\">SHT_SYMTAB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_link\">sh_link</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strtab\">strtab</a> = (char *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#str\">str</a>].<a class=\"id\" href=\"#sh_offset\">sh_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#find_sec\">find_sec</a>(<a class=\"id\" href=\"#info\">info</a>, \".gnu.linkonce.this_module\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#mod\">mod</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"No module found in object\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* This is temporary: point mod into copy of data. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = (void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#mod\">mod</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#sym\">sym</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: module has no symbols (stripped?)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#pcpu\">pcpu</a> = <a class=\"id\" href=\"#find_pcpusec\">find_pcpusec</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check module struct version now, before we try to use module. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_modstruct_version\">check_modstruct_version</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#vers\">vers</a>, <a class=\"id\" href=\"#mod\">mod</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#check_modinfo\">check_modinfo</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#modmagic\">modmagic</a> = <a class=\"id\" href=\"#get_modinfo\">get_modinfo</a>(<a class=\"id\" href=\"#info\">info</a>, \"vermagic\");", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is allowed: modprobe --force will invalidate it. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#modmagic\">modmagic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#try_to_force_load\">try_to_force_load</a>(<a class=\"id\" href=\"#mod\">mod</a>, \"bad vermagic\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#same_magic\">same_magic</a>(<a class=\"id\" href=\"#modmagic\">modmagic</a>, <a class=\"id\" href=\"#vermagic\">vermagic</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#vers\">vers</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: version magic '%s' should be '%s'\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#modmagic\">modmagic</a>, <a class=\"id\" href=\"#vermagic\">vermagic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_modinfo\">get_modinfo</a>(<a class=\"id\" href=\"#info\">info</a>, \"staging\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint_module\">add_taint_module</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#TAINT_CRAP\">TAINT_CRAP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: module is from the staging directory,\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" the quality is unknown, you have been warned.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up license info based on the info section */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_license\">set_license</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#get_modinfo\">get_modinfo</a>(<a class=\"id\" href=\"#info\">info</a>, \"license\"));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/eb/eb1c2a3655e0f021488b7b848870fcecc8415c.xr', __xr_tmp);
