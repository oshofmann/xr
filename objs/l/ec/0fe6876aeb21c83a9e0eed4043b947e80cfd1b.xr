var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#old_suspend_ordering\">old_suspend_ordering</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_nvs_nosave\">init_nvs_nosave</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_nvs_nosave\">acpi_nvs_nosave</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#acpisleep_dmi_table\">acpisleep_dmi_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#init_old_suspend_ordering\">init_old_suspend_ordering</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Abit KN9 (nForce4 variant)\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BOARD_VENDOR\">DMI_BOARD_VENDOR</a>, \"http://www.abit.com.tw/\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BOARD_NAME\">DMI_BOARD_NAME</a>, \"KN9 Series(NF-CK804)\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#init_old_suspend_ordering\">init_old_suspend_ordering</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"HP xw4600 Workstation\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"Hewlett-Packard\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"HP xw4600 Workstation\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#init_old_suspend_ordering\">init_old_suspend_ordering</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Asus Pundit P1-AH2 (M2N8L motherboard)\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BOARD_VENDOR\">DMI_BOARD_VENDOR</a>, \"ASUSTek Computer INC.\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BOARD_NAME\">DMI_BOARD_NAME</a>, \"M2N8L\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#init_old_suspend_ordering\">init_old_suspend_ordering</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Panasonic CF51-2L\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BOARD_VENDOR\">DMI_BOARD_VENDOR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Matsushita Electric Industrial Co.,Ltd.\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BOARD_NAME\">DMI_BOARD_NAME</a>, \"CF51-2L\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#init_nvs_nosave\">init_nvs_nosave</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Sony Vaio VGN-SR11M\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"Sony Corporation\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"VGN-SR11M\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#init_nvs_nosave\">init_nvs_nosave</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Everex StepNote Series\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"Everex Systems, Inc.\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"Everex StepNote Series\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{},", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SUSPEND */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"static unsigned long <a class=\"id\" href=\"#s4_hardware_signature\">s4_hardware_signature</a>;", 
"static struct <a class=\"id\" href=\"#acpi_table_facs\">acpi_table_facs</a> *<a class=\"id\" href=\"#facs\">facs</a>;", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#nosigcheck\">nosigcheck</a>;", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_no_s4_hw_signature\">acpi_no_s4_hw_signature</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nosigcheck\">nosigcheck</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_hibernation_begin\">acpi_hibernation_begin</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#nvs_nosave\">nvs_nosave</a> ? 0 : <a class=\"id\" href=\"#suspend_nvs_alloc\">suspend_nvs_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a> = <a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_sleep_tts_switch\">acpi_sleep_tts_switch</a>(<a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_hibernation_enter\">acpi_hibernation_enter</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FLUSH_CPU_CACHE\">ACPI_FLUSH_CPU_CACHE</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* This shouldn't return.  If it returns, we have a problem */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_enter_sleep_state\">acpi_enter_sleep_state</a>(<a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Reprogram control registers and execute _BFS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_leave_sleep_state_prep\">acpi_leave_sleep_state_prep</a>(<a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>) ? 0 : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#acpi_hibernation_leave\">acpi_hibernation_leave</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If ACPI is not enabled by the BIOS and the boot kernel, we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enable it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_enable\">acpi_enable</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Reprogram control registers and execute _BFS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_leave_sleep_state_prep\">acpi_leave_sleep_state_prep</a>(<a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the hardware signature */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#facs\">facs</a> && <a class=\"id\" href=\"#s4_hardware_signature\">s4_hardware_signature</a> != <a class=\"id\" href=\"#facs\">facs</a>-><a class=\"id\" href=\"#hardware_signature\">hardware_signature</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"ACPI: Hardware changed while hibernated, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"cannot resume!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"ACPI S4 hardware signature mismatch\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Restore the NVS memory area */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_nvs_restore\">suspend_nvs_restore</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow EC transactions to happen. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ec_unblock_transactions_early\">acpi_ec_unblock_transactions_early</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#acpi_pm_thaw\">acpi_pm_thaw</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ec_unblock_transactions\">acpi_ec_unblock_transactions</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_enable_all_runtime_gpes\">acpi_enable_all_runtime_gpes</a>();", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#platform_hibernation_ops\">platform_hibernation_ops</a> <a class=\"id\" href=\"#acpi_hibernation_ops\">acpi_hibernation_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#begin\">begin</a> = <a class=\"id\" href=\"#acpi_hibernation_begin\">acpi_hibernation_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#acpi_pm_end\">acpi_pm_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pre_snapshot\">pre_snapshot</a> = <a class=\"id\" href=\"#acpi_pm_prepare\">acpi_pm_prepare</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#finish\">finish</a> = <a class=\"id\" href=\"#acpi_pm_finish\">acpi_pm_finish</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#prepare\">prepare</a> = <a class=\"id\" href=\"#acpi_pm_prepare\">acpi_pm_prepare</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enter\">enter</a> = <a class=\"id\" href=\"#acpi_hibernation_enter\">acpi_hibernation_enter</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#leave\">leave</a> = <a class=\"id\" href=\"#acpi_hibernation_leave\">acpi_hibernation_leave</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pre_restore\">pre_restore</a> = <a class=\"id\" href=\"#acpi_pm_freeze\">acpi_pm_freeze</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#restore_cleanup\">restore_cleanup</a> = <a class=\"id\" href=\"#acpi_pm_thaw\">acpi_pm_thaw</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>acpi_hibernation_begin_old - Set the target system sleep state to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ACPI_STATE_S4 and execute the _PTS control method.  This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>function is used if the pre-ACPI 2.0 suspend ordering has been</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>requested.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_hibernation_begin_old\">acpi_hibernation_begin_old</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The _TTS object should always be evaluated before the _PTS object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When the old_suspended_ordering is true, the _PTS object is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * evaluated in the acpi_sleep_prepare.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_sleep_tts_switch\">acpi_sleep_tts_switch</a>(<a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#acpi_sleep_prepare\">acpi_sleep_prepare</a>(<a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nvs_nosave\">nvs_nosave</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#suspend_nvs_alloc\">suspend_nvs_alloc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a> = <a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following callbacks are used if the pre-ACPI 2.0 suspend ordering has</span>", 
"<span class=\"comment\"> * been requested.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#platform_hibernation_ops\">platform_hibernation_ops</a> <a class=\"id\" href=\"#acpi_hibernation_ops_old\">acpi_hibernation_ops_old</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#begin\">begin</a> = <a class=\"id\" href=\"#acpi_hibernation_begin_old\">acpi_hibernation_begin_old</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#acpi_pm_end\">acpi_pm_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pre_snapshot\">pre_snapshot</a> = <a class=\"id\" href=\"#acpi_pm_pre_suspend\">acpi_pm_pre_suspend</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#prepare\">prepare</a> = <a class=\"id\" href=\"#acpi_pm_freeze\">acpi_pm_freeze</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#finish\">finish</a> = <a class=\"id\" href=\"#acpi_pm_finish\">acpi_pm_finish</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enter\">enter</a> = <a class=\"id\" href=\"#acpi_hibernation_enter\">acpi_hibernation_enter</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#leave\">leave</a> = <a class=\"id\" href=\"#acpi_hibernation_leave\">acpi_hibernation_leave</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pre_restore\">pre_restore</a> = <a class=\"id\" href=\"#acpi_pm_freeze\">acpi_pm_freeze</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#restore_cleanup\">restore_cleanup</a> = <a class=\"id\" href=\"#acpi_pm_thaw\">acpi_pm_thaw</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#recover\">recover</a> = <a class=\"id\" href=\"#acpi_pm_finish\">acpi_pm_finish</a>,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIBERNATION */</span>", 
"", 
"int <a class=\"id\" href=\"#acpi_suspend\">acpi_suspend</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_state\">acpi_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#states\">states</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[1] = <a class=\"id\" href=\"#PM_SUSPEND_STANDBY\">PM_SUSPEND_STANDBY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>[3] = <a class=\"id\" href=\"#PM_SUSPEND_MEM\">PM_SUSPEND_MEM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>[5] = <a class=\"id\" href=\"#PM_SUSPEND_MAX\">PM_SUSPEND_MAX</a>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_state\">acpi_state</a> &lt; 6 && <a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#acpi_state\">acpi_state</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pm_suspend\">pm_suspend</a>(<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#acpi_state\">acpi_state</a>]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_state\">acpi_state</a> == 4)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#hibernate\">hibernate</a>();", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>acpi_pm_device_sleep_state - return preferred power state of ACPI device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>in the system sleep state given by %acpi_target_sleep_state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to examine; its driver model wakeup flags control</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>whether it should be able to wake up the system</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@d_min_p: used to store the upper limit of allowed states range</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return value: preferred power state of the device on success, -ENODEV on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>failure (ie. if there's no 'struct acpi_device' for @dev)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Find the lowest power (highest number) ACPI device power state that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device @dev can be in while the system is in the sleep state represented</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by %acpi_target_sleep_state.  If @wake is nonzero, the device should be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>able to wake up the system from this sleep state.  If @d_min_p is set,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the highest power (lowest number) device power state of @dev allowed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in this system sleep state is stored at the location pointed to by it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must ensure that @dev is valid before using this function.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller is also responsible for figuring out if the device is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>supposed to be able to wake up the system and passing this information</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>via @wake.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#acpi_pm_device_sleep_state\">acpi_pm_device_sleep_state</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int *<a class=\"id\" href=\"#d_min_p\">d_min_p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#DEVICE_ACPI_HANDLE\">DEVICE_ACPI_HANDLE</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#adev\">adev</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#acpi_method\">acpi_method</a>[] = \"_SxD\";", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#d_min\">d_min</a>, <a class=\"id\" href=\"#d_max\">d_max</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a> || <a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#acpi_bus_get_device\">acpi_bus_get_device</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#adev\">adev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"ACPI handle has no context!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_method\">acpi_method</a>[2] = '0' + <a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the sleep state is S0, we will return D3, but if the device has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * _S0W, we will use the value from _S0W</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_min\">d_min</a> = <a class=\"id\" href=\"#ACPI_STATE_D0\">ACPI_STATE_D0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_max\">d_max</a> = <a class=\"id\" href=\"#ACPI_STATE_D3\">ACPI_STATE_D3</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If present, _SxD methods return the minimum D-state (highest power</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state) we can use for the corresponding S-states.  Otherwise, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * minimum D-state is D0 (ACPI 3.x).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: We rely on acpi_evaluate_integer() not clobbering the integer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * provided -- that's our fault recovery, we ignore retval.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a> &gt; <a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_evaluate_integer\">acpi_evaluate_integer</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#acpi_method\">acpi_method</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#d_min\">d_min</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If _PRW says we can wake up the system from the target sleep state,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the D-state returned by _SxD is sufficient for that (we assume a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wakeup-aware driver if wake is set).  Still, if _SxW exists</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (ACPI 3.x), it should return the maximum (lowest power) D-state that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can wake the system.  _S0W may be valid, too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a> == <a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#device_may_wakeup\">device_may_wakeup</a>(<a class=\"id\" href=\"#dev\">dev</a>) && <a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a>.<a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#enabled\">enabled</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a>.<a class=\"id\" href=\"#sleep_state\">sleep_state</a> <= <a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_method\">acpi_method</a>[3] = 'W';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_integer\">acpi_evaluate_integer</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#acpi_method\">acpi_method</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#d_max\">d_max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_max\">d_max</a> = <a class=\"id\" href=\"#d_min\">d_min</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#d_max\">d_max</a> &lt; <a class=\"id\" href=\"#d_min\">d_min</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Warn the user of the broken DSDT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ACPI: Wrong value from %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_method\">acpi_method</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Sanitize it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_min\">d_min</a> = <a class=\"id\" href=\"#d_max\">d_max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d_min_p\">d_min_p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#d_min_p\">d_min_p</a> = <a class=\"id\" href=\"#d_min\">d_min</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d_max\">d_max</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>acpi_pm_device_sleep_wake - enable or disable the system wake-up</span>", 
"<span class=\"comment\"> *                                  capability of given device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to handle</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@enable: 'true' - enable, 'false' - disable the wake-up capability</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#acpi_pm_device_sleep_wake\">acpi_pm_device_sleep_wake</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#adev\">adev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#device_can_wakeup\">device_can_wakeup</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#DEVICE_ACPI_HANDLE\">DEVICE_ACPI_HANDLE</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a> || <a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#acpi_bus_get_device\">acpi_bus_get_device</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#adev\">adev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"ACPI handle has no context in %s!\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#enable\">enable</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_enable_wakeup_device_power\">acpi_enable_wakeup_device_power</a>(<a class=\"id\" href=\"#adev\">adev</a>, <a class=\"id\" href=\"#acpi_target_sleep_state\">acpi_target_sleep_state</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_disable_wakeup_device_power\">acpi_disable_wakeup_device_power</a>(<a class=\"id\" href=\"#adev\">adev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"wake-up capability %s by ACPI\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable\">enable</a> ? \"enabled\" : \"disabled\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#acpi_power_off_prepare\">acpi_power_off_prepare</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Prepare to power off the system */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_sleep_prepare\">acpi_sleep_prepare</a>(<a class=\"id\" href=\"#ACPI_STATE_S5\">ACPI_STATE_S5</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_disable_all_gpes\">acpi_disable_all_gpes</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#acpi_power_off\">acpi_power_off</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* acpi_sleep_prepare(ACPI_STATE_S5) should have already been called */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%s called\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_enter_sleep_state\">acpi_enter_sleep_state</a>(<a class=\"id\" href=\"#ACPI_STATE_S5\">ACPI_STATE_S5</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ACPI 2.0 created the optional _GTS and _BFS,</span>", 
"<span class=\"comment\"> * but industry adoption has been neither rapid nor broad.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Linux gets into trouble when it executes poorly validated</span>", 
"<span class=\"comment\"> * paths through the BIOS, so disable _GTS and _BFS by default,</span>", 
"<span class=\"comment\"> * but do speak up and offer the option to enable them.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_gts_bfs_check\">acpi_gts_bfs_check</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#dummy\">dummy</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#ACPI_ROOT_OBJECT\">ACPI_ROOT_OBJECT</a>, <a class=\"id\" href=\"#METHOD_NAME__GTS\">METHOD_NAME__GTS</a>, &amp;<a class=\"id\" href=\"#dummy\">dummy</a>)))", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"BIOS offers _GTS\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"If \\\"acpi.gts=1\\\" improves suspend, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"please notify linux-acpi@vger.kernel.org\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#ACPI_ROOT_OBJECT\">ACPI_ROOT_OBJECT</a>, <a class=\"id\" href=\"#METHOD_NAME__BFS\">METHOD_NAME__BFS</a>, &amp;<a class=\"id\" href=\"#dummy\">dummy</a>)))", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"BIOS offers _BFS\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"If \\\"acpi.bfs=1\\\" improves resume, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"please notify linux-acpi@vger.kernel.org\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_sleep_init\">acpi_sleep_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type_a\">type_a</a>, <a class=\"id\" href=\"#type_b\">type_b</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SUSPEND\">CONFIG_SUSPEND</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(<a class=\"id\" href=\"#acpisleep_dmi_table\">acpisleep_dmi_table</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_disabled\">acpi_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sleep_states\">sleep_states</a>[<a class=\"id\" href=\"#ACPI_STATE_S0\">ACPI_STATE_S0</a>] = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"(supports S0\");", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SUSPEND\">CONFIG_SUSPEND</a>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#ACPI_STATE_S1\">ACPI_STATE_S1</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_sleep_type_data\">acpi_get_sleep_type_data</a>(<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#type_a\">type_a</a>, &amp;<a class=\"id\" href=\"#type_b\">type_b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sleep_states\">sleep_states</a>[<a class=\"id\" href=\"#i\">i</a>] = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" S%d\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_set_ops\">suspend_set_ops</a>(<a class=\"id\" href=\"#old_suspend_ordering\">old_suspend_ordering</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#acpi_suspend_ops_old\">acpi_suspend_ops_old</a> : &amp;<a class=\"id\" href=\"#acpi_suspend_ops\">acpi_suspend_ops</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_sleep_type_data\">acpi_get_sleep_type_data</a>(<a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>, &amp;<a class=\"id\" href=\"#type_a\">type_a</a>, &amp;<a class=\"id\" href=\"#type_b\">type_b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_set_ops\">hibernation_set_ops</a>(<a class=\"id\" href=\"#old_suspend_ordering\">old_suspend_ordering</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#acpi_hibernation_ops_old\">acpi_hibernation_ops_old</a> : &amp;<a class=\"id\" href=\"#acpi_hibernation_ops\">acpi_hibernation_ops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sleep_states\">sleep_states</a>[<a class=\"id\" href=\"#ACPI_STATE_S4\">ACPI_STATE_S4</a>] = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" S4\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nosigcheck\">nosigcheck</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_get_table\">acpi_get_table</a>(<a class=\"id\" href=\"#ACPI_SIG_FACS\">ACPI_SIG_FACS</a>, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> **)&amp;<a class=\"id\" href=\"#facs\">facs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#facs\">facs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s4_hardware_signature\">s4_hardware_signature</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#facs\">facs</a>-><a class=\"id\" href=\"#hardware_signature\">hardware_signature</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_sleep_type_data\">acpi_get_sleep_type_data</a>(<a class=\"id\" href=\"#ACPI_STATE_S5\">ACPI_STATE_S5</a>, &amp;<a class=\"id\" href=\"#type_a\">type_a</a>, &amp;<a class=\"id\" href=\"#type_b\">type_b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sleep_states\">sleep_states</a>[<a class=\"id\" href=\"#ACPI_STATE_S5\">ACPI_STATE_S5</a>] = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" S5\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_power_off_prepare\">pm_power_off_prepare</a> = <a class=\"id\" href=\"#acpi_power_off_prepare\">acpi_power_off_prepare</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_power_off\">pm_power_off</a> = <a class=\"id\" href=\"#acpi_power_off\">acpi_power_off</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\")\\n\");", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Register the tts_notifier to reboot notifier list so that the _TTS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * object can also be evaluated when the system enters S5.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_reboot_notifier\">register_reboot_notifier</a>(&amp;<a class=\"id\" href=\"#tts_notifier\">tts_notifier</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gts_bfs_check\">acpi_gts_bfs_check</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/ec/0fe6876aeb21c83a9e0eed4043b947e80cfd1b.xr', __xr_tmp);
