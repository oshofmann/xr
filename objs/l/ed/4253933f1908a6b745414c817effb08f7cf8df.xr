var __xr_tmp = [
"<span class=\"comment\">/* Various workarounds for chipset bugs.</span>", 
"<span class=\"comment\">   This code runs very early and can't use the regular PCI subsystem</span>", 
"<span class=\"comment\">   The entries are keyed to PCI bridges which usually identify chipsets</span>", 
"<span class=\"comment\">   uniquely.</span>", 
"<span class=\"comment\">   This is only for whole classes of chipsets with specific problems which</span>", 
"<span class=\"comment\">   need early invasive action (e.g. before the timers are initialized).</span>", 
"<span class=\"comment\">   Most PCI device specific workarounds can be done later and should be</span>", 
"<span class=\"comment\">   in standard PCI quirks</span>", 
"<span class=\"comment\">   Mainboard specific bugs should be handled by DMI entries.</span>", 
"<span class=\"comment\">   CPU specific bugs in setup.c */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci_ids\">pci_ids</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pci\">pci</a>-<a class=\"id\" href=\"#direct\">direct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io_apic\">io_apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#iommu\">iommu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#gart\">gart</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#fix_hypertransport_config\">fix_hypertransport_config</a>(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#htcfg\">htcfg</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we found a hypertransport bus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure that we are broadcasting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupts to all cpus on the ht bus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we're using extended apic ids</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#htcfg\">htcfg</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x68);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#htcfg\">htcfg</a> &amp; (1 << 18)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Detected use of extended apic ids \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"on hypertransport bus\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#htcfg\">htcfg</a> &amp; (1 << 17)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Enabling hypertransport extended \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"apic interrupt broadcast\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Note this is a bios bug, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"please contact your hw vendor\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#htcfg\">htcfg</a> |= (1 << 17);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_pci_config\">write_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x68, <a class=\"id\" href=\"#htcfg\">htcfg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#via_bugs\">via_bugs</a>(int  <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GART_IOMMU\">CONFIG_GART_IOMMU</a>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#max_pfn\">max_pfn</a> &gt; <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a> ||  <a class=\"id\" href=\"#force_iommu\">force_iommu</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#gart_iommu_aperture_allowed\">gart_iommu_aperture_allowed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Looks like a VIA chipset. Disabling IOMMU.\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" Override with iommu=allowed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gart_iommu_aperture_disabled\">gart_iommu_aperture_disabled</a> = 1;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ACPI\">CONFIG_ACPI</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#nvidia_hpet_check\">nvidia_hpet_check</a>(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#header\">header</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_IO_APIC */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ACPI */</span>", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#nvidia_bugs\">nvidia_bugs</a>(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ACPI\">CONFIG_ACPI</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All timer overrides on Nvidia are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wrong unless HPET is enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unfortunately that's not true on many Asus boards.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't know yet how to detect this automatically, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at least allow a command line override.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_use_timer_override\">acpi_use_timer_override</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_table_parse\">acpi_table_parse</a>(<a class=\"id\" href=\"#ACPI_SIG_HPET\">ACPI_SIG_HPET</a>, <a class=\"id\" href=\"#nvidia_hpet_check\">nvidia_hpet_check</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_skip_timer_override\">acpi_skip_timer_override</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Nvidia board \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"detected. Ignoring ACPI \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"timer override.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"If you got timer trouble \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"try acpi_use_timer_override\\n\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* RED-PEN skip them on mptables too? */</span>", 
"", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ACPI\">CONFIG_ACPI</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>)", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ACPI\">CONFIG_ACPI</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>)", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ati_ixp4x0_rev\">ati_ixp4x0_rev</a>(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#read_pci_config_byte\">read_pci_config_byte</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0xac);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> &= ~(1<<5);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_pci_config_byte\">write_pci_config_byte</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0xac, <a class=\"id\" href=\"#b\">b</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x70);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> |= 1<<8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_pci_config\">write_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x70, <a class=\"id\" href=\"#d\">d</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> &= 0xff;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ati_bugs\">ati_bugs</a>(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_use_timer_override\">acpi_use_timer_override</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#ati_ixp4x0_rev\">ati_ixp4x0_rev</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>  &lt; 0x82)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_skip_timer_override\">acpi_skip_timer_override</a> = 1;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check for IRQ0 interrupt swap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0x72, 0xcd6); <a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#inb\">inb</a>(0xcd7);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#b\">b</a> &amp; 0x2))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_skip_timer_override\">acpi_skip_timer_override</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_skip_timer_override\">acpi_skip_timer_override</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SB4X0 revision 0x%x\\n\", <a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Ignoring ACPI timer override.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"If you got timer trouble \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"try acpi_use_timer_override\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ati_sbx00_rev\">ati_sbx00_rev</a>(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x70);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> &= ~(1<<8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_pci_config\">write_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x70, <a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> &= 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_pci_config\">write_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x70, <a class=\"id\" href=\"#old\">old</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ati_bugs_contd\">ati_bugs_contd</a>(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#rev\">rev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_use_timer_override\">acpi_use_timer_override</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rev\">rev</a> = <a class=\"id\" href=\"#ati_sbx00_rev\">ati_sbx00_rev</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rev\">rev</a> &gt; 0x13)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check for IRQ0 interrupt swap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, 0x64);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#d\">d</a> &amp; (1<<14)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_skip_timer_override\">acpi_skip_timer_override</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_skip_timer_override\">acpi_skip_timer_override</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SB600 revision 0x%x\\n\", <a class=\"id\" href=\"#rev\">rev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Ignoring ACPI timer override.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"If you got timer trouble \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"try acpi_use_timer_override\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ati_bugs\">ati_bugs</a>(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ati_bugs_contd\">ati_bugs_contd</a>(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#QFLAG_APPLY_ONCE\">QFLAG_APPLY_ONCE</a> <span class=\"ts\"/>0x1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#QFLAG_APPLIED\">QFLAG_APPLIED</a><span class=\"ts\"/><span class=\"ts\"/>0x2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#QFLAG_DONE\">QFLAG_DONE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#QFLAG_APPLY_ONCE\">QFLAG_APPLY_ONCE</a>|<a class=\"id\" href=\"#QFLAG_APPLIED\">QFLAG_APPLIED</a>)", 
"struct <a class=\"id\" href=\"#chipset\">chipset</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#vendor\">vendor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#class_mask\">class_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#f\">f</a>)(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>);", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Only works for devices on the root bus. If you add any devices</span>", 
"<span class=\"comment\"> * not on bus 0 readd another loop level in early_quirks(). But</span>", 
"<span class=\"comment\"> * be careful because at least the Nvidia quirk here relies on</span>", 
"<span class=\"comment\"> * only matching on bus 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#chipset\">chipset</a> <a class=\"id\" href=\"#early_qrk\">early_qrk</a>[] <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#PCI_VENDOR_ID_NVIDIA\">PCI_VENDOR_ID_NVIDIA</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>,", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#QFLAG_APPLY_ONCE\">QFLAG_APPLY_ONCE</a>, <a class=\"id\" href=\"#nvidia_bugs\">nvidia_bugs</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>,", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#QFLAG_APPLY_ONCE\">QFLAG_APPLY_ONCE</a>, <a class=\"id\" href=\"#via_bugs\">via_bugs</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_K8_NB\">PCI_DEVICE_ID_AMD_K8_NB</a>,", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_HOST\">PCI_CLASS_BRIDGE_HOST</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, 0, <a class=\"id\" href=\"#fix_hypertransport_config\">fix_hypertransport_config</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_IXP400_SMBUS\">PCI_DEVICE_ID_ATI_IXP400_SMBUS</a>,", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#PCI_CLASS_SERIAL_SMBUS\">PCI_CLASS_SERIAL_SMBUS</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, 0, <a class=\"id\" href=\"#ati_bugs\">ati_bugs</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_SBX00_SMBUS\">PCI_DEVICE_ID_ATI_SBX00_SMBUS</a>,", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#PCI_CLASS_SERIAL_SMBUS\">PCI_CLASS_SERIAL_SMBUS</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, 0, <a class=\"id\" href=\"#ati_bugs_contd\">ati_bugs_contd</a> },", 
"<span class=\"ts\"/>{}", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * check_dev_quirk - apply early quirks to a given PCI device</span>", 
"<span class=\"comment\"> * @num: bus number</span>", 
"<span class=\"comment\"> * @slot: slot number</span>", 
"<span class=\"comment\"> * @func: PCI function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check the vendor &amp; device ID against the early quirks table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the device is single function, let early_quirks() know so we don't</span>", 
"<span class=\"comment\"> * poke at this device again.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_dev_quirk\">check_dev_quirk</a>(int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vendor\">vendor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#read_pci_config_16\">read_pci_config_16</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#PCI_CLASS_DEVICE\">PCI_CLASS_DEVICE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class\">class</a> == 0xffff)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1; <span class=\"comment\">/* no class, treat as single function */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#read_pci_config_16\">read_pci_config_16</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#PCI_VENDOR_ID\">PCI_VENDOR_ID</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#read_pci_config_16\">read_pci_config_16</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID\">PCI_DEVICE_ID</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#f\">f</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#vendor\">vendor</a> == <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#vendor\">vendor</a> == <a class=\"id\" href=\"#vendor\">vendor</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#device\">device</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(!((<a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#class\">class</a> ^ <a class=\"id\" href=\"#class\">class</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#class_mask\">class_mask</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#QFLAG_DONE\">QFLAG_DONE</a>) != <a class=\"id\" href=\"#QFLAG_DONE\">QFLAG_DONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#f\">f</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_qrk\">early_qrk</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#QFLAG_APPLIED\">QFLAG_APPLIED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#read_pci_config_byte\">read_pci_config_byte</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PCI_HEADER_TYPE\">PCI_HEADER_TYPE</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#type\">type</a> &amp; 0x80))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_quirks\">early_quirks</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#early_pci_allowed\">early_pci_allowed</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Poor man's PCI discovery */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Only scan the root bus */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#slot\">slot</a> = 0; <a class=\"id\" href=\"#slot\">slot</a> &lt; 32; <a class=\"id\" href=\"#slot\">slot</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#func\">func</a> = 0; <a class=\"id\" href=\"#func\">func</a> &lt; 8; <a class=\"id\" href=\"#func\">func</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only probe function 0 on single fn devices */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_dev_quirk\">check_dev_quirk</a>(0, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/ed/4253933f1908a6b745414c817effb08f7cf8df.xr', __xr_tmp);
