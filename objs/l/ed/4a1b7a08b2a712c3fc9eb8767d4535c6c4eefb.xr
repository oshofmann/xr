var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * High memory handling common code and variables.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) 1999 Andrea Arcangeli, SuSE GmbH, andrea@suse.de</span>", 
"<span class=\"comment\"> *          Gerhard Wichert, Siemens AG, Gerhard.Wichert@pdb.siemens.de</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redesigned the x86 32-bit VM architecture to deal with</span>", 
"<span class=\"comment\"> * 64-bit physical space. With current x86 CPUs this</span>", 
"<span class=\"comment\"> * means up to 64 Gigabytes physical RAM.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Rewrote high memory support to move the page cache into</span>", 
"<span class=\"comment\"> * high memory. Implemented permanent (schedulable) kmaps</span>", 
"<span class=\"comment\"> * based on Linus' idea.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1999 Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempool\">mempool</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kgdb\">kgdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Virtual_count is not a pure \"count\".</span>", 
"<span class=\"comment\"> *  0 means that it is not mapped, and has not been mapped</span>", 
"<span class=\"comment\"> *    since a TLB flush - it is usable.</span>", 
"<span class=\"comment\"> *  1 means that there are no users, but it has been mapped</span>", 
"<span class=\"comment\"> *    since the last TLB flush - so we can't use it.</span>", 
"<span class=\"comment\"> *  n means that there are (n-1) current users of it.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"", 
"unsigned long <a class=\"id\" href=\"#totalhigh_pages\">totalhigh_pages</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#totalhigh_pages\">totalhigh_pages</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#nr_free_highpages\">nr_free_highpages</a> (void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pages\">pages</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_pgdat\">for_each_online_pgdat</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#ZONE_HIGHMEM\">ZONE_HIGHMEM</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_movable_is_highmem\">zone_movable_is_highmem</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pages\">pages</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#LAST_PKMAP\">LAST_PKMAP</a>];", 
"static unsigned int <a class=\"id\" href=\"#last_pkmap_nr\">last_pkmap_nr</a>;", 
"static  <a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#kmap_lock\">kmap_lock</a>);", 
"", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> * <a class=\"id\" href=\"#pkmap_page_table\">pkmap_page_table</a>;", 
"", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#pkmap_map_wait\">pkmap_map_wait</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Most architectures have no use for kmap_high_get(), so let's abstract</span>", 
"<span class=\"comment\"> * the disabling of IRQ out of the locking in that case to save on a</span>", 
"<span class=\"comment\"> * potential useless overhead.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_NEEDS_KMAP_HIGH_GET\">ARCH_NEEDS_KMAP_HIGH_GET</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_kmap\">lock_kmap</a>()             <a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#kmap_lock\">kmap_lock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlock_kmap\">unlock_kmap</a>()           <a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#kmap_lock\">kmap_lock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_kmap_any\">lock_kmap_any</a>(<a class=\"id\" href=\"#flags\">flags</a>)    <a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#kmap_lock\">kmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlock_kmap_any\">unlock_kmap_any</a>(<a class=\"id\" href=\"#flags\">flags</a>)  <a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#kmap_lock\">kmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_kmap\">lock_kmap</a>()             <a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kmap_lock\">kmap_lock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlock_kmap\">unlock_kmap</a>()           <a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kmap_lock\">kmap_lock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_kmap_any\">lock_kmap_any</a>(<a class=\"id\" href=\"#flags\">flags</a>)    \\", 
"<span class=\"ts\"/><span class=\"ts\"/>do { <a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kmap_lock\">kmap_lock</a>); (void)(<a class=\"id\" href=\"#flags\">flags</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlock_kmap_any\">unlock_kmap_any</a>(<a class=\"id\" href=\"#flags\">flags</a>)  \\", 
"<span class=\"ts\"/><span class=\"ts\"/>do { <a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kmap_lock\">kmap_lock</a>); (void)(<a class=\"id\" href=\"#flags\">flags</a>); } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#flush_all_zero_pkmaps\">flush_all_zero_pkmaps</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_flush\">need_flush</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_kmaps\">flush_cache_kmaps</a>();", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#LAST_PKMAP\">LAST_PKMAP</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * zero means we don't have anything to do,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * &gt;1 means that it is still in use. Only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a count of 1 means that it is free but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * needs to be unmapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#i\">i</a>] != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sanity check */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pte_none\">pte_none</a>(<a class=\"id\" href=\"#pkmap_page_table\">pkmap_page_table</a>[<a class=\"id\" href=\"#i\">i</a>]));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't need an atomic fetch-and-clear op here;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no-one has the page mapped, and cannot get at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * its virtual address (and hence PTE) without first</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * getting the kmap_lock (which is held here).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So no dangers, even with speculative execution.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pkmap_page_table\">pkmap_page_table</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_clear\">pte_clear</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#pkmap_page_table\">pkmap_page_table</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_address\">set_page_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_flush\">need_flush</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_flush\">need_flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_kernel_range\">flush_tlb_kernel_range</a>(<a class=\"id\" href=\"#PKMAP_ADDR\">PKMAP_ADDR</a>(0), <a class=\"id\" href=\"#PKMAP_ADDR\">PKMAP_ADDR</a>(<a class=\"id\" href=\"#LAST_PKMAP\">LAST_PKMAP</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmap_flush_unused - flush all unused kmap mappings in order to remove stray mappings</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kmap_flush_unused\">kmap_flush_unused</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kmap\">lock_kmap</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_all_zero_pkmaps\">flush_all_zero_pkmaps</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kmap\">unlock_kmap</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#map_new_virtual\">map_new_virtual</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<a class=\"id\" href=\"#start\">start</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#LAST_PKMAP\">LAST_PKMAP</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Find an empty entry */</span>", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_pkmap_nr\">last_pkmap_nr</a> = (<a class=\"id\" href=\"#last_pkmap_nr\">last_pkmap_nr</a> + 1) &amp; <a class=\"id\" href=\"#LAST_PKMAP_MASK\">LAST_PKMAP_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#last_pkmap_nr\">last_pkmap_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_all_zero_pkmaps\">flush_all_zero_pkmaps</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#LAST_PKMAP\">LAST_PKMAP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#last_pkmap_nr\">last_pkmap_nr</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* Found a usable entry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Sleep for somebody else to unmap their entries</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(&amp;<a class=\"id\" href=\"#pkmap_map_wait\">pkmap_map_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_kmap\">unlock_kmap</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#pkmap_map_wait\">pkmap_map_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_kmap\">lock_kmap</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Somebody else might have mapped it while we slept */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Re-start */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#PKMAP_ADDR\">PKMAP_ADDR</a>(<a class=\"id\" href=\"#last_pkmap_nr\">last_pkmap_nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   &amp;(<a class=\"id\" href=\"#pkmap_page_table\">pkmap_page_table</a>[<a class=\"id\" href=\"#last_pkmap_nr\">last_pkmap_nr</a>]), <a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#kmap_prot\">kmap_prot</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#last_pkmap_nr\">last_pkmap_nr</a>] = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_address\">set_page_address</a>(<a class=\"id\" href=\"#page\">page</a>, (void *)<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmap_high - map a highmem page into memory</span>", 
"<span class=\"comment\"> * @page: &amp;struct page to map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the page's virtual memory address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We cannot call this from interrupts, as it may block.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#kmap_high\">kmap_high</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For highmem pages, we can't trust \"virtual\" until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * after we have the lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kmap\">lock_kmap</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#map_new_virtual\">map_new_virtual</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#PKMAP_NR\">PKMAP_NR</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>)]++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#PKMAP_NR\">PKMAP_NR</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>)] &lt; 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kmap\">unlock_kmap</a>();", 
"<span class=\"ts\"/>return (void*) <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmap_high\">kmap_high</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_NEEDS_KMAP_HIGH_GET\">ARCH_NEEDS_KMAP_HIGH_GET</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmap_high_get - pin a highmem page into memory</span>", 
"<span class=\"comment\"> * @page: &amp;struct page to pin</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the page's current virtual memory address, or NULL if no mapping</span>", 
"<span class=\"comment\"> * exists.  If and only if a non null address is returned then a</span>", 
"<span class=\"comment\"> * matching call to kunmap_high() is necessary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This can be called from any context.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#kmap_high_get\">kmap_high_get</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kmap_any\">lock_kmap_any</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vaddr\">vaddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#PKMAP_NR\">PKMAP_NR</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>)] &lt; 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#PKMAP_NR\">PKMAP_NR</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>)]++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kmap_any\">unlock_kmap_any</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return (void*) <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kunmap_high - map a highmem page into memory</span>", 
"<span class=\"comment\"> * @page: &amp;struct page to unmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If ARCH_NEEDS_KMAP_HIGH_GET is not defined then this may be called</span>", 
"<span class=\"comment\"> * only from user context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kunmap_high\">kunmap_high</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_wakeup\">need_wakeup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kmap_any\">lock_kmap_any</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#PKMAP_NR\">PKMAP_NR</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A count must never go down to zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without a TLB flush!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#need_wakeup\">need_wakeup</a> = 0;", 
"<span class=\"ts\"/>switch (--<a class=\"id\" href=\"#pkmap_count\">pkmap_count</a>[<a class=\"id\" href=\"#nr\">nr</a>]) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Avoid an unnecessary wake_up() function call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The common case is pkmap_count[] == 1, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no waiters.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The tasks queued in the wait-queue are guarded</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by both the lock in the wait-queue-head and by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the kmap_lock.  As the kmap_lock is held here,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no need for the wait-queue-head's lock.  Simply</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * test if the queue is empty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_wakeup\">need_wakeup</a> = <a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#pkmap_map_wait\">pkmap_map_wait</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kmap_any\">unlock_kmap_any</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do wake-up, if needed, race-free outside of the spin lock */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_wakeup\">need_wakeup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#pkmap_map_wait\">pkmap_map_wait</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kunmap_high\">kunmap_high</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#HASHED_PAGE_VIRTUAL\">HASHED_PAGE_VIRTUAL</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PA_HASH_ORDER\">PA_HASH_ORDER</a><span class=\"ts\"/>7", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Describes one page-&gt;virtual association</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page_address_map\">page_address_map</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#virtual\">virtual</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * page_address_map freelist, allocated from page_address_maps.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#page_address_pool\">page_address_pool</a>;<span class=\"ts\"/><span class=\"comment\">/* freelist */</span>", 
"static <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#pool_lock\">pool_lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* protects page_address_pool */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Hash table bucket</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page_address_slot\">page_address_slot</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#lh\">lh</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* List of page_address_maps */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Protect this bucket's list */</span>", 
"} <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#page_address_htable\">page_address_htable</a>[1<<<a class=\"id\" href=\"#PA_HASH_ORDER\">PA_HASH_ORDER</a>];", 
"", 
"static struct <a class=\"id\" href=\"#page_address_slot\">page_address_slot</a> *<a class=\"id\" href=\"#page_slot\">page_slot</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#page_address_htable\">page_address_htable</a>[<a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PA_HASH_ORDER\">PA_HASH_ORDER</a>)];", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_address - get the mapped virtual address of a page</span>", 
"<span class=\"comment\"> * @page: &amp;struct page to get the virtual address of</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the page's virtual address.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#page_address\">page_address</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_address_slot\">page_address_slot</a> *<a class=\"id\" href=\"#pas\">pas</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#lowmem_page_address\">lowmem_page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pas\">pas</a> = <a class=\"id\" href=\"#page_slot\">page_slot</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lh\">lh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page_address_map\">page_address_map</a> *<a class=\"id\" href=\"#pam\">pam</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pam\">pam</a>, &amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lh\">lh</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pam\">pam</a>-><a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pam\">pam</a>-><a class=\"id\" href=\"#virtual\">virtual</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#page_address\">page_address</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_page_address - set a page's virtual address</span>", 
"<span class=\"comment\"> * @page: &amp;struct page to set</span>", 
"<span class=\"comment\"> * @virtual: virtual address to use</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#set_page_address\">set_page_address</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#virtual\">virtual</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_address_slot\">page_address_slot</a> *<a class=\"id\" href=\"#pas\">pas</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_address_map\">page_address_map</a> *<a class=\"id\" href=\"#pam\">pam</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pas\">pas</a> = <a class=\"id\" href=\"#page_slot\">page_slot</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#virtual\">virtual</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#page_address_pool\">page_address_pool</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool_lock\">pool_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pam\">pam</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#page_address_pool\">page_address_pool</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page_address_map\">page_address_map</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pam\">pam</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool_lock\">pool_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pam\">pam</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pam\">pam</a>-><a class=\"id\" href=\"#virtual\">virtual</a> = <a class=\"id\" href=\"#virtual\">virtual</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#pam\">pam</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lh\">lh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pam\">pam</a>, &amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lh\">lh</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pam\">pam</a>-><a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pam\">pam</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool_lock\">pool_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#pam\">pam</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#page_address_pool\">page_address_pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool_lock\">pool_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pas\">pas</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page_address_map\">page_address_map</a> <a class=\"id\" href=\"#page_address_maps\">page_address_maps</a>[<a class=\"id\" href=\"#LAST_PKMAP\">LAST_PKMAP</a>];", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#page_address_init\">page_address_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#page_address_pool\">page_address_pool</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#page_address_maps\">page_address_maps</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page_address_maps\">page_address_maps</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#page_address_pool\">page_address_pool</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#page_address_htable\">page_address_htable</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#page_address_htable\">page_address_htable</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lh\">lh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#page_address_htable\">page_address_htable</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#pool_lock\">pool_lock</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* defined(CONFIG_HIGHMEM) &amp;&amp; !defined(WANT_PAGE_VIRTUAL) */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_HIGHMEM\">CONFIG_DEBUG_HIGHMEM</a>", 
"", 
"void <a class=\"id\" href=\"#debug_kmap_atomic\">debug_kmap_atomic</a>(enum <a class=\"id\" href=\"#km_type\">km_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#warn_count\">warn_count</a> = 10;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#warn_count\">warn_count</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_nmi\">in_nmi</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_NMI\">KM_NMI</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_NMI_PTE\">KM_NMI_PTE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_count\">warn_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#in_irq\">in_irq</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_IRQ0\">KM_IRQ0</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_IRQ1\">KM_IRQ1</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_BIO_SRC_IRQ\">KM_BIO_SRC_IRQ</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_BIO_DST_IRQ\">KM_BIO_DST_IRQ</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_BOUNCE_READ\">KM_BOUNCE_READ</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_IRQ_PTE\">KM_IRQ_PTE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_count\">warn_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {<span class=\"ts\"/><span class=\"comment\">/* softirq */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_IRQ0\">KM_IRQ0</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_IRQ1\">KM_IRQ1</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_SOFTIRQ0\">KM_SOFTIRQ0</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_SOFTIRQ1\">KM_SOFTIRQ1</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_SKB_SUNRPC_DATA\">KM_SKB_SUNRPC_DATA</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_SKB_DATA_SOFTIRQ\">KM_SKB_DATA_SOFTIRQ</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KM_BOUNCE_READ\">KM_BOUNCE_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_count\">warn_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_IRQ0\">KM_IRQ0</a> || <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_IRQ1\">KM_IRQ1</a> || <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_BOUNCE_READ\">KM_BOUNCE_READ</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_BIO_SRC_IRQ\">KM_BIO_SRC_IRQ</a> || <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_BIO_DST_IRQ\">KM_BIO_DST_IRQ</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_IRQ_PTE\">KM_IRQ_PTE</a> || <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_NMI\">KM_NMI</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_NMI_PTE\">KM_NMI_PTE</a> ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_count\">warn_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_SOFTIRQ0\">KM_SOFTIRQ0</a> || <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_SOFTIRQ1\">KM_SOFTIRQ1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#irq_count\">irq_count</a>() == 0 && !<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_count\">warn_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KM_KDB\">KM_KDB</a> && <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>) == -1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_count\">warn_count</a>--;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KGDB_KDB */</span>", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/ed/4a1b7a08b2a712c3fc9eb8767d4535c6c4eefb.xr', __xr_tmp);
