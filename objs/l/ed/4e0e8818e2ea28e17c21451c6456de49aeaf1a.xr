var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs/sysfs/dir.c - sysfs core and dir operation implementation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2001-3 Patrick Mochel</span>", 
"<span class=\"comment\"> * Copyright (c) 2007 SUSE Linux Products GmbH</span>", 
"<span class=\"comment\"> * Copyright (c) 2007 Tejun Heo &lt;teheo@suse.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please see Documentation/filesystems/sysfs.txt for more information.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"sysfs.h\"", 
"", 
"<a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#sysfs_mutex\">sysfs_mutex</a>);", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#sysfs_assoc_lock\">sysfs_assoc_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#sysfs_ino_lock\">sysfs_ino_lock</a>);", 
"static <a class=\"id\" href=\"#DEFINE_IDA\">DEFINE_IDA</a>(<a class=\"id\" href=\"#sysfs_ino_ida\">sysfs_ino_ida</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_link_sibling - link sysfs_dirent into sibling list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sd: sysfs_dirent of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Link @sd into its sibling list which starts from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd-&gt;s_parent-&gt;s_dir.children.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mutex_lock(sysfs_mutex)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sysfs_link_sibling\">sysfs_link_sibling</a>(struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#parent_sd\">parent_sd</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_parent\">s_parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> **<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Store directory entries in order by ino.  This allows</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * readdir to properly restart without having to add a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cursor into the s_dir.children list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = &amp;<a class=\"id\" href=\"#parent_sd\">parent_sd</a>-><a class=\"id\" href=\"#s_dir\">s_dir</a>.<a class=\"id\" href=\"#children\">children</a>; *<a class=\"id\" href=\"#pos\">pos</a>; <a class=\"id\" href=\"#pos\">pos</a> = &amp;(*<a class=\"id\" href=\"#pos\">pos</a>)-><a class=\"id\" href=\"#s_sibling\">s_sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_ino\">s_ino</a> &lt; (*<a class=\"id\" href=\"#pos\">pos</a>)-><a class=\"id\" href=\"#s_ino\">s_ino</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a> = *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_unlink_sibling - unlink sysfs_dirent from sibling list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sd: sysfs_dirent of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unlink @sd from its sibling list which starts from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd-&gt;s_parent-&gt;s_dir.children.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mutex_lock(sysfs_mutex)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sysfs_unlink_sibling\">sysfs_unlink_sibling</a>(struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> **<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_parent\">s_parent</a>-><a class=\"id\" href=\"#s_dir\">s_dir</a>.<a class=\"id\" href=\"#children\">children</a>; *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = &amp;(*<a class=\"id\" href=\"#pos\">pos</a>)-><a class=\"id\" href=\"#s_sibling\">s_sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> == <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_get_active - get an active reference to sysfs_dirent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sd: sysfs_dirent to get an active reference to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Get an active reference of @sd.  This function is noop if @sd</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pointer to @sd on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sysfs_get_active\">sysfs_get_active</a>(struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#sd\">sd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_active\">s_active</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#v\">v</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_active\">s_active</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#v\">v</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#t\">t</a> == <a class=\"id\" href=\"#v\">v</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rwsem_acquire_read\">rwsem_acquire_read</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 0, 1, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_put_active - put an active reference to sysfs_dirent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sd: sysfs_dirent to put an active reference to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Put an active reference to @sd.  This function is noop if @sd</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sysfs_put_active\">sysfs_put_active</a>(struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#cmpl\">cmpl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#sd\">sd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwsem_release\">rwsem_release</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 1, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#atomic_dec_return\">atomic_dec_return</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_active\">s_active</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#v\">v</a> != <a class=\"id\" href=\"#SD_DEACTIVATED_BIAS\">SD_DEACTIVATED_BIAS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* atomic_dec_return() is a mb(), we'll always see the updated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sd-&gt;s_sibling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmpl\">cmpl</a> = (void *)<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#cmpl\">cmpl</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_deactivate - deactivate sysfs_dirent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sd: sysfs_dirent to deactivate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deny new active references and drain existing ones.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sysfs_deactivate\">sysfs_deactivate</a>(struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a> || !(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#SYSFS_FLAG_REMOVED\">SYSFS_FLAG_REMOVED</a>));", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sysfs_type\">sysfs_type</a>(<a class=\"id\" href=\"#sd\">sd</a>) &amp; <a class=\"id\" href=\"#SYSFS_ACTIVE_REF\">SYSFS_ACTIVE_REF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a> = (void *)&amp;<a class=\"id\" href=\"#wait\">wait</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwsem_acquire\">rwsem_acquire</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 0, 0, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* atomic_add_return() is a mb(), put_active() will always see</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the updated sd-&gt;s_sibling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#atomic_add_return\">atomic_add_return</a>(<a class=\"id\" href=\"#SD_DEACTIVATED_BIAS\">SD_DEACTIVATED_BIAS</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_active\">s_active</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> != <a class=\"id\" href=\"#SD_DEACTIVATED_BIAS\">SD_DEACTIVATED_BIAS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_contended\">lock_contended</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#dep_map\">dep_map</a>, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquired\">lock_acquired</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#dep_map\">dep_map</a>, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwsem_release\">rwsem_release</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 1, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sysfs_alloc_ino\">sysfs_alloc_ino</a>(<a class=\"id\" href=\"#ino_t\">ino_t</a> *<a class=\"id\" href=\"#pino\">pino</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysfs_ino_lock\">sysfs_ino_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>(&amp;<a class=\"id\" href=\"#sysfs_ino_ida\">sysfs_ino_ida</a>, 2, &amp;<a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_ino_lock\">sysfs_ino_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#sysfs_ino_ida\">sysfs_ino_ida</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pino\">pino</a> = <a class=\"id\" href=\"#ino\">ino</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sysfs_free_ino\">sysfs_free_ino</a>(<a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysfs_ino_lock\">sysfs_ino_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#sysfs_ino_ida\">sysfs_ino_ida</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_ino_lock\">sysfs_ino_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#release_sysfs_dirent\">release_sysfs_dirent</a>(struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> * <a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#parent_sd\">parent_sd</a>;", 
"", 
" <a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Moving/renaming is always done while holding reference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sd-&gt;s_parent won't change beneath us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_sd\">parent_sd</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_parent\">s_parent</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysfs_type\">sysfs_type</a>(<a class=\"id\" href=\"#sd\">sd</a>) == <a class=\"id\" href=\"#SYSFS_KOBJ_LINK\">SYSFS_KOBJ_LINK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_put\">sysfs_put</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_symlink\">s_symlink</a>.<a class=\"id\" href=\"#target_sd\">target_sd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysfs_type\">sysfs_type</a>(<a class=\"id\" href=\"#sd\">sd</a>) &amp; <a class=\"id\" href=\"#SYSFS_COPY_NAME\">SYSFS_COPY_NAME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_name\">s_name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_iattr\">s_iattr</a> && <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_iattr\">s_iattr</a>-><a class=\"id\" href=\"#ia_secdata\">ia_secdata</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_release_secctx\">security_release_secctx</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_iattr\">s_iattr</a>-><a class=\"id\" href=\"#ia_secdata\">ia_secdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_iattr\">s_iattr</a>-><a class=\"id\" href=\"#ia_secdata_len\">ia_secdata_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_iattr\">s_iattr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_free_ino\">sysfs_free_ino</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_ino\">s_ino</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sysfs_dir_cachep\">sysfs_dir_cachep</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#parent_sd\">parent_sd</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a> && <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_count\">s_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sysfs_dentry_delete\">sysfs_dentry_delete</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"<span class=\"ts\"/>return !!(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#SYSFS_FLAG_REMOVED\">SYSFS_FLAG_REMOVED</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sysfs_dentry_revalidate\">sysfs_dentry_revalidate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_dir\">is_dir</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sysfs_mutex\">sysfs_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The sysfs dirent has been deleted */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#SYSFS_FLAG_REMOVED\">SYSFS_FLAG_REMOVED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_bad\">out_bad</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The sysfs dirent has been moved? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a> != <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_parent\">s_parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_bad\">out_bad</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The sysfs dirent has been renamed */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_name\">s_name</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_bad\">out_bad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_mutex\">sysfs_mutex</a>);", 
"<a class=\"id\" href=\"#out_valid\">out_valid</a>:", 
"<span class=\"ts\"/>return 1;", 
"<a class=\"id\" href=\"#out_bad\">out_bad</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the dentry from the dcache hashes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a deleted dentry we use d_drop instead of d_delete</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so sysfs doesn't need to cope with negative dentries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a dentry that has simply been renamed we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use d_drop to remove it from the dcache lookup on its</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * old parent.  If this dentry persists later when a lookup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is performed at its new name the dentry will be readded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the dcache hashes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_dir\">is_dir</a> = (<a class=\"id\" href=\"#sysfs_type\">sysfs_type</a>(<a class=\"id\" href=\"#sd\">sd</a>) == <a class=\"id\" href=\"#SYSFS_DIR\">SYSFS_DIR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_mutex\">sysfs_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_dir\">is_dir</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we have submounts we must allow the vfs caches</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to lie about the state of the filesystem to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * leaks and other nasty things.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#have_submounts\">have_submounts</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_valid\">out_valid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_dcache_parent\">shrink_dcache_parent</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_drop\">d_drop</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sysfs_dentry_iput\">sysfs_dentry_iput</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> * <a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_put\">sysfs_put</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#dentry_operations\">dentry_operations</a> <a class=\"id\" href=\"#sysfs_dentry_ops\">sysfs_dentry_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#d_revalidate\">d_revalidate</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sysfs_dentry_revalidate\">sysfs_dentry_revalidate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#d_delete\">d_delete</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sysfs_dentry_delete\">sysfs_dentry_delete</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#d_iput\">d_iput</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sysfs_dentry_iput\">sysfs_dentry_iput</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sysfs_new_dirent\">sysfs_new_dirent</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#umode_t\">umode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#dup_name\">dup_name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &amp; <a class=\"id\" href=\"#SYSFS_COPY_NAME\">SYSFS_COPY_NAME</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#dup_name\">dup_name</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#sysfs_dir_cachep\">sysfs_dir_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sd\">sd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out1\">err_out1</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysfs_alloc_ino\">sysfs_alloc_ino</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_ino\">s_ino</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out2\">err_out2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_count\">s_count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_active\">s_active</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_name\">s_name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_mode\">s_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd\">sd</a>;", 
"", 
" <a class=\"id\" href=\"#err_out2\">err_out2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sysfs_dir_cachep\">sysfs_dir_cachep</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
" <a class=\"id\" href=\"#err_out1\">err_out1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dup_name\">dup_name</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_addrm_start - prepare for sysfs_dirent add/remove</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@acxt: pointer to sysfs_addrm_cxt to be used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@parent_sd: parent sysfs_dirent</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is called when the caller is about to add or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>remove sysfs_dirent under @parent_sd.  This function acquires</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_mutex.  @acxt is used to keep and pass context to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>other addrm functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep).  sysfs_mutex is locked on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sysfs_addrm_start\">sysfs_addrm_start</a>(struct <a class=\"id\" href=\"#sysfs_addrm_cxt\">sysfs_addrm_cxt</a> *<a class=\"id\" href=\"#acxt\">acxt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#parent_sd\">parent_sd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#acxt\">acxt</a>, 0, sizeof(*<a class=\"id\" href=\"#acxt\">acxt</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#parent_sd\">parent_sd</a> = <a class=\"id\" href=\"#parent_sd\">parent_sd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sysfs_mutex\">sysfs_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__sysfs_add_one - add sysfs_dirent to parent without warning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@acxt: addrm context to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sd: sysfs_dirent to be added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Get @acxt-&gt;parent_sd and set sd-&gt;s_parent to it and increment</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>nlink of parent inode if @sd is a directory and link into the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>children list of the parent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function should be called between calls to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_addrm_start() and sysfs_addrm_finish() and should be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>passed the same @acxt as passed to sysfs_addrm_start().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Determined by sysfs_addrm_start().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -EEXIST if entry with the given name already</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>exists.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sysfs_add_one\">__sysfs_add_one</a>(struct <a class=\"id\" href=\"#sysfs_addrm_cxt\">sysfs_addrm_cxt</a> *<a class=\"id\" href=\"#acxt\">acxt</a>, struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_inode_attrs\">sysfs_inode_attrs</a> *<a class=\"id\" href=\"#ps_iattr\">ps_iattr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysfs_find_dirent\">sysfs_find_dirent</a>(<a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#parent_sd\">parent_sd</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_ns\">s_ns</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_name\">s_name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_parent\">s_parent</a> = <a class=\"id\" href=\"#sysfs_get\">sysfs_get</a>(<a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#parent_sd\">parent_sd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_link_sibling\">sysfs_link_sibling</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update timestamps on the parent */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ps_iattr\">ps_iattr</a> = <a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#parent_sd\">parent_sd</a>-><a class=\"id\" href=\"#s_iattr\">s_iattr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ps_iattr\">ps_iattr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#ps_iattrs\">ps_iattrs</a> = &amp;<a class=\"id\" href=\"#ps_iattr\">ps_iattr</a>-><a class=\"id\" href=\"#ia_iattr\">ia_iattr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ps_iattrs\">ps_iattrs</a>-><a class=\"id\" href=\"#ia_ctime\">ia_ctime</a> = <a class=\"id\" href=\"#ps_iattrs\">ps_iattrs</a>-><a class=\"id\" href=\"#ia_mtime\">ia_mtime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_pathname - return full path to sysfs dirent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sd: sysfs_dirent whose path we want</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@path: caller allocated buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Gives the name \"/\" to the sysfs_root entry; any path returned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is relative to wherever sysfs is mounted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>XXX: does no error checking on @path size</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#sysfs_pathname\">sysfs_pathname</a>(struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>, char *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_parent\">s_parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_pathname\">sysfs_pathname</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_parent\">s_parent</a>, <a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#path\">path</a>, \"/\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_name\">s_name</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#path\">path</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_add_one - add sysfs_dirent to parent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@acxt: addrm context to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sd: sysfs_dirent to be added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Get @acxt-&gt;parent_sd and set sd-&gt;s_parent to it and increment</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>nlink of parent inode if @sd is a directory and link into the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>children list of the parent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function should be called between calls to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_addrm_start() and sysfs_addrm_finish() and should be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>passed the same @acxt as passed to sysfs_addrm_start().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Determined by sysfs_addrm_start().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -EEXIST if entry with the given name already</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>exists.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sysfs_add_one\">sysfs_add_one</a>(struct <a class=\"id\" href=\"#sysfs_addrm_cxt\">sysfs_addrm_cxt</a> *<a class=\"id\" href=\"#acxt\">acxt</a>, struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__sysfs_add_one\">__sysfs_add_one</a>(<a class=\"id\" href=\"#acxt\">acxt</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"sysfs: cannot create duplicate filename '%s'\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#path\">path</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) ? <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_name\">s_name</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#sysfs_pathname\">sysfs_pathname</a>(<a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#parent_sd\">parent_sd</a>, <a class=\"id\" href=\"#path\">path</a>), \"/\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>            <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_name\">s_name</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_remove_one - remove sysfs_dirent from parent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@acxt: addrm context to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sd: sysfs_dirent to be removed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Mark @sd removed and drop nlink of parent inode if @sd is a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>directory.  @sd is unlinked from the children list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function should be called between calls to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_addrm_start() and sysfs_addrm_finish() and should be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>passed the same @acxt as passed to sysfs_addrm_start().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Determined by sysfs_addrm_start().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sysfs_remove_one\">sysfs_remove_one</a>(struct <a class=\"id\" href=\"#sysfs_addrm_cxt\">sysfs_addrm_cxt</a> *<a class=\"id\" href=\"#acxt\">acxt</a>, struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_inode_attrs\">sysfs_inode_attrs</a> *<a class=\"id\" href=\"#ps_iattr\">ps_iattr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#SYSFS_FLAG_REMOVED\">SYSFS_FLAG_REMOVED</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_unlink_sibling\">sysfs_unlink_sibling</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update timestamps on the parent */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ps_iattr\">ps_iattr</a> = <a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#parent_sd\">parent_sd</a>-><a class=\"id\" href=\"#s_iattr\">s_iattr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ps_iattr\">ps_iattr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#ps_iattrs\">ps_iattrs</a> = &amp;<a class=\"id\" href=\"#ps_iattr\">ps_iattr</a>-><a class=\"id\" href=\"#ia_iattr\">ia_iattr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ps_iattrs\">ps_iattrs</a>-><a class=\"id\" href=\"#ia_ctime\">ia_ctime</a> = <a class=\"id\" href=\"#ps_iattrs\">ps_iattrs</a>-><a class=\"id\" href=\"#ia_mtime\">ia_mtime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> |= <a class=\"id\" href=\"#SYSFS_FLAG_REMOVED\">SYSFS_FLAG_REMOVED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a> = <a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#removed\">removed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#removed\">removed</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_addrm_finish - finish up sysfs_dirent add/remove</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@acxt: addrm context to finish up</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Finish up sysfs_dirent add/remove.  Resources acquired by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_addrm_start() are released and removed sysfs_dirents are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cleaned up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_mutex is released.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sysfs_addrm_finish\">sysfs_addrm_finish</a>(struct <a class=\"id\" href=\"#sysfs_addrm_cxt\">sysfs_addrm_cxt</a> *<a class=\"id\" href=\"#acxt\">acxt</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* release resources acquired by sysfs_addrm_start() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_mutex\">sysfs_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* kill removed sysfs_dirents */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#removed\">removed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#removed\">removed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acxt\">acxt</a>-><a class=\"id\" href=\"#removed\">removed</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#s_sibling\">s_sibling</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_deactivate\">sysfs_deactivate</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_bin_file\">unmap_bin_file</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_put\">sysfs_put</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
];
xr_frag_insert('l/ed/4e0e8818e2ea28e17c21451c6456de49aeaf1a.xr', __xr_tmp);
