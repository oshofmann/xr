var __xr_tmp = [
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX We're not chekcing the str_size! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"io+mem\", 6) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#both\">both</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"io\", 2) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#both\">both</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"mem\", 3) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#both\">both</a>;", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#both\">both</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#io_state\">io_state</a> = <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a> | <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_HAS_VGA_DEFAULT_DEVICE\">__ARCH_HAS_VGA_DEFAULT_DEVICE</a>", 
"<span class=\"comment\">/* this is only used a cookie - it should not be dereferenced */</span>", 
"static struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#vga_default\">vga_default</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#vga_arb_device_card_gone\">vga_arb_device_card_gone</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"comment\">/* Find somebody in our list */</span>", 
"static struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>, &amp;<a class=\"id\" href=\"#vga_list\">vga_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#pdev\">pdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Returns the default VGA device (vgacon's babe) */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_HAS_VGA_DEFAULT_DEVICE\">__ARCH_HAS_VGA_DEFAULT_DEVICE</a>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#vga_default_device\">vga_default_device</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vga_default\">vga_default</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vga_irq_set_state\">vga_irq_set_state</a>(struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#irq_set_state\">irq_set_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#irq_set_state\">irq_set_state</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* If we don't ever use VGA arb we should avoid</span>", 
"<span class=\"comment\">   turning off anything anywhere due to old X servers getting</span>", 
"<span class=\"comment\">   confused about the boot device not being VGA */</span>", 
"static void <a class=\"id\" href=\"#vga_check_first_use\">vga_check_first_use</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* we should inform all GPUs in the system that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * VGA arb has occured and to try and disable resources</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if they can */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vga_arbiter_used\">vga_arbiter_used</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_arbiter_used\">vga_arbiter_used</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_arbiter_notify_clients\">vga_arbiter_notify_clients</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#__vga_tryget\">__vga_tryget</a>(struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#wants\">wants</a>, <a class=\"id\" href=\"#legacy_wants\">legacy_wants</a>, <a class=\"id\" href=\"#match\">match</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pci_bits\">pci_bits</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Account for \"normal\" resources to lock. If we decode the legacy,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counterpart, we need to request it as well</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_NORMAL_IO\">VGA_RSRC_NORMAL_IO</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsrc\">rsrc</a> |= <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_NORMAL_MEM\">VGA_RSRC_NORMAL_MEM</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsrc\">rsrc</a> |= <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: %d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#rsrc\">rsrc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: owns: %d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check what resources we need to acquire */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wants\">wants</a> = <a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; ~<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We already own everything, just mark locked &amp; bye bye */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wants\">wants</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#lock_them\">lock_them</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't need to request a legacy resource, we just enable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * appropriate decoding and go</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#legacy_wants\">legacy_wants</a> = <a class=\"id\" href=\"#wants\">wants</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#legacy_wants\">legacy_wants</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#enable_them\">enable_them</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, we don't, let's find out how we need to kick off */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#conflict\">conflict</a>, &amp;<a class=\"id\" href=\"#vga_list\">vga_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lwants\">lwants</a> = <a class=\"id\" href=\"#legacy_wants\">legacy_wants</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#change_bridge\">change_bridge</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't conflict with myself */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a> == <a class=\"id\" href=\"#conflict\">conflict</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check if the architecture allows a conflict between those</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 2 devices or if they are on separate domains</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vga_conflicts\">vga_conflicts</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#pdev\">pdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have a possible conflict. before we go further, we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * check if we sit on the same bus as the conflicting device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if we don't, then we must tie both IO and MEM resources</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * together since there is only a single bit controlling</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * VGA forwarding on P2P bridges</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#bus\">bus</a> != <a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#bus\">bus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_bridge\">change_bridge</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lwants\">lwants</a> = <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a> | <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check if the guy has a lock on the resource. If he does,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return the conflicting entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#locks\">locks</a> &amp; <a class=\"id\" href=\"#lwants\">lwants</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#conflict\">conflict</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ok, now check if he owns the resource we want. We don't need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to check \"decodes\" since it should be impossible to own</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * own legacy resources you don't decode unless I have a bug</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in this code...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#owns\">owns</a> &amp; ~<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#decodes\">decodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#lwants\">lwants</a> &amp; <a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#owns\">owns</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#match\">match</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* looks like he doesn't have a lock, we can steal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * them from him</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_irq_set_state\">vga_irq_set_state</a>(<a class=\"id\" href=\"#conflict\">conflict</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bits\">pci_bits</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lwants\">lwants</a> &amp; (<a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>|<a class=\"id\" href=\"#VGA_RSRC_NORMAL_MEM\">VGA_RSRC_NORMAL_MEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bits\">pci_bits</a> |= <a class=\"id\" href=\"#PCI_COMMAND_MEMORY\">PCI_COMMAND_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lwants\">lwants</a> &amp; (<a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>|<a class=\"id\" href=\"#VGA_RSRC_NORMAL_IO\">VGA_RSRC_NORMAL_IO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bits\">pci_bits</a> |= <a class=\"id\" href=\"#PCI_COMMAND_IO\">PCI_COMMAND_IO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_set_vga_state\">pci_set_vga_state</a>(<a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#pci_bits\">pci_bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#change_bridge\">change_bridge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#owns\">owns</a> &= ~<a class=\"id\" href=\"#lwants\">lwants</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If he also owned non-legacy, that is no longer the case */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lwants\">lwants</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#owns\">owns</a> &= ~<a class=\"id\" href=\"#VGA_RSRC_NORMAL_MEM\">VGA_RSRC_NORMAL_MEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lwants\">lwants</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a>-><a class=\"id\" href=\"#owns\">owns</a> &= ~<a class=\"id\" href=\"#VGA_RSRC_NORMAL_IO\">VGA_RSRC_NORMAL_IO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#enable_them\">enable_them</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* ok dude, we got it, everybody conflicting has been disabled, let's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enable us. Make sure we don't mark a bit in \"owns\" that we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * also have in \"decodes\". We can lock resources we don't decode but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not own them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_bits\">pci_bits</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wants\">wants</a> &amp; (<a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>|<a class=\"id\" href=\"#VGA_RSRC_NORMAL_MEM\">VGA_RSRC_NORMAL_MEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bits\">pci_bits</a> |= <a class=\"id\" href=\"#PCI_COMMAND_MEMORY\">PCI_COMMAND_MEMORY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wants\">wants</a> &amp; (<a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>|<a class=\"id\" href=\"#VGA_RSRC_NORMAL_IO\">VGA_RSRC_NORMAL_IO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bits\">pci_bits</a> |= <a class=\"id\" href=\"#PCI_COMMAND_IO\">PCI_COMMAND_IO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_set_vga_state\">pci_set_vga_state</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#pci_bits\">pci_bits</a>, !!(<a class=\"id\" href=\"#wants\">wants</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vga_irq_set_state\">vga_irq_set_state</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a> |= (<a class=\"id\" href=\"#wants\">wants</a> &amp; <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a>);", 
"<a class=\"id\" href=\"#lock_them\">lock_them</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#locks\">locks</a> |= (<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#io_lock_cnt\">io_lock_cnt</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#mem_lock_cnt\">mem_lock_cnt</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_NORMAL_IO\">VGA_RSRC_NORMAL_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#io_norm_cnt\">io_norm_cnt</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_NORMAL_MEM\">VGA_RSRC_NORMAL_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#mem_norm_cnt\">mem_norm_cnt</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__vga_put\">__vga_put</a>(struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>, unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#old_locks\">old_locks</a> = <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#locks\">locks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update our counters, and account for equivalent legacy resources</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we decode them</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_NORMAL_IO\">VGA_RSRC_NORMAL_IO</a>) && <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#io_norm_cnt\">io_norm_cnt</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#io_norm_cnt\">io_norm_cnt</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsrc\">rsrc</a> |= <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_NORMAL_MEM\">VGA_RSRC_NORMAL_MEM</a>) && <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#mem_norm_cnt\">mem_norm_cnt</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#mem_norm_cnt\">mem_norm_cnt</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsrc\">rsrc</a> |= <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>) && <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#io_lock_cnt\">io_lock_cnt</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#io_lock_cnt\">io_lock_cnt</a>--;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rsrc\">rsrc</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>) && <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#mem_lock_cnt\">mem_lock_cnt</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#mem_lock_cnt\">mem_lock_cnt</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Just clear lock bits, we do lazy operations so we don't really</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have to bother about anything else at this point</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#io_lock_cnt\">io_lock_cnt</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#locks\">locks</a> &= ~<a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#mem_lock_cnt\">mem_lock_cnt</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#locks\">locks</a> &= ~<a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Kick the wait queue in case somebody was waiting if we actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * released something</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_locks\">old_locks</a> != <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#locks\">locks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#vga_wait_queue\">vga_wait_queue</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#vga_get\">vga_get</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>, int <a class=\"id\" href=\"#interruptible\">interruptible</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>, *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vga_check_first_use\">vga_check_first_use</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* The one who calls us should check for this, but lets be sure... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#vga_default_device\">vga_default_device</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a> = <a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a> = <a class=\"id\" href=\"#__vga_tryget\">__vga_tryget</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>, <a class=\"id\" href=\"#rsrc\">rsrc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict\">conflict</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have a conflict, we wait until somebody kicks the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * work queue. Currently we have one work queue that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kick each time some resources are released, but it would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be fairly easy to have a per device one so that we only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need to attach to the conflicting device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_entry\">init_waitqueue_entry</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(&amp;<a class=\"id\" href=\"#vga_wait_queue\">vga_wait_queue</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#interruptible\">interruptible</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#vga_wait_queue\">vga_wait_queue</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vga_get\">vga_get</a>);", 
"", 
"int <a class=\"id\" href=\"#vga_tryget\">vga_tryget</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vga_check_first_use\">vga_check_first_use</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The one who calls us should check for this, but lets be sure... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#vga_default_device\">vga_default_device</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a> = <a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bail\">bail</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__vga_tryget\">__vga_tryget</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>, <a class=\"id\" href=\"#rsrc\">rsrc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<a class=\"id\" href=\"#bail\">bail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vga_tryget\">vga_tryget</a>);", 
"", 
"void <a class=\"id\" href=\"#vga_put\">vga_put</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#rsrc\">rsrc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The one who calls us should check for this, but lets be sure... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#vga_default_device\">vga_default_device</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a> = <a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bail\">bail</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vga_put\">__vga_put</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>, <a class=\"id\" href=\"#rsrc\">rsrc</a>);", 
"<a class=\"id\" href=\"#bail\">bail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vga_put\">vga_put</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Currently, we assume that the \"initial\" setup of the system is</span>", 
"<span class=\"comment\"> * not sane, that is we come up with conflicting devices and let</span>", 
"<span class=\"comment\"> * the arbiter's client decides if devices decodes or not legacy</span>", 
"<span class=\"comment\"> * things.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#vga_arbiter_add_pci_device\">vga_arbiter_add_pci_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only deal with VGA class devices */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) != <a class=\"id\" href=\"#PCI_CLASS_DISPLAY_VGA\">PCI_CLASS_DISPLAY_VGA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#vga_device\">vga_device</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"vgaarb: failed to allocate pci device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* What to do on allocation failure ? For now, let's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * just do nothing, I'm not sure there is anything saner</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to be done</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>, 0, sizeof(*<a class=\"id\" href=\"#vgadev\">vgadev</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Take lock &amp; check for duplicates */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(<a class=\"id\" href=\"#pdev\">pdev</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#pdev\">pdev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* By default, assume we decode everything */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a> = <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a> | <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#VGA_RSRC_NORMAL_IO\">VGA_RSRC_NORMAL_IO</a> | <a class=\"id\" href=\"#VGA_RSRC_NORMAL_MEM\">VGA_RSRC_NORMAL_MEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* by default mark it as decoding */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vga_decode_count\">vga_decode_count</a>++;", 
"<span class=\"ts\"/><span class=\"comment\">/* Mark that we \"own\" resources based on our enables, we will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clear that below if the bridge isn't forwarding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#PCI_COMMAND_IO\">PCI_COMMAND_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a> |= <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#PCI_COMMAND_MEMORY\">PCI_COMMAND_MEMORY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a> |= <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if VGA cycles can get down to us */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#bus\">bus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bridge\">bridge</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_BRIDGE_CONTROL\">PCI_BRIDGE_CONTROL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#l\">l</a> &amp; <a class=\"id\" href=\"#PCI_BRIDGE_CTL_VGA\">PCI_BRIDGE_CTL_VGA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Deal with VGA default device. Use first enabled one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by default if arch doesn't have it's own hook</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_HAS_VGA_DEFAULT_DEVICE\">__ARCH_HAS_VGA_DEFAULT_DEVICE</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vga_default\">vga_default</a> == <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>) == <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_default\">vga_default</a> = <a class=\"id\" href=\"#pci_dev_get\">pci_dev_get</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add to the list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#vga_list\">vga_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vga_count\">vga_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"vgaarb: device added: PCI:%s,decodes=%s,owns=%s,locks=%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_name\">pci_name</a>(<a class=\"id\" href=\"#pdev\">pdev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_iostate_to_str\">vga_iostate_to_str</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_iostate_to_str\">vga_iostate_to_str</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_iostate_to_str\">vga_iostate_to_str</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#locks\">locks</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#vga_arbiter_del_pci_device\">vga_arbiter_del_pci_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a> = <a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bail\">bail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vga_default\">vga_default</a> == <a class=\"id\" href=\"#pdev\">pdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#vga_default\">vga_default</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_default\">vga_default</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a> &amp; (<a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a> | <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_decode_count\">vga_decode_count</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove entry from list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vga_count\">vga_count</a>--;", 
"<span class=\"ts\"/><span class=\"comment\">/* Notify userland driver that the device is gone so it discards</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's copies of the pci_dev pointer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vga_arb_device_card_gone\">vga_arb_device_card_gone</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wake up all possible waiters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#vga_wait_queue\">vga_wait_queue</a>);", 
"<a class=\"id\" href=\"#bail\">bail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* this is called with the lock */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vga_update_device_decodes\">vga_update_device_decodes</a>(struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#new_decodes\">new_decodes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_decodes\">old_decodes</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#new_vgadev\">new_vgadev</a>, *<a class=\"id\" href=\"#conflict\">conflict</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_decodes\">old_decodes</a> = <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a> = <a class=\"id\" href=\"#new_decodes\">new_decodes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"vgaarb: device changed decodes: PCI:%s,olddecodes=%s,decodes=%s:owns=%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_name\">pci_name</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#pdev\">pdev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_iostate_to_str\">vga_iostate_to_str</a>(<a class=\"id\" href=\"#old_decodes\">old_decodes</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_iostate_to_str\">vga_iostate_to_str</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_iostate_to_str\">vga_iostate_to_str</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a>));", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if we own the decodes we should move them along to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   another card */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a> &amp; <a class=\"id\" href=\"#old_decodes\">old_decodes</a>) && (<a class=\"id\" href=\"#vga_count\">vga_count</a> &gt; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set us to own nothing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a> &= ~<a class=\"id\" href=\"#old_decodes\">old_decodes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#new_vgadev\">new_vgadev</a>, &amp;<a class=\"id\" href=\"#vga_list\">vga_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#new_vgadev\">new_vgadev</a> != <a class=\"id\" href=\"#vgadev\">vgadev</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#new_vgadev\">new_vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"vgaarb: transferring owner from PCI:%s to PCI:%s\\n\", <a class=\"id\" href=\"#pci_name\">pci_name</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#pdev\">pdev</a>), <a class=\"id\" href=\"#pci_name\">pci_name</a>(<a class=\"id\" href=\"#new_vgadev\">new_vgadev</a>-><a class=\"id\" href=\"#pdev\">pdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conflict\">conflict</a> = <a class=\"id\" href=\"#__vga_tryget\">__vga_tryget</a>(<a class=\"id\" href=\"#new_vgadev\">new_vgadev</a>, <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#conflict\">conflict</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__vga_put\">__vga_put</a>(<a class=\"id\" href=\"#new_vgadev\">new_vgadev</a>, <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* change decodes counter */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_decodes\">old_decodes</a> != <a class=\"id\" href=\"#new_decodes\">new_decodes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_decodes\">new_decodes</a> &amp; (<a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a> | <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_decode_count\">vga_decode_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_decode_count\">vga_decode_count</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"vgaarb: decoding count now is: %d\\n\", <a class=\"id\" href=\"#vga_decode_count\">vga_decode_count</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__vga_set_legacy_decoding\">__vga_set_legacy_decoding</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#decodes\">decodes</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#userspace\">userspace</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#decodes\">decodes</a> &= <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MASK\">VGA_RSRC_LEGACY_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a> = <a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bail\">bail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't let userspace futz with kernel driver decodes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#userspace\">userspace</a> && <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#set_vga_decode\">set_vga_decode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bail\">bail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update the device decodes + counter */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vga_update_device_decodes\">vga_update_device_decodes</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>, <a class=\"id\" href=\"#decodes\">decodes</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX if somebody is going from \"doesn't decode\" to \"decodes\" state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here, additional care must be taken as we may have pending owner</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ship of non-legacy region ...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#bail\">bail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#vga_set_legacy_decoding\">vga_set_legacy_decoding</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#decodes\">decodes</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vga_set_legacy_decoding\">__vga_set_legacy_decoding</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#decodes\">decodes</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vga_set_legacy_decoding\">vga_set_legacy_decoding</a>);", 
"", 
"<span class=\"comment\">/* call with NULL to unregister */</span>", 
"int <a class=\"id\" href=\"#vga_client_register\">vga_client_register</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, void *<a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#irq_set_state\">irq_set_state</a>)(void *<a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#state\">state</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int (*<a class=\"id\" href=\"#set_vga_decode\">set_vga_decode</a>)(void *<a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#decode\">decode</a>))", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a> = <a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vgadev\">vgadev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bail\">bail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#irq_set_state\">irq_set_state</a> = <a class=\"id\" href=\"#irq_set_state\">irq_set_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#set_vga_decode\">set_vga_decode</a> = <a class=\"id\" href=\"#set_vga_decode\">set_vga_decode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#cookie\">cookie</a> = <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<a class=\"id\" href=\"#bail\">bail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vga_client_register\">vga_client_register</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Char driver implementation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Semantics is:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  open       : open user instance of the arbitrer. by default, it's</span>", 
"<span class=\"comment\"> *                attached to the default VGA device of the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  close      : close user instance, release locks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  read       : return a string indicating the status of the target.</span>", 
"<span class=\"comment\"> *                an IO state string is of the form {io,mem,io+mem,none},</span>", 
"<span class=\"comment\"> *                mc and ic are respectively mem and io lock counts (for</span>", 
"<span class=\"comment\"> *                debugging/diagnostic only). \"decodes\" indicate what the</span>", 
"<span class=\"comment\"> *                card currently decodes, \"owns\" indicates what is currently</span>", 
"<span class=\"comment\"> *                enabled on it, and \"locks\" indicates what is locked by this</span>", 
"<span class=\"comment\"> *                card. If the card is unplugged, we get \"invalid\" then for</span>", 
"<span class=\"comment\"> *                card_ID and an -ENODEV error is returned for any command</span>", 
"<span class=\"comment\"> *                until a new card is targeted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   \"&lt;card_ID&gt;,decodes=&lt;io_state&gt;,owns=&lt;io_state&gt;,locks=&lt;io_state&gt; (ic,mc)\"</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * write       : write a command to the arbiter. List of commands is:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   target &lt;card_ID&gt;   : switch target to card &lt;card_ID&gt; (see below)</span>", 
"<span class=\"comment\"> *   lock &lt;io_state&gt;    : acquires locks on target (\"none\" is invalid io_state)</span>", 
"<span class=\"comment\"> *   trylock &lt;io_state&gt; : non-blocking acquire locks on target</span>", 
"<span class=\"comment\"> *   unlock &lt;io_state&gt;  : release locks on target</span>", 
"<span class=\"comment\"> *   unlock all         : release all locks on target held by this user</span>", 
"<span class=\"comment\"> *   decodes &lt;io_state&gt; : set the legacy decoding attributes for the card</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * poll         : event if something change on any card (not just the target)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * card_ID is of the form \"PCI:domain:bus:dev.fn\". It can be set to \"default\"</span>", 
"<span class=\"comment\"> * to go back to the system default card (TODO: not implemented yet).</span>", 
"<span class=\"comment\"> * Currently, only PCI is supported as a prefix, but the userland API may</span>", 
"<span class=\"comment\"> * support other bus types in the future, even if the current kernel</span>", 
"<span class=\"comment\"> * implementation doesn't.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note about locks:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The driver keeps track of which user has what locks on which card. It</span>", 
"<span class=\"comment\"> * supports stacking, like the kernel one. This complexifies the implementation</span>", 
"<span class=\"comment\"> * a bit, but makes the arbiter more tolerant to userspace problems and able</span>", 
"<span class=\"comment\"> * to properly cleanup in all cases when a process dies.</span>", 
"<span class=\"comment\"> * Currently, a max of 16 cards simultaneously can have locks issued from</span>", 
"<span class=\"comment\"> * userspace for a given user (file descriptor instance) of the arbiter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the device is hot-unplugged, there is a hook inside the module to notify</span>", 
"<span class=\"comment\"> * they being added/removed in the system and automatically added/removed in</span>", 
"<span class=\"comment\"> * the arbiter.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_USER_CARDS\">MAX_USER_CARDS</a>         <a class=\"id\" href=\"#CONFIG_VGA_ARB_MAX_GPUS\">CONFIG_VGA_ARB_MAX_GPUS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_INVALID_CARD\">PCI_INVALID_CARD</a>       ((struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *)-1UL)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each user has an array of these, tracking which cards have locks</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vga_arb_user_card\">vga_arb_user_card</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mem_cnt\">mem_cnt</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#io_cnt\">io_cnt</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#vga_arb_private\">vga_arb_private</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_arb_user_card\">vga_arb_user_card</a> <a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#MAX_USER_CARDS\">MAX_USER_CARDS</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#vga_user_list\">vga_user_list</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#vga_user_lock\">vga_user_lock</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function gets a string in the format: \"PCI:domain:bus:dev.fn\" and</span>", 
"<span class=\"comment\"> * returns the respective values. If the string is not in this format,</span>", 
"<span class=\"comment\"> * it returns 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#vga_pci_str_to_vars\">vga_pci_str_to_vars</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#count\">count</a>, unsigned int *<a class=\"id\" href=\"#domain\">domain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int *<a class=\"id\" href=\"#bus\">bus</a>, unsigned int *<a class=\"id\" href=\"#devfn\">devfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"PCI:%x:%x:%x.%x\", <a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#bus\">bus</a>, &amp;<a class=\"id\" href=\"#slot\">slot</a>, &amp;<a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> != 4)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#devfn\">devfn</a> = <a class=\"id\" href=\"#PCI_DEVFN\">PCI_DEVFN</a>(<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#vga_arb_read\">vga_arb_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_arb_private\">vga_arb_private</a> *<a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#lbuf\">lbuf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lbuf\">lbuf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(1024, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lbuf\">lbuf</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Shields against vga_arb_device_card_gone (pci_dev going</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * away), and allows access to vga list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are targetting the default, use it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#PCI_INVALID_CARD\">PCI_INVALID_CARD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#lbuf\">lbuf</a>, \"invalid\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find card vgadev structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a> = <a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wow, it's not in the list, that shouldn't happen,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * let's fix us up and return invalid card</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_arb_device_card_gone\">vga_arb_device_card_gone</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#lbuf\">lbuf</a>, \"invalid\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fill the buffer with infos */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#lbuf\">lbuf</a>, 1024,", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"count:%d,PCI:%s,decodes=%s,owns=%s,locks=%s(%d:%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#vga_decode_count\">vga_decode_count</a>, <a class=\"id\" href=\"#pci_name\">pci_name</a>(<a class=\"id\" href=\"#pdev\">pdev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#vga_iostate_to_str\">vga_iostate_to_str</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#decodes\">decodes</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#vga_iostate_to_str\">vga_iostate_to_str</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#owns\">owns</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#vga_iostate_to_str\">vga_iostate_to_str</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#locks\">locks</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#io_lock_cnt\">io_lock_cnt</a>, <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#mem_lock_cnt\">mem_lock_cnt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy that to user */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#lbuf\">lbuf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#lbuf\">lbuf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TODO: To avoid parsing inside kernel and to improve the speed we may</span>", 
"<span class=\"comment\"> * consider use ioctl here</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#vga_arb_write\">vga_arb_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_arb_private\">vga_arb_private</a> *<a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_arb_user_card\">vga_arb_user_card</a> *<a class=\"id\" href=\"#uc\">uc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>;", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#io_state\">io_state</a>;", 
"", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kbuf\">kbuf</a>, *<a class=\"id\" href=\"#curr_pos\">curr_pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#remaining\">remaining</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#count\">count</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kbuf\">kbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr_pos\">curr_pos</a> = <a class=\"id\" href=\"#kbuf\">kbuf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a>[<a class=\"id\" href=\"#count\">count</a>] = '\\0';<span class=\"ts\"/><span class=\"comment\">/* Just to make sure... */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, \"lock \", 5) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_pos\">curr_pos</a> += 5;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> -= 5;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"client 0x%p called 'lock'\\n\", <a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vga_str_to_iostate\">vga_str_to_iostate</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, <a class=\"id\" href=\"#remaining\">remaining</a>, &amp;<a class=\"id\" href=\"#io_state\">io_state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#EPROTO\">EPROTO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_state\">io_state</a> == <a class=\"id\" href=\"#VGA_RSRC_NONE\">VGA_RSRC_NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#EPROTO\">EPROTO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_get_uninterruptible\">vga_get_uninterruptible</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#io_state\">io_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update the client's locks lists... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_USER_CARDS\">MAX_USER_CARDS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#pdev\">pdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_state\">io_state</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#io_cnt\">io_cnt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_state\">io_state</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mem_cnt\">mem_cnt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, \"unlock \", 7) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_pos\">curr_pos</a> += 7;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> -= 7;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"client 0x%p called 'unlock'\\n\", <a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, \"all\", 3) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_state\">io_state</a> = <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a> | <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vga_str_to_iostate\">vga_str_to_iostate</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, <a class=\"id\" href=\"#remaining\">remaining</a>, &amp;<a class=\"id\" href=\"#io_state\">io_state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#EPROTO\">EPROTO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: Add this?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   if (io_state == VGA_RSRC_NONE) {</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   ret_val = -EPROTO;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   goto done;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   }</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_USER_CARDS\">MAX_USER_CARDS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#pdev\">pdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a> = &amp;<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#uc\">uc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_state\">io_state</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a> && <a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#io_cnt\">io_cnt</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_state\">io_state</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a> && <a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#mem_cnt\">mem_cnt</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_put\">vga_put</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#io_state\">io_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_state\">io_state</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#io_cnt\">io_cnt</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_state\">io_state</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#mem_cnt\">mem_cnt</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, \"trylock \", 8) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_pos\">curr_pos</a> += 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> -= 8;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"client 0x%p called 'trylock'\\n\", <a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vga_str_to_iostate\">vga_str_to_iostate</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, <a class=\"id\" href=\"#remaining\">remaining</a>, &amp;<a class=\"id\" href=\"#io_state\">io_state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#EPROTO\">EPROTO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: Add this?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   if (io_state == VGA_RSRC_NONE) {</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   ret_val = -EPROTO;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   goto done;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   }</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vga_tryget\">vga_tryget</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#io_state\">io_state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update the client's locks lists... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_USER_CARDS\">MAX_USER_CARDS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#pdev\">pdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_state\">io_state</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#io_cnt\">io_cnt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_state\">io_state</a> &amp; <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mem_cnt\">mem_cnt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, \"target \", 7) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#pbus\">pbus</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_pos\">curr_pos</a> += 7;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> -= 7;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"client 0x%p called 'target'\\n\", <a class=\"id\" href=\"#priv\">priv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if target is default */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, \"default\", 7))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#pci_dev_get\">pci_dev_get</a>(<a class=\"id\" href=\"#vga_default_device\">vga_default_device</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vga_pci_str_to_vars\">vga_pci_str_to_vars</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, <a class=\"id\" href=\"#remaining\">remaining</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#domain\">domain</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>, &amp;<a class=\"id\" href=\"#devfn\">devfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#EPROTO\">EPROTO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"vgaarb: %s ==> %x:%x:%x.%x\\n\", <a class=\"id\" href=\"#curr_pos\">curr_pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#devfn\">devfn</a>), <a class=\"id\" href=\"#PCI_FUNC\">PCI_FUNC</a>(<a class=\"id\" href=\"#devfn\">devfn</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pbus\">pbus</a> = <a class=\"id\" href=\"#pci_find_bus\">pci_find_bus</a>(<a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#bus\">bus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"vgaarb: pbus %p\\n\", <a class=\"id\" href=\"#pbus\">pbus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pbus\">pbus</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"vgaarb: invalid PCI domain and/or bus address %x:%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#bus\">bus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#pci_get_slot\">pci_get_slot</a>(<a class=\"id\" href=\"#pbus\">pbus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"vgaarb: pdev %p\\n\", <a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pdev\">pdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"vgaarb: invalid PCI address %x:%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgadev\">vgadev</a> = <a class=\"id\" href=\"#vgadev_find\">vgadev_find</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"vgaarb: vgadev %p\\n\", <a class=\"id\" href=\"#vgadev\">vgadev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"vgaarb: this pci device is not a vga device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#pdev\">pdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_USER_CARDS\">MAX_USER_CARDS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#pdev\">pdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#pdev\">pdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#io_cnt\">io_cnt</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mem_cnt\">mem_cnt</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#MAX_USER_CARDS\">MAX_USER_CARDS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"vgaarb: maximum user cards (%d) number reached!\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_USER_CARDS\">MAX_USER_CARDS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XXX: which value to return? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> =  -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, \"decodes \", 8) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_pos\">curr_pos</a> += 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> -= 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"vgaarb: client 0x%p called 'decodes'\\n\", <a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vga_str_to_iostate\">vga_str_to_iostate</a>(<a class=\"id\" href=\"#curr_pos\">curr_pos</a>, <a class=\"id\" href=\"#remaining\">remaining</a>, &amp;<a class=\"id\" href=\"#io_state\">io_state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#EPROTO\">EPROTO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__vga_set_legacy_decoding\">__vga_set_legacy_decoding</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#io_state\">io_state</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* If we got here, the message written is not part of the protocol! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EPROTO\">EPROTO</a>;", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#vga_arb_fpoll\">vga_arb_fpoll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> * <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_arb_private\">vga_arb_private</a> *<a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#vga_wait_queue\">vga_wait_queue</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#POLLIN\">POLLIN</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#vga_arb_open\">vga_arb_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_arb_private\">vga_arb_private</a> *<a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#vga_arb_private\">vga_arb_private</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#priv\">priv</a>, 0, sizeof(*<a class=\"id\" href=\"#priv\">priv</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#priv\">priv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_user_lock\">vga_user_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#vga_user_list\">vga_user_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_user_lock\">vga_user_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the client' lists of locks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#vga_default_device\">vga_default_device</a>(); <span class=\"comment\">/* Maybe this is still null! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[0].<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[0].<a class=\"id\" href=\"#io_cnt\">io_cnt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[0].<a class=\"id\" href=\"#mem_cnt\">mem_cnt</a> = 0;", 
"", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#vga_arb_release\">vga_arb_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_arb_private\">vga_arb_private</a> *<a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_arb_user_card\">vga_arb_user_card</a> *<a class=\"id\" href=\"#uc\">uc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_user_lock\">vga_user_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_USER_CARDS\">MAX_USER_CARDS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a> = &amp;<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#cards\">cards</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#pdev\">pdev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"uc->io_cnt == %d, uc->mem_cnt == %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#io_cnt\">io_cnt</a>, <a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#mem_cnt\">mem_cnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#io_cnt\">io_cnt</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_put\">vga_put</a>(<a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#VGA_RSRC_LEGACY_IO\">VGA_RSRC_LEGACY_IO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#mem_cnt\">mem_cnt</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_put\">vga_put</a>(<a class=\"id\" href=\"#uc\">uc</a>-><a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#VGA_RSRC_LEGACY_MEM\">VGA_RSRC_LEGACY_MEM</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_user_lock\">vga_user_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#vga_arb_device_card_gone\">vga_arb_device_card_gone</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * callback any registered clients to let them know we have a</span>", 
"<span class=\"comment\"> * change in VGA cards</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#vga_arbiter_notify_clients\">vga_arbiter_notify_clients</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vga_device\">vga_device</a> *<a class=\"id\" href=\"#vgadev\">vgadev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#new_decodes\">new_decodes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#new_state\">new_state</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vga_arbiter_used\">vga_arbiter_used</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>, &amp;<a class=\"id\" href=\"#vga_list\">vga_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vga_count\">vga_count</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_state\">new_state</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_state\">new_state</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#set_vga_decode\">set_vga_decode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_decodes\">new_decodes</a> = <a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#set_vga_decode\">set_vga_decode</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>-><a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#new_state\">new_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_update_device_decodes\">vga_update_device_decodes</a>(<a class=\"id\" href=\"#vgadev\">vgadev</a>, <a class=\"id\" href=\"#new_decodes\">new_decodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vga_lock\">vga_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pci_notify\">pci_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_pci_dev\">to_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#notify\">notify</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For now we're only intereted in devices added and removed. I didn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * test this thing here, so someone needs to double check for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cases of hotplugable vga cards. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#BUS_NOTIFY_ADD_DEVICE\">BUS_NOTIFY_ADD_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notify\">notify</a> = <a class=\"id\" href=\"#vga_arbiter_add_pci_device\">vga_arbiter_add_pci_device</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#BUS_NOTIFY_DEL_DEVICE\">BUS_NOTIFY_DEL_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notify\">notify</a> = <a class=\"id\" href=\"#vga_arbiter_del_pci_device\">vga_arbiter_del_pci_device</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify\">notify</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_arbiter_notify_clients\">vga_arbiter_notify_clients</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#pci_notifier\">pci_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#pci_notify\">pci_notify</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#vga_arb_device_fops\">vga_arb_device_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#vga_arb_read\">vga_arb_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#vga_arb_write\">vga_arb_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a> = <a class=\"id\" href=\"#vga_arb_fpoll\">vga_arb_fpoll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#vga_arb_open\">vga_arb_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#vga_arb_release\">vga_arb_release</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#miscdevice\">miscdevice</a> <a class=\"id\" href=\"#vga_arb_device\">vga_arb_device</a> = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MISC_DYNAMIC_MINOR\">MISC_DYNAMIC_MINOR</a>, \"vga_arbiter\", &amp;<a class=\"id\" href=\"#vga_arb_device_fops\">vga_arb_device_fops</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vga_arb_device_init\">vga_arb_device_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#misc_register\">misc_register</a>(&amp;<a class=\"id\" href=\"#vga_arb_device\">vga_arb_device</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"vgaarb: error %d registering device\\n\", <a class=\"id\" href=\"#rc\">rc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_register_notifier\">bus_register_notifier</a>(&amp;<a class=\"id\" href=\"#pci_bus_type\">pci_bus_type</a>, &amp;<a class=\"id\" href=\"#pci_notifier\">pci_notifier</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We add all pci devices satisfying vga class in the arbiter by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * default */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#pdev\">pdev</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_get_subsys\">pci_get_subsys</a>(<a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#pdev\">pdev</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vga_arbiter_add_pci_device\">vga_arbiter_add_pci_device</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"vgaarb: loaded\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#vga_arb_device_init\">vga_arb_device_init</a>);", 
];
xr_frag_insert('l/ed/d0c9d5f067c4ab1ab55a8ffad237f3369cf0f6.xr', __xr_tmp);
