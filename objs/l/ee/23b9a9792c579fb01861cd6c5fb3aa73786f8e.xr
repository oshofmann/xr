var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#dma_map_area\">dma_map_area</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_gart\">flush_gart</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bus\">bus</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free a DMA mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#gart_unmap_page\">gart_unmap_page</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#iommu_page\">iommu_page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#npages\">npages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_addr\">dma_addr</a> &lt; <a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a> + <a class=\"id\" href=\"#EMERGENCY_PAGES\">EMERGENCY_PAGES</a>*<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dma_addr\">dma_addr</a> >= <a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a> + <a class=\"id\" href=\"#iommu_size\">iommu_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_page\">iommu_page</a> = (<a class=\"id\" href=\"#dma_addr\">dma_addr</a> - <a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a>)>><a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#npages\">npages</a> = <a class=\"id\" href=\"#iommu_num_pages\">iommu_num_pages</a>(<a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#npages\">npages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_gatt_base\">iommu_gatt_base</a>[<a class=\"id\" href=\"#iommu_page\">iommu_page</a> + <a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#gart_unmapped_entry\">gart_unmapped_entry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_iommu\">free_iommu</a>(<a class=\"id\" href=\"#iommu_page\">iommu_page</a>, <a class=\"id\" href=\"#npages\">npages</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wrapper for pci_unmap_single working with scatterlists.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#gart_unmap_sg\">gart_unmap_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, int <a class=\"id\" href=\"#nents\">nents</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> || !<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gart_unmap_page\">gart_unmap_page</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Fallback for dma_map_sg in case of overflow */</span>", 
"static int <a class=\"id\" href=\"#dma_map_sg_nonforce\">dma_map_sg_nonforce</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#nents\">nents</a>, int <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IOMMU_DEBUG\">CONFIG_IOMMU_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"dma_map_sg overflow\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nonforced_iommu\">nonforced_iommu</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#dma_map_area\">dma_map_area</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#dir\">dir</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#bad_dma_addr\">bad_dma_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gart_unmap_sg\">gart_unmap_sg</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nents\">nents</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>[0].<a class=\"id\" href=\"#dma_length\">dma_length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_gart\">flush_gart</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nents\">nents</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Map multiple scatterlist entries continuous into the first. */</span>", 
"static int <a class=\"id\" href=\"#__dma_map_cont\">__dma_map_cont</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#nelems\">nelems</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sout\">sout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#iommu_start\">iommu_start</a> = <a class=\"id\" href=\"#alloc_iommu\">alloc_iommu</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pages\">pages</a>, 0);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#iommu_page\">iommu_page</a> = <a class=\"id\" href=\"#iommu_start\">iommu_start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_start\">iommu_start</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#phys_addr\">phys_addr</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#s\">s</a> != <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> == <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sout\">sout</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sout\">sout</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> += <a class=\"id\" href=\"#iommu_page\">iommu_page</a>*<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> + <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sout\">sout</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sout\">sout</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> += <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#phys_addr\">phys_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#iommu_num_pages\">iommu_num_pages</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#pages\">pages</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_gatt_base\">iommu_gatt_base</a>[<a class=\"id\" href=\"#iommu_page\">iommu_page</a>] = <a class=\"id\" href=\"#GPTE_ENCODE\">GPTE_ENCODE</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_page\">iommu_page</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#iommu_page\">iommu_page</a> - <a class=\"id\" href=\"#iommu_start\">iommu_start</a> != <a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#dma_map_cont\">dma_map_cont</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nelems\">nelems</a>,", 
"<span class=\"ts\"/>     struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sout\">sout</a>, unsigned long <a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#need\">need</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#need\">need</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#nelems\">nelems</a> != 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sout\">sout</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sout\">sout</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = <a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__dma_map_cont\">__dma_map_cont</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#sout\">sout</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * DMA map all entries in a scatterlist.</span>", 
"<span class=\"comment\"> * Merge chunks that have page aligned sizes into a continuous mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#gart_map_sg\">gart_map_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, int <a class=\"id\" href=\"#nents\">nents</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#s\">s</a>, *<a class=\"id\" href=\"#ps\">ps</a>, *<a class=\"id\" href=\"#start_sg\">start_sg</a>, *<a class=\"id\" href=\"#sgmap\">sgmap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need\">need</a> = 0, <a class=\"id\" href=\"#nextneed\">nextneed</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages\">pages</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#seg_size\">seg_size</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max_seg_size\">max_seg_size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nents\">nents</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#x86_dma_fallback_dev\">x86_dma_fallback_dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a><span class=\"ts\"/><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_sg\">start_sg</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sgmap\">sgmap</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seg_size\">seg_size</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_seg_size\">max_seg_size</a><span class=\"ts\"/>= <a class=\"id\" href=\"#dma_get_max_seg_size\">dma_get_max_seg_size</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ps\">ps</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>; <span class=\"comment\">/* shut up gcc */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a> == 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nextneed\">nextneed</a> = <a class=\"id\" href=\"#need_iommu\">need_iommu</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Handle the previous not yet processed entries */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Can only merge when the last chunk ends on a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page boundary and the new one doesn't have an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * offset.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#iommu_merge\">iommu_merge</a> || !<a class=\"id\" href=\"#nextneed\">nextneed</a> || !<a class=\"id\" href=\"#need\">need</a> || <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#offset\">offset</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a> + <a class=\"id\" href=\"#seg_size\">seg_size</a> &gt; <a class=\"id\" href=\"#max_seg_size\">max_seg_size</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#length\">length</a>) % <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_map_cont\">dma_map_cont</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#start_sg\">start_sg</a>, <a class=\"id\" href=\"#i\">i</a> - <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sgmap\">sgmap</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#need\">need</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seg_size\">seg_size</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgmap\">sgmap</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sg_next\">sg_next</a>(<a class=\"id\" href=\"#sgmap\">sgmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a><span class=\"ts\"/><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_sg\">start_sg</a><span class=\"ts\"/>= <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seg_size\">seg_size</a> += <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need\">need</a> = <a class=\"id\" href=\"#nextneed\">nextneed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#iommu_num_pages\">iommu_num_pages</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ps\">ps</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_map_cont\">dma_map_cont</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#start_sg\">start_sg</a>, <a class=\"id\" href=\"#i\">i</a> - <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sgmap\">sgmap</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#need\">need</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_gart\">flush_gart</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a> &lt; <a class=\"id\" href=\"#nents\">nents</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgmap\">sgmap</a> = <a class=\"id\" href=\"#sg_next\">sg_next</a>(<a class=\"id\" href=\"#sgmap\">sgmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgmap\">sgmap</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_gart\">flush_gart</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gart_unmap_sg\">gart_unmap_sg</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* When it was forced or merged try again in a dumb way */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#force_iommu\">force_iommu</a> || <a class=\"id\" href=\"#iommu_merge\">iommu_merge</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#dma_map_sg_nonforce\">dma_map_sg_nonforce</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#panic_on_overflow\">panic_on_overflow</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"dma_map_sg: overflow on %lu pages\\n\", <a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_full\">iommu_full</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pages\">pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#bad_dma_addr\">bad_dma_addr</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* allocate and map a coherent mapping */</span>", 
"static void *", 
"<a class=\"id\" href=\"#gart_alloc_coherent\">gart_alloc_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#dma_addr\">dma_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#align_mask\">align_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#force_iommu\">force_iommu</a> && !(<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> &= ~(<a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a> | <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#flag\">flag</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align_mask\">align_mask</a> = (1UL << <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>)) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#dma_map_area\">dma_map_area</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>, <a class=\"id\" href=\"#align_mask\">align_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_gart\">flush_gart</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#paddr\">paddr</a> != <a class=\"id\" href=\"#bad_dma_addr\">bad_dma_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dma_addr\">dma_addr</a> = <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dma_generic_alloc_coherent\">dma_generic_alloc_coherent</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* free a coherent mapping */</span>", 
"static void", 
"<a class=\"id\" href=\"#gart_free_coherent\">gart_free_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, void *<a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gart_unmap_page\">gart_unmap_page</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#gart_mapping_error\">gart_mapping_error</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dma_addr\">dma_addr</a> == <a class=\"id\" href=\"#bad_dma_addr\">bad_dma_addr</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#no_agp\">no_agp</a>;", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> unsigned long <a class=\"id\" href=\"#check_iommu_size\">check_iommu_size</a>(unsigned long <a class=\"id\" href=\"#aper\">aper</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#aper_size\">aper_size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#a\">a</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iommu_size\">iommu_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_size\">iommu_size</a> = <a class=\"id\" href=\"#aper_size\">aper_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#no_agp\">no_agp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_size\">iommu_size</a> /= 2;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#aper\">aper</a> + <a class=\"id\" href=\"#iommu_size\">iommu_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_size\">iommu_size</a> -= <a class=\"id\" href=\"#round_up\">round_up</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#PMD_PAGE_SIZE\">PMD_PAGE_SIZE</a>) - <a class=\"id\" href=\"#a\">a</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_size\">iommu_size</a> &lt; 64*1024*1024) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"PCI-DMA: Warning: Small IOMMU %luMB.\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" Consider increasing the AGP aperture in BIOS\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_size\">iommu_size</a> >> 20);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iommu_size\">iommu_size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> unsigned <a class=\"id\" href=\"#read_aperture\">read_aperture</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#aper_size\">aper_size</a> = 0, <a class=\"id\" href=\"#aper_base_32\">aper_base_32</a>, <a class=\"id\" href=\"#aper_order\">aper_order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#aper_base\">aper_base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD64_GARTAPERTUREBASE\">AMD64_GARTAPERTUREBASE</a>, &amp;<a class=\"id\" href=\"#aper_base_32\">aper_base_32</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD64_GARTAPERTURECTL\">AMD64_GARTAPERTURECTL</a>, &amp;<a class=\"id\" href=\"#aper_order\">aper_order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aper_order\">aper_order</a> = (<a class=\"id\" href=\"#aper_order\">aper_order</a> >> 1) &amp; 7;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aper_base\">aper_base</a> = <a class=\"id\" href=\"#aper_base_32\">aper_base_32</a> &amp; 0x7fff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aper_base\">aper_base</a> <<= 25;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aper_size\">aper_size</a> = (32 * 1024 * 1024) << <a class=\"id\" href=\"#aper_order\">aper_order</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#aper_base\">aper_base</a> + <a class=\"id\" href=\"#aper_size\">aper_size</a> &gt; 0x100000000UL || !<a class=\"id\" href=\"#aper_size\">aper_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aper_base\">aper_base</a> = 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#aper_size\">aper_size</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#aper_base\">aper_base</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#enable_gart_translations\">enable_gart_translations</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_k8_northbridges\">num_k8_northbridges</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#k8_northbridges\">k8_northbridges</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_gart_translation\">enable_gart_translation</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#agp_gatt_table\">agp_gatt_table</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flush the GART-TLB to remove stale entries */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k8_flush_garts\">k8_flush_garts</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If fix_up_north_bridges is set, the north bridges have to be fixed up on</span>", 
"<span class=\"comment\"> * resume in the same way as they are handled in gart_iommu_hole_init().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#fix_up_north_bridges\">fix_up_north_bridges</a>;", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#aperture_order\">aperture_order</a>;", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#aperture_alloc\">aperture_alloc</a>;", 
"", 
"void <a class=\"id\" href=\"#set_up_gart_resume\">set_up_gart_resume</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#aper_order\">aper_order</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#aper_alloc\">aper_alloc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fix_up_north_bridges\">fix_up_north_bridges</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aperture_order\">aperture_order</a> = <a class=\"id\" href=\"#aper_order\">aper_order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aperture_alloc\">aperture_alloc</a> = <a class=\"id\" href=\"#aper_alloc\">aper_alloc</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#gart_fixup_northbridges\">gart_fixup_northbridges</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fix_up_north_bridges\">fix_up_north_bridges</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"PCI-DMA: Restoring GART aperture settings\\n\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_k8_northbridges\">num_k8_northbridges</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#k8_northbridges\">k8_northbridges</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't enable translations just yet.  That is the next</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * step.  Restore the pre-suspend aperture settings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD64_GARTAPERTURECTL\">AMD64_GARTAPERTURECTL</a>, <a class=\"id\" href=\"#aperture_order\">aperture_order</a> << 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD64_GARTAPERTUREBASE\">AMD64_GARTAPERTUREBASE</a>, <a class=\"id\" href=\"#aperture_alloc\">aperture_alloc</a> >> 25);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#gart_resume\">gart_resume</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"PCI-DMA: Resuming GART IOMMU\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gart_fixup_northbridges\">gart_fixup_northbridges</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_gart_translations\">enable_gart_translations</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#gart_suspend\">gart_suspend</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> <a class=\"id\" href=\"#gart_sysdev_class\">gart_sysdev_class</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"gart\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a><span class=\"ts\"/>= <a class=\"id\" href=\"#gart_suspend\">gart_suspend</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#gart_resume\">gart_resume</a>,", 
"", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#sys_device\">sys_device</a> <a class=\"id\" href=\"#device_gart\">device_gart</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cls\">cls</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#gart_sysdev_class\">gart_sysdev_class</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Private Northbridge GATT initialization in case we cannot use the</span>", 
"<span class=\"comment\"> * AGP driver for some reason.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#init_k8_gatt\">init_k8_gatt</a>(struct <a class=\"id\" href=\"#agp_kern_info\">agp_kern_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#aper_size\">aper_size</a>, <a class=\"id\" href=\"#gatt_size\">gatt_size</a>, <a class=\"id\" href=\"#new_aper_size\">new_aper_size</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#aper_base\">aper_base</a>, <a class=\"id\" href=\"#new_aper_base\">new_aper_base</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#gatt\">gatt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"PCI-DMA: Disabling AGP.\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aper_size\">aper_size</a> = <a class=\"id\" href=\"#aper_base\">aper_base</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#aper_size\">aper_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_k8_northbridges\">num_k8_northbridges</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#k8_northbridges\">k8_northbridges</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_aper_base\">new_aper_base</a> = <a class=\"id\" href=\"#read_aperture\">read_aperture</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#new_aper_size\">new_aper_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_aper_base\">new_aper_base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nommu\">nommu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#aper_base\">aper_base</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aper_size\">aper_size</a> = <a class=\"id\" href=\"#new_aper_size\">new_aper_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aper_base\">aper_base</a> = <a class=\"id\" href=\"#new_aper_base\">new_aper_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#aper_size\">aper_size</a> != <a class=\"id\" href=\"#new_aper_size\">new_aper_size</a> || <a class=\"id\" href=\"#aper_base\">aper_base</a> != <a class=\"id\" href=\"#new_aper_base\">new_aper_base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nommu\">nommu</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#aper_base\">aper_base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nommu\">nommu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#aper_base\">aper_base</a> = <a class=\"id\" href=\"#aper_base\">aper_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#aper_size\">aper_size</a> = <a class=\"id\" href=\"#aper_size\">aper_size</a> >> 20;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gatt_size\">gatt_size</a> = (<a class=\"id\" href=\"#aper_size\">aper_size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) * sizeof(<a class=\"id\" href=\"#u32\">u32</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gatt\">gatt</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#gatt_size\">gatt_size</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gatt\">gatt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Cannot allocate GATT table\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#set_memory_uc\">set_memory_uc</a>((unsigned long)<a class=\"id\" href=\"#gatt\">gatt</a>, <a class=\"id\" href=\"#gatt_size\">gatt_size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Could not set GART PTEs to uncacheable pages\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#agp_gatt_table\">agp_gatt_table</a> = <a class=\"id\" href=\"#gatt\">gatt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_class_register\">sysdev_class_register</a>(&amp;<a class=\"id\" href=\"#gart_sysdev_class\">gart_sysdev_class</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_register\">sysdev_register</a>(&amp;<a class=\"id\" href=\"#device_gart\">device_gart</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Could not register gart_sysdev -- \"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"would corrupt data on next suspend\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_gart\">flush_gart</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"PCI-DMA: aperture base @ %x size %u KB\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#aper_base\">aper_base</a>, <a class=\"id\" href=\"#aper_size\">aper_size</a>>>10);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#nommu\">nommu</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Should not happen anymore */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"PCI-DMA: More than 4GB of RAM and no IOMMU\\n\"", 
"<span class=\"ts\"/>       \"falling back to iommu=soft.\\n\");", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dma_map_ops\">dma_map_ops</a> <a class=\"id\" href=\"#gart_dma_ops\">gart_dma_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map_sg\">map_sg</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#gart_map_sg\">gart_map_sg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmap_sg\">unmap_sg</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#gart_unmap_sg\">gart_unmap_sg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map_page\">map_page</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#gart_map_page\">gart_map_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmap_page\">unmap_page</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#gart_unmap_page\">gart_unmap_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#alloc_coherent\">alloc_coherent</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#gart_alloc_coherent\">gart_alloc_coherent</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free_coherent\">free_coherent</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#gart_free_coherent\">gart_free_coherent</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mapping_error\">mapping_error</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#gart_mapping_error\">gart_mapping_error</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#gart_iommu_shutdown\">gart_iommu_shutdown</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't shutdown it if there is AGP installed */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#no_agp\">no_agp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_k8_northbridges\">num_k8_northbridges</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ctl\">ctl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#k8_northbridges\">k8_northbridges</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD64_GARTAPERTURECTL\">AMD64_GARTAPERTURECTL</a>, &amp;<a class=\"id\" href=\"#ctl\">ctl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctl\">ctl</a> &= ~<a class=\"id\" href=\"#GARTEN\">GARTEN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD64_GARTAPERTURECTL\">AMD64_GARTAPERTURECTL</a>, <a class=\"id\" href=\"#ctl\">ctl</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#gart_iommu_init\">gart_iommu_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#agp_kern_info\">agp_kern_info</a> <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#iommu_start\">iommu_start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#aper_base\">aper_base</a>, <a class=\"id\" href=\"#aper_size\">aper_size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#scratch\">scratch</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_k8_northbridges\">num_k8_northbridges</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_AGP_AMD64\">CONFIG_AGP_AMD64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#no_agp\">no_agp</a> = 1;", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/* Makefile puts PCI initialization via subsys_initcall first. */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Add other K8 AGP bridge drivers here */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#no_agp\">no_agp</a> = <a class=\"id\" href=\"#no_agp\">no_agp</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#agp_amd64_init\">agp_amd64_init</a>() &lt; 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#agp_copy_info\">agp_copy_info</a>(<a class=\"id\" href=\"#agp_bridge\">agp_bridge</a>, &amp;<a class=\"id\" href=\"#info\">info</a>) &lt; 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#no_iommu\">no_iommu</a> ||", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#force_iommu\">force_iommu</a> && <a class=\"id\" href=\"#max_pfn\">max_pfn</a> <= <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a>) ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#gart_iommu_aperture\">gart_iommu_aperture</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#no_agp\">no_agp</a> && <a class=\"id\" href=\"#init_k8_gatt\">init_k8_gatt</a>(&amp;<a class=\"id\" href=\"#info\">info</a>) &lt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max_pfn\">max_pfn</a> &gt; <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"More than 4GB of memory but GART IOMMU not available.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"falling back to iommu=soft.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need to map that range */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aper_size\">aper_size</a><span class=\"ts\"/>= <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#aper_size\">aper_size</a> << 20;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aper_base\">aper_base</a><span class=\"ts\"/>= <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#aper_base\">aper_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#aper_base\">aper_base</a>>><a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) + (<a class=\"id\" href=\"#aper_size\">aper_size</a>>><a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pfn\">end_pfn</a> &gt; <a class=\"id\" href=\"#max_low_pfn_mapped\">max_low_pfn_mapped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = (<a class=\"id\" href=\"#aper_base\">aper_base</a>>><a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_memory_mapping\">init_memory_mapping</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"PCI-DMA: using GART IOMMU.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_size\">iommu_size</a> = <a class=\"id\" href=\"#check_iommu_size\">check_iommu_size</a>(<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#aper_base\">aper_base</a>, <a class=\"id\" href=\"#aper_size\">aper_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_pages\">iommu_pages</a> = <a class=\"id\" href=\"#iommu_size\">iommu_size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_gart_bitmap\">iommu_gart_bitmap</a> = (void *) <a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#iommu_pages\">iommu_pages</a>/8));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iommu_gart_bitmap\">iommu_gart_bitmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Cannot allocate iommu bitmap\\n\");", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IOMMU_LEAK\">CONFIG_IOMMU_LEAK</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#leak_trace\">leak_trace</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dma_debug_resize_entries\">dma_debug_resize_entries</a>(<a class=\"id\" href=\"#iommu_pages\">iommu_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PCI-DMA: Cannot trace all the entries\\n\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Out of IOMMU space handling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reserve some invalid pages at the beginning of the GART.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_set\">bitmap_set</a>(<a class=\"id\" href=\"#iommu_gart_bitmap\">iommu_gart_bitmap</a>, 0, <a class=\"id\" href=\"#EMERGENCY_PAGES\">EMERGENCY_PAGES</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"PCI-DMA: Reserving %luMB of IOMMU area in the AGP aperture\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#iommu_size\">iommu_size</a> >> 20);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#agp_memory_reserved\">agp_memory_reserved</a><span class=\"ts\"/>= <a class=\"id\" href=\"#iommu_size\">iommu_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_start\">iommu_start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#aper_size\">aper_size</a> - <a class=\"id\" href=\"#iommu_size\">iommu_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#aper_base\">aper_base</a> + <a class=\"id\" href=\"#iommu_start\">iommu_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bad_dma_addr\">bad_dma_addr</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_gatt_base\">iommu_gatt_base</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#agp_gatt_table\">agp_gatt_table</a> + (<a class=\"id\" href=\"#iommu_start\">iommu_start</a>>><a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unmap the IOMMU part of the GART. The alias of the page is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * always mapped with cache enabled and there is no full cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * coherency across the GART remapping. The unmapping avoids</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * automatic prefetches from the CPU allocating cache lines in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there. All CPU accesses are done via the direct mapping to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the backing memory. The GART address is only used by PCI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_memory_np\">set_memory_np</a>((unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#iommu_bus_base\">iommu_bus_base</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_size\">iommu_size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tricky. The GART table remaps the physical memory range,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so the CPU wont notice potential aliases and if the memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is remapped to UC later on, we might surprise the PCI devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with a stray writeout of a cacheline. So play it sure and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do an explicit, full-scale wbinvd() _after_ having marked all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pages as Not-Present:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wbinvd\">wbinvd</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now all caches are flushed and we can safely enable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * GART hardware.  Doing it early leaves the possibility</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of stale cache entries that can lead to GART PTE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * errors.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_gart_translations\">enable_gart_translations</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to workaround a bug (thanks to BenH):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set unmapped entries to a scratch page instead of 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Any prefetches that hit unmapped entries won't get an bus abort</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then. (P2P bridge may be prefetching on DMA reads).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scratch\">scratch</a> = <a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scratch\">scratch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Cannot allocate iommu scratch page\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gart_unmapped_entry\">gart_unmapped_entry</a> = <a class=\"id\" href=\"#GPTE_ENCODE\">GPTE_ENCODE</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#scratch\">scratch</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#EMERGENCY_PAGES\">EMERGENCY_PAGES</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#iommu_pages\">iommu_pages</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_gatt_base\">iommu_gatt_base</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#gart_unmapped_entry\">gart_unmapped_entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_gart\">flush_gart</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_ops\">dma_ops</a> = &amp;<a class=\"id\" href=\"#gart_dma_ops\">gart_dma_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#iommu_shutdown\">iommu_shutdown</a> = <a class=\"id\" href=\"#gart_iommu_shutdown\">gart_iommu_shutdown</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb\">swiotlb</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#gart_parse_options\">gart_parse_options</a>(char *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IOMMU_LEAK\">CONFIG_IOMMU_LEAK</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"leak\", 4)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leak_trace\">leak_trace</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == '=')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_leak_pages\">iommu_leak_pages</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_size\">iommu_size</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"fullflush\", 9))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_fullflush\">iommu_fullflush</a> = 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"nofullflush\", 11))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_fullflush\">iommu_fullflush</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"noagp\", 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#no_agp\">no_agp</a> = 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"noaperture\", 10))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fix_aperture\">fix_aperture</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* duplicated from pci-dma.c */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"force\", 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gart_iommu_aperture_allowed\">gart_iommu_aperture_allowed</a> = 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"allowed\", 7))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gart_iommu_aperture_allowed\">gart_iommu_aperture_allowed</a> = 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"memaper\", 7)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fallback_aper_force\">fallback_aper_force</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 7;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == '=') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fallback_aper_order\">fallback_aper_order</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/ee/23b9a9792c579fb01861cd6c5fb3aa73786f8e.xr', __xr_tmp);
