var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GCC stack protector support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Stack protector works by putting predefined pattern at the start of</span>", 
"<span class=\"comment\"> * the stack frame and verifying that it hasn't been overwritten when</span>", 
"<span class=\"comment\"> * returning from the function.  The pattern is called stack canary</span>", 
"<span class=\"comment\"> * and unfortunately gcc requires it to be at a fixed offset from %gs.</span>", 
"<span class=\"comment\"> * On x86_64, the offset is 40 bytes and on x86_32 20 bytes.  x86_64</span>", 
"<span class=\"comment\"> * and x86_32 use segment registers differently and thus handles this</span>", 
"<span class=\"comment\"> * requirement differently.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On x86_64, %gs is shared by percpu area and stack canary.  All</span>", 
"<span class=\"comment\"> * percpu symbols are zero based and %gs points to the base of percpu</span>", 
"<span class=\"comment\"> * area.  The first occupant of the percpu area is always</span>", 
"<span class=\"comment\"> * irq_stack_union which contains stack_canary at offset 40.  Userland</span>", 
"<span class=\"comment\"> * %gs is always saved and restored on kernel entry and exit using</span>", 
"<span class=\"comment\"> * swapgs, so stack protector doesn't add any complexity there.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On x86_32, it's slightly more complicated.  As in x86_64, %gs is</span>", 
"<span class=\"comment\"> * used for userland TLS.  Unfortunately, some processors are much</span>", 
"<span class=\"comment\"> * slower at loading segment registers with different value when</span>", 
"<span class=\"comment\"> * entering and leaving the kernel, so the kernel uses %fs for percpu</span>", 
"<span class=\"comment\"> * area and manages %gs lazily so that %gs is switched only when</span>", 
"<span class=\"comment\"> * necessary, usually during task switch.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As gcc requires the stack canary at %gs:20, %gs can't be managed</span>", 
"<span class=\"comment\"> * lazily if stack protector is enabled, so the kernel saves and</span>", 
"<span class=\"comment\"> * restores userland %gs on kernel entry and exit.  This behavior is</span>", 
"<span class=\"comment\"> * controlled by CONFIG_X86_32_LAZY_GS and accessors are defined in</span>", 
"<span class=\"comment\"> * system.h to hide the details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_STACKPROTECTOR_H\">_ASM_STACKPROTECTOR_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_STACKPROTECTOR_H\">_ASM_STACKPROTECTOR_H</a> 1", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CC_STACKPROTECTOR\">CONFIG_CC_STACKPROTECTOR</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tsc\">tsc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 24 byte read-only segment initializer for stack canary.  Linker</span>", 
"<span class=\"comment\"> * can't handle the address bit shifting.  Address will be set in</span>", 
"<span class=\"comment\"> * head_32 for boot CPU and setup_per_cpu_areas() for others.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GDT_STACK_CANARY_INIT\">GDT_STACK_CANARY_INIT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_STACK_CANARY\">GDT_ENTRY_STACK_CANARY</a>] = <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0x4090, 0, 0x18),", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize the stackprotector canary value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: this must only be called from functions that never return,</span>", 
"<span class=\"comment\"> * and it must always be inlined.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#boot_init_stack_canary\">boot_init_stack_canary</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#canary\">canary</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tsc\">tsc</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#offsetof\">offsetof</a>(union <a class=\"id\" href=\"#irq_stack_union\">irq_stack_union</a>, <a class=\"id\" href=\"#stack_canary\">stack_canary</a>) != 40);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We both use the random pool and the current TSC as a source</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of randomness. The TSC only matters for very early init,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there it already has some randomness on most systems. Later</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on during the bootup the random pool has true entropy too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(&amp;<a class=\"id\" href=\"#canary\">canary</a>, sizeof(<a class=\"id\" href=\"#canary\">canary</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsc\">tsc</a> = <a class=\"id\" href=\"#__native_read_tsc\">__native_read_tsc</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#canary\">canary</a> += <a class=\"id\" href=\"#tsc\">tsc</a> + (<a class=\"id\" href=\"#tsc\">tsc</a> << 32UL);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#stack_canary\">stack_canary</a> = <a class=\"id\" href=\"#canary\">canary</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_write\">percpu_write</a>(<a class=\"id\" href=\"#irq_stack_union\">irq_stack_union</a>.<a class=\"id\" href=\"#stack_canary\">stack_canary</a>, <a class=\"id\" href=\"#canary\">canary</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_write\">percpu_write</a>(<a class=\"id\" href=\"#stack_canary\">stack_canary</a>.<a class=\"id\" href=\"#canary\">canary</a>, <a class=\"id\" href=\"#canary\">canary</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#setup_stack_canary_segment\">setup_stack_canary_segment</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#canary\">canary</a> = (unsigned long)&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#stack_canary\">stack_canary</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#gdt_table\">gdt_table</a> = <a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> <a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#gdt_table\">gdt_table</a>[<a class=\"id\" href=\"#GDT_ENTRY_STACK_CANARY\">GDT_ENTRY_STACK_CANARY</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_desc_base\">set_desc_base</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#canary\">canary</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_gdt_entry\">write_gdt_entry</a>(<a class=\"id\" href=\"#gdt_table\">gdt_table</a>, <a class=\"id\" href=\"#GDT_ENTRY_STACK_CANARY\">GDT_ENTRY_STACK_CANARY</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#DESCTYPE_S\">DESCTYPE_S</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#load_stack_canary_segment\">load_stack_canary_segment</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"mov %0, %%gs\" : : \"r\" (<a class=\"id\" href=\"#__KERNEL_STACK_CANARY\">__KERNEL_STACK_CANARY</a>) : \"memory\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CC_STACKPROTECTOR */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GDT_STACK_CANARY_INIT\">GDT_STACK_CANARY_INIT</a>", 
"", 
"<span class=\"comment\">/* dummy boot_init_stack_canary() is defined in linux/stackprotector.h */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#setup_stack_canary_segment\">setup_stack_canary_segment</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{ }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#load_stack_canary_segment\">load_stack_canary_segment</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (\"mov %0, %%gs\" : : \"r\" (0));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CC_STACKPROTECTOR */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _ASM_STACKPROTECTOR_H */</span>", 
];
xr_frag_insert('l/ee/5c24b0a1c4bef87ec1d017a35bee71fca372d7.xr', __xr_tmp);
